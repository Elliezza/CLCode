<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/INode.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_i_node_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">INode.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_i_node_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_GRAPH_INODE_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_GRAPH_INODE_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_descriptor_8h.xhtml">arm_compute/graph/TensorDescriptor.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// Forward declarations</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">class </span>Graph;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">class </span>Edge;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span>INodeVisitor;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">class </span>Tensor;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_i_node.xhtml">   44</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a>();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1356f0d04912be3ec8d8ce7a2b0cddd2">~INode</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">INode</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">operator=</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69f975713069ef48d53ee5eacbd8ae3d">validate</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">NodeType</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69a6e8613e2e1b00de98610c2ae6288a">accept</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">INodeVisitor</a> &amp;v) = 0;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">forward_descriptors</a>() = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a98dd474c332ea76a71bd81b790d7e0d9">configure_output</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::string <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2073f3ae2a49f98a91315ed035f8669">id</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5332828f81f0c3bc766b90656c9ee631">graph</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5332828f81f0c3bc766b90656c9ee631">graph</a>();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">set_graph</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *g);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">set_id</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">set_common_node_parameters</a>(<a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab4d8c49b8b04fae8561238b8efb472f5">set_requested_target</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">set_assigned_target</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a09dab02145c91bb9be20fe98cbedc300">set_output_tensor</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> tid, <span class="keywordtype">size_t</span> idx);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> std::vector&lt;TensorID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a0ef7d7f8403624ac6304035338d6ac93">inputs</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> std::vector&lt;TensorID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a44a277f416cba6b9519cea6c0d7b04a4">outputs</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> std::vector&lt;EdgeID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5b9a9aab9410579c7047edee0ec69cac">input_edges</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> std::set&lt;EdgeID&gt; &amp;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a416772314f2c1aa4cd48fbcb0f6025c5">output_edges</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#af0afe1cf0818b2190a446aeaeb0c6d8a">input_id</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a8ae0ada78ab1e36619d0e761b0f56520">output_id</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac6dfcf4c1c7d4cb129fda6393e8c0b21">input</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a427ac30d0f5274436afbf5c78bc4f644">output</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75a9a1f1f3bbe2bb2301617e50e2950e">input_edge_id</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#adc95b681efb97109074e5c7d26e1d27e">input_edge</a>(<span class="keywordtype">size_t</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7db9a1c221b414ff11bd4a5b7b97ec8d">num_inputs</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a20ee33c4a581d8d3507dbb898d47d733">num_outputs</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#adddbd97837525a4714e28c955b3d98a4">requested_target</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a72123a16315dde55dade52690642f56c">assigned_target</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1_i_node.xhtml#afab89afd724f1b07b1aaad6bdc61c47a">  239</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>                *_graph;           </div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>                _id;              </div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>            _common_params;   </div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    std::vector&lt;TensorID&gt; _outputs;         </div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    std::vector&lt;EdgeID&gt;   _input_edges;     </div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    std::set&lt;EdgeID&gt;      _output_edges;    </div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>                _assigned_target; </div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;};</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_GRAPH_INODE_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="structarm__compute_1_1graph_1_1_node_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_params.xhtml">arm_compute::graph::NodeParams</a></div><div class="ttdoc">Common node parameters. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00165">Types.h:165</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a7069f1901ff50cd2ac6ba152cb106058"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7069f1901ff50cd2ac6ba152cb106058">arm_compute::graph::INode::set_assigned_target</a></div><div class="ttdeci">void set_assigned_target(Target target)</div><div class="ttdoc">Sets the final execution target. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a44a277f416cba6b9519cea6c0d7b04a4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a44a277f416cba6b9519cea6c0d7b04a4">arm_compute::graph::INode::outputs</a></div><div class="ttdeci">const std::vector&lt; TensorID &gt; &amp; outputs() const </div><div class="ttdoc">Returns outputs of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a1356f0d04912be3ec8d8ce7a2b0cddd2"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a1356f0d04912be3ec8d8ce7a2b0cddd2">arm_compute::graph::INode::~INode</a></div><div class="ttdeci">virtual ~INode()=default</div><div class="ttdoc">Destructor. </div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a75a9a1f1f3bbe2bb2301617e50e2950e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a75a9a1f1f3bbe2bb2301617e50e2950e">arm_compute::graph::INode::input_edge_id</a></div><div class="ttdeci">EdgeID input_edge_id(size_t idx) const </div><div class="ttdoc">Returns the edge ID of a given input of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a69a6e8613e2e1b00de98610c2ae6288a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69a6e8613e2e1b00de98610c2ae6288a">arm_compute::graph::INode::accept</a></div><div class="ttdeci">virtual void accept(INodeVisitor &amp;v)=0</div><div class="ttdoc">Accepts a node visitor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a416772314f2c1aa4cd48fbcb0f6025c5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a416772314f2c1aa4cd48fbcb0f6025c5">arm_compute::graph::INode::output_edges</a></div><div class="ttdeci">const std::set&lt; EdgeID &gt; &amp; output_edges() const </div><div class="ttdoc">Returns output edge set. </div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a98dd474c332ea76a71bd81b790d7e0d9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a98dd474c332ea76a71bd81b790d7e0d9">arm_compute::graph::INode::configure_output</a></div><div class="ttdeci">virtual TensorDescriptor configure_output(size_t idx) const =0</div><div class="ttdoc">Calculates output configuration. </div></div>
<div class="ttc" id="_tensor_descriptor_8h_xhtml"><div class="ttname"><a href="_tensor_descriptor_8h.xhtml">TensorDescriptor.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00051">Error.h:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ac2f34bc6eaa698b25680f2091dc29170"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2f34bc6eaa698b25680f2091dc29170">arm_compute::graph::INode::operator=</a></div><div class="ttdeci">INode &amp; operator=(const INode &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copy assigned (As this class contains pointers) ...</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5332828f81f0c3bc766b90656c9ee631"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5332828f81f0c3bc766b90656c9ee631">arm_compute::graph::INode::graph</a></div><div class="ttdeci">const Graph * graph() const </div><div class="ttdoc">Returns node&amp;#39;s Graph. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_af0afe1cf0818b2190a446aeaeb0c6d8a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#af0afe1cf0818b2190a446aeaeb0c6d8a">arm_compute::graph::INode::input_id</a></div><div class="ttdeci">TensorID input_id(size_t idx) const </div><div class="ttdoc">Returns the tensor ID of a given input of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a7db9a1c221b414ff11bd4a5b7b97ec8d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a7db9a1c221b414ff11bd4a5b7b97ec8d">arm_compute::graph::INode::num_inputs</a></div><div class="ttdeci">size_t num_inputs() const </div><div class="ttdoc">Returns number of inputs of the node. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a0ef7d7f8403624ac6304035338d6ac93"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a0ef7d7f8403624ac6304035338d6ac93">arm_compute::graph::INode::inputs</a></div><div class="ttdeci">const std::vector&lt; TensorID &gt; &amp; inputs() const </div><div class="ttdoc">Returns inputs of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a8ae0ada78ab1e36619d0e761b0f56520"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a8ae0ada78ab1e36619d0e761b0f56520">arm_compute::graph::INode::output_id</a></div><div class="ttdeci">TensorID output_id(size_t idx) const </div><div class="ttdoc">Returns the tensor ID of a given output of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ab4d8c49b8b04fae8561238b8efb472f5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ab4d8c49b8b04fae8561238b8efb472f5">arm_compute::graph::INode::set_requested_target</a></div><div class="ttdeci">void set_requested_target(Target target)</div><div class="ttdoc">Sets target preference. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a41ea547ddf32e27b4d3b6cc565ad67d1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a41ea547ddf32e27b4d3b6cc565ad67d1">arm_compute::graph::INode::INode</a></div><div class="ttdeci">INode()</div><div class="ttdoc">Constructor. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00044">INode.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a3ace781433ede299fb1dc8d0b02667b9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">arm_compute::graph::INode::set_graph</a></div><div class="ttdeci">void set_graph(Graph *g)</div><div class="ttdoc">Sets the graph that this node is registered to. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a72123a16315dde55dade52690642f56c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a72123a16315dde55dade52690642f56c">arm_compute::graph::INode::assigned_target</a></div><div class="ttdeci">Target assigned_target() const </div><div class="ttdoc">Returns assigned target for this node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a69f975713069ef48d53ee5eacbd8ae3d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a69f975713069ef48d53ee5eacbd8ae3d">arm_compute::graph::INode::validate</a></div><div class="ttdeci">virtual Status validate() const </div><div class="ttdoc">Validate node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a37627d5d5bba7f4a8690c71c2ab3cb07"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">arm_compute::graph::INode::name</a></div><div class="ttdeci">std::string name() const </div><div class="ttdoc">Returns node&amp;#39;s name. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_adc95b681efb97109074e5c7d26e1d27e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#adc95b681efb97109074e5c7d26e1d27e">arm_compute::graph::INode::input_edge</a></div><div class="ttdeci">Edge * input_edge(size_t idx) const </div><div class="ttdoc">Returns the edge of a given input of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5b9a9aab9410579c7047edee0ec69cac"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5b9a9aab9410579c7047edee0ec69cac">arm_compute::graph::INode::input_edges</a></div><div class="ttdeci">const std::vector&lt; EdgeID &gt; &amp; input_edges() const </div><div class="ttdoc">Returns input edge set. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16">arm_compute::graph::NodeType</a></div><div class="ttdeci">NodeType</div><div class="ttdoc">Supported nodes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00125">Types.h:125</a></div></div>
<div class="ttc" id="_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a483b76accbb02199c359bd5cf23dd476"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">arm_compute::graph::INode::set_id</a></div><div class="ttdeci">void set_id(NodeID id)</div><div class="ttdoc">Sets the node id. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00084">Types.h:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_aeadb909ea02bec78f92ca35ff0ccbaea"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#aeadb909ea02bec78f92ca35ff0ccbaea">arm_compute::graph::INode::set_common_node_parameters</a></div><div class="ttdeci">void set_common_node_parameters(NodeParams common_params)</div><div class="ttdoc">Sets common node parameters. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_abba17a56bbf16c7cbc7acd4aa54abcea"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">arm_compute::graph::EdgeID</a></div><div class="ttdeci">unsigned int EdgeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00058">Types.h:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ac2073f3ae2a49f98a91315ed035f8669"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac2073f3ae2a49f98a91315ed035f8669">arm_compute::graph::INode::id</a></div><div class="ttdeci">NodeID id() const </div><div class="ttdoc">Returns node&amp;#39;s ID. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8h_source.xhtml#l00050">Graph.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_adddbd97837525a4714e28c955b3d98a4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#adddbd97837525a4714e28c955b3d98a4">arm_compute::graph::INode::requested_target</a></div><div class="ttdeci">Target requested_target() const </div><div class="ttdoc">Returns requested target for this node. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00057">Types.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml">arm_compute::graph::Edge</a></div><div class="ttdoc">Graph Edge. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00039">Edge.h:39</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a427ac30d0f5274436afbf5c78bc4f644"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a427ac30d0f5274436afbf5c78bc4f644">arm_compute::graph::INode::output</a></div><div class="ttdeci">Tensor * output(size_t idx) const </div><div class="ttdoc">Returns the tensor of a given output of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_ac6dfcf4c1c7d4cb129fda6393e8c0b21"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#ac6dfcf4c1c7d4cb129fda6393e8c0b21">arm_compute::graph::INode::input</a></div><div class="ttdeci">Tensor * input(size_t idx) const </div><div class="ttdoc">Returns the tensor of a given input of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a09dab02145c91bb9be20fe98cbedc300"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a09dab02145c91bb9be20fe98cbedc300">arm_compute::graph::INode::set_output_tensor</a></div><div class="ttdeci">void set_output_tensor(TensorID tid, size_t idx)</div><div class="ttdoc">Sets the output tensor of at a given index. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5edbd8a4a1b75060bb3b49bc0ba2c6b0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">arm_compute::graph::INode::forward_descriptors</a></div><div class="ttdeci">virtual bool forward_descriptors()=0</div><div class="ttdoc">Forwards descriptor information to outputs if possible. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node&amp;#39;s type. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_visitor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node_visitor.xhtml">arm_compute::graph::INodeVisitor</a></div><div class="ttdoc">Node visitor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_visitor_8h_source.xhtml#l00034">INodeVisitor.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a615af95e19b5d9f74d2760183566a9a3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">arm_compute::graph::TensorID</a></div><div class="ttdeci">unsigned int TensorID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00056">Types.h:56</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a20ee33c4a581d8d3507dbb898d47d733"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a20ee33c4a581d8d3507dbb898d47d733">arm_compute::graph::INode::num_outputs</a></div><div class="ttdeci">size_t num_outputs() const </div><div class="ttdoc">Returns number of outputs of the node. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object. </div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00041">Tensor.h:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="_i_node_8h.xhtml">INode.h</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
