<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Graph Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1graph_1_1_graph.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">Graph Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> class.  
 <a href="classarm__compute_1_1graph_1_1_graph.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_graph_8h_source.xhtml">Graph.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0c40af42cad207665228815f0359bbd3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a0c40af42cad207665228815f0359bbd3">Graph</a> ()=default</td></tr>
<tr class="separator:a0c40af42cad207665228815f0359bbd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ec832327fd0a641f93af7cea4df3018"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a9ec832327fd0a641f93af7cea4df3018">Graph</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a720ead698a117f7a16af6496f61aa6b4">GraphID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>, std::string <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a>)</td></tr>
<tr class="memdesc:a9ec832327fd0a641f93af7cea4df3018"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a9ec832327fd0a641f93af7cea4df3018">More...</a><br /></td></tr>
<tr class="separator:a9ec832327fd0a641f93af7cea4df3018"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2249ab41ba672900ae7703ba6975179"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#aa2249ab41ba672900ae7703ba6975179">Graph</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;)=delete</td></tr>
<tr class="memdesc:aa2249ab41ba672900ae7703ba6975179"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#aa2249ab41ba672900ae7703ba6975179">More...</a><br /></td></tr>
<tr class="separator:aa2249ab41ba672900ae7703ba6975179"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbe0278ebf263a33f3d0b9b4be834961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#acbe0278ebf263a33f3d0b9b4be834961">operator=</a> (const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;)=delete</td></tr>
<tr class="memdesc:acbe0278ebf263a33f3d0b9b4be834961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy assigned (As this class contains pointers)  <a href="#acbe0278ebf263a33f3d0b9b4be834961">More...</a><br /></td></tr>
<tr class="separator:acbe0278ebf263a33f3d0b9b4be834961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a274f7443d93573083a86839782b5093c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a274f7443d93573083a86839782b5093c">Graph</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a274f7443d93573083a86839782b5093c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#a274f7443d93573083a86839782b5093c">More...</a><br /></td></tr>
<tr class="separator:a274f7443d93573083a86839782b5093c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7c768cbf48a5cf81c0cfc1fa27a94ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#ab7c768cbf48a5cf81c0cfc1fa27a94ef">operator=</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ab7c768cbf48a5cf81c0cfc1fa27a94ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move assigned.  <a href="#ab7c768cbf48a5cf81c0cfc1fa27a94ef">More...</a><br /></td></tr>
<tr class="separator:ab7c768cbf48a5cf81c0cfc1fa27a94ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ffda41b00085a84a5d4bc46f1106e17"><td class="memTemplParams" colspan="2">template&lt;typename NT , typename... Ts&gt; </td></tr>
<tr class="memitem:a3ffda41b00085a84a5d4bc46f1106e17"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3ffda41b00085a84a5d4bc46f1106e17">add_node</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a3ffda41b00085a84a5d4bc46f1106e17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a node to the graph.  <a href="#a3ffda41b00085a84a5d4bc46f1106e17">More...</a><br /></td></tr>
<tr class="separator:a3ffda41b00085a84a5d4bc46f1106e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09f8d22de4cd2a2881730ad58096c7c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a09f8d22de4cd2a2881730ad58096c7c1">remove_node</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid)</td></tr>
<tr class="memdesc:a09f8d22de4cd2a2881730ad58096c7c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the node with the given ID.  <a href="#a09f8d22de4cd2a2881730ad58096c7c1">More...</a><br /></td></tr>
<tr class="separator:a09f8d22de4cd2a2881730ad58096c7c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a538f789bf074c367457a6f8f32b83d2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a538f789bf074c367457a6f8f32b83d2d">add_connection</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> source, size_t source_idx, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> sink, size_t sink_idx)</td></tr>
<tr class="memdesc:a538f789bf074c367457a6f8f32b83d2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a connection between two nodes.  <a href="#a538f789bf074c367457a6f8f32b83d2d">More...</a><br /></td></tr>
<tr class="separator:a538f789bf074c367457a6f8f32b83d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8c62ae543a38ec4aac8f1a167fbb51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a4c8c62ae543a38ec4aac8f1a167fbb51">remove_connection</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> eid)</td></tr>
<tr class="memdesc:a4c8c62ae543a38ec4aac8f1a167fbb51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes an edge (connection)  <a href="#a4c8c62ae543a38ec4aac8f1a167fbb51">More...</a><br /></td></tr>
<tr class="separator:a4c8c62ae543a38ec4aac8f1a167fbb51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37627d5d5bba7f4a8690c71c2ab3cb07"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a37627d5d5bba7f4a8690c71c2ab3cb07">name</a> () const </td></tr>
<tr class="memdesc:a37627d5d5bba7f4a8690c71c2ab3cb07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns graph name.  <a href="#a37627d5d5bba7f4a8690c71c2ab3cb07">More...</a><br /></td></tr>
<tr class="separator:a37627d5d5bba7f4a8690c71c2ab3cb07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64b131493cd903b292d68fe1ee1f4a53"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a720ead698a117f7a16af6496f61aa6b4">GraphID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a> () const </td></tr>
<tr class="memdesc:a64b131493cd903b292d68fe1ee1f4a53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns graph id.  <a href="#a64b131493cd903b292d68fe1ee1f4a53">More...</a><br /></td></tr>
<tr class="separator:a64b131493cd903b292d68fe1ee1f4a53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafb52c79957a407905734204f7a8ebc6"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#aafb52c79957a407905734204f7a8ebc6">inputs</a> ()</td></tr>
<tr class="memdesc:aafb52c79957a407905734204f7a8ebc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns graph input nodes.  <a href="#aafb52c79957a407905734204f7a8ebc6">More...</a><br /></td></tr>
<tr class="separator:aafb52c79957a407905734204f7a8ebc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a224d8c205ef72199abefd671c25f542e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a224d8c205ef72199abefd671c25f542e">nodes</a> ()</td></tr>
<tr class="memdesc:a224d8c205ef72199abefd671c25f542e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns nodes of graph.  <a href="#a224d8c205ef72199abefd671c25f542e">More...</a><br /></td></tr>
<tr class="separator:a224d8c205ef72199abefd671c25f542e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae93973ccc862f01a4041bb3274ddb081"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#ae93973ccc862f01a4041bb3274ddb081">nodes</a> () const </td></tr>
<tr class="memdesc:ae93973ccc862f01a4041bb3274ddb081"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns nodes of graph.  <a href="#ae93973ccc862f01a4041bb3274ddb081">More...</a><br /></td></tr>
<tr class="separator:ae93973ccc862f01a4041bb3274ddb081"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8434872e0705e3f07f3d4a6470444716"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8434872e0705e3f07f3d4a6470444716">edges</a> () const </td></tr>
<tr class="memdesc:a8434872e0705e3f07f3d4a6470444716"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns edges of graph.  <a href="#a8434872e0705e3f07f3d4a6470444716">More...</a><br /></td></tr>
<tr class="separator:a8434872e0705e3f07f3d4a6470444716"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9972913a7f6954682f9614f88af36b7f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a9972913a7f6954682f9614f88af36b7f">tensors</a> ()</td></tr>
<tr class="memdesc:a9972913a7f6954682f9614f88af36b7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns tensors of graph.  <a href="#a9972913a7f6954682f9614f88af36b7f">More...</a><br /></td></tr>
<tr class="separator:a9972913a7f6954682f9614f88af36b7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ebebd7e246eb58254aa2cff70fa7242"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a6ebebd7e246eb58254aa2cff70fa7242">tensors</a> () const </td></tr>
<tr class="memdesc:a6ebebd7e246eb58254aa2cff70fa7242"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns tensors of graph.  <a href="#a6ebebd7e246eb58254aa2cff70fa7242">More...</a><br /></td></tr>
<tr class="separator:a6ebebd7e246eb58254aa2cff70fa7242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b93384d460474d7e07b8b298f22761"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>) const </td></tr>
<tr class="memdesc:a62b93384d460474d7e07b8b298f22761"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get node object given its id.  <a href="#a62b93384d460474d7e07b8b298f22761">More...</a><br /></td></tr>
<tr class="separator:a62b93384d460474d7e07b8b298f22761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc78c7c8e3f6e02846841e3b7f5a25ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#abc78c7c8e3f6e02846841e3b7f5a25ee">node</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>)</td></tr>
<tr class="memdesc:abc78c7c8e3f6e02846841e3b7f5a25ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get node object given its id.  <a href="#abc78c7c8e3f6e02846841e3b7f5a25ee">More...</a><br /></td></tr>
<tr class="separator:abc78c7c8e3f6e02846841e3b7f5a25ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ad9de12a27cddcaaefe58ee748c14a8"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8ad9de12a27cddcaaefe58ee748c14a8">edge</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>) const </td></tr>
<tr class="memdesc:a8ad9de12a27cddcaaefe58ee748c14a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get edge object given its id.  <a href="#a8ad9de12a27cddcaaefe58ee748c14a8">More...</a><br /></td></tr>
<tr class="separator:a8ad9de12a27cddcaaefe58ee748c14a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d8c803090dd66c66d28477b3023c98b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a3d8c803090dd66c66d28477b3023c98b">edge</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>)</td></tr>
<tr class="memdesc:a3d8c803090dd66c66d28477b3023c98b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get edge object given its id.  <a href="#a3d8c803090dd66c66d28477b3023c98b">More...</a><br /></td></tr>
<tr class="separator:a3d8c803090dd66c66d28477b3023c98b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf084c3010b986e758555e922f373684"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#acf084c3010b986e758555e922f373684">tensor</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>) const </td></tr>
<tr class="memdesc:acf084c3010b986e758555e922f373684"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor object given its id.  <a href="#acf084c3010b986e758555e922f373684">More...</a><br /></td></tr>
<tr class="separator:acf084c3010b986e758555e922f373684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d99577fd573980def404cb8da3a78dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a4d99577fd573980def404cb8da3a78dd">tensor</a> (<a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a64b131493cd903b292d68fe1ee1f4a53">id</a>)</td></tr>
<tr class="memdesc:a4d99577fd573980def404cb8da3a78dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get tensor object given its id.  <a href="#a4d99577fd573980def404cb8da3a78dd">More...</a><br /></td></tr>
<tr class="separator:a4d99577fd573980def404cb8da3a78dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> class. </p>
<p>Represents a multiple source - multiple sink directed graph </p>

<p>Definition at line <a class="el" href="_graph_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_graph_8h_source.xhtml">Graph.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a0c40af42cad207665228815f0359bbd3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a9ec832327fd0a641f93af7cea4df3018"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a720ead698a117f7a16af6496f61aa6b4">GraphID</a>&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> identification number. Can be used to differentiate between graphs. Default value 0 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> name. Default value empty string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa2249ab41ba672900ae7703ba6975179"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a class="anchor" id="a274f7443d93573083a86839782b5093c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a538f789bf074c367457a6f8f32b83d2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a> add_connection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>source_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>sink</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>sink_idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a connection between two nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">source</td><td>ID of the source node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">source_idx</td><td>Output index of the source node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sink</td><td>ID of the sink node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sink_idx</td><td>Input index of the sink node</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ID of this connection </dd></dl>

</div>
</div>
<a class="anchor" id="a3ffda41b00085a84a5d4bc46f1106e17"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_node </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a node to the graph. </p>
<dl class="section note"><dt>Note</dt><dd>Models a single output node</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">NT</td><td>Node operation </td></tr>
    <tr><td class="paramname">Ts</td><td>Arguments to operation</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>Node arguments</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ID of the node </dd></dl>

<p>Definition at line <a class="el" href="_graph_8h_source.xhtml#l00230">230</a> of file <a class="el" href="_graph_8h_source.xhtml">Graph.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">INode::forward_descriptors()</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::Input</a>, <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">Graph::node()</a>, <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">INode::set_graph()</a>, <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">INode::set_id()</a>, and <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">INode::type()</a>.</p>
<div class="fragment"><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::lock_guard&lt;arm_compute::Mutex&gt; lock(_mtx);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">// Create node</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid  = _nodes.size();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">auto</span>   <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a> = support::cpp14::make_unique&lt;NT&gt;(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">set_graph</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">set_id</a>(nid);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Keep track of input nodes</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>() == <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">NodeType::Input</a>)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        _tagged_nodes[<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">NodeType::Input</a>].push_back(nid);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Associate a new tensor with each output</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;output : <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>-&gt;_outputs)</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        output = create_tensor();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// Propagate node shape if possible</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">forward_descriptors</a>();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Add node to the graph nodes</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    _nodes.push_back(std::move(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>));</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">return</span> nid;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a62b93384d460474d7e07b8b298f22761"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const </div><div class="ttdoc">Get node object given its id. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a3ace781433ede299fb1dc8d0b02667b9"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a3ace781433ede299fb1dc8d0b02667b9">arm_compute::graph::INode::set_graph</a></div><div class="ttdeci">void set_graph(Graph *g)</div><div class="ttdoc">Sets the graph that this node is registered to. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a483b76accbb02199c359bd5cf23dd476"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a483b76accbb02199c359bd5cf23dd476">arm_compute::graph::INode::set_id</a></div><div class="ttdeci">void set_id(NodeID id)</div><div class="ttdoc">Sets the node id. </div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00057">Types.h:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a324118a6721dd6b8a9b9f4e327df2bf5">arm_compute::graph::NodeType::Input</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5edbd8a4a1b75060bb3b49bc0ba2c6b0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5edbd8a4a1b75060bb3b49bc0ba2c6b0">arm_compute::graph::INode::forward_descriptors</a></div><div class="ttdeci">virtual bool forward_descriptors()=0</div><div class="ttdoc">Forwards descriptor information to outputs if possible. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node&amp;#39;s type. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8ad9de12a27cddcaaefe58ee748c14a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a>* edge </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get edge object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" title="Graph Edge. ">Edge</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual edge object </dd></dl>

<p>Referenced by <a class="el" href="_b_f_s_8h_source.xhtml#l00045">arm_compute::graph::detail::all_inputs_are_visited()</a>, and <a class="el" href="_b_f_s_8h_source.xhtml#l00077">arm_compute::graph::bfs()</a>.</p>

</div>
</div>
<a class="anchor" id="a3d8c803090dd66c66d28477b3023c98b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a>* edge </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get edge object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml" title="Graph Edge. ">Edge</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual edge object </dd></dl>

</div>
</div>
<a class="anchor" id="a8434872e0705e3f07f3d4a6470444716"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a>&gt; &gt;&amp; edges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns edges of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd>Edges can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Edges of graph </dd></dl>

</div>
</div>
<a class="anchor" id="a64b131493cd903b292d68fe1ee1f4a53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a720ead698a117f7a16af6496f61aa6b4">GraphID</a> id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns graph id. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> id </dd></dl>

</div>
</div>
<a class="anchor" id="aafb52c79957a407905734204f7a8ebc6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;<a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&gt;&amp; inputs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns graph input nodes. </p>
<dl class="section return"><dt>Returns</dt><dd>vector containing the graph inputs </dd></dl>

<p>Referenced by <a class="el" href="_b_f_s_8h_source.xhtml#l00077">arm_compute::graph::bfs()</a>.</p>

</div>
</div>
<a class="anchor" id="a37627d5d5bba7f4a8690c71c2ab3cb07"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string name </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns graph name. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class. ">Graph</a> name </dd></dl>

</div>
</div>
<a class="anchor" id="a62b93384d460474d7e07b8b298f22761"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a>* node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get node object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Node ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual node object </dd></dl>

<p>Referenced by <a class="el" href="_graph_8h_source.xhtml#l00230">Graph::add_node()</a>, <a class="el" href="_b_f_s_8h_source.xhtml#l00077">arm_compute::graph::bfs()</a>, and <a class="el" href="_layers_8h_source.xhtml#l00468">BranchLayer::create_layer()</a>.</p>

</div>
</div>
<a class="anchor" id="abc78c7c8e3f6e02846841e3b7f5a25ee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a>* node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get node object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if node was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Node ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual node object </dd></dl>

</div>
</div>
<a class="anchor" id="a224d8c205ef72199abefd671c25f542e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a>&gt; &gt;&amp; nodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns nodes of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd>Nodes can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Nodes of graph </dd></dl>

<p>Referenced by <a class="el" href="_b_f_s_8h_source.xhtml#l00077">arm_compute::graph::bfs()</a>.</p>

</div>
</div>
<a class="anchor" id="ae93973ccc862f01a4041bb3274ddb081"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a>&gt; &gt;&amp; nodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns nodes of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd>Nodes can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Nodes of graph </dd></dl>

</div>
</div>
<a class="anchor" id="acbe0278ebf263a33f3d0b9b4be834961"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copy assigned (As this class contains pointers) </p>

</div>
</div>
<a class="anchor" id="ab7c768cbf48a5cf81c0cfc1fa27a94ef"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move assigned. </p>

</div>
</div>
<a class="anchor" id="a4c8c62ae543a38ec4aac8f1a167fbb51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool remove_connection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#abba17a56bbf16c7cbc7acd4aa54abcea">EdgeID</a>&#160;</td>
          <td class="paramname"><em>eid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes an edge (connection) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eid</td><td>Connection to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the removal took place else false </dd></dl>

</div>
</div>
<a class="anchor" id="a09f8d22de4cd2a2881730ad58096c7c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool remove_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>nid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove the node with the given ID. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nid</td><td>ID of the node to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the removal took place else false </dd></dl>

</div>
</div>
<a class="anchor" id="acf084c3010b986e758555e922f373684"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a>* tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get tensor object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if tensor was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual tensor object </dd></dl>

<p>Referenced by <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00044">arm_compute::graph::get_tensor_descriptor()</a>.</p>

</div>
</div>
<a class="anchor" id="a4d99577fd573980def404cb8da3a78dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a>* tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get tensor object given its id. </p>
<dl class="section warning"><dt>Warning</dt><dd>Can be nullptr if tensor was removed during the mutation steps of the graph</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> ID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The actual tensor object </dd></dl>

</div>
</div>
<a class="anchor" id="a9972913a7f6954682f9614f88af36b7f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a>&gt; &gt;&amp; tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns tensors of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Tensors of graph </dd></dl>

</div>
</div>
<a class="anchor" id="a6ebebd7e246eb58254aa2cff70fa7242"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a>&gt; &gt;&amp; tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns tensors of graph. </p>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object. ">Tensor</a> can be nullptr if they have been removed during the mutation steps of the graph</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Tensors of graph </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/graph/<a class="el" href="_graph_8h_source.xhtml">Graph.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:43 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
