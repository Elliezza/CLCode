<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/runtime/NEON/AssemblyHelper.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_assembly_helper_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">AssemblyHelper.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_assembly_helper_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_ASSEMBLY_HELPER_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_ASSEMBLY_HELPER_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_access_window_8h.xhtml">arm_compute/core/IAccessWindow.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_log_8h.xhtml">arm_compute/core/Log.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;arm_compute/core/NEON/kernels/assembly/arm_gemm.hpp&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_scheduler_8h.xhtml">arm_compute/runtime/NEON/NEScheduler.h</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput&gt;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue</a> final</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3174543728e6f78b211d600475b8ab9e">   49</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3174543728e6f78b211d600475b8ab9e">TypeOperator</a> = TypeInput;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#ac9f23d550c3fdf519d84948fc9e015c1">   51</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#ac9f23d550c3fdf519d84948fc9e015c1">TypeResult</a> = TypeOutput;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a4d00b55a18d07d51dd3c2d7a018cfdb3">   53</a></span>&#160;    <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a4d00b55a18d07d51dd3c2d7a018cfdb3">AssemblyKernelGlue</a>()</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        : <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#add93daba36f239482945a1b2428f35fc">_gemm_kernel_asm</a>(nullptr), <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a25380d912475d0de9f812208470ed658">_optimised_kernel</a>(nullptr), <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3c56e995d4dc7abbe0dc428c91677f5a">_a</a>(nullptr), <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#afbd52c7bb890e7e1b516ca458abe423e">_b</a>(nullptr), <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a795e046c4103b68ac2d3977d903a15d4">_d</a>(nullptr), <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a5bdfad560ce4bc3d80c8c5182eba0f47">_pretranspose</a>(nullptr)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a2b7261bda3dc469e02365df7719358b7">   58</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a2b7261bda3dc469e02365df7719358b7">AssemblyGemm</a> = arm_gemm::GemmCommon&lt;TypeInput, TypeOutput&gt;;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue&lt;TypeInput, TypeOutput&gt;</a> &amp;<a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a325adbd7f57154b4dc19cc84284b474b">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue&lt;TypeInput, TypeOutput&gt;</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a4d00b55a18d07d51dd3c2d7a018cfdb3">AssemblyKernelGlue</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue&lt;TypeInput, TypeOutput&gt;</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#add93daba36f239482945a1b2428f35fc">   66</a></span>&#160;    std::unique_ptr&lt;AssemblyGemm&gt; <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#add93daba36f239482945a1b2428f35fc">_gemm_kernel_asm</a>;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a25380d912475d0de9f812208470ed658">   68</a></span>&#160;    std::unique_ptr&lt;INEKernel&gt; <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a25380d912475d0de9f812208470ed658">_optimised_kernel</a>;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3c56e995d4dc7abbe0dc428c91677f5a">   70</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3c56e995d4dc7abbe0dc428c91677f5a">_a</a>;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#afbd52c7bb890e7e1b516ca458abe423e">   72</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#afbd52c7bb890e7e1b516ca458abe423e">_b</a>;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a795e046c4103b68ac2d3977d903a15d4">   74</a></span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a795e046c4103b68ac2d3977d903a15d4">_d</a>;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a5bdfad560ce4bc3d80c8c5182eba0f47">   76</a></span>&#160;    <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a5bdfad560ce4bc3d80c8c5182eba0f47">_pretranspose</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a13a43e6d814de94978c515cb084873b1">   81</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a13a43e6d814de94978c515cb084873b1">run</a>()</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> lda = _a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> ldb = _b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> ldd = _d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() / <span class="keyword">sizeof</span>(TypeOutput);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// In the case of NHWC we want to interpret the output shape as 3D. Thus, the batch stride for A is</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment">// the relevant multiple of the row stride.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_nhwc           = _a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">data_layout</a>() == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>  stride_in_bytes_a = is_nhwc ? _a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>() * _d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1) : _a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a336121cb63ed79fa0a072eed03d694ac">z</a>();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> batch_stride_a = stride_in_bytes_a / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> batch_stride_d = _d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a336121cb63ed79fa0a072eed03d694ac">z</a>() / <span class="keyword">sizeof</span>(TypeOutput);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> multi_stride_a = _a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[3] / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> multi_stride_b = _b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a336121cb63ed79fa0a072eed03d694ac">z</a>() / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> multi_stride_d = _d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">strides_in_bytes</a>()[3] / <span class="keyword">sizeof</span>(TypeOutput);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in0_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">&gt;</span>(_a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">&gt;</span>(_b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keyword">auto</span>       out_ptr = <span class="keyword">reinterpret_cast&lt;</span>TypeOutput *<span class="keyword">&gt;</span>(_d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        _gemm_kernel_asm-&gt;set_arrays(in0_ptr, lda, batch_stride_a, multi_stride_a, in1_ptr, ldb, multi_stride_b, out_ptr, ldd, batch_stride_d, multi_stride_d);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span>(_gemm_kernel_asm-&gt;B_pretranspose_required())</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">// Forcing 128-byte alignment (required by 32-bit kernels)</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> alignment   = 128;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordtype">void</span>              *raw_ptr     = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(_pretranspose-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>());</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordtype">size_t</span>             space       = _pretranspose-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">total_size</a>();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordtype">void</span>              *aligned_ptr = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">support::cpp11::align</a>(alignment, _gemm_kernel_asm-&gt;get_B_pretransposed_array_size(), raw_ptr, space);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_pretranspose == <span class="keyword">nullptr</span> || _pretranspose-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">buffer</a>() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            _gemm_kernel_asm-&gt;pretranspose_B_array(aligned_ptr, in1_ptr, ldb, multi_stride_b);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            _b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#afe4e1d42d62608a941124f0d50c3e48a">mark_as_unused</a>();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a38e28e556fea6e2024019dbb9c7cc943">schedule</a>(_optimised_kernel.get(), <a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa0ae8d74ae5f69f30679b9acf678eca5">  121</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlueF32</a> = <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue&lt;float, float&gt;</a>;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#abb1d131ce675ab28d22ff80bf0942c4d">  123</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlueU8U32</a> = <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue&lt;uint8_t, uint32_t&gt;</a>;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#a08ae4f1297248a1e6d46564cd97066b4">  125</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlueS8S32</a> = <a class="code" href="classarm__compute_1_1_assembly_kernel_glue.xhtml">AssemblyKernelGlue&lt;int8_t, int32_t&gt;</a>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#aa63c4dc1d1e43b7e57fadcb3e3e93580">  135</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute.xhtml#aa63c4dc1d1e43b7e57fadcb3e3e93580">allocate_workspace</a>(<span class="keywordtype">size_t</span> workspace_size, <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> &amp;workspace, <a class="code" href="classarm__compute_1_1_memory_group_base.xhtml">MemoryGroup</a> *memory_group, <span class="keywordtype">size_t</span> alignment, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(memory_group);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(workspace_size == 0, <span class="stringliteral">&quot;size cannot be 0&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    workspace.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a3014ce2f4215e8a44331aa5daf3ba0d4">init</a>(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>{ (workspace_size + alignment - 1) * num_threads }, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    workspace.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="namespacearm__compute.xhtml#abd2bf5c0522dab806fa7981c9bc4d38e">  159</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute.xhtml#abd2bf5c0522dab806fa7981c9bc4d38e">setup_assembly_kernel</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aac40b7097f2bda9274ae07fa33d15a79">a</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>, <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *d, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a62197192f0fbf4e0675eb37be1c4c175">alpha</a>, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">beta</a>, <span class="keywordtype">bool</span> pretranspose_hint,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                  <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> &amp;workspace, <a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> &amp;B_pretranspose, <a class="code" href="classarm__compute_1_1_memory_group_base.xhtml">MemoryGroup</a> &amp;memory_group, T &amp;asm_glue)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;ci          = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a95f26c7763b9472437a8da8aa6089c9b">cpu_info</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>      M           = d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">y</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>      N           = d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>      K           = a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">x</a>();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>      batches     = d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a91d8061f66e7f8bc56da91d965f04376">total_size_upper</a>(2);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>      multis      = b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a336121cb63ed79fa0a072eed03d694ac">z</a>();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   num_threads = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// unique_ptr to a Gemm object</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    std::unique_ptr&lt;typename T::AssemblyGemm&gt;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    asm_gemm(arm_gemm::gemm&lt;typename T::TypeOperator, typename T::TypeResult&gt;(ci, M, N, K, batches, multis, <span class="keyword">false</span>, <span class="keyword">false</span>, alpha, beta, num_threads, pretranspose_hint));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// arm_compute wrapper for the Gemm object (see above)</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    std::unique_ptr&lt;NEGEMMAssemblyWrapper&lt;typename T::AssemblyGemm&gt;&gt;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                                                  acl_gemm_wrapper = support::cpp14::make_unique&lt;NEGEMMAssemblyWrapper&lt;typename T::AssemblyGemm&gt;&gt;();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">if</span>(acl_gemm_wrapper != <span class="keyword">nullptr</span> &amp;&amp; asm_gemm != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        acl_gemm_wrapper-&gt;configure(asm_gemm.get());</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> workspace_size = asm_gemm-&gt;get_working_size();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span>(workspace_size)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="comment">// Allocate workspace</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> alignment = 4096;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#aa63c4dc1d1e43b7e57fadcb3e3e93580">allocate_workspace</a>(workspace_size, workspace, &amp;memory_group, alignment, num_threads);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(workspace.<a class="code" href="classarm__compute_1_1_tensor.xhtml#ace7b855e3c647d29cc37a1ce147901dc">buffer</a>());</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            asm_gemm-&gt;set_working_space(reinterpret_cast&lt;typename T::TypeResult *&gt;(workspace.<a class="code" href="classarm__compute_1_1_tensor.xhtml#ace7b855e3c647d29cc37a1ce147901dc">buffer</a>()));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">//if we disable this code below in brackets then ConvLayer deadlocks when threads &gt; 1 and</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">//the shapes are In=1x1x1024 Weights=1x1x1024x1001 Biases=1001 Out=1x1x1001</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_size = asm_gemm-&gt;get_window_size();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">if</span>(window_size &lt; num_threads)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                num_threads = window_size;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                asm_gemm-&gt;set_nthreads(num_threads);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="comment">// Check for pre-transposed support</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span>(asm_gemm-&gt;B_pretranspose_required())</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="comment">// Forcing 128-byte alignment (required by 32-bit kernels)</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> alignment           = 128;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span>       B_pretranspose_size = asm_gemm-&gt;get_B_pretransposed_array_size();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#aa63c4dc1d1e43b7e57fadcb3e3e93580">allocate_workspace</a>(B_pretranspose_size, B_pretranspose, <span class="keyword">nullptr</span>, alignment, 1);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <a class="code" href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(B_pretranspose.<a class="code" href="classarm__compute_1_1_tensor.xhtml#ace7b855e3c647d29cc37a1ce147901dc">buffer</a>());</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            asm_glue._pretranspose = &amp;B_pretranspose;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        asm_glue._gemm_kernel_asm  = std::move(asm_gemm);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        asm_glue._optimised_kernel = std::move(acl_gemm_wrapper);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="comment">// We need to setup the ptrs in the run() method</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        asm_glue._a = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aac40b7097f2bda9274ae07fa33d15a79">a</a>;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        asm_glue._b = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        asm_glue._d = d;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_ASSEMBLY_HELPER_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a5bdfad560ce4bc3d80c8c5182eba0f47"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a5bdfad560ce4bc3d80c8c5182eba0f47">arm_compute::AssemblyKernelGlue::_pretranspose</a></div><div class="ttdeci">ITensor * _pretranspose</div><div class="ttdoc">Pre-transpose tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00076">AssemblyHelper.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a3174543728e6f78b211d600475b8ab9e"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3174543728e6f78b211d600475b8ab9e">arm_compute::AssemblyKernelGlue&lt; int8_t, int32_t &gt;::TypeOperator</a></div><div class="ttdeci">int8_t TypeOperator</div><div class="ttdoc">Operator type. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00049">AssemblyHelper.h:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a336121cb63ed79fa0a072eed03d694ac"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a336121cb63ed79fa0a072eed03d694ac">arm_compute::Dimensions::z</a></div><div class="ttdeci">T z() const </div><div class="ttdoc">Alias to access the size of the third dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00091">Dimensions.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ab146b9cbab6e73e7588b240dc709fe01"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ab146b9cbab6e73e7588b240dc709fe01">arm_compute::test::validation::beta</a></div><div class="ttdeci">beta</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00115">GEMM.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:39</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a325adbd7f57154b4dc19cc84284b474b"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a325adbd7f57154b4dc19cc84284b474b">arm_compute::AssemblyKernelGlue::operator=</a></div><div class="ttdeci">const AssemblyKernelGlue&lt; TypeInput, TypeOutput &gt; &amp; operator=(const AssemblyKernelGlue&lt; TypeInput, TypeOutput &gt; &amp;)=delete</div><div class="ttdoc">Prevent instances of this class from being copy constructed. </div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a2b7261bda3dc469e02365df7719358b7"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a2b7261bda3dc469e02365df7719358b7">arm_compute::AssemblyKernelGlue&lt; int8_t, int32_t &gt;::AssemblyGemm</a></div><div class="ttdeci">arm_gemm::GemmCommon&lt; int8_t, int32_t &gt; AssemblyGemm</div><div class="ttdoc">Assembly Gemm. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00058">AssemblyHelper.h:58</a></div></div>
<div class="ttc" id="_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aac40b7097f2bda9274ae07fa33d15a79"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aac40b7097f2bda9274ae07fa33d15a79">arm_compute::test::validation::a</a></div><div class="ttdeci">CLTensor a</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00121">GEMM.cpp:121</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a3c56e995d4dc7abbe0dc428c91677f5a"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a3c56e995d4dc7abbe0dc428c91677f5a">arm_compute::AssemblyKernelGlue::_a</a></div><div class="ttdeci">const ITensor * _a</div><div class="ttdoc">Input A. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00070">AssemblyHelper.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_ace7b855e3c647d29cc37a1ce147901dc"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#ace7b855e3c647d29cc37a1ce147901dc">arm_compute::Tensor::buffer</a></div><div class="ttdeci">uint8_t * buffer() const override</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory. ...</div></div>
<div class="ttc" id="_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_afbd52c7bb890e7e1b516ca458abe423e"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#afbd52c7bb890e7e1b516ca458abe423e">arm_compute::AssemblyKernelGlue::_b</a></div><div class="ttdeci">const ITensor * _b</div><div class="ttdoc">Input B. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00072">AssemblyHelper.h:72</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a795e046c4103b68ac2d3977d903a15d4"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a795e046c4103b68ac2d3977d903a15d4">arm_compute::AssemblyKernelGlue::_d</a></div><div class="ttdeci">ITensor * _d</div><div class="ttdoc">Output. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00074">AssemblyHelper.h:74</a></div></div>
<div class="ttc" id="_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a531ec877bfc923dea3ab6f1be5e6e1ac"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a531ec877bfc923dea3ab6f1be5e6e1ac">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_afb5cd37bb08f1029691590372e6330f0"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#afb5cd37bb08f1029691590372e6330f0">arm_compute::Dimensions::x</a></div><div class="ttdeci">T x() const </div><div class="ttdoc">Alias to access the size of the first dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00081">Dimensions.h:81</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a4d00b55a18d07d51dd3c2d7a018cfdb3"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a4d00b55a18d07d51dd3c2d7a018cfdb3">arm_compute::AssemblyKernelGlue::AssemblyKernelGlue</a></div><div class="ttdeci">AssemblyKernelGlue()</div><div class="ttdoc">Default constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00053">AssemblyHelper.h:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_shape_xhtml_a91d8061f66e7f8bc56da91d965f04376"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a91d8061f66e7f8bc56da91d965f04376">arm_compute::TensorShape::total_size_upper</a></div><div class="ttdeci">size_t total_size_upper(size_t dimension) const </div><div class="ttdoc">Collapses given dimension and above. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00167">TensorShape.h:167</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00159">Error.h:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_ab988210662dbd3bf32fd563c7dd1bdbf"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">arm_compute::ITensor::buffer</a></div><div class="ttdeci">virtual uint8_t * buffer() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory. ...</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml">arm_compute::Tensor</a></div><div class="ttdoc">Basic implementation of the tensor interface. </div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="_n_e_scheduler_8h_xhtml"><div class="ttname"><a href="_n_e_scheduler_8h.xhtml">NEScheduler.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a13a43e6d814de94978c515cb084873b1"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a13a43e6d814de94978c515cb084873b1">arm_compute::AssemblyKernelGlue::run</a></div><div class="ttdeci">void run()</div><div class="ttdoc">Configures the arrays pointers and strides in the assembly kernel and executes the assembly kernel...</div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00081">AssemblyHelper.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a9e51e04e3f86c823883757ef22d4f39a"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9e51e04e3f86c823883757ef22d4f39a">arm_compute::support::cpp11::align</a></div><div class="ttdeci">void * align(std::size_t alignment, std::size_t size, void *&amp;ptr, std::size_t &amp;space)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00321">ToolchainSupport.h:321</a></div></div>
<div class="ttc" id="_log_8h_xhtml"><div class="ttname"><a href="_log_8h.xhtml">Log.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_abd2bf5c0522dab806fa7981c9bc4d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd2bf5c0522dab806fa7981c9bc4d38e">arm_compute::setup_assembly_kernel</a></div><div class="ttdeci">bool setup_assembly_kernel(const ITensor *a, const ITensor *b, ITensor *d, float alpha, float beta, bool pretranspose_hint, Tensor &amp;workspace, Tensor &amp;B_pretranspose, MemoryGroup &amp;memory_group, T &amp;asm_glue)</div><div class="ttdoc">Create a wrapper kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00159">AssemblyHelper.h:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00044">CPPTypes.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_ac9f23d550c3fdf519d84948fc9e015c1"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#ac9f23d550c3fdf519d84948fc9e015c1">arm_compute::AssemblyKernelGlue&lt; int8_t, int32_t &gt;::TypeResult</a></div><div class="ttdeci">int32_t TypeResult</div><div class="ttdoc">Result type. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00051">AssemblyHelper.h:51</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_aa63c4dc1d1e43b7e57fadcb3e3e93580"><div class="ttname"><a href="namespacearm__compute.xhtml#aa63c4dc1d1e43b7e57fadcb3e3e93580">arm_compute::allocate_workspace</a></div><div class="ttdeci">void allocate_workspace(size_t workspace_size, Tensor &amp;workspace, MemoryGroup *memory_group, size_t alignment, unsigned int num_threads)</div><div class="ttdoc">Allocate a workspace tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00135">AssemblyHelper.h:135</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_afe4e1d42d62608a941124f0d50c3e48a"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#afe4e1d42d62608a941124f0d50c3e48a">arm_compute::ITensor::mark_as_unused</a></div><div class="ttdeci">void mark_as_unused() const </div><div class="ttdoc">Marks a tensor as unused. </div></div>
<div class="ttc" id="_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_base_xhtml"><div class="ttname"><a href="classarm__compute_1_1_memory_group_base.xhtml">arm_compute::MemoryGroupBase&lt; Tensor &gt;</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a95f26c7763b9472437a8da8aa6089c9b"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a95f26c7763b9472437a8da8aa6089c9b">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo &amp; cpu_info()</div><div class="ttdoc">Get CPU info. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a18064e0011c3869d884653e9e7c47b66"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">arm_compute::ITensorInfo::total_size</a></div><div class="ttdeci">virtual size_t total_size() const =0</div><div class="ttdoc">Returns the total size of the tensor in bytes. </div></div>
<div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a691c9cb93365c2e33f3429de43244098"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a691c9cb93365c2e33f3429de43244098">arm_compute::Dimensions::y</a></div><div class="ttdeci">T y() const </div><div class="ttdoc">Alias to access the size of the second dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00086">Dimensions.h:86</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdoc">Num samples, height, width, channels. </div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_a25380d912475d0de9f812208470ed658"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#a25380d912475d0de9f812208470ed658">arm_compute::AssemblyKernelGlue::_optimised_kernel</a></div><div class="ttdeci">std::unique_ptr&lt; INEKernel &gt; _optimised_kernel</div><div class="ttdoc">Optimised NEON kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00068">AssemblyHelper.h:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a3014ce2f4215e8a44331aa5daf3ba0d4"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a3014ce2f4215e8a44331aa5daf3ba0d4">arm_compute::TensorAllocator::init</a></div><div class="ttdeci">void init(const TensorAllocator &amp;allocator, const Coordinates &amp;coords, TensorInfo sub_info)</div><div class="ttdoc">Shares the same backing memory with another tensor allocator, while the tensor info might be differen...</div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml">arm_compute::TensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00045">TensorInfo.h:45</a></div></div>
<div class="ttc" id="arm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a62197192f0fbf4e0675eb37be1c4c175"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a62197192f0fbf4e0675eb37be1c4c175">arm_compute::test::validation::alpha</a></div><div class="ttdeci">alpha</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00115">GEMM.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a6b14f175bf5281f57b561e2d4e4b1f1f"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">arm_compute::ITensorInfo::strides_in_bytes</a></div><div class="ttdeci">virtual const Strides &amp; strides_in_bytes() const =0</div><div class="ttdoc">The strides in bytes for accessing each dimension of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ac24584a63e484123e3756d1b2a1c9e2f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">arm_compute::IScheduler::num_threads</a></div><div class="ttdeci">virtual unsigned int num_threads() const =0</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in his pool. </div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml">arm_compute::AssemblyKernelGlue</a></div><div class="ttdoc">Assembly kernel glue. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00045">AssemblyHelper.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_assembly_kernel_glue_xhtml_add93daba36f239482945a1b2428f35fc"><div class="ttname"><a href="classarm__compute_1_1_assembly_kernel_glue.xhtml#add93daba36f239482945a1b2428f35fc">arm_compute::AssemblyKernelGlue::_gemm_kernel_asm</a></div><div class="ttdeci">std::unique_ptr&lt; AssemblyGemm &gt; _gemm_kernel_asm</div><div class="ttdoc">Assembly Gemm kernel. </div><div class="ttdef"><b>Definition:</b> <a href="_assembly_helper_8h_source.xhtml#l00066">AssemblyHelper.h:66</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b8004eef325a40dd43eb80755610fff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">arm_compute::test::validation::b</a></div><div class="ttdeci">CLTensor b</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00122">GEMM.cpp:122</a></div></div>
<div class="ttc" id="arm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="_i_access_window_8h_xhtml"><div class="ttname"><a href="_i_access_window_8h.xhtml">IAccessWindow.h</a></div></div>
<div class="ttc" id="_validate_8h_xhtml"><div class="ttname"><a href="_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_acb4f87f1831680d8d1b70e1bef06bb81"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#acb4f87f1831680d8d1b70e1bef06bb81">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a38e28e556fea6e2024019dbb9c7cc943"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a38e28e556fea6e2024019dbb9c7cc943">arm_compute::IScheduler::schedule</a></div><div class="ttdeci">virtual void schedule(ICPPKernel *kernel, unsigned int split_dimension)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a367b5090ab432bc7de2c32369e087ab1"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a367b5090ab432bc7de2c32369e087ab1">arm_compute::ITensorInfo::data_layout</a></div><div class="ttdeci">virtual DataLayout data_layout() const =0</div><div class="ttdoc">Get the data layout of the tensor. </div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00319">Error.h:319</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_8bc26130589aa16388b5a02f17abf2c2.xhtml">runtime</a></li><li class="navelem"><a class="el" href="dir_65e289039e1347f87d412b0a1b1a312c.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_assembly_helper_8h.xhtml">AssemblyHelper.h</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
