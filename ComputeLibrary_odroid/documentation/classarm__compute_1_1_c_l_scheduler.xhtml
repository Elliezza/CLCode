<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLScheduler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_scheduler.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLScheduler Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Provides global access to a CL context and command queue.  
 <a href="classarm__compute_1_1_c_l_scheduler.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a46ecf9ef0fe80ba2ed35acfc29856b7d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a46ecf9ef0fe80ba2ed35acfc29856b7d">default_init</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner=nullptr)</td></tr>
<tr class="memdesc:a46ecf9ef0fe80ba2ed35acfc29856b7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialises the context and command queue used by the scheduler to default values and sets a default device and kernel path for the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>.  <a href="#a46ecf9ef0fe80ba2ed35acfc29856b7d">More...</a><br /></td></tr>
<tr class="separator:a46ecf9ef0fe80ba2ed35acfc29856b7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1a643e517f50bf0392fb6516dd7cf67"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">enqueue</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel, bool flush=true)</td></tr>
<tr class="memdesc:ae1a643e517f50bf0392fb6516dd7cf67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Schedule the execution of the passed kernel if possible.  <a href="#ae1a643e517f50bf0392fb6516dd7cf67">More...</a><br /></td></tr>
<tr class="separator:ae1a643e517f50bf0392fb6516dd7cf67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e2d59fa682250eba532a459e7f5e61e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a0e2d59fa682250eba532a459e7f5e61e">init</a> (cl::Context <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>=cl::Context::getDefault(), cl::CommandQueue <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">queue</a>=cl::CommandQueue::getDefault(), cl::Device device=cl::Device::getDefault(), <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *cl_tuner=nullptr)</td></tr>
<tr class="memdesc:a0e2d59fa682250eba532a459e7f5e61e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialises the context and command queue to be used by the scheduler.  <a href="#a0e2d59fa682250eba532a459e7f5e61e">More...</a><br /></td></tr>
<tr class="separator:a0e2d59fa682250eba532a459e7f5e61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a252f5440564c77d68459f2baa978f86a"><td class="memItemLeft" align="right" valign="top">cl::Context &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">context</a> ()</td></tr>
<tr class="memdesc:a252f5440564c77d68459f2baa978f86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the associated CL context.  <a href="#a252f5440564c77d68459f2baa978f86a">More...</a><br /></td></tr>
<tr class="separator:a252f5440564c77d68459f2baa978f86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293edc1bbcbddffb7228ac97917ed107"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a> (cl::Context <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>)</td></tr>
<tr class="memdesc:a293edc1bbcbddffb7228ac97917ed107"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the CL context to be used by the scheduler.  <a href="#a293edc1bbcbddffb7228ac97917ed107">More...</a><br /></td></tr>
<tr class="separator:a293edc1bbcbddffb7228ac97917ed107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad381d1aed28b4b1e1f5a710633934580"><td class="memItemLeft" align="right" valign="top">cl::CommandQueue &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">queue</a> ()</td></tr>
<tr class="memdesc:ad381d1aed28b4b1e1f5a710633934580"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the associated CL command queue.  <a href="#ad381d1aed28b4b1e1f5a710633934580">More...</a><br /></td></tr>
<tr class="separator:ad381d1aed28b4b1e1f5a710633934580"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c3dee98cf8bc85e0c6b5749e038bb68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a2c3dee98cf8bc85e0c6b5749e038bb68">target</a> () const </td></tr>
<tr class="memdesc:a2c3dee98cf8bc85e0c6b5749e038bb68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the target GPU.  <a href="#a2c3dee98cf8bc85e0c6b5749e038bb68">More...</a><br /></td></tr>
<tr class="separator:a2c3dee98cf8bc85e0c6b5749e038bb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9608e5af9f3a199f69ca6aa41b94359a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">set_queue</a> (cl::CommandQueue <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">queue</a>)</td></tr>
<tr class="memdesc:a9608e5af9f3a199f69ca6aa41b94359a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set the CL command queue to be used by the scheduler.  <a href="#a9608e5af9f3a199f69ca6aa41b94359a">More...</a><br /></td></tr>
<tr class="separator:a9608e5af9f3a199f69ca6aa41b94359a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad5ba9d34a3a855bf1dd2e36316ff550a">set_target</a> (<a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a2c3dee98cf8bc85e0c6b5749e038bb68">target</a>)</td></tr>
<tr class="memdesc:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor to set target GPU to be used by the scheduler.  <a href="#ad5ba9d34a3a855bf1dd2e36316ff550a">More...</a><br /></td></tr>
<tr class="separator:ad5ba9d34a3a855bf1dd2e36316ff550a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad55f80ed3cd8b6c4f247763b747016af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">sync</a> ()</td></tr>
<tr class="memdesc:ad55f80ed3cd8b6c4f247763b747016af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until all commands in the associated command queue have finished.  <a href="#ad55f80ed3cd8b6c4f247763b747016af">More...</a><br /></td></tr>
<tr class="separator:ad55f80ed3cd8b6c4f247763b747016af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6096d26e8e29e1a7f01b0f083fb7e33f"><td class="memItemLeft" align="right" valign="top">cl::Event&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6096d26e8e29e1a7f01b0f083fb7e33f">enqueue_sync_event</a> ()</td></tr>
<tr class="memdesc:a6096d26e8e29e1a7f01b0f083fb7e33f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueues a marker into the associated command queue and return the event.  <a href="#a6096d26e8e29e1a7f01b0f083fb7e33f">More...</a><br /></td></tr>
<tr class="separator:a6096d26e8e29e1a7f01b0f083fb7e33f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c2059df991a75abef4eb643510c9544"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6c2059df991a75abef4eb643510c9544">tune_kernel_static</a> (<a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;kernel)</td></tr>
<tr class="memdesc:a6c2059df991a75abef4eb643510c9544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tunes OpenCL kernel.  <a href="#a6c2059df991a75abef4eb643510c9544">More...</a><br /></td></tr>
<tr class="separator:a6c2059df991a75abef4eb643510c9544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53b7f0e715e034f657f718e65dc778d3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a53b7f0e715e034f657f718e65dc778d3">is_initialised</a> () const </td></tr>
<tr class="separator:a53b7f0e715e034f657f718e65dc778d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a60f9a6836b628a7171914c4afe43b4a7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a60f9a6836b628a7171914c4afe43b4a7">get</a> ()</td></tr>
<tr class="memdesc:a60f9a6836b628a7171914c4afe43b4a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the scheduler singleton.  <a href="#a60f9a6836b628a7171914c4afe43b4a7">More...</a><br /></td></tr>
<tr class="separator:a60f9a6836b628a7171914c4afe43b4a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Provides global access to a CL context and command queue. </p>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00050">50</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a252f5440564c77d68459f2baa978f86a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl::Context&amp; context </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor for the associated CL context. </p>
<dl class="section return"><dt>Returns</dt><dd>A CL context. </dd></dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00137">137</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_c_l_kernel_library_8h_source.xhtml#l00275">CLKernelLibrary::context()</a>, and <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get()</a>.</p>

<p>Referenced by <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00123">CLScheduler::init()</a>, and <a class="el" href="_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00043">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_initialised);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a252f5440564c77d68459f2baa978f86a"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a252f5440564c77d68459f2baa978f86a">arm_compute::CLKernelLibrary::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00275">CLKernelLibrary.h:275</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_aebe2d25607545d31f2b1ace6d60a81da"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a46ecf9ef0fe80ba2ed35acfc29856b7d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void default_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>cl_tuner</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialises the context and command queue used by the scheduler to default values and sets a default device and kernel path for the <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_tuner</td><td>(Optional) Pointer to <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml" title="Basic interface for tuning the OpenCL kernels. ">ICLTuner</a> (default=nullptr) </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00071">71</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="namespacearm__compute.xhtml#a94de99589574c0072be98be1ba806cad">arm_compute::device_supports_extension()</a>, <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ae1a643e517f50bf0392fb6516dd7cf67">CLScheduler::enqueue()</a>, <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00123">CLScheduler::init()</a>, and <a class="el" href="_c_l_kernel_library_8h_source.xhtml#l00215">CLKernelLibrary::init()</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00063">main()</a>, and <a class="el" href="_tuner_8cpp_source.xhtml#l00044">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">if</span>(!_is_initialised)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_DEBUG_ENABLED)</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordtype">bool</span> is_cl_arm_printf_supported = <span class="keyword">false</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="comment">//query devices in the context for cl_arm_printf support</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            std::vector&lt;cl::Device&gt; def_platform_devices;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            cl::Platform::getDefault().getDevices(CL_DEVICE_TYPE_DEFAULT, &amp;def_platform_devices);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            is_cl_arm_printf_supported = <a class="code" href="namespacearm__compute.xhtml#a94de99589574c0072be98be1ba806cad">device_supports_extension</a>(def_platform_devices[0], <span class="stringliteral">&quot;cl_arm_printf&quot;</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">if</span>(is_cl_arm_printf_supported)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="comment">// Create a cl_context with a printf_callback and user specified buffer size.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                cl_context_properties properties[] =</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    <span class="comment">// Enable a printf callback function for this context.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    CL_PRINTF_CALLBACK_ARM, <span class="keyword">reinterpret_cast&lt;</span>cl_context_properties<span class="keyword">&gt;</span>(printf_callback),</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="comment">// Request a minimum printf buffer size of 4MB for devices in the</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="comment">// context that support this extension.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    CL_PRINTF_BUFFERSIZE_ARM, static_cast&lt;cl_context_properties&gt;(0x100000),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    CL_CONTEXT_PLATFORM, <span class="keyword">reinterpret_cast&lt;</span>cl_context_properties<span class="keyword">&gt;</span>(cl::Platform::get()()),</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    0</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                cl::Context::setDefault(cl::Context(CL_DEVICE_TYPE_DEFAULT, properties));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_DEBUG_ENABLED)</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#af353532ea782387df6bcb6d01894f4ae">init</a>(<span class="stringliteral">&quot;./cl_kernels/&quot;</span>, cl::Context::getDefault(), cl::Device::getDefault());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a0e2d59fa682250eba532a459e7f5e61e">init</a>(cl::Context::getDefault(), cl::CommandQueue::getDefault(), cl::Device::getDefault(), cl_tuner);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            _cl_tuner = cl_tuner;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_af353532ea782387df6bcb6d01894f4ae"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#af353532ea782387df6bcb6d01894f4ae">arm_compute::CLKernelLibrary::init</a></div><div class="ttdeci">void init(std::string kernel_path=&quot;.&quot;, cl::Context context=cl::Context::getDefault(), cl::Device device=cl::Device::getDefault())</div><div class="ttdoc">Initialises the kernel library. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00215">CLKernelLibrary.h:215</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_aebe2d25607545d31f2b1ace6d60a81da"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a0e2d59fa682250eba532a459e7f5e61e"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a0e2d59fa682250eba532a459e7f5e61e">arm_compute::CLScheduler::init</a></div><div class="ttdeci">void init(cl::Context context=cl::Context::getDefault(), cl::CommandQueue queue=cl::CommandQueue::getDefault(), cl::Device device=cl::Device::getDefault(), ICLTuner *cl_tuner=nullptr)</div><div class="ttdoc">Initialises the context and command queue to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00123">CLScheduler.h:123</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a94de99589574c0072be98be1ba806cad"><div class="ttname"><a href="namespacearm__compute.xhtml#a94de99589574c0072be98be1ba806cad">arm_compute::device_supports_extension</a></div><div class="ttdeci">bool device_supports_extension(const cl::Device &amp;device, const char *extension_name)</div><div class="ttdoc">Helper function to check whether a given extension is supported. </div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ae1a643e517f50bf0392fb6516dd7cf67"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void enqueue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>flush</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Schedule the execution of the passed kernel if possible. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flush</td><td>(Optional) Specifies if the command queue will be flushed after running the kernel. </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00071">CLScheduler::default_init()</a>.</p>

</div>
</div>
<a class="anchor" id="a6096d26e8e29e1a7f01b0f083fb7e33f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl::Event enqueue_sync_event </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enqueues a marker into the associated command queue and return the event. </p>
<dl class="section return"><dt>Returns</dt><dd>An event that can be waited on to block the executing thread. </dd></dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00199">199</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        cl::Event event;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        _queue.enqueueMarker(&amp;event);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">return</span> event;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a60f9a6836b628a7171914c4afe43b4a7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a>&amp; get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the scheduler singleton. </p>
<dl class="section return"><dt>Returns</dt><dd>The scheduler </dd></dl>

<p>Referenced by <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="main_8cpp_source.xhtml#l00063">main()</a>, <a class="el" href="_c_l_array_8h_source.xhtml#l00067">CLArray&lt; T &gt;::map()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00047">OpenCLTimer::OpenCLTimer()</a>, <a class="el" href="_framework_8cpp_source.xhtml#l00508">Framework::run()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00736">arm_compute::test::sync_if_necessary()</a>, <a class="el" href="_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00043">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="_c_l_array_8h_source.xhtml#l00077">CLArray&lt; T &gt;::unmap()</a>.</p>

</div>
</div>
<a class="anchor" id="a0e2d59fa682250eba532a459e7f5e61e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em> = <code>cl::Context::getDefault()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::CommandQueue&#160;</td>
          <td class="paramname"><em>queue</em> = <code>cl::CommandQueue::getDefault()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl::Device&#160;</td>
          <td class="paramname"><em>device</em> = <code>cl::Device::getDefault()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml">ICLTuner</a> *&#160;</td>
          <td class="paramname"><em>cl_tuner</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialises the context and command queue to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>A CL context. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>A CL command queue. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">device</td><td>A CL device. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cl_tuner</td><td>(Optional) Pointer to OpenCL tuner (default=nullptr) Note: It is caller's responsibility to release the allocated memory for <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml" title="Basic implementation of the OpenCL tuner interface. ">CLTuner</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00123">123</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00137">CLScheduler::context()</a>, <a class="el" href="namespacearm__compute.xhtml#a9d0143bdde8255313aae6ac020dd629c">arm_compute::get_target_from_device()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00156">CLScheduler::queue()</a>, and <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00147">CLScheduler::set_context()</a>.</p>

<p>Referenced by <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00071">CLScheduler::default_init()</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        _queue          = std::move(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">queue</a>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        _target         = <a class="code" href="namespacearm__compute.xhtml#a9d0143bdde8255313aae6ac020dd629c">get_target_from_device</a>(device);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        _is_initialised = <span class="keyword">true</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        _cl_tuner       = cl_tuner;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLScheduler::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Accessor to set the CL context to be used by the scheduler. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00147">CLScheduler.h:147</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad381d1aed28b4b1e1f5a710633934580"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00156">CLScheduler.h:156</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9d0143bdde8255313aae6ac020dd629c"><div class="ttname"><a href="namespacearm__compute.xhtml#a9d0143bdde8255313aae6ac020dd629c">arm_compute::get_target_from_device</a></div><div class="ttdeci">GPUTarget get_target_from_device(cl::Device &amp;device)</div><div class="ttdoc">Helper function to get the GPU target from CL device. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a252f5440564c77d68459f2baa978f86a"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00137">CLScheduler.h:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a53b7f0e715e034f657f718e65dc778d3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_initialised </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00219">219</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">return</span> _is_initialised;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad381d1aed28b4b1e1f5a710633934580"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">cl::CommandQueue&amp; queue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor for the associated CL command queue. </p>
<dl class="section return"><dt>Returns</dt><dd>A CL command queue. </dd></dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00156">156</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="_error_8h_source.xhtml#l00328">ARM_COMPUTE_ERROR_ON</a>.</p>

<p>Referenced by <a class="el" href="_c_l_2_fill_border_8cpp_source.xhtml#l00052">arm_compute::test::validation::DATA_TEST_CASE()</a>, <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00123">CLScheduler::init()</a>, and <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00047">OpenCLTimer::OpenCLTimer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!_is_initialised);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span> _queue;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a293edc1bbcbddffb7228ac97917ed107"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_context </td>
          <td>(</td>
          <td class="paramtype">cl::Context&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor to set the CL context to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">context</td><td>A CL context. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00147">147</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get()</a>, and <a class="el" href="_c_l_kernel_library_8h_source.xhtml#l00249">CLKernelLibrary::set_context()</a>.</p>

<p>Referenced by <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00123">CLScheduler::init()</a>, and <a class="el" href="_framework_8cpp_source.xhtml#l00508">Framework::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">set_context</a>(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">context</a>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_a293edc1bbcbddffb7228ac97917ed107"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a293edc1bbcbddffb7228ac97917ed107">arm_compute::CLKernelLibrary::set_context</a></div><div class="ttdeci">void set_context(cl::Context context)</div><div class="ttdoc">Sets the CL context used to create programs. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_kernel_library_8h_source.xhtml#l00249">CLKernelLibrary.h:249</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_kernel_library_xhtml_aebe2d25607545d31f2b1ace6d60a81da"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#aebe2d25607545d31f2b1ace6d60a81da">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton. </div></div>
<div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a252f5440564c77d68459f2baa978f86a"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a252f5440564c77d68459f2baa978f86a">arm_compute::CLScheduler::context</a></div><div class="ttdeci">cl::Context &amp; context()</div><div class="ttdoc">Accessor for the associated CL context. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00137">CLScheduler.h:137</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9608e5af9f3a199f69ca6aa41b94359a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_queue </td>
          <td>(</td>
          <td class="paramtype">cl::CommandQueue&#160;</td>
          <td class="paramname"><em>queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor to set the CL command queue to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>A CL command queue. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00175">175</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>Referenced by <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00047">OpenCLTimer::OpenCLTimer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        _queue = std::move(<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">queue</a>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_ad381d1aed28b4b1e1f5a710633934580"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#ad381d1aed28b4b1e1f5a710633934580">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00156">CLScheduler.h:156</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad5ba9d34a3a855bf1dd2e36316ff550a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_target </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a>&#160;</td>
          <td class="paramname"><em>target</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor to set target GPU to be used by the scheduler. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>The target GPU. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00184">184</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00166">CLScheduler::target()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        _target = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a2c3dee98cf8bc85e0c6b5749e038bb68">target</a>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_c_l_scheduler_xhtml_a2c3dee98cf8bc85e0c6b5749e038bb68"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a2c3dee98cf8bc85e0c6b5749e038bb68">arm_compute::CLScheduler::target</a></div><div class="ttdeci">GPUTarget target() const </div><div class="ttdoc">Get the target GPU. </div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8h_source.xhtml#l00166">CLScheduler.h:166</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad55f80ed3cd8b6c4f247763b747016af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sync </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Blocks until all commands in the associated command queue have finished. </p>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00190">190</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.xhtml#l00063">main()</a>, and <a class="el" href="tests_2_utils_8h_source.xhtml#l00736">arm_compute::test::sync_if_necessary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        _queue.finish();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a2c3dee98cf8bc85e0c6b5749e038bb68"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3">GPUTarget</a> target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the target GPU. </p>
<dl class="section return"><dt>Returns</dt><dd>The target GPU. </dd></dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00166">166</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>Referenced by <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00184">CLScheduler::set_target()</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> _target;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6c2059df991a75abef4eb643510c9544"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void tune_kernel_static </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml">ICLKernel</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tunes OpenCL kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to tune </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_c_l_scheduler_8h_source.xhtml#l00211">211</a> of file <a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">ICLTuner::tune_kernel_static()</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">if</span>(_cl_tuner != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            _cl_tuner-&gt;<a class="code" href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">tune_kernel_static</a>(kernel);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_i_c_l_tuner_xhtml_a384fdc1bc38a4fc6e79af675cc4aa8e3"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tuner.xhtml#a384fdc1bc38a4fc6e79af675cc4aa8e3">arm_compute::ICLTuner::tune_kernel_static</a></div><div class="ttdeci">virtual void tune_kernel_static(ICLKernel &amp;kernel)=0</div><div class="ttdoc">Tune OpenCL kernel statically. </div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/runtime/CL/<a class="el" href="_c_l_scheduler_8h_source.xhtml">CLScheduler.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
