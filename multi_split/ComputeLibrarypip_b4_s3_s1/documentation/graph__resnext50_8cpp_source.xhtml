<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/graph_resnext50.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('graph__resnext50_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">graph_resnext50.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="graph__resnext50_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_8h.xhtml">arm_compute/graph.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_toolchain_support_8h.xhtml">support/ToolchainSupport.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_utils_8h.xhtml">utils/GraphUtils.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_2_utils_8h.xhtml">utils/Utils.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1utils.xhtml">arm_compute::utils</a>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1graph_1_1frontend.xhtml">arm_compute::graph::frontend</a>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1graph__utils.xhtml">arm_compute::graph_utils</a>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span>GraphResNeXt50Example : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1utils_1_1_example.xhtml">Example</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">void</span> do_setup(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)<span class="keyword"> override</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        std::string data_path; <span class="comment">/* Path to the trainable data */</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        std::string npy_in;    <span class="comment">/* Input npy data */</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        std::string npy_out;   <span class="comment">/* Output npy data */</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// Set target. 0 (NEON), 1 (OpenCL), 2 (OpenCL with Tuner). By default it is NEON</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>    target         = argc &gt; 1 ? std::strtol(argv[1], <span class="keyword">nullptr</span>, 10) : 0;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">Target</a>       target_hint    = <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab6dc388200717b5fae17342af13f5e41">set_target_hint</a>(target);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint = FastMathHint::DISABLED;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// Parse arguments</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span>(argc &lt; 2)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="comment">// Print help</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; [target] [path_to_data] [npy_in] [npy_out] [fast_math_hint]\n\n&quot;</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;No data folder provided: using random values\n\n&quot;</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(argc == 2)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[1] &lt;&lt; <span class="stringliteral">&quot; [path_to_data] [npy_in] [npy_out] [fast_math_hint]\n\n&quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;No data folder provided: using random values\n\n&quot;</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(argc == 3)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            data_path = argv[2];</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[2] &lt;&lt; <span class="stringliteral">&quot; [npy_in] [npy_out] [fast_math_hint]\n\n&quot;</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;No input npy file provided: using random values\n\n&quot;</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(argc == 4)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            data_path = argv[2];</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            npy_in    = argv[3];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[2] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[3] &lt;&lt; <span class="stringliteral">&quot; [npy_out] [fast_math_hint]\n\n&quot;</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;No output npy file provided: skipping output accessor\n\n&quot;</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(argc == 5)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            data_path = argv[2];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            npy_in    = argv[3];</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            npy_out   = argv[4];</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[2] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[3] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; argv[4] &lt;&lt; <span class="stringliteral">&quot; [fast_math_hint]\n\n&quot;</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;No fast math info provided: disabling fast math\n\n&quot;</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            data_path      = argv[2];</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            npy_in         = argv[3];</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            npy_out        = argv[4];</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            fast_math_hint = (std::strtol(argv[5], <span class="keyword">nullptr</span>, 1) == 0) ? FastMathHint::DISABLED : FastMathHint::ENABLED;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        graph &lt;&lt; target_hint</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;              &lt;&lt; fast_math_hint</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">InputLayer</a>(TensorDescriptor(TensorShape(224U, 224U, 3U, 1U), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a9984cc47279cdb732b7b83caf0627de6">get_input_accessor</a>(npy_in))</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml">ScaleLayer</a>(<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;/cnn_data/resnext50_model/bn_data_mul.npy&quot;</span>),</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;/cnn_data/resnext50_model/bn_data_add.npy&quot;</span>))</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;              .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;bn_data/Scale&quot;</span>)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">ConvolutionLayer</a>(</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                  7U, 7U, 64U,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                  <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;/cnn_data/resnext50_model/conv0_weights.npy&quot;</span>),</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                  <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, <span class="stringliteral">&quot;/cnn_data/resnext50_model/conv0_biases.npy&quot;</span>),</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                  PadStrideInfo(2, 2, 2, 3, 2, 3, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>))</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;              .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;conv0/Convolution&quot;</span>)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;conv0/Relu&quot;</span>)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml">PoolingLayer</a>(PoolingLayerInfo(<a class="code" href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">PoolingType::MAX</a>, 3, PadStrideInfo(2, 2, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>))).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;pool0&quot;</span>);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        add_residual_block(data_path, <span class="comment">/*ofm*/</span> 256, <span class="comment">/*stage*/</span> 1, <span class="comment">/*num_unit*/</span> 3, <span class="comment">/*stride_conv_unit1*/</span> 1);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        add_residual_block(data_path, 512, 2, 4, 2);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        add_residual_block(data_path, 1024, 3, 6, 2);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        add_residual_block(data_path, 2048, 4, 3, 2);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml">PoolingLayer</a>(PoolingLayerInfo(<a class="code" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">PoolingType::AVG</a>)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;pool1&quot;</span>)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml">FlattenLayer</a>().<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(<span class="stringliteral">&quot;predictions/Reshape&quot;</span>)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;              &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">OutputLayer</a>(<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a2347ca9557fd9e841d5f2104b1687996">get_npy_output_accessor</a>(npy_out, TensorShape(2048U), <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">// Finalize graph</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        GraphConfig config;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        config.use_tuner = (target == 2);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        graph.finalize(target_hint, config);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">void</span> do_run()<span class="keyword"> override</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">// Run graph</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        graph.run();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml">Stream</a> graph{ 0, <span class="stringliteral">&quot;ResNeXt50&quot;</span> };</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">void</span> add_residual_block(<span class="keyword">const</span> std::string &amp;data_path, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> base_depth, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stage, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_units, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_conv_unit1)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_units; ++i)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            std::stringstream unit_path_ss;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            unit_path_ss &lt;&lt; <span class="stringliteral">&quot;/cnn_data/resnext50_model/stage&quot;</span> &lt;&lt; stage &lt;&lt; <span class="stringliteral">&quot;_unit&quot;</span> &lt;&lt; (i + 1) &lt;&lt; <span class="stringliteral">&quot;_&quot;</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            std::string unit_path = unit_path_ss.str();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            std::stringstream unit_name_ss;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            unit_name_ss &lt;&lt; <span class="stringliteral">&quot;stage&quot;</span> &lt;&lt; stage &lt;&lt; <span class="stringliteral">&quot;/unit&quot;</span> &lt;&lt; (i + 1) &lt;&lt; <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            std::string unit_name = unit_name_ss.str();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            PadStrideInfo pad_grouped_conv(1, 1, 1, 1);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span>(i == 0)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                pad_grouped_conv = (stage == 1) ? PadStrideInfo(stride_conv_unit1, stride_conv_unit1, 1, 1) : PadStrideInfo(stride_conv_unit1, stride_conv_unit1, 0, 1, 0, 1, <a class="code" href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">DimensionRoundingType::FLOOR</a>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> right(graph);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            right &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">ConvolutionLayer</a>(</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                      1U, 1U, base_depth / 2,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                      <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;conv1_weights.npy&quot;</span>),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                      <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;conv1_biases.npy&quot;</span>),</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                      PadStrideInfo(1, 1, 0, 0))</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                  .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;conv1/convolution&quot;</span>)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                  &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;conv1/Relu&quot;</span>)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                  &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">ConvolutionLayer</a>(</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                      3U, 3U, base_depth / 2,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                      <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;conv2_weights.npy&quot;</span>),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                      std::unique_ptr&lt;arm_compute::graph::ITensorAccessor&gt;(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                      pad_grouped_conv, 32)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                  .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;conv2/convolution&quot;</span>)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                  &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml">ScaleLayer</a>(<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;bn2_mul.npy&quot;</span>),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;bn2_add.npy&quot;</span>))</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                  .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;conv1/Scale&quot;</span>)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                  &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;conv2/Relu&quot;</span>)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                  &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">ConvolutionLayer</a>(</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                      1U, 1U, base_depth,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                      <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;conv3_weights.npy&quot;</span>),</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                      <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;conv3_biases.npy&quot;</span>),</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                      PadStrideInfo(1, 1, 0, 0))</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                  .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;conv3/convolution&quot;</span>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> left(graph);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">if</span>(i == 0)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                left &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">ConvolutionLayer</a>(</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                         1U, 1U, base_depth,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                         <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;sc_weights.npy&quot;</span>),</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                         std::unique_ptr&lt;arm_compute::graph::ITensorAccessor&gt;(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                         PadStrideInfo(stride_conv_unit1, stride_conv_unit1, 0, 0))</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;sc/convolution&quot;</span>)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                     &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml">ScaleLayer</a>(<a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;sc_bn_mul.npy&quot;</span>),</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                   <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">get_weights_accessor</a>(data_path, unit_path + <span class="stringliteral">&quot;sc_bn_add.npy&quot;</span>))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                     .<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;sc/scale&quot;</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_branch_layer.xhtml">BranchLayer</a>(<a class="code" href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca9eeb52badb613229884838847294b90d">BranchMergeMethod::ADD</a>, std::move(left), std::move(right)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            graph &lt;&lt; <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a>(ActivationLayerInfo(<a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">ActivationLayerInfo::ActivationFunction::RELU</a>)).<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">set_name</a>(unit_name + <span class="stringliteral">&quot;Relu&quot;</span>);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;};</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="graph__resnext50_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">  205</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="graph__resnext50_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> arm_compute::utils::run_example&lt;GraphResNeXt50Example&gt;(argc, argv);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_branch_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_branch_layer.xhtml">arm_compute::graph::frontend::BranchLayer</a></div><div class="ttdoc">Branch Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00435">Layers.h:435</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml">arm_compute::graph::frontend::PoolingLayer</a></div><div class="ttdoc">Pooling Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00336">Layers.h:336</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_ab6dc388200717b5fae17342af13f5e41"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab6dc388200717b5fae17342af13f5e41">arm_compute::graph_utils::set_target_hint</a></div><div class="ttdeci">graph::Target set_target_hint(int target)</div><div class="ttdoc">Utility function to return the TargetHint. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00370">GraphUtils.h:370</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">arm_compute::graph::frontend::SubStream</a></div><div class="ttdoc">Sub stream class. </div><div class="ttdef"><b>Definition:</b> <a href="_sub_stream_8h_source.xhtml#l00047">SubStream.h:47</a></div></div>
<div class="ttc" id="graph__resnext50_8cpp_xhtml_a3c04138a5bfe5d72780bb7e82a18e627"><div class="ttname"><a href="graph__resnext50_8cpp.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a></div><div class="ttdeci">int main(int argc, char **argv)</div><div class="ttdoc">Main program for ResNeXt50. </div><div class="ttdef"><b>Definition:</b> <a href="graph__resnext50_8cpp_source.xhtml#l00205">graph_resnext50.cpp:205</a></div></div>
<div class="ttc" id="_toolchain_support_8h_xhtml"><div class="ttname"><a href="_toolchain_support_8h.xhtml">ToolchainSupport.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_a2347ca9557fd9e841d5f2104b1687996"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a2347ca9557fd9e841d5f2104b1687996">arm_compute::graph_utils::get_npy_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_npy_output_accessor(const std::string &amp;npy_path, TensorShape shape, DataType data_type, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates appropriate npy output accessor according to the specified npy_path. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00352">GraphUtils.h:352</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml_a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml#a56297e0f7b215eea46c818cb7528d9eaad346bb4679d29be241279f15d7795c1c">arm_compute::ActivationLayerInfo::ActivationFunction::RELU</a></div><div class="ttdoc">Rectifier (  ) </div></div>
<div class="ttc" id="utils_2_utils_8h_xhtml"><div class="ttname"><a href="utils_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe"><div class="ttname"><a href="namespacearm__compute.xhtml#a1fece1bd804e64f39f602d1c3969849aa56c1e354d36beb85b0d881c5b2e24cbe">arm_compute::DimensionRoundingType::FLOOR</a></div><div class="ttdoc">Floor rounding. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_input_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">arm_compute::graph::frontend::InputLayer</a></div><div class="ttdoc">Input Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00045">Layers.h:45</a></div></div>
<div class="ttc" id="_graph_utils_8h_xhtml"><div class="ttname"><a href="_graph_utils_8h.xhtml">GraphUtils.h</a></div></div>
<div class="ttc" id="graph_8h_xhtml"><div class="ttname"><a href="graph_8h.xhtml">graph.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml">arm_compute::graph::frontend::ScaleLayer</a></div><div class="ttdoc">Scale Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00384">Layers.h:384</a></div></div>
<div class="ttc" id="classarm__compute_1_1utils_1_1_example_xhtml"><div class="ttname"><a href="classarm__compute_1_1utils_1_1_example.xhtml">arm_compute::utils::Example</a></div><div class="ttdoc">Abstract Example class. </div><div class="ttdef"><b>Definition:</b> <a href="utils_2_utils_8h_source.xhtml#l00062">Utils.h:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_a9984cc47279cdb732b7b83caf0627de6"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a9984cc47279cdb732b7b83caf0627de6">arm_compute::graph_utils::get_input_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_input_accessor(const std::string &amp;ppm_path, std::unique_ptr&lt; IPreprocessor &gt; preprocessor=nullptr, bool bgr=true)</div><div class="ttdoc">Generates appropriate input accessor according to the specified ppm_path. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00299">GraphUtils.h:299</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afa20b6a7f4383003babd690f026f22dca9eeb52badb613229884838847294b90d"><div class="ttname"><a href="namespacearm__compute.xhtml#afa20b6a7f4383003babd690f026f22dca9eeb52badb613229884838847294b90d">arm_compute::FixedPointOp::ADD</a></div><div class="ttdoc">Addition. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">arm_compute::graph::frontend::ActivationLayer</a></div><div class="ttdoc">Activation Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00094">Layers.h:94</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::graph::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00084">Types.h:84</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">arm_compute::graph::frontend::ConvolutionLayer</a></div><div class="ttdoc">Convolution Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00158">Layers.h:158</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_ac85a46f3ebd3ab09f576a994ac2dce11"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">arm_compute::graph::FastMathHint</a></div><div class="ttdeci">FastMathHint</div><div class="ttdoc">Enable or disable fast math for Convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00118">Types.h:118</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utils_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1utils.xhtml">arm_compute::utils</a></div><div class="ttdef"><b>Definition:</b> <a href="_cast_8h_source.xhtml#l00031">Cast.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml">arm_compute::graph_utils</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00041">GraphUtils.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a"><div class="ttname"><a href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::PoolingType::AVG</a></div><div class="ttdoc">Average Pooling. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_output_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">arm_compute::graph::frontend::OutputLayer</a></div><div class="ttdoc">Output Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00070">Layers.h:70</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_a30bee0b52a919bbcb1dc48b1b6546a16"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a30bee0b52a919bbcb1dc48b1b6546a16">arm_compute::graph_utils::get_weights_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_weights_accessor(const std::string &amp;path, const std::string &amp;data_file, DataLayout file_layout=DataLayout::NCHW)</div><div class="ttdoc">Generates appropriate weights accessor according to the specified path. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00275">GraphUtils.h:275</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stream.xhtml">arm_compute::graph::frontend::Stream</a></div><div class="ttdoc">Stream frontend class to construct simple graphs in a stream fashion. </div><div class="ttdef"><b>Definition:</b> <a href="_stream_8h_source.xhtml#l00045">Stream.h:45</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1frontend_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1frontend.xhtml">arm_compute::graph::frontend</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00031">ILayer.h:31</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5"><div class="ttname"><a href="namespacearm__compute.xhtml#adf2ced65e536375a1c96425d9fced858a26a4b44a837bf97b972628509912b4a5">arm_compute::NonLinearFilterFunction::MAX</a></div><div class="ttdoc">Non linear dilate. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml">arm_compute::graph::frontend::FlattenLayer</a></div><div class="ttdoc">Flatten Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00264">Layers.h:264</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_layer_xhtml_af664a2598e05f8de28fb9f94e3902886"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#af664a2598e05f8de28fb9f94e3902886">arm_compute::graph::frontend::ILayer::set_name</a></div><div class="ttdeci">ILayer &amp; set_name(std::string name)</div><div class="ttdoc">Sets the name of the layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00055">ILayer.h:55</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="graph__resnext50_8cpp.xhtml">graph_resnext50.cpp</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
