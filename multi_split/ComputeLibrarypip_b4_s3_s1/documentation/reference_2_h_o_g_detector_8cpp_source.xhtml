<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/HOGDetector.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('reference_2_h_o_g_detector_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">HOGDetector.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="reference_2_h_o_g_detector_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_h_o_g_detector_8h.xhtml">HOGDetector.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>reference</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;Size2D num_detection_windows(<span class="keyword">const</span> TensorShape &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <span class="keyword">const</span> Size2D &amp;window_step, <span class="keyword">const</span> HOGInfo &amp;hog_info)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_block_strides_width  = hog_info.detection_window_size().width / hog_info.block_stride().width;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_block_strides_height = hog_info.detection_window_size().height / hog_info.block_stride().height;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> Size2D(<a class="code" href="namespacearm__compute.xhtml#a6959e681668a37a9242d2aae4e8b4375">floor_to_multiple</a>(shape.x() - num_block_strides_width, window_step.width) + window_step.width,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                  <a class="code" href="namespacearm__compute.xhtml#a6959e681668a37a9242d2aae4e8b4375">floor_to_multiple</a>(shape.y() - num_block_strides_height, window_step.height) + window_step.height);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a174ee1e2e66053db45c7fb4aa68920e7">   48</a></span>&#160;std::vector&lt;DetectionWindow&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a174ee1e2e66053db45c7fb4aa68920e7">hog_detector</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;descriptor, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_num_detection_windows,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;detection_window_stride, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>, uint16_t idx_class)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>((detection_window_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> % hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">block_stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> != 0),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                             <span class="stringliteral">&quot;Detection window stride width must be multiple of block stride width&quot;</span>);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>((detection_window_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> % hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">block_stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> != 0),</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                             <span class="stringliteral">&quot;Detection window stride height must be multiple of block stride height&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Create vector for identifying each detection window</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::vector&lt;DetectionWindow&gt; windows;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Calculate detection window step</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> window_step(detection_window_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> / hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">block_stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                             detection_window_stride.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a> / hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">block_stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// Calculate number of detection windows</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> num_windows = num_detection_windows(src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), window_step, hog_info);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Calculate detection window and row offsets in feature vector</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> src_offset_x   = window_step.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> * hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ae3664b841732a09d7749953ca5b81373">num_bins</a>() * hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#adb20b5249eedf180a461ea097622fe7f">num_cells_per_block</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#ab220a7dd0ff5c86b4ba8acdf75af3252">area</a>();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> src_offset_y   = window_step.height * hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#ae3664b841732a09d7749953ca5b81373">num_bins</a>() * hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#adb20b5249eedf180a461ea097622fe7f">num_cells_per_block</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#ab220a7dd0ff5c86b4ba8acdf75af3252">area</a>() * src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> src_offset_row = src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>() * src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>().x();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// Calculate detection window attributes</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>       num_block_positions_per_detection_window = hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a52014865347589ff3027a3534181c551">num_block_positions_per_image</a>(hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a0279e383beb758e477ce0673c5db8d57">detection_window_size</a>());</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_bins_per_descriptor_x                = num_block_positions_per_detection_window.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a> * src.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">num_channels</a>();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_blocks_per_descriptor_y              = num_block_positions_per_detection_window.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((num_bins_per_descriptor_x * num_blocks_per_descriptor_y + 1) != hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a8f6435e0a7c016e3cb0fc94b33067e50">descriptor_size</a>());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">size_t</span> win_id = 0;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Traverse feature vector in detection window steps</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> win_y = 0u, offset_y = 0u; win_y &lt; num_windows.height; win_y += window_step.height, offset_y += src_offset_y)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span> win_x = 0u, offset_x = 0u; win_x &lt; num_windows.width; win_x += window_step.width, offset_x += src_offset_x)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="comment">// Reset the score</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordtype">float</span> score = 0.0f;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="comment">// Traverse detection window</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> y = 0u, offset_row = 0u; y &lt; num_blocks_per_descriptor_y; ++y, offset_row += src_offset_row)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> bin_offset = y * num_bins_per_descriptor_x;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">for</span>(<span class="keyword">auto</span> x = 0u; x &lt; num_bins_per_descriptor_x; ++x)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="comment">// Compute Linear SVM</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aac40b7097f2bda9274ae07fa33d15a79">a</a> = src[x + offset_x + offset_y + offset_row];</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a> = descriptor[x + bin_offset];</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    score += a * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">b</a>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">// Add the bias. The bias is located at the position (descriptor_size() - 1)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            score += descriptor[num_bins_per_descriptor_x * num_blocks_per_descriptor_y];</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">if</span>(score &gt; threshold)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <a class="code" href="structarm__compute_1_1_detection_window.xhtml">DetectionWindow</a> window;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">if</span>(win_id++ &lt; max_num_detection_windows)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">x</a>         = win_x * hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">block_stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">y</a>         = win_y * hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">block_stride</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">width</a>     = hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a0279e383beb758e477ce0673c5db8d57">detection_window_size</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">width</a>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">height</a>    = hog_info.<a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml#a0279e383beb758e477ce0673c5db8d57">detection_window_size</a>().<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">height</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">idx_class</a> = idx_class;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    window.<a class="code" href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">score</a>     = score;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    windows.push_back(window);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> windows;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">template</span> std::vector&lt;DetectionWindow&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a174ee1e2e66053db45c7fb4aa68920e7">hog_detector</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>, <span class="keyword">const</span> std::vector&lt;float&gt; &amp;descriptor, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_num_detection_windows,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;detection_window_stride, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">threshold</a>, uint16_t idx_class);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;} <span class="comment">// namespace reference</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00133">Convolution.cpp:133</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a4dde988b1b2adba65ae3efa69f65d960"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a4dde988b1b2adba65ae3efa69f65d960">arm_compute::DetectionWindow::x</a></div><div class="ttdeci">uint16_t x</div><div class="ttdoc">Top-left x coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00545">Types.h:545</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aac40b7097f2bda9274ae07fa33d15a79"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aac40b7097f2bda9274ae07fa33d15a79">arm_compute::test::validation::a</a></div><div class="ttdeci">CLTensor a</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00121">GEMM.cpp:121</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a8c5cd9b525ee73a24b1d9d8e34982d1c"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a8c5cd9b525ee73a24b1d9d8e34982d1c">arm_compute::DetectionWindow::score</a></div><div class="ttdeci">float score</div><div class="ttdoc">Confidence value for the detection window. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00550">Types.h:550</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_adb20b5249eedf180a461ea097622fe7f"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#adb20b5249eedf180a461ea097622fe7f">arm_compute::HOGInfo::num_cells_per_block</a></div><div class="ttdeci">Size2D num_cells_per_block() const </div><div class="ttdoc">Calculates the number of cells for each block. </div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml">arm_compute::HOGInfo</a></div><div class="ttdoc">Store the HOG&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_h_o_g_info_8h_source.xhtml#l00035">HOGInfo.h:35</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00294">SimpleTensor.h:294</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_aa9a69eade27460f843fcfba5abb7ae52"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#aa9a69eade27460f843fcfba5abb7ae52">arm_compute::HOGInfo::block_stride</a></div><div class="ttdeci">const Size2D &amp; block_stride() const </div><div class="ttdoc">The block stride in pixels. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02afeaaf8574e7a78d6b466ff2695052"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02afeaaf8574e7a78d6b466ff2695052">arm_compute::Size2D::height</a></div><div class="ttdeci">size_t height</div><div class="ttdoc">Height of the image region or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00093">Size2D.h:93</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ad0eab1042455a2067c812ab8071d5376"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ad0eab1042455a2067c812ab8071d5376">arm_compute::DetectionWindow::width</a></div><div class="ttdeci">uint16_t width</div><div class="ttdoc">Width of the detection window. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00547">Types.h:547</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a8f6435e0a7c016e3cb0fc94b33067e50"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a8f6435e0a7c016e3cb0fc94b33067e50">arm_compute::HOGInfo::descriptor_size</a></div><div class="ttdeci">size_t descriptor_size() const </div><div class="ttdoc">The size of HOG descriptor. </div></div>
<div class="ttc" id="_h_o_g_detector_8h_xhtml"><div class="ttname"><a href="_h_o_g_detector_8h.xhtml">HOGDetector.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a6959e681668a37a9242d2aae4e8b4375"><div class="ttname"><a href="namespacearm__compute.xhtml#a6959e681668a37a9242d2aae4e8b4375">arm_compute::floor_to_multiple</a></div><div class="ttdeci">auto floor_to_multiple(S value, T divisor) -&gt; decltype((value/divisor)*divisor)</div><div class="ttdoc">Computes the largest number smaller or equal to value that is a multiple of divisor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00078">Utils.h:78</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ae5c4999829285e20d3b491807fa46fd1"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ae5c4999829285e20d3b491807fa46fd1">arm_compute::DetectionWindow::idx_class</a></div><div class="ttdeci">uint16_t idx_class</div><div class="ttdoc">Index of the class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00549">Types.h:549</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_a81c9f8d0b8c3b49d770be14dbe9f0d37"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#a81c9f8d0b8c3b49d770be14dbe9f0d37">arm_compute::DetectionWindow::height</a></div><div class="ttdeci">uint16_t height</div><div class="ttdoc">Height of the detection window. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00548">Types.h:548</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00059">SimpleTensor.h:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a174ee1e2e66053db45c7fb4aa68920e7"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a174ee1e2e66053db45c7fb4aa68920e7">arm_compute::test::validation::reference::hog_detector</a></div><div class="ttdeci">std::vector&lt; DetectionWindow &gt; hog_detector(const SimpleTensor&lt; T &gt; &amp;src, const std::vector&lt; T &gt; &amp;descriptor, unsigned int max_num_detection_windows, const HOGInfo &amp;hog_info, const Size2D &amp;detection_window_stride, float threshold, uint16_t idx_class)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_h_o_g_detector_8cpp_source.xhtml#l00048">HOGDetector.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml_abdd3637f2bbde9d7d0cc0b7bbd8400bb"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb">arm_compute::test::SimpleTensor::num_channels</a></div><div class="ttdeci">int num_channels() const override</div><div class="ttdoc">Number of channels of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00350">SimpleTensor.h:350</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_a02bed8590a9ddf520e58a060059518ec"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a02bed8590a9ddf520e58a060059518ec">arm_compute::Size2D::width</a></div><div class="ttdeci">size_t width</div><div class="ttdoc">Width of the image region or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00092">Size2D.h:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle. </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:34</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml">arm_compute::DetectionWindow</a></div><div class="ttdoc">Detection window used for the object detection. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00543">Types.h:543</a></div></div>
<div class="ttc" id="structarm__compute_1_1_detection_window_xhtml_ab0580f504a7428539be299fa71565f30"><div class="ttname"><a href="structarm__compute_1_1_detection_window.xhtml#ab0580f504a7428539be299fa71565f30">arm_compute::DetectionWindow::y</a></div><div class="ttdeci">uint16_t y</div><div class="ttdoc">Top-left y coordinate. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00546">Types.h:546</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a52014865347589ff3027a3534181c551"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a52014865347589ff3027a3534181c551">arm_compute::HOGInfo::num_block_positions_per_image</a></div><div class="ttdeci">Size2D num_block_positions_per_image(const Size2D &amp;image_size) const </div><div class="ttdoc">Calculates the number of block positions for the given image size. </div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_ae3664b841732a09d7749953ca5b81373"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#ae3664b841732a09d7749953ca5b81373">arm_compute::HOGInfo::num_bins</a></div><div class="ttdeci">size_t num_bins() const </div><div class="ttdoc">The number of histogram bins for each cell. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a7b8004eef325a40dd43eb80755610fff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a7b8004eef325a40dd43eb80755610fff">arm_compute::test::validation::b</a></div><div class="ttdeci">CLTensor b</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_c_l_2_g_e_m_m_8cpp_source.xhtml#l00122">GEMM.cpp:122</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a6cae310822a46019ba25a00ddb0f7e62"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6cae310822a46019ba25a00ddb0f7e62">arm_compute::test::validation::reference::threshold</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; threshold(const SimpleTensor&lt; T &gt; &amp;src, T threshold, T false_value, T true_value, ThresholdType type, T upper)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_threshold_8cpp_source.xhtml#l00035">Threshold.cpp:35</a></div></div>
<div class="ttc" id="classarm__compute_1_1_size2_d_xhtml_ab220a7dd0ff5c86b4ba8acdf75af3252"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#ab220a7dd0ff5c86b4ba8acdf75af3252">arm_compute::Size2D::area</a></div><div class="ttdeci">size_t area() const </div><div class="ttdoc">The area of the image or rectangle calculated as (width * height) </div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00053">Size2D.h:53</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6743f0a130e8311e6f5b1a23df102472"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">arm_compute::test::validation::src</a></div><div class="ttdeci">convolution configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00147">Convolution.cpp:147</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00319">Error.h:319</a></div></div>
<div class="ttc" id="classarm__compute_1_1_h_o_g_info_xhtml_a0279e383beb758e477ce0673c5db8d57"><div class="ttname"><a href="classarm__compute_1_1_h_o_g_info.xhtml#a0279e383beb758e477ce0673c5db8d57">arm_compute::HOGInfo::detection_window_size</a></div><div class="ttdeci">const Size2D &amp; detection_window_size() const </div><div class="ttdoc">The detection window size in pixels. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="reference_2_h_o_g_detector_8cpp.xhtml">HOGDetector.cpp</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
