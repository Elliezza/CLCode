<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/depthwise_convolution.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('depthwise__convolution_8cl_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">depthwise_convolution.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="depthwise__convolution_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="helpers_8h.xhtml">helpers.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#if CONV_STRIDE_X == 1</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define convolution1x3 convolution1x3_stride_1</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 2</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#define convolution1x3 convolution1x3_stride_2</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 3</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#define convolution1x3 convolution1x3_stride_3</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#error &quot;Stride not supported&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">inline</span> float2 convolution1x3_stride_1(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           left_coeff,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           middle_coeff,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                      <span class="keyword">const</span> <span class="keywordtype">float</span>           right_coeff)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    float4 temp = vload4(0, (__global <span class="keywordtype">float</span> *)left_pixel);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    float2 left   = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s01, float2);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    float2 middle = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s12, float2);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    float2 right  = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s23, float2);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> left * (float2)left_coeff + middle * (float2)middle_coeff + right * (float2)right_coeff;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;inline float2 convolution1x3_stride_2(__global const uchar *left_pixel,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                      const <span class="keywordtype">float</span>           left_coeff,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                      const <span class="keywordtype">float</span>           middle_coeff,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                      const <span class="keywordtype">float</span>           right_coeff)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    float4 temp0 = vload4(0, (__global <span class="keywordtype">float</span> *)left_pixel);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">float</span>  temp1 = *((__global <span class="keywordtype">float</span> *)(left_pixel + 4 * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    float2 left   = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s02, float2);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    float2 middle = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s13, float2);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    float2 right  = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((float2)(temp0.s2, temp1), float2);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> left * (float2)left_coeff + middle * (float2)middle_coeff + right * (float2)right_coeff;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;inline float2 convolution1x3_stride_3(__global const uchar *left_pixel,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                      const <span class="keywordtype">float</span>           left_coeff,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                      const <span class="keywordtype">float</span>           middle_coeff,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                      const <span class="keywordtype">float</span>           right_coeff)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    float4 temp0 = vload4(0, (__global <span class="keywordtype">float</span> *)left_pixel);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    float2 temp1 = vload2(0, (__global <span class="keywordtype">float</span> *)(left_pixel + 4 * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    float2 left   = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s03, float2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    float2 middle = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((float2)(temp0.s1, temp1.s0), float2);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    float2 right  = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((float2)(temp0.s2, temp1.s1), float2);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> left * (float2)left_coeff + middle * (float2)middle_coeff + right * (float2)right_coeff;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;inline float2 <a class="code" href="convolution3x3_8cl.xhtml#afc5fefe72e66f0ae5191fd5b708fade9">convolution3x3</a>(</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>      *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">src</a>,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    const <span class="keywordtype">float</span> mat0, const <span class="keywordtype">float</span> mat1, const <span class="keywordtype">float</span> mat2,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    const <span class="keywordtype">float</span> mat3, const <span class="keywordtype">float</span> mat4, const <span class="keywordtype">float</span> mat5,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    const <span class="keywordtype">float</span> mat6, const <span class="keywordtype">float</span> mat7, const <span class="keywordtype">float</span> mat8)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    float2 pixels;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    pixels = <a class="code" href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a>(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(src, 0, 0), mat0, mat1, mat2);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    pixels += <a class="code" href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a>(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(src, 0, 1), mat3, mat4, mat5);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    pixels += <a class="code" href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a>(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(src, 0, 2), mat6, mat7, mat8);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> pixels;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3(</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(weights)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    ,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    src     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(src);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> weights = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(weights);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> -= (get_global_id(2) - get_global_id(2) / DEPTH_MULTIPLIER) * src_step_z;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    uchar3 <a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>          = (uchar3)(0, 1, 2) * (uchar3)weights_stride_y;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    float3 weights_values0 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + offset.s0));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    float3 weights_values1 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + offset.s1));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    float3 weights_values2 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + offset.s2));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    float2 pixels = <a class="code" href="convolution3x3_8cl.xhtml#afc5fefe72e66f0ae5191fd5b708fade9">convolution3x3</a>(&amp;src, weights_values0.s0, weights_values0.s1, weights_values0.s2,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                   weights_values1.s0, weights_values1.s1, weights_values1.s2,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                   weights_values2.s0, weights_values2.s1, weights_values2.s2);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    pixels += (float2)(*((__global <span class="keywordtype">float</span> *)(biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * biases_stride_x)));</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    vstore2(pixels, 0, (__global <span class="keywordtype">float</span> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#endif //defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST2X1_STRIDE1(acc, src0, weights_row0) \</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">    ({                                                             \</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);            \</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);            \</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);            \</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s1, weights_row0.s0, acc.s1);            \</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s1, acc.s1);            \</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s2, acc.s1);            \</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST4X1_STRIDE1(acc, src0, weights_row0) \</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">    ({                                                             \</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);            \</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);            \</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);            \</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s1, weights_row0.s0, acc.s1);            \</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s1, acc.s1);            \</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s2, acc.s1);            \</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s2, weights_row0.s0, acc.s2);            \</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s3, weights_row0.s1, acc.s2);            \</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s4, weights_row0.s2, acc.s2);            \</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s3, weights_row0.s0, acc.s3);            \</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s4, weights_row0.s1, acc.s3);            \</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s5, weights_row0.s2, acc.s3);            \</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST2X1_STRIDE2(acc, src0, src1, weights_row0) \</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">    ({                                                                   \</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);                  \</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);                  \</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);                  \</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s0, acc.s1);                  \</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s1, acc.s1);                  \</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">        acc.s1 = fma(src1.s0, weights_row0.s2, acc.s1);                  \</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#define CONVOLUTION1x3_BIFROST4X1_STRIDE2(acc, src0, src1, weights_row0) \</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">    ({                                                                   \</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s0, weights_row0.s0, acc.s0);                  \</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s1, weights_row0.s1, acc.s0);                  \</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">        acc.s0 = fma(src0.s2, weights_row0.s2, acc.s0);                  \</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s2, weights_row0.s0, acc.s1);                  \</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s3, weights_row0.s1, acc.s1);                  \</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">        acc.s1 = fma(src0.s4, weights_row0.s2, acc.s1);                  \</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s4, weights_row0.s0, acc.s2);                  \</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s5, weights_row0.s1, acc.s2);                  \</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">        acc.s2 = fma(src0.s6, weights_row0.s2, acc.s2);                  \</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s6, weights_row0.s0, acc.s3);                  \</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">        acc.s3 = fma(src0.s7, weights_row0.s1, acc.s3);                  \</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">        acc.s3 = fma(src1.s0, weights_row0.s2, acc.s3);                  \</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">    })</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex1_stridey1_bifrost_f32(</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst),</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(weights)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    ,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;{</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    src     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(src);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> weights = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(weights);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    float2 pixels0 = 0.0f;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    float2 pixels1 = 0.0f;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    float2 pixels2 = 0.0f;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    float2 pixels3 = 0.0f;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    __global uchar *weights_addr = (__global uchar *)weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    __global uchar *src_addr     = src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> - (get_global_id(2) - get_global_id(2) / DEPTH_MULTIPLIER) * src_step_z;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    float3 weights_row0 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    float3 weights_row1 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    float3 weights_row2 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Note: Since each work-item computes 4x2 elements, we need to load 6 rows from the input tensor</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    float4 src00 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    float4 src10 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    float4 src20 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    float4 src30 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    float4 src40 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    float4 src50 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 5 * src_stride_y)); <span class="comment">// Row5</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels0, src00, weights_row0);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels0, src10, weights_row1);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels0, src20, weights_row2);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels1, src10, weights_row0);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels1, src20, weights_row1);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels1, src30, weights_row2);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels2, src20, weights_row0);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels2, src30, weights_row1);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels2, src40, weights_row2);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels3, src30, weights_row0);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels3, src40, weights_row1);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE1(pixels3, src50, weights_row2);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">float</span> bias = *((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, get_global_id(2))));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    pixels0 += (float2)bias;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    pixels1 += (float2)bias;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    pixels2 += (float2)bias;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    pixels3 += (float2)bias;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    vstore2(pixels0, 0, (__global <span class="keywordtype">float</span> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 0 * dst_stride_y));</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    vstore2(pixels1, 0, (__global <span class="keywordtype">float</span> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 1 * dst_stride_y));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    vstore2(pixels2, 0, (__global <span class="keywordtype">float</span> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 2 * dst_stride_y));</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    vstore2(pixels3, 0, (__global <span class="keywordtype">float</span> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 3 * dst_stride_y));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex2_stridey2_bifrost_f32(</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst),</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(weights)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    ,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    src     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(src);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> weights = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(weights);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    float2 pixels0 = 0.0f;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    float2 pixels1 = 0.0f;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    __global uchar *weights_addr = (__global uchar *)weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    __global uchar *src_addr     = src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> - (get_global_id(2) - get_global_id(2) / DEPTH_MULTIPLIER) * src_step_z;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    float3 weights_row0 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    float3 weights_row1 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    float3 weights_row2 = vload3(0, (__global <span class="keywordtype">float</span> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">// Note: Since each work-item computes 4x2 elements, we need to load 5 rows from the input tensor</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    float4 src00 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    float2 src01 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    float4 src10 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    float2 src11 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    float4 src20 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    float2 src21 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    float4 src30 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    float2 src31 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    float4 src40 = vload4(0, (__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    float2 src41 = vload2(2, (__global <span class="keywordtype">float</span> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels0, src00, src01, weights_row0);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels0, src10, src11, weights_row1);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels0, src20, src21, weights_row2);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels1, src20, src21, weights_row0);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels1, src30, src31, weights_row1);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    CONVOLUTION1x3_BIFROST2X1_STRIDE2(pixels1, src40, src41, weights_row2);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordtype">float</span> bias = *((__global <span class="keywordtype">float</span> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, get_global_id(2))));</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    pixels0 += (float2)bias;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    pixels1 += (float2)bias;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    vstore2(pixels0, 0, (__global <span class="keywordtype">float</span> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 0 * dst_stride_y));</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    vstore2(pixels1, 0, (__global <span class="keywordtype">float</span> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 1 * dst_stride_y));</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="preprocessor">#endif // defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="preprocessor">#if defined(SRC_WIDTH) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_weights_reshape(</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a>(dst)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;#ifdef HAS_BIAS</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    ,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;#endif <span class="comment">/* HAS_BIAS */</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;)</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;{</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> src = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(src);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* HAS_BIAS */</span><span class="preprocessor"></span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    __global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *input_ptr = (__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)src.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    __global uchar *output_ptr    = dst_ptr + dst_offset_first_element_in_bytes + get_global_id(1) * SRC_WIDTH * dst_stride_x + get_global_id(2) * dst_stride_y;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; SRC_WIDTH; ++i, ++input_ptr)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(output_ptr + i * dst_stride_x)) = *input_ptr;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">if</span>(get_global_id(1) == 0)</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    {</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(output_ptr + SRC_WIDTH * get_global_size(1) * dst_stride_x)) = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * biases_stride_x));</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor">#endif //defined(SRC_WIDTH) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">#if defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(SRC_HEIGHT) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(PAD_VALUE) &amp;&amp; defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_im2col(<a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src), <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst))</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> dst = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(dst);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_pixel_linear = get_global_id(1) * STRIDE_X;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> full_length      = SRC_WIDTH + PAD_LEFT + PAD_RIGHT;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_initial_x    = STRIDE_X * (((full_length - KERNEL_WIDTH) / STRIDE_X) + 1);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_x = -PAD_LEFT + src_pixel_linear % max_initial_x;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_y = -PAD_TOP + src_pixel_linear / max_initial_x * STRIDE_Y;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> src_z = get_global_id(2) / DEPTH_MULTIPLIER;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    __global uchar *input_ptr      = src_ptr + src_offset_first_element_in_bytes + src_z * src_stride_z;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    __global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *output_ptr = ((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>));</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = src_y; y &lt; src_y + KERNEL_HEIGHT; ++y)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = src_x; x &lt; src_x + KERNEL_WIDTH; ++x, ++output_ptr)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="keywordflow">if</span>(x &lt; 0 || x &gt;= SRC_WIDTH || y &lt; 0 || y &gt;= SRC_HEIGHT)</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                *output_ptr = PAD_VALUE;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            {</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                *output_ptr = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)(input_ptr + x * src_stride_x + y * src_stride_y));</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        }</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    *output_ptr = (<a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a>)(1);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor">#endif // defined(HAS_BIAS)</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;}</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="preprocessor">#endif //defined(STRIDE_X) &amp;&amp; defined(STRIDE_Y) &amp;&amp; defined(PAD_LEFT) &amp;&amp; defined(PAD_TOP) &amp;&amp; defined(PAD_RIGHT) &amp;&amp; defined(PAD_BOTTOM) &amp;&amp; defined(KERNEL_WIDTH) &amp;&amp; defined(KERNEL_HEIGHT) &amp;&amp; defined(SRC_WIDTH) &amp;&amp; defined(DATA_TYPE) &amp;&amp; defined(PAD_VALUE) &amp;&amp; defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor">#if defined(CONV_WIDTH) &amp;&amp; defined(CONV_HEIGHT) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_vector_to_tensor(</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(src),</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst))</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> src = <a class="code" href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a>(src);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> patch_size = CONV_WIDTH * CONV_HEIGHT;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> id0        = get_global_id(0);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z          = id0 / patch_size;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> index2D    = id0 - z * patch_size;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    __global uchar *out_ptr          = dst_ptr + dst_offset_first_element_in_bytes + index2D % CONV_WIDTH * dst_stride_x + index2D / CONV_WIDTH * dst_stride_y + z * dst_stride_z;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)out_ptr) = *((__global <a class="code" href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a> *)src.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;}</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="preprocessor">#endif //defined(CONV_WIDTH) &amp;&amp; defined(CONV_HEIGHT) &amp;&amp; defined(DATA_TYPE)</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) &amp;&amp; defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="preprocessor">#if defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="preprocessor">#if CONV_STRIDE_X == 1</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="preprocessor">#define convolution1x3_f16 convolution1x3_stride_1_f16</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 2</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="preprocessor">#define convolution1x3_f16 convolution1x3_stride_2_f16</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="preprocessor">#elif CONV_STRIDE_X == 3</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">#define convolution1x3_f16 convolution1x3_stride_3_f16</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor">#error &quot;Stride not supported&quot;</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* CONV_STRIDE_X */</span><span class="preprocessor"></span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="keyword">inline</span> half4 convolution1x3_stride_1_f16(__global <span class="keyword">const</span> uchar *left_pixel,</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            left_coeff,</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            middle_coeff,</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            right_coeff)</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;{</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    half8 temp = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)left_pixel);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    half4 left   = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s0123, half4);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    half4 middle = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s1234, half4);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    half4 right  = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp.s2345, half4);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">return</span> left * (half4)left_coeff + middle * (half4)middle_coeff + right * (half4)right_coeff;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;inline half4 convolution1x3_stride_2_f16(__global const uchar *left_pixel,</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                         const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            left_coeff,</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                         const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            middle_coeff,</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                                         const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            right_coeff)</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;{</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    half8 temp0 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)left_pixel);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> temp1  = *((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(left_pixel + 8 * <span class="keyword">sizeof</span>(<a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>)));</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    half4 left   = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s0246, half4);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    half4 middle = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s1357, half4);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    half4 right  = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>((half4)(temp0.s246, temp1), half4);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">return</span> left * (half4)left_coeff + middle * (half4)middle_coeff + right * (half4)right_coeff;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;}</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;inline half4 convolution1x3_stride_3_f16(__global const uchar *left_pixel,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                         const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            left_coeff,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                         const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            middle_coeff,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                         const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>            right_coeff)</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;{</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    half16 temp0 = vload16(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)left_pixel);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    half4 left   = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s0369, half4);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    half4 middle = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s147A, half4);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    half4 right  = <a class="code" href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(temp0.s258B, half4);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordflow">return</span> left * (half4)left_coeff + middle * (half4)middle_coeff + right * (half4)right_coeff;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;inline half4 convolution3x3_f16(</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>     *src,</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat0, const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat1, const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat2,</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat3, const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat4, const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat5,</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat6, const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat7, const <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> mat8)</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;{</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    half4 pixels;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    pixels = convolution1x3_f16(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(src, 0, 0), mat0, mat1, mat2);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    pixels += convolution1x3_f16(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(src, 0, 1), mat3, mat4, mat5);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    pixels += convolution1x3_f16(<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(src, 0, 2), mat6, mat7, mat8);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">return</span> pixels;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;}</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="preprocessor">#if defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_f16(</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst),</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(weights)</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    ,</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;{</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    src     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(src);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> weights = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(weights);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    src.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> -= (get_global_id(2) - get_global_id(2) / DEPTH_MULTIPLIER) * src_step_z;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    uchar3 offset         = (uchar3)(0, 1, 2) * (uchar3)weights_stride_y;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    half3 weights_values0 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + offset.s0));</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    half3 weights_values1 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + offset.s1));</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    half3 weights_values2 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + offset.s2));</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    half4 pixels = convolution3x3_f16(&amp;src, weights_values0.s0, weights_values0.s1, weights_values0.s2,</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                                      weights_values1.s0, weights_values1.s1, weights_values1.s2,</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                      weights_values2.s0, weights_values2.s1, weights_values2.s2);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="preprocessor">#if defined(HAS_BIAS)</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    pixels += (half4)(*((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(biases.<a class="code" href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + get_global_id(2) * biases_stride_x)));</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="preprocessor">#endif //defined(HAS_BIAS)</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    vstore4(pixels, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;}</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="preprocessor">#endif // defined(DEPTH_MULTIPLIER)</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="preprocessor">#endif // defined(CONV_STRIDE_X)</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex1_stridey1_bifrost_f16(</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst),</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(weights)</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    ,</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;)</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;{</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    src     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(src);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> weights = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(weights);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> bias = *((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, get_global_id(2))));</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    half4 pixels0 = 0.0f;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    half4 pixels1 = 0.0f;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    half4 pixels2 = 0.0f;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    half4 pixels3 = 0.0f;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    __global uchar *weights_addr = (__global uchar *)weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    __global uchar *src_addr     = (__global uchar *)<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 0) - (get_global_id(2) - get_global_id(2) / DEPTH_MULTIPLIER) * src_step_z;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    half3 weights_row0 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    half3 weights_row1 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    half3 weights_row2 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">// Note: Since each work-item computes 4x4 elements, we need to load 6 rows from the input tensor</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    half8 src00 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    half8 src10 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    half8 src20 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    half8 src30 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    half8 src40 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    half8 src50 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 5 * src_stride_y)); <span class="comment">// Row5</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels0, src00, weights_row0);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels0, src10, weights_row1);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels0, src20, weights_row2);</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels1, src10, weights_row0);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels1, src20, weights_row1);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels1, src30, weights_row2);</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels2, src20, weights_row0);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels2, src30, weights_row1);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels2, src40, weights_row2);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels3, src30, weights_row0);</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels3, src40, weights_row1);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE1(pixels3, src50, weights_row2);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    pixels0 += (half4)bias;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    pixels1 += (half4)bias;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    pixels2 += (half4)bias;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    pixels3 += (half4)bias;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    vstore4(pixels0, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 0 * dst_stride_y));</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    vstore4(pixels1, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 1 * dst_stride_y));</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    vstore4(pixels2, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 2 * dst_stride_y));</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    vstore4(pixels3, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 3 * dst_stride_y));</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;}</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;__kernel <span class="keywordtype">void</span> depthwise_convolution_3x3_stridex2_stridey2_bifrost_f16(</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(src),</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(dst),</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <a class="code" href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(weights)</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;#<span class="keywordflow">if</span> defined(HAS_BIAS)</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    ,</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <a class="code" href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a>(biases)</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;#endif <span class="comment">//defined(HAS_BIAS)</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;)</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;{</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    src     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(src);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <a class="code" href="struct_image.xhtml">Image</a>    dst     = <a class="code" href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a>(dst);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <a class="code" href="struct_tensor3_d.xhtml">Tensor3D</a> weights = <a class="code" href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a>(weights);</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <a class="code" href="struct_vector.xhtml">Vector</a> biases = <a class="code" href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a>(biases);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> bias = *((__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(<a class="code" href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a>(&amp;biases, get_global_id(2))));</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    half4 pixels0 = 0.0f;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    half4 pixels1 = 0.0f;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    __global uchar *weights_addr = (__global uchar *)weights.<a class="code" href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a>;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    __global uchar *src_addr     = (__global uchar *)<a class="code" href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>(&amp;src, 0, 0) - (get_global_id(2) - get_global_id(2) / DEPTH_MULTIPLIER) * src_step_z;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="comment">// Load the weights</span></div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    half3 weights_row0 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 0 * weights_stride_y));</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    half3 weights_row1 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 1 * weights_stride_y));</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    half3 weights_row2 = vload3(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(weights_addr + 2 * weights_stride_y));</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="comment">// Note: Since each work-item computes 2x4 elements, we need to load 5 rows from the input tensor</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    half8 src00 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    half2 src01 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 0 * src_stride_y)); <span class="comment">// Row0</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    half8 src10 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    half2 src11 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 1 * src_stride_y)); <span class="comment">// Row1</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    half8 src20 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    half2 src21 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 2 * src_stride_y)); <span class="comment">// Row2</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    half8 src30 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    half2 src31 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 3 * src_stride_y)); <span class="comment">// Row3</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    half8 src40 = vload8(0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    half2 src41 = vload2(4, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(src_addr + 4 * src_stride_y)); <span class="comment">// Row4</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels0, src00, src01, weights_row0);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels0, src10, src11, weights_row1);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels0, src20, src21, weights_row2);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels1, src20, src21, weights_row0);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels1, src30, src31, weights_row1);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    CONVOLUTION1x3_BIFROST4X1_STRIDE2(pixels1, src40, src41, weights_row2);</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="preprocessor">#ifdef HAS_BIAS</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    pixels0 += (half4)bias;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    pixels1 += (half4)bias;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(HAS_BIAS) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    vstore4(pixels0, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 0 * dst_stride_y));</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    vstore4(pixels1, 0, (__global <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a> *)(dst.<a class="code" href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">ptr</a> + 1 * dst_stride_y));</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;}</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="preprocessor">#endif // defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) &amp;&amp; defined(DEPTH_MULTIPLIER)</span></div><div class="ttc" id="struct_vector_xhtml"><div class="ttname"><a href="struct_vector.xhtml">Vector</a></div><div class="ttdoc">Structure to hold Vector information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00134">helpers.h:134</a></div></div>
<div class="ttc" id="fixed__point_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="fixed__point_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00098">fixed_point.h:98</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a31c8c760f08fb1a331b16b7c204321dc"><div class="ttname"><a href="helpers_8h.xhtml#a31c8c760f08fb1a331b16b7c204321dc">CONVERT_TO_TENSOR3D_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_TENSOR3D_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00119">helpers.h:119</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a527bfdf5eeb306f1cf01c4a8e29f38e0"><div class="ttname"><a href="helpers_8h.xhtml#a527bfdf5eeb306f1cf01c4a8e29f38e0">CONVERT_TO_VECTOR_STRUCT</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00098">helpers.h:98</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afb8c72ce35c4a1f4a2588d6573e54aa1"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afb8c72ce35c4a1f4a2588d6573e54aa1">DATA_TYPE</a></div><div class="ttdeci">#define DATA_TYPE</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00027">convolution3x3.cl:27</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00044">Types.h:44</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a22f42fcf2077d951271df83b55c1a71a"><div class="ttname"><a href="helpers_8h.xhtml#a22f42fcf2077d951271df83b55c1a71a">IMAGE_DECLARATION</a></div><div class="ttdeci">#define IMAGE_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00068">helpers.h:68</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml"><div class="ttname"><a href="struct_tensor3_d.xhtml">Tensor3D</a></div><div class="ttdoc">Structure to hold 3D tensor information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00151">helpers.h:151</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00303">helpers.h:303</a></div></div>
<div class="ttc" id="helpers_8h_xhtml"><div class="ttname"><a href="helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_afc5fefe72e66f0ae5191fd5b708fade9"><div class="ttname"><a href="convolution3x3_8cl.xhtml#afc5fefe72e66f0ae5191fd5b708fade9">convolution3x3</a></div><div class="ttdeci">short8 convolution3x3(Image *src, const short mat0, const short mat1, const short mat2, const short mat3, const short mat4, const short mat5, const short mat6, const short mat7, const short mat8, uint scale)</div><div class="ttdoc">Apply a 3x3 convolution matrix to a single channel U8 input image and return the result. </div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00082">convolution3x3.cl:82</a></div></div>
<div class="ttc" id="struct_vector_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_vector.xhtml#acf52c23cbd7424606c10a606524e3e32">Vector::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00136">helpers.h:136</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a40a6eb9f2a7712f08d6bb8ff6c9e6ca7"><div class="ttname"><a href="helpers_8h.xhtml#a40a6eb9f2a7712f08d6bb8ff6c9e6ca7">VECTOR_DECLARATION</a></div><div class="ttdeci">#define VECTOR_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00062">helpers.h:62</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">CLTensor dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00137">Convolution.cpp:137</a></div></div>
<div class="ttc" id="struct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00142">helpers.h:142</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00076">helpers.h:76</a></div></div>
<div class="ttc" id="struct_image_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_image.xhtml#acf52c23cbd7424606c10a606524e3e32">Image::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00144">helpers.h:144</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a64d779f80eeb923e0ab2313433f7b40b"><div class="ttname"><a href="helpers_8h.xhtml#a64d779f80eeb923e0ab2313433f7b40b">CONVERT_TO_VECTOR_STRUCT_NO_STEP</a></div><div class="ttdeci">#define CONVERT_TO_VECTOR_STRUCT_NO_STEP(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00101">helpers.h:101</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a7e4940407322d6f0ccb8b6b86b856019"><div class="ttname"><a href="helpers_8h.xhtml#a7e4940407322d6f0ccb8b6b86b856019">vector_offset</a></div><div class="ttdeci">__global const uchar * vector_offset(const Vector *vec, int x)</div><div class="ttdoc">Get the pointer position of a Vector. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00292">helpers.h:292</a></div></div>
<div class="ttc" id="helpers_8h_xhtml_a541f8db866a0fa93ee67d58ea31a7d0c"><div class="ttname"><a href="helpers_8h.xhtml#a541f8db866a0fa93ee67d58ea31a7d0c">CONVERT_TENSOR3D_TO_IMAGE_STRUCT</a></div><div class="ttdeci">#define CONVERT_TENSOR3D_TO_IMAGE_STRUCT(name)</div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00116">helpers.h:116</a></div></div>
<div class="ttc" id="struct_tensor3_d_xhtml_acf52c23cbd7424606c10a606524e3e32"><div class="ttname"><a href="struct_tensor3_d.xhtml#acf52c23cbd7424606c10a606524e3e32">Tensor3D::ptr</a></div><div class="ttdeci">__global uchar * ptr</div><div class="ttdoc">Pointer to the starting postion of the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="helpers_8h_source.xhtml#l00153">helpers.h:153</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a6743f0a130e8311e6f5b1a23df102472"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a6743f0a130e8311e6f5b1a23df102472">arm_compute::test::validation::src</a></div><div class="ttdeci">convolution configure &amp; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00147">Convolution.cpp:147</a></div></div>
<div class="ttc" id="convolution3x3_8cl_xhtml_a92702074338198e81a46c3e309d9b04f"><div class="ttname"><a href="convolution3x3_8cl.xhtml#a92702074338198e81a46c3e309d9b04f">convolution1x3</a></div><div class="ttdeci">short8 convolution1x3(__global const uchar *left_pixel, const short left_coeff, const short middle_coeff, const short right_coeff)</div><div class="ttdoc">Compute a 1D horizontal convolution of size 3 for 8 bytes assuming the input is made of 1 channel of ...</div><div class="ttdef"><b>Definition:</b> <a href="convolution3x3_8cl_source.xhtml#l00043">convolution3x3.cl:43</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="depthwise__convolution_8cl.xhtml">depthwise_convolution.cl</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:36 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
