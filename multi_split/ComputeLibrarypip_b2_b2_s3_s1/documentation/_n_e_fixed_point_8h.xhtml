<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/core/NEON/NEFixedPoint.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_n_e_fixed_point_8h.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">NEFixedPoint.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="arm__compute_2core_2_fixed_point_8h_source.xhtml">arm_compute/core/FixedPoint.h</a>&quot;</code><br />
<code>#include &lt;arm_neon.h&gt;</code><br />
<code>#include &quot;<a class="el" href="_n_e_fixed_point_8inl_source.xhtml">arm_compute/core/NEON/NEFixedPoint.inl</a>&quot;</code><br />
</div>
<p><a href="_n_e_fixed_point_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">This file contains all available output stages for GEMMLowp on OpenCL. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a16a1bee14f1db073f75caa76dacf5078"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a16a1bee14f1db073f75caa76dacf5078">qint8x8_t</a> = int8x8_t</td></tr>
<tr class="memdesc:a16a1bee14f1db073f75caa76dacf5078"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 8 elements  <a href="namespacearm__compute.xhtml#a16a1bee14f1db073f75caa76dacf5078">More...</a><br /></td></tr>
<tr class="separator:a16a1bee14f1db073f75caa76dacf5078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace2375b626995858a398e1ffb3108f14"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ace2375b626995858a398e1ffb3108f14">qint8x8x2_t</a> = int8x8x2_t</td></tr>
<tr class="memdesc:ace2375b626995858a398e1ffb3108f14"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 16 elements  <a href="namespacearm__compute.xhtml#ace2375b626995858a398e1ffb3108f14">More...</a><br /></td></tr>
<tr class="separator:ace2375b626995858a398e1ffb3108f14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a252c74fae9a9238ef7c23d306e670706"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">qint8x8x3_t</a> = int8x8x3_t</td></tr>
<tr class="memdesc:a252c74fae9a9238ef7c23d306e670706"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 24 elements  <a href="namespacearm__compute.xhtml#a252c74fae9a9238ef7c23d306e670706">More...</a><br /></td></tr>
<tr class="separator:a252c74fae9a9238ef7c23d306e670706"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01ae65c0a0736d4293e657a66bde1538"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a01ae65c0a0736d4293e657a66bde1538">qint8x8x4_t</a> = int8x8x4_t</td></tr>
<tr class="memdesc:a01ae65c0a0736d4293e657a66bde1538"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 32 elements  <a href="namespacearm__compute.xhtml#a01ae65c0a0736d4293e657a66bde1538">More...</a><br /></td></tr>
<tr class="separator:a01ae65c0a0736d4293e657a66bde1538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b99ed49abd6b7bf13dafdd17bcef855"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5b99ed49abd6b7bf13dafdd17bcef855">qint8x16_t</a> = int8x16_t</td></tr>
<tr class="memdesc:a5b99ed49abd6b7bf13dafdd17bcef855"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 16 elements  <a href="namespacearm__compute.xhtml#a5b99ed49abd6b7bf13dafdd17bcef855">More...</a><br /></td></tr>
<tr class="separator:a5b99ed49abd6b7bf13dafdd17bcef855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09108711e0c18d4e9811ea4597d573b1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a09108711e0c18d4e9811ea4597d573b1">qint8x16x2_t</a> = int8x16x2_t</td></tr>
<tr class="memdesc:a09108711e0c18d4e9811ea4597d573b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 32 elements  <a href="namespacearm__compute.xhtml#a09108711e0c18d4e9811ea4597d573b1">More...</a><br /></td></tr>
<tr class="separator:a09108711e0c18d4e9811ea4597d573b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e175277ee7de6a5aeb5cd8916dbb346"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7e175277ee7de6a5aeb5cd8916dbb346">qint8x16x3_t</a> = int8x16x3_t</td></tr>
<tr class="memdesc:a7e175277ee7de6a5aeb5cd8916dbb346"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 48 elements  <a href="namespacearm__compute.xhtml#a7e175277ee7de6a5aeb5cd8916dbb346">More...</a><br /></td></tr>
<tr class="separator:a7e175277ee7de6a5aeb5cd8916dbb346"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c4b33603ffff71e9f02c4be1a2f14d5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c4b33603ffff71e9f02c4be1a2f14d5">qint8x16x4_t</a> = int8x16x4_t</td></tr>
<tr class="memdesc:a3c4b33603ffff71e9f02c4be1a2f14d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector with 64 elements  <a href="namespacearm__compute.xhtml#a3c4b33603ffff71e9f02c4be1a2f14d5">More...</a><br /></td></tr>
<tr class="separator:a3c4b33603ffff71e9f02c4be1a2f14d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82c56f0856f56d430393e6a00baee983"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a82c56f0856f56d430393e6a00baee983">qint16x4_t</a> = int16x4_t</td></tr>
<tr class="memdesc:a82c56f0856f56d430393e6a00baee983"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 4 elements  <a href="namespacearm__compute.xhtml#a82c56f0856f56d430393e6a00baee983">More...</a><br /></td></tr>
<tr class="separator:a82c56f0856f56d430393e6a00baee983"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d57e0f4f122442011213667168ef538"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8d57e0f4f122442011213667168ef538">qint16x4x2_t</a> = int16x4x2_t</td></tr>
<tr class="memdesc:a8d57e0f4f122442011213667168ef538"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 8 elements  <a href="namespacearm__compute.xhtml#a8d57e0f4f122442011213667168ef538">More...</a><br /></td></tr>
<tr class="separator:a8d57e0f4f122442011213667168ef538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63f034ee885f20111e7f5d44e48e6d93"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a63f034ee885f20111e7f5d44e48e6d93">qint16x4x3_t</a> = int16x4x3_t</td></tr>
<tr class="memdesc:a63f034ee885f20111e7f5d44e48e6d93"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 12 elements  <a href="namespacearm__compute.xhtml#a63f034ee885f20111e7f5d44e48e6d93">More...</a><br /></td></tr>
<tr class="separator:a63f034ee885f20111e7f5d44e48e6d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8525b18a2f34c3497bbfbd0e7c3a7875"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8525b18a2f34c3497bbfbd0e7c3a7875">qint16x4x4_t</a> = int16x4x4_t</td></tr>
<tr class="memdesc:a8525b18a2f34c3497bbfbd0e7c3a7875"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 16 elements  <a href="namespacearm__compute.xhtml#a8525b18a2f34c3497bbfbd0e7c3a7875">More...</a><br /></td></tr>
<tr class="separator:a8525b18a2f34c3497bbfbd0e7c3a7875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e15143176bfacdde8b06f4bb0b67427"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4e15143176bfacdde8b06f4bb0b67427">qint16x8_t</a> = int16x8_t</td></tr>
<tr class="memdesc:a4e15143176bfacdde8b06f4bb0b67427"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 8 elements  <a href="namespacearm__compute.xhtml#a4e15143176bfacdde8b06f4bb0b67427">More...</a><br /></td></tr>
<tr class="separator:a4e15143176bfacdde8b06f4bb0b67427"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c4099e91913f28017e1f57b8e5cbf9f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">qint16x8x2_t</a> = int16x8x2_t</td></tr>
<tr class="memdesc:a3c4099e91913f28017e1f57b8e5cbf9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 16 elements  <a href="namespacearm__compute.xhtml#a3c4099e91913f28017e1f57b8e5cbf9f">More...</a><br /></td></tr>
<tr class="separator:a3c4099e91913f28017e1f57b8e5cbf9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65e109cf43ade8a2a3c57a1120b90b05"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a65e109cf43ade8a2a3c57a1120b90b05">qint16x8x3_t</a> = int16x8x3_t</td></tr>
<tr class="memdesc:a65e109cf43ade8a2a3c57a1120b90b05"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 24 elements  <a href="namespacearm__compute.xhtml#a65e109cf43ade8a2a3c57a1120b90b05">More...</a><br /></td></tr>
<tr class="separator:a65e109cf43ade8a2a3c57a1120b90b05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bc1e8d62f1055278d8f05454faa422f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6bc1e8d62f1055278d8f05454faa422f">qint16x8x4_t</a> = int16x8x4_t</td></tr>
<tr class="memdesc:a6bc1e8d62f1055278d8f05454faa422f"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector with 32 elements  <a href="namespacearm__compute.xhtml#a6bc1e8d62f1055278d8f05454faa422f">More...</a><br /></td></tr>
<tr class="separator:a6bc1e8d62f1055278d8f05454faa422f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addcffa8e8086154c0449c23e6b0dff83"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#addcffa8e8086154c0449c23e6b0dff83">qint32x2_t</a> = int32x2_t</td></tr>
<tr class="memdesc:addcffa8e8086154c0449c23e6b0dff83"><td class="mdescLeft">&#160;</td><td class="mdescRight">32 bit fixed point vector with 2 elements  <a href="namespacearm__compute.xhtml#addcffa8e8086154c0449c23e6b0dff83">More...</a><br /></td></tr>
<tr class="separator:addcffa8e8086154c0449c23e6b0dff83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd854c117af4dbd12633db2fbc01dd49"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abd854c117af4dbd12633db2fbc01dd49">qint32x4_t</a> = int32x4_t</td></tr>
<tr class="memdesc:abd854c117af4dbd12633db2fbc01dd49"><td class="mdescLeft">&#160;</td><td class="mdescRight">32 bit fixed point vector with 4 elements  <a href="namespacearm__compute.xhtml#abd854c117af4dbd12633db2fbc01dd49">More...</a><br /></td></tr>
<tr class="separator:abd854c117af4dbd12633db2fbc01dd49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed7f8448a2a08a531e8202334e4dcdd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6ed7f8448a2a08a531e8202334e4dcdd">qint32x4x2_t</a> = int32x4x2_t</td></tr>
<tr class="memdesc:a6ed7f8448a2a08a531e8202334e4dcdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">32 bit fixed point vector with 8 elements  <a href="namespacearm__compute.xhtml#a6ed7f8448a2a08a531e8202334e4dcdd">More...</a><br /></td></tr>
<tr class="separator:a6ed7f8448a2a08a531e8202334e4dcdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a01aba870fcfc162ae8aa04ac2a71699f"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a01aba870fcfc162ae8aa04ac2a71699f">vget_low_qs8</a> (qint8x16_t a)</td></tr>
<tr class="memdesc:a01aba870fcfc162ae8aa04ac2a71699f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the lower half of a 16 elements vector.  <a href="namespacearm__compute.xhtml#a01aba870fcfc162ae8aa04ac2a71699f">More...</a><br /></td></tr>
<tr class="separator:a01aba870fcfc162ae8aa04ac2a71699f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e66057ae3f10ac402b7d7da1649ca59"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9e66057ae3f10ac402b7d7da1649ca59">vget_low_qs16</a> (qint16x8_t a)</td></tr>
<tr class="memdesc:a9e66057ae3f10ac402b7d7da1649ca59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the lower half of a 16 elements vector.  <a href="namespacearm__compute.xhtml#a9e66057ae3f10ac402b7d7da1649ca59">More...</a><br /></td></tr>
<tr class="separator:a9e66057ae3f10ac402b7d7da1649ca59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1a1485f2120c55da4a57a59be074f27"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab1a1485f2120c55da4a57a59be074f27">vget_high_qs8</a> (qint8x16_t a)</td></tr>
<tr class="memdesc:ab1a1485f2120c55da4a57a59be074f27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the higher half of a 16 elements vector.  <a href="namespacearm__compute.xhtml#ab1a1485f2120c55da4a57a59be074f27">More...</a><br /></td></tr>
<tr class="separator:ab1a1485f2120c55da4a57a59be074f27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb8a3a973b625b035f663bcac5781596"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adb8a3a973b625b035f663bcac5781596">vget_high_qs16</a> (qint16x8_t a)</td></tr>
<tr class="memdesc:adb8a3a973b625b035f663bcac5781596"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the higher half of a 16 elements vector.  <a href="namespacearm__compute.xhtml#adb8a3a973b625b035f663bcac5781596">More...</a><br /></td></tr>
<tr class="separator:adb8a3a973b625b035f663bcac5781596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36fd8142f6f27eb7a663f6d1c2dbd0ff"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a36fd8142f6f27eb7a663f6d1c2dbd0ff">vld1_qs8</a> (const qint8_t *addr)</td></tr>
<tr class="memdesc:a36fd8142f6f27eb7a663f6d1c2dbd0ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a single 8 bit fixed point vector from memory (8 elements)  <a href="namespacearm__compute.xhtml#a36fd8142f6f27eb7a663f6d1c2dbd0ff">More...</a><br /></td></tr>
<tr class="separator:a36fd8142f6f27eb7a663f6d1c2dbd0ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5be0b430ef4d7b6a8da81a09f08f63bc"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5be0b430ef4d7b6a8da81a09f08f63bc">vld1_qs16</a> (const qint16_t *addr)</td></tr>
<tr class="memdesc:a5be0b430ef4d7b6a8da81a09f08f63bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a single 16 bit fixed point vector from memory (4 elements)  <a href="namespacearm__compute.xhtml#a5be0b430ef4d7b6a8da81a09f08f63bc">More...</a><br /></td></tr>
<tr class="separator:a5be0b430ef4d7b6a8da81a09f08f63bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fe68b389512d3adff15f45fc061bebd"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6fe68b389512d3adff15f45fc061bebd">vld1q_qs8</a> (const qint8_t *addr)</td></tr>
<tr class="memdesc:a6fe68b389512d3adff15f45fc061bebd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a single 8 bit fixed point vector from memory (16 elements)  <a href="namespacearm__compute.xhtml#a6fe68b389512d3adff15f45fc061bebd">More...</a><br /></td></tr>
<tr class="separator:a6fe68b389512d3adff15f45fc061bebd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1fbd31b8bc9abfb5d951679c839ec8b"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac1fbd31b8bc9abfb5d951679c839ec8b">vld1q_qs16</a> (const qint16_t *addr)</td></tr>
<tr class="memdesc:ac1fbd31b8bc9abfb5d951679c839ec8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load a single 16 bit fixed point vector from memory (8 elements)  <a href="namespacearm__compute.xhtml#ac1fbd31b8bc9abfb5d951679c839ec8b">More...</a><br /></td></tr>
<tr class="separator:ac1fbd31b8bc9abfb5d951679c839ec8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6b66e4796e08d83db8fe89721e33d00"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae6b66e4796e08d83db8fe89721e33d00">vld1_dup_qs8</a> (const qint8_t *addr)</td></tr>
<tr class="memdesc:ae6b66e4796e08d83db8fe89721e33d00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load all lanes of 8 bit fixed point vector with same value from memory (8 elements)  <a href="namespacearm__compute.xhtml#ae6b66e4796e08d83db8fe89721e33d00">More...</a><br /></td></tr>
<tr class="separator:ae6b66e4796e08d83db8fe89721e33d00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afae4f82c3373c53f461bffef703b95ff"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afae4f82c3373c53f461bffef703b95ff">vld1_dup_qs16</a> (const qint16_t *addr)</td></tr>
<tr class="memdesc:afae4f82c3373c53f461bffef703b95ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load all lanes of 16 bit fixed point vector with same value from memory (4 elements)  <a href="namespacearm__compute.xhtml#afae4f82c3373c53f461bffef703b95ff">More...</a><br /></td></tr>
<tr class="separator:afae4f82c3373c53f461bffef703b95ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6610f298ec273b9c83880a99fec49ac"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af6610f298ec273b9c83880a99fec49ac">vld1q_dup_qs8</a> (const qint8_t *addr)</td></tr>
<tr class="memdesc:af6610f298ec273b9c83880a99fec49ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load all lanes of 8 bit fixed point vector with same value from memory (16 elements)  <a href="namespacearm__compute.xhtml#af6610f298ec273b9c83880a99fec49ac">More...</a><br /></td></tr>
<tr class="separator:af6610f298ec273b9c83880a99fec49ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63c5b930195280ddd6716edd68651e3a"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a63c5b930195280ddd6716edd68651e3a">vld1q_dup_qs16</a> (const qint16_t *addr)</td></tr>
<tr class="memdesc:a63c5b930195280ddd6716edd68651e3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load all lanes of 16 bit fixed point vector with same value from memory (8 elements)  <a href="namespacearm__compute.xhtml#a63c5b930195280ddd6716edd68651e3a">More...</a><br /></td></tr>
<tr class="separator:a63c5b930195280ddd6716edd68651e3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bab58697ee7d7df117384a05d4e2f92"><td class="memItemLeft" align="right" valign="top">qint16x8x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8bab58697ee7d7df117384a05d4e2f92">vld2q_qs16</a> (qint16_t *addr)</td></tr>
<tr class="memdesc:a8bab58697ee7d7df117384a05d4e2f92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load two 16 bit fixed point vectors from memory (8x2 elements)  <a href="namespacearm__compute.xhtml#a8bab58697ee7d7df117384a05d4e2f92">More...</a><br /></td></tr>
<tr class="separator:a8bab58697ee7d7df117384a05d4e2f92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eed40dd2defff08c98f66bf0c67c61d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7eed40dd2defff08c98f66bf0c67c61d">vst1_qs8</a> (qint8_t *addr, qint8x8_t b)</td></tr>
<tr class="memdesc:a7eed40dd2defff08c98f66bf0c67c61d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store a single 8 bit fixed point vector to memory (8 elements)  <a href="namespacearm__compute.xhtml#a7eed40dd2defff08c98f66bf0c67c61d">More...</a><br /></td></tr>
<tr class="separator:a7eed40dd2defff08c98f66bf0c67c61d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5002d49f346614198f3e8b475f27a7eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5002d49f346614198f3e8b475f27a7eb">vst1_qs16</a> (qint16_t *addr, qint16x4_t b)</td></tr>
<tr class="memdesc:a5002d49f346614198f3e8b475f27a7eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store a single 16 bit fixed point vector to memory (4 elements)  <a href="namespacearm__compute.xhtml#a5002d49f346614198f3e8b475f27a7eb">More...</a><br /></td></tr>
<tr class="separator:a5002d49f346614198f3e8b475f27a7eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1839b5e8f0a3b1702b661a1838fba830"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1839b5e8f0a3b1702b661a1838fba830">vst1q_qs8</a> (qint8_t *addr, qint8x16_t b)</td></tr>
<tr class="memdesc:a1839b5e8f0a3b1702b661a1838fba830"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store a single 8 bit fixed point vector to memory (16 elements)  <a href="namespacearm__compute.xhtml#a1839b5e8f0a3b1702b661a1838fba830">More...</a><br /></td></tr>
<tr class="separator:a1839b5e8f0a3b1702b661a1838fba830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3bb253fc02f0f58278794832cff641c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af3bb253fc02f0f58278794832cff641c">vst1q_qs16</a> (qint16_t *addr, qint16x8_t b)</td></tr>
<tr class="memdesc:af3bb253fc02f0f58278794832cff641c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store a single 16 bit fixed point vector to memory (8 elements)  <a href="namespacearm__compute.xhtml#af3bb253fc02f0f58278794832cff641c">More...</a><br /></td></tr>
<tr class="separator:af3bb253fc02f0f58278794832cff641c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a133a4b6b925f585d9e3cab041494ddca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a133a4b6b925f585d9e3cab041494ddca">vst2q_qs16</a> (qint16_t *addr, qint16x8x2_t b)</td></tr>
<tr class="memdesc:a133a4b6b925f585d9e3cab041494ddca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Store two 16 bit fixed point vector to memory (8x2 elements)  <a href="namespacearm__compute.xhtml#a133a4b6b925f585d9e3cab041494ddca">More...</a><br /></td></tr>
<tr class="separator:a133a4b6b925f585d9e3cab041494ddca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92c2d0b9a8eeb3ab04a39a25fef2b6c3"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a92c2d0b9a8eeb3ab04a39a25fef2b6c3">vqmovn_q16</a> (qint16x8_t a)</td></tr>
<tr class="memdesc:a92c2d0b9a8eeb3ab04a39a25fef2b6c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating narrow (8 elements)  <a href="namespacearm__compute.xhtml#a92c2d0b9a8eeb3ab04a39a25fef2b6c3">More...</a><br /></td></tr>
<tr class="separator:a92c2d0b9a8eeb3ab04a39a25fef2b6c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12e7578c32321d2362114563881153ee"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a12e7578c32321d2362114563881153ee">vqmovn_q32</a> (qint32x4_t a)</td></tr>
<tr class="memdesc:a12e7578c32321d2362114563881153ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">32 bit fixed point vector saturating narrow (4 elements)  <a href="namespacearm__compute.xhtml#a12e7578c32321d2362114563881153ee">More...</a><br /></td></tr>
<tr class="separator:a12e7578c32321d2362114563881153ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5928c224ded2b86475c0e85036aa42b"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae5928c224ded2b86475c0e85036aa42b">vdup_n_qs8</a> (qint8_t a)</td></tr>
<tr class="memdesc:ae5928c224ded2b86475c0e85036aa42b"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector duplicate (8 elements)  <a href="namespacearm__compute.xhtml#ae5928c224ded2b86475c0e85036aa42b">More...</a><br /></td></tr>
<tr class="separator:ae5928c224ded2b86475c0e85036aa42b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6ebf4319713b842c2b95fe5e251d199"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa6ebf4319713b842c2b95fe5e251d199">vdup_n_qs16</a> (qint16_t a)</td></tr>
<tr class="memdesc:aa6ebf4319713b842c2b95fe5e251d199"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector duplicate (4 elements)  <a href="namespacearm__compute.xhtml#aa6ebf4319713b842c2b95fe5e251d199">More...</a><br /></td></tr>
<tr class="separator:aa6ebf4319713b842c2b95fe5e251d199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14e4a79c204d38d9ab1c510180ce3a98"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a14e4a79c204d38d9ab1c510180ce3a98">vdupq_n_qs8</a> (qint8_t a)</td></tr>
<tr class="memdesc:a14e4a79c204d38d9ab1c510180ce3a98"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector duplicate (16 elements)  <a href="namespacearm__compute.xhtml#a14e4a79c204d38d9ab1c510180ce3a98">More...</a><br /></td></tr>
<tr class="separator:a14e4a79c204d38d9ab1c510180ce3a98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a579ff1fb4795bc28e7eae6f480e03e08"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a579ff1fb4795bc28e7eae6f480e03e08">vdupq_n_qs8_f32</a> (float a, int fixed_point_position)</td></tr>
<tr class="memdesc:a579ff1fb4795bc28e7eae6f480e03e08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate a float and convert it to 8 bit fixed point vector (16 elements)  <a href="namespacearm__compute.xhtml#a579ff1fb4795bc28e7eae6f480e03e08">More...</a><br /></td></tr>
<tr class="separator:a579ff1fb4795bc28e7eae6f480e03e08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa286876d5353075d13377380bf0068ef"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa286876d5353075d13377380bf0068ef">vdupq_n_qs16_f32</a> (float a, int fixed_point_position)</td></tr>
<tr class="memdesc:aa286876d5353075d13377380bf0068ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate a float and convert it to 16 bit fixed point vector (8 elements)  <a href="namespacearm__compute.xhtml#aa286876d5353075d13377380bf0068ef">More...</a><br /></td></tr>
<tr class="separator:aa286876d5353075d13377380bf0068ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740436aed8843612da747f40ff926875"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a740436aed8843612da747f40ff926875">vdupq_n_qs16</a> (qint16x8_t a)</td></tr>
<tr class="memdesc:a740436aed8843612da747f40ff926875"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector duplicate (8 elements)  <a href="namespacearm__compute.xhtml#a740436aed8843612da747f40ff926875">More...</a><br /></td></tr>
<tr class="separator:a740436aed8843612da747f40ff926875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5277e56fb1c3434ded55b90faa51e8"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6c5277e56fb1c3434ded55b90faa51e8">vabs_qs8</a> (qint8x8_t a)</td></tr>
<tr class="memdesc:a6c5277e56fb1c3434ded55b90faa51e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Absolute value of 8 bit fixed point vector (8 elements)  <a href="namespacearm__compute.xhtml#a6c5277e56fb1c3434ded55b90faa51e8">More...</a><br /></td></tr>
<tr class="separator:a6c5277e56fb1c3434ded55b90faa51e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52988f4969583e2677bc4f04da8439e4"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a52988f4969583e2677bc4f04da8439e4">vabs_qs16</a> (qint16x4_t a)</td></tr>
<tr class="memdesc:a52988f4969583e2677bc4f04da8439e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Absolute value of 16 bit fixed point vector (4 elements)  <a href="namespacearm__compute.xhtml#a52988f4969583e2677bc4f04da8439e4">More...</a><br /></td></tr>
<tr class="separator:a52988f4969583e2677bc4f04da8439e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3a568bc6c67b5706661db5243829f50"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac3a568bc6c67b5706661db5243829f50">vabsq_qs8</a> (qint8x16_t a)</td></tr>
<tr class="memdesc:ac3a568bc6c67b5706661db5243829f50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Absolute value of 8 bit fixed point vector (16 elements)  <a href="namespacearm__compute.xhtml#ac3a568bc6c67b5706661db5243829f50">More...</a><br /></td></tr>
<tr class="separator:ac3a568bc6c67b5706661db5243829f50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3f03f4b20d7887ab4fa0abf527e1d6"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ade3f03f4b20d7887ab4fa0abf527e1d6">vabsq_qs16</a> (qint16x8_t a)</td></tr>
<tr class="memdesc:ade3f03f4b20d7887ab4fa0abf527e1d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Absolute value of 16 bit fixed point vector (8 elements)  <a href="namespacearm__compute.xhtml#ade3f03f4b20d7887ab4fa0abf527e1d6">More...</a><br /></td></tr>
<tr class="separator:ade3f03f4b20d7887ab4fa0abf527e1d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16e9223adc0503cd621862bc579ac8fd"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a16e9223adc0503cd621862bc579ac8fd">vqabs_qs8</a> (qint8x8_t a)</td></tr>
<tr class="memdesc:a16e9223adc0503cd621862bc579ac8fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturating absolute value of 8 bit fixed point vector (8 elements)  <a href="namespacearm__compute.xhtml#a16e9223adc0503cd621862bc579ac8fd">More...</a><br /></td></tr>
<tr class="separator:a16e9223adc0503cd621862bc579ac8fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d7dfd9d3e62db1e218a965839901b63"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0d7dfd9d3e62db1e218a965839901b63">vqabs_qs16</a> (qint16x4_t a)</td></tr>
<tr class="memdesc:a0d7dfd9d3e62db1e218a965839901b63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturating absolute value of 16 bit fixed point vector (4 elements)  <a href="namespacearm__compute.xhtml#a0d7dfd9d3e62db1e218a965839901b63">More...</a><br /></td></tr>
<tr class="separator:a0d7dfd9d3e62db1e218a965839901b63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe1d2a5130d2aaf0df28a90a45f8968d"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abe1d2a5130d2aaf0df28a90a45f8968d">vqabsq_qs8</a> (qint8x16_t a)</td></tr>
<tr class="memdesc:abe1d2a5130d2aaf0df28a90a45f8968d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturating absolute value of 8 bit fixed point vector (16 elements)  <a href="namespacearm__compute.xhtml#abe1d2a5130d2aaf0df28a90a45f8968d">More...</a><br /></td></tr>
<tr class="separator:abe1d2a5130d2aaf0df28a90a45f8968d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6a8c22ef994a8035e92882ac525f416"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af6a8c22ef994a8035e92882ac525f416">vqabsq_qs16</a> (qint16x8_t a)</td></tr>
<tr class="memdesc:af6a8c22ef994a8035e92882ac525f416"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saturating absolute value of 16 bit fixed point vector (8 elements)  <a href="namespacearm__compute.xhtml#af6a8c22ef994a8035e92882ac525f416">More...</a><br /></td></tr>
<tr class="separator:af6a8c22ef994a8035e92882ac525f416"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e832672b8b717f5af77bc138c4e684d"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1e832672b8b717f5af77bc138c4e684d">vmax_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:a1e832672b8b717f5af77bc138c4e684d"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector max (8 elements)  <a href="namespacearm__compute.xhtml#a1e832672b8b717f5af77bc138c4e684d">More...</a><br /></td></tr>
<tr class="separator:a1e832672b8b717f5af77bc138c4e684d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afda7e56c8683e05da9787945eacf027f"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afda7e56c8683e05da9787945eacf027f">vmax_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:afda7e56c8683e05da9787945eacf027f"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector max (4 elements)  <a href="namespacearm__compute.xhtml#afda7e56c8683e05da9787945eacf027f">More...</a><br /></td></tr>
<tr class="separator:afda7e56c8683e05da9787945eacf027f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed31e134ad256235f1b237a5cf16b72"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5ed31e134ad256235f1b237a5cf16b72">vmaxq_qs8</a> (qint8x16_t a, qint8x16_t b)</td></tr>
<tr class="memdesc:a5ed31e134ad256235f1b237a5cf16b72"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector max (16 elements)  <a href="namespacearm__compute.xhtml#a5ed31e134ad256235f1b237a5cf16b72">More...</a><br /></td></tr>
<tr class="separator:a5ed31e134ad256235f1b237a5cf16b72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b936c1f23af7aedbad5859a6f01c94"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a62b936c1f23af7aedbad5859a6f01c94">vmaxq_qs16</a> (qint16x8_t a, qint16x8_t b)</td></tr>
<tr class="memdesc:a62b936c1f23af7aedbad5859a6f01c94"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector max (8 elements)  <a href="namespacearm__compute.xhtml#a62b936c1f23af7aedbad5859a6f01c94">More...</a><br /></td></tr>
<tr class="separator:a62b936c1f23af7aedbad5859a6f01c94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac253431834fc1859d112e62ce2a6f59c"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac253431834fc1859d112e62ce2a6f59c">vpmax_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:ac253431834fc1859d112e62ce2a6f59c"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector pairwise max (8 elements)  <a href="namespacearm__compute.xhtml#ac253431834fc1859d112e62ce2a6f59c">More...</a><br /></td></tr>
<tr class="separator:ac253431834fc1859d112e62ce2a6f59c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45b269785fb545f072e5fd313b8b3648"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a45b269785fb545f072e5fd313b8b3648">vpmax_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:a45b269785fb545f072e5fd313b8b3648"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector pairwise max (4 elements)  <a href="namespacearm__compute.xhtml#a45b269785fb545f072e5fd313b8b3648">More...</a><br /></td></tr>
<tr class="separator:a45b269785fb545f072e5fd313b8b3648"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a612e9bb7486e8cf609902d247047787c"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a612e9bb7486e8cf609902d247047787c">vmin_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:a612e9bb7486e8cf609902d247047787c"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector min (8 elements)  <a href="namespacearm__compute.xhtml#a612e9bb7486e8cf609902d247047787c">More...</a><br /></td></tr>
<tr class="separator:a612e9bb7486e8cf609902d247047787c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaa26cd2173ae553d357eddb015f4d69"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adaa26cd2173ae553d357eddb015f4d69">vmin_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:adaa26cd2173ae553d357eddb015f4d69"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector min (4 elements)  <a href="namespacearm__compute.xhtml#adaa26cd2173ae553d357eddb015f4d69">More...</a><br /></td></tr>
<tr class="separator:adaa26cd2173ae553d357eddb015f4d69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb63c79277d00a478faf54a760f0f38c"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afb63c79277d00a478faf54a760f0f38c">vminq_qs8</a> (qint8x16_t a, qint8x16_t b)</td></tr>
<tr class="memdesc:afb63c79277d00a478faf54a760f0f38c"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector min (16 elements)  <a href="namespacearm__compute.xhtml#afb63c79277d00a478faf54a760f0f38c">More...</a><br /></td></tr>
<tr class="separator:afb63c79277d00a478faf54a760f0f38c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae25469583330f615fb9d3729c615cc63"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae25469583330f615fb9d3729c615cc63">vminq_qs16</a> (qint16x8_t a, qint16x8_t b)</td></tr>
<tr class="memdesc:ae25469583330f615fb9d3729c615cc63"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector min (8 elements)  <a href="namespacearm__compute.xhtml#ae25469583330f615fb9d3729c615cc63">More...</a><br /></td></tr>
<tr class="separator:ae25469583330f615fb9d3729c615cc63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f6abd342d47b531832e11b1837ad0b4"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9f6abd342d47b531832e11b1837ad0b4">vpmin_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:a9f6abd342d47b531832e11b1837ad0b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector pairwise min (8 elements)  <a href="namespacearm__compute.xhtml#a9f6abd342d47b531832e11b1837ad0b4">More...</a><br /></td></tr>
<tr class="separator:a9f6abd342d47b531832e11b1837ad0b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ab85cdf2cf2a3c2724a1431cab2d93c"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0ab85cdf2cf2a3c2724a1431cab2d93c">vpmin_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:a0ab85cdf2cf2a3c2724a1431cab2d93c"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector pairwise min (4 elements)  <a href="namespacearm__compute.xhtml#a0ab85cdf2cf2a3c2724a1431cab2d93c">More...</a><br /></td></tr>
<tr class="separator:a0ab85cdf2cf2a3c2724a1431cab2d93c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ae2c8aa90fad62779e17a2adb06f353"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6ae2c8aa90fad62779e17a2adb06f353">vadd_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:a6ae2c8aa90fad62779e17a2adb06f353"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector add (8 elements)  <a href="namespacearm__compute.xhtml#a6ae2c8aa90fad62779e17a2adb06f353">More...</a><br /></td></tr>
<tr class="separator:a6ae2c8aa90fad62779e17a2adb06f353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeae8ace3bb6e0cdb407fdac73f1c67a6"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aeae8ace3bb6e0cdb407fdac73f1c67a6">vadd_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:aeae8ace3bb6e0cdb407fdac73f1c67a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector add (4 elements)  <a href="namespacearm__compute.xhtml#aeae8ace3bb6e0cdb407fdac73f1c67a6">More...</a><br /></td></tr>
<tr class="separator:aeae8ace3bb6e0cdb407fdac73f1c67a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14157ffd112ba32acb3af50e46d0e76a"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a14157ffd112ba32acb3af50e46d0e76a">vaddq_qs8</a> (qint8x16_t a, qint8x16_t b)</td></tr>
<tr class="memdesc:a14157ffd112ba32acb3af50e46d0e76a"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector add (16 elements)  <a href="namespacearm__compute.xhtml#a14157ffd112ba32acb3af50e46d0e76a">More...</a><br /></td></tr>
<tr class="separator:a14157ffd112ba32acb3af50e46d0e76a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76505d3ed993337fde8186da5060e8e8"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a76505d3ed993337fde8186da5060e8e8">vaddq_qs16</a> (qint16x8_t a, qint16x8_t b)</td></tr>
<tr class="memdesc:a76505d3ed993337fde8186da5060e8e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector add (8 elements)  <a href="namespacearm__compute.xhtml#a76505d3ed993337fde8186da5060e8e8">More...</a><br /></td></tr>
<tr class="separator:a76505d3ed993337fde8186da5060e8e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c990687ed6af989bcf4920b06c5092"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a53c990687ed6af989bcf4920b06c5092">vqadd_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:a53c990687ed6af989bcf4920b06c5092"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating add (8 elements)  <a href="namespacearm__compute.xhtml#a53c990687ed6af989bcf4920b06c5092">More...</a><br /></td></tr>
<tr class="separator:a53c990687ed6af989bcf4920b06c5092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b9af77579156d434eb576314495e313"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7b9af77579156d434eb576314495e313">vqadd_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:a7b9af77579156d434eb576314495e313"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating add (4 elements)  <a href="namespacearm__compute.xhtml#a7b9af77579156d434eb576314495e313">More...</a><br /></td></tr>
<tr class="separator:a7b9af77579156d434eb576314495e313"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa057569eb92497b2c8c973b3318adb8"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaa057569eb92497b2c8c973b3318adb8">vqaddq_qs8</a> (qint8x16_t a, qint8x16_t b)</td></tr>
<tr class="memdesc:aaa057569eb92497b2c8c973b3318adb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating add (16 elements)  <a href="namespacearm__compute.xhtml#aaa057569eb92497b2c8c973b3318adb8">More...</a><br /></td></tr>
<tr class="separator:aaa057569eb92497b2c8c973b3318adb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac211d3f3dc485752995088353ae380b5"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac211d3f3dc485752995088353ae380b5">vqaddq_qs16</a> (qint16x8_t a, qint16x8_t b)</td></tr>
<tr class="memdesc:ac211d3f3dc485752995088353ae380b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating add (8 elements)  <a href="namespacearm__compute.xhtml#ac211d3f3dc485752995088353ae380b5">More...</a><br /></td></tr>
<tr class="separator:ac211d3f3dc485752995088353ae380b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a976c55d88da1b155b4a83130a2c25555"><td class="memItemLeft" align="right" valign="top">int16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a976c55d88da1b155b4a83130a2c25555">vpaddl_qs8</a> (qint8x8_t a)</td></tr>
<tr class="memdesc:a976c55d88da1b155b4a83130a2c25555"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating pairwise add (8 elements)  <a href="namespacearm__compute.xhtml#a976c55d88da1b155b4a83130a2c25555">More...</a><br /></td></tr>
<tr class="separator:a976c55d88da1b155b4a83130a2c25555"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8b8422b0719e35a7faba44cbd81c973"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac8b8422b0719e35a7faba44cbd81c973">vsub_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:ac8b8422b0719e35a7faba44cbd81c973"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector subtraction (8 elements)  <a href="namespacearm__compute.xhtml#ac8b8422b0719e35a7faba44cbd81c973">More...</a><br /></td></tr>
<tr class="separator:ac8b8422b0719e35a7faba44cbd81c973"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c19223d683db3fb9a2afae06a9172da"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9c19223d683db3fb9a2afae06a9172da">vsub_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:a9c19223d683db3fb9a2afae06a9172da"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector subtraction (4 elements)  <a href="namespacearm__compute.xhtml#a9c19223d683db3fb9a2afae06a9172da">More...</a><br /></td></tr>
<tr class="separator:a9c19223d683db3fb9a2afae06a9172da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac081f136f0b4e5e1faba00197b0f5bb6"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ac081f136f0b4e5e1faba00197b0f5bb6">vsubq_qs8</a> (qint8x16_t a, qint8x16_t b)</td></tr>
<tr class="memdesc:ac081f136f0b4e5e1faba00197b0f5bb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector subtraction (16 elements)  <a href="namespacearm__compute.xhtml#ac081f136f0b4e5e1faba00197b0f5bb6">More...</a><br /></td></tr>
<tr class="separator:ac081f136f0b4e5e1faba00197b0f5bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4129255837b86e09fcc326e46821fb"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8d4129255837b86e09fcc326e46821fb">vsubq_qs16</a> (qint16x8_t a, qint16x8_t b)</td></tr>
<tr class="memdesc:a8d4129255837b86e09fcc326e46821fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector subtraction (8 elements)  <a href="namespacearm__compute.xhtml#a8d4129255837b86e09fcc326e46821fb">More...</a><br /></td></tr>
<tr class="separator:a8d4129255837b86e09fcc326e46821fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a94adba1cfff4ce4142add654c60521"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8a94adba1cfff4ce4142add654c60521">vqsub_qs8</a> (qint8x8_t a, qint8x8_t b)</td></tr>
<tr class="memdesc:a8a94adba1cfff4ce4142add654c60521"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating subtraction (8 elements)  <a href="namespacearm__compute.xhtml#a8a94adba1cfff4ce4142add654c60521">More...</a><br /></td></tr>
<tr class="separator:a8a94adba1cfff4ce4142add654c60521"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a496848521c818232b32b1ea1f481d1f2"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a496848521c818232b32b1ea1f481d1f2">vqsub_qs16</a> (qint16x4_t a, qint16x4_t b)</td></tr>
<tr class="memdesc:a496848521c818232b32b1ea1f481d1f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating subtraction (4 elements)  <a href="namespacearm__compute.xhtml#a496848521c818232b32b1ea1f481d1f2">More...</a><br /></td></tr>
<tr class="separator:a496848521c818232b32b1ea1f481d1f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e8458b3298a996c332d771b1058e515"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7e8458b3298a996c332d771b1058e515">vqsubq_qs8</a> (qint8x16_t a, qint8x16_t b)</td></tr>
<tr class="memdesc:a7e8458b3298a996c332d771b1058e515"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating subtraction (16 elements)  <a href="namespacearm__compute.xhtml#a7e8458b3298a996c332d771b1058e515">More...</a><br /></td></tr>
<tr class="separator:a7e8458b3298a996c332d771b1058e515"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a270d4ddc6689933d1d239eabf7649e54"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a270d4ddc6689933d1d239eabf7649e54">vqsubq_qs16</a> (qint16x8_t a, qint16x8_t b)</td></tr>
<tr class="memdesc:a270d4ddc6689933d1d239eabf7649e54"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating subtraction (8 elements)  <a href="namespacearm__compute.xhtml#a270d4ddc6689933d1d239eabf7649e54">More...</a><br /></td></tr>
<tr class="separator:a270d4ddc6689933d1d239eabf7649e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87756fc439f4a516852d4c1c845006bd"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a87756fc439f4a516852d4c1c845006bd">vmul_qs8</a> (qint8x8_t a, qint8x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a87756fc439f4a516852d4c1c845006bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector multiply (8 elements)  <a href="namespacearm__compute.xhtml#a87756fc439f4a516852d4c1c845006bd">More...</a><br /></td></tr>
<tr class="separator:a87756fc439f4a516852d4c1c845006bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8689c6e9627c58b6362ac9556b7b85f"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa8689c6e9627c58b6362ac9556b7b85f">vmul_qs16</a> (qint16x4_t a, qint16x4_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:aa8689c6e9627c58b6362ac9556b7b85f"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector multiply (4 elements)  <a href="namespacearm__compute.xhtml#aa8689c6e9627c58b6362ac9556b7b85f">More...</a><br /></td></tr>
<tr class="separator:aa8689c6e9627c58b6362ac9556b7b85f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b64880d62b60bb7237d0eb920c02087"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9b64880d62b60bb7237d0eb920c02087">vmulq_qs8</a> (qint8x16_t a, qint8x16_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a9b64880d62b60bb7237d0eb920c02087"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector multiply (16 elements)  <a href="namespacearm__compute.xhtml#a9b64880d62b60bb7237d0eb920c02087">More...</a><br /></td></tr>
<tr class="separator:a9b64880d62b60bb7237d0eb920c02087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff021302b2661f42dffbb9fe4a6e3587"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aff021302b2661f42dffbb9fe4a6e3587">vmulq_qs16</a> (qint16x8_t a, qint16x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:aff021302b2661f42dffbb9fe4a6e3587"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector multiply (8 elements)  <a href="namespacearm__compute.xhtml#aff021302b2661f42dffbb9fe4a6e3587">More...</a><br /></td></tr>
<tr class="separator:aff021302b2661f42dffbb9fe4a6e3587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13b07f92cefe3dcc799ab28c351419cb"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a13b07f92cefe3dcc799ab28c351419cb">vqmul_qs8</a> (qint8x8_t a, qint8x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a13b07f92cefe3dcc799ab28c351419cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating multiply (8 elements)  <a href="namespacearm__compute.xhtml#a13b07f92cefe3dcc799ab28c351419cb">More...</a><br /></td></tr>
<tr class="separator:a13b07f92cefe3dcc799ab28c351419cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdab93549d4c969851a39081a7f282a1"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afdab93549d4c969851a39081a7f282a1">vqmul_qs16</a> (qint16x4_t a, qint16x4_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:afdab93549d4c969851a39081a7f282a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating multiply (4 elements)  <a href="namespacearm__compute.xhtml#afdab93549d4c969851a39081a7f282a1">More...</a><br /></td></tr>
<tr class="separator:afdab93549d4c969851a39081a7f282a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8391ec73756d60aa43a82c04d5ece85e"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8391ec73756d60aa43a82c04d5ece85e">vqmulq_qs8</a> (qint8x16_t a, qint8x16_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a8391ec73756d60aa43a82c04d5ece85e"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating multiply (16 elements)  <a href="namespacearm__compute.xhtml#a8391ec73756d60aa43a82c04d5ece85e">More...</a><br /></td></tr>
<tr class="separator:a8391ec73756d60aa43a82c04d5ece85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a9dc05834e61a1aca309400bfded8c"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a97a9dc05834e61a1aca309400bfded8c">vqmulq_qs16</a> (qint16x8_t a, qint16x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a97a9dc05834e61a1aca309400bfded8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating multiply (8 elements)  <a href="namespacearm__compute.xhtml#a97a9dc05834e61a1aca309400bfded8c">More...</a><br /></td></tr>
<tr class="separator:a97a9dc05834e61a1aca309400bfded8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adedd47ca832ff5041f2e3fb9cecda6e9"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#adedd47ca832ff5041f2e3fb9cecda6e9">vmull_qs8</a> (qint8x8_t a, qint8x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:adedd47ca832ff5041f2e3fb9cecda6e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector long multiply (8 elements)  <a href="namespacearm__compute.xhtml#adedd47ca832ff5041f2e3fb9cecda6e9">More...</a><br /></td></tr>
<tr class="separator:adedd47ca832ff5041f2e3fb9cecda6e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a240b655cf59e7e8e07bd7873e9db0209"><td class="memItemLeft" align="right" valign="top">qint32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a240b655cf59e7e8e07bd7873e9db0209">vmull_qs16</a> (qint16x4_t a, qint16x4_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a240b655cf59e7e8e07bd7873e9db0209"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector long multiply (4 elements)  <a href="namespacearm__compute.xhtml#a240b655cf59e7e8e07bd7873e9db0209">More...</a><br /></td></tr>
<tr class="separator:a240b655cf59e7e8e07bd7873e9db0209"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9148ef4deac37685c5dca50713e1bc51"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9148ef4deac37685c5dca50713e1bc51">vmla_qs8</a> (qint8x8_t a, qint8x8_t b, qint8x8_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a9148ef4deac37685c5dca50713e1bc51"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector multiply-accumulate (8 elements).  <a href="namespacearm__compute.xhtml#a9148ef4deac37685c5dca50713e1bc51">More...</a><br /></td></tr>
<tr class="separator:a9148ef4deac37685c5dca50713e1bc51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65dd9a9ece185e072304bfb84f1da896"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a65dd9a9ece185e072304bfb84f1da896">vmla_qs16</a> (qint16x4_t a, qint16x4_t b, qint16x4_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a65dd9a9ece185e072304bfb84f1da896"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector multiply-accumulate (4 elements).  <a href="namespacearm__compute.xhtml#a65dd9a9ece185e072304bfb84f1da896">More...</a><br /></td></tr>
<tr class="separator:a65dd9a9ece185e072304bfb84f1da896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f7e4ade15cc5e0ff880a5cae0afe551"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8f7e4ade15cc5e0ff880a5cae0afe551">vmlaq_qs8</a> (qint8x16_t a, qint8x16_t b, qint8x16_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a8f7e4ade15cc5e0ff880a5cae0afe551"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector multiply-accumulate (16 elements).  <a href="namespacearm__compute.xhtml#a8f7e4ade15cc5e0ff880a5cae0afe551">More...</a><br /></td></tr>
<tr class="separator:a8f7e4ade15cc5e0ff880a5cae0afe551"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5740aa7e90f78b876eab289c1f555bd6"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5740aa7e90f78b876eab289c1f555bd6">vmlaq_qs16</a> (qint16x8_t a, qint16x8_t b, qint16x8_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a5740aa7e90f78b876eab289c1f555bd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector multiply-accumulate (16 elements).  <a href="namespacearm__compute.xhtml#a5740aa7e90f78b876eab289c1f555bd6">More...</a><br /></td></tr>
<tr class="separator:a5740aa7e90f78b876eab289c1f555bd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ef65dbc253ba9bdf9878d587134948d"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1ef65dbc253ba9bdf9878d587134948d">vqmla_qs8</a> (qint8x8_t a, qint8x8_t b, qint8x8_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a1ef65dbc253ba9bdf9878d587134948d"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating multiply-accumulate (8 elements).  <a href="namespacearm__compute.xhtml#a1ef65dbc253ba9bdf9878d587134948d">More...</a><br /></td></tr>
<tr class="separator:a1ef65dbc253ba9bdf9878d587134948d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82aa0004d0ec3a36047eb9aa8145ae58"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a82aa0004d0ec3a36047eb9aa8145ae58">vqmla_qs16</a> (qint16x4_t a, qint16x4_t b, qint16x4_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a82aa0004d0ec3a36047eb9aa8145ae58"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating multiply-accumulate (4 elements).  <a href="namespacearm__compute.xhtml#a82aa0004d0ec3a36047eb9aa8145ae58">More...</a><br /></td></tr>
<tr class="separator:a82aa0004d0ec3a36047eb9aa8145ae58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b87f278c2405ed16a39dd3c727ed176"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9b87f278c2405ed16a39dd3c727ed176">vqmlaq_qs8</a> (qint8x16_t a, qint8x16_t b, qint8x16_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a9b87f278c2405ed16a39dd3c727ed176"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating multiply-accumulate (16 elements).  <a href="namespacearm__compute.xhtml#a9b87f278c2405ed16a39dd3c727ed176">More...</a><br /></td></tr>
<tr class="separator:a9b87f278c2405ed16a39dd3c727ed176"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f95e15953c87e04b31dd4fb508ba661"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7f95e15953c87e04b31dd4fb508ba661">vqmlaq_qs16</a> (qint16x8_t a, qint16x8_t b, qint16x8_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a7f95e15953c87e04b31dd4fb508ba661"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating multiply-accumulate (8 elements).  <a href="namespacearm__compute.xhtml#a7f95e15953c87e04b31dd4fb508ba661">More...</a><br /></td></tr>
<tr class="separator:a7f95e15953c87e04b31dd4fb508ba661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1daaabdf809ac3cbfde6d95555faef78"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1daaabdf809ac3cbfde6d95555faef78">vmlal_qs8</a> (qint16x8_t a, qint8x8_t b, qint8x8_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a1daaabdf809ac3cbfde6d95555faef78"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector multiply-accumulate long (8 elements).  <a href="namespacearm__compute.xhtml#a1daaabdf809ac3cbfde6d95555faef78">More...</a><br /></td></tr>
<tr class="separator:a1daaabdf809ac3cbfde6d95555faef78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a163987dd7c9679354c24ad7d3a32fafb"><td class="memItemLeft" align="right" valign="top">qint32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a163987dd7c9679354c24ad7d3a32fafb">vmlal_qs16</a> (qint32x4_t a, qint16x4_t b, qint16x4_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a163987dd7c9679354c24ad7d3a32fafb"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector multiply-accumulate long (4 elements).  <a href="namespacearm__compute.xhtml#a163987dd7c9679354c24ad7d3a32fafb">More...</a><br /></td></tr>
<tr class="separator:a163987dd7c9679354c24ad7d3a32fafb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e9b5e17434f8beaf1010d256b4b41c2"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a2e9b5e17434f8beaf1010d256b4b41c2">vqmlal_qs8</a> (qint16x8_t a, qint8x8_t b, qint8x8_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a2e9b5e17434f8beaf1010d256b4b41c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">8 bit fixed point vector saturating multiply-accumulate long (8 elements).  <a href="namespacearm__compute.xhtml#a2e9b5e17434f8beaf1010d256b4b41c2">More...</a><br /></td></tr>
<tr class="separator:a2e9b5e17434f8beaf1010d256b4b41c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3821183742f08737679437e657400fd2"><td class="memItemLeft" align="right" valign="top">qint32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a3821183742f08737679437e657400fd2">vqmlal_qs16</a> (qint32x4_t a, qint16x4_t b, qint16x4_t c, int fixed_point_position)</td></tr>
<tr class="memdesc:a3821183742f08737679437e657400fd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">16 bit fixed point vector saturating multiply-accumulate long (4 elements).  <a href="namespacearm__compute.xhtml#a3821183742f08737679437e657400fd2">More...</a><br /></td></tr>
<tr class="separator:a3821183742f08737679437e657400fd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a371a36182341de1fa885d16e8780302f"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a371a36182341de1fa885d16e8780302f">vqcvt_qs8_f32</a> (const float32x4x2_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a371a36182341de1fa885d16e8780302f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a float vector with 4x2 elements to 8 bit fixed point vector with 8 elements.  <a href="namespacearm__compute.xhtml#a371a36182341de1fa885d16e8780302f">More...</a><br /></td></tr>
<tr class="separator:a371a36182341de1fa885d16e8780302f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6a5927c42259aa1e8e8acef8f42b2be"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad6a5927c42259aa1e8e8acef8f42b2be">vqcvt_qs16_f32</a> (const float32x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:ad6a5927c42259aa1e8e8acef8f42b2be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a float vector with 4 elements to 16 bit fixed point vector with 4 elements.  <a href="namespacearm__compute.xhtml#ad6a5927c42259aa1e8e8acef8f42b2be">More...</a><br /></td></tr>
<tr class="separator:ad6a5927c42259aa1e8e8acef8f42b2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8363f66cbb4859d6bff88722def231bb"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8363f66cbb4859d6bff88722def231bb">vqcvtq_qs8_f32</a> (const float32x4x4_t &amp;a, int fixed_point_position)</td></tr>
<tr class="memdesc:a8363f66cbb4859d6bff88722def231bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a float vector with 4x4 elements to 8 bit fixed point vector with 16 elements.  <a href="namespacearm__compute.xhtml#a8363f66cbb4859d6bff88722def231bb">More...</a><br /></td></tr>
<tr class="separator:a8363f66cbb4859d6bff88722def231bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab65a962155ae0435b66bfa12328e5edf"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ab65a962155ae0435b66bfa12328e5edf">vqcvtq_qs16_f32</a> (const float32x4x2_t &amp;a, int fixed_point_position)</td></tr>
<tr class="memdesc:ab65a962155ae0435b66bfa12328e5edf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a float vector with 4x2 elements to 16 bit fixed point vector with 8 elements.  <a href="namespacearm__compute.xhtml#ab65a962155ae0435b66bfa12328e5edf">More...</a><br /></td></tr>
<tr class="separator:ab65a962155ae0435b66bfa12328e5edf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e5310342a6ac0682691754a45d968ac"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0e5310342a6ac0682691754a45d968ac">vcvt_f32_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a0e5310342a6ac0682691754a45d968ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a 8 bit fixed point vector with 8 elements to a float vector with 4x2 elements.  <a href="namespacearm__compute.xhtml#a0e5310342a6ac0682691754a45d968ac">More...</a><br /></td></tr>
<tr class="separator:a0e5310342a6ac0682691754a45d968ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3eadd9dc42dec63c6a23af0044704c0"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa3eadd9dc42dec63c6a23af0044704c0">vcvt_f32_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:aa3eadd9dc42dec63c6a23af0044704c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a 16 bit fixed point vector with 4 elements to a float vector with 4 elements.  <a href="namespacearm__compute.xhtml#aa3eadd9dc42dec63c6a23af0044704c0">More...</a><br /></td></tr>
<tr class="separator:aa3eadd9dc42dec63c6a23af0044704c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19e68f6a298ae587a491df52d6859350"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a19e68f6a298ae587a491df52d6859350">vcvtq_qs8_f32</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a19e68f6a298ae587a491df52d6859350"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a 8 bit fixed point vector with 16 elements to a float vector with 4x4 elements.  <a href="namespacearm__compute.xhtml#a19e68f6a298ae587a491df52d6859350">More...</a><br /></td></tr>
<tr class="separator:a19e68f6a298ae587a491df52d6859350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a943abeff66faa34d1c2aeeab4ebfabdf"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a943abeff66faa34d1c2aeeab4ebfabdf">vcvtq_qs16_f32</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a943abeff66faa34d1c2aeeab4ebfabdf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a 16 bit fixed point vector with 8 elements to a float vector with 4x2 elements.  <a href="namespacearm__compute.xhtml#a943abeff66faa34d1c2aeeab4ebfabdf">More...</a><br /></td></tr>
<tr class="separator:a943abeff66faa34d1c2aeeab4ebfabdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8296fccbf09fbf34ad4b92f4021006da"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8296fccbf09fbf34ad4b92f4021006da">vrecip_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a8296fccbf09fbf34ad4b92f4021006da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reciprocal of a fixed point 8bit number using the Newton-Raphson method.  <a href="namespacearm__compute.xhtml#a8296fccbf09fbf34ad4b92f4021006da">More...</a><br /></td></tr>
<tr class="separator:a8296fccbf09fbf34ad4b92f4021006da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6684a81eb6da5626f58dc2f779442363"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a6684a81eb6da5626f58dc2f779442363">vrecip_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a6684a81eb6da5626f58dc2f779442363"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reciprocal of a fixed point 8bit number using the Newton-Raphson method.  <a href="namespacearm__compute.xhtml#a6684a81eb6da5626f58dc2f779442363">More...</a><br /></td></tr>
<tr class="separator:a6684a81eb6da5626f58dc2f779442363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa8caca8d68cca50001e0c60b01cf3b7"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aaa8caca8d68cca50001e0c60b01cf3b7">vrecipq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:aaa8caca8d68cca50001e0c60b01cf3b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reciprocal of a fixed point 8bit number using the Newton-Raphson method.  <a href="namespacearm__compute.xhtml#aaa8caca8d68cca50001e0c60b01cf3b7">More...</a><br /></td></tr>
<tr class="separator:aaa8caca8d68cca50001e0c60b01cf3b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c9efa256360bb7dbb87e1ddd439727b"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0c9efa256360bb7dbb87e1ddd439727b">vrecipq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a0c9efa256360bb7dbb87e1ddd439727b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate reciprocal of a fixed point 8bit number using the Newton-Raphson method.  <a href="namespacearm__compute.xhtml#a0c9efa256360bb7dbb87e1ddd439727b">More...</a><br /></td></tr>
<tr class="separator:a0c9efa256360bb7dbb87e1ddd439727b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae882a78a649d7d737cab1cb496e6e0f0"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ae882a78a649d7d737cab1cb496e6e0f0">vdiv_qs8</a> (qint8x8_t a, int8x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:ae882a78a649d7d737cab1cb496e6e0f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Division fixed point 8bit (8 elements)  <a href="namespacearm__compute.xhtml#ae882a78a649d7d737cab1cb496e6e0f0">More...</a><br /></td></tr>
<tr class="separator:ae882a78a649d7d737cab1cb496e6e0f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73c3ec663189efd1ef6e93249939ed02"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a73c3ec663189efd1ef6e93249939ed02">vdiv_qs16</a> (qint16x4_t a, qint16x4_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a73c3ec663189efd1ef6e93249939ed02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Division fixed point 16 bit (4 elements)  <a href="namespacearm__compute.xhtml#a73c3ec663189efd1ef6e93249939ed02">More...</a><br /></td></tr>
<tr class="separator:a73c3ec663189efd1ef6e93249939ed02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abacd82fd9acb85349b751a3eba0fd8db"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#abacd82fd9acb85349b751a3eba0fd8db">vdivq_qs8</a> (qint8x16_t a, qint8x16_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:abacd82fd9acb85349b751a3eba0fd8db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Division fixed point 8bit (16 elements)  <a href="namespacearm__compute.xhtml#abacd82fd9acb85349b751a3eba0fd8db">More...</a><br /></td></tr>
<tr class="separator:abacd82fd9acb85349b751a3eba0fd8db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5830e15cd59ed3198b916ec03efa07a"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#af5830e15cd59ed3198b916ec03efa07a">vdivq_qs16</a> (qint16x8_t a, qint16x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:af5830e15cd59ed3198b916ec03efa07a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Division fixed point 16 bit (8 elements)  <a href="namespacearm__compute.xhtml#af5830e15cd59ed3198b916ec03efa07a">More...</a><br /></td></tr>
<tr class="separator:af5830e15cd59ed3198b916ec03efa07a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e0e8c2bd0e807665d319522a9759290"><td class="memTemplParams" colspan="2">template&lt;bool islog&gt; </td></tr>
<tr class="memitem:a0e0e8c2bd0e807665d319522a9759290"><td class="memTemplItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0e0e8c2bd0e807665d319522a9759290">vtaylor_poly_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a0e0e8c2bd0e807665d319522a9759290"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 4th degree polynomial approximation.  <a href="namespacearm__compute.xhtml#a0e0e8c2bd0e807665d319522a9759290">More...</a><br /></td></tr>
<tr class="separator:a0e0e8c2bd0e807665d319522a9759290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1629fb1e72d3c423a27c4b99befdca42"><td class="memTemplParams" colspan="2">template&lt;bool islog&gt; </td></tr>
<tr class="memitem:a1629fb1e72d3c423a27c4b99befdca42"><td class="memTemplItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a1629fb1e72d3c423a27c4b99befdca42">vtaylor_poly_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a1629fb1e72d3c423a27c4b99befdca42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 4th degree polynomial approximation.  <a href="namespacearm__compute.xhtml#a1629fb1e72d3c423a27c4b99befdca42">More...</a><br /></td></tr>
<tr class="separator:a1629fb1e72d3c423a27c4b99befdca42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a026e9fe1c4037706de8f6206efd98a56"><td class="memTemplParams" colspan="2">template&lt;bool islog&gt; </td></tr>
<tr class="memitem:a026e9fe1c4037706de8f6206efd98a56"><td class="memTemplItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a026e9fe1c4037706de8f6206efd98a56">vtaylor_polyq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a026e9fe1c4037706de8f6206efd98a56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 4th degree polynomial approximation.  <a href="namespacearm__compute.xhtml#a026e9fe1c4037706de8f6206efd98a56">More...</a><br /></td></tr>
<tr class="separator:a026e9fe1c4037706de8f6206efd98a56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8fcc7e78931bef2916548369bc928e3"><td class="memTemplParams" colspan="2">template&lt;bool islog&gt; </td></tr>
<tr class="memitem:aa8fcc7e78931bef2916548369bc928e3"><td class="memTemplItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa8fcc7e78931bef2916548369bc928e3">vtaylor_polyq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:aa8fcc7e78931bef2916548369bc928e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 4th degree polynomial approximation.  <a href="namespacearm__compute.xhtml#aa8fcc7e78931bef2916548369bc928e3">More...</a><br /></td></tr>
<tr class="separator:aa8fcc7e78931bef2916548369bc928e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a796dc111009ab985d6bac8664743b56e"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a796dc111009ab985d6bac8664743b56e">vqexp_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a796dc111009ab985d6bac8664743b56e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating exponential fixed point 8bit (8 elements)  <a href="namespacearm__compute.xhtml#a796dc111009ab985d6bac8664743b56e">More...</a><br /></td></tr>
<tr class="separator:a796dc111009ab985d6bac8664743b56e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aec993498bbb804d3411179eaae5ce8"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a8aec993498bbb804d3411179eaae5ce8">vqexp_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a8aec993498bbb804d3411179eaae5ce8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating exponential fixed point 16 bit (4 elements)  <a href="namespacearm__compute.xhtml#a8aec993498bbb804d3411179eaae5ce8">More...</a><br /></td></tr>
<tr class="separator:a8aec993498bbb804d3411179eaae5ce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7274ff184c5e2bf7fd8159ee7905fb7c"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7274ff184c5e2bf7fd8159ee7905fb7c">vqexpq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a7274ff184c5e2bf7fd8159ee7905fb7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating exponential fixed point 8bit (16 elements)  <a href="namespacearm__compute.xhtml#a7274ff184c5e2bf7fd8159ee7905fb7c">More...</a><br /></td></tr>
<tr class="separator:a7274ff184c5e2bf7fd8159ee7905fb7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb7e4a856a35070e51f402767916fbb5"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#acb7e4a856a35070e51f402767916fbb5">vqexpq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:acb7e4a856a35070e51f402767916fbb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating exponential fixed point 16 bit (8 elements)  <a href="namespacearm__compute.xhtml#acb7e4a856a35070e51f402767916fbb5">More...</a><br /></td></tr>
<tr class="separator:acb7e4a856a35070e51f402767916fbb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ca0ad1dc517c2646d7da1583936867f"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a4ca0ad1dc517c2646d7da1583936867f">vlog_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a4ca0ad1dc517c2646d7da1583936867f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate logarithm fixed point 8 bit (8 elements)  <a href="namespacearm__compute.xhtml#a4ca0ad1dc517c2646d7da1583936867f">More...</a><br /></td></tr>
<tr class="separator:a4ca0ad1dc517c2646d7da1583936867f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33add780af7e9251ccbb0e3c50c9cc11"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a33add780af7e9251ccbb0e3c50c9cc11">vlog_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a33add780af7e9251ccbb0e3c50c9cc11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate logarithm fixed point 16 bit (4 elements)  <a href="namespacearm__compute.xhtml#a33add780af7e9251ccbb0e3c50c9cc11">More...</a><br /></td></tr>
<tr class="separator:a33add780af7e9251ccbb0e3c50c9cc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72f1d32348ca1824c4f914d648dd0d61"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a72f1d32348ca1824c4f914d648dd0d61">vlogq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a72f1d32348ca1824c4f914d648dd0d61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate logarithm fixed point 16bit (16 elements)  <a href="namespacearm__compute.xhtml#a72f1d32348ca1824c4f914d648dd0d61">More...</a><br /></td></tr>
<tr class="separator:a72f1d32348ca1824c4f914d648dd0d61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a941057e2a953c1c350edcf384ccb0c0d"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a941057e2a953c1c350edcf384ccb0c0d">vlogq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a941057e2a953c1c350edcf384ccb0c0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate logarithm fixed point 16 bit (8 elements)  <a href="namespacearm__compute.xhtml#a941057e2a953c1c350edcf384ccb0c0d">More...</a><br /></td></tr>
<tr class="separator:a941057e2a953c1c350edcf384ccb0c0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85869673985438d7681e9c114bef6e25"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a85869673985438d7681e9c114bef6e25">vinvsqrt_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a85869673985438d7681e9c114bef6e25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse square root for fixed point 8bit using Newton-Raphosn method (8 elements)  <a href="namespacearm__compute.xhtml#a85869673985438d7681e9c114bef6e25">More...</a><br /></td></tr>
<tr class="separator:a85869673985438d7681e9c114bef6e25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21e91de60863fd472ebb82d7dc349d8f"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a21e91de60863fd472ebb82d7dc349d8f">vinvsqrt_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a21e91de60863fd472ebb82d7dc349d8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse square root for fixed point 16 bit using Newton-Raphosn method (4 elements)  <a href="namespacearm__compute.xhtml#a21e91de60863fd472ebb82d7dc349d8f">More...</a><br /></td></tr>
<tr class="separator:a21e91de60863fd472ebb82d7dc349d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcdeee5eb58f1d043bf16fada4d1bbc5"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#afcdeee5eb58f1d043bf16fada4d1bbc5">vqinvsqrt_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:afcdeee5eb58f1d043bf16fada4d1bbc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating inverse square root for fixed point 8bit using Newton-Raphosn method (8 elements)  <a href="namespacearm__compute.xhtml#afcdeee5eb58f1d043bf16fada4d1bbc5">More...</a><br /></td></tr>
<tr class="separator:afcdeee5eb58f1d043bf16fada4d1bbc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1c8116664a899f8756dcfe1c9acbea2"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ad1c8116664a899f8756dcfe1c9acbea2">vqinvsqrt_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:ad1c8116664a899f8756dcfe1c9acbea2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating inverse square root for fixed point 16 bit using Newton-Raphosn method (4 elements)  <a href="namespacearm__compute.xhtml#ad1c8116664a899f8756dcfe1c9acbea2">More...</a><br /></td></tr>
<tr class="separator:ad1c8116664a899f8756dcfe1c9acbea2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40884fce7e40ddc919782b553cd19c83"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a40884fce7e40ddc919782b553cd19c83">vinvsqrtq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a40884fce7e40ddc919782b553cd19c83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse square root for fixed point 8bit using Newton-Raphosn method (16 elements)  <a href="namespacearm__compute.xhtml#a40884fce7e40ddc919782b553cd19c83">More...</a><br /></td></tr>
<tr class="separator:a40884fce7e40ddc919782b553cd19c83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14c3ee7e923e6b37c7b3dbf115cbeaf9"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a14c3ee7e923e6b37c7b3dbf115cbeaf9">vinvsqrtq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a14c3ee7e923e6b37c7b3dbf115cbeaf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate inverse square root for fixed point 8bit using Newton-Raphosn method (8 elements)  <a href="namespacearm__compute.xhtml#a14c3ee7e923e6b37c7b3dbf115cbeaf9">More...</a><br /></td></tr>
<tr class="separator:a14c3ee7e923e6b37c7b3dbf115cbeaf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a097eca47afb2688ec59dc72cd84d442d"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a097eca47afb2688ec59dc72cd84d442d">vqinvsqrtq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a097eca47afb2688ec59dc72cd84d442d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating inverse square root for fixed point 8bit using Newton-Raphosn method (16 elements)  <a href="namespacearm__compute.xhtml#a097eca47afb2688ec59dc72cd84d442d">More...</a><br /></td></tr>
<tr class="separator:a097eca47afb2688ec59dc72cd84d442d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c366f52098f4262c6233f46f565d118"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a9c366f52098f4262c6233f46f565d118">vqinvsqrtq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a9c366f52098f4262c6233f46f565d118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating inverse square root for fixed point 16 bit using Newton-Raphosn method (8 elements)  <a href="namespacearm__compute.xhtml#a9c366f52098f4262c6233f46f565d118">More...</a><br /></td></tr>
<tr class="separator:a9c366f52098f4262c6233f46f565d118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e2b6f46b6457834c1e0248089a52ec8"><td class="memItemLeft" align="right" valign="top">qint8x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7e2b6f46b6457834c1e0248089a52ec8">vqtanh_qs8</a> (qint8x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a7e2b6f46b6457834c1e0248089a52ec8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate hyperbolic tangent for fixed point 8bit (8 elements)  <a href="namespacearm__compute.xhtml#a7e2b6f46b6457834c1e0248089a52ec8">More...</a><br /></td></tr>
<tr class="separator:a7e2b6f46b6457834c1e0248089a52ec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37fac70d8902a85688e7c0e8781099e8"><td class="memItemLeft" align="right" valign="top">qint16x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a37fac70d8902a85688e7c0e8781099e8">vqtanh_qs16</a> (qint16x4_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a37fac70d8902a85688e7c0e8781099e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate hyperbolic tangent for fixed point 16 bit (4 elements)  <a href="namespacearm__compute.xhtml#a37fac70d8902a85688e7c0e8781099e8">More...</a><br /></td></tr>
<tr class="separator:a37fac70d8902a85688e7c0e8781099e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa999fb138baf59c481d6a7c40832623c"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#aa999fb138baf59c481d6a7c40832623c">vqtanhq_qs8</a> (qint8x16_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:aa999fb138baf59c481d6a7c40832623c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate hyperbolic tangent for fixed point 8bit (16 elements)  <a href="namespacearm__compute.xhtml#aa999fb138baf59c481d6a7c40832623c">More...</a><br /></td></tr>
<tr class="separator:aa999fb138baf59c481d6a7c40832623c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a424118de27c3118ff9d2d704663f746c"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a424118de27c3118ff9d2d704663f746c">vqtanhq_qs16</a> (qint16x8_t a, int fixed_point_position)</td></tr>
<tr class="memdesc:a424118de27c3118ff9d2d704663f746c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate hyperbolic tangent for fixed point 16bit (8 elements)  <a href="namespacearm__compute.xhtml#a424118de27c3118ff9d2d704663f746c">More...</a><br /></td></tr>
<tr class="separator:a424118de27c3118ff9d2d704663f746c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d4cef7d7331ac5a216d8bd3000564db"><td class="memItemLeft" align="right" valign="top">qint8x16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a0d4cef7d7331ac5a216d8bd3000564db">vqpowq_qs8</a> (qint8x16_t a, qint8x16_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a0d4cef7d7331ac5a216d8bd3000564db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating n power for fixed point 8bit (16 elements).  <a href="namespacearm__compute.xhtml#a0d4cef7d7331ac5a216d8bd3000564db">More...</a><br /></td></tr>
<tr class="separator:a0d4cef7d7331ac5a216d8bd3000564db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7db8aa4f9e7973933b2fb17c8278add0"><td class="memItemLeft" align="right" valign="top">qint16x8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a7db8aa4f9e7973933b2fb17c8278add0">vqpowq_qs16</a> (qint16x8_t a, qint16x8_t b, int fixed_point_position)</td></tr>
<tr class="memdesc:a7db8aa4f9e7973933b2fb17c8278add0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate saturating n power for fixed point 16bit (8 elements).  <a href="namespacearm__compute.xhtml#a7db8aa4f9e7973933b2fb17c8278add0">More...</a><br /></td></tr>
<tr class="separator:a7db8aa4f9e7973933b2fb17c8278add0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace593813d742d127296b09fa8ab3f85e"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#ace593813d742d127296b09fa8ab3f85e">vmax2q_f32</a> (float32x4x2_t a, float32x4x2_t b)</td></tr>
<tr class="memdesc:ace593813d742d127296b09fa8ab3f85e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute lane-by-lane maximum between elements of a float vector with 4x2 elements.  <a href="namespacearm__compute.xhtml#ace593813d742d127296b09fa8ab3f85e">More...</a><br /></td></tr>
<tr class="separator:ace593813d742d127296b09fa8ab3f85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_1fb090f0c6070330bfaccc4236d3ca0d.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_315f6cf1ec0b2df3ae747ff8286a19f5.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_n_e_fixed_point_8h.xhtml">NEFixedPoint.h</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
