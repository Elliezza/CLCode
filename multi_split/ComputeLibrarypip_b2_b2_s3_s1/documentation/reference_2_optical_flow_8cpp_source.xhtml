<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/OpticalFlow.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('reference_2_optical_flow_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">OpticalFlow.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="reference_2_optical_flow_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_optical_flow_8h.xhtml">OpticalFlow.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_gaussian_pyramid_half_8h.xhtml">GaussianPyramidHalf.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_scharr_8h.xhtml">Scharr.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>validation</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>reference</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearm__compute.xhtml#a8856eca9a83e16bb0cb5880e9c6c9fe7">KeyPointArray</a>         = std::vector&lt;KeyPoint&gt;;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">using</span> InternalKeyPointArray = std::vector&lt;InternalKeyPoint&gt;;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// Constants used for Lucas-Kanade Algorithm</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;constexpr <span class="keywordtype">int</span>   <a class="code" href="optical__flow__pyramid__lk_8cl.xhtml#aab6bf9cc4b300f72d07a2ebe9939f376">W_BITS</a>                = 14;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="optical__flow__pyramid__lk_8cl.xhtml#ae0b2360d4b8e961bf2709b0663fd9f2a">D0</a>                    = 1 &lt;&lt; <a class="code" href="optical__flow__pyramid__lk_8cl.xhtml#aab6bf9cc4b300f72d07a2ebe9939f376">W_BITS</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;constexpr <span class="keywordtype">float</span> DETERMINANT_THRESHOLD = 1.0e-07f;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;constexpr <span class="keywordtype">float</span> EIGENVALUE_THRESHOLD  = 1.0e-04f;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;constexpr <span class="keywordtype">float</span> <a class="code" href="optical__flow__pyramid__lk_8cl.xhtml#a1852457538f524c42f96b66882bd9b35">FLT_SCALE</a>             = 1.0f / (1 &lt;&lt; 20);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// Creates an InternalKeyPointArray for tracking non-integral pixel coordinates</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;InternalKeyPointArray create_internal_keypoints(<span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a8856eca9a83e16bb0cb5880e9c6c9fe7">KeyPointArray</a> &amp;keypoints)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    InternalKeyPointArray internal_keypoints;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> keypoint : keypoints)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        InternalKeyPoint internal_keypoint;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        internal_keypoint.x               = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(keypoint.x);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        internal_keypoint.y               = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(keypoint.y);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        internal_keypoint.tracking_status = <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(keypoint.tracking_status);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        internal_keypoints.push_back(internal_keypoint);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> internal_keypoints;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">// Scale tracked points based on Pyramid level</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keywordtype">void</span> scale_tracked_points(<span class="keywordtype">size_t</span> level, <span class="keywordtype">size_t</span> num_levels, <span class="keywordtype">bool</span> use_initial_estimate,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                          InternalKeyPointArray &amp;old_points_internal, InternalKeyPointArray &amp;new_points_internal,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a8856eca9a83e16bb0cb5880e9c6c9fe7">KeyPointArray</a> &amp;old_points, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a8856eca9a83e16bb0cb5880e9c6c9fe7">KeyPointArray</a> &amp;new_points_estimates)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">if</span>(level == num_levels - 1) <span class="comment">// lowest resolution</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a83372886e5f41e1cd3631035d638c00b">scale</a> = <a class="code" href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#af782da2c5016738c96c16fee5e17670f">std::pow</a>(<a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>, level);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; old_points.size(); ++i)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            old_points_internal.at(i).x               = old_points.at(i).x * <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a83372886e5f41e1cd3631035d638c00b">scale</a>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            old_points_internal.at(i).y               = old_points.at(i).y * <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a83372886e5f41e1cd3631035d638c00b">scale</a>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            old_points_internal.at(i).tracking_status = <span class="keyword">true</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            InternalKeyPoint keypoint_to_track;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">if</span>(use_initial_estimate)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                keypoint_to_track.x               = new_points_estimates.at(i).x * <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a83372886e5f41e1cd3631035d638c00b">scale</a>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                keypoint_to_track.y               = new_points_estimates.at(i).y * <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a83372886e5f41e1cd3631035d638c00b">scale</a>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                keypoint_to_track.tracking_status = (new_points_estimates.at(i).tracking_status == 1);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                keypoint_to_track.x               = old_points_internal.at(i).x;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                keypoint_to_track.y               = old_points_internal.at(i).y;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                keypoint_to_track.tracking_status = <span class="keyword">true</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            new_points_internal.at(i) = keypoint_to_track;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; old_points.size(); ++i)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            old_points_internal.at(i).x /= <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            old_points_internal.at(i).y /= <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            new_points_internal.at(i).x /= <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            new_points_internal.at(i).y /= <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keywordtype">bool</span> is_invalid_keypoint(<span class="keyword">const</span> InternalKeyPoint &amp;keypoint, <span class="keyword">const</span> ValidRegion &amp;valid_region, <span class="keywordtype">size_t</span> window_dimension)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> half_window = window_dimension / 2;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x           = std::floor(keypoint.x);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y           = std::floor(keypoint.y);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> (x - half_window &lt; valid_region.start(0)) || (x + half_window &gt;= valid_region.end(0) - 1) || (y - half_window &lt; valid_region.start(1)) || (y + half_window &gt;= valid_region.end(1) - 1);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;constexpr <span class="keywordtype">int</span> INT_ROUND(T x, <span class="keywordtype">int</span> n)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> (x + (1 &lt;&lt; (n - 1))) &gt;&gt; n;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">// Return the bilinear value at a specified coordinate with different border modes</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keywordtype">int</span> <a class="code" href="warp__helpers_8h.xhtml#abea9f226daf3e0ad741d03cf7417d353">bilinear_interpolate</a>(<span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;in, Coordinates <span class="keywordtype">id</span>, <span class="keywordtype">float</span> wx, <span class="keywordtype">float</span> wy, <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>, T constant_border_value, <span class="keywordtype">int</span> scale)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> level = <span class="keywordtype">id</span>.x();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> idy   = <span class="keywordtype">id</span>.y();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx   = wx;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy   = wy;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dx_1 = 1.0f - dx;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> dy_1 = 1.0f - dy;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> T border_value = constant_border_value;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">id</span>.set(0, level);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">id</span>.set(1, idy);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> T tl = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">tensor_elem_at</a>(in, <span class="keywordtype">id</span>, border_mode, border_value);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">id</span>.set(0, level + 1);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">id</span>.set(1, idy);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> T tr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">tensor_elem_at</a>(in, <span class="keywordtype">id</span>, border_mode, border_value);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">id</span>.set(0, level);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">id</span>.set(1, idy + 1);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> T bl = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">tensor_elem_at</a>(in, <span class="keywordtype">id</span>, border_mode, border_value);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">id</span>.set(0, level + 1);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordtype">id</span>.set(1, idy + 1);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> T br = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">tensor_elem_at</a>(in, <span class="keywordtype">id</span>, border_mode, border_value);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// weights</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w00 = roundf(dx_1 * dy_1 * D0);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w01 = roundf(dx * dy_1 * D0);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w10 = roundf(dx_1 * dy * D0);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w11 = D0 - w00 - w01 - w10;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(INT_ROUND(tl * w00 + tr * w01 + bl * w10 + br * w11, scale));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;std::vector&lt;int&gt; compute_derivative(<span class="keyword">const</span> SimpleTensor&lt;T&gt; &amp;input, <span class="keyword">const</span> InternalKeyPoint &amp;keypoint,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                    <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, uint8_t constant_border_value, <span class="keywordtype">size_t</span> window_dimension, <span class="keywordtype">int</span> scale)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::vector&lt;int&gt; bilinear_values;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> half_window = window_dimension / 2;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordtype">float</span> keypoint_int_x = 0;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">float</span> keypoint_int_y = 0;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> wx = std::modf(keypoint.x, &amp;keypoint_int_x);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> wy = std::modf(keypoint.y, &amp;keypoint_int_y);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    Coordinates tl_window(static_cast&lt;int&gt;(keypoint_int_x) - half_window, static_cast&lt;int&gt;(keypoint_int_y) - half_window);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    Coordinates br_window(static_cast&lt;int&gt;(keypoint_int_x) + half_window, static_cast&lt;int&gt;(keypoint_int_y) + half_window);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> y = tl_window.y(); y &lt;= br_window.y(); ++y)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> x = tl_window.x(); x &lt;= br_window.x(); ++x)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            bilinear_values.push_back(<a class="code" href="warp__helpers_8h.xhtml#abea9f226daf3e0ad741d03cf7417d353">bilinear_interpolate</a>(input, Coordinates(x, y), wx, wy, border_mode, static_cast&lt;T&gt;(constant_border_value), scale));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> bilinear_values;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;std::tuple&lt;float, float, float&gt; compute_spatial_gradient_matrix(<span class="keyword">const</span> std::vector&lt;int&gt; &amp;bilinear_ix, <span class="keyword">const</span> std::vector&lt;int&gt; &amp;bilinear_iy)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(bilinear_ix.size() != bilinear_iy.size());</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">int</span> iA11 = 0;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">int</span> iA12 = 0;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordtype">int</span> iA22 = 0;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; bilinear_ix.size(); ++i)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordtype">int</span> ixval = bilinear_ix[i];</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordtype">int</span> iyval = bilinear_iy[i];</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        iA11 += ixval * ixval;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        iA12 += ixval * iyval;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        iA22 += iyval * iyval;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(iA11 * FLT_SCALE, iA12 * FLT_SCALE, iA22 * FLT_SCALE);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;std::tuple&lt;double, double&gt; compute_temporal_gradient_vector(<span class="keyword">const</span> std::vector&lt;int&gt; &amp;bilinear_it_old,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                                            <span class="keyword">const</span> std::vector&lt;int&gt; &amp;bilinear_it_new,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                            <span class="keyword">const</span> std::vector&lt;int&gt; &amp;bilinear_ix,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                                            <span class="keyword">const</span> std::vector&lt;int&gt; &amp;bilinear_iy)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(bilinear_ix.size() != bilinear_iy.size());</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(bilinear_it_old.size() != bilinear_it_new.size());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">int</span> ib1 = 0;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">int</span> ib2 = 0;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; bilinear_ix.size(); ++i)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordtype">int</span> ixval = bilinear_ix[i];</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordtype">int</span> iyval = bilinear_iy[i];</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordtype">int</span> ival  = bilinear_it_old[i];</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordtype">int</span> jval  = bilinear_it_new[i];</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> diff = jval - ival;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        ib1 += diff * ixval;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        ib2 += diff * iyval;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> b1 = ib1 * <a class="code" href="optical__flow__pyramid__lk_8cl.xhtml#a1852457538f524c42f96b66882bd9b35">FLT_SCALE</a>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> b2 = ib2 * <a class="code" href="optical__flow__pyramid__lk_8cl.xhtml#a1852457538f524c42f96b66882bd9b35">FLT_SCALE</a>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(b1, b2);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6890d0541805e29cc8cb546ac3ed5239">  246</a></span>&#160;std::vector&lt;KeyPoint&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6890d0541805e29cc8cb546ac3ed5239">optical_flow</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;old_input, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T&gt;</a> &amp;new_input,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml">OpticalFlowParameters</a> &amp;params, <span class="keywordtype">size_t</span> num_levels,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                   <span class="keyword">const</span> std::vector&lt;KeyPoint&gt; &amp;old_points, <span class="keyword">const</span> std::vector&lt;KeyPoint&gt; &amp;new_points_estimates,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                   <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, uint8_t constant_border_value)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2237230a1357685ba2472c2d6fca17fa">filter_size</a>      = 3;    <span class="comment">// scharr filter size</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> max_iterations   = 1000; <span class="comment">// fixed by kernel</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> window_dimension = params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#aca4f010655c8e5534162dfbfdce31d84">window_dimension</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_iterations   = (params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#a77d1ea96211300e9417b965981953c81">termination</a> == <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b">Termination::TERM_CRITERIA_EPSILON</a>) ? max_iterations : params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#a22fec0af810a755e77ecbb7179c193d4">num_iterations</a>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="classarm__compute_1_1_array.xhtml">KeyPointArray</a> new_points(old_points.size());</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    InternalKeyPointArray old_points_internal = create_internal_keypoints(old_points);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    InternalKeyPointArray new_points_internal = create_internal_keypoints(new_points_estimates);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> scharr_gx;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> scharr_gy;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="comment">// Create pyramids</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::vector&lt;SimpleTensor&lt;T&gt;&gt; old_pyramid = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a42c972f3c96f7c91c57a7aaf2068fddf">gaussian_pyramid_half</a>(old_input, border_mode, constant_border_value, num_levels);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    std::vector&lt;SimpleTensor&lt;T&gt;&gt; new_pyramid = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a42c972f3c96f7c91c57a7aaf2068fddf">gaussian_pyramid_half</a>(new_input, border_mode, constant_border_value, num_levels);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Iterate over each level of the pyramid</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> idx = num_levels; idx &gt; 0; --idx)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> level = idx - 1;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="comment">// Calculate scharr gradients</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        std::tie(scharr_gx, scharr_gy) = scharr&lt;int16_t, T&gt;(old_pyramid[level], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2237230a1357685ba2472c2d6fca17fa">filter_size</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">border_mode</a>, constant_border_value, <a class="code" href="namespacearm__compute.xhtml#ae46abc5ecac309cbece5c06cb80daaf7a5515a637eda61b978e97adaa5d7629cc">GradientDimension::GRAD_XY</a>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        scale_tracked_points(level, num_levels, params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#a1d79cd7ed111d3a441ba1372f90210de">use_initial_estimate</a>, old_points_internal, new_points_internal, old_points, new_points_estimates);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">// Calculate valid region based on image dimensions of current pyramid level</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region = <a class="code" href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">shape_to_valid_region</a>(old_pyramid[level].<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>(), (border_mode == <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>), <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(filter_size / 2));</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; old_points.size(); ++i)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="structarm__compute_1_1_internal_key_point.xhtml">InternalKeyPoint</a> &amp;old_keypoint = old_points_internal.at(i);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <a class="code" href="structarm__compute_1_1_internal_key_point.xhtml">InternalKeyPoint</a> &amp;new_keypoint = new_points_internal.at(i);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="comment">// Helper function for untracking keypoints when on the lowest pyramid level (high resolution)</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> untrack_keypoint = [&amp;](<span class="keywordtype">bool</span> predicate)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">if</span>(predicate &amp;&amp; (level == 0))</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#a633fd1d1a22ab1b18aa0e091cb201553">tracking_status</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <span class="keywordflow">return</span> predicate;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            };</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">if</span>(!old_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#a633fd1d1a22ab1b18aa0e091cb201553">tracking_status</a>)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="comment">// Check if tracked coordinate is outside image coordinate</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">if</span>(untrack_keypoint(is_invalid_keypoint(old_keypoint, valid_region, window_dimension)))</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="comment">// Compute spatial derivative</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            std::vector&lt;int&gt; bilinear_ix = compute_derivative(scharr_gx, old_keypoint, border_mode, constant_border_value, window_dimension, W_BITS);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            std::vector&lt;int&gt; bilinear_iy = compute_derivative(scharr_gy, old_keypoint, border_mode, constant_border_value, window_dimension, W_BITS);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordtype">float</span> A11 = 0.f;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordtype">float</span> A12 = 0.f;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordtype">float</span> A22 = 0.f;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            std::tie(A11, A12, A22) = compute_spatial_gradient_matrix(bilinear_ix, bilinear_iy);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="comment">// Calculate criteria for lost tracking : Matrix A is invertible</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="comment">// 1. The determinant of the matrix is less than DETERMINANT_THRESHOLD</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="comment">// 2. The minimum eigenvalue of the matrix is less than EIGENVALUE_THRESHOLD</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> trace_A      = A11 + A22;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> determinant  = A11 * A22 - A12 * A12;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> discriminant = (trace_A * trace_A) - 4.0f * (determinant);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> eigenvalue_A = (trace_A - std::sqrt(discriminant)) / 2.0f;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="comment">// Divide by window_dimension squared to reduce the floating point accummulation error</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> eigenvalue = eigenvalue_A / (window_dimension * window_dimension);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="comment">// Check if it is a good point to track</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">if</span>(untrack_keypoint(eigenvalue &lt; EIGENVALUE_THRESHOLD || determinant &lt; DETERMINANT_THRESHOLD))</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordtype">float</span> prev_delta_x = 0.f;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordtype">float</span> prev_delta_y = 0.f;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> j = 0; j &lt; num_iterations; ++j)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="comment">// Check if tracked coordinate is outside image coordinate</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordflow">if</span>(untrack_keypoint(is_invalid_keypoint(new_keypoint, valid_region, window_dimension)))</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="comment">// Compute temporal derivative</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                std::vector&lt;int&gt; bilinear_it_old = compute_derivative(old_pyramid[level], old_keypoint, border_mode, constant_border_value, window_dimension, W_BITS - 5);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                std::vector&lt;int&gt; bilinear_it_new = compute_derivative(new_pyramid[level], new_keypoint, border_mode, constant_border_value, window_dimension, W_BITS - 5);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <span class="keywordtype">double</span> b1 = 0.f;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordtype">double</span> b2 = 0.f;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                std::tie(b1, b2) = compute_temporal_gradient_vector(bilinear_it_old, bilinear_it_new, bilinear_ix, bilinear_iy);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <span class="comment">// Compute motion vector -&gt; A^-1 * -b</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> delta_x = (A12 * b2 - A22 * b1) / determinant;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> delta_y = (A12 * b1 - A11 * b2) / determinant;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="comment">// Update the new position</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#ad0da36b2558901e21e7a30f6c227a45e">x</a> += delta_x;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#aa4f0d3eebc3c443f9be81bf48561a217">y</a> += delta_y;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> magnitude_squared = delta_x * delta_x + delta_y * delta_y;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="comment">// Check if termination criteria is EPSILON and if it is satisfied</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <span class="keywordflow">if</span>(magnitude_squared &lt;= params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#a2dceb63003a97fa431d06d1d07edc449">epsilon</a> &amp;&amp; (params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#a77d1ea96211300e9417b965981953c81">termination</a> == <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b">Termination::TERM_CRITERIA_EPSILON</a> || params.<a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml#a77d1ea96211300e9417b965981953c81">termination</a> == <a class="code" href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29">Termination::TERM_CRITERIA_BOTH</a>))</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="comment">// Check convergence analyzing the previous delta</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                <span class="keywordflow">if</span>(j &gt; 0 &amp;&amp; (std::fabs(delta_x + prev_delta_x) &lt; 0.01f &amp;&amp; std::fabs(delta_y + prev_delta_y) &lt; 0.01f))</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#ad0da36b2558901e21e7a30f6c227a45e">x</a> -= delta_x * <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#aa4f0d3eebc3c443f9be81bf48561a217">y</a> -= delta_y * <a class="code" href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">SCALE_PYRAMID_HALF</a>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                prev_delta_x = delta_x;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                prev_delta_y = delta_y;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// Copy optical flow coordinates to output vector</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; old_points.size(); ++i)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_internal_key_point.xhtml">InternalKeyPoint</a> &amp;new_keypoint = new_points_internal.at(i);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        new_points.at(i).<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#ad0da36b2558901e21e7a30f6c227a45e">x</a>               = roundf(new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#ad0da36b2558901e21e7a30f6c227a45e">x</a>);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        new_points.at(i).y               = roundf(new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#aa4f0d3eebc3c443f9be81bf48561a217">y</a>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        new_points.at(i).tracking_status = new_keypoint.<a class="code" href="structarm__compute_1_1_internal_key_point.xhtml#a633fd1d1a22ab1b18aa0e091cb201553">tracking_status</a> ? 1 : 0;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> new_points;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="keyword">template</span> std::vector&lt;KeyPoint&gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6890d0541805e29cc8cb546ac3ed5239">optical_flow</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;old_input, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;new_input,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_optical_flow_parameters.xhtml">OpticalFlowParameters</a> &amp;params, <span class="keywordtype">size_t</span> num_levels,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                            <span class="keyword">const</span> std::vector&lt;KeyPoint&gt; &amp;old_points, <span class="keyword">const</span> std::vector&lt;KeyPoint&gt; &amp;new_points_estimates,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                            <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, uint8_t constant_border_value);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;} <span class="comment">// namespace reference</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;} <span class="comment">// namespace validation</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">arm_compute::BorderMode</a></div><div class="ttdeci">BorderMode</div><div class="ttdoc">Methods available to handle borders. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00283">Types.h:283</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_af9876aedd664cac0ddeacddb40cb71cd"><div class="ttname"><a href="namespacearm__compute.xhtml#af9876aedd664cac0ddeacddb40cb71cd">arm_compute::SCALE_PYRAMID_HALF</a></div><div class="ttdeci">constexpr float SCALE_PYRAMID_HALF</div><div class="ttdoc">Constant value used to indicate a half-scale pyramid. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00104">Types.h:104</a></div></div>
<div class="ttc" id="structarm__compute_1_1_internal_key_point_xhtml_aa4f0d3eebc3c443f9be81bf48561a217"><div class="ttname"><a href="structarm__compute_1_1_internal_key_point.xhtml#aa4f0d3eebc3c443f9be81bf48561a217">arm_compute::InternalKeyPoint::y</a></div><div class="ttdeci">float y</div><div class="ttdoc">y coordinate of the keypoint </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00090">Types.h:90</a></div></div>
<div class="ttc" id="optical__flow__pyramid__lk_8cl_xhtml_ae0b2360d4b8e961bf2709b0663fd9f2a"><div class="ttname"><a href="optical__flow__pyramid__lk_8cl.xhtml#ae0b2360d4b8e961bf2709b0663fd9f2a">D0</a></div><div class="ttdeci">#define D0</div><div class="ttdef"><b>Definition:</b> <a href="optical__flow__pyramid__lk_8cl_source.xhtml#l00059">optical_flow_pyramid_lk.cl:59</a></div></div>
<div class="ttc" id="structarm__compute_1_1_internal_key_point_xhtml_a633fd1d1a22ab1b18aa0e091cb201553"><div class="ttname"><a href="structarm__compute_1_1_internal_key_point.xhtml#a633fd1d1a22ab1b18aa0e091cb201553">arm_compute::InternalKeyPoint::tracking_status</a></div><div class="ttdeci">bool tracking_status</div><div class="ttdoc">the tracking status of the keypoint </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00091">Types.h:91</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00133">Convolution.cpp:133</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a4f489943d8618d47b1ad4611f0b9b7ff"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f489943d8618d47b1ad4611f0b9b7ff">arm_compute::test::validation::tensor_elem_at</a></div><div class="ttdeci">T tensor_elem_at(const SimpleTensor&lt; T &gt; &amp;src, Coordinates coord, BorderMode border_mode, T constant_border_value)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00061">Utils.h:61</a></div></div>
<div class="ttc" id="tests_2validation_2reference_2_utils_8h_xhtml"><div class="ttname"><a href="tests_2validation_2reference_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_optical_flow_parameters_xhtml_a1d79cd7ed111d3a441ba1372f90210de"><div class="ttname"><a href="structarm__compute_1_1_optical_flow_parameters.xhtml#a1d79cd7ed111d3a441ba1372f90210de">arm_compute::OpticalFlowParameters::use_initial_estimate</a></div><div class="ttdeci">bool use_initial_estimate</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00083">Types.h:83</a></div></div>
<div class="ttc" id="_scharr_8h_xhtml"><div class="ttname"><a href="_scharr_8h.xhtml">Scharr.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00291">Types.h:291</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a5a2e12b6baf7ad91a2ce32f19c36bd1b">arm_compute::Termination::TERM_CRITERIA_EPSILON</a></div><div class="ttdoc">Terminate when within epsilon of a threshold. </div></div>
<div class="ttc" id="structarm__compute_1_1_optical_flow_parameters_xhtml_a77d1ea96211300e9417b965981953c81"><div class="ttname"><a href="structarm__compute_1_1_optical_flow_parameters.xhtml#a77d1ea96211300e9417b965981953c81">arm_compute::OpticalFlowParameters::termination</a></div><div class="ttdeci">Termination termination</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="_optical_flow_8h_xhtml"><div class="ttname"><a href="_optical_flow_8h.xhtml">OpticalFlow.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a6890d0541805e29cc8cb546ac3ed5239"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a6890d0541805e29cc8cb546ac3ed5239">arm_compute::test::validation::reference::optical_flow</a></div><div class="ttdeci">std::vector&lt; KeyPoint &gt; optical_flow(const SimpleTensor&lt; T &gt; &amp;old_input, const SimpleTensor&lt; T &gt; &amp;new_input, const OpticalFlowParameters &amp;params, size_t num_levels, const std::vector&lt; KeyPoint &gt; &amp;old_points, const std::vector&lt; KeyPoint &gt; &amp;new_points_estimates, BorderMode border_mode, uint8_t constant_border_value)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_optical_flow_8cpp_source.xhtml#l00246">OpticalFlow.cpp:246</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29"><div class="ttname"><a href="namespacearm__compute.xhtml#a08c1503414e23f5dd10ff83492685453a788740b1ba2d6463dae318a332513b29">arm_compute::Termination::TERM_CRITERIA_BOTH</a></div><div class="ttdoc">Terminate on whichever of the other conditions occurs first. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1_array_xhtml"><div class="ttname"><a href="classarm__compute_1_1_array.xhtml">arm_compute::Array</a></div><div class="ttdoc">Basic implementation of the IArray interface which allocates a static number of T values...</div><div class="ttdef"><b>Definition:</b> <a href="_array_8h_source.xhtml#l00037">Array.h:37</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a8856eca9a83e16bb0cb5880e9c6c9fe7"><div class="ttname"><a href="namespacearm__compute.xhtml#a8856eca9a83e16bb0cb5880e9c6c9fe7">arm_compute::KeyPointArray</a></div><div class="ttdeci">Array&lt; KeyPoint &gt; KeyPointArray</div><div class="ttdoc">Array of Key Points. </div><div class="ttdef"><b>Definition:</b> <a href="_array_8h_source.xhtml#l00065">Array.h:65</a></div></div>
<div class="ttc" id="structarm__compute_1_1_internal_key_point_xhtml_ad0da36b2558901e21e7a30f6c227a45e"><div class="ttname"><a href="structarm__compute_1_1_internal_key_point.xhtml#ad0da36b2558901e21e7a30f6c227a45e">arm_compute::InternalKeyPoint::x</a></div><div class="ttdeci">float x</div><div class="ttdoc">x coordinate of the keypoint </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00089">Types.h:89</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5471e46933e7a9c4709972d91fc4ea65"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5471e46933e7a9c4709972d91fc4ea65">arm_compute::test::validation::border_mode</a></div><div class="ttdeci">border_mode</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00133">Convolution.cpp:133</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2237230a1357685ba2472c2d6fca17fa"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2237230a1357685ba2472c2d6fca17fa">arm_compute::test::validation::filter_size</a></div><div class="ttdeci">filter_size</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_8cpp_source.xhtml#l00134">Convolution.cpp:134</a></div></div>
<div class="ttc" id="structarm__compute_1_1_internal_key_point_xhtml"><div class="ttname"><a href="structarm__compute_1_1_internal_key_point.xhtml">arm_compute::InternalKeyPoint</a></div><div class="ttdoc">Internal keypoint class for Lucas-Kanade Optical Flow. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00087">Types.h:87</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory. </div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00059">SimpleTensor.h:59</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a83372886e5f41e1cd3631035d638c00b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a83372886e5f41e1cd3631035d638c00b">arm_compute::test::validation::reference::scale</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; scale(const SimpleTensor&lt; T &gt; &amp;in, float scale_x, float scale_y, InterpolationPolicy policy, BorderMode border_mode, T constant_border_value, SamplingPolicy sampling_policy, bool ceil_policy_scale)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2reference_2_scale_8cpp_source.xhtml#l00040">Scale.cpp:40</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ae46abc5ecac309cbece5c06cb80daaf7a5515a637eda61b978e97adaa5d7629cc"><div class="ttname"><a href="namespacearm__compute.xhtml#ae46abc5ecac309cbece5c06cb80daaf7a5515a637eda61b978e97adaa5d7629cc">arm_compute::GradientDimension::GRAD_XY</a></div><div class="ttdoc">x and y gradient dimension </div></div>
<div class="ttc" id="optical__flow__pyramid__lk_8cl_xhtml_a1852457538f524c42f96b66882bd9b35"><div class="ttname"><a href="optical__flow__pyramid__lk_8cl.xhtml#a1852457538f524c42f96b66882bd9b35">FLT_SCALE</a></div><div class="ttdeci">#define FLT_SCALE</div><div class="ttdef"><b>Definition:</b> <a href="optical__flow__pyramid__lk_8cl_source.xhtml#l00058">optical_flow_pyramid_lk.cl:58</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdoc">Borders are left undefined. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a42c972f3c96f7c91c57a7aaf2068fddf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a42c972f3c96f7c91c57a7aaf2068fddf">arm_compute::test::validation::reference::gaussian_pyramid_half</a></div><div class="ttdeci">std::vector&lt; SimpleTensor&lt; T &gt; &gt; gaussian_pyramid_half(const SimpleTensor&lt; T &gt; &amp;src, BorderMode border_mode, uint8_t constant_border_value, size_t num_levels)</div><div class="ttdef"><b>Definition:</b> <a href="_gaussian_pyramid_half_8cpp_source.xhtml#l00041">GaussianPyramidHalf.cpp:41</a></div></div>
<div class="ttc" id="structarm__compute_1_1_optical_flow_parameters_xhtml_aca4f010655c8e5534162dfbfdce31d84"><div class="ttname"><a href="structarm__compute_1_1_optical_flow_parameters.xhtml#aca4f010655c8e5534162dfbfdce31d84">arm_compute::OpticalFlowParameters::window_dimension</a></div><div class="ttdeci">size_t window_dimension</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00082">Types.h:82</a></div></div>
<div class="ttc" id="optical__flow__pyramid__lk_8cl_xhtml_aab6bf9cc4b300f72d07a2ebe9939f376"><div class="ttname"><a href="optical__flow__pyramid__lk_8cl.xhtml#aab6bf9cc4b300f72d07a2ebe9939f376">W_BITS</a></div><div class="ttdeci">#define W_BITS</div><div class="ttdoc">Constants used for Lucas-Kanade Algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="optical__flow__pyramid__lk_8cl_source.xhtml#l00057">optical_flow_pyramid_lk.cl:57</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail_xhtml_af782da2c5016738c96c16fee5e17670f"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.xhtml#af782da2c5016738c96c16fee5e17670f">arm_compute::test::fixed_point_arithmetic::detail::pow</a></div><div class="ttdeci">fixed_point&lt; T &gt; pow(fixed_point&lt; T &gt; x, fixed_point&lt; T &gt; a)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_fixed_point_8h_source.xhtml#l00957">FixedPoint.h:957</a></div></div>
<div class="ttc" id="structarm__compute_1_1_optical_flow_parameters_xhtml_a2dceb63003a97fa431d06d1d07edc449"><div class="ttname"><a href="structarm__compute_1_1_optical_flow_parameters.xhtml#a2dceb63003a97fa431d06d1d07edc449">arm_compute::OpticalFlowParameters::epsilon</a></div><div class="ttdeci">float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00080">Types.h:80</a></div></div>
<div class="ttc" id="structarm__compute_1_1_valid_region_xhtml"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml">arm_compute::ValidRegion</a></div><div class="ttdoc">Container for valid region of a window. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00206">Types.h:206</a></div></div>
<div class="ttc" id="structarm__compute_1_1_optical_flow_parameters_xhtml_a22fec0af810a755e77ecbb7179c193d4"><div class="ttname"><a href="structarm__compute_1_1_optical_flow_parameters.xhtml#a22fec0af810a755e77ecbb7179c193d4">arm_compute::OpticalFlowParameters::num_iterations</a></div><div class="ttdeci">size_t num_iterations</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00081">Types.h:81</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_xhtml_a8103df0e6c416f55f40106aa49072b42"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a8103df0e6c416f55f40106aa49072b42">arm_compute::test::shape_to_valid_region</a></div><div class="ttdeci">ValidRegion shape_to_valid_region(const TensorShape &amp;a_shape, bool border_undefined=false, BorderSize border_size=BorderSize(0))</div><div class="ttdoc">Create a valid region based on tensor shape, border mode and border size. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00222">Utils.h:222</a></div></div>
<div class="ttc" id="structarm__compute_1_1_optical_flow_parameters_xhtml"><div class="ttname"><a href="structarm__compute_1_1_optical_flow_parameters.xhtml">arm_compute::OpticalFlowParameters</a></div><div class="ttdoc">Parameters of Optical Flow algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="tests_2_types_8h_source.xhtml#l00064">Types.h:64</a></div></div>
<div class="ttc" id="_gaussian_pyramid_half_8h_xhtml"><div class="ttname"><a href="_gaussian_pyramid_half_8h.xhtml">GaussianPyramidHalf.h</a></div></div>
<div class="ttc" id="warp__helpers_8h_xhtml_abea9f226daf3e0ad741d03cf7417d353"><div class="ttname"><a href="warp__helpers_8h.xhtml#abea9f226daf3e0ad741d03cf7417d353">bilinear_interpolate</a></div><div class="ttdeci">const DATA_TYPE4 bilinear_interpolate(const Image *in, const float8 coords, const float width, const float height)</div><div class="ttdoc">Computes the bilinear interpolation for each set of coordinates in the vector coords and returns the ...</div><div class="ttdef"><b>Definition:</b> <a href="warp__helpers_8h_source.xhtml#l00135">warp_helpers.h:135</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="reference_2_optical_flow_8cpp.xhtml">OpticalFlow.cpp</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:38 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
