<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/algorithms/BFS.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_b_f_s_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BFS.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_b_f_s_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_GRAPH_ALGORITHM_BFS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_GRAPH_ALGORITHM_BFS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml">   34</a></span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml">   36</a></span>&#160;<span class="keyword">namespace </span>detail</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">   45</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">all_inputs_are_visited</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node, <span class="keyword">const</span> std::vector&lt;bool&gt; &amp;visited)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> *graph = node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5332828f81f0c3bc766b90656c9ee631">graph</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(graph == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">bool</span> are_all_visited = <span class="keyword">true</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;input_edge_id : node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5b9a9aab9410579c7047edee0ec69cac">input_edges</a>())</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">if</span>(input_edge_id != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *input_edge = graph-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8ad9de12a27cddcaaefe58ee748c14a8">edge</a>(input_edge_id);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a6d7e4dd9d058b6e486b6b2c56153fb2a">producer</a>() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">if</span>(!visited[input_edge-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a1406bd3d2033837af2a47831a5304328">producer_id</a>()])</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                are_all_visited = <span class="keyword">false</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> are_all_visited;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;} <span class="comment">// namespace detail</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a96552dd9dcc894d118d68697efad8fd8">   77</a></span>&#160;<span class="keyword">inline</span> std::vector&lt;NodeID&gt; <a class="code" href="namespacearm__compute_1_1graph.xhtml#a96552dd9dcc894d118d68697efad8fd8">bfs</a>(<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::vector&lt;NodeID&gt; bfs_order_vector;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Created visited vector</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::vector&lt;bool&gt; visited(g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a224d8c205ef72199abefd671c25f542e">nodes</a>().size(), <span class="keyword">false</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// Create BFS queue</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::list&lt;NodeID&gt; queue;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// Push inputs and mark as visited</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;input : g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aafb52c79957a407905734204f7a8ebc6">inputs</a>())</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">if</span>(input != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            visited[input] = <span class="keyword">true</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            queue.push_back(input);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Iterate over vector and edges</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">while</span>(!queue.empty())</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">// Dequeue a node from queue and process</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> n = queue.front();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        bfs_order_vector.push_back(n);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        queue.pop_front();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">node</a>(n);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(node == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;eid : node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a416772314f2c1aa4cd48fbcb0f6025c5">output_edges</a>())</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml">Edge</a> *e = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a8ad9de12a27cddcaaefe58ee748c14a8">edge</a>(eid);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(e == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">if</span>(!visited[e-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a7e85e821d1999985fd3996cec10ff94f">consumer_id</a>()] &amp;&amp; <a class="code" href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">detail::all_inputs_are_visited</a>(e-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#ab2001ac9d8d93166c8b8717fadf120cc">consumer</a>(), visited))</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                visited[e-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a7e85e821d1999985fd3996cec10ff94f">consumer_id</a>()] = <span class="keyword">true</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                queue.push_back(e-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_edge.xhtml#a7e85e821d1999985fd3996cec10ff94f">consumer_id</a>());</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> bfs_order_vector;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_GRAPH_ALGORITHM_BFS_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a62b93384d460474d7e07b8b298f22761"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a62b93384d460474d7e07b8b298f22761">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const </div><div class="ttdoc">Get node object given its id. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml_a1406bd3d2033837af2a47831a5304328"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a1406bd3d2033837af2a47831a5304328">arm_compute::graph::Edge::producer_id</a></div><div class="ttdeci">NodeID producer_id() const </div><div class="ttdoc">Returns producer node id. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00068">Edge.h:68</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a224d8c205ef72199abefd671c25f542e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a224d8c205ef72199abefd671c25f542e">arm_compute::graph::Graph::nodes</a></div><div class="ttdeci">std::vector&lt; std::unique_ptr&lt; INode &gt; &gt; &amp; nodes()</div><div class="ttdoc">Returns nodes of graph. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a416772314f2c1aa4cd48fbcb0f6025c5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a416772314f2c1aa4cd48fbcb0f6025c5">arm_compute::graph::INode::output_edges</a></div><div class="ttdeci">const std::set&lt; EdgeID &gt; &amp; output_edges() const </div><div class="ttdoc">Returns output edge set. </div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00328">Error.h:328</a></div></div>
<div class="ttc" id="_graph_8h_xhtml"><div class="ttname"><a href="_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5332828f81f0c3bc766b90656c9ee631"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5332828f81f0c3bc766b90656c9ee631">arm_compute::graph::INode::graph</a></div><div class="ttdeci">const Graph * graph() const </div><div class="ttdoc">Returns node&amp;#39;s Graph. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="00__introduction_8dox_source.xhtml#l00001">00_introduction.dox:1</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00044">INode.h:44</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml_a7e85e821d1999985fd3996cec10ff94f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a7e85e821d1999985fd3996cec10ff94f">arm_compute::graph::Edge::consumer_id</a></div><div class="ttdeci">NodeID consumer_id() const </div><div class="ttdoc">Returns sink node id. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00076">Edge.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_aafb52c79957a407905734204f7a8ebc6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#aafb52c79957a407905734204f7a8ebc6">arm_compute::graph::Graph::inputs</a></div><div class="ttdeci">const std::vector&lt; NodeID &gt; &amp; inputs()</div><div class="ttdoc">Returns graph input nodes. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_node_xhtml_a5b9a9aab9410579c7047edee0ec69cac"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a5b9a9aab9410579c7047edee0ec69cac">arm_compute::graph::INode::input_edges</a></div><div class="ttdeci">const std::vector&lt; EdgeID &gt; &amp; input_edges() const </div><div class="ttdoc">Returns input edge set. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8h_source.xhtml#l00050">Graph.h:50</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml_a6d7e4dd9d058b6e486b6b2c56153fb2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#a6d7e4dd9d058b6e486b6b2c56153fb2a">arm_compute::graph::Edge::producer</a></div><div class="ttdeci">INode * producer() const </div><div class="ttdoc">Returns producer node. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00084">Edge.h:84</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00057">Types.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml">arm_compute::graph::Edge</a></div><div class="ttdoc">Graph Edge. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00039">Edge.h:39</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00067">Types.h:67</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_1_1detail_xhtml_ae668406fdc43b21e5dcb3904fa683ea0"><div class="ttname"><a href="namespacearm__compute_1_1graph_1_1detail.xhtml#ae668406fdc43b21e5dcb3904fa683ea0">arm_compute::graph::detail::all_inputs_are_visited</a></div><div class="ttdeci">bool all_inputs_are_visited(const INode *node, const std::vector&lt; bool &gt; &amp;visited)</div><div class="ttdoc">Checks if all the input dependencies of a node have been visited. </div><div class="ttdef"><b>Definition:</b> <a href="_b_f_s_8h_source.xhtml#l00045">BFS.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_edge_xhtml_ab2001ac9d8d93166c8b8717fadf120cc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_edge.xhtml#ab2001ac9d8d93166c8b8717fadf120cc">arm_compute::graph::Edge::consumer</a></div><div class="ttdeci">INode * consumer() const </div><div class="ttdoc">Returns consumer node. </div><div class="ttdef"><b>Definition:</b> <a href="_edge_8h_source.xhtml#l00092">Edge.h:92</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a96552dd9dcc894d118d68697efad8fd8"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a96552dd9dcc894d118d68697efad8fd8">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal. </div><div class="ttdef"><b>Definition:</b> <a href="_b_f_s_8h_source.xhtml#l00077">BFS.h:77</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_a8ad9de12a27cddcaaefe58ee748c14a8"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a8ad9de12a27cddcaaefe58ee748c14a8">arm_compute::graph::Graph::edge</a></div><div class="ttdeci">const Edge * edge(EdgeID id) const </div><div class="ttdoc">Get edge object given its id. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_d03e69479d487ec17de4c74c8d185b2d.xhtml">algorithms</a></li><li class="navelem"><a class="el" href="_b_f_s_8h.xhtml">BFS.h</a></li>
    <li class="footer">Generated on Wed May 23 2018 11:36:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
