!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	documentation/search/searchdata.js	/^  0: "0_abcdefghijklmnopqrstuvwxyz~",$/;"	p	class:indexSectionsWithContent
0	documentation/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
0	documentation/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
1	documentation/search/searchdata.js	/^  1: "Data Structures",$/;"	p	class:indexSectionLabels
1	documentation/search/searchdata.js	/^  1: "_abcdefghijklmnopqrstvwz",$/;"	p	class:indexSectionsWithContent
1	documentation/search/searchdata.js	/^  1: "classes",$/;"	p	class:indexSectionNames
10	documentation/search/searchdata.js	/^  10: "Macros",$/;"	p	class:indexSectionLabels
10	documentation/search/searchdata.js	/^  10: "_acdefghijlmpqrstvwxy",$/;"	p	class:indexSectionsWithContent
10	documentation/search/searchdata.js	/^  10: "defines",$/;"	p	class:indexSectionNames
11	documentation/search/searchdata.js	/^  11: "Pages"$/;"	p	class:indexSectionLabels
11	documentation/search/searchdata.js	/^  11: "ilv"$/;"	p	class:indexSectionsWithContent
11	documentation/search/searchdata.js	/^  11: "pages"$/;"	p	class:indexSectionNames
2	documentation/search/searchdata.js	/^  2: "Namespaces",$/;"	p	class:indexSectionLabels
2	documentation/search/searchdata.js	/^  2: "ac",$/;"	p	class:indexSectionsWithContent
2	documentation/search/searchdata.js	/^  2: "namespaces",$/;"	p	class:indexSectionNames
3	documentation/search/searchdata.js	/^  3: "0abcdefghijlmnopqrstuvwz",$/;"	p	class:indexSectionsWithContent
3	documentation/search/searchdata.js	/^  3: "Files",$/;"	p	class:indexSectionLabels
3	documentation/search/searchdata.js	/^  3: "files",$/;"	p	class:indexSectionNames
4	documentation/search/searchdata.js	/^  4: "Functions",$/;"	p	class:indexSectionLabels
4	documentation/search/searchdata.js	/^  4: "abcdefghijklmnopqrstuvwxyz~",$/;"	p	class:indexSectionsWithContent
4	documentation/search/searchdata.js	/^  4: "functions",$/;"	p	class:indexSectionNames
5	documentation/search/searchdata.js	/^  5: "Variables",$/;"	p	class:indexSectionLabels
5	documentation/search/searchdata.js	/^  5: "_abcdefghijklmnopqrstuvwxyz",$/;"	p	class:indexSectionsWithContent
5	documentation/search/searchdata.js	/^  5: "variables",$/;"	p	class:indexSectionNames
6	documentation/search/searchdata.js	/^  6: "Typedefs",$/;"	p	class:indexSectionLabels
6	documentation/search/searchdata.js	/^  6: "_abcdefghiklmnpqrstuvw",$/;"	p	class:indexSectionsWithContent
6	documentation/search/searchdata.js	/^  6: "typedefs",$/;"	p	class:indexSectionNames
7	documentation/search/searchdata.js	/^  7: "Enumerations",$/;"	p	class:indexSectionLabels
7	documentation/search/searchdata.js	/^  7: "abcdefghilmnoprstw",$/;"	p	class:indexSectionsWithContent
7	documentation/search/searchdata.js	/^  7: "enums",$/;"	p	class:indexSectionNames
8	documentation/search/searchdata.js	/^  8: "Enumerator",$/;"	p	class:indexSectionLabels
8	documentation/search/searchdata.js	/^  8: "abcdefghijlmnopqrstuvwy",$/;"	p	class:indexSectionsWithContent
8	documentation/search/searchdata.js	/^  8: "enumvalues",$/;"	p	class:indexSectionNames
9	documentation/search/searchdata.js	/^  9: "Friends",$/;"	p	class:indexSectionLabels
9	documentation/search/searchdata.js	/^  9: "gorst",$/;"	p	class:indexSectionsWithContent
9	documentation/search/searchdata.js	/^  9: "related",$/;"	p	class:indexSectionNames
A	arm_compute/core/Types.h	/^    A,       \/**< Alpha channel. *\/$/;"	m	class:arm_compute::Channel
A11	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    float A11;     \/**< iA11 * FLT_SCALE *\/$/;"	m	struct:arm_compute::CLCoefficientTable
A12	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    float A12;     \/**< iA11 * FLT_SCALE *\/$/;"	m	struct:arm_compute::CLCoefficientTable
A22	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    float A22;     \/**< iA11 * FLT_SCALE *\/$/;"	m	struct:arm_compute::CLCoefficientTable
A53	arm_compute/core/CPP/CPPTypes.h	/^    A53,$/;"	m	class:arm_compute::CPUModel
A55r0	arm_compute/core/CPP/CPPTypes.h	/^    A55r0,$/;"	m	class:arm_compute::CPUModel
A55r1	arm_compute/core/CPP/CPPTypes.h	/^    A55r1,$/;"	m	class:arm_compute::CPUModel
ABS	arm_compute/core/Types.h	/^        ABS,             \/**< Absolute ( \\f$ f(x)= |x| \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
ABSQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	111;"	d
ABS_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	34;"	d
ABS_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	121;"	d
ABS_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	120;"	d
ACCUM_PROCESS_4X	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.cpp	61;"	d	file:
ACTIVATION_FUNC	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	40;"	d	file:
ACTIVATION_FUNC	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	42;"	d	file:
ACTIVATION_FUNC	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	44;"	d	file:
ACTIVATION_FUNC	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	46;"	d	file:
ACTIVE	tests/framework/TestCaseFactory.h	/^        ACTIVE,$/;"	m	class:arm_compute::test::framework::TestCaseFactory::Status
ADD	arm_compute/graph/Types.h	/^    ADD, \/**< Arithmetic addition *\/$/;"	m	class:arm_compute::graph::EltwiseOperation
ADD	src/core/GLES_COMPUTE/cs_shaders/arithmetic_add.cs	30;"	d	file:
ADD	tests/Types.h	/^    ADD,       \/**< Addition *\/$/;"	m	class:arm_compute::FixedPointOp
ADDQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	155;"	d
ADD_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	35;"	d
ADD_OP	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	33;"	d	file:
ADD_OP	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	35;"	d	file:
ADD_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	178;"	d
ADD_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	177;"	d
ALL	tests/framework/DatasetModes.h	/^    ALL       = ~0U,$/;"	m	class:arm_compute::test::framework::DatasetMode
ALL	tests/framework/Exceptions.h	/^    ALL,$/;"	m	class:arm_compute::test::framework::LogLevel
ALL	tests/framework/instruments/Instruments.h	/^    ALL                     = ~0U,$/;"	m	class:arm_compute::test::framework::InstrumentType
ALLOCATE	arm_compute/core/NEON/kernels/convolution/common/alloc.hpp	28;"	d
ALLOCATE	arm_compute/core/NEON/kernels/convolution/common/alloc.hpp	30;"	d
ALLOC_ROUND	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	44;"	d
AREA	arm_compute/core/Types.h	/^    AREA,             \/**< Output values are determined by averaging the source pixels whose areas fall under the area of the destination pixel, projected onto the source image *\/$/;"	m	class:arm_compute::InterpolationPolicy
ARM_COMPUTE_ASSERT	tests/framework/Asserts.h	110;"	d
ARM_COMPUTE_ASSERT_EQUAL	tests/framework/Asserts.h	101;"	d
ARM_COMPUTE_ASSERT_FAIL	tests/framework/Asserts.h	138;"	d
ARM_COMPUTE_ASSERT_NOT_EQUAL	tests/framework/Asserts.h	98;"	d
ARM_COMPUTE_CONST_ON_ERROR	arm_compute/core/Error.h	316;"	d
ARM_COMPUTE_CREATE_DEFAULT_CORE_LOGGER	arm_compute/core/Log.h	33;"	d
ARM_COMPUTE_CREATE_DEFAULT_GRAPH_LOGGER	arm_compute/graph/Logger.h	33;"	d
ARM_COMPUTE_CREATE_ERROR	arm_compute/core/Error.h	166;"	d
ARM_COMPUTE_CREATE_ERROR_LOC	arm_compute/core/Error.h	176;"	d
ARM_COMPUTE_ERROR	arm_compute/core/Error.h	260;"	d
ARM_COMPUTE_ERROR_LOC	arm_compute/core/Error.h	269;"	d
ARM_COMPUTE_ERROR_ON	arm_compute/core/Error.h	328;"	d
ARM_COMPUTE_ERROR_ON_CHANNEL_NOT_IN	arm_compute/core/Validate.h	848;"	d
ARM_COMPUTE_ERROR_ON_CHANNEL_NOT_IN_KNOWN_FORMAT	arm_compute/core/Validate.h	865;"	d
ARM_COMPUTE_ERROR_ON_COORDINATES_DIMENSIONS_GTE	arm_compute/core/Validate.h	244;"	d
ARM_COMPUTE_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN	arm_compute/core/Validate.h	802;"	d
ARM_COMPUTE_ERROR_ON_DATA_TYPE_NOT_IN	arm_compute/core/Validate.h	756;"	d
ARM_COMPUTE_ERROR_ON_FORMAT_NOT_IN	arm_compute/core/Validate.h	707;"	d
ARM_COMPUTE_ERROR_ON_INVALID_MULTI_HOG	arm_compute/core/Validate.h	887;"	d
ARM_COMPUTE_ERROR_ON_INVALID_SUBTENSOR	arm_compute/core/Validate.h	921;"	d
ARM_COMPUTE_ERROR_ON_INVALID_SUBTENSOR_VALID_REGION	arm_compute/core/Validate.h	938;"	d
ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW	arm_compute/core/Validate.h	205;"	d
ARM_COMPUTE_ERROR_ON_LOC	arm_compute/core/Error.h	338;"	d
ARM_COMPUTE_ERROR_ON_LOC_MSG	arm_compute/core/Error.h	301;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_LAYOUT	arm_compute/core/Validate.h	492;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_DATA_TYPES	arm_compute/core/Validate.h	543;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_DIMENSIONS	arm_compute/core/Validate.h	286;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_FIXED_POINT	arm_compute/core/Validate.h	608;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_FIXED_POINT_POSITION	arm_compute/core/Validate.h	985;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_QUANTIZATION_INFO	arm_compute/core/Validate.h	673;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_SHAPES	arm_compute/core/Validate.h	441;"	d
ARM_COMPUTE_ERROR_ON_MISMATCHING_WINDOWS	arm_compute/core/Validate.h	183;"	d
ARM_COMPUTE_ERROR_ON_MSG	arm_compute/core/Error.h	284;"	d
ARM_COMPUTE_ERROR_ON_NULLPTR	arm_compute/core/Validate.h	161;"	d
ARM_COMPUTE_ERROR_ON_TENSORS_NOT_EVEN	arm_compute/core/Validate.h	318;"	d
ARM_COMPUTE_ERROR_ON_TENSORS_NOT_SUBSAMPLED	arm_compute/core/Validate.h	351;"	d
ARM_COMPUTE_ERROR_ON_TENSOR_NOT_2D	arm_compute/core/Validate.h	818;"	d
ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL	arm_compute/core/Validate.h	903;"	d
ARM_COMPUTE_ERROR_ON_VALUE_NOT_REPRESENTABLE_IN_FIXED_POINT	arm_compute/core/Validate.h	1029;"	d
ARM_COMPUTE_ERROR_ON_WINDOW_DIMENSIONS_GTE	arm_compute/core/Validate.h	263;"	d
ARM_COMPUTE_ERROR_ON_WINDOW_NOT_COLLAPSABLE_AT_DIMENSION	arm_compute/core/Validate.h	225;"	d
ARM_COMPUTE_ERROR_THROW_ON	arm_compute/core/Error.h	276;"	d
ARM_COMPUTE_EXPECT	tests/framework/Asserts.h	124;"	d
ARM_COMPUTE_EXPECT_EQUAL	tests/framework/Asserts.h	104;"	d
ARM_COMPUTE_EXPECT_FAIL	tests/framework/Asserts.h	148;"	d
ARM_COMPUTE_EXPECT_NOT_EQUAL	tests/framework/Asserts.h	107;"	d
ARM_COMPUTE_FIXED_POINT_H	src/core/CL/cl_kernels/fixed_point.h	25;"	d
ARM_COMPUTE_GL_CHECK	arm_compute/core/GLES_COMPUTE/OpenGLES.h	37;"	d
ARM_COMPUTE_GL_CHECK	arm_compute/core/GLES_COMPUTE/OpenGLES.h	45;"	d
ARM_COMPUTE_GRAPH_BACKEND_REGISTRAR_H__	arm_compute/graph/backends/BackendRegistrar.h	25;"	d
ARM_COMPUTE_HELPERS_ASYMM_H	src/core/CL/cl_kernels/helpers_asymm.h	25;"	d
ARM_COMPUTE_HELPER_CS_H	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	26;"	d
ARM_COMPUTE_HELPER_H	src/core/CL/cl_kernels/helpers.h	25;"	d
ARM_COMPUTE_HOG_MULTI_DETECTION_DATASET	tests/datasets/HOGMultiDetectionDataset.h	25;"	d
ARM_COMPUTE_LOG_GRAPH	arm_compute/graph/Logger.h	42;"	d
ARM_COMPUTE_LOG_GRAPH_ERROR	arm_compute/graph/Logger.h	58;"	d
ARM_COMPUTE_LOG_GRAPH_INFO	arm_compute/graph/Logger.h	50;"	d
ARM_COMPUTE_LOG_GRAPH_VERBOSE	arm_compute/graph/Logger.h	46;"	d
ARM_COMPUTE_LOG_GRAPH_WARNING	arm_compute/graph/Logger.h	54;"	d
ARM_COMPUTE_LOG_INFO_MSG_CORE	arm_compute/core/Log.h	83;"	d
ARM_COMPUTE_LOG_INFO_MSG_WITH_FORMAT_CORE	arm_compute/core/Log.h	95;"	d
ARM_COMPUTE_LOG_INFO_STREAM_CORE	arm_compute/core/Log.h	106;"	d
ARM_COMPUTE_LOG_MSG	arm_compute/core/utils/logging/Macros.h	33;"	d
ARM_COMPUTE_LOG_MSG	arm_compute/core/utils/logging/Macros.h	67;"	d
ARM_COMPUTE_LOG_MSG_CORE	arm_compute/core/Log.h	47;"	d
ARM_COMPUTE_LOG_MSG_WITH_FORMAT	arm_compute/core/utils/logging/Macros.h	43;"	d
ARM_COMPUTE_LOG_MSG_WITH_FORMAT	arm_compute/core/utils/logging/Macros.h	68;"	d
ARM_COMPUTE_LOG_MSG_WITH_FORMAT_CORE	arm_compute/core/Log.h	60;"	d
ARM_COMPUTE_LOG_STREAM	arm_compute/core/utils/logging/Macros.h	53;"	d
ARM_COMPUTE_LOG_STREAM	arm_compute/core/utils/logging/Macros.h	69;"	d
ARM_COMPUTE_LOG_STREAM_CORE	arm_compute/core/Log.h	72;"	d
ARM_COMPUTE_PRINT_INFO	tests/framework/Asserts.h	/^inline void ARM_COMPUTE_PRINT_INFO()$/;"	f	namespace:arm_compute::test::framework
ARM_COMPUTE_RETURN_ERROR_MSG	arm_compute/core/Error.h	182;"	d
ARM_COMPUTE_RETURN_ERROR_ON	arm_compute/core/Error.h	243;"	d
ARM_COMPUTE_RETURN_ERROR_ON_CHANNEL_NOT_IN	arm_compute/core/Validate.h	850;"	d
ARM_COMPUTE_RETURN_ERROR_ON_CHANNEL_NOT_IN_KNOWN_FORMAT	arm_compute/core/Validate.h	867;"	d
ARM_COMPUTE_RETURN_ERROR_ON_COORDINATES_DIMENSIONS_GTE	arm_compute/core/Validate.h	246;"	d
ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN	arm_compute/core/Validate.h	804;"	d
ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN	arm_compute/core/Validate.h	758;"	d
ARM_COMPUTE_RETURN_ERROR_ON_INVALID_MULTI_HOG	arm_compute/core/Validate.h	889;"	d
ARM_COMPUTE_RETURN_ERROR_ON_INVALID_SUBTENSOR	arm_compute/core/Validate.h	923;"	d
ARM_COMPUTE_RETURN_ERROR_ON_INVALID_SUBTENSOR_VALID_REGION	arm_compute/core/Validate.h	940;"	d
ARM_COMPUTE_RETURN_ERROR_ON_INVALID_SUBWINDOW	arm_compute/core/Validate.h	207;"	d
ARM_COMPUTE_RETURN_ERROR_ON_LOC	arm_compute/core/Error.h	253;"	d
ARM_COMPUTE_RETURN_ERROR_ON_LOC_MSG	arm_compute/core/Error.h	230;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_LAYOUT	arm_compute/core/Validate.h	494;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES	arm_compute/core/Validate.h	545;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS	arm_compute/core/Validate.h	288;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_FIXED_POINT	arm_compute/core/Validate.h	610;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_FIXED_POINT_POSITION	arm_compute/core/Validate.h	987;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_QUANTIZATION_INFO	arm_compute/core/Validate.h	675;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_SHAPES	arm_compute/core/Validate.h	443;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_WINDOWS	arm_compute/core/Validate.h	185;"	d
ARM_COMPUTE_RETURN_ERROR_ON_MSG	arm_compute/core/Error.h	213;"	d
ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR	arm_compute/core/Validate.h	163;"	d
ARM_COMPUTE_RETURN_ERROR_ON_TENSORS_NOT_EVEN	arm_compute/core/Validate.h	320;"	d
ARM_COMPUTE_RETURN_ERROR_ON_TENSORS_NOT_SUBSAMPLED	arm_compute/core/Validate.h	353;"	d
ARM_COMPUTE_RETURN_ERROR_ON_TENSOR_NOT_2D	arm_compute/core/Validate.h	820;"	d
ARM_COMPUTE_RETURN_ERROR_ON_UNCONFIGURED_KERNEL	arm_compute/core/Validate.h	905;"	d
ARM_COMPUTE_RETURN_ERROR_ON_VALUE_NOT_REPRESENTABLE_IN_FIXED_POINT	arm_compute/core/Validate.h	1031;"	d
ARM_COMPUTE_RETURN_ERROR_ON_WINDOW_DIMENSIONS_GTE	arm_compute/core/Validate.h	265;"	d
ARM_COMPUTE_RETURN_ERROR_ON_WINDOW_NOT_COLLAPSABLE_AT_DIMENSION	arm_compute/core/Validate.h	227;"	d
ARM_COMPUTE_RETURN_ON_ERROR	arm_compute/core/Error.h	192;"	d
ARM_COMPUTE_TEST_ABSOLUTE_DIFFERENCE_FIXTURE	tests/validation/fixtures/AbsoluteDifferenceFixture.h	25;"	d
ARM_COMPUTE_TEST_ACCUMULATE_FIXTURE	tests/validation/fixtures/AccumulateFixture.h	25;"	d
ARM_COMPUTE_TEST_ACTIVATIONLAYERFIXTURE	tests/benchmark/fixtures/ActivationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_ACTIVATION_LAYER_FIXTURE	tests/validation/fixtures/ActivationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_ALEXNETFIXTURE	tests/benchmark/fixtures/AlexNetFixture.h	25;"	d
ARM_COMPUTE_TEST_ALEXNET_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/alexnet/AlexNetActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_ALEXNET_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_ALEXNET_FULLYCONNECTED_LAYER_DATASET	tests/datasets/system_tests/alexnet/AlexNetFullyConnectedLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_ALEXNET_GEMM_DATASET	tests/datasets/AlexNetGEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_ALEXNET_NORMALIZATION_LAYER_DATASET	tests/datasets/system_tests/alexnet/AlexNetNormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_ALEXNET_POOLING_LAYER_DATASET	tests/datasets/system_tests/alexnet/AlexNetPoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_ARITHMETIC_ADDITION_FIXTURE	tests/validation/fixtures/ArithmeticAdditionFixture.h	25;"	d
ARM_COMPUTE_TEST_ARITHMETIC_SUBTRACTION_FIXTURE	tests/validation/fixtures/ArithmeticSubtractionFixture.h	25;"	d
ARM_COMPUTE_TEST_BATCHNORMALIZATIONLAYERFIXTURE	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_BATCHNORMALIZATION_LAYER_DATASET	tests/datasets/BatchNormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_BATCH_NORMALIZATION_LAYER_FIXTURE	tests/validation/fixtures/BatchNormalizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_BITWISE_AND_FIXTURE	tests/validation/fixtures/BitwiseAndFixture.h	25;"	d
ARM_COMPUTE_TEST_BITWISE_NOT_FIXTURE	tests/validation/fixtures/BitwiseNotFixture.h	25;"	d
ARM_COMPUTE_TEST_BITWISE_OR_FIXTURE	tests/validation/fixtures/BitwiseOrFixture.h	25;"	d
ARM_COMPUTE_TEST_BITWISE_XOR_FIXTURE	tests/validation/fixtures/BitwiseXorFixture.h	25;"	d
ARM_COMPUTE_TEST_BOX3X3_FIXTURE	tests/validation/fixtures/Box3x3Fixture.h	25;"	d
ARM_COMPUTE_TEST_CHANNEL_COMBINE_FIXTURE	tests/validation/fixtures/ChannelCombineFixture.h	25;"	d
ARM_COMPUTE_TEST_CHANNEL_EXTRACT_FIXTURE	tests/validation/fixtures/ChannelExtractFixture.h	25;"	d
ARM_COMPUTE_TEST_CHANNEL_SHUFFLE_FIXTURE	tests/validation/fixtures/ChannelShuffleLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_CHANNEL_SHUFFLE_LAYER_DATASET	tests/datasets/ChannelShuffleLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_COMMANDLINEOPTIONS	tests/framework/command_line/CommandLineOptions.h	25;"	d
ARM_COMPUTE_TEST_COMMANDLINEPARSER	tests/framework/command_line/CommandLineParser.h	25;"	d
ARM_COMPUTE_TEST_COMMONOPTIONS	tests/framework/command_line/CommonOptions.h	25;"	d
ARM_COMPUTE_TEST_COMP_FACTORY	tests/framework/Asserts.h	74;"	d
ARM_COMPUTE_TEST_CONVERT_FULLY_CONNECTED_WEIGHTS_FIXTURE	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	25;"	d
ARM_COMPUTE_TEST_CONVOLUTIONLAYERFIXTURE	tests/benchmark/fixtures/ConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_CONVOLUTION_FIXTURE	tests/validation/fixtures/ConvolutionFixture.h	25;"	d
ARM_COMPUTE_TEST_CONVOLUTION_LAYER_DATASET	tests/datasets/ConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_CONVOLUTION_LAYER_FIXTURE	tests/validation/fixtures/ConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_COPY_FIXTURE	tests/validation/fixtures/CopyFixture.h	25;"	d
ARM_COMPUTE_TEST_DATASET	tests/framework/datasets/Dataset.h	25;"	d
ARM_COMPUTE_TEST_DATASETS	tests/framework/datasets/Datasets.h	25;"	d
ARM_COMPUTE_TEST_DATASET_CARTESIAN_PRODUCT	tests/framework/datasets/CartesianProductDataset.h	25;"	d
ARM_COMPUTE_TEST_DATASET_CONTAINER	tests/framework/datasets/ContainerDataset.h	25;"	d
ARM_COMPUTE_TEST_DATASET_JOIN	tests/framework/datasets/JoinDataset.h	25;"	d
ARM_COMPUTE_TEST_DATASET_LIST	tests/framework/datasets/InitializerListDataset.h	25;"	d
ARM_COMPUTE_TEST_DATASET_MODES	tests/framework/DatasetModes.h	25;"	d
ARM_COMPUTE_TEST_DATASET_RANGE	tests/framework/datasets/RangeDataset.h	25;"	d
ARM_COMPUTE_TEST_DATASET_SINGLETON	tests/framework/datasets/SingletonDataset.h	25;"	d
ARM_COMPUTE_TEST_DATASET_ZIP	tests/framework/datasets/ZipDataset.h	25;"	d
ARM_COMPUTE_TEST_DEPTHCONCATENATELAYERFIXTURE	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEPTHCONCATENATE_LAYER_FIXTURE	tests/validation/fixtures/DepthConcatenateLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEPTHWISECONVOLUTIONFIXTURE	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEPTHWISESEPARABLECONVOLUTIONLAYERFIXTURE	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEPTHWISE_CONVOLUTION_DATASET	tests/datasets/DepthwiseConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_DEPTHWISE_CONVOLUTION_FIXTURE	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEPTHWISE_SEPARABLE_CONVOLUTION_LAYER_DATASET	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_DEPTHWISE_SEPARABLE_CONVOLUTION_LAYER_FIXTURE	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEPTH_CONVERT_FIXTURE	tests/validation/fixtures/DepthConvertLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEQUANTIZATION_LAYER_FIXTURE	tests/benchmark/fixtures/DequantizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DEQUANTIZATION_LAYER_FIXTURE	tests/validation/fixtures/DequantizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DERIVATIVE_FIXTURE	tests/validation/fixtures/DerivativeFixture.h	25;"	d
ARM_COMPUTE_TEST_DILATED_CONVOLUTION_LAYER_DATASET	tests/datasets/DilatedConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_DILATE_FIXTURE	tests/validation/fixtures/DilateFixture.h	25;"	d
ARM_COMPUTE_TEST_DIRECTCONVOLUTIONLAYERFIXTURE	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_DIRECT_CONVOLUTION_LAYER_DATASET	tests/datasets/DirectConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_DROPOUT_LAYER_FIXTURE	tests/validation/fixtures/DropoutLayerFixture.h	26;"	d
ARM_COMPUTE_TEST_ENUMLISTOPTION	tests/framework/command_line/EnumListOption.h	25;"	d
ARM_COMPUTE_TEST_ENUMOPTION	tests/framework/command_line/EnumOption.h	25;"	d
ARM_COMPUTE_TEST_EQUALIZE_HISTOGRAM_FIXTURE	tests/benchmark/fixtures/EqualizeHistogramFixture.h	25;"	d
ARM_COMPUTE_TEST_EQUALIZE_HISTOGRAM_FIXTURE	tests/validation/fixtures/EqualizeHistogramFixture.h	25;"	d
ARM_COMPUTE_TEST_ERODE_FIXTURE	tests/validation/fixtures/ErodeFixture.h	25;"	d
ARM_COMPUTE_TEST_EXCEPTIONS	tests/framework/Exceptions.h	25;"	d
ARM_COMPUTE_TEST_FAST_CORNERS_FIXTURE	tests/validation/fixtures/FastCornersFixture.h	25;"	d
ARM_COMPUTE_TEST_FIXED_POINT_CL_TARGET	tests/validation/CL/FixedPoint/FixedPointTarget.h	25;"	d
ARM_COMPUTE_TEST_FIXED_POINT_FIXTURE	tests/validation/fixtures/FixedPointFixture.h	25;"	d
ARM_COMPUTE_TEST_FIXED_POINT_NEON_TARGET	tests/validation/NEON/FixedPoint/FixedPointTarget.h	25;"	d
ARM_COMPUTE_TEST_FIXED_POINT_PIXEL_WISE_MULTIPLICATION_FIXTURE	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	25;"	d
ARM_COMPUTE_TEST_FIXTURE	tests/framework/Fixture.h	25;"	d
ARM_COMPUTE_TEST_FLATTEN_LAYER_FIXTURE	tests/benchmark/fixtures/FlattenLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_FLATTEN_LAYER_FIXTURE	tests/validation/fixtures/FlattenLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_FLOORFIXTURE	tests/benchmark/fixtures/FloorFixture.h	25;"	d
ARM_COMPUTE_TEST_FLOORFIXTURE	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_FLOOR_FIXTURE	tests/validation/fixtures/FloorFixture.h	25;"	d
ARM_COMPUTE_TEST_FRAMEWORK	tests/framework/Framework.h	25;"	d
ARM_COMPUTE_TEST_FRAMEWORK_ASSERTS	tests/framework/Asserts.h	25;"	d
ARM_COMPUTE_TEST_FRAMEWORK_MACROS	tests/framework/Macros.h	25;"	d
ARM_COMPUTE_TEST_FRAMEWORK_REGISTRARS	tests/framework/Registrars.h	25;"	d
ARM_COMPUTE_TEST_FULLYCONNECTEDLAYERFIXTURE	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_FULLYCONNECTED_LAYER_DATASET	tests/datasets/FullyConnectedLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_FULLY_CONNECTED_LAYER_FIXTURE	tests/validation/fixtures/FullyConnectedLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_GAUSSIAN3X3_FIXTURE	tests/validation/fixtures/Gaussian3x3Fixture.h	25;"	d
ARM_COMPUTE_TEST_GAUSSIAN5X5_FIXTURE	tests/validation/fixtures/Gaussian5x5Fixture.h	25;"	d
ARM_COMPUTE_TEST_GAUSSIAN_PYRAMID_HALF_FIXTURE	tests/validation/fixtures/GaussianPyramidHalfFixture.h	25;"	d
ARM_COMPUTE_TEST_GEMMFIXTURE	tests/benchmark/fixtures/GEMMFixture.h	25;"	d
ARM_COMPUTE_TEST_GEMMLOWPFIXTURE	tests/benchmark/fixtures/GEMMLowpFixture.h	25;"	d
ARM_COMPUTE_TEST_GEMMLOWP_ASSEMBLY_FIXTURE	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	25;"	d
ARM_COMPUTE_TEST_GEMMLOWP_DATASET	tests/datasets/GEMMLowpDataset.h	25;"	d
ARM_COMPUTE_TEST_GEMMLOWP_FIXTURE	tests/validation/fixtures/GEMMLowpFixture.h	25;"	d
ARM_COMPUTE_TEST_GEMM_DATASET	tests/datasets/GEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_GEMM_FIXTURE	tests/validation/fixtures/GEMMFixture.h	25;"	d
ARM_COMPUTE_TEST_GEMM_INTERLEAVE4X4_FIXTURE	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	25;"	d
ARM_COMPUTE_TEST_GEMM_INTERLEAVE_4X4_FIXTURE	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	25;"	d
ARM_COMPUTE_TEST_GEMM_TRANSPOSE_1XW_FIXTURE	tests/validation/fixtures/GEMMTranspose1xWFixture.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV1_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV1_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV1_FULLYCONNECTED_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1FullyConnectedLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV1_GEMM_DATASET	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1GEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV1_NORMALIZATION_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1NormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV1_POOLING_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1PoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV4_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV4_BATCHNORMALIZATION_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4BatchNormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV4_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV4_FULLYCONNECTED_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4FullyConnectedLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV4_NORMALIZEPLANARYUV_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENETINCEPTIONV4_POOLING_LAYER_DATASET	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4PoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_GOOGLENET_GEMM_DATASET	tests/datasets/GoogleNetGEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_HARRIS_CORNERS_FIXTURE	tests/benchmark/fixtures/HarrisCornersFixture.h	25;"	d
ARM_COMPUTE_TEST_HARRIS_CORNERS_FIXTURE	tests/validation/fixtures/HarrisCornersFixture.h	25;"	d
ARM_COMPUTE_TEST_HISTOGRAM_FIXTURE	tests/benchmark/fixtures/HistogramFixture.h	25;"	d
ARM_COMPUTE_TEST_HISTOGRAM_FIXTURE	tests/validation/fixtures/HistogramFixture.h	25;"	d
ARM_COMPUTE_TEST_HOG_DESCRIPTOR_DATASET	tests/datasets/HOGDescriptorDataset.h	25;"	d
ARM_COMPUTE_TEST_HOG_DESCRIPTOR_FIXTURE	tests/benchmark/fixtures/HOGDescriptorFixture.h	25;"	d
ARM_COMPUTE_TEST_HOG_DESCRIPTOR_FIXTURE	tests/validation/fixtures/HOGDescriptorFixture.h	25;"	d
ARM_COMPUTE_TEST_HOG_DETECTOR_FIXTURE	tests/validation/fixtures/HOGDetectorFixture.h	25;"	d
ARM_COMPUTE_TEST_HOG_MULTI_DETECTION_FIXTURE	tests/validation/fixtures/HOGMultiDetectionFixture.h	25;"	d
ARM_COMPUTE_TEST_HWC	tests/framework/instruments/hwc.hpp	25;"	d
ARM_COMPUTE_TEST_HWC_NAMES	tests/framework/instruments/hwc_names.hpp	25;"	d
ARM_COMPUTE_TEST_IM2COL_FIXTURE	tests/validation/fixtures/Im2ColFixture.h	25;"	d
ARM_COMPUTE_TEST_IMAGE_FILE_DATASET	tests/datasets/ImageFileDatasets.h	25;"	d
ARM_COMPUTE_TEST_INFO	tests/framework/Asserts.h	65;"	d
ARM_COMPUTE_TEST_INSTRUMENT	tests/framework/instruments/Instrument.h	25;"	d
ARM_COMPUTE_TEST_INSTRUMENTS	tests/framework/instruments/Instruments.h	25;"	d
ARM_COMPUTE_TEST_INSTRUMENTSMAP	tests/framework/instruments/InstrumentsStats.h	25;"	d
ARM_COMPUTE_TEST_INTEGRAL_IMAGE_FIXTURE	tests/benchmark/fixtures/IntegralImageFixture.h	25;"	d
ARM_COMPUTE_TEST_INTEGRAL_IMAGE_FIXTURE	tests/validation/fixtures/IntegralImageFixture.h	25;"	d
ARM_COMPUTE_TEST_JSONPRINTER	tests/framework/printers/JSONPrinter.h	25;"	d
ARM_COMPUTE_TEST_L2NORMALIZE_FIXTURE	tests/validation/fixtures/L2NormalizeLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_LARGE_CONVOLUTION_LAYER_DATASET	tests/datasets/LargeConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_LARGE_GEMMLOWP_DATASET	tests/datasets/LargeGEMMLowpDataset.h	25;"	d
ARM_COMPUTE_TEST_LARGE_GEMM_DATASET	tests/datasets/LargeGEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_LENET5FIXTURE	tests/benchmark/fixtures/LeNet5Fixture.h	25;"	d
ARM_COMPUTE_TEST_LENET5_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/lenet5/LeNet5ActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_LENET5_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/lenet5/LeNet5ConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_LENET5_FULLYCONNECTED_LAYER_DATASET	tests/datasets/system_tests/lenet5/LeNet5FullyConnectedLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_LENET5_POOLING_LAYER_DATASET	tests/datasets/system_tests/lenet5/LeNet5PoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_LISTOPTION	tests/framework/command_line/ListOption.h	25;"	d
ARM_COMPUTE_TEST_LOCALLYCONNECTED_DATASET	tests/datasets/LocallyConnectedDataset.h	25;"	d
ARM_COMPUTE_TEST_LOCALLY_CONNECTED_FIXTURE	tests/validation/fixtures/LocallyConnectedFixture.h	25;"	d
ARM_COMPUTE_TEST_LSTM_LAYER_DATASET	tests/datasets/LSTMLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_LSTM_LAYER_FIXTURE	tests/validation/fixtures/LSTMLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_MAGNITUDE_FIXTURE	tests/benchmark/fixtures/MagnitudeFixture.h	25;"	d
ARM_COMPUTE_TEST_MAGNITUDE_FIXTURE	tests/validation/fixtures/MagnitudeFixture.h	25;"	d
ARM_COMPUTE_TEST_MALI_COUNTER	tests/framework/instruments/MaliCounter.h	25;"	d
ARM_COMPUTE_TEST_MATRIXMULTIPLY_GEMM_DATASET	tests/datasets/MatrixMultiplyGEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_MEAN_STD_DEV_FIXTURE	tests/benchmark/fixtures/MeanStdDevFixture.h	25;"	d
ARM_COMPUTE_TEST_MEAN_STD_DEV_FIXTURE	tests/validation/fixtures/MeanStdDevFixture.h	25;"	d
ARM_COMPUTE_TEST_MEASUREMENT	tests/framework/instruments/Measurement.h	25;"	d
ARM_COMPUTE_TEST_MEDIAN3X3_FIXTURE	tests/validation/fixtures/Median3x3Fixture.h	25;"	d
ARM_COMPUTE_TEST_MEDIAN3x3_FIXTURE	tests/benchmark/fixtures/Median3x3Fixture.h	25;"	d
ARM_COMPUTE_TEST_MIN_MAX_LOCATION_FIXTURE	tests/benchmark/fixtures/MinMaxLocationFixture.h	25;"	d
ARM_COMPUTE_TEST_MIN_MAX_LOCATION_FIXTURE	tests/validation/fixtures/MinMaxLocationFixture.h	25;"	d
ARM_COMPUTE_TEST_MOBILENETFIXTURE	tests/benchmark/fixtures/MobileNetFixture.h	25;"	d
ARM_COMPUTE_TEST_MOBILENETV1_FIXTURE	tests/benchmark/fixtures/MobileNetV1Fixture.h	25;"	d
ARM_COMPUTE_TEST_MOBILENET_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/mobilenet/MobileNetActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_MOBILENET_BATCHNORMALIZATION_LAYER_DATASET	tests/datasets/system_tests/mobilenet/MobileNetBatchNormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_MOBILENET_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/mobilenet/MobileNetConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_MOBILENET_DEPTHWISE_CONVOLUTION_DATASET	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_MOBILENET_DEPTHWISE_SEPARABLE_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseSeparableConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_NONLINEAR_FILTER_FIXTURE	tests/validation/fixtures/NonLinearFilterFixture.h	25;"	d
ARM_COMPUTE_TEST_NORMALIZATIONLAYERFIXTURE	tests/benchmark/fixtures/NormalizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_NORMALIZATION_LAYER_FIXTURE	tests/validation/fixtures/NormalizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_NORMALIZEPLANARYUVLAYERFIXTURE	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_NORMALIZE_PLANAR_YUV_LAYER_DATASET	tests/datasets/NormalizePlanarYUVLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_NORMALIZE_PLANAR_YUV_LAYER_FIXTURE	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_OPENCL_MEMORY_USAGE	tests/framework/instruments/OpenCLMemoryUsage.h	25;"	d
ARM_COMPUTE_TEST_OPENCL_TIMER	tests/framework/instruments/OpenCLTimer.h	25;"	d
ARM_COMPUTE_TEST_OPTICAL_FLOW	tests/validation/fixtures/OpticalFlowFixture.h	25;"	d
ARM_COMPUTE_TEST_OPTICAL_FLOW_DATASET	tests/datasets/OpticalFlowDataset.h	25;"	d
ARM_COMPUTE_TEST_OPTIONBASE	tests/framework/command_line/Option.h	25;"	d
ARM_COMPUTE_TEST_PERMUTE_FIXTURE	tests/validation/fixtures/PermuteFixture.h	25;"	d
ARM_COMPUTE_TEST_PHASE_FIXTURE	tests/benchmark/fixtures/PhaseFixture.h	25;"	d
ARM_COMPUTE_TEST_PHASE_FIXTURE	tests/validation/fixtures/PhaseFixture.h	25;"	d
ARM_COMPUTE_TEST_PIXEL_WISE_MULTIPLICATION_FIXTURE	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	25;"	d
ARM_COMPUTE_TEST_PMU	tests/framework/instruments/PMU.h	25;"	d
ARM_COMPUTE_TEST_PMU_COUNTER	tests/framework/instruments/PMUCounter.h	25;"	d
ARM_COMPUTE_TEST_POOLINGLAYERFIXTURE	tests/benchmark/fixtures/PoolingLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_POOLING_LAYER_DATASET	tests/datasets/PoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_POOLING_LAYER_FIXTURE	tests/validation/fixtures/PoolingLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_PRETTYPRINTER	tests/framework/printers/PrettyPrinter.h	25;"	d
ARM_COMPUTE_TEST_PRINTER	tests/framework/printers/Printer.h	25;"	d
ARM_COMPUTE_TEST_PRINTERS	tests/framework/printers/Printers.h	25;"	d
ARM_COMPUTE_TEST_PROFILER	tests/framework/Profiler.h	25;"	d
ARM_COMPUTE_TEST_QUANTIZATION_LAYER_FIXTURE	tests/benchmark/fixtures/QuantizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_QUANTIZATION_LAYER_FIXTURE	tests/validation/fixtures/QuantizationLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_RANDOM_BATCH_NORMALIZATION_LAYER_DATASET	tests/datasets/RandomBatchNormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_RANDOM_NORMALIZE_PLANAR_YUV_LAYER_DATASET	tests/datasets/RandomNormalizePlanarYUVLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_REDUCTION_OPERATION_FIXTURE	tests/validation/fixtures/ReductionOperationFixture.h	25;"	d
ARM_COMPUTE_TEST_REMAP_FIXTURE	tests/validation/fixtures/RemapFixture.h	25;"	d
ARM_COMPUTE_TEST_RESHAPEFIXTURE	tests/benchmark/fixtures/ReshapeLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_RESHAPE_LAYER_DATASET	tests/datasets/ReshapeLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_RESHAPE_LAYER_FIXTURE	tests/validation/fixtures/ReshapeLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_RNN_LAYER_DATASET	tests/datasets/RNNLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_RNN_LAYER_FIXTURE	tests/validation/fixtures/RNNLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_ROIPOOLINGLAYERFIXTURE	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_ROI_POOLING_LAYER_DATASET	tests/datasets/ROIPoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_SCALELAYERFIXTURE	tests/benchmark/fixtures/ScaleLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_SCALE_FIXTURE	tests/benchmark/fixtures/ScaleFixture.h	25;"	d
ARM_COMPUTE_TEST_SCALE_FIXTURE	tests/validation/fixtures/ScaleFixture.h	25;"	d
ARM_COMPUTE_TEST_SCALE_LAYER_DATASET	tests/datasets/ScaleLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_SCHARR_FIXTURE	tests/validation/fixtures/ScharrFixture.h	25;"	d
ARM_COMPUTE_TEST_SCHEDULER_TIMER	tests/framework/instruments/SchedulerTimer.h	25;"	d
ARM_COMPUTE_TEST_SIMPLEOPTION	tests/framework/command_line/SimpleOption.h	25;"	d
ARM_COMPUTE_TEST_SMALL_CONVOLUTION_LAYER_DATASET	tests/datasets/SmallConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_SMALL_GEMMLOWP_DATASET	tests/datasets/SmallGEMMLowpDataset.h	25;"	d
ARM_COMPUTE_TEST_SMALL_GEMM_DATASET	tests/datasets/SmallGEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_SOBEL_FIXTURE	tests/validation/fixtures/SobelFixture.h	25;"	d
ARM_COMPUTE_TEST_SOFTMAXLAYERFIXTURE	tests/benchmark/fixtures/SoftmaxLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_SOFTMAX_LAYER_FIXTURE	tests/validation/fixtures/SoftmaxLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_SQUEEZENET_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/squeezenet/SqueezeNetActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_SQUEEZENET_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_SQUEEZENET_POOLING_LAYER_DATASET	tests/datasets/system_tests/squeezenet/SqueezeNetPoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_TABLE_LOOKUP_FIXTURE	tests/validation/fixtures/TableLookupFixture.h	25;"	d
ARM_COMPUTE_TEST_TESTCASE	tests/framework/TestCase.h	25;"	d
ARM_COMPUTE_TEST_TESTFILTER	tests/framework/TestFilter.h	25;"	d
ARM_COMPUTE_TEST_TESTRESULT	tests/framework/TestResult.h	25;"	d
ARM_COMPUTE_TEST_TEST_CASE_FACTORY	tests/framework/TestCaseFactory.h	25;"	d
ARM_COMPUTE_TEST_THRESHOLD_DATASET	tests/datasets/ThresholdDataset.h	25;"	d
ARM_COMPUTE_TEST_THRESHOLD_FIXTURE	tests/validation/fixtures/ThresholdFixture.h	25;"	d
ARM_COMPUTE_TEST_TINY_CONVOLUTION_LAYER_DATASET	tests/datasets/TinyConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_TINY_GEMM_DATASET	tests/datasets/TinyGEMMDataset.h	25;"	d
ARM_COMPUTE_TEST_TOGGLEOPTION	tests/framework/command_line/ToggleOption.h	25;"	d
ARM_COMPUTE_TEST_TOOLCHAINSUPPORT	support/ToolchainSupport.h	25;"	d
ARM_COMPUTE_TEST_TRANSPOSEFIXTURE	tests/benchmark/fixtures/TransposeFixture.h	25;"	d
ARM_COMPUTE_TEST_TRANSPOSE_FIXTURE	tests/validation/fixtures/TransposeFixture.h	25;"	d
ARM_COMPUTE_TEST_UNIT_MEMORY_MANAGER	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	25;"	d
ARM_COMPUTE_TEST_UTILS	tests/framework/Utils.h	25;"	d
ARM_COMPUTE_TEST_VGG16_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/vgg/vgg16/VGG16ActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_VGG16_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_VGG16_FULLYCONNECTED_LAYER_DATASET	tests/datasets/system_tests/vgg/vgg16/VGG16FullyConnectedLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_VGG16_POOLING_LAYER_DATASET	tests/datasets/system_tests/vgg/vgg16/VGG16PoolingLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_WALL_CLOCK_TIMER	tests/framework/instruments/WallClockTimer.h	25;"	d
ARM_COMPUTE_TEST_WARP_AFFINE_FIXTURE	tests/validation/fixtures/WarpAffineFixture.h	25;"	d
ARM_COMPUTE_TEST_WARP_PERSPECTIVE_FIXTURE	tests/validation/fixtures/WarpPerspectiveFixture.h	25;"	d
ARM_COMPUTE_TEST_WIDTHCONCATENATE_LAYER_FIXTURE	tests/validation/fixtures/WidthConcatenateLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_WINOGRAD_CONVOLUTION_LAYER_FIXTURE	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_WINOGRAD_INPUT_TRANSFORM_DATASET	tests/datasets/WinogradInputTransformDataset.h	25;"	d
ARM_COMPUTE_TEST_WINOGRAD_LAYER_FIXTURE	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	25;"	d
ARM_COMPUTE_TEST_WINOGRAD_OUTPUT_TRANSFORM_DATASET	tests/datasets/WinogradOutputTransformDataset.h	25;"	d
ARM_COMPUTE_TEST_YOLOV2_ACTIVATION_LAYER_DATASET	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_YOLOV2_BATCHNORMALIZATION_LAYER_DATASET	tests/datasets/system_tests/yolo/v2/YOLOV2BatchNormalizationLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_YOLOV2_CONVOLUTION_LAYER_DATASET	tests/datasets/system_tests/yolo/v2/YOLOV2ConvolutionLayerDataset.h	25;"	d
ARM_COMPUTE_TEST_YOLOV2_POOLING_LAYER_DATASET	tests/datasets/system_tests/yolo/v2/YOLOV2PoolingLayerDataset.h	25;"	d
ARM_COMPUTE_THROW_ON_ERROR	arm_compute/core/Error.h	205;"	d
ARM_COMPUTE_TYPES_H	src/core/CL/cl_kernels/types.h	25;"	d
ARM_COMPUTE_UNUSED	arm_compute/core/Error.h	159;"	d
ASM_PREFETCH	src/core/NEON/kernels/arm_gemm/asmlib.hpp	34;"	d
ASM_PREFETCH	src/core/NEON/kernels/arm_gemm/asmlib.hpp	47;"	d
ASM_PREFETCHL2	src/core/NEON/kernels/arm_gemm/asmlib.hpp	35;"	d
ASM_PREFETCHW	src/core/NEON/kernels/arm_gemm/asmlib.hpp	36;"	d
ASM_PREFETCHW	src/core/NEON/kernels/arm_gemm/asmlib.hpp	48;"	d
ASM_PREFETCHWL2	src/core/NEON/kernels/arm_gemm/asmlib.hpp	37;"	d
ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL	src/core/CL/cl_kernels/helpers_asymm.h	299;"	d
ASYMM_EXP_ON_INTERVAL_BETWEEN_NEGATIVE_ONE_QUARTER_AND_0_EXCL_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	77;"	d
ASYMM_EXP_ON_NEGATIVE_VALUES	src/core/CL/cl_kernels/helpers_asymm.h	304;"	d
ASYMM_EXP_ON_NEGATIVE_VALUES_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	164;"	d
ASYMM_MASK_IF_NON_ZERO	src/core/CL/cl_kernels/helpers_asymm.h	302;"	d
ASYMM_MASK_IF_NON_ZERO_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	136;"	d
ASYMM_MASK_IF_ZERO	src/core/CL/cl_kernels/helpers_asymm.h	301;"	d
ASYMM_MASK_IF_ZERO_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	121;"	d
ASYMM_MULT	src/core/CL/cl_kernels/helpers_asymm.h	296;"	d
ASYMM_MULT_BY_QUANT_MULTIPLIER_LESS_THAN_ONE	src/core/CL/cl_kernels/helpers_asymm.h	297;"	d
ASYMM_MULT_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	54;"	d
ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1	src/core/CL/cl_kernels/helpers_asymm.h	305;"	d
ASYMM_ONE_OVER_ONE_PLUS_X_FOR_X_IN_0_1_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	258;"	d
ASYMM_RESCALE	src/core/CL/cl_kernels/helpers_asymm.h	308;"	d
ASYMM_RESCALE_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	288;"	d
ASYMM_ROUNDING_DIVIDE_BY_POW2	src/core/CL/cl_kernels/helpers_asymm.h	295;"	d
ASYMM_ROUNDING_DIVIDE_BY_POW2_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	35;"	d
ASYMM_ROUNDING_HALF_SUM	src/core/CL/cl_kernels/helpers_asymm.h	307;"	d
ASYMM_ROUNDING_HALF_SUM_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	236;"	d
ASYMM_SATURATING_ROUNDING_MULT_BY_POW2	src/core/CL/cl_kernels/helpers_asymm.h	306;"	d
ASYMM_SATURATING_ROUNDING_MULT_BY_POW2_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	207;"	d
ASYMM_SELECT_USING_MASK	src/core/CL/cl_kernels/helpers_asymm.h	300;"	d
ASYMM_SELECT_USING_MASK_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	108;"	d
AVG	arm_compute/core/Types.h	/^    AVG, \/**< Average Pooling *\/$/;"	m	class:arm_compute::HOGNormType::PoolingType
A_block	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int A_block      = 1;$/;"	m	class:arm_gemm::sgemm_8x6
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int A_block      = 1;$/;"	m	class:arm_gemm::gemm_s16_12x8
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int  A_block      = 4;$/;"	m	class:arm_gemm::gemm_s8_12x8
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int  A_block      = 16;$/;"	m	class:arm_gemm::gemm_s8_4x4
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int A_block      = 1;$/;"	m	class:arm_gemm::gemm_u16_12x8
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int  A_block      = 4;$/;"	m	class:arm_gemm::gemm_u8_12x8
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int  A_block      = 16;$/;"	m	class:arm_gemm::gemm_u8_4x4
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int  A_block      = 1;$/;"	m	class:arm_gemm::hgemm_24x8
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int A_block      = 1;$/;"	m	class:arm_gemm::sgemm_12x8
A_block	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    static const int  A_block      = 1;$/;"	m	class:arm_gemm::sgemv_pretransposed
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int A_interleave = 6;$/;"	m	class:arm_gemm::sgemm_8x6
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int A_interleave = 8;$/;"	m	class:arm_gemm::gemm_s16_12x8
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int  A_interleave = 8;$/;"	m	class:arm_gemm::gemm_s8_12x8
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int  A_interleave = 4;$/;"	m	class:arm_gemm::gemm_s8_4x4
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int A_interleave = 8;$/;"	m	class:arm_gemm::gemm_u16_12x8
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int  A_interleave = 8;$/;"	m	class:arm_gemm::gemm_u8_12x8
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int  A_interleave = 4;$/;"	m	class:arm_gemm::gemm_u8_4x4
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int  A_interleave = 8;$/;"	m	class:arm_gemm::hgemm_24x8
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int A_interleave = 8;$/;"	m	class:arm_gemm::sgemm_12x8
A_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    static const int  A_interleave = 32;$/;"	m	class:arm_gemm::sgemv_pretransposed
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int A_transpose  = 0;$/;"	m	class:arm_gemm::sgemm_8x6
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int A_transpose  = 0;$/;"	m	class:arm_gemm::gemm_s16_12x8
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const bool A_transpose  = false;$/;"	m	class:arm_gemm::gemm_s8_12x8
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const bool A_transpose  = false;$/;"	m	class:arm_gemm::gemm_s8_4x4
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int A_transpose  = 0;$/;"	m	class:arm_gemm::gemm_u16_12x8
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const bool A_transpose  = false;$/;"	m	class:arm_gemm::gemm_u8_12x8
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const bool A_transpose  = false;$/;"	m	class:arm_gemm::gemm_u8_4x4
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const bool A_transpose  = false;$/;"	m	class:arm_gemm::hgemm_24x8
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int A_transpose  = 0;$/;"	m	class:arm_gemm::sgemm_12x8
A_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    static const bool A_transpose  = false;$/;"	m	class:arm_gemm::sgemv_pretransposed
AbsoluteDifferenceS16Dataset	tests/validation/CL/AbsoluteDifference.cpp	/^const auto AbsoluteDifferenceS16Dataset = combine(combine(framework::dataset::make("DataType", { DataType::U8, DataType::S16 }), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon397	file:
AbsoluteDifferenceS16Dataset	tests/validation/NEON/AbsoluteDifference.cpp	/^const auto AbsoluteDifferenceS16Dataset = combine(combine(framework::dataset::make("DataType", { DataType::U8, DataType::S16 }), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon470	file:
AbsoluteDifferenceU8Dataset	tests/validation/CL/AbsoluteDifference.cpp	/^const auto AbsoluteDifferenceU8Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)), framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon397	file:
AbsoluteDifferenceU8Dataset	tests/validation/NEON/AbsoluteDifference.cpp	/^const auto AbsoluteDifferenceU8Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)), framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon470	file:
AbsoluteDifferenceValidationFixture	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^class AbsoluteDifferenceValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
AbsoluteTolerance	tests/validation/Validation.h	/^    explicit constexpr AbsoluteTolerance(T value)$/;"	f	class:arm_compute::test::validation::AbsoluteTolerance
AbsoluteTolerance	tests/validation/Validation.h	/^class AbsoluteTolerance$/;"	c	namespace:arm_compute::test::validation
AccessWindowAutoPadding	arm_compute/core/AccessWindowAutoPadding.h	/^class AccessWindowAutoPadding : public IAccessWindow$/;"	c	namespace:arm_compute
AccessWindowAutoPadding	src/core/AccessWindowAutoPadding.cpp	/^AccessWindowAutoPadding::AccessWindowAutoPadding(ITensorInfo *info)$/;"	f	class:AccessWindowAutoPadding
AccessWindowHorizontal	arm_compute/core/IAccessWindow.h	/^    AccessWindowHorizontal(ITensorInfo *info, int x, int width, float scale_x = 1.f)$/;"	f	class:arm_compute::AccessWindowHorizontal
AccessWindowHorizontal	arm_compute/core/IAccessWindow.h	/^class AccessWindowHorizontal : public AccessWindowRectangle$/;"	c	namespace:arm_compute
AccessWindowRectangle	arm_compute/core/IAccessWindow.h	/^    AccessWindowRectangle(ITensorInfo *info, int x, int y, int width, int height)$/;"	f	class:arm_compute::AccessWindowRectangle
AccessWindowRectangle	arm_compute/core/IAccessWindow.h	/^    AccessWindowRectangle(ITensorInfo *info, int x, int y, int width, int height, float scale_x, float scale_y)$/;"	f	class:arm_compute::AccessWindowRectangle
AccessWindowRectangle	arm_compute/core/IAccessWindow.h	/^class AccessWindowRectangle : public IAccessWindow$/;"	c	namespace:arm_compute
AccessWindowStatic	arm_compute/core/AccessWindowStatic.h	/^class AccessWindowStatic : public IAccessWindow$/;"	c	namespace:arm_compute
AccessWindowStatic	src/core/AccessWindowStatic.cpp	/^AccessWindowStatic::AccessWindowStatic(ITensorInfo *info, int start_x, int start_y, int end_x, int end_y)$/;"	f	class:AccessWindowStatic
AccessWindowTranspose	arm_compute/core/AccessWindowTranspose.h	/^class AccessWindowTranspose : public AccessWindowRectangle$/;"	c	namespace:arm_compute
AccessWindowVertical	arm_compute/core/IAccessWindow.h	/^    AccessWindowVertical(ITensorInfo *info, int y, int height, float scale_y = 1.f)$/;"	f	class:arm_compute::AccessWindowVertical
AccessWindowVertical	arm_compute/core/IAccessWindow.h	/^class AccessWindowVertical : public AccessWindowRectangle$/;"	c	namespace:arm_compute
Accessor	tests/NEON/Accessor.h	/^class Accessor : public IAccessor$/;"	c	namespace:arm_compute::test
Accessor	tests/NEON/Accessor.h	/^inline Accessor::Accessor(Tensor &tensor)$/;"	f	class:arm_compute::test::Accessor
AccumulateBaseValidationFixture	tests/validation/fixtures/AccumulateFixture.h	/^class AccumulateBaseValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
AccumulateS16Dataset	tests/validation/CL/Accumulate.cpp	/^const auto AccumulateS16Dataset = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S16));$/;"	m	namespace:arm_compute::test::validation::__anon398	file:
AccumulateS16Dataset	tests/validation/NEON/Accumulate.cpp	/^const auto AccumulateS16Dataset = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S16));$/;"	m	namespace:arm_compute::test::validation::__anon471	file:
AccumulateSquaredValidationFixture	tests/validation/fixtures/AccumulateFixture.h	/^class AccumulateSquaredValidationFixture : public AccumulateBaseValidationFixture<TensorType, AccessorType, FunctionType, T1, T2>$/;"	c	namespace:arm_compute::test::validation
AccumulateU8Dataset	tests/validation/CL/Accumulate.cpp	/^const auto AccumulateU8Dataset  = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8));$/;"	m	namespace:arm_compute::test::validation::__anon398	file:
AccumulateU8Dataset	tests/validation/NEON/Accumulate.cpp	/^const auto AccumulateU8Dataset  = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8));$/;"	m	namespace:arm_compute::test::validation::__anon471	file:
AccumulateValidationFixture	tests/validation/fixtures/AccumulateFixture.h	/^class AccumulateValidationFixture : public AccumulateBaseValidationFixture<TensorType, AccessorType, FunctionType, T1, T2>$/;"	c	namespace:arm_compute::test::validation
AccumulateWeightedValidationFixture	tests/validation/fixtures/AccumulateFixture.h	/^class AccumulateWeightedValidationFixture : public AccumulateBaseValidationFixture<TensorType, AccessorType, FunctionType, T1, T2>$/;"	c	namespace:arm_compute::test::validation
Activate	documentation/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
ActivationDataset	tests/validation/CL/ActivationLayer.cpp	/^const auto ActivationDataset = combine(combine(framework::dataset::make("InPlace", { false, true }), datasets::ActivationFunctions()), framework::dataset::make("AlphaBeta", { 0.5f, 1.f }));$/;"	m	namespace:arm_compute::test::validation::__anon399	file:
ActivationDataset	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^const auto ActivationDataset = combine(combine(framework::dataset::make("InPlace", { false, true }), datasets::ActivationFunctions()), framework::dataset::make("AlphaBeta", { 0.5f, 1.f }));$/;"	m	namespace:arm_compute::test::validation::__anon454	file:
ActivationDataset	tests/validation/NEON/ActivationLayer.cpp	/^const auto ActivationDataset = combine(combine(framework::dataset::make("InPlace", { false, true }), datasets::ActivationFunctions()), framework::dataset::make("AlphaBeta", { 0.5f, 1.f }));$/;"	m	namespace:arm_compute::test::validation::__anon472	file:
ActivationFunction	arm_compute/core/Types.h	/^    enum class ActivationFunction$/;"	c	class:arm_compute::HOGNormType::ActivationLayerInfo
ActivationFunctions	tests/datasets/ActivationFunctionsDataset.h	/^    ActivationFunctions()$/;"	f	class:arm_compute::test::datasets::final
ActivationFunctionsDataset	tests/validation/CL/ConvolutionLayer.cpp	/^const auto ActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon407	file:
ActivationFunctionsDataset	tests/validation/CL/DirectConvolutionLayer.cpp	/^const auto ActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon415	file:
ActivationFunctionsDataset	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^const auto ActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon457	file:
ActivationFunctionsDataset	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^const auto ActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon459	file:
ActivationFunctionsDataset	tests/validation/NEON/ConvolutionLayer.cpp	/^const auto ActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon481	file:
ActivationFunctionsDataset	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto ActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon489	file:
ActivationLayer	arm_compute/graph/Types.h	/^    ActivationLayer,$/;"	m	class:arm_compute::graph::NodeType
ActivationLayer	arm_compute/graph/frontend/Layers.h	/^    ActivationLayer(ActivationLayerInfo act_info)$/;"	f	class:arm_compute::graph::frontend::final
ActivationLayerFixture	tests/benchmark/fixtures/ActivationLayerFixture.h	/^class ActivationLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
ActivationLayerInfo	arm_compute/core/Types.h	/^    ActivationLayerInfo(ActivationFunction f, float a = 0.0f, float b = 0.0f)$/;"	f	class:arm_compute::HOGNormType::ActivationLayerInfo
ActivationLayerInfo	arm_compute/core/Types.h	/^class ActivationLayerInfo$/;"	c	class:arm_compute::HOGNormType
ActivationLayerNode	src/graph/nodes/ActivationLayerNode.cpp	/^ActivationLayerNode::ActivationLayerNode(ActivationLayerInfo info)$/;"	f	class:arm_compute::graph::ActivationLayerNode
ActivationValidationFixedPointFixture	tests/validation/fixtures/ActivationLayerFixture.h	/^class ActivationValidationFixedPointFixture : public ActivationValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ActivationValidationFixture	tests/validation/fixtures/ActivationLayerFixture.h	/^class ActivationValidationFixture : public ActivationValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ActivationValidationGenericFixture	tests/validation/fixtures/ActivationLayerFixture.h	/^class ActivationValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ActivationValidationQuantizedFixture	tests/validation/fixtures/ActivationLayerFixture.h	/^class ActivationValidationQuantizedFixture : public ActivationValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
AlexNetActivationLayerDataset	tests/datasets/system_tests/alexnet/AlexNetActivationLayerDataset.h	/^    AlexNetActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetConvolutionLayerDataset	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^    AlexNetConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetDirectConvolutionLayerDataset	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^    AlexNetDirectConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetFixture	tests/benchmark/fixtures/AlexNetFixture.h	/^class AlexNetFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
AlexNetFullyConnectedLayerDataset	tests/datasets/system_tests/alexnet/AlexNetFullyConnectedLayerDataset.h	/^    AlexNetFullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetGEMMDataset	tests/datasets/AlexNetGEMMDataset.h	/^    AlexNetGEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetNetwork	tests/networks/AlexNetNetwork.h	/^class AlexNetNetwork$/;"	c	namespace:arm_compute::test::networks
AlexNetNormalizationLayerDataset	tests/datasets/system_tests/alexnet/AlexNetNormalizationLayerDataset.h	/^    AlexNetNormalizationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetPoolingLayerDataset	tests/datasets/system_tests/alexnet/AlexNetPoolingLayerDataset.h	/^    AlexNetPoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
AlexNetWinogradLayerDataset	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^    AlexNetWinogradLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
Allocation	tests/framework/instruments/OpenCLMemoryUsage.h	/^        Allocation(size_t alloc_size)$/;"	f	struct:arm_compute::test::framework::OpenCLMemoryUsage::Allocation
Allocation	tests/framework/instruments/OpenCLMemoryUsage.h	/^    struct Allocation$/;"	s	class:arm_compute::test::framework::OpenCLMemoryUsage
ArithmeticAdditionBroadcastValidationFixedPointFixture	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^class ArithmeticAdditionBroadcastValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ArithmeticAdditionBroadcastValidationFixture	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^class ArithmeticAdditionBroadcastValidationFixture : public ArithmeticAdditionBroadcastValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ArithmeticAdditionFP16Dataset	tests/validation/CL/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionFP16Dataset = combine(combine(framework::dataset::make("DataType", DataType::F16), framework::dataset::make("DataType", DataType::F16)),$/;"	m	namespace:arm_compute::test::validation::__anon400	file:
ArithmeticAdditionFP16Dataset	tests/validation/GLES_COMPUTE/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionFP16Dataset = combine(combine(framework::dataset::make("DataType", DataType::F16), framework::dataset::make("DataType", DataType::F16)),$/;"	m	namespace:arm_compute::test::validation::__anon455	file:
ArithmeticAdditionFP16Dataset	tests/validation/NEON/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionFP16Dataset = combine(combine(framework::dataset::make("DataType", DataType::F16), framework::dataset::make("DataType", DataType::F16)),$/;"	m	namespace:arm_compute::test::validation::__anon473	file:
ArithmeticAdditionFP32Dataset	tests/validation/CL/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionFP32Dataset = combine(combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::F32)),$/;"	m	namespace:arm_compute::test::validation::__anon400	file:
ArithmeticAdditionFP32Dataset	tests/validation/NEON/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionFP32Dataset = combine(combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::F32)),$/;"	m	namespace:arm_compute::test::validation::__anon473	file:
ArithmeticAdditionQS16Dataset	tests/validation/CL/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionQS16Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS16), framework::dataset::make("DataType", DataType::QS16)),$/;"	m	namespace:arm_compute::test::validation::__anon400	file:
ArithmeticAdditionQS16Dataset	tests/validation/NEON/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionQS16Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS16), framework::dataset::make("DataType", DataType::QS16)),$/;"	m	namespace:arm_compute::test::validation::__anon473	file:
ArithmeticAdditionQS8Dataset	tests/validation/CL/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionQS8Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS8), framework::dataset::make("DataType", DataType::QS8)),$/;"	m	namespace:arm_compute::test::validation::__anon400	file:
ArithmeticAdditionQS8Dataset	tests/validation/NEON/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionQS8Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS8), framework::dataset::make("DataType", DataType::QS8)),$/;"	m	namespace:arm_compute::test::validation::__anon473	file:
ArithmeticAdditionS16Dataset	tests/validation/CL/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionS16Dataset = combine(combine(framework::dataset::make("DataType", { DataType::U8, DataType::S16 }), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon400	file:
ArithmeticAdditionS16Dataset	tests/validation/NEON/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionS16Dataset = combine(combine(framework::dataset::make("DataType", { DataType::U8, DataType::S16 }), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon473	file:
ArithmeticAdditionU8Dataset	tests/validation/CL/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionU8Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)), framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon400	file:
ArithmeticAdditionU8Dataset	tests/validation/NEON/ArithmeticAddition.cpp	/^const auto ArithmeticAdditionU8Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)), framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon473	file:
ArithmeticAdditionValidationFixedPointFixture	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^class ArithmeticAdditionValidationFixedPointFixture : public ArithmeticAdditionBroadcastValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ArithmeticAdditionValidationFixture	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^class ArithmeticAdditionValidationFixture : public ArithmeticAdditionValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ArithmeticSubtractionFP16Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionFP16Dataset = combine(combine(framework::dataset::make("DataType", DataType::F16), framework::dataset::make("DataType", DataType::F16)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionFP16Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionFP16Dataset = combine(combine(framework::dataset::make("DataType", DataType::F16), framework::dataset::make("DataType", DataType::F16)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionFP32Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionFP32Dataset = combine(combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::F32)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionFP32Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionFP32Dataset = combine(combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::F32)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionQS16Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionQS16Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS16), framework::dataset::make("DataType", DataType::QS16)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionQS16Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionQS16Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS16), framework::dataset::make("DataType", DataType::QS16)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionQS8Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionQS8Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS8), framework::dataset::make("DataType", DataType::QS8)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionQS8Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionQS8Dataset = combine(combine(framework::dataset::make("DataType", DataType::QS8), framework::dataset::make("DataType", DataType::QS8)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionS16Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionS16Dataset = combine(combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionS16Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionS16Dataset = combine(combine(framework::dataset::make("DataType", { DataType::U8, DataType::S16 }), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionS16U8S16Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionS16U8S16Dataset = combine(combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::U8)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionS16U8S16Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionS16U8S16Dataset = combine(combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::U8)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionU8Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionU8Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionU8Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionU8Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionU8S16S16Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionU8S16S16Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionU8S16S16Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionU8S16S16Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S16)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionU8U8S16Dataset	tests/validation/CL/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionU8U8S16Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)),$/;"	m	namespace:arm_compute::test::validation::__anon401	file:
ArithmeticSubtractionU8U8S16Dataset	tests/validation/NEON/ArithmeticSubtraction.cpp	/^const auto ArithmeticSubtractionU8U8S16Dataset = combine(combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U8)),$/;"	m	namespace:arm_compute::test::validation::__anon474	file:
ArithmeticSubtractionValidationFixedPointFixture	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^class ArithmeticSubtractionValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ArithmeticSubtractionValidationFixture	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^class ArithmeticSubtractionValidationFixture : public ArithmeticSubtractionValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T1, T2, T3>$/;"	c	namespace:arm_compute::test::validation
Array	arm_compute/runtime/Array.h	/^    Array()$/;"	f	class:arm_compute::Array
Array	arm_compute/runtime/Array.h	/^    Array(size_t max_num_values)$/;"	f	class:arm_compute::Array
Array	arm_compute/runtime/Array.h	/^class Array : public IArray<T>$/;"	c	namespace:arm_compute
ArrayAccessor	tests/NEON/ArrayAccessor.h	/^    ArrayAccessor(Array<T> &array)$/;"	f	class:arm_compute::test::ArrayAccessor
ArrayAccessor	tests/NEON/ArrayAccessor.h	/^class ArrayAccessor : public IArrayAccessor<T>$/;"	c	namespace:arm_compute::test
AssemblyKernelGlue	arm_compute/runtime/NEON/AssemblyHelper.h	/^    AssemblyKernelGlue()$/;"	f	class:arm_compute::final
AssetsLibrary	tests/AssetsLibrary.cpp	/^AssetsLibrary::AssetsLibrary(std::string path, std::random_device::result_type seed) \/\/NOLINT$/;"	f	class:arm_compute::test::AssetsLibrary
B	arm_compute/core/Types.h	/^    B,       \/**< Blue channel. *\/$/;"	m	class:arm_compute::Channel
BASE_CONTEXT_CREATE_KERNEL_FLAGS	tests/framework/instruments/hwc.hpp	/^    BASE_CONTEXT_CREATE_KERNEL_FLAGS = 0x2,$/;"	e	enum:mali_userspace::__anon390::__anon391
BASE_GPU_NUM_TEXTURE_FEATURES_REGISTERS	tests/framework/instruments/hwc.hpp	60;"	d
BASE_MAX_COHERENT_GROUPS	tests/framework/instruments/hwc.hpp	61;"	d
BIFROST	arm_compute/core/GPUTarget.h	/^    BIFROST       = 0x200,$/;"	m	class:arm_compute::GPUTarget
BILINEAR	arm_compute/core/Types.h	/^    BILINEAR,         \/**< Output values are defined by bilinear interpolation between the pixels *\/$/;"	m	class:arm_compute::InterpolationPolicy
BILINEAR_OLD_NEW	arm_compute/core/Types.h	/^    BILINEAR_OLD_NEW, \/**< Old-new method *\/$/;"	m	class:arm_compute::BilinearInterpolation
BILINEAR_OLD_NEW	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^    BILINEAR_OLD_NEW,$/;"	m	class:__anon275::BilinearInterpolation	file:
BINARY	arm_compute/core/Types.h	/^    BINARY, \/**< Threshold with one value *\/$/;"	m	class:arm_compute::ThresholdType
BLOBS	arm_compute/runtime/Types.h	/^    BLOBS,  \/**< Mappings are in blob granularity *\/$/;"	m	class:arm_compute::MappingType
BOUNDED_RELU	arm_compute/core/Types.h	/^        BOUNDED_RELU,    \/**< Upper Bounded Rectifier ( \\f$ f(x) = min(a, max(0,x)) \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
BOX	arm_compute/core/Types.h	/^    BOX,   \/**< Box pattern matrix. *\/$/;"	m	class:arm_compute::MatrixPattern
B_block	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int B_block      = 1;$/;"	m	class:arm_gemm::sgemm_8x6
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int B_block      = 1;$/;"	m	class:arm_gemm::gemm_s16_12x8
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int  B_block      = 4;$/;"	m	class:arm_gemm::gemm_s8_12x8
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int  B_block      = 16;$/;"	m	class:arm_gemm::gemm_s8_4x4
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int B_block      = 1;$/;"	m	class:arm_gemm::gemm_u16_12x8
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int  B_block      = 4;$/;"	m	class:arm_gemm::gemm_u8_12x8
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int  B_block      = 16;$/;"	m	class:arm_gemm::gemm_u8_4x4
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int  B_block      = 1;$/;"	m	class:arm_gemm::hgemm_24x8
B_block	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int B_block      = 1;$/;"	m	class:arm_gemm::sgemm_12x8
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int B_interleave = 8;$/;"	m	class:arm_gemm::sgemm_8x6
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int B_interleave = 12;$/;"	m	class:arm_gemm::gemm_s16_12x8
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int  B_interleave = 12;$/;"	m	class:arm_gemm::gemm_s8_12x8
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int  B_interleave = 4;$/;"	m	class:arm_gemm::gemm_s8_4x4
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int B_interleave = 12;$/;"	m	class:arm_gemm::gemm_u16_12x8
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int  B_interleave = 12;$/;"	m	class:arm_gemm::gemm_u8_12x8
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int  B_interleave = 4;$/;"	m	class:arm_gemm::gemm_u8_4x4
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int  B_interleave = 24;$/;"	m	class:arm_gemm::hgemm_24x8
B_interleave	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int B_interleave = 12;$/;"	m	class:arm_gemm::sgemm_12x8
B_is_pretransposed	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual bool B_is_pretransposed() const { return false; }$/;"	f	class:arm_gemm::GemmCommon
B_pretranspose_required	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual bool B_pretranspose_required() const { return false; }$/;"	f	class:arm_gemm::GemmCommon
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int B_transpose  = 1;$/;"	m	class:arm_gemm::sgemm_8x6
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int B_transpose  = 1;$/;"	m	class:arm_gemm::gemm_s16_12x8
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const bool B_transpose  = true;$/;"	m	class:arm_gemm::gemm_s8_12x8
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const bool B_transpose  = true;$/;"	m	class:arm_gemm::gemm_s8_4x4
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int B_transpose  = 1;$/;"	m	class:arm_gemm::gemm_u16_12x8
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const bool B_transpose  = true;$/;"	m	class:arm_gemm::gemm_u8_12x8
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const bool B_transpose  = true;$/;"	m	class:arm_gemm::gemm_u8_4x4
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const bool B_transpose  = true;$/;"	m	class:arm_gemm::hgemm_24x8
B_transpose	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int B_transpose  = 1;$/;"	m	class:arm_gemm::sgemm_12x8
BackendRegistrar	arm_compute/graph/backends/BackendRegistrar.h	/^inline BackendRegistrar<T>::BackendRegistrar(Target target)$/;"	f	class:arm_compute::graph::backends::detail::BackendRegistrar
BackendRegistry	src/graph/backends/BackendRegistry.cpp	/^BackendRegistry::BackendRegistry()$/;"	f	class:arm_compute::graph::backends::BackendRegistry
BatchNormalizationLayer	arm_compute/graph/Types.h	/^    BatchNormalizationLayer,$/;"	m	class:arm_compute::graph::NodeType
BatchNormalizationLayer	arm_compute/graph/frontend/Layers.h	/^    BatchNormalizationLayer(ITensorAccessorUPtr mean,$/;"	f	class:arm_compute::graph::frontend::final
BatchNormalizationLayerDataset	tests/datasets/BatchNormalizationLayerDataset.h	/^class BatchNormalizationLayerDataset$/;"	c	namespace:arm_compute::test::datasets
BatchNormalizationLayerFixture	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^class BatchNormalizationLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
BatchNormalizationLayerNode	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^BatchNormalizationLayerNode::BatchNormalizationLayerNode(float epsilon, ActivationLayerInfo fused_activation)$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
BatchNormalizationLayerValidationFixedPointFixture	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^class BatchNormalizationLayerValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BatchNormalizationLayerValidationFixture	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^class BatchNormalizationLayerValidationFixture : public BatchNormalizationLayerValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
BatchedBlockedGemm	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^class BatchedBlockedGemm$/;"	c	namespace:winograd
BatchedBlockedGemm	src/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.cpp	/^BatchedBlockedGemm<MB, NB, TIn, TOut>::BatchedBlockedGemm($/;"	f	class:BatchedBlockedGemm
BatchedBlockedGemm	src/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.cpp	/^template class winograd::BatchedBlockedGemm<4, 16, float, float>;$/;"	m	class:winograd	typeref:class:winograd::	file:
BilinearInterpolation	arm_compute/core/Types.h	/^enum class BilinearInterpolation$/;"	c	namespace:arm_compute
BilinearInterpolation	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^enum class BilinearInterpolation$/;"	c	namespace:__anon275	file:
Binaries	include/CL/cl.hpp	/^    typedef VECTOR_CLASS<std::pair<const void*, ::size_t> > Binaries;$/;"	t	class:cl::Program
Binaries	include/CL/cl2.hpp	/^    typedef vector<vector<unsigned char>> Binaries;$/;"	t	class:cl::Program
BitwiseAndValidationFixture	tests/validation/fixtures/BitwiseAndFixture.h	/^class BitwiseAndValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BitwiseNotValidationFixture	tests/validation/fixtures/BitwiseNotFixture.h	/^class BitwiseNotValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BitwiseOrValidationFixture	tests/validation/fixtures/BitwiseOrFixture.h	/^class BitwiseOrValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BitwiseXorValidationFixture	tests/validation/fixtures/BitwiseXorFixture.h	/^class BitwiseXorValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Blob	arm_compute/runtime/ISimpleLifetimeManager.h	/^    struct Blob$/;"	s	class:arm_compute::ISimpleLifetimeManager
BlobLifetimeManager	arm_compute/runtime/BlobLifetimeManager.h	/^class BlobLifetimeManager : public ISimpleLifetimeManager$/;"	c	namespace:arm_compute
BlobLifetimeManager	src/runtime/BlobLifetimeManager.cpp	/^BlobLifetimeManager::BlobLifetimeManager()$/;"	f	class:BlobLifetimeManager
BlobMemoryManagerReconfigure2TestCaseFixture	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^class BlobMemoryManagerReconfigure2TestCaseFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BlobMemoryManagerReconfigureTestCaseFixture	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^class BlobMemoryManagerReconfigureTestCaseFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BlobMemoryManagerSimpleTestCaseFixture	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^class BlobMemoryManagerSimpleTestCaseFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BlobMemoryPool	arm_compute/runtime/BlobMemoryPool.h	/^class BlobMemoryPool : public IMemoryPool$/;"	c	namespace:arm_compute
BlobMemoryPool	src/runtime/BlobMemoryPool.cpp	/^BlobMemoryPool::BlobMemoryPool(IAllocator *allocator, std::vector<size_t> blob_sizes)$/;"	f	class:BlobMemoryPool
BlockedGemm	arm_compute/core/NEON/kernels/convolution/winograd/gemm.hpp	/^inline void BlockedGemm($/;"	f
BlockedGemm	arm_compute/core/NEON/kernels/convolution/winograd/gemm/a64_sgemm.hpp	/^inline void BlockedGemm<4, 16, float, float>($/;"	f
BlockedGemm	arm_compute/core/NEON/kernels/convolution/winograd/gemm/a64_sgemm.hpp	/^inline void BlockedGemm<8, 12, float, float>($/;"	f
BorderMode	arm_compute/core/Types.h	/^enum class BorderMode$/;"	c	namespace:arm_compute
BorderModes	tests/datasets/BorderModeDataset.h	/^    BorderModes()$/;"	f	class:arm_compute::test::datasets::final
BorderSize	arm_compute/core/Types.h	/^    constexpr BorderSize()$/;"	f	struct:arm_compute::BorderSize
BorderSize	arm_compute/core/Types.h	/^    constexpr BorderSize(unsigned int top, unsigned int right, unsigned int bottom, unsigned int left)$/;"	f	struct:arm_compute::BorderSize
BorderSize	arm_compute/core/Types.h	/^    constexpr BorderSize(unsigned int top_bottom, unsigned int left_right)$/;"	f	struct:arm_compute::BorderSize
BorderSize	arm_compute/core/Types.h	/^    explicit constexpr BorderSize(unsigned int size)$/;"	f	struct:arm_compute::BorderSize
BorderSize	arm_compute/core/Types.h	/^struct BorderSize$/;"	s	namespace:arm_compute
BorderSizesDataset	tests/validation/CL/FillBorder.cpp	/^const auto BorderSizesDataset  = framework::dataset::make("BorderSize", 0, 6);$/;"	m	namespace:arm_compute::test::validation	file:
BorderSizesDataset	tests/validation/NEON/FillBorder.cpp	/^const auto BorderSizesDataset  = framework::dataset::make("BorderSize", 0, 6);$/;"	m	namespace:arm_compute::test::validation	file:
Box3x3ValidationFixture	tests/validation/fixtures/Box3x3Fixture.h	/^class Box3x3ValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
BranchLayer	arm_compute/graph/frontend/Layers.h	/^    BranchLayer(BranchMergeMethod merge_method, SubStream &&sub_stream1, SubStream &&sub_stream2, Ts &&... rest_sub_streams)$/;"	f	class:arm_compute::graph::frontend::final
BranchLayer	arm_compute/graph/frontend/Layers.h	/^    BranchLayer(SubStream &&sub_stream)$/;"	f	class:arm_compute::graph::frontend::final
BranchMergeMethod	arm_compute/graph/frontend/Types.h	/^enum class BranchMergeMethod$/;"	c	namespace:arm_compute::graph::frontend
BroadcastUnroll	tests/validation/reference/ArithmeticAddition.cpp	/^struct BroadcastUnroll$/;"	s	namespace:arm_compute::test::validation::reference::__anon531	file:
BroadcastUnroll	tests/validation/reference/ArithmeticAddition.cpp	/^struct BroadcastUnroll<0>$/;"	s	namespace:arm_compute::test::validation::reference::__anon531	file:
BroadcastUnroll	tests/validation/reference/PixelWiseMultiplication.cpp	/^struct BroadcastUnroll$/;"	s	namespace:arm_compute::test::validation::reference::__anon545	file:
BroadcastUnroll	tests/validation/reference/PixelWiseMultiplication.cpp	/^struct BroadcastUnroll<0>$/;"	s	namespace:arm_compute::test::validation::reference::__anon545	file:
Buffer	arm_compute/graph/Types.h	/^    Buffer, \/**< Affinity at buffer level *\/$/;"	m	class:arm_compute::graph::MemoryManagerAffinity
Buffer	include/CL/cl.hpp	/^    Buffer($/;"	f	class:cl::Buffer
Buffer	include/CL/cl.hpp	/^    Buffer() : Memory() { }$/;"	f	class:cl::Buffer
Buffer	include/CL/cl.hpp	/^    Buffer(const Buffer& buffer) : Memory(buffer) { }$/;"	f	class:cl::Buffer
Buffer	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Buffer(const cl_mem& buffer) : Memory(buffer) { }$/;"	f	class:cl::Buffer
Buffer	include/CL/cl.hpp	/^Buffer::Buffer($/;"	f	class:cl::Buffer
Buffer	include/CL/cl.hpp	/^class Buffer : public Memory$/;"	c	namespace:cl
Buffer	include/CL/cl2.hpp	/^    Buffer($/;"	f	class:cl::Buffer
Buffer	include/CL/cl2.hpp	/^    Buffer() : Memory() { }$/;"	f	class:cl::Buffer
Buffer	include/CL/cl2.hpp	/^    Buffer(const Buffer& buf) : Memory(buf) {}$/;"	f	class:cl::Buffer
Buffer	include/CL/cl2.hpp	/^    explicit Buffer(const cl_mem& buffer, bool retainObject = false) :$/;"	f	class:cl::Buffer
Buffer	include/CL/cl2.hpp	/^Buffer::Buffer($/;"	f	class:cl::Buffer
Buffer	include/CL/cl2.hpp	/^class Buffer : public Memory$/;"	c	namespace:cl
Buffer	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    Buffer(void *storage, int maxusers)$/;"	f	class:arm_gemm::Buffer
Buffer	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^class Buffer$/;"	c	namespace:arm_gemm
BufferD3D10	include/CL/cl.hpp	/^    BufferD3D10($/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl.hpp	/^    BufferD3D10() : Buffer() { }$/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl.hpp	/^    BufferD3D10(const BufferD3D10& buffer) : Buffer(buffer) { }$/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS BufferD3D10(const cl_mem& buffer) : Buffer(buffer) { }$/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl.hpp	/^class BufferD3D10 : public Buffer$/;"	c	namespace:cl
BufferD3D10	include/CL/cl2.hpp	/^    BufferD3D10($/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl2.hpp	/^    BufferD3D10() : Buffer() { }$/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl2.hpp	/^    BufferD3D10(const BufferD3D10& buf) : $/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl2.hpp	/^    explicit BufferD3D10(const cl_mem& buffer, bool retainObject = false) : $/;"	f	class:cl::BufferD3D10
BufferD3D10	include/CL/cl2.hpp	/^class BufferD3D10 : public Buffer$/;"	c	namespace:cl
BufferGL	include/CL/cl.hpp	/^    BufferGL($/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl.hpp	/^    BufferGL() : Buffer() { }$/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl.hpp	/^    BufferGL(const BufferGL& buffer) : Buffer(buffer) { }$/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS BufferGL(const cl_mem& buffer) : Buffer(buffer) { }$/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl.hpp	/^class BufferGL : public Buffer$/;"	c	namespace:cl
BufferGL	include/CL/cl2.hpp	/^    BufferGL($/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl2.hpp	/^    BufferGL() : Buffer() { }$/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl2.hpp	/^    BufferGL(const BufferGL& buf) : Buffer(buf) {}$/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl2.hpp	/^    explicit BufferGL(const cl_mem& buffer, bool retainObject = false) :$/;"	f	class:cl::BufferGL
BufferGL	include/CL/cl2.hpp	/^class BufferGL : public Buffer$/;"	c	namespace:cl
BufferManager	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    BufferManager(const int maxthreads, const size_t buffersize, void *storage)$/;"	f	class:arm_gemm::BufferManager
BufferManager	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^class BufferManager$/;"	c	namespace:arm_gemm
BufferRenderGL	include/CL/cl.hpp	/^    BufferRenderGL($/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl.hpp	/^    BufferRenderGL() : Buffer() { }$/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl.hpp	/^    BufferRenderGL(const BufferGL& buffer) : Buffer(buffer) { }$/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS BufferRenderGL(const cl_mem& buffer) : Buffer(buffer) { }$/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl.hpp	/^class BufferRenderGL : public Buffer$/;"	c	namespace:cl
BufferRenderGL	include/CL/cl2.hpp	/^    BufferRenderGL($/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl2.hpp	/^    BufferRenderGL() : Buffer() { }$/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl2.hpp	/^    BufferRenderGL(const BufferRenderGL& buf) : Buffer(buf) {}$/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl2.hpp	/^    explicit BufferRenderGL(const cl_mem& buffer, bool retainObject = false) :$/;"	f	class:cl::BufferRenderGL
BufferRenderGL	include/CL/cl2.hpp	/^class BufferRenderGL : public Buffer$/;"	c	namespace:cl
BufferStatus	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^enum class BufferStatus$/;"	c	namespace:arm_gemm
BuildError	include/CL/cl2.hpp	/^    BuildError(cl_int err, const char * errStr, const BuildLogType &vec) : Error(err, errStr), buildLogs(vec)$/;"	f	class:cl::BuildError
BuildError	include/CL/cl2.hpp	/^class BuildError : public Error$/;"	c	namespace:cl
C0	arm_compute/core/Types.h	/^    C0,      \/**< First channel (used by formats with unknown channel types). *\/$/;"	m	class:arm_compute::Channel
C1	arm_compute/core/Types.h	/^    C1,      \/**< Second channel (used by formats with unknown channel types). *\/$/;"	m	class:arm_compute::Channel
C2	arm_compute/core/Types.h	/^    C2,      \/**< Third channel (used by formats with unknown channel types). *\/$/;"	m	class:arm_compute::Channel
C3	arm_compute/core/Types.h	/^    C3,      \/**< Fourth channel (used by formats with unknown channel types). *\/$/;"	m	class:arm_compute::Channel
CENTER	arm_compute/core/Types.h	/^    CENTER,  \/**< Samples are taken at pixel center *\/$/;"	m	class:arm_compute::SamplingPolicy
CHANNEL	arm_compute/core/Types.h	/^    CHANNEL, \/**< channel *\/$/;"	m	class:arm_compute::DataLayoutDimension
CHANNEL_BLOCK	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^const unsigned int CHANNEL_BLOCK = 16;$/;"	m	namespace:depthwise
CHECK_NODEIDX_PAIR	src/graph/GraphBuilder.cpp	31;"	d	file:
CL	arm_compute/graph/Types.h	/^    CL,          \/**< OpenCL capable target device *\/$/;"	m	class:arm_compute::graph::Target
CL10	arm_compute/core/CL/CLTypes.h	/^    CL10,   \/* the OpenCL 1.0 *\/$/;"	m	class:arm_compute::CLVersion
CL11	arm_compute/core/CL/CLTypes.h	/^    CL11,   \/* the OpenCL 1.1 *\/$/;"	m	class:arm_compute::CLVersion
CL12	arm_compute/core/CL/CLTypes.h	/^    CL12,   \/* the OpenCL 1.2 *\/$/;"	m	class:arm_compute::CLVersion
CL20	arm_compute/core/CL/CLTypes.h	/^    CL20,   \/* the OpenCL 2.0 and above *\/$/;"	m	class:arm_compute::CLVersion
CLAMP	src/core/CL/cl_kernels/helpers.h	39;"	d
CLAbsoluteDifference	arm_compute/runtime/CL/functions/CLAbsoluteDifference.h	/^class CLAbsoluteDifference : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLAbsoluteDifferenceKernel	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	/^class CLAbsoluteDifferenceKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLAbsoluteDifferenceKernel	src/core/CL/kernels/CLAbsoluteDifferenceKernel.cpp	/^CLAbsoluteDifferenceKernel::CLAbsoluteDifferenceKernel()$/;"	f	class:CLAbsoluteDifferenceKernel
CLAccessor	tests/CL/CLAccessor.h	/^class CLAccessor : public IAccessor$/;"	c	namespace:arm_compute::test
CLAccessor	tests/CL/CLAccessor.h	/^inline CLAccessor::CLAccessor(CLTensor &tensor)$/;"	f	class:arm_compute::test::CLAccessor
CLAccumulate	arm_compute/runtime/CL/functions/CLAccumulate.h	/^class CLAccumulate : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLAccumulateKernel	arm_compute/core/CL/kernels/CLAccumulateKernel.h	/^class CLAccumulateKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLAccumulateSquared	arm_compute/runtime/CL/functions/CLAccumulate.h	/^class CLAccumulateSquared : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLAccumulateSquaredKernel	arm_compute/core/CL/kernels/CLAccumulateKernel.h	/^class CLAccumulateSquaredKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLAccumulateWeighted	arm_compute/runtime/CL/functions/CLAccumulate.h	/^class CLAccumulateWeighted : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLAccumulateWeightedKernel	arm_compute/core/CL/kernels/CLAccumulateKernel.h	/^class CLAccumulateWeightedKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLActivationLayer	arm_compute/runtime/CL/functions/CLActivationLayer.h	/^class CLActivationLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLActivationLayerKernel	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	/^class CLActivationLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLActivationLayerKernel	src/core/CL/kernels/CLActivationLayerKernel.cpp	/^CLActivationLayerKernel::CLActivationLayerKernel()$/;"	f	class:CLActivationLayerKernel
CLArithmeticAddition	arm_compute/runtime/CL/functions/CLArithmeticAddition.h	/^class CLArithmeticAddition : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLArithmeticAdditionKernel	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^class CLArithmeticAdditionKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLArithmeticAdditionKernel	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^CLArithmeticAdditionKernel::CLArithmeticAdditionKernel()$/;"	f	class:CLArithmeticAdditionKernel
CLArithmeticSubtraction	arm_compute/runtime/CL/functions/CLArithmeticSubtraction.h	/^class CLArithmeticSubtraction : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLArithmeticSubtractionKernel	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	/^class CLArithmeticSubtractionKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLArithmeticSubtractionKernel	src/core/CL/kernels/CLArithmeticSubtractionKernel.cpp	/^CLArithmeticSubtractionKernel::CLArithmeticSubtractionKernel()$/;"	f	class:CLArithmeticSubtractionKernel
CLArray	arm_compute/runtime/CL/CLArray.h	/^    CLArray()$/;"	f	class:arm_compute::CLArray
CLArray	arm_compute/runtime/CL/CLArray.h	/^    CLArray(size_t max_num_values)$/;"	f	class:arm_compute::CLArray
CLArray	arm_compute/runtime/CL/CLArray.h	/^class CLArray : public ICLArray<T>$/;"	c	namespace:arm_compute
CLArrayAccessor	tests/CL/CLArrayAccessor.h	/^    CLArrayAccessor(CLArray<T> &array)$/;"	f	class:arm_compute::test::CLArrayAccessor
CLArrayAccessor	tests/CL/CLArrayAccessor.h	/^class CLArrayAccessor : public IArrayAccessor<T>$/;"	c	namespace:arm_compute::test
CLBatchNormalizationLayer	arm_compute/runtime/CL/functions/CLBatchNormalizationLayer.h	/^class CLBatchNormalizationLayer : public IFunction$/;"	c	namespace:arm_compute
CLBatchNormalizationLayer	src/runtime/CL/functions/CLBatchNormalizationLayer.cpp	/^CLBatchNormalizationLayer::CLBatchNormalizationLayer()$/;"	f	class:CLBatchNormalizationLayer
CLBatchNormalizationLayerKernel	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^class CLBatchNormalizationLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLBatchNormalizationLayerKernel	src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp	/^CLBatchNormalizationLayerKernel::CLBatchNormalizationLayerKernel()$/;"	f	class:CLBatchNormalizationLayerKernel
CLBitwiseAnd	arm_compute/runtime/CL/functions/CLBitwiseAnd.h	/^class CLBitwiseAnd : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLBitwiseAndKernel	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	/^class CLBitwiseAndKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLBitwiseAndKernel	src/core/CL/kernels/CLBitwiseAndKernel.cpp	/^CLBitwiseAndKernel::CLBitwiseAndKernel()$/;"	f	class:CLBitwiseAndKernel
CLBitwiseNot	arm_compute/runtime/CL/functions/CLBitwiseNot.h	/^class CLBitwiseNot : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLBitwiseNotKernel	arm_compute/core/CL/kernels/CLBitwiseNotKernel.h	/^class CLBitwiseNotKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLBitwiseOr	arm_compute/runtime/CL/functions/CLBitwiseOr.h	/^class CLBitwiseOr : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLBitwiseOrKernel	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	/^class CLBitwiseOrKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLBitwiseOrKernel	src/core/CL/kernels/CLBitwiseOrKernel.cpp	/^CLBitwiseOrKernel::CLBitwiseOrKernel()$/;"	f	class:CLBitwiseOrKernel
CLBitwiseXor	arm_compute/runtime/CL/functions/CLBitwiseXor.h	/^class CLBitwiseXor : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLBitwiseXorKernel	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	/^class CLBitwiseXorKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLBitwiseXorKernel	src/core/CL/kernels/CLBitwiseXorKernel.cpp	/^CLBitwiseXorKernel::CLBitwiseXorKernel()$/;"	f	class:CLBitwiseXorKernel
CLBox3x3	arm_compute/runtime/CL/functions/CLBox3x3.h	/^class CLBox3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLBox3x3Kernel	arm_compute/core/CL/kernels/CLBox3x3Kernel.h	/^class CLBox3x3Kernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLBufferAllocator	src/runtime/CL/CLBufferAllocator.cpp	/^CLBufferAllocator::CLBufferAllocator(cl::Context context)$/;"	f	class:CLBufferAllocator
CLBufferMemoryRegion	src/runtime/CL/CLMemoryRegion.cpp	/^CLBufferMemoryRegion::CLBufferMemoryRegion(cl::Context ctx, cl_mem_flags flags, size_t size)$/;"	f	class:arm_compute::CLBufferMemoryRegion
CLBuildOptions	arm_compute/core/CL/CLKernelLibrary.h	/^class CLBuildOptions$/;"	c	namespace:arm_compute
CLBuildOptions	src/core/CL/CLKernelLibrary.cpp	/^CLBuildOptions::CLBuildOptions()$/;"	f	class:CLBuildOptions
CLCannyEdge	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^class CLCannyEdge : public IFunction$/;"	c	namespace:arm_compute
CLCannyEdge	src/runtime/CL/functions/CLCannyEdge.cpp	/^CLCannyEdge::CLCannyEdge(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:CLCannyEdge
CLChannelCombine	arm_compute/runtime/CL/functions/CLChannelCombine.h	/^class CLChannelCombine : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLChannelCombineKernel	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^class CLChannelCombineKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLChannelCombineKernel	src/core/CL/kernels/CLChannelCombineKernel.cpp	/^CLChannelCombineKernel::CLChannelCombineKernel()$/;"	f	class:CLChannelCombineKernel
CLChannelExtract	arm_compute/runtime/CL/functions/CLChannelExtract.h	/^class CLChannelExtract : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLChannelExtractKernel	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^class CLChannelExtractKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLChannelExtractKernel	src/core/CL/kernels/CLChannelExtractKernel.cpp	/^CLChannelExtractKernel::CLChannelExtractKernel()$/;"	f	class:CLChannelExtractKernel
CLChannelShuffleLayer	arm_compute/runtime/CL/functions/CLChannelShuffleLayer.h	/^class CLChannelShuffleLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLChannelShuffleLayerKernel	arm_compute/core/CL/kernels/CLChannelShuffleLayerKernel.h	/^class CLChannelShuffleLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLChannelShuffleLayerKernel	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^CLChannelShuffleLayerKernel::CLChannelShuffleLayerKernel()$/;"	f	class:arm_compute::CLChannelShuffleLayerKernel
CLCoarseSVMMemoryRegion	src/runtime/CL/CLMemoryRegion.cpp	/^CLCoarseSVMMemoryRegion::CLCoarseSVMMemoryRegion(cl::Context ctx, cl_mem_flags flags, size_t size, size_t alignment)$/;"	f	class:arm_compute::CLCoarseSVMMemoryRegion
CLCoefficientTable	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^struct CLCoefficientTable$/;"	s	namespace:arm_compute
CLCol2ImKernel	arm_compute/core/CL/kernels/CLCol2ImKernel.h	/^class CLCol2ImKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLCol2ImKernel	src/core/CL/kernels/CLCol2ImKernel.cpp	/^CLCol2ImKernel::CLCol2ImKernel()$/;"	f	class:CLCol2ImKernel
CLColorConvert	arm_compute/runtime/CL/functions/CLColorConvert.h	/^class CLColorConvert : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLColorConvertKernel	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^class CLColorConvertKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLColorConvertKernel	src/core/CL/kernels/CLColorConvertKernel.cpp	/^CLColorConvertKernel::CLColorConvertKernel()$/;"	f	class:CLColorConvertKernel
CLConvertFullyConnectedWeights	arm_compute/runtime/CL/functions/CLConvertFullyConnectedWeights.h	/^class CLConvertFullyConnectedWeights : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLConvertFullyConnectedWeightsKernel	arm_compute/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.h	/^class CLConvertFullyConnectedWeightsKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLConvertFullyConnectedWeightsKernel	src/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.cpp	/^CLConvertFullyConnectedWeightsKernel::CLConvertFullyConnectedWeightsKernel()$/;"	f	class:arm_compute::CLConvertFullyConnectedWeightsKernel
CLConvolution3x3	arm_compute/runtime/CL/functions/CLConvolution.h	/^class CLConvolution3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLConvolutionExample	examples/cl_convolution.cpp	/^class CLConvolutionExample : public Example$/;"	c	file:
CLConvolutionKernel	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^class CLConvolutionKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLConvolutionKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLConvolutionKernel<3>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLConvolutionKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLConvolutionKernel<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLConvolutionKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLConvolutionKernel<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLConvolutionKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLConvolutionKernel<9>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLConvolutionLayer	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	/^class CLConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLConvolutionLayer	src/runtime/CL/functions/CLConvolutionLayer.cpp	/^CLConvolutionLayer::CLConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLConvolutionLayer
CLConvolutionLayerReshapeWeights	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^class CLConvolutionLayerReshapeWeights : public IFunction$/;"	c	namespace:arm_compute
CLConvolutionLayerReshapeWeights	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^CLConvolutionLayerReshapeWeights::CLConvolutionLayerReshapeWeights()$/;"	f	class:CLConvolutionLayerReshapeWeights
CLConvolutionRectangle	arm_compute/runtime/CL/functions/CLConvolution.h	/^class CLConvolutionRectangle : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLConvolutionRectangleKernel	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^class CLConvolutionRectangleKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLConvolutionRectangleKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^CLConvolutionRectangleKernel::CLConvolutionRectangleKernel()$/;"	f	class:CLConvolutionRectangleKernel
CLConvolutionSquare	arm_compute/runtime/CL/functions/CLConvolution.h	/^class CLConvolutionSquare : public IFunction$/;"	c	namespace:arm_compute
CLConvolutionSquare	src/runtime/CL/functions/CLConvolution.cpp	/^CLConvolutionSquare<matrix_size>::CLConvolutionSquare(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLConvolutionSquare
CLConvolutionSquare	src/runtime/CL/functions/CLConvolution.cpp	/^template class arm_compute::CLConvolutionSquare<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLConvolutionSquare	src/runtime/CL/functions/CLConvolution.cpp	/^template class arm_compute::CLConvolutionSquare<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLConvolutionSquare	src/runtime/CL/functions/CLConvolution.cpp	/^template class arm_compute::CLConvolutionSquare<9>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLCopy	arm_compute/runtime/CL/functions/CLCopy.h	/^class CLCopy : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLCopyKernel	arm_compute/core/CL/kernels/CLCopyKernel.h	/^class CLCopyKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLCopyKernel	src/core/CL/kernels/CLCopyKernel.cpp	/^CLCopyKernel::CLCopyKernel()$/;"	f	class:CLCopyKernel
CLCopyToArrayKernel	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^class CLCopyToArrayKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLCopyToArrayKernel	src/core/CL/kernels/CLFastCornersKernel.cpp	/^CLCopyToArrayKernel::CLCopyToArrayKernel()$/;"	f	class:CLCopyToArrayKernel
CLDeconvolutionLayer	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^class CLDeconvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLDeconvolutionLayer	src/runtime/CL/functions/CLDeconvolutionLayer.cpp	/^CLDeconvolutionLayer::CLDeconvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:CLDeconvolutionLayer
CLDeconvolutionLayerUpsample	arm_compute/runtime/CL/functions/CLDeconvolutionLayerUpsample.h	/^class CLDeconvolutionLayerUpsample : public IFunction$/;"	c	namespace:arm_compute
CLDeconvolutionLayerUpsample	src/runtime/CL/functions/CLDeconvolutionLayerUpsample.cpp	/^CLDeconvolutionLayerUpsample::CLDeconvolutionLayerUpsample() \/\/ NOLINT$/;"	f	class:CLDeconvolutionLayerUpsample
CLDeconvolutionLayerUpsampleKernel	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^class CLDeconvolutionLayerUpsampleKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDeconvolutionLayerUpsampleKernel	src/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.cpp	/^CLDeconvolutionLayerUpsampleKernel::CLDeconvolutionLayerUpsampleKernel()$/;"	f	class:CLDeconvolutionLayerUpsampleKernel
CLDepthConcatenateLayer	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^class CLDepthConcatenateLayer : public IFunction$/;"	c	namespace:arm_compute
CLDepthConcatenateLayer	src/runtime/CL/functions/CLDepthConcatenateLayer.cpp	/^CLDepthConcatenateLayer::CLDepthConcatenateLayer() \/\/ NOLINT$/;"	f	class:CLDepthConcatenateLayer
CLDepthConcatenateLayerKernel	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^class CLDepthConcatenateLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDepthConcatenateLayerKernel	src/core/CL/kernels/CLDepthConcatenateLayerKernel.cpp	/^CLDepthConcatenateLayerKernel::CLDepthConcatenateLayerKernel()$/;"	f	class:CLDepthConcatenateLayerKernel
CLDepthConvertLayer	arm_compute/runtime/CL/functions/CLDepthConvertLayer.h	/^class CLDepthConvertLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLDepthConvertLayerKernel	arm_compute/core/CL/kernels/CLDepthConvertLayerKernel.h	/^class CLDepthConvertLayerKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLDepthwiseConvolutionLayer	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^class CLDepthwiseConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLDepthwiseConvolutionLayer	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^CLDepthwiseConvolutionLayer::CLDepthwiseConvolutionLayer()$/;"	f	class:CLDepthwiseConvolutionLayer
CLDepthwiseConvolutionLayer3x3	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^class CLDepthwiseConvolutionLayer3x3 : public IFunction$/;"	c	namespace:arm_compute
CLDepthwiseConvolutionLayer3x3	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^CLDepthwiseConvolutionLayer3x3::CLDepthwiseConvolutionLayer3x3()$/;"	f	class:CLDepthwiseConvolutionLayer3x3
CLDepthwiseConvolutionLayer3x3NCHWKernel	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^class CLDepthwiseConvolutionLayer3x3NCHWKernel : public ICLDepthwiseConvolutionLayer3x3Kernel$/;"	c	namespace:arm_compute
CLDepthwiseConvolutionLayer3x3NCHWKernel	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^CLDepthwiseConvolutionLayer3x3NCHWKernel::CLDepthwiseConvolutionLayer3x3NCHWKernel()$/;"	f	class:CLDepthwiseConvolutionLayer3x3NCHWKernel
CLDepthwiseConvolutionLayer3x3NHWCKernel	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	/^class CLDepthwiseConvolutionLayer3x3NHWCKernel : public ICLDepthwiseConvolutionLayer3x3Kernel$/;"	c	namespace:arm_compute
CLDepthwiseConvolutionLayer3x3NHWCKernel	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^CLDepthwiseConvolutionLayer3x3NHWCKernel::CLDepthwiseConvolutionLayer3x3NHWCKernel()$/;"	f	class:CLDepthwiseConvolutionLayer3x3NHWCKernel
CLDepthwiseIm2ColKernel	arm_compute/core/CL/kernels/CLDepthwiseIm2ColKernel.h	/^class CLDepthwiseIm2ColKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDepthwiseIm2ColKernel	src/core/CL/kernels/CLDepthwiseIm2ColKernel.cpp	/^CLDepthwiseIm2ColKernel::CLDepthwiseIm2ColKernel()$/;"	f	class:CLDepthwiseIm2ColKernel
CLDepthwiseSeparableConvolutionLayer	arm_compute/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.h	/^class CLDepthwiseSeparableConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLDepthwiseSeparableConvolutionLayer	src/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.cpp	/^CLDepthwiseSeparableConvolutionLayer::CLDepthwiseSeparableConvolutionLayer()$/;"	f	class:CLDepthwiseSeparableConvolutionLayer
CLDepthwiseVectorToTensorKernel	arm_compute/core/CL/kernels/CLDepthwiseVectorToTensorKernel.h	/^class CLDepthwiseVectorToTensorKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDepthwiseVectorToTensorKernel	src/core/CL/kernels/CLDepthwiseVectorToTensorKernel.cpp	/^CLDepthwiseVectorToTensorKernel::CLDepthwiseVectorToTensorKernel()$/;"	f	class:CLDepthwiseVectorToTensorKernel
CLDepthwiseWeightsReshapeKernel	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	/^class CLDepthwiseWeightsReshapeKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDepthwiseWeightsReshapeKernel	src/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.cpp	/^CLDepthwiseWeightsReshapeKernel::CLDepthwiseWeightsReshapeKernel()$/;"	f	class:CLDepthwiseWeightsReshapeKernel
CLDequantizationLayer	arm_compute/runtime/CL/functions/CLDequantizationLayer.h	/^class CLDequantizationLayer : public IFunction$/;"	c	namespace:arm_compute
CLDequantizationLayer	src/runtime/CL/functions/CLDequantizationLayer.cpp	/^CLDequantizationLayer::CLDequantizationLayer()$/;"	f	class:CLDequantizationLayer
CLDequantizationLayerKernel	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	/^class CLDequantizationLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDequantizationLayerKernel	src/core/CL/kernels/CLDequantizationLayerKernel.cpp	/^CLDequantizationLayerKernel::CLDequantizationLayerKernel()$/;"	f	class:CLDequantizationLayerKernel
CLDerivative	arm_compute/runtime/CL/functions/CLDerivative.h	/^class CLDerivative : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLDerivativeKernel	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^class CLDerivativeKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDerivativeKernel	src/core/CL/kernels/CLDerivativeKernel.cpp	/^CLDerivativeKernel::CLDerivativeKernel()$/;"	f	class:CLDerivativeKernel
CLDeviceBackend	src/graph/backends/CL/CLDeviceBackend.cpp	/^CLDeviceBackend::CLDeviceBackend()$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
CLDeviceOptions	arm_compute/core/CL/CLTypes.h	/^struct CLDeviceOptions$/;"	s	namespace:arm_compute
CLDilate	arm_compute/runtime/CL/functions/CLDilate.h	/^class CLDilate : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLDilateKernel	arm_compute/core/CL/kernels/CLDilateKernel.h	/^class CLDilateKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLDirectConvolutionLayer	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^class CLDirectConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLDirectConvolutionLayer	src/runtime/CL/functions/CLDirectConvolutionLayer.cpp	/^CLDirectConvolutionLayer::CLDirectConvolutionLayer()$/;"	f	class:CLDirectConvolutionLayer
CLDirectConvolutionLayerKernel	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^class CLDirectConvolutionLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDirectConvolutionLayerKernel	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^CLDirectConvolutionLayerKernel::CLDirectConvolutionLayerKernel()$/;"	f	class:CLDirectConvolutionLayerKernel
CLDirectConvolutionLayerOutputStageKernel	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^class CLDirectConvolutionLayerOutputStageKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLDirectConvolutionLayerOutputStageKernel	src/core/CL/kernels/CLDirectConvolutionOutputStageKernel.cpp	/^CLDirectConvolutionLayerOutputStageKernel::CLDirectConvolutionLayerOutputStageKernel()$/;"	f	class:CLDirectConvolutionLayerOutputStageKernel
CLDistribution1D	arm_compute/runtime/CL/CLDistribution1D.h	/^class CLDistribution1D : public ICLDistribution1D$/;"	c	namespace:arm_compute
CLDistribution1D	src/runtime/CL/CLDistribution1D.cpp	/^CLDistribution1D::CLDistribution1D(size_t num_bins, int32_t offset, uint32_t range)$/;"	f	class:CLDistribution1D
CLEdgeNonMaxSuppressionKernel	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^class CLEdgeNonMaxSuppressionKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLEdgeNonMaxSuppressionKernel	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^CLEdgeNonMaxSuppressionKernel::CLEdgeNonMaxSuppressionKernel()$/;"	f	class:CLEdgeNonMaxSuppressionKernel
CLEdgeTraceKernel	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^class CLEdgeTraceKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLEdgeTraceKernel	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^CLEdgeTraceKernel::CLEdgeTraceKernel()$/;"	f	class:CLEdgeTraceKernel
CLEqualizeHistogram	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^class CLEqualizeHistogram : public IFunction$/;"	c	namespace:arm_compute
CLEqualizeHistogram	src/runtime/CL/functions/CLEqualizeHistogram.cpp	/^CLEqualizeHistogram::CLEqualizeHistogram()$/;"	f	class:CLEqualizeHistogram
CLErode	arm_compute/runtime/CL/functions/CLErode.h	/^class CLErode : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLErodeKernel	arm_compute/core/CL/kernels/CLErodeKernel.h	/^class CLErodeKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLEventsExample	examples/cl_events.cpp	/^class CLEventsExample : public Example$/;"	c	file:
CLFastCorners	arm_compute/runtime/CL/functions/CLFastCorners.h	/^class CLFastCorners : public IFunction$/;"	c	namespace:arm_compute
CLFastCorners	src/runtime/CL/functions/CLFastCorners.cpp	/^CLFastCorners::CLFastCorners(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLFastCorners
CLFastCornersKernel	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^class CLFastCornersKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLFastCornersKernel	src/core/CL/kernels/CLFastCornersKernel.cpp	/^CLFastCornersKernel::CLFastCornersKernel()$/;"	f	class:CLFastCornersKernel
CLFillBorder	arm_compute/runtime/CL/functions/CLFillBorder.h	/^class CLFillBorder : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLFillBorderKernel	arm_compute/core/CL/kernels/CLFillBorderKernel.h	/^class CLFillBorderKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLFillBorderKernel	src/core/CL/kernels/CLFillBorderKernel.cpp	/^CLFillBorderKernel::CLFillBorderKernel()$/;"	f	class:CLFillBorderKernel
CLFineSVMMemoryRegion	src/runtime/CL/CLMemoryRegion.cpp	/^CLFineSVMMemoryRegion::CLFineSVMMemoryRegion(cl::Context ctx, cl_mem_flags flags, size_t size, size_t alignment)$/;"	f	class:arm_compute::CLFineSVMMemoryRegion
CLFlattenLayer	arm_compute/runtime/CL/functions/CLFlattenLayer.h	/^class CLFlattenLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLFloor	arm_compute/runtime/CL/functions/CLFloor.h	/^class CLFloor : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLFloorKernel	arm_compute/core/CL/kernels/CLFloorKernel.h	/^class CLFloorKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLFloorKernel	src/core/CL/kernels/CLFloorKernel.cpp	/^CLFloorKernel::CLFloorKernel()$/;"	f	class:CLFloorKernel
CLFullyConnectedLayer	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^class CLFullyConnectedLayer : public IFunction$/;"	c	namespace:arm_compute
CLFullyConnectedLayer	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^CLFullyConnectedLayer::CLFullyConnectedLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLFullyConnectedLayer
CLFullyConnectedLayerReshapeWeights	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^class CLFullyConnectedLayerReshapeWeights : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLGEMM	arm_compute/runtime/CL/functions/CLGEMM.h	/^class CLGEMM : public IFunction$/;"	c	namespace:arm_compute
CLGEMM	src/runtime/CL/functions/CLGEMM.cpp	/^CLGEMM::CLGEMM(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLGEMM
CLGEMMConvolutionLayer	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^class CLGEMMConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLGEMMConvolutionLayer	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^CLGEMMConvolutionLayer::CLGEMMConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLGEMMConvolutionLayer
CLGEMMInterleave4x4	arm_compute/runtime/CL/functions/CLGEMMInterleave4x4.h	/^class CLGEMMInterleave4x4 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLGEMMInterleave4x4Kernel	arm_compute/core/CL/kernels/CLGEMMInterleave4x4Kernel.h	/^class CLGEMMInterleave4x4Kernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMInterleave4x4Kernel	src/core/CL/kernels/CLGEMMInterleave4x4Kernel.cpp	/^CLGEMMInterleave4x4Kernel::CLGEMMInterleave4x4Kernel()$/;"	f	class:CLGEMMInterleave4x4Kernel
CLGEMMLowpMatrixAReductionKernel	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^class CLGEMMLowpMatrixAReductionKernel : public ICLGEMMLowpReductionKernel$/;"	c	namespace:arm_compute
CLGEMMLowpMatrixBReductionKernel	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^class CLGEMMLowpMatrixBReductionKernel : public ICLGEMMLowpReductionKernel$/;"	c	namespace:arm_compute
CLGEMMLowpMatrixMultiplyCore	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^class CLGEMMLowpMatrixMultiplyCore : public IFunction$/;"	c	namespace:arm_compute
CLGEMMLowpMatrixMultiplyCore	src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp	/^CLGEMMLowpMatrixMultiplyCore::CLGEMMLowpMatrixMultiplyCore(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLGEMMLowpMatrixMultiplyCore
CLGEMMLowpMatrixMultiplyKernel	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	/^class CLGEMMLowpMatrixMultiplyKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMLowpMatrixMultiplyKernel	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^CLGEMMLowpMatrixMultiplyKernel::CLGEMMLowpMatrixMultiplyKernel()$/;"	f	class:CLGEMMLowpMatrixMultiplyKernel
CLGEMMLowpOffsetContributionKernel	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	/^class CLGEMMLowpOffsetContributionKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMLowpOffsetContributionKernel	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^CLGEMMLowpOffsetContributionKernel::CLGEMMLowpOffsetContributionKernel()$/;"	f	class:CLGEMMLowpOffsetContributionKernel
CLGEMMLowpQuantizeDownInt32ToUint8Scale	arm_compute/runtime/CL/functions/CLGEMMLowpOutputStage.h	/^class CLGEMMLowpQuantizeDownInt32ToUint8Scale : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint	arm_compute/runtime/CL/functions/CLGEMMLowpOutputStage.h	/^class CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^class CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel()$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^class CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel()$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
CLGEMMMatrixAccumulateBiasesKernel	arm_compute/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.h	/^class CLGEMMMatrixAccumulateBiasesKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMMatrixAccumulateBiasesKernel	src/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.cpp	/^CLGEMMMatrixAccumulateBiasesKernel::CLGEMMMatrixAccumulateBiasesKernel()$/;"	f	class:CLGEMMMatrixAccumulateBiasesKernel
CLGEMMMatrixAdditionKernel	arm_compute/core/CL/kernels/CLGEMMMatrixAdditionKernel.h	/^class CLGEMMMatrixAdditionKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMMatrixAdditionKernel	src/core/CL/kernels/CLGEMMMatrixAdditionKernel.cpp	/^CLGEMMMatrixAdditionKernel::CLGEMMMatrixAdditionKernel()$/;"	f	class:CLGEMMMatrixAdditionKernel
CLGEMMMatrixMultiplyKernel	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^class CLGEMMMatrixMultiplyKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMMatrixMultiplyKernel	src/core/CL/kernels/CLGEMMMatrixMultiplyKernel.cpp	/^CLGEMMMatrixMultiplyKernel::CLGEMMMatrixMultiplyKernel()$/;"	f	class:CLGEMMMatrixMultiplyKernel
CLGEMMMatrixVectorMultiplyKernel	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^class CLGEMMMatrixVectorMultiplyKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGEMMMatrixVectorMultiplyKernel	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^CLGEMMMatrixVectorMultiplyKernel::CLGEMMMatrixVectorMultiplyKernel()$/;"	f	class:CLGEMMMatrixVectorMultiplyKernel
CLGEMMTranspose1xW	arm_compute/runtime/CL/functions/CLGEMMTranspose1xW.h	/^class CLGEMMTranspose1xW : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLGEMMTranspose1xWKernel	arm_compute/core/CL/kernels/CLGEMMTranspose1xWKernel.h	/^class CLGEMMTranspose1xWKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLGaussian3x3	arm_compute/runtime/CL/functions/CLGaussian3x3.h	/^class CLGaussian3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLGaussian3x3Kernel	arm_compute/core/CL/kernels/CLGaussian3x3Kernel.h	/^class CLGaussian3x3Kernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLGaussian5x5	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^class CLGaussian5x5 : public IFunction$/;"	c	namespace:arm_compute
CLGaussian5x5	src/runtime/CL/functions/CLGaussian5x5.cpp	/^CLGaussian5x5::CLGaussian5x5(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLGaussian5x5
CLGaussian5x5HorKernel	arm_compute/core/CL/kernels/CLGaussian5x5Kernel.h	/^class CLGaussian5x5HorKernel : public CLSeparableConvolution5x5HorKernel$/;"	c	namespace:arm_compute
CLGaussian5x5VertKernel	arm_compute/core/CL/kernels/CLGaussian5x5Kernel.h	/^class CLGaussian5x5VertKernel : public CLSeparableConvolution5x5VertKernel$/;"	c	namespace:arm_compute
CLGaussianPyramid	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^class CLGaussianPyramid : public IFunction$/;"	c	namespace:arm_compute
CLGaussianPyramid	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^CLGaussianPyramid::CLGaussianPyramid()$/;"	f	class:CLGaussianPyramid
CLGaussianPyramidHalf	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^class CLGaussianPyramidHalf : public CLGaussianPyramid$/;"	c	namespace:arm_compute
CLGaussianPyramidHalf	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^CLGaussianPyramidHalf::CLGaussianPyramidHalf() \/\/ NOLINT$/;"	f	class:CLGaussianPyramidHalf
CLGaussianPyramidHorKernel	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^class CLGaussianPyramidHorKernel : public ICLSimpleKernel$/;"	c	namespace:arm_compute
CLGaussianPyramidHorKernel	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^CLGaussianPyramidHorKernel::CLGaussianPyramidHorKernel()$/;"	f	class:CLGaussianPyramidHorKernel
CLGaussianPyramidOrb	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^class CLGaussianPyramidOrb : public CLGaussianPyramid$/;"	c	namespace:arm_compute
CLGaussianPyramidOrb	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^CLGaussianPyramidOrb::CLGaussianPyramidOrb() \/\/ NOLINT$/;"	f	class:CLGaussianPyramidOrb
CLGaussianPyramidVertKernel	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^class CLGaussianPyramidVertKernel : public ICLSimpleKernel$/;"	c	namespace:arm_compute
CLGaussianPyramidVertKernel	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^CLGaussianPyramidVertKernel::CLGaussianPyramidVertKernel()$/;"	f	class:CLGaussianPyramidVertKernel
CLGradientKernel	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^class CLGradientKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLGradientKernel	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^CLGradientKernel::CLGradientKernel()$/;"	f	class:CLGradientKernel
CLHOG	arm_compute/runtime/CL/CLHOG.h	/^class CLHOG : public ICLHOG$/;"	c	namespace:arm_compute
CLHOG	src/runtime/CL/CLHOG.cpp	/^CLHOG::CLHOG()$/;"	f	class:CLHOG
CLHOGAccessor	tests/CL/CLHOGAccessor.h	/^    CLHOGAccessor(CLHOG &hog)$/;"	f	class:arm_compute::test::CLHOGAccessor
CLHOGAccessor	tests/CL/CLHOGAccessor.h	/^class CLHOGAccessor : public IHOGAccessor$/;"	c	namespace:arm_compute::test
CLHOGBlockNormalizationKernel	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^class CLHOGBlockNormalizationKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLHOGBlockNormalizationKernel	src/core/CL/kernels/CLHOGDescriptorKernel.cpp	/^CLHOGBlockNormalizationKernel::CLHOGBlockNormalizationKernel()$/;"	f	class:CLHOGBlockNormalizationKernel
CLHOGDescriptor	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^class CLHOGDescriptor : public IFunction$/;"	c	namespace:arm_compute
CLHOGDescriptor	src/runtime/CL/functions/CLHOGDescriptor.cpp	/^CLHOGDescriptor::CLHOGDescriptor(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLHOGDescriptor
CLHOGDetector	arm_compute/runtime/CL/functions/CLHOGDetector.h	/^class CLHOGDetector : public IFunction$/;"	c	namespace:arm_compute
CLHOGDetector	src/runtime/CL/functions/CLHOGDetector.cpp	/^CLHOGDetector::CLHOGDetector()$/;"	f	class:CLHOGDetector
CLHOGDetectorKernel	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	/^class CLHOGDetectorKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLHOGDetectorKernel	src/core/CL/kernels/CLHOGDetectorKernel.cpp	/^CLHOGDetectorKernel::CLHOGDetectorKernel()$/;"	f	class:CLHOGDetectorKernel
CLHOGGradient	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^class CLHOGGradient : public IFunction$/;"	c	namespace:arm_compute
CLHOGGradient	src/runtime/CL/functions/CLHOGGradient.cpp	/^CLHOGGradient::CLHOGGradient(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLHOGGradient
CLHOGMultiDetection	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^class CLHOGMultiDetection : public IFunction$/;"	c	namespace:arm_compute
CLHOGMultiDetection	src/runtime/CL/functions/CLHOGMultiDetection.cpp	/^CLHOGMultiDetection::CLHOGMultiDetection(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:CLHOGMultiDetection
CLHOGOrientationBinningKernel	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^class CLHOGOrientationBinningKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLHOGOrientationBinningKernel	src/core/CL/kernels/CLHOGDescriptorKernel.cpp	/^CLHOGOrientationBinningKernel::CLHOGOrientationBinningKernel()$/;"	f	class:CLHOGOrientationBinningKernel
CLHarrisCorners	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^class CLHarrisCorners : public IFunction$/;"	c	namespace:arm_compute
CLHarrisCorners	src/runtime/CL/functions/CLHarrisCorners.cpp	/^CLHarrisCorners::CLHarrisCorners(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:CLHarrisCorners
CLHarrisScoreKernel	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^class CLHarrisScoreKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLHarrisScoreKernel	src/core/CL/kernels/CLHarrisCornersKernel.cpp	/^CLHarrisScoreKernel::CLHarrisScoreKernel()$/;"	f	class:CLHarrisScoreKernel
CLHistogram	arm_compute/runtime/CL/functions/CLHistogram.h	/^class CLHistogram : public IFunction$/;"	c	namespace:arm_compute
CLHistogram	src/runtime/CL/functions/CLHistogram.cpp	/^CLHistogram::CLHistogram()$/;"	f	class:CLHistogram
CLHistogramBorderKernel	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^class CLHistogramBorderKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLHistogramBorderKernel	src/core/CL/kernels/CLHistogramKernel.cpp	/^CLHistogramBorderKernel::CLHistogramBorderKernel()$/;"	f	class:CLHistogramBorderKernel
CLHistogramKernel	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^class CLHistogramKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLHistogramKernel	src/core/CL/kernels/CLHistogramKernel.cpp	/^CLHistogramKernel::CLHistogramKernel()$/;"	f	class:CLHistogramKernel
CLIm2ColKernel	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^class CLIm2ColKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLIm2ColKernel	src/core/CL/kernels/CLIm2ColKernel.cpp	/^CLIm2ColKernel::CLIm2ColKernel()$/;"	f	class:CLIm2ColKernel
CLIntegralImage	arm_compute/runtime/CL/functions/CLIntegralImage.h	/^class CLIntegralImage : public IFunction$/;"	c	namespace:arm_compute
CLIntegralImage	src/runtime/CL/functions/CLIntegralImage.cpp	/^CLIntegralImage::CLIntegralImage()$/;"	f	class:CLIntegralImage
CLIntegralImageHorKernel	arm_compute/core/CL/kernels/CLIntegralImageKernel.h	/^class CLIntegralImageHorKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLIntegralImageVertKernel	arm_compute/core/CL/kernels/CLIntegralImageKernel.h	/^class CLIntegralImageVertKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLIntegralImageVertKernel	src/core/CL/kernels/CLIntegralImageKernel.cpp	/^CLIntegralImageVertKernel::CLIntegralImageVertKernel()$/;"	f	class:CLIntegralImageVertKernel
CLKernelLibrary	arm_compute/core/CL/CLKernelLibrary.h	/^class CLKernelLibrary$/;"	c	namespace:arm_compute
CLKernelLibrary	src/core/CL/CLKernelLibrary.cpp	/^CLKernelLibrary::CLKernelLibrary()$/;"	f	class:CLKernelLibrary
CLL2NormalizeLayer	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^class CLL2NormalizeLayer : public IFunction$/;"	c	namespace:arm_compute
CLL2NormalizeLayer	src/runtime/CL/functions/CLL2NormalizeLayer.cpp	/^CLL2NormalizeLayer::CLL2NormalizeLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLL2NormalizeLayer
CLL2NormalizeLayerKernel	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^class CLL2NormalizeLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLL2NormalizeLayerKernel	src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp	/^CLL2NormalizeLayerKernel::CLL2NormalizeLayerKernel()$/;"	f	class:CLL2NormalizeLayerKernel
CLLKInternalKeypoint	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^struct CLLKInternalKeypoint$/;"	s	namespace:arm_compute
CLLKTrackerFinalizeKernel	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^class CLLKTrackerFinalizeKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLKTrackerInitKernel	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^class CLLKTrackerInitKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLKTrackerStage0Kernel	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^class CLLKTrackerStage0Kernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLKTrackerStage0Kernel	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^CLLKTrackerStage0Kernel::CLLKTrackerStage0Kernel()$/;"	f	class:CLLKTrackerStage0Kernel
CLLKTrackerStage1Kernel	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^class CLLKTrackerStage1Kernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLKTrackerStage1Kernel	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^CLLKTrackerStage1Kernel::CLLKTrackerStage1Kernel()$/;"	f	class:CLLKTrackerStage1Kernel
CLLSTMLayer	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^class CLLSTMLayer : public IFunction$/;"	c	namespace:arm_compute
CLLSTMLayer	src/runtime/CL/functions/CLLSTMLayer.cpp	/^CLLSTMLayer::CLLSTMLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLLSTMLayer
CLLaplacianPyramid	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^class CLLaplacianPyramid : public IFunction$/;"	c	namespace:arm_compute
CLLaplacianPyramid	src/runtime/CL/functions/CLLaplacianPyramid.cpp	/^CLLaplacianPyramid::CLLaplacianPyramid() \/\/ NOLINT$/;"	f	class:CLLaplacianPyramid
CLLaplacianReconstruct	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^class CLLaplacianReconstruct : public IFunction$/;"	c	namespace:arm_compute
CLLaplacianReconstruct	src/runtime/CL/functions/CLLaplacianReconstruct.cpp	/^CLLaplacianReconstruct::CLLaplacianReconstruct() \/\/ NOLINT$/;"	f	class:CLLaplacianReconstruct
CLLocallyConnectedLayer	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^class CLLocallyConnectedLayer : public IFunction$/;"	c	namespace:arm_compute
CLLocallyConnectedLayer	src/runtime/CL/functions/CLLocallyConnectedLayer.cpp	/^CLLocallyConnectedLayer::CLLocallyConnectedLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLLocallyConnectedLayer
CLLocallyConnectedMatrixMultiplyKernel	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	/^class CLLocallyConnectedMatrixMultiplyKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLocallyConnectedMatrixMultiplyKernel	src/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.cpp	/^CLLocallyConnectedMatrixMultiplyKernel::CLLocallyConnectedMatrixMultiplyKernel()$/;"	f	class:CLLocallyConnectedMatrixMultiplyKernel
CLLogits1DMaxKernel	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^class CLLogits1DMaxKernel : public ICLSimple3DKernel$/;"	c	namespace:arm_compute
CLLogits1DMaxShiftExpSumKernel	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^class CLLogits1DMaxShiftExpSumKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLogits1DMaxShiftExpSumKernel	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^CLLogits1DMaxShiftExpSumKernel::CLLogits1DMaxShiftExpSumKernel()$/;"	f	class:CLLogits1DMaxShiftExpSumKernel
CLLogits1DNormKernel	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^class CLLogits1DNormKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLogits1DNormKernel	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^CLLogits1DNormKernel::CLLogits1DNormKernel()$/;"	f	class:CLLogits1DNormKernel
CLLogits1DShiftExpSumKernel	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^class CLLogits1DShiftExpSumKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLLut	arm_compute/runtime/CL/CLLut.h	/^class CLLut : public ICLLut$/;"	c	namespace:arm_compute
CLLut	src/runtime/CL/CLLut.cpp	/^CLLut::CLLut()$/;"	f	class:CLLut
CLLut	src/runtime/CL/CLLut.cpp	/^CLLut::CLLut(size_t num_elements, DataType data_type)$/;"	f	class:CLLut
CLLutAccessor	tests/CL/CLLutAccessor.h	/^    CLLutAccessor(CLLut &lut)$/;"	f	class:arm_compute::test::CLLutAccessor
CLLutAccessor	tests/CL/CLLutAccessor.h	/^class CLLutAccessor : public ILutAccessor<T>$/;"	c	namespace:arm_compute::test
CLLutAllocator	arm_compute/runtime/CL/CLLutAllocator.h	/^class CLLutAllocator : public ILutAllocator$/;"	c	namespace:arm_compute
CLLutAllocator	src/runtime/CL/CLLutAllocator.cpp	/^CLLutAllocator::CLLutAllocator()$/;"	f	class:CLLutAllocator
CLMagnitude	arm_compute/runtime/CL/functions/CLMagnitude.h	/^class CLMagnitude : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLMagnitudePhaseKernel	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^class CLMagnitudePhaseKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLMagnitudePhaseKernel	src/core/CL/kernels/CLMagnitudePhaseKernel.cpp	/^CLMagnitudePhaseKernel::CLMagnitudePhaseKernel()$/;"	f	class:CLMagnitudePhaseKernel
CLMeanStdDev	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^class CLMeanStdDev : public IFunction$/;"	c	namespace:arm_compute
CLMeanStdDev	src/runtime/CL/functions/CLMeanStdDev.cpp	/^CLMeanStdDev::CLMeanStdDev()$/;"	f	class:CLMeanStdDev
CLMeanStdDevKernel	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^class CLMeanStdDevKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLMeanStdDevKernel	src/core/CL/kernels/CLMeanStdDevKernel.cpp	/^CLMeanStdDevKernel::CLMeanStdDevKernel()$/;"	f	class:CLMeanStdDevKernel
CLMedian3x3	arm_compute/runtime/CL/functions/CLMedian3x3.h	/^class CLMedian3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLMedian3x3Kernel	arm_compute/core/CL/kernels/CLMedian3x3Kernel.h	/^class CLMedian3x3Kernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLMemory	arm_compute/runtime/CL/CLMemory.h	/^class CLMemory$/;"	c	namespace:arm_compute
CLMemory	src/runtime/CL/CLMemory.cpp	/^CLMemory::CLMemory()$/;"	f	class:arm_compute::CLMemory
CLMemory	src/runtime/CL/CLMemory.cpp	/^CLMemory::CLMemory(ICLMemoryRegion *memory)$/;"	f	class:arm_compute::CLMemory
CLMemory	src/runtime/CL/CLMemory.cpp	/^CLMemory::CLMemory(std::shared_ptr<ICLMemoryRegion> memory)$/;"	f	class:arm_compute::CLMemory
CLMinMaxKernel	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^class CLMinMaxKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLMinMaxKernel	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^CLMinMaxKernel::CLMinMaxKernel()$/;"	f	class:arm_compute::CLMinMaxKernel
CLMinMaxLayerKernel	arm_compute/core/CL/kernels/CLMinMaxLayerKernel.h	/^class CLMinMaxLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLMinMaxLayerKernel	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^CLMinMaxLayerKernel::CLMinMaxLayerKernel()$/;"	f	class:CLMinMaxLayerKernel
CLMinMaxLocation	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^class CLMinMaxLocation : public IFunction$/;"	c	namespace:arm_compute
CLMinMaxLocation	src/runtime/CL/functions/CLMinMaxLocation.cpp	/^CLMinMaxLocation::CLMinMaxLocation()$/;"	f	class:arm_compute::CLMinMaxLocation
CLMinMaxLocationKernel	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^class CLMinMaxLocationKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLMinMaxLocationKernel	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^CLMinMaxLocationKernel::CLMinMaxLocationKernel()$/;"	f	class:arm_compute::CLMinMaxLocationKernel
CLMultiHOG	arm_compute/runtime/CL/CLMultiHOG.h	/^class CLMultiHOG : public ICLMultiHOG$/;"	c	namespace:arm_compute
CLMultiHOG	src/runtime/CL/CLMultiHOG.cpp	/^CLMultiHOG::CLMultiHOG(size_t num_models)$/;"	f	class:CLMultiHOG
CLMultiImage	arm_compute/runtime/CL/CLMultiImage.h	/^class CLMultiImage : public ICLMultiImage$/;"	c	namespace:arm_compute
CLMultiImage	src/runtime/CL/CLMultiImage.cpp	/^CLMultiImage::CLMultiImage()$/;"	f	class:CLMultiImage
CLNonLinearFilter	arm_compute/runtime/CL/functions/CLNonLinearFilter.h	/^class CLNonLinearFilter : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLNonLinearFilterKernel	arm_compute/core/CL/kernels/CLNonLinearFilterKernel.h	/^class CLNonLinearFilterKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLNonLinearFilterKernel	src/core/CL/kernels/CLNonLinearFilterKernel.cpp	/^CLNonLinearFilterKernel::CLNonLinearFilterKernel()$/;"	f	class:CLNonLinearFilterKernel
CLNonMaximaSuppression3x3	arm_compute/runtime/CL/functions/CLNonMaximaSuppression3x3.h	/^class CLNonMaximaSuppression3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLNonMaximaSuppression3x3Kernel	arm_compute/core/CL/kernels/CLNonMaximaSuppression3x3Kernel.h	/^class CLNonMaximaSuppression3x3Kernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLNormalizationLayer	arm_compute/runtime/CL/functions/CLNormalizationLayer.h	/^class CLNormalizationLayer : public IFunction$/;"	c	namespace:arm_compute
CLNormalizationLayer	src/runtime/CL/functions/CLNormalizationLayer.cpp	/^CLNormalizationLayer::CLNormalizationLayer()$/;"	f	class:CLNormalizationLayer
CLNormalizationLayerKernel	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^class CLNormalizationLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLNormalizationLayerKernel	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^CLNormalizationLayerKernel::CLNormalizationLayerKernel()$/;"	f	class:CLNormalizationLayerKernel
CLOldValue	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^struct CLOldValue$/;"	s	namespace:arm_compute
CLOpticalFlow	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^class CLOpticalFlow : public IFunction$/;"	c	namespace:arm_compute
CLOpticalFlow	src/runtime/CL/functions/CLOpticalFlow.cpp	/^CLOpticalFlow::CLOpticalFlow(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:CLOpticalFlow
CLPermute	arm_compute/runtime/CL/functions/CLPermute.h	/^class CLPermute : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLPermuteKernel	arm_compute/core/CL/kernels/CLPermuteKernel.h	/^class CLPermuteKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLPermuteKernel	src/core/CL/kernels/CLPermuteKernel.cpp	/^CLPermuteKernel::CLPermuteKernel()$/;"	f	class:CLPermuteKernel
CLPhase	arm_compute/runtime/CL/functions/CLPhase.h	/^class CLPhase : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLPixelWiseMultiplication	arm_compute/runtime/CL/functions/CLPixelWiseMultiplication.h	/^class CLPixelWiseMultiplication : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLPixelWiseMultiplicationKernel	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^class CLPixelWiseMultiplicationKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLPixelWiseMultiplicationKernel	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^CLPixelWiseMultiplicationKernel::CLPixelWiseMultiplicationKernel()$/;"	f	class:CLPixelWiseMultiplicationKernel
CLPoolingLayer	arm_compute/runtime/CL/functions/CLPoolingLayer.h	/^class CLPoolingLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLPoolingLayerKernel	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^class CLPoolingLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLPoolingLayerKernel	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^CLPoolingLayerKernel::CLPoolingLayerKernel()$/;"	f	class:CLPoolingLayerKernel
CLPyramid	arm_compute/runtime/CL/CLPyramid.h	/^class CLPyramid : public IPyramid$/;"	c	namespace:arm_compute
CLPyramid	src/runtime/CL/CLPyramid.cpp	/^CLPyramid::CLPyramid()$/;"	f	class:CLPyramid
CLQuantizationLayer	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	/^class CLQuantizationLayer : public IFunction$/;"	c	namespace:arm_compute
CLQuantizationLayer	src/runtime/CL/functions/CLQuantizationLayer.cpp	/^CLQuantizationLayer::CLQuantizationLayer()$/;"	f	class:CLQuantizationLayer
CLQuantizationLayerKernel	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	/^class CLQuantizationLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLQuantizationLayerKernel	src/core/CL/kernels/CLQuantizationLayerKernel.cpp	/^CLQuantizationLayerKernel::CLQuantizationLayerKernel()$/;"	f	class:CLQuantizationLayerKernel
CLRNNLayer	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^class CLRNNLayer : public IFunction$/;"	c	namespace:arm_compute
CLRNNLayer	src/runtime/CL/functions/CLRNNLayer.cpp	/^CLRNNLayer::CLRNNLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLRNNLayer
CLROIPoolingLayer	arm_compute/runtime/CL/functions/CLROIPoolingLayer.h	/^class CLROIPoolingLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLROIPoolingLayerKernel	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^class CLROIPoolingLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLROIPoolingLayerKernel	src/core/CL/kernels/CLROIPoolingLayerKernel.cpp	/^CLROIPoolingLayerKernel::CLROIPoolingLayerKernel()$/;"	f	class:CLROIPoolingLayerKernel
CLReductionOperation	arm_compute/runtime/CL/functions/CLReductionOperation.h	/^class CLReductionOperation : public IFunction$/;"	c	namespace:arm_compute
CLReductionOperation	src/runtime/CL/functions/CLReductionOperation.cpp	/^CLReductionOperation::CLReductionOperation(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLReductionOperation
CLReductionOperationKernel	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^class CLReductionOperationKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLReductionOperationKernel	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^CLReductionOperationKernel::CLReductionOperationKernel()$/;"	f	class:CLReductionOperationKernel
CLRemap	arm_compute/runtime/CL/functions/CLRemap.h	/^class CLRemap : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLRemapKernel	arm_compute/core/CL/kernels/CLRemapKernel.h	/^class CLRemapKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLRemapKernel	src/core/CL/kernels/CLRemapKernel.cpp	/^CLRemapKernel::CLRemapKernel()$/;"	f	class:CLRemapKernel
CLReshapeLayer	arm_compute/runtime/CL/functions/CLReshapeLayer.h	/^class CLReshapeLayer : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLReshapeLayerKernel	arm_compute/core/CL/kernels/CLReshapeLayerKernel.h	/^class CLReshapeLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLReshapeLayerKernel	src/core/CL/kernels/CLReshapeLayerKernel.cpp	/^CLReshapeLayerKernel::CLReshapeLayerKernel()$/;"	f	class:CLReshapeLayerKernel
CLSGEMMExample	examples/cl_sgemm.cpp	/^class CLSGEMMExample : public Example$/;"	c	file:
CLScale	arm_compute/runtime/CL/functions/CLScale.h	/^class CLScale : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLScaleKernel	arm_compute/core/CL/kernels/CLScaleKernel.h	/^class CLScaleKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLScharr3x3	arm_compute/runtime/CL/functions/CLScharr3x3.h	/^class CLScharr3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLScharr3x3Kernel	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^class CLScharr3x3Kernel : public ICLKernel$/;"	c	namespace:arm_compute
CLScharr3x3Kernel	src/core/CL/kernels/CLScharr3x3Kernel.cpp	/^CLScharr3x3Kernel::CLScharr3x3Kernel()$/;"	f	class:CLScharr3x3Kernel
CLScheduler	arm_compute/runtime/CL/CLScheduler.h	/^class CLScheduler$/;"	c	namespace:arm_compute
CLScheduler	src/runtime/CL/CLScheduler.cpp	/^CLScheduler::CLScheduler()$/;"	f	class:CLScheduler
CLSeparableConvolutionHorKernel	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^class CLSeparableConvolutionHorKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLSeparableConvolutionHorKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^CLSeparableConvolutionHorKernel<matrix_size>::CLSeparableConvolutionHorKernel()$/;"	f	class:CLSeparableConvolutionHorKernel
CLSeparableConvolutionHorKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLSeparableConvolutionHorKernel<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLSeparableConvolutionHorKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLSeparableConvolutionHorKernel<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLSeparableConvolutionHorKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLSeparableConvolutionHorKernel<9>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLSeparableConvolutionVertKernel	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^class CLSeparableConvolutionVertKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLSeparableConvolutionVertKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLSeparableConvolutionVertKernel<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLSeparableConvolutionVertKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLSeparableConvolutionVertKernel<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLSeparableConvolutionVertKernel	src/core/CL/kernels/CLConvolutionKernel.cpp	/^template class arm_compute::CLSeparableConvolutionVertKernel<9>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
CLSobel3x3	arm_compute/runtime/CL/functions/CLSobel3x3.h	/^class CLSobel3x3 : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLSobel3x3Kernel	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^class CLSobel3x3Kernel : public ICLKernel$/;"	c	namespace:arm_compute
CLSobel3x3Kernel	src/core/CL/kernels/CLSobel3x3Kernel.cpp	/^CLSobel3x3Kernel::CLSobel3x3Kernel()$/;"	f	class:CLSobel3x3Kernel
CLSobel5x5	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^class CLSobel5x5 : public IFunction$/;"	c	namespace:arm_compute
CLSobel5x5	src/runtime/CL/functions/CLSobel5x5.cpp	/^CLSobel5x5::CLSobel5x5(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLSobel5x5
CLSobel5x5HorKernel	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^class CLSobel5x5HorKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLSobel5x5HorKernel	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^CLSobel5x5HorKernel::CLSobel5x5HorKernel()$/;"	f	class:CLSobel5x5HorKernel
CLSobel5x5VertKernel	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^class CLSobel5x5VertKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLSobel5x5VertKernel	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^CLSobel5x5VertKernel::CLSobel5x5VertKernel()$/;"	f	class:CLSobel5x5VertKernel
CLSobel7x7	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^class CLSobel7x7 : public IFunction$/;"	c	namespace:arm_compute
CLSobel7x7	src/runtime/CL/functions/CLSobel7x7.cpp	/^CLSobel7x7::CLSobel7x7(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLSobel7x7
CLSobel7x7HorKernel	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^class CLSobel7x7HorKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLSobel7x7HorKernel	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^CLSobel7x7HorKernel::CLSobel7x7HorKernel()$/;"	f	class:CLSobel7x7HorKernel
CLSobel7x7VertKernel	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^class CLSobel7x7VertKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLSobel7x7VertKernel	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^CLSobel7x7VertKernel::CLSobel7x7VertKernel()$/;"	f	class:CLSobel7x7VertKernel
CLSoftmaxLayer	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^class CLSoftmaxLayer : public IFunction$/;"	c	namespace:arm_compute
CLSoftmaxLayer	src/runtime/CL/functions/CLSoftmaxLayer.cpp	/^CLSoftmaxLayer::CLSoftmaxLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLSoftmaxLayer
CLSubTensor	arm_compute/runtime/CL/CLSubTensor.h	/^class CLSubTensor : public ICLTensor$/;"	c	namespace:arm_compute
CLSubTensor	src/runtime/CL/CLSubTensor.cpp	/^CLSubTensor::CLSubTensor()$/;"	f	class:CLSubTensor
CLSubTensor	src/runtime/CL/CLSubTensor.cpp	/^CLSubTensor::CLSubTensor(ICLTensor *parent, const TensorShape &tensor_shape, const Coordinates &coords, bool extend_parent)$/;"	f	class:CLSubTensor
CLSubTensorHandle	src/graph/backends/CL/CLSubTensorHandle.cpp	/^CLSubTensorHandle::CLSubTensorHandle(ITensorHandle *parent_handle, const TensorShape &shape, const Coordinates &coords, bool extend_parent)$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
CLSynthetizeFunction	tests/CL/Helper.h	/^class CLSynthetizeFunction : public ICLSimpleFunction$/;"	c	namespace:arm_compute::test
CLSynthetizeFunctionWithZeroConstantBorder	tests/CL/Helper.h	/^class CLSynthetizeFunctionWithZeroConstantBorder : public ICLSimpleFunction$/;"	c	namespace:arm_compute::test
CLTableLookup	arm_compute/runtime/CL/functions/CLTableLookup.h	/^class CLTableLookup : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLTableLookupKernel	arm_compute/core/CL/kernels/CLTableLookupKernel.h	/^class CLTableLookupKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLTensor	arm_compute/runtime/CL/CLTensor.h	/^class CLTensor : public ICLTensor$/;"	c	namespace:arm_compute
CLTensor	src/runtime/CL/CLTensor.cpp	/^CLTensor::CLTensor()$/;"	f	class:CLTensor
CLTensorAllocator	arm_compute/runtime/CL/CLTensorAllocator.h	/^class CLTensorAllocator : public ITensorAllocator$/;"	c	namespace:arm_compute
CLTensorAllocator	src/runtime/CL/CLTensorAllocator.cpp	/^CLTensorAllocator::CLTensorAllocator(CLTensor *owner)$/;"	f	class:CLTensorAllocator
CLTensorHandle	src/graph/backends/CL/CLTensorHandle.cpp	/^CLTensorHandle::CLTensorHandle(const ITensorInfo &info)$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
CLThreshold	arm_compute/runtime/CL/functions/CLThreshold.h	/^class CLThreshold : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLThresholdKernel	arm_compute/core/CL/kernels/CLThresholdKernel.h	/^class CLThresholdKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLTranspose	arm_compute/runtime/CL/functions/CLTranspose.h	/^class CLTranspose : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLTransposeKernel	arm_compute/core/CL/kernels/CLTransposeKernel.h	/^class CLTransposeKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLTuner	arm_compute/runtime/CL/CLTuner.h	/^class CLTuner : public ICLTuner$/;"	c	namespace:arm_compute
CLTuner	src/runtime/CL/CLTuner.cpp	/^CLTuner::CLTuner(bool tune_new_kernels)$/;"	f	class:CLTuner
CLVersion	arm_compute/core/CL/CLTypes.h	/^enum class CLVersion$/;"	c	namespace:arm_compute
CLWarpAffine	arm_compute/runtime/CL/functions/CLWarpAffine.h	/^class CLWarpAffine : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLWarpAffineKernel	arm_compute/core/CL/kernels/CLWarpAffineKernel.h	/^class CLWarpAffineKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLWarpPerspective	arm_compute/runtime/CL/functions/CLWarpPerspective.h	/^class CLWarpPerspective : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLWarpPerspectiveKernel	arm_compute/core/CL/kernels/CLWarpPerspectiveKernel.h	/^class CLWarpPerspectiveKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
CLWeightsReshapeKernel	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	/^class CLWeightsReshapeKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLWeightsReshapeKernel	src/core/CL/kernels/CLWeightsReshapeKernel.cpp	/^CLWeightsReshapeKernel::CLWeightsReshapeKernel()$/;"	f	class:CLWeightsReshapeKernel
CLWidthConcatenateLayer	arm_compute/runtime/CL/functions/CLWidthConcatenateLayer.h	/^class CLWidthConcatenateLayer : public IFunction$/;"	c	namespace:arm_compute
CLWidthConcatenateLayer	src/runtime/CL/functions/CLWidthConcatenateLayer.cpp	/^CLWidthConcatenateLayer::CLWidthConcatenateLayer() \/\/ NOLINT$/;"	f	class:CLWidthConcatenateLayer
CLWidthConcatenateLayerKernel	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	/^class CLWidthConcatenateLayerKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLWidthConcatenateLayerKernel	src/core/CL/kernels/CLWidthConcatenateLayerKernel.cpp	/^CLWidthConcatenateLayerKernel::CLWidthConcatenateLayerKernel()$/;"	f	class:CLWidthConcatenateLayerKernel
CLWinogradConvolutionLayer	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^class CLWinogradConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
CLWinogradConvolutionLayer	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^CLWinogradConvolutionLayer::CLWinogradConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:CLWinogradConvolutionLayer
CLWinogradFilterTransformKernel	arm_compute/core/CL/kernels/CLWinogradFilterTransformKernel.h	/^class CLWinogradFilterTransformKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLWinogradFilterTransformKernel	src/core/CL/kernels/CLWinogradFilterTransformKernel.cpp	/^CLWinogradFilterTransformKernel::CLWinogradFilterTransformKernel()$/;"	f	class:CLWinogradFilterTransformKernel
CLWinogradInputTransform	arm_compute/runtime/CL/functions/CLWinogradInputTransform.h	/^class CLWinogradInputTransform : public ICLSimpleFunction$/;"	c	namespace:arm_compute
CLWinogradInputTransformKernel	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^class CLWinogradInputTransformKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLWinogradInputTransformKernel	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^CLWinogradInputTransformKernel::CLWinogradInputTransformKernel()$/;"	f	class:CLWinogradInputTransformKernel
CLWinogradOutputTransformKernel	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	/^class CLWinogradOutputTransformKernel : public ICLKernel$/;"	c	namespace:arm_compute
CLWinogradOutputTransformKernel	src/core/CL/kernels/CLWinogradOutputTransformKernel.cpp	/^CLWinogradOutputTransformKernel::CLWinogradOutputTransformKernel()$/;"	f	class:CLWinogradOutputTransformKernel
CL_A	include/CL/cl.h	417;"	d
CL_ABGR	include/CL/cl.h	435;"	d
CL_ACCELERATOR_CONTEXT_INTEL	include/CL/cl_ext_intel.h	117;"	d
CL_ACCELERATOR_DESCRIPTOR_INTEL	include/CL/cl_ext_intel.h	115;"	d
CL_ACCELERATOR_REFERENCE_COUNT_INTEL	include/CL/cl_ext_intel.h	116;"	d
CL_ACCELERATOR_TYPE_INTEL	include/CL/cl_ext_intel.h	118;"	d
CL_ACCELERATOR_TYPE_MOTION_ESTIMATION_INTEL	include/CL/cl_ext_intel.h	112;"	d
CL_ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL	include/CL/cl_ext_intel.h	109;"	d
CL_ADAPTER_D3D9EX_KHR	include/CL/cl_dx9_media_sharing.h	68;"	d
CL_ADAPTER_D3D9_KHR	include/CL/cl_dx9_media_sharing.h	67;"	d
CL_ADAPTER_DXVA_KHR	include/CL/cl_dx9_media_sharing.h	69;"	d
CL_ADDRESS_CLAMP	include/CL/cl.h	498;"	d
CL_ADDRESS_CLAMP_TO_EDGE	include/CL/cl.h	497;"	d
CL_ADDRESS_MIRRORED_REPEAT	include/CL/cl.h	500;"	d
CL_ADDRESS_NONE	include/CL/cl.h	496;"	d
CL_ADDRESS_REPEAT	include/CL/cl.h	499;"	d
CL_AFFINITY_DOMAIN_L1_CACHE_EXT	include/CL/cl_ext.h	244;"	d
CL_AFFINITY_DOMAIN_L2_CACHE_EXT	include/CL/cl_ext.h	245;"	d
CL_AFFINITY_DOMAIN_L3_CACHE_EXT	include/CL/cl_ext.h	246;"	d
CL_AFFINITY_DOMAIN_L4_CACHE_EXT	include/CL/cl_ext.h	247;"	d
CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT	include/CL/cl_ext.h	249;"	d
CL_AFFINITY_DOMAIN_NUMA_EXT	include/CL/cl_ext.h	248;"	d
CL_ALIGNED	include/CL/cl_platform.h	577;"	d
CL_ALIGNED	include/CL/cl_platform.h	583;"	d
CL_ALIGNED	include/CL/cl_platform.h	586;"	d
CL_ALL_DEVICES_FOR_D3D10_KHR	include/CL/cl_d3d10.h	63;"	d
CL_ALL_DEVICES_FOR_D3D11_KHR	include/CL/cl_d3d11.h	63;"	d
CL_ALL_DEVICES_FOR_DX9_INTEL	include/CL/cl_dx9_media_sharing_intel.h	88;"	d
CL_ALL_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR	include/CL/cl_dx9_media_sharing.h	73;"	d
CL_ALL_DEVICES_FOR_VA_API_INTEL	include/CL/cl_va_api_media_sharing_intel.h	81;"	d
CL_API_CALL	include/CL/cl_platform.h	45;"	d
CL_API_CALL	include/CL/cl_platform.h	49;"	d
CL_API_ENTRY	include/CL/cl_platform.h	44;"	d
CL_API_ENTRY	include/CL/cl_platform.h	48;"	d
CL_API_SUFFIX__VERSION_1_0	include/CL/cl_d3d10.h	/^    cl_event *       event) CL_API_SUFFIX__VERSION_1_0;$/;"	t
CL_API_SUFFIX__VERSION_1_0	include/CL/cl_d3d10.h	/^    cl_int *          errcode_ret) CL_API_SUFFIX__VERSION_1_0;$/;"	t
CL_API_SUFFIX__VERSION_1_0	include/CL/cl_d3d10.h	/^    cl_int *       errcode_ret) CL_API_SUFFIX__VERSION_1_0;$/;"	t
CL_API_SUFFIX__VERSION_1_0	include/CL/cl_d3d10.h	/^    cl_uint *                  num_devices) CL_API_SUFFIX__VERSION_1_0;$/;"	t
CL_API_SUFFIX__VERSION_1_0	include/CL/cl_platform.h	63;"	d
CL_API_SUFFIX__VERSION_1_0	include/CL/cl_platform.h	85;"	d
CL_API_SUFFIX__VERSION_1_1	include/CL/cl_platform.h	65;"	d
CL_API_SUFFIX__VERSION_1_1	include/CL/cl_platform.h	87;"	d
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_d3d11.h	/^    cl_event *       event) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_d3d11.h	/^    cl_int *          errcode_ret) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_d3d11.h	/^    cl_int *       errcode_ret) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_d3d11.h	/^    cl_uint *                  num_devices) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_dx9_media_sharing.h	/^    cl_event *       event) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_dx9_media_sharing.h	/^    cl_int *                      errcode_ret) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_dx9_media_sharing.h	/^    cl_uint *                        num_devices) CL_API_SUFFIX__VERSION_1_2;$/;"	t
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	71;"	d
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	78;"	d
CL_API_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	89;"	d
CL_API_SUFFIX__VERSION_2_0	include/CL/cl_platform.h	91;"	d
CL_API_SUFFIX__VERSION_2_1	include/CL/cl_platform.h	93;"	d
CL_API_SUFFIX__VERSION_2_2	include/CL/cl_platform.h	95;"	d
CL_ARGB	include/CL/cl.h	423;"	d
CL_AVC_ME_BIDIR_WEIGHT_HALF_INTEL	include/CL/cl_ext_intel.h	355;"	d
CL_AVC_ME_BIDIR_WEIGHT_QUARTER_INTEL	include/CL/cl_ext_intel.h	353;"	d
CL_AVC_ME_BIDIR_WEIGHT_THIRD_INTEL	include/CL/cl_ext_intel.h	354;"	d
CL_AVC_ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL	include/CL/cl_ext_intel.h	357;"	d
CL_AVC_ME_BIDIR_WEIGHT_TWO_THIRD_INTEL	include/CL/cl_ext_intel.h	356;"	d
CL_AVC_ME_BLOCK_BASED_SKIP_4x4_INTEL	include/CL/cl_ext_intel.h	382;"	d
CL_AVC_ME_BLOCK_BASED_SKIP_8x8_INTEL	include/CL/cl_ext_intel.h	383;"	d
CL_AVC_ME_BORDER_REACHED_BOTTOM_INTEL	include/CL/cl_ext_intel.h	362;"	d
CL_AVC_ME_BORDER_REACHED_LEFT_INTEL	include/CL/cl_ext_intel.h	359;"	d
CL_AVC_ME_BORDER_REACHED_RIGHT_INTEL	include/CL/cl_ext_intel.h	360;"	d
CL_AVC_ME_BORDER_REACHED_TOP_INTEL	include/CL/cl_ext_intel.h	361;"	d
CL_AVC_ME_CHROMA_PREDICTOR_MODE_DC_INTEL	include/CL/cl_ext_intel.h	408;"	d
CL_AVC_ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL	include/CL/cl_ext_intel.h	409;"	d
CL_AVC_ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL	include/CL/cl_ext_intel.h	411;"	d
CL_AVC_ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL	include/CL/cl_ext_intel.h	410;"	d
CL_AVC_ME_COST_PRECISION_DPEL_INTEL	include/CL/cl_ext_intel.h	351;"	d
CL_AVC_ME_COST_PRECISION_HPEL_INTEL	include/CL/cl_ext_intel.h	349;"	d
CL_AVC_ME_COST_PRECISION_PEL_INTEL	include/CL/cl_ext_intel.h	350;"	d
CL_AVC_ME_COST_PRECISION_QPEL_INTEL	include/CL/cl_ext_intel.h	348;"	d
CL_AVC_ME_FRAME_BACKWARD_INTEL	include/CL/cl_ext_intel.h	414;"	d
CL_AVC_ME_FRAME_DUAL_INTEL	include/CL/cl_ext_intel.h	415;"	d
CL_AVC_ME_FRAME_FORWARD_INTEL	include/CL/cl_ext_intel.h	413;"	d
CL_AVC_ME_INTERLACED_SCAN_BOTTOM_FIELD_INTEL	include/CL/cl_ext_intel.h	422;"	d
CL_AVC_ME_INTERLACED_SCAN_TOP_FIELD_INTEL	include/CL/cl_ext_intel.h	421;"	d
CL_AVC_ME_INTRA_16x16_INTEL	include/CL/cl_ext_intel.h	385;"	d
CL_AVC_ME_INTRA_4x4_INTEL	include/CL/cl_ext_intel.h	387;"	d
CL_AVC_ME_INTRA_8x8_INTEL	include/CL/cl_ext_intel.h	386;"	d
CL_AVC_ME_INTRA_LUMA_PARTITION_MASK_16x16_INTEL	include/CL/cl_ext_intel.h	389;"	d
CL_AVC_ME_INTRA_LUMA_PARTITION_MASK_4x4_INTEL	include/CL/cl_ext_intel.h	391;"	d
CL_AVC_ME_INTRA_LUMA_PARTITION_MASK_8x8_INTEL	include/CL/cl_ext_intel.h	390;"	d
CL_AVC_ME_INTRA_NEIGHBOR_LEFT_MASK_ENABLE_INTEL	include/CL/cl_ext_intel.h	393;"	d
CL_AVC_ME_INTRA_NEIGHBOR_UPPER_LEFT_MASK_ENABLE_INTEL	include/CL/cl_ext_intel.h	396;"	d
CL_AVC_ME_INTRA_NEIGHBOR_UPPER_MASK_ENABLE_INTEL	include/CL/cl_ext_intel.h	394;"	d
CL_AVC_ME_INTRA_NEIGHBOR_UPPER_RIGHT_MASK_ENABLE_INTEL	include/CL/cl_ext_intel.h	395;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_DC_INTEL	include/CL/cl_ext_intel.h	400;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL	include/CL/cl_ext_intel.h	401;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL	include/CL/cl_ext_intel.h	402;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL	include/CL/cl_ext_intel.h	405;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL	include/CL/cl_ext_intel.h	399;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL	include/CL/cl_ext_intel.h	407;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_PLANE_INTEL	include/CL/cl_ext_intel.h	403;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL	include/CL/cl_ext_intel.h	398;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL	include/CL/cl_ext_intel.h	406;"	d
CL_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL	include/CL/cl_ext_intel.h	404;"	d
CL_AVC_ME_MAJOR_16x16_INTEL	include/CL/cl_ext_intel.h	305;"	d
CL_AVC_ME_MAJOR_16x8_INTEL	include/CL/cl_ext_intel.h	306;"	d
CL_AVC_ME_MAJOR_8x16_INTEL	include/CL/cl_ext_intel.h	307;"	d
CL_AVC_ME_MAJOR_8x8_INTEL	include/CL/cl_ext_intel.h	308;"	d
CL_AVC_ME_MAJOR_BACKWARD_INTEL	include/CL/cl_ext_intel.h	316;"	d
CL_AVC_ME_MAJOR_BIDIRECTIONAL_INTEL	include/CL/cl_ext_intel.h	317;"	d
CL_AVC_ME_MAJOR_FORWARD_INTEL	include/CL/cl_ext_intel.h	315;"	d
CL_AVC_ME_MINOR_4x4_INTEL	include/CL/cl_ext_intel.h	313;"	d
CL_AVC_ME_MINOR_4x8_INTEL	include/CL/cl_ext_intel.h	312;"	d
CL_AVC_ME_MINOR_8x4_INTEL	include/CL/cl_ext_intel.h	311;"	d
CL_AVC_ME_MINOR_8x8_INTEL	include/CL/cl_ext_intel.h	310;"	d
CL_AVC_ME_PARTITION_MASK_16x16_INTEL	include/CL/cl_ext_intel.h	320;"	d
CL_AVC_ME_PARTITION_MASK_16x8_INTEL	include/CL/cl_ext_intel.h	321;"	d
CL_AVC_ME_PARTITION_MASK_4x4_INTEL	include/CL/cl_ext_intel.h	326;"	d
CL_AVC_ME_PARTITION_MASK_4x8_INTEL	include/CL/cl_ext_intel.h	325;"	d
CL_AVC_ME_PARTITION_MASK_8x16_INTEL	include/CL/cl_ext_intel.h	322;"	d
CL_AVC_ME_PARTITION_MASK_8x4_INTEL	include/CL/cl_ext_intel.h	324;"	d
CL_AVC_ME_PARTITION_MASK_8x8_INTEL	include/CL/cl_ext_intel.h	323;"	d
CL_AVC_ME_PARTITION_MASK_ALL_INTEL	include/CL/cl_ext_intel.h	319;"	d
CL_AVC_ME_SAD_ADJUST_MODE_HAAR_INTEL	include/CL/cl_ext_intel.h	342;"	d
CL_AVC_ME_SAD_ADJUST_MODE_NONE_INTEL	include/CL/cl_ext_intel.h	341;"	d
CL_AVC_ME_SEARCH_WINDOW_16x12_RADIUS_INTEL	include/CL/cl_ext_intel.h	337;"	d
CL_AVC_ME_SEARCH_WINDOW_2x2_RADIUS_INTEL	include/CL/cl_ext_intel.h	339;"	d
CL_AVC_ME_SEARCH_WINDOW_4x4_RADIUS_INTEL	include/CL/cl_ext_intel.h	338;"	d
CL_AVC_ME_SEARCH_WINDOW_CUSTOM_INTEL	include/CL/cl_ext_intel.h	336;"	d
CL_AVC_ME_SEARCH_WINDOW_DIAMOND_INTEL	include/CL/cl_ext_intel.h	332;"	d
CL_AVC_ME_SEARCH_WINDOW_EXHAUSTIVE_INTEL	include/CL/cl_ext_intel.h	328;"	d
CL_AVC_ME_SEARCH_WINDOW_EXTRA_TINY_INTEL	include/CL/cl_ext_intel.h	331;"	d
CL_AVC_ME_SEARCH_WINDOW_LARGE_DIAMOND_INTEL	include/CL/cl_ext_intel.h	333;"	d
CL_AVC_ME_SEARCH_WINDOW_RESERVED0_INTEL	include/CL/cl_ext_intel.h	334;"	d
CL_AVC_ME_SEARCH_WINDOW_RESERVED1_INTEL	include/CL/cl_ext_intel.h	335;"	d
CL_AVC_ME_SEARCH_WINDOW_SMALL_INTEL	include/CL/cl_ext_intel.h	329;"	d
CL_AVC_ME_SEARCH_WINDOW_TINY_INTEL	include/CL/cl_ext_intel.h	330;"	d
CL_AVC_ME_SKIP_BLOCK_16x16_BACKWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	368;"	d
CL_AVC_ME_SKIP_BLOCK_16x16_DUAL_ENABLE_INTEL	include/CL/cl_ext_intel.h	369;"	d
CL_AVC_ME_SKIP_BLOCK_16x16_FORWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	367;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_0_BACKWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	374;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_0_FORWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	373;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_1_BACKWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	376;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_1_FORWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	375;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_2_BACKWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	378;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_2_FORWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	377;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_3_BACKWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	380;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_3_FORWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	379;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_BACKWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	371;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_DUAL_ENABLE_INTEL	include/CL/cl_ext_intel.h	372;"	d
CL_AVC_ME_SKIP_BLOCK_8x8_FORWARD_ENABLE_INTEL	include/CL/cl_ext_intel.h	370;"	d
CL_AVC_ME_SKIP_BLOCK_PARTITION_16x16_INTEL	include/CL/cl_ext_intel.h	364;"	d
CL_AVC_ME_SKIP_BLOCK_PARTITION_8x8_INTEL	include/CL/cl_ext_intel.h	365;"	d
CL_AVC_ME_SLICE_TYPE_BPRED_INTEL	include/CL/cl_ext_intel.h	418;"	d
CL_AVC_ME_SLICE_TYPE_INTRA_INTEL	include/CL/cl_ext_intel.h	419;"	d
CL_AVC_ME_SLICE_TYPE_PRED_INTEL	include/CL/cl_ext_intel.h	417;"	d
CL_AVC_ME_SUBPIXEL_MODE_HPEL_INTEL	include/CL/cl_ext_intel.h	345;"	d
CL_AVC_ME_SUBPIXEL_MODE_INTEGER_INTEL	include/CL/cl_ext_intel.h	344;"	d
CL_AVC_ME_SUBPIXEL_MODE_QPEL_INTEL	include/CL/cl_ext_intel.h	346;"	d
CL_AVC_ME_VERSION_0_INTEL	include/CL/cl_ext_intel.h	302;"	d
CL_AVC_ME_VERSION_1_INTEL	include/CL/cl_ext_intel.h	303;"	d
CL_BGRA	include/CL/cl.h	422;"	d
CL_BLOCKING	include/CL/cl.h	213;"	d
CL_BUFFER_CREATE_TYPE_REGION	include/CL/cl.h	653;"	d
CL_BUILD_ERROR	include/CL/cl.h	551;"	d
CL_BUILD_IN_PROGRESS	include/CL/cl.h	552;"	d
CL_BUILD_NONE	include/CL/cl.h	550;"	d
CL_BUILD_PROGRAM_FAILURE	include/CL/cl.h	148;"	d
CL_BUILD_SUCCESS	include/CL/cl.h	549;"	d
CL_CALLBACK	include/CL/cl.hpp	200;"	d
CL_CALLBACK	include/CL/cl2.hpp	490;"	d
CL_CALLBACK	include/CL/cl_platform.h	46;"	d
CL_CALLBACK	include/CL/cl_platform.h	50;"	d
CL_CGL_SHAREGROUP_KHR	include/CL/cl_gl.h	147;"	d
CL_CHAR_BIT	include/CL/cl_platform.h	213;"	d
CL_CHAR_BIT	include/CL/cl_platform.h	315;"	d
CL_CHAR_MAX	include/CL/cl_platform.h	216;"	d
CL_CHAR_MAX	include/CL/cl_platform.h	318;"	d
CL_CHAR_MIN	include/CL/cl_platform.h	217;"	d
CL_CHAR_MIN	include/CL/cl_platform.h	319;"	d
CL_COMMAND_ACQUIRE_D3D10_OBJECTS_KHR	include/CL/cl_d3d10.h	76;"	d
CL_COMMAND_ACQUIRE_D3D11_OBJECTS_KHR	include/CL/cl_d3d11.h	76;"	d
CL_COMMAND_ACQUIRE_DX9_MEDIA_SURFACES_KHR	include/CL/cl_dx9_media_sharing.h	88;"	d
CL_COMMAND_ACQUIRE_DX9_OBJECTS_INTEL	include/CL/cl_dx9_media_sharing_intel.h	103;"	d
CL_COMMAND_ACQUIRE_EGL_OBJECTS_KHR	include/CL/cl_egl.h	45;"	d
CL_COMMAND_ACQUIRE_GL_OBJECTS	include/CL/cl.h	630;"	d
CL_COMMAND_ACQUIRE_GRALLOC_OBJECTS_IMG	include/CL/cl_ext.h	342;"	d
CL_COMMAND_ACQUIRE_VA_API_MEDIA_SURFACES_INTEL	include/CL/cl_va_api_media_sharing_intel.h	93;"	d
CL_COMMAND_BARRIER	include/CL/cl.h	636;"	d
CL_COMMAND_COPY_BUFFER	include/CL/cl.h	620;"	d
CL_COMMAND_COPY_BUFFER_RECT	include/CL/cl.h	634;"	d
CL_COMMAND_COPY_BUFFER_TO_IMAGE	include/CL/cl.h	625;"	d
CL_COMMAND_COPY_IMAGE	include/CL/cl.h	623;"	d
CL_COMMAND_COPY_IMAGE_TO_BUFFER	include/CL/cl.h	624;"	d
CL_COMMAND_EGL_FENCE_SYNC_OBJECT_KHR	include/CL/cl_egl.h	44;"	d
CL_COMMAND_FILL_BUFFER	include/CL/cl.h	638;"	d
CL_COMMAND_FILL_IMAGE	include/CL/cl.h	639;"	d
CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR	include/CL/cl_gl_ext.h	63;"	d
CL_COMMAND_MAP_BUFFER	include/CL/cl.h	626;"	d
CL_COMMAND_MAP_IMAGE	include/CL/cl.h	627;"	d
CL_COMMAND_MARKER	include/CL/cl.h	629;"	d
CL_COMMAND_MIGRATE_MEM_OBJECTS	include/CL/cl.h	637;"	d
CL_COMMAND_NATIVE_KERNEL	include/CL/cl.h	617;"	d
CL_COMMAND_NDRANGE_KERNEL	include/CL/cl.h	615;"	d
CL_COMMAND_READ_BUFFER	include/CL/cl.h	618;"	d
CL_COMMAND_READ_BUFFER_RECT	include/CL/cl.h	632;"	d
CL_COMMAND_READ_IMAGE	include/CL/cl.h	621;"	d
CL_COMMAND_RELEASE_D3D10_OBJECTS_KHR	include/CL/cl_d3d10.h	77;"	d
CL_COMMAND_RELEASE_D3D11_OBJECTS_KHR	include/CL/cl_d3d11.h	77;"	d
CL_COMMAND_RELEASE_DX9_MEDIA_SURFACES_KHR	include/CL/cl_dx9_media_sharing.h	89;"	d
CL_COMMAND_RELEASE_DX9_OBJECTS_INTEL	include/CL/cl_dx9_media_sharing_intel.h	104;"	d
CL_COMMAND_RELEASE_EGL_OBJECTS_KHR	include/CL/cl_egl.h	46;"	d
CL_COMMAND_RELEASE_GL_OBJECTS	include/CL/cl.h	631;"	d
CL_COMMAND_RELEASE_GRALLOC_OBJECTS_IMG	include/CL/cl_ext.h	343;"	d
CL_COMMAND_RELEASE_VA_API_MEDIA_SURFACES_INTEL	include/CL/cl_va_api_media_sharing_intel.h	94;"	d
CL_COMMAND_SVM_FREE	include/CL/cl.h	640;"	d
CL_COMMAND_SVM_FREE_ARM	include/CL/cl_ext.h	510;"	d
CL_COMMAND_SVM_MAP	include/CL/cl.h	643;"	d
CL_COMMAND_SVM_MAP_ARM	include/CL/cl_ext.h	513;"	d
CL_COMMAND_SVM_MEMCPY	include/CL/cl.h	641;"	d
CL_COMMAND_SVM_MEMCPY_ARM	include/CL/cl_ext.h	511;"	d
CL_COMMAND_SVM_MEMFILL	include/CL/cl.h	642;"	d
CL_COMMAND_SVM_MEMFILL_ARM	include/CL/cl_ext.h	512;"	d
CL_COMMAND_SVM_UNMAP	include/CL/cl.h	644;"	d
CL_COMMAND_SVM_UNMAP_ARM	include/CL/cl_ext.h	514;"	d
CL_COMMAND_TASK	include/CL/cl.h	616;"	d
CL_COMMAND_UNMAP_MEM_OBJECT	include/CL/cl.h	628;"	d
CL_COMMAND_USER	include/CL/cl.h	635;"	d
CL_COMMAND_WRITE_BUFFER	include/CL/cl.h	619;"	d
CL_COMMAND_WRITE_BUFFER_RECT	include/CL/cl.h	633;"	d
CL_COMMAND_WRITE_IMAGE	include/CL/cl.h	622;"	d
CL_COMPILER_NOT_AVAILABLE	include/CL/cl.h	140;"	d
CL_COMPILE_PROGRAM_FAILURE	include/CL/cl.h	152;"	d
CL_COMPLETE	include/CL/cl.h	647;"	d
CL_CONTEXT_ADAPTER_D3D9EX_KHR	include/CL/cl_dx9_media_sharing.h	77;"	d
CL_CONTEXT_ADAPTER_D3D9_KHR	include/CL/cl_dx9_media_sharing.h	76;"	d
CL_CONTEXT_ADAPTER_DXVA_KHR	include/CL/cl_dx9_media_sharing.h	78;"	d
CL_CONTEXT_D3D10_DEVICE_KHR	include/CL/cl_d3d10.h	66;"	d
CL_CONTEXT_D3D10_PREFER_SHARED_RESOURCES_KHR	include/CL/cl_d3d10.h	67;"	d
CL_CONTEXT_D3D11_DEVICE_KHR	include/CL/cl_d3d11.h	66;"	d
CL_CONTEXT_D3D11_PREFER_SHARED_RESOURCES_KHR	include/CL/cl_d3d11.h	67;"	d
CL_CONTEXT_D3D9EX_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	92;"	d
CL_CONTEXT_D3D9_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	91;"	d
CL_CONTEXT_DEVICES	include/CL/cl.h	360;"	d
CL_CONTEXT_DIAGNOSTICS_LEVEL_ALL_INTEL	include/CL/cl_ext_intel.h	277;"	d
CL_CONTEXT_DIAGNOSTICS_LEVEL_BAD_INTEL	include/CL/cl_ext_intel.h	279;"	d
CL_CONTEXT_DIAGNOSTICS_LEVEL_GOOD_INTEL	include/CL/cl_ext_intel.h	278;"	d
CL_CONTEXT_DIAGNOSTICS_LEVEL_NEUTRAL_INTEL	include/CL/cl_ext_intel.h	280;"	d
CL_CONTEXT_DXVA_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	93;"	d
CL_CONTEXT_INTEROP_USER_SYNC	include/CL/cl.h	366;"	d
CL_CONTEXT_MEMORY_INITIALIZE_KHR	include/CL/cl_ext.h	142;"	d
CL_CONTEXT_NUM_DEVICES	include/CL/cl.h	362;"	d
CL_CONTEXT_PLATFORM	include/CL/cl.h	365;"	d
CL_CONTEXT_PROPERTIES	include/CL/cl.h	361;"	d
CL_CONTEXT_REFERENCE_COUNT	include/CL/cl.h	359;"	d
CL_CONTEXT_SHOW_DIAGNOSTICS_INTEL	include/CL/cl_ext_intel.h	275;"	d
CL_CONTEXT_TERMINATE_KHR	include/CL/cl_ext.h	150;"	d
CL_CONTEXT_VA_API_DISPLAY_INTEL	include/CL/cl_va_api_media_sharing_intel.h	84;"	d
CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR	include/CL/cl_gl.h	139;"	d
CL_D3D10_DEVICE_KHR	include/CL/cl_d3d10.h	58;"	d
CL_D3D10_DXGI_ADAPTER_KHR	include/CL/cl_d3d10.h	59;"	d
CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR	include/CL/cl_d3d10.h	54;"	d
CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR	include/CL/cl_d3d10.h	55;"	d
CL_D3D11_DEVICE_KHR	include/CL/cl_d3d11.h	58;"	d
CL_D3D11_DXGI_ADAPTER_KHR	include/CL/cl_d3d11.h	59;"	d
CL_D3D11_RESOURCE_ALREADY_ACQUIRED_KHR	include/CL/cl_d3d11.h	54;"	d
CL_D3D11_RESOURCE_NOT_ACQUIRED_KHR	include/CL/cl_d3d11.h	55;"	d
CL_D3D9EX_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	83;"	d
CL_D3D9_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	82;"	d
CL_DBL_DIG	include/CL/cl_platform.h	251;"	d
CL_DBL_DIG	include/CL/cl_platform.h	353;"	d
CL_DBL_EPSILON	include/CL/cl_platform.h	260;"	d
CL_DBL_EPSILON	include/CL/cl_platform.h	362;"	d
CL_DBL_MANT_DIG	include/CL/cl_platform.h	252;"	d
CL_DBL_MANT_DIG	include/CL/cl_platform.h	354;"	d
CL_DBL_MAX	include/CL/cl_platform.h	258;"	d
CL_DBL_MAX	include/CL/cl_platform.h	360;"	d
CL_DBL_MAX_10_EXP	include/CL/cl_platform.h	253;"	d
CL_DBL_MAX_10_EXP	include/CL/cl_platform.h	355;"	d
CL_DBL_MAX_EXP	include/CL/cl_platform.h	254;"	d
CL_DBL_MAX_EXP	include/CL/cl_platform.h	356;"	d
CL_DBL_MIN	include/CL/cl_platform.h	259;"	d
CL_DBL_MIN	include/CL/cl_platform.h	361;"	d
CL_DBL_MIN_10_EXP	include/CL/cl_platform.h	255;"	d
CL_DBL_MIN_10_EXP	include/CL/cl_platform.h	357;"	d
CL_DBL_MIN_EXP	include/CL/cl_platform.h	256;"	d
CL_DBL_MIN_EXP	include/CL/cl_platform.h	358;"	d
CL_DBL_RADIX	include/CL/cl_platform.h	257;"	d
CL_DBL_RADIX	include/CL/cl_platform.h	359;"	d
CL_DEPTH	include/CL/cl.h	429;"	d
CL_DEPTH_STENCIL	include/CL/cl.h	430;"	d
CL_DEVICES_FOR_GL_CONTEXT_KHR	include/CL/cl_gl.h	140;"	d
CL_DEVICE_ADDRESS_BITS	include/CL/cl.h	246;"	d
CL_DEVICE_AFFINITY_DOMAINS_EXT	include/CL/cl_ext.h	234;"	d
CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE	include/CL/cl.h	379;"	d
CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE	include/CL/cl.h	378;"	d
CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE	include/CL/cl.h	377;"	d
CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE	include/CL/cl.h	376;"	d
CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE	include/CL/cl.h	380;"	d
CL_DEVICE_AFFINITY_DOMAIN_NUMA	include/CL/cl.h	375;"	d
CL_DEVICE_AVAILABLE	include/CL/cl.h	272;"	d
CL_DEVICE_AVC_ME_SUPPORTS_PREEMPTION_INTEL	include/CL/cl_ext_intel.h	300;"	d
CL_DEVICE_AVC_ME_SUPPORTS_TEXTURE_SAMPLER_USE_INTEL	include/CL/cl_ext_intel.h	299;"	d
CL_DEVICE_AVC_ME_VERSION_INTEL	include/CL/cl_ext_intel.h	298;"	d
CL_DEVICE_BUILT_IN_KERNELS	include/CL/cl.h	297;"	d
CL_DEVICE_COMPILER_AVAILABLE	include/CL/cl.h	273;"	d
CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV	include/CL/cl_ext.h	173;"	d
CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV	include/CL/cl_ext.h	174;"	d
CL_DEVICE_DOUBLE_FP_CONFIG	include/CL/cl.h	284;"	d
CL_DEVICE_ENDIAN_LITTLE	include/CL/cl.h	271;"	d
CL_DEVICE_ERROR_CORRECTION_SUPPORT	include/CL/cl.h	269;"	d
CL_DEVICE_EXECUTION_CAPABILITIES	include/CL/cl.h	274;"	d
CL_DEVICE_EXTENSIONS	include/CL/cl.h	282;"	d
CL_DEVICE_EXT_MEM_PADDING_IN_BYTES_QCOM	include/CL/cl_ext.h	262;"	d
CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE	include/CL/cl.h	262;"	d
CL_DEVICE_GLOBAL_MEM_CACHE_SIZE	include/CL/cl.h	263;"	d
CL_DEVICE_GLOBAL_MEM_CACHE_TYPE	include/CL/cl.h	261;"	d
CL_DEVICE_GLOBAL_MEM_SIZE	include/CL/cl.h	264;"	d
CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE	include/CL/cl.h	318;"	d
CL_DEVICE_GPU_OVERLAP_NV	include/CL/cl_ext.h	177;"	d
CL_DEVICE_HALF_FP_CONFIG	include/CL/cl.h	285;"	d
CL_DEVICE_HALF_FP_CONFIG	include/CL/cl_ext.h	49;"	d
CL_DEVICE_HOST_UNIFIED_MEMORY	include/CL/cl.h	287;"	d
CL_DEVICE_IL_VERSION	include/CL/cl.h	325;"	d
CL_DEVICE_IMAGE2D_MAX_HEIGHT	include/CL/cl.h	251;"	d
CL_DEVICE_IMAGE2D_MAX_WIDTH	include/CL/cl.h	250;"	d
CL_DEVICE_IMAGE3D_MAX_DEPTH	include/CL/cl.h	254;"	d
CL_DEVICE_IMAGE3D_MAX_HEIGHT	include/CL/cl.h	253;"	d
CL_DEVICE_IMAGE3D_MAX_WIDTH	include/CL/cl.h	252;"	d
CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT	include/CL/cl.h	309;"	d
CL_DEVICE_IMAGE_MAX_ARRAY_SIZE	include/CL/cl.h	299;"	d
CL_DEVICE_IMAGE_MAX_BUFFER_SIZE	include/CL/cl.h	298;"	d
CL_DEVICE_IMAGE_PITCH_ALIGNMENT	include/CL/cl.h	308;"	d
CL_DEVICE_IMAGE_SUPPORT	include/CL/cl.h	255;"	d
CL_DEVICE_INTEGRATED_MEMORY_NV	include/CL/cl_ext.h	179;"	d
CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV	include/CL/cl_ext.h	178;"	d
CL_DEVICE_LINKER_AVAILABLE	include/CL/cl.h	296;"	d
CL_DEVICE_LOCAL_MEM_SIZE	include/CL/cl.h	268;"	d
CL_DEVICE_LOCAL_MEM_TYPE	include/CL/cl.h	267;"	d
CL_DEVICE_MAX_CLOCK_FREQUENCY	include/CL/cl.h	245;"	d
CL_DEVICE_MAX_COMPUTE_UNITS	include/CL/cl.h	235;"	d
CL_DEVICE_MAX_CONSTANT_ARGS	include/CL/cl.h	266;"	d
CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE	include/CL/cl.h	265;"	d
CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE	include/CL/cl.h	311;"	d
CL_DEVICE_MAX_MEM_ALLOC_SIZE	include/CL/cl.h	249;"	d
CL_DEVICE_MAX_NAMED_BARRIER_COUNT_KHR	include/CL/cl_ext.h	442;"	d
CL_DEVICE_MAX_NUM_SUB_GROUPS	include/CL/cl.h	326;"	d
CL_DEVICE_MAX_ON_DEVICE_EVENTS	include/CL/cl.h	316;"	d
CL_DEVICE_MAX_ON_DEVICE_QUEUES	include/CL/cl.h	315;"	d
CL_DEVICE_MAX_PARAMETER_SIZE	include/CL/cl.h	256;"	d
CL_DEVICE_MAX_PIPE_ARGS	include/CL/cl.h	319;"	d
CL_DEVICE_MAX_READ_IMAGE_ARGS	include/CL/cl.h	247;"	d
CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS	include/CL/cl.h	310;"	d
CL_DEVICE_MAX_SAMPLERS	include/CL/cl.h	257;"	d
CL_DEVICE_MAX_WORK_GROUP_SIZE	include/CL/cl.h	237;"	d
CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS	include/CL/cl.h	236;"	d
CL_DEVICE_MAX_WORK_ITEM_SIZES	include/CL/cl.h	238;"	d
CL_DEVICE_MAX_WRITE_IMAGE_ARGS	include/CL/cl.h	248;"	d
CL_DEVICE_MEM_BASE_ADDR_ALIGN	include/CL/cl.h	258;"	d
CL_DEVICE_ME_VERSION_INTEL	include/CL/cl_ext_intel.h	179;"	d
CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE	include/CL/cl.h	259;"	d
CL_DEVICE_NAME	include/CL/cl.h	277;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR	include/CL/cl.h	288;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE	include/CL/cl.h	293;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT	include/CL/cl.h	292;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF	include/CL/cl.h	294;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_INT	include/CL/cl.h	290;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG	include/CL/cl.h	291;"	d
CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT	include/CL/cl.h	289;"	d
CL_DEVICE_NOT_AVAILABLE	include/CL/cl.h	139;"	d
CL_DEVICE_NOT_FOUND	include/CL/cl.h	138;"	d
CL_DEVICE_NUM_SIMULTANEOUS_INTEROPS_INTEL	include/CL/cl_ext_intel.h	236;"	d
CL_DEVICE_OPENCL_C_VERSION	include/CL/cl.h	295;"	d
CL_DEVICE_PAGE_SIZE_QCOM	include/CL/cl_ext.h	263;"	d
CL_DEVICE_PARENT_DEVICE	include/CL/cl.h	300;"	d
CL_DEVICE_PARENT_DEVICE_EXT	include/CL/cl_ext.h	232;"	d
CL_DEVICE_PARTITION_AFFINITY_DOMAIN	include/CL/cl.h	303;"	d
CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN	include/CL/cl.h	372;"	d
CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT	include/CL/cl_ext.h	229;"	d
CL_DEVICE_PARTITION_BY_COUNTS	include/CL/cl.h	370;"	d
CL_DEVICE_PARTITION_BY_COUNTS_EXT	include/CL/cl_ext.h	227;"	d
CL_DEVICE_PARTITION_BY_COUNTS_LIST_END	include/CL/cl.h	371;"	d
CL_DEVICE_PARTITION_BY_NAMES_EXT	include/CL/cl_ext.h	228;"	d
CL_DEVICE_PARTITION_BY_NAMES_INTEL	include/CL/cl_ext_intel.h	81;"	d
CL_DEVICE_PARTITION_EQUALLY	include/CL/cl.h	369;"	d
CL_DEVICE_PARTITION_EQUALLY_EXT	include/CL/cl_ext.h	226;"	d
CL_DEVICE_PARTITION_FAILED	include/CL/cl.h	155;"	d
CL_DEVICE_PARTITION_FAILED_EXT	include/CL/cl_ext.h	239;"	d
CL_DEVICE_PARTITION_MAX_SUB_DEVICES	include/CL/cl.h	301;"	d
CL_DEVICE_PARTITION_PROPERTIES	include/CL/cl.h	302;"	d
CL_DEVICE_PARTITION_STYLE_EXT	include/CL/cl_ext.h	236;"	d
CL_DEVICE_PARTITION_TYPE	include/CL/cl.h	304;"	d
CL_DEVICE_PARTITION_TYPES_EXT	include/CL/cl_ext.h	233;"	d
CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS	include/CL/cl.h	320;"	d
CL_DEVICE_PIPE_MAX_PACKET_SIZE	include/CL/cl.h	321;"	d
CL_DEVICE_PLANAR_YUV_MAX_HEIGHT_INTEL	include/CL/cl_ext_intel.h	292;"	d
CL_DEVICE_PLANAR_YUV_MAX_WIDTH_INTEL	include/CL/cl_ext_intel.h	291;"	d
CL_DEVICE_PLATFORM	include/CL/cl.h	283;"	d
CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT	include/CL/cl.h	323;"	d
CL_DEVICE_PREFERRED_INTEROP_USER_SYNC	include/CL/cl.h	306;"	d
CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT	include/CL/cl.h	324;"	d
CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT	include/CL/cl.h	322;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR	include/CL/cl.h	239;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE	include/CL/cl.h	244;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT	include/CL/cl.h	243;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF	include/CL/cl.h	286;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT	include/CL/cl.h	241;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG	include/CL/cl.h	242;"	d
CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT	include/CL/cl.h	240;"	d
CL_DEVICE_PRINTF_BUFFER_SIZE	include/CL/cl.h	307;"	d
CL_DEVICE_PROFILE	include/CL/cl.h	280;"	d
CL_DEVICE_PROFILING_TIMER_OFFSET_AMD	include/CL/cl_ext.h	184;"	d
CL_DEVICE_PROFILING_TIMER_RESOLUTION	include/CL/cl.h	270;"	d
CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE	include/CL/cl.h	314;"	d
CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE	include/CL/cl.h	313;"	d
CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES	include/CL/cl.h	312;"	d
CL_DEVICE_QUEUE_ON_HOST_PROPERTIES	include/CL/cl.h	276;"	d
CL_DEVICE_QUEUE_PROPERTIES	include/CL/cl.h	275;"	d
CL_DEVICE_REFERENCE_COUNT	include/CL/cl.h	305;"	d
CL_DEVICE_REFERENCE_COUNT_EXT	include/CL/cl_ext.h	235;"	d
CL_DEVICE_REGISTERS_PER_BLOCK_NV	include/CL/cl_ext.h	175;"	d
CL_DEVICE_SIMULTANEOUS_INTEROPS_INTEL	include/CL/cl_ext_intel.h	235;"	d
CL_DEVICE_SINGLE_FP_CONFIG	include/CL/cl.h	260;"	d
CL_DEVICE_SPIR_VERSIONS	include/CL/cl_ext.h	165;"	d
CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS	include/CL/cl.h	327;"	d
CL_DEVICE_SUB_GROUP_SIZES_INTEL	include/CL/cl_ext_intel.h	263;"	d
CL_DEVICE_SVM_ATOMICS	include/CL/cl.h	386;"	d
CL_DEVICE_SVM_ATOMICS_ARM	include/CL/cl_ext.h	520;"	d
CL_DEVICE_SVM_CAPABILITIES	include/CL/cl.h	317;"	d
CL_DEVICE_SVM_CAPABILITIES_ARM	include/CL/cl_ext.h	500;"	d
CL_DEVICE_SVM_COARSE_GRAIN_BUFFER	include/CL/cl.h	383;"	d
CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_ARM	include/CL/cl_ext.h	517;"	d
CL_DEVICE_SVM_FINE_GRAIN_BUFFER	include/CL/cl.h	384;"	d
CL_DEVICE_SVM_FINE_GRAIN_BUFFER_ARM	include/CL/cl_ext.h	518;"	d
CL_DEVICE_SVM_FINE_GRAIN_SYSTEM	include/CL/cl.h	385;"	d
CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_ARM	include/CL/cl_ext.h	519;"	d
CL_DEVICE_TERMINATE_CAPABILITY_KHR	include/CL/cl_ext.h	149;"	d
CL_DEVICE_TYPE	include/CL/cl.h	233;"	d
CL_DEVICE_TYPE_ACCELERATOR	include/CL/cl.h	228;"	d
CL_DEVICE_TYPE_ALL	include/CL/cl.h	230;"	d
CL_DEVICE_TYPE_CPU	include/CL/cl.h	226;"	d
CL_DEVICE_TYPE_CUSTOM	include/CL/cl.h	229;"	d
CL_DEVICE_TYPE_DEFAULT	include/CL/cl.h	225;"	d
CL_DEVICE_TYPE_GPU	include/CL/cl.h	227;"	d
CL_DEVICE_VENDOR	include/CL/cl.h	278;"	d
CL_DEVICE_VENDOR_ID	include/CL/cl.h	234;"	d
CL_DEVICE_VERSION	include/CL/cl.h	281;"	d
CL_DEVICE_WARP_SIZE_NV	include/CL/cl_ext.h	176;"	d
CL_DRIVER_VERSION	include/CL/cl.h	279;"	d
CL_DX9_MEDIA_SURFACE_ALREADY_ACQUIRED_KHR	include/CL/cl_dx9_media_sharing.h	63;"	d
CL_DX9_MEDIA_SURFACE_NOT_ACQUIRED_KHR	include/CL/cl_dx9_media_sharing.h	64;"	d
CL_DX9_RESOURCE_ALREADY_ACQUIRED_INTEL	include/CL/cl_dx9_media_sharing_intel.h	78;"	d
CL_DX9_RESOURCE_NOT_ACQUIRED_INTEL	include/CL/cl_dx9_media_sharing_intel.h	79;"	d
CL_DXVA_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	84;"	d
CL_EGL_DISPLAY_KHR	include/CL/cl_gl.h	144;"	d
CL_EGL_RESOURCE_NOT_ACQUIRED_KHR	include/CL/cl_egl.h	50;"	d
CL_EGL_YUV_PLANE_INTEL	include/CL/cl_ext_intel.h	244;"	d
CL_EVENT_COMMAND_EXECUTION_STATUS	include/CL/cl.h	611;"	d
CL_EVENT_COMMAND_QUEUE	include/CL/cl.h	608;"	d
CL_EVENT_COMMAND_TYPE	include/CL/cl.h	609;"	d
CL_EVENT_CONTEXT	include/CL/cl.h	612;"	d
CL_EVENT_REFERENCE_COUNT	include/CL/cl.h	610;"	d
CL_EXEC_KERNEL	include/CL/cl.h	349;"	d
CL_EXEC_NATIVE_KERNEL	include/CL/cl.h	350;"	d
CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST	include/CL/cl.h	151;"	d
CL_EXTENSION_WEAK_LINK	include/CL/cl_platform.h	62;"	d
CL_EXTENSION_WEAK_LINK	include/CL/cl_platform.h	84;"	d
CL_EXT_PREFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	101;"	d
CL_EXT_PREFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	104;"	d
CL_EXT_PREFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	141;"	d
CL_EXT_PREFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	144;"	d
CL_EXT_PREFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	180;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl.hpp	193;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl2.hpp	476;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	109;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	112;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	149;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	152;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	183;"	d
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	74;"	d
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED	include/CL/cl2.hpp	483;"	d
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	117;"	d
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	120;"	d
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	157;"	d
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	160;"	d
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	186;"	d
CL_EXT_PREFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	125;"	d
CL_EXT_PREFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	128;"	d
CL_EXT_PREFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	165;"	d
CL_EXT_PREFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	168;"	d
CL_EXT_PREFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	189;"	d
CL_EXT_PREFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	133;"	d
CL_EXT_PREFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	136;"	d
CL_EXT_PREFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	173;"	d
CL_EXT_PREFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	176;"	d
CL_EXT_PREFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	192;"	d
CL_EXT_SUFFIX__VERSION_1_0	include/CL/cl_platform.h	64;"	d
CL_EXT_SUFFIX__VERSION_1_0	include/CL/cl_platform.h	86;"	d
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	100;"	d
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	103;"	d
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	140;"	d
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	143;"	d
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	179;"	d
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED	include/CL/cl_platform.h	68;"	d
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_dx9_media_sharing_intel.h	/^    cl_event*                   \/* event *\/) CL_EXT_SUFFIX__VERSION_1_1;$/;"	t
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_dx9_media_sharing_intel.h	/^    cl_int*                     \/* errcode_ret *\/) CL_EXT_SUFFIX__VERSION_1_1;$/;"	t
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_dx9_media_sharing_intel.h	/^    cl_uint*                    \/* num_devices *\/) CL_EXT_SUFFIX__VERSION_1_1;$/;"	t
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_ext.h	/^                                                cl_uint * \/*num_devices*\/ ) CL_EXT_SUFFIX__VERSION_1_1;$/;"	t
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_ext.h	/^    (CL_API_CALL *clReleaseDeviceEXT_fn)( cl_device_id \/*device*\/ ) CL_EXT_SUFFIX__VERSION_1_1;$/;"	t
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_ext.h	/^    (CL_API_CALL *clRetainDeviceEXT_fn)( cl_device_id \/*device*\/ ) CL_EXT_SUFFIX__VERSION_1_1;$/;"	t
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_platform.h	67;"	d
CL_EXT_SUFFIX__VERSION_1_1	include/CL/cl_platform.h	88;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl.hpp	/^UnloadCompiler() CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED;$/;"	m	namespace:cl
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl.hpp	/^__local(::size_t size) CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED;$/;"	m	namespace:cl
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl.hpp	/^class CL_EXT_PREFIX__VERSION_1_1_DEPRECATED Image2DGL CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED : public Image2D$/;"	c	namespace:cl
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl.hpp	/^class CL_EXT_PREFIX__VERSION_1_1_DEPRECATED vector CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED$/;"	c	namespace:cl
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl.hpp	196;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl2.hpp	/^UnloadCompiler() CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED;$/;"	m	namespace:cl
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl2.hpp	/^} CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED;$/;"	m	namespace:cl	typeref:class:cl::Image2DGL
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl2.hpp	479;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	108;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	111;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	148;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	151;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	182;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	75;"	d
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED	include/CL/cl_platform.h	81;"	d
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_ext.h	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *clTerminateContextKHR_fn)(cl_context \/* context *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_ext_intel.h	/^    cl_accelerator_intel        \/* accelerator *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_ext_intel.h	/^    cl_int*                     \/* errcode_ret *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_ext_intel.h	/^    size_t*                     \/* param_value_size_ret *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	73;"	d
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	80;"	d
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	90;"	d
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_va_api_media_sharing_intel.h	/^    cl_event*                     \/* event *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_va_api_media_sharing_intel.h	/^    cl_int*                       \/* errcode_ret *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2	include/CL/cl_va_api_media_sharing_intel.h	/^    cl_uint*                      \/* num_devices *\/) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED	include/CL/cl2.hpp	486;"	d
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	116;"	d
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	119;"	d
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	156;"	d
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	159;"	d
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED	include/CL/cl_platform.h	185;"	d
CL_EXT_SUFFIX__VERSION_2_0	include/CL/cl_platform.h	92;"	d
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED	include/CL/cl_ext.h	/^						      size_t* \/*param_value_size_ret*\/ ) CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED;$/;"	t
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	124;"	d
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	127;"	d
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	164;"	d
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	167;"	d
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED	include/CL/cl_platform.h	188;"	d
CL_EXT_SUFFIX__VERSION_2_1	include/CL/cl_platform.h	94;"	d
CL_EXT_SUFFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	132;"	d
CL_EXT_SUFFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	135;"	d
CL_EXT_SUFFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	172;"	d
CL_EXT_SUFFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	175;"	d
CL_EXT_SUFFIX__VERSION_2_1_DEPRECATED	include/CL/cl_platform.h	191;"	d
CL_EXT_SUFFIX__VERSION_2_2	include/CL/cl_platform.h	96;"	d
CL_FALSE	include/CL/cl.h	211;"	d
CL_FILTER_LINEAR	include/CL/cl.h	504;"	d
CL_FILTER_NEAREST	include/CL/cl.h	503;"	d
CL_FLOAT	include/CL/cl.h	452;"	d
CL_FLT_DIG	include/CL/cl_platform.h	229;"	d
CL_FLT_DIG	include/CL/cl_platform.h	331;"	d
CL_FLT_EPSILON	include/CL/cl_platform.h	238;"	d
CL_FLT_EPSILON	include/CL/cl_platform.h	340;"	d
CL_FLT_MANT_DIG	include/CL/cl_platform.h	230;"	d
CL_FLT_MANT_DIG	include/CL/cl_platform.h	332;"	d
CL_FLT_MAX	include/CL/cl_platform.h	236;"	d
CL_FLT_MAX	include/CL/cl_platform.h	338;"	d
CL_FLT_MAX_10_EXP	include/CL/cl_platform.h	231;"	d
CL_FLT_MAX_10_EXP	include/CL/cl_platform.h	333;"	d
CL_FLT_MAX_EXP	include/CL/cl_platform.h	232;"	d
CL_FLT_MAX_EXP	include/CL/cl_platform.h	334;"	d
CL_FLT_MIN	include/CL/cl_platform.h	237;"	d
CL_FLT_MIN	include/CL/cl_platform.h	339;"	d
CL_FLT_MIN_10_EXP	include/CL/cl_platform.h	233;"	d
CL_FLT_MIN_10_EXP	include/CL/cl_platform.h	335;"	d
CL_FLT_MIN_EXP	include/CL/cl_platform.h	234;"	d
CL_FLT_MIN_EXP	include/CL/cl_platform.h	336;"	d
CL_FLT_RADIX	include/CL/cl_platform.h	235;"	d
CL_FLT_RADIX	include/CL/cl_platform.h	337;"	d
CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT	include/CL/cl.h	337;"	d
CL_FP_DENORM	include/CL/cl.h	330;"	d
CL_FP_FMA	include/CL/cl.h	335;"	d
CL_FP_INF_NAN	include/CL/cl.h	331;"	d
CL_FP_ROUND_TO_INF	include/CL/cl.h	334;"	d
CL_FP_ROUND_TO_NEAREST	include/CL/cl.h	332;"	d
CL_FP_ROUND_TO_ZERO	include/CL/cl.h	333;"	d
CL_FP_SOFT_FLOAT	include/CL/cl.h	336;"	d
CL_GLOBAL	include/CL/cl.h	346;"	d
CL_GLX_DISPLAY_KHR	include/CL/cl_gl.h	145;"	d
CL_GL_CONTEXT_KHR	include/CL/cl_gl.h	143;"	d
CL_GL_MIPMAP_LEVEL	include/CL/cl_gl.h	59;"	d
CL_GL_NUM_SAMPLES	include/CL/cl_gl.h	60;"	d
CL_GL_OBJECT_BUFFER	include/CL/cl_gl.h	48;"	d
CL_GL_OBJECT_RENDERBUFFER	include/CL/cl_gl.h	51;"	d
CL_GL_OBJECT_TEXTURE1D	include/CL/cl_gl.h	53;"	d
CL_GL_OBJECT_TEXTURE1D_ARRAY	include/CL/cl_gl.h	54;"	d
CL_GL_OBJECT_TEXTURE2D	include/CL/cl_gl.h	49;"	d
CL_GL_OBJECT_TEXTURE2D_ARRAY	include/CL/cl_gl.h	52;"	d
CL_GL_OBJECT_TEXTURE3D	include/CL/cl_gl.h	50;"	d
CL_GL_OBJECT_TEXTURE_BUFFER	include/CL/cl_gl.h	55;"	d
CL_GL_TEXTURE_TARGET	include/CL/cl_gl.h	58;"	d
CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG	include/CL/cl_ext.h	346;"	d
CL_HALF_DIG	include/CL/cl_platform.h	240;"	d
CL_HALF_DIG	include/CL/cl_platform.h	342;"	d
CL_HALF_EPSILON	include/CL/cl_platform.h	249;"	d
CL_HALF_EPSILON	include/CL/cl_platform.h	351;"	d
CL_HALF_FLOAT	include/CL/cl.h	451;"	d
CL_HALF_MANT_DIG	include/CL/cl_platform.h	241;"	d
CL_HALF_MANT_DIG	include/CL/cl_platform.h	343;"	d
CL_HALF_MAX	include/CL/cl_platform.h	247;"	d
CL_HALF_MAX	include/CL/cl_platform.h	349;"	d
CL_HALF_MAX_10_EXP	include/CL/cl_platform.h	242;"	d
CL_HALF_MAX_10_EXP	include/CL/cl_platform.h	344;"	d
CL_HALF_MAX_EXP	include/CL/cl_platform.h	243;"	d
CL_HALF_MAX_EXP	include/CL/cl_platform.h	345;"	d
CL_HALF_MIN	include/CL/cl_platform.h	248;"	d
CL_HALF_MIN	include/CL/cl_platform.h	350;"	d
CL_HALF_MIN_10_EXP	include/CL/cl_platform.h	244;"	d
CL_HALF_MIN_10_EXP	include/CL/cl_platform.h	346;"	d
CL_HALF_MIN_EXP	include/CL/cl_platform.h	245;"	d
CL_HALF_MIN_EXP	include/CL/cl_platform.h	347;"	d
CL_HALF_RADIX	include/CL/cl_platform.h	246;"	d
CL_HALF_RADIX	include/CL/cl_platform.h	348;"	d
CL_HAS_HI_LO_VECTOR_FIELDS	include/CL/cl_platform.h	594;"	d
CL_HAS_NAMED_VECTOR_FIELDS	include/CL/cl_platform.h	592;"	d
CL_HPP_	include/CL/cl.hpp	146;"	d
CL_HPP_	include/CL/cl2.hpp	342;"	d
CL_HPP_CL_1_2_DEFAULT_BUILD	arm_compute/core/CL/OpenCL.h	34;"	d
CL_HPP_DECLARE_PARAM_TRAITS_	include/CL/cl2.hpp	1260;"	d
CL_HPP_DEFINE_STATIC_MEMBER_	include/CL/cl2.hpp	468;"	d
CL_HPP_DEFINE_STATIC_MEMBER_	include/CL/cl2.hpp	470;"	d
CL_HPP_DEFINE_STATIC_MEMBER_	include/CL/cl2.hpp	9522;"	d
CL_HPP_ENABLE_EXCEPTIONS	arm_compute/core/CL/OpenCL.h	32;"	d
CL_HPP_ENABLE_EXCEPTIONS	include/CL/cl2.hpp	362;"	d
CL_HPP_ERR_STR_	include/CL/cl2.hpp	702;"	d
CL_HPP_ERR_STR_	include/CL/cl2.hpp	704;"	d
CL_HPP_ERR_STR_	include/CL/cl2.hpp	9441;"	d
CL_HPP_INIT_CL_EXT_FCN_PTR_	include/CL/cl2.hpp	632;"	d
CL_HPP_INIT_CL_EXT_FCN_PTR_	include/CL/cl2.hpp	9514;"	d
CL_HPP_INIT_CL_EXT_FCN_PTR_PLATFORM_	include/CL/cl2.hpp	640;"	d
CL_HPP_INIT_CL_EXT_FCN_PTR_PLATFORM_	include/CL/cl2.hpp	9515;"	d
CL_HPP_MINIMUM_OPENCL_VERSION	arm_compute/core/CL/OpenCL.h	36;"	d
CL_HPP_MINIMUM_OPENCL_VERSION	include/CL/cl2.hpp	404;"	d
CL_HPP_MINIMUM_OPENCL_VERSION	include/CL/cl2.hpp	408;"	d
CL_HPP_MINIMUM_OPENCL_VERSION	include/CL/cl2.hpp	409;"	d
CL_HPP_NOEXCEPT_	include/CL/cl2.hpp	462;"	d
CL_HPP_NOEXCEPT_	include/CL/cl2.hpp	464;"	d
CL_HPP_NOEXCEPT_	include/CL/cl2.hpp	9521;"	d
CL_HPP_NO_STD_STRING	include/CL/cl2.hpp	370;"	d
CL_HPP_NO_STD_VECTOR	include/CL/cl2.hpp	366;"	d
CL_HPP_PARAM_NAME_DEVICE_FISSION_	include/CL/cl2.hpp	1250;"	d
CL_HPP_PARAM_NAME_DEVICE_FISSION_	include/CL/cl2.hpp	9518;"	d
CL_HPP_PARAM_NAME_INFO_1_0_	include/CL/cl2.hpp	1061;"	d
CL_HPP_PARAM_NAME_INFO_1_0_DEPRECATED_IN_2_0_	include/CL/cl2.hpp	1282;"	d
CL_HPP_PARAM_NAME_INFO_1_1_	include/CL/cl2.hpp	1182;"	d
CL_HPP_PARAM_NAME_INFO_1_1_DEPRECATED_IN_2_0_	include/CL/cl2.hpp	1285;"	d
CL_HPP_PARAM_NAME_INFO_1_2_	include/CL/cl2.hpp	1204;"	d
CL_HPP_PARAM_NAME_INFO_1_2_DEPRECATED_IN_2_0_	include/CL/cl2.hpp	1288;"	d
CL_HPP_PARAM_NAME_INFO_2_0_	include/CL/cl2.hpp	1230;"	d
CL_HPP_TARGET_OPENCL_VERSION	arm_compute/core/CL/OpenCL.h	35;"	d
CL_HPP_TARGET_OPENCL_VERSION	include/CL/cl2.hpp	395;"	d
CL_HPP_TARGET_OPENCL_VERSION	include/CL/cl2.hpp	399;"	d
CL_HPP_TARGET_OPENCL_VERSION	include/CL/cl2.hpp	400;"	d
CL_HPP_USER_OVERRIDE_ERROR_STRINGS	include/CL/cl2.hpp	380;"	d
CL_HPP_USE_CL_DEVICE_FISSION	include/CL/cl2.hpp	358;"	d
CL_HPP_USE_DX_INTEROP	include/CL/cl2.hpp	354;"	d
CL_HUGE_VAL	include/CL/cl_platform.h	292;"	d
CL_HUGE_VAL	include/CL/cl_platform.h	394;"	d
CL_HUGE_VAL	include/CL/cl_platform.h	398;"	d
CL_HUGE_VALF	include/CL/cl_platform.h	291;"	d
CL_HUGE_VALF	include/CL/cl_platform.h	393;"	d
CL_HUGE_VALF	include/CL/cl_platform.h	397;"	d
CL_IMAGE_ARRAY_SIZE	include/CL/cl.h	486;"	d
CL_IMAGE_BUFFER	include/CL/cl.h	487;"	d
CL_IMAGE_D3D10_SUBRESOURCE_KHR	include/CL/cl_d3d10.h	73;"	d
CL_IMAGE_D3D11_SUBRESOURCE_KHR	include/CL/cl_d3d11.h	73;"	d
CL_IMAGE_DEPTH	include/CL/cl.h	485;"	d
CL_IMAGE_DX9_MEDIA_PLANE_KHR	include/CL/cl_dx9_media_sharing.h	85;"	d
CL_IMAGE_DX9_PLANE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	100;"	d
CL_IMAGE_ELEMENT_SIZE	include/CL/cl.h	480;"	d
CL_IMAGE_FORMAT	include/CL/cl.h	479;"	d
CL_IMAGE_FORMAT_MISMATCH	include/CL/cl.h	146;"	d
CL_IMAGE_FORMAT_NOT_SUPPORTED	include/CL/cl.h	147;"	d
CL_IMAGE_HEIGHT	include/CL/cl.h	484;"	d
CL_IMAGE_NUM_MIP_LEVELS	include/CL/cl.h	488;"	d
CL_IMAGE_NUM_SAMPLES	include/CL/cl.h	489;"	d
CL_IMAGE_ROW_ALIGNMENT_QCOM	include/CL/cl_ext.h	264;"	d
CL_IMAGE_ROW_PITCH	include/CL/cl.h	481;"	d
CL_IMAGE_SLICE_ALIGNMENT_QCOM	include/CL/cl_ext.h	265;"	d
CL_IMAGE_SLICE_PITCH	include/CL/cl.h	482;"	d
CL_IMAGE_VA_API_PLANE_INTEL	include/CL/cl_va_api_media_sharing_intel.h	90;"	d
CL_IMAGE_WIDTH	include/CL/cl.h	483;"	d
CL_IMPORT_TYPE_ARM	include/CL/cl_ext.h	455;"	d
CL_IMPORT_TYPE_DMA_BUF_ARM	include/CL/cl_ext.h	461;"	d
CL_IMPORT_TYPE_HOST_ARM	include/CL/cl_ext.h	458;"	d
CL_IMPORT_TYPE_SECURE_ARM	include/CL/cl_ext.h	464;"	d
CL_INFINITY	include/CL/cl_platform.h	294;"	d
CL_INFINITY	include/CL/cl_platform.h	403;"	d
CL_INTENSITY	include/CL/cl.h	424;"	d
CL_INT_MAX	include/CL/cl_platform.h	222;"	d
CL_INT_MAX	include/CL/cl_platform.h	324;"	d
CL_INT_MIN	include/CL/cl_platform.h	223;"	d
CL_INT_MIN	include/CL/cl_platform.h	325;"	d
CL_INVALID_ACCELERATOR_DESCRIPTOR_INTEL	include/CL/cl_ext_intel.h	108;"	d
CL_INVALID_ACCELERATOR_INTEL	include/CL/cl_ext_intel.h	106;"	d
CL_INVALID_ACCELERATOR_TYPE_INTEL	include/CL/cl_ext_intel.h	107;"	d
CL_INVALID_ARG_INDEX	include/CL/cl.h	177;"	d
CL_INVALID_ARG_SIZE	include/CL/cl.h	179;"	d
CL_INVALID_ARG_VALUE	include/CL/cl.h	178;"	d
CL_INVALID_BINARY	include/CL/cl.h	170;"	d
CL_INVALID_BUFFER_SIZE	include/CL/cl.h	189;"	d
CL_INVALID_BUILD_OPTIONS	include/CL/cl.h	171;"	d
CL_INVALID_COMMAND_QUEUE	include/CL/cl.h	164;"	d
CL_INVALID_COMPILER_OPTIONS	include/CL/cl.h	194;"	d
CL_INVALID_CONTEXT	include/CL/cl.h	162;"	d
CL_INVALID_D3D10_DEVICE_KHR	include/CL/cl_d3d10.h	52;"	d
CL_INVALID_D3D10_RESOURCE_KHR	include/CL/cl_d3d10.h	53;"	d
CL_INVALID_D3D11_DEVICE_KHR	include/CL/cl_d3d11.h	52;"	d
CL_INVALID_D3D11_RESOURCE_KHR	include/CL/cl_d3d11.h	53;"	d
CL_INVALID_DEVICE	include/CL/cl.h	161;"	d
CL_INVALID_DEVICE_PARTITION_COUNT	include/CL/cl.h	196;"	d
CL_INVALID_DEVICE_QUEUE	include/CL/cl.h	198;"	d
CL_INVALID_DEVICE_TYPE	include/CL/cl.h	159;"	d
CL_INVALID_DX9_DEVICE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	76;"	d
CL_INVALID_DX9_MEDIA_ADAPTER_KHR	include/CL/cl_dx9_media_sharing.h	61;"	d
CL_INVALID_DX9_MEDIA_SURFACE_KHR	include/CL/cl_dx9_media_sharing.h	62;"	d
CL_INVALID_DX9_RESOURCE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	77;"	d
CL_INVALID_EGL_OBJECT_KHR	include/CL/cl_egl.h	49;"	d
CL_INVALID_EVENT	include/CL/cl.h	186;"	d
CL_INVALID_EVENT_WAIT_LIST	include/CL/cl.h	185;"	d
CL_INVALID_GLOBAL_OFFSET	include/CL/cl.h	184;"	d
CL_INVALID_GLOBAL_WORK_SIZE	include/CL/cl.h	191;"	d
CL_INVALID_GL_OBJECT	include/CL/cl.h	188;"	d
CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR	include/CL/cl_gl.h	136;"	d
CL_INVALID_HOST_PTR	include/CL/cl.h	165;"	d
CL_INVALID_IMAGE_DESCRIPTOR	include/CL/cl.h	193;"	d
CL_INVALID_IMAGE_FORMAT_DESCRIPTOR	include/CL/cl.h	167;"	d
CL_INVALID_IMAGE_SIZE	include/CL/cl.h	168;"	d
CL_INVALID_KERNEL	include/CL/cl.h	176;"	d
CL_INVALID_KERNEL_ARGS	include/CL/cl.h	180;"	d
CL_INVALID_KERNEL_DEFINITION	include/CL/cl.h	175;"	d
CL_INVALID_KERNEL_NAME	include/CL/cl.h	174;"	d
CL_INVALID_LINKER_OPTIONS	include/CL/cl.h	195;"	d
CL_INVALID_MEM_OBJECT	include/CL/cl.h	166;"	d
CL_INVALID_MIP_LEVEL	include/CL/cl.h	190;"	d
CL_INVALID_OPERATION	include/CL/cl.h	187;"	d
CL_INVALID_PARTITION_COUNT_EXT	include/CL/cl_ext.h	240;"	d
CL_INVALID_PARTITION_NAME_EXT	include/CL/cl_ext.h	241;"	d
CL_INVALID_PIPE_SIZE	include/CL/cl.h	197;"	d
CL_INVALID_PLATFORM	include/CL/cl.h	160;"	d
CL_INVALID_PROGRAM	include/CL/cl.h	172;"	d
CL_INVALID_PROGRAM_EXECUTABLE	include/CL/cl.h	173;"	d
CL_INVALID_PROPERTY	include/CL/cl.h	192;"	d
CL_INVALID_QUEUE_PROPERTIES	include/CL/cl.h	163;"	d
CL_INVALID_SAMPLER	include/CL/cl.h	169;"	d
CL_INVALID_SPEC_ID	include/CL/cl.h	199;"	d
CL_INVALID_VALUE	include/CL/cl.h	158;"	d
CL_INVALID_VA_API_MEDIA_ADAPTER_INTEL	include/CL/cl_va_api_media_sharing_intel.h	71;"	d
CL_INVALID_VA_API_MEDIA_SURFACE_INTEL	include/CL/cl_va_api_media_sharing_intel.h	72;"	d
CL_INVALID_WORK_DIMENSION	include/CL/cl.h	181;"	d
CL_INVALID_WORK_GROUP_SIZE	include/CL/cl.h	182;"	d
CL_INVALID_WORK_ITEM_SIZE	include/CL/cl.h	183;"	d
CL_KERNEL_ARG_ACCESS_NONE	include/CL/cl.h	581;"	d
CL_KERNEL_ARG_ACCESS_QUALIFIER	include/CL/cl.h	566;"	d
CL_KERNEL_ARG_ACCESS_READ_ONLY	include/CL/cl.h	578;"	d
CL_KERNEL_ARG_ACCESS_READ_WRITE	include/CL/cl.h	580;"	d
CL_KERNEL_ARG_ACCESS_WRITE_ONLY	include/CL/cl.h	579;"	d
CL_KERNEL_ARG_ADDRESS_CONSTANT	include/CL/cl.h	574;"	d
CL_KERNEL_ARG_ADDRESS_GLOBAL	include/CL/cl.h	572;"	d
CL_KERNEL_ARG_ADDRESS_LOCAL	include/CL/cl.h	573;"	d
CL_KERNEL_ARG_ADDRESS_PRIVATE	include/CL/cl.h	575;"	d
CL_KERNEL_ARG_ADDRESS_QUALIFIER	include/CL/cl.h	565;"	d
CL_KERNEL_ARG_INFO_NOT_AVAILABLE	include/CL/cl.h	156;"	d
CL_KERNEL_ARG_NAME	include/CL/cl.h	569;"	d
CL_KERNEL_ARG_TYPE_CONST	include/CL/cl.h	585;"	d
CL_KERNEL_ARG_TYPE_NAME	include/CL/cl.h	567;"	d
CL_KERNEL_ARG_TYPE_NONE	include/CL/cl.h	584;"	d
CL_KERNEL_ARG_TYPE_PIPE	include/CL/cl.h	588;"	d
CL_KERNEL_ARG_TYPE_QUALIFIER	include/CL/cl.h	568;"	d
CL_KERNEL_ARG_TYPE_RESTRICT	include/CL/cl.h	586;"	d
CL_KERNEL_ARG_TYPE_VOLATILE	include/CL/cl.h	587;"	d
CL_KERNEL_ATTRIBUTES	include/CL/cl.h	560;"	d
CL_KERNEL_COMPILE_NUM_SUB_GROUPS	include/CL/cl.h	562;"	d
CL_KERNEL_COMPILE_SUB_GROUP_SIZE_INTEL	include/CL/cl_ext_intel.h	265;"	d
CL_KERNEL_COMPILE_WORK_GROUP_SIZE	include/CL/cl.h	592;"	d
CL_KERNEL_CONTEXT	include/CL/cl.h	558;"	d
CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM	include/CL/cl.h	605;"	d
CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_ARM	include/CL/cl_ext.h	507;"	d
CL_KERNEL_EXEC_INFO_SVM_PTRS	include/CL/cl.h	604;"	d
CL_KERNEL_EXEC_INFO_SVM_PTRS_ARM	include/CL/cl_ext.h	506;"	d
CL_KERNEL_FUNCTION_NAME	include/CL/cl.h	555;"	d
CL_KERNEL_GLOBAL_WORK_SIZE	include/CL/cl.h	596;"	d
CL_KERNEL_LOCAL_MEM_SIZE	include/CL/cl.h	593;"	d
CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT	include/CL/cl.h	601;"	d
CL_KERNEL_MAX_NUM_SUB_GROUPS	include/CL/cl.h	561;"	d
CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE	include/CL/cl.h	599;"	d
CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_KHR	include/CL/cl_ext.h	375;"	d
CL_KERNEL_NUM_ARGS	include/CL/cl.h	556;"	d
CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE	include/CL/cl.h	594;"	d
CL_KERNEL_PRIVATE_MEM_SIZE	include/CL/cl.h	595;"	d
CL_KERNEL_PROGRAM	include/CL/cl.h	559;"	d
CL_KERNEL_REFERENCE_COUNT	include/CL/cl.h	557;"	d
CL_KERNEL_SPILL_MEM_SIZE_INTEL	include/CL/cl_ext_intel.h	264;"	d
CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE	include/CL/cl.h	600;"	d
CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_KHR	include/CL/cl_ext.h	376;"	d
CL_KERNEL_WORK_GROUP_SIZE	include/CL/cl.h	591;"	d
CL_LINKER_NOT_AVAILABLE	include/CL/cl.h	153;"	d
CL_LINK_PROGRAM_FAILURE	include/CL/cl.h	154;"	d
CL_LOCAL	include/CL/cl.h	345;"	d
CL_LONG_MAX	include/CL/cl_platform.h	225;"	d
CL_LONG_MAX	include/CL/cl_platform.h	327;"	d
CL_LONG_MIN	include/CL/cl_platform.h	226;"	d
CL_LONG_MIN	include/CL/cl_platform.h	328;"	d
CL_LUMINANCE	include/CL/cl.h	425;"	d
CL_MAP_FAILURE	include/CL/cl.h	149;"	d
CL_MAP_READ	include/CL/cl.h	517;"	d
CL_MAP_WRITE	include/CL/cl.h	518;"	d
CL_MAP_WRITE_INVALIDATE_REGION	include/CL/cl.h	519;"	d
CL_MAXFLOAT	include/CL/cl_platform.h	293;"	d
CL_MAXFLOAT	include/CL/cl_platform.h	402;"	d
CL_MAX_SIZE_RESTRICTION_EXCEEDED	include/CL/cl.h	200;"	d
CL_MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL	include/CL/cl_ext_intel.h	289;"	d
CL_MEM_ALLOC_HOST_PTR	include/CL/cl.h	401;"	d
CL_MEM_ASSOCIATED_MEMOBJECT	include/CL/cl.h	474;"	d
CL_MEM_CONTEXT	include/CL/cl.h	473;"	d
CL_MEM_COPY_HOST_PTR	include/CL/cl.h	402;"	d
CL_MEM_COPY_OVERLAP	include/CL/cl.h	145;"	d
CL_MEM_D3D10_RESOURCE_KHR	include/CL/cl_d3d10.h	70;"	d
CL_MEM_D3D11_RESOURCE_KHR	include/CL/cl_d3d11.h	70;"	d
CL_MEM_DX9_MEDIA_ADAPTER_TYPE_KHR	include/CL/cl_dx9_media_sharing.h	81;"	d
CL_MEM_DX9_MEDIA_SURFACE_INFO_KHR	include/CL/cl_dx9_media_sharing.h	82;"	d
CL_MEM_DX9_RESOURCE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	96;"	d
CL_MEM_DX9_SHARED_HANDLE_INTEL	include/CL/cl_dx9_media_sharing_intel.h	97;"	d
CL_MEM_EXT_HOST_PTR_QCOM	include/CL/cl_ext.h	260;"	d
CL_MEM_FLAGS	include/CL/cl.h	468;"	d
CL_MEM_HOST_NO_ACCESS	include/CL/cl.h	406;"	d
CL_MEM_HOST_PTR	include/CL/cl.h	470;"	d
CL_MEM_HOST_READ_ONLY	include/CL/cl.h	405;"	d
CL_MEM_HOST_UNCACHED_QCOM	include/CL/cl_ext.h	266;"	d
CL_MEM_HOST_WRITEBACK_QCOM	include/CL/cl_ext.h	267;"	d
CL_MEM_HOST_WRITETHROUGH_QCOM	include/CL/cl_ext.h	268;"	d
CL_MEM_HOST_WRITE_COMBINING_QCOM	include/CL/cl_ext.h	269;"	d
CL_MEM_HOST_WRITE_ONLY	include/CL/cl.h	404;"	d
CL_MEM_ION_HOST_PTR_QCOM	include/CL/cl_ext.h	298;"	d
CL_MEM_KERNEL_READ_AND_WRITE	include/CL/cl.h	409;"	d
CL_MEM_MAP_COUNT	include/CL/cl.h	471;"	d
CL_MEM_NO_ACCESS_INTEL	include/CL/cl_ext_intel.h	288;"	d
CL_MEM_OBJECT_ALLOCATION_FAILURE	include/CL/cl.h	141;"	d
CL_MEM_OBJECT_BUFFER	include/CL/cl.h	457;"	d
CL_MEM_OBJECT_IMAGE1D	include/CL/cl.h	461;"	d
CL_MEM_OBJECT_IMAGE1D_ARRAY	include/CL/cl.h	462;"	d
CL_MEM_OBJECT_IMAGE1D_BUFFER	include/CL/cl.h	463;"	d
CL_MEM_OBJECT_IMAGE2D	include/CL/cl.h	458;"	d
CL_MEM_OBJECT_IMAGE2D_ARRAY	include/CL/cl.h	460;"	d
CL_MEM_OBJECT_IMAGE3D	include/CL/cl.h	459;"	d
CL_MEM_OBJECT_PIPE	include/CL/cl.h	464;"	d
CL_MEM_OFFSET	include/CL/cl.h	475;"	d
CL_MEM_READ_ONLY	include/CL/cl.h	399;"	d
CL_MEM_READ_WRITE	include/CL/cl.h	397;"	d
CL_MEM_REFERENCE_COUNT	include/CL/cl.h	472;"	d
CL_MEM_SIZE	include/CL/cl.h	469;"	d
CL_MEM_SVM_ATOMICS	include/CL/cl.h	408;"	d
CL_MEM_SVM_ATOMICS_ARM	include/CL/cl_ext.h	524;"	d
CL_MEM_SVM_FINE_GRAIN_BUFFER	include/CL/cl.h	407;"	d
CL_MEM_SVM_FINE_GRAIN_BUFFER_ARM	include/CL/cl_ext.h	523;"	d
CL_MEM_TYPE	include/CL/cl.h	467;"	d
CL_MEM_USES_SVM_POINTER	include/CL/cl.h	476;"	d
CL_MEM_USES_SVM_POINTER_ARM	include/CL/cl_ext.h	503;"	d
CL_MEM_USE_CACHED_CPU_MEMORY_IMG	include/CL/cl_ext.h	332;"	d
CL_MEM_USE_GRALLOC_PTR_IMG	include/CL/cl_ext.h	339;"	d
CL_MEM_USE_HOST_PTR	include/CL/cl.h	400;"	d
CL_MEM_USE_UNCACHED_CPU_MEMORY_IMG	include/CL/cl_ext.h	331;"	d
CL_MEM_VA_API_MEDIA_SURFACE_INTEL	include/CL/cl_va_api_media_sharing_intel.h	87;"	d
CL_MEM_WRITE_ONLY	include/CL/cl.h	398;"	d
CL_ME_BACKWARD_INPUT_MODE_INTEL	include/CL/cl_ext_intel.h	142;"	d
CL_ME_BIDIRECTION_INPUT_MODE_INTEL	include/CL/cl_ext_intel.h	143;"	d
CL_ME_BIDIR_WEIGHT_HALF_INTEL	include/CL/cl_ext_intel.h	147;"	d
CL_ME_BIDIR_WEIGHT_QUARTER_INTEL	include/CL/cl_ext_intel.h	145;"	d
CL_ME_BIDIR_WEIGHT_THIRD_INTEL	include/CL/cl_ext_intel.h	146;"	d
CL_ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL	include/CL/cl_ext_intel.h	149;"	d
CL_ME_BIDIR_WEIGHT_TWO_THIRD_INTEL	include/CL/cl_ext_intel.h	148;"	d
CL_ME_CHROMA_INTRA_PREDICT_ENABLED_INTEL	include/CL/cl_ext_intel.h	137;"	d
CL_ME_CHROMA_PREDICTOR_MODE_DC_INTEL	include/CL/cl_ext_intel.h	173;"	d
CL_ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL	include/CL/cl_ext_intel.h	174;"	d
CL_ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL	include/CL/cl_ext_intel.h	176;"	d
CL_ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL	include/CL/cl_ext_intel.h	175;"	d
CL_ME_COST_PENALTY_HIGH_INTEL	include/CL/cl_ext_intel.h	154;"	d
CL_ME_COST_PENALTY_LOW_INTEL	include/CL/cl_ext_intel.h	152;"	d
CL_ME_COST_PENALTY_NONE_INTEL	include/CL/cl_ext_intel.h	151;"	d
CL_ME_COST_PENALTY_NORMAL_INTEL	include/CL/cl_ext_intel.h	153;"	d
CL_ME_COST_PRECISION_DPEL_INTEL	include/CL/cl_ext_intel.h	159;"	d
CL_ME_COST_PRECISION_HPEL_INTEL	include/CL/cl_ext_intel.h	157;"	d
CL_ME_COST_PRECISION_PEL_INTEL	include/CL/cl_ext_intel.h	158;"	d
CL_ME_COST_PRECISION_QPEL_INTEL	include/CL/cl_ext_intel.h	156;"	d
CL_ME_FORWARD_INPUT_MODE_INTEL	include/CL/cl_ext_intel.h	141;"	d
CL_ME_LUMA_INTRA_PREDICT_ENABLED_INTEL	include/CL/cl_ext_intel.h	138;"	d
CL_ME_LUMA_PREDICTOR_MODE_DC_INTEL	include/CL/cl_ext_intel.h	163;"	d
CL_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL	include/CL/cl_ext_intel.h	164;"	d
CL_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL	include/CL/cl_ext_intel.h	166;"	d
CL_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL	include/CL/cl_ext_intel.h	169;"	d
CL_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL	include/CL/cl_ext_intel.h	162;"	d
CL_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL	include/CL/cl_ext_intel.h	171;"	d
CL_ME_LUMA_PREDICTOR_MODE_PLANE_INTEL	include/CL/cl_ext_intel.h	167;"	d
CL_ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL	include/CL/cl_ext_intel.h	161;"	d
CL_ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL	include/CL/cl_ext_intel.h	170;"	d
CL_ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL	include/CL/cl_ext_intel.h	168;"	d
CL_ME_MB_TYPE_16x16_INTEL	include/CL/cl_ext_intel.h	121;"	d
CL_ME_MB_TYPE_4x4_INTEL	include/CL/cl_ext_intel.h	123;"	d
CL_ME_MB_TYPE_8x8_INTEL	include/CL/cl_ext_intel.h	122;"	d
CL_ME_SAD_ADJUST_MODE_HAAR_INTEL	include/CL/cl_ext_intel.h	130;"	d
CL_ME_SAD_ADJUST_MODE_NONE_INTEL	include/CL/cl_ext_intel.h	129;"	d
CL_ME_SEARCH_PATH_RADIUS_16_12_INTEL	include/CL/cl_ext_intel.h	134;"	d
CL_ME_SEARCH_PATH_RADIUS_2_2_INTEL	include/CL/cl_ext_intel.h	132;"	d
CL_ME_SEARCH_PATH_RADIUS_4_4_INTEL	include/CL/cl_ext_intel.h	133;"	d
CL_ME_SKIP_BLOCK_TYPE_16x16_INTEL	include/CL/cl_ext_intel.h	136;"	d
CL_ME_SKIP_BLOCK_TYPE_8x8_INTEL	include/CL/cl_ext_intel.h	139;"	d
CL_ME_SUBPIXEL_MODE_HPEL_INTEL	include/CL/cl_ext_intel.h	126;"	d
CL_ME_SUBPIXEL_MODE_INTEGER_INTEL	include/CL/cl_ext_intel.h	125;"	d
CL_ME_SUBPIXEL_MODE_QPEL_INTEL	include/CL/cl_ext_intel.h	127;"	d
CL_ME_VERSION_ADVANCED_VER_1_INTEL	include/CL/cl_ext_intel.h	182;"	d
CL_ME_VERSION_ADVANCED_VER_2_INTEL	include/CL/cl_ext_intel.h	183;"	d
CL_ME_VERSION_LEGACY_INTEL	include/CL/cl_ext_intel.h	181;"	d
CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED	include/CL/cl.h	413;"	d
CL_MIGRATE_MEM_OBJECT_HOST	include/CL/cl.h	412;"	d
CL_MISALIGNED_SUB_BUFFER_OFFSET	include/CL/cl.h	150;"	d
CL_M_1_PI	include/CL/cl_platform.h	270;"	d
CL_M_1_PI	include/CL/cl_platform.h	372;"	d
CL_M_1_PI_F	include/CL/cl_platform.h	284;"	d
CL_M_1_PI_F	include/CL/cl_platform.h	386;"	d
CL_M_2_PI	include/CL/cl_platform.h	271;"	d
CL_M_2_PI	include/CL/cl_platform.h	373;"	d
CL_M_2_PI_F	include/CL/cl_platform.h	285;"	d
CL_M_2_PI_F	include/CL/cl_platform.h	387;"	d
CL_M_2_SQRTPI	include/CL/cl_platform.h	272;"	d
CL_M_2_SQRTPI	include/CL/cl_platform.h	374;"	d
CL_M_2_SQRTPI_F	include/CL/cl_platform.h	286;"	d
CL_M_2_SQRTPI_F	include/CL/cl_platform.h	388;"	d
CL_M_E	include/CL/cl_platform.h	262;"	d
CL_M_E	include/CL/cl_platform.h	364;"	d
CL_M_E_F	include/CL/cl_platform.h	276;"	d
CL_M_E_F	include/CL/cl_platform.h	378;"	d
CL_M_LN10	include/CL/cl_platform.h	266;"	d
CL_M_LN10	include/CL/cl_platform.h	368;"	d
CL_M_LN10_F	include/CL/cl_platform.h	280;"	d
CL_M_LN10_F	include/CL/cl_platform.h	382;"	d
CL_M_LN2	include/CL/cl_platform.h	265;"	d
CL_M_LN2	include/CL/cl_platform.h	367;"	d
CL_M_LN2_F	include/CL/cl_platform.h	279;"	d
CL_M_LN2_F	include/CL/cl_platform.h	381;"	d
CL_M_LOG10E	include/CL/cl_platform.h	264;"	d
CL_M_LOG10E	include/CL/cl_platform.h	366;"	d
CL_M_LOG10E_F	include/CL/cl_platform.h	278;"	d
CL_M_LOG10E_F	include/CL/cl_platform.h	380;"	d
CL_M_LOG2E	include/CL/cl_platform.h	263;"	d
CL_M_LOG2E	include/CL/cl_platform.h	365;"	d
CL_M_LOG2E_F	include/CL/cl_platform.h	277;"	d
CL_M_LOG2E_F	include/CL/cl_platform.h	379;"	d
CL_M_PI	include/CL/cl_platform.h	267;"	d
CL_M_PI	include/CL/cl_platform.h	369;"	d
CL_M_PI_2	include/CL/cl_platform.h	268;"	d
CL_M_PI_2	include/CL/cl_platform.h	370;"	d
CL_M_PI_2_F	include/CL/cl_platform.h	282;"	d
CL_M_PI_2_F	include/CL/cl_platform.h	384;"	d
CL_M_PI_4	include/CL/cl_platform.h	269;"	d
CL_M_PI_4	include/CL/cl_platform.h	371;"	d
CL_M_PI_4_F	include/CL/cl_platform.h	283;"	d
CL_M_PI_4_F	include/CL/cl_platform.h	385;"	d
CL_M_PI_F	include/CL/cl_platform.h	281;"	d
CL_M_PI_F	include/CL/cl_platform.h	383;"	d
CL_M_SQRT1_2	include/CL/cl_platform.h	274;"	d
CL_M_SQRT1_2	include/CL/cl_platform.h	376;"	d
CL_M_SQRT1_2_F	include/CL/cl_platform.h	288;"	d
CL_M_SQRT1_2_F	include/CL/cl_platform.h	390;"	d
CL_M_SQRT2	include/CL/cl_platform.h	273;"	d
CL_M_SQRT2	include/CL/cl_platform.h	375;"	d
CL_M_SQRT2_F	include/CL/cl_platform.h	287;"	d
CL_M_SQRT2_F	include/CL/cl_platform.h	389;"	d
CL_NAN	include/CL/cl_platform.h	290;"	d
CL_NAN	include/CL/cl_platform.h	395;"	d
CL_NAN	include/CL/cl_platform.h	400;"	d
CL_NONE	include/CL/cl.h	340;"	d
CL_NON_BLOCKING	include/CL/cl.h	214;"	d
CL_NV12_INTEL	include/CL/cl_ext_intel.h	286;"	d
CL_NV21_IMG	include/CL/cl_ext.h	323;"	d
CL_OUT_OF_HOST_MEMORY	include/CL/cl.h	143;"	d
CL_OUT_OF_RESOURCES	include/CL/cl.h	142;"	d
CL_PARTITION_BY_COUNTS_LIST_END_EXT	include/CL/cl_ext.h	253;"	d
CL_PARTITION_BY_NAMES_LIST_END_EXT	include/CL/cl_ext.h	254;"	d
CL_PARTITION_BY_NAMES_LIST_END_INTEL	include/CL/cl_ext_intel.h	82;"	d
CL_PIPE_MAX_PACKETS	include/CL/cl.h	493;"	d
CL_PIPE_PACKET_SIZE	include/CL/cl.h	492;"	d
CL_PLATFORM_EXTENSIONS	include/CL/cl.h	221;"	d
CL_PLATFORM_HOST_TIMER_RESOLUTION	include/CL/cl.h	222;"	d
CL_PLATFORM_ICD_SUFFIX_KHR	include/CL/cl_ext.h	107;"	d
CL_PLATFORM_NAME	include/CL/cl.h	219;"	d
CL_PLATFORM_NOT_FOUND_KHR	include/CL/cl_ext.h	110;"	d
CL_PLATFORM_PROFILE	include/CL/cl.h	217;"	d
CL_PLATFORM_VENDOR	include/CL/cl.h	220;"	d
CL_PLATFORM_VERSION	include/CL/cl.h	218;"	d
CL_PREFERRED_DEVICES_FOR_D3D10_KHR	include/CL/cl_d3d10.h	62;"	d
CL_PREFERRED_DEVICES_FOR_D3D11_KHR	include/CL/cl_d3d11.h	62;"	d
CL_PREFERRED_DEVICES_FOR_DX9_INTEL	include/CL/cl_dx9_media_sharing_intel.h	87;"	d
CL_PREFERRED_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR	include/CL/cl_dx9_media_sharing.h	72;"	d
CL_PREFERRED_DEVICES_FOR_VA_API_INTEL	include/CL/cl_va_api_media_sharing_intel.h	80;"	d
CL_PRINTF_BUFFERSIZE_ARM	include/CL/cl_ext.h	190;"	d
CL_PRINTF_CALLBACK_ARM	include/CL/cl_ext.h	189;"	d
CL_PROFILING_COMMAND_COMPLETE	include/CL/cl.h	660;"	d
CL_PROFILING_COMMAND_END	include/CL/cl.h	659;"	d
CL_PROFILING_COMMAND_QUEUED	include/CL/cl.h	656;"	d
CL_PROFILING_COMMAND_START	include/CL/cl.h	658;"	d
CL_PROFILING_COMMAND_SUBMIT	include/CL/cl.h	657;"	d
CL_PROFILING_INFO_NOT_AVAILABLE	include/CL/cl.h	144;"	d
CL_PROGRAM_BINARIES	include/CL/cl.h	528;"	d
CL_PROGRAM_BINARY_SIZES	include/CL/cl.h	527;"	d
CL_PROGRAM_BINARY_TYPE	include/CL/cl.h	539;"	d
CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT	include/CL/cl.h	544;"	d
CL_PROGRAM_BINARY_TYPE_EXECUTABLE	include/CL/cl.h	546;"	d
CL_PROGRAM_BINARY_TYPE_INTERMEDIATE	include/CL/cl_ext.h	166;"	d
CL_PROGRAM_BINARY_TYPE_LIBRARY	include/CL/cl.h	545;"	d
CL_PROGRAM_BINARY_TYPE_NONE	include/CL/cl.h	543;"	d
CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE	include/CL/cl.h	540;"	d
CL_PROGRAM_BUILD_LOG	include/CL/cl.h	538;"	d
CL_PROGRAM_BUILD_OPTIONS	include/CL/cl.h	537;"	d
CL_PROGRAM_BUILD_STATUS	include/CL/cl.h	536;"	d
CL_PROGRAM_CONTEXT	include/CL/cl.h	523;"	d
CL_PROGRAM_DEVICES	include/CL/cl.h	525;"	d
CL_PROGRAM_IL	include/CL/cl.h	531;"	d
CL_PROGRAM_KERNEL_NAMES	include/CL/cl.h	530;"	d
CL_PROGRAM_NUM_DEVICES	include/CL/cl.h	524;"	d
CL_PROGRAM_NUM_KERNELS	include/CL/cl.h	529;"	d
CL_PROGRAM_REFERENCE_COUNT	include/CL/cl.h	522;"	d
CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT	include/CL/cl.h	532;"	d
CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT	include/CL/cl.h	533;"	d
CL_PROGRAM_SOURCE	include/CL/cl.h	526;"	d
CL_PROGRAM_STRING_DEBUG_INFO	include/CL/cl_platform.h	1444;"	d
CL_PROPERTIES_LIST_END_EXT	include/CL/cl_ext.h	252;"	d
CL_QUEUED	include/CL/cl.h	650;"	d
CL_QUEUE_CONTEXT	include/CL/cl.h	389;"	d
CL_QUEUE_DEVICE	include/CL/cl.h	390;"	d
CL_QUEUE_DEVICE_DEFAULT	include/CL/cl.h	394;"	d
CL_QUEUE_ON_DEVICE	include/CL/cl.h	355;"	d
CL_QUEUE_ON_DEVICE_DEFAULT	include/CL/cl.h	356;"	d
CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE	include/CL/cl.h	353;"	d
CL_QUEUE_PRIORITY_HIGH_KHR	include/CL/cl_ext.h	411;"	d
CL_QUEUE_PRIORITY_KHR	include/CL/cl_ext.h	408;"	d
CL_QUEUE_PRIORITY_LOW_KHR	include/CL/cl_ext.h	413;"	d
CL_QUEUE_PRIORITY_MED_KHR	include/CL/cl_ext.h	412;"	d
CL_QUEUE_PROFILING_ENABLE	include/CL/cl.h	354;"	d
CL_QUEUE_PROPERTIES	include/CL/cl.h	392;"	d
CL_QUEUE_REFERENCE_COUNT	include/CL/cl.h	391;"	d
CL_QUEUE_SIZE	include/CL/cl.h	393;"	d
CL_QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL	include/CL/cl_ext_intel.h	73;"	d
CL_QUEUE_THROTTLE_HIGH_KHR	include/CL/cl_ext.h	429;"	d
CL_QUEUE_THROTTLE_KHR	include/CL/cl_ext.h	426;"	d
CL_QUEUE_THROTTLE_LOW_KHR	include/CL/cl_ext.h	431;"	d
CL_QUEUE_THROTTLE_MED_KHR	include/CL/cl_ext.h	430;"	d
CL_R	include/CL/cl.h	416;"	d
CL_RA	include/CL/cl.h	419;"	d
CL_READ_ONLY_CACHE	include/CL/cl.h	341;"	d
CL_READ_WRITE_CACHE	include/CL/cl.h	342;"	d
CL_RG	include/CL/cl.h	418;"	d
CL_RGB	include/CL/cl.h	420;"	d
CL_RGBA	include/CL/cl.h	421;"	d
CL_RGBx	include/CL/cl.h	428;"	d
CL_RGx	include/CL/cl.h	427;"	d
CL_RUNNING	include/CL/cl.h	648;"	d
CL_Rx	include/CL/cl.h	426;"	d
CL_SAMPLER_ADDRESSING_MODE	include/CL/cl.h	510;"	d
CL_SAMPLER_CONTEXT	include/CL/cl.h	508;"	d
CL_SAMPLER_FILTER_MODE	include/CL/cl.h	511;"	d
CL_SAMPLER_LOD_MAX	include/CL/cl.h	514;"	d
CL_SAMPLER_LOD_MIN	include/CL/cl.h	513;"	d
CL_SAMPLER_MIP_FILTER_MODE	include/CL/cl.h	512;"	d
CL_SAMPLER_NORMALIZED_COORDS	include/CL/cl.h	509;"	d
CL_SAMPLER_REFERENCE_COUNT	include/CL/cl.h	507;"	d
CL_SCHAR_MAX	include/CL/cl_platform.h	214;"	d
CL_SCHAR_MAX	include/CL/cl_platform.h	316;"	d
CL_SCHAR_MIN	include/CL/cl_platform.h	215;"	d
CL_SCHAR_MIN	include/CL/cl_platform.h	317;"	d
CL_SHRT_MAX	include/CL/cl_platform.h	219;"	d
CL_SHRT_MAX	include/CL/cl_platform.h	321;"	d
CL_SHRT_MIN	include/CL/cl_platform.h	220;"	d
CL_SHRT_MIN	include/CL/cl_platform.h	322;"	d
CL_SIGNED_INT16	include/CL/cl.h	446;"	d
CL_SIGNED_INT32	include/CL/cl.h	447;"	d
CL_SIGNED_INT8	include/CL/cl.h	445;"	d
CL_SNORM_INT16	include/CL/cl.h	439;"	d
CL_SNORM_INT8	include/CL/cl.h	438;"	d
CL_SUBMITTED	include/CL/cl.h	649;"	d
CL_SUCCESS	include/CL/cl.h	137;"	d
CL_TRUE	include/CL/cl.h	212;"	d
CL_UCHAR_MAX	include/CL/cl_platform.h	218;"	d
CL_UCHAR_MAX	include/CL/cl_platform.h	320;"	d
CL_UINT_MAX	include/CL/cl_platform.h	224;"	d
CL_UINT_MAX	include/CL/cl_platform.h	326;"	d
CL_ULONG_MAX	include/CL/cl_platform.h	227;"	d
CL_ULONG_MAX	include/CL/cl_platform.h	329;"	d
CL_UNORM_INT16	include/CL/cl.h	441;"	d
CL_UNORM_INT24	include/CL/cl.h	453;"	d
CL_UNORM_INT8	include/CL/cl.h	440;"	d
CL_UNORM_INT_101010	include/CL/cl.h	444;"	d
CL_UNORM_INT_101010_2	include/CL/cl.h	454;"	d
CL_UNORM_SHORT_555	include/CL/cl.h	443;"	d
CL_UNORM_SHORT_565	include/CL/cl.h	442;"	d
CL_UNSIGNED_INT16	include/CL/cl.h	449;"	d
CL_UNSIGNED_INT32	include/CL/cl.h	450;"	d
CL_UNSIGNED_INT8	include/CL/cl.h	448;"	d
CL_USE_DEPRECATED_OPENCL_1_0_APIS	include/CL/cl2.hpp	416;"	d
CL_USE_DEPRECATED_OPENCL_1_1_APIS	include/CL/cl2.hpp	419;"	d
CL_USE_DEPRECATED_OPENCL_1_2_APIS	include/CL/cl2.hpp	422;"	d
CL_USE_DEPRECATED_OPENCL_2_0_APIS	include/CL/cl2.hpp	425;"	d
CL_USHRT_MAX	include/CL/cl_platform.h	221;"	d
CL_USHRT_MAX	include/CL/cl_platform.h	323;"	d
CL_UYVY_INTEL	include/CL/cl_ext_intel.h	253;"	d
CL_VA_API_DISPLAY_INTEL	include/CL/cl_va_api_media_sharing_intel.h	77;"	d
CL_VA_API_MEDIA_SURFACE_ALREADY_ACQUIRED_INTEL	include/CL/cl_va_api_media_sharing_intel.h	73;"	d
CL_VA_API_MEDIA_SURFACE_NOT_ACQUIRED_INTEL	include/CL/cl_va_api_media_sharing_intel.h	74;"	d
CL_VEC_DATA_TYPE	src/core/CL/cl_kernels/helpers.h	51;"	d
CL_VEC_DATA_TYPE_STR	src/core/CL/cl_kernels/helpers.h	50;"	d
CL_VERSION_1_0	include/CL/cl.h	203;"	d
CL_VERSION_1_1	include/CL/cl.h	204;"	d
CL_VERSION_1_2	include/CL/cl.h	205;"	d
CL_VERSION_2_0	include/CL/cl.h	206;"	d
CL_VERSION_2_1	include/CL/cl.h	207;"	d
CL_VERSION_2_2	include/CL/cl.h	208;"	d
CL_VYUY_INTEL	include/CL/cl_ext_intel.h	255;"	d
CL_WGL_HDC_KHR	include/CL/cl_gl.h	146;"	d
CL_YUYV_INTEL	include/CL/cl_ext_intel.h	252;"	d
CL_YV12_IMG	include/CL/cl_ext.h	324;"	d
CL_YVYU_INTEL	include/CL/cl_ext_intel.h	254;"	d
CL_sBGRA	include/CL/cl.h	434;"	d
CL_sRGB	include/CL/cl.h	431;"	d
CL_sRGBA	include/CL/cl.h	433;"	d
CL_sRGBx	include/CL/cl.h	432;"	d
CLeglDisplayKHR	include/CL/cl_egl.h	/^typedef void* CLeglDisplayKHR;$/;"	t
CLeglImageKHR	include/CL/cl_egl.h	/^typedef void* CLeglImageKHR;$/;"	t
CLeglSyncKHR	include/CL/cl_egl.h	/^typedef void* CLeglSyncKHR;$/;"	t
CNNDataTypes	tests/validation/CL/ActivationLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon399	file:
CNNDataTypes	tests/validation/CL/ConvolutionLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon407	file:
CNNDataTypes	tests/validation/CL/DilatedConvolutionLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon414	file:
CNNDataTypes	tests/validation/CL/FullyConnectedLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon420	file:
CNNDataTypes	tests/validation/CL/GEMM.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon421	file:
CNNDataTypes	tests/validation/CL/SoftmaxLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon448	file:
CNNDataTypes	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon454	file:
CNNDataTypes	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon457	file:
CNNDataTypes	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon461	file:
CNNDataTypes	tests/validation/GLES_COMPUTE/GEMM.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon462	file:
CNNDataTypes	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon468	file:
CNNDataTypes	tests/validation/NEON/ActivationLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon472	file:
CNNDataTypes	tests/validation/NEON/ConvolutionLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon481	file:
CNNDataTypes	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon488	file:
CNNDataTypes	tests/validation/NEON/FullyConnectedLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon495	file:
CNNDataTypes	tests/validation/NEON/GEMM.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon496	file:
CNNDataTypes	tests/validation/NEON/SoftmaxLayer.cpp	/^const auto CNNDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon523	file:
COEFF1	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float COEFF1       = 0.0663f;$/;"	m	namespace:__anon277	file:
COEFF2	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float COEFF2       = 0.2447f;$/;"	m	namespace:__anon277	file:
CONCAT	tests/framework/Macros.h	50;"	d
CONFIG	tests/framework/Exceptions.h	/^    CONFIG,$/;"	m	class:arm_compute::test::framework::LogLevel
CONSTANT	arm_compute/core/Types.h	/^    CONSTANT,  \/**< Pixels outside the image are assumed to have a constant value *\/$/;"	m	class:arm_compute::BorderMode
CONSTANT_BORDER_VALUE	arm_compute/core/Types.h	/^constexpr uint8_t CONSTANT_BORDER_VALUE = 199;$/;"	m	namespace:arm_compute
CONST_ONE	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	43;"	d
CONVERT	src/core/CL/cl_kernels/fixed_point.h	88;"	d
CONVERT	src/core/CL/cl_kernels/fixed_point.h	98;"	d
CONVERT	src/core/CL/cl_kernels/helpers.h	54;"	d
CONVERTQ_DOWN_IMPL	src/core/CL/cl_kernels/fixed_point.h	479;"	d
CONVERTQ_DOWN_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	488;"	d
CONVERTQ_UP_IMPL	src/core/CL/cl_kernels/fixed_point.h	497;"	d
CONVERT_SAT	src/core/CL/cl_kernels/fixed_point.h	103;"	d
CONVERT_SAT	src/core/CL/cl_kernels/fixed_point.h	90;"	d
CONVERT_SAT	src/core/CL/cl_kernels/helpers.h	57;"	d
CONVERT_SAT_ROUND	src/core/CL/cl_kernels/helpers.h	60;"	d
CONVERT_SAT_ROUND_STR	src/core/CL/cl_kernels/helpers.h	59;"	d
CONVERT_SAT_STR	src/core/CL/cl_kernels/fixed_point.h	102;"	d
CONVERT_SAT_STR	src/core/CL/cl_kernels/fixed_point.h	89;"	d
CONVERT_SAT_STR	src/core/CL/cl_kernels/helpers.h	56;"	d
CONVERT_SAT_STR2	src/core/CL/cl_kernels/fixed_point.h	101;"	d
CONVERT_SAT_STR3	src/core/CL/cl_kernels/fixed_point.h	100;"	d
CONVERT_STR	src/core/CL/cl_kernels/fixed_point.h	87;"	d
CONVERT_STR	src/core/CL/cl_kernels/fixed_point.h	97;"	d
CONVERT_STR	src/core/CL/cl_kernels/helpers.h	53;"	d
CONVERT_STR2	src/core/CL/cl_kernels/fixed_point.h	96;"	d
CONVERT_STR3	src/core/CL/cl_kernels/fixed_point.h	95;"	d
CONVERT_TENSOR3D_TO_IMAGE_ITERATOR	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	118;"	d
CONVERT_TENSOR3D_TO_IMAGE_ITERATOR_NO_STEP	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	122;"	d
CONVERT_TENSOR3D_TO_IMAGE_STRUCT	src/core/CL/cl_kernels/helpers.h	110;"	d
CONVERT_TENSOR3D_TO_IMAGE_STRUCT	src/core/CL/cl_kernels/helpers.h	116;"	d
CONVERT_TENSOR3D_TO_IMAGE_STRUCT_NO_STEP	src/core/CL/cl_kernels/helpers.h	113;"	d
CONVERT_TO_IMAGE_ITERATOR	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	102;"	d
CONVERT_TO_IMAGE_ITERATOR_NO_STEP	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	106;"	d
CONVERT_TO_IMAGE_STRUCT	src/core/CL/cl_kernels/helpers.h	104;"	d
CONVERT_TO_IMAGE_STRUCT_NO_STEP	src/core/CL/cl_kernels/helpers.h	107;"	d
CONVERT_TO_TENSOR3D_ITERATOR	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	110;"	d
CONVERT_TO_TENSOR3D_ITERATOR_NO_STEP	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	114;"	d
CONVERT_TO_TENSOR3D_STRUCT	src/core/CL/cl_kernels/helpers.h	119;"	d
CONVERT_TO_TENSOR3D_STRUCT_NO_STEP	src/core/CL/cl_kernels/helpers.h	123;"	d
CONVERT_TO_TENSOR4D_STRUCT	src/core/CL/cl_kernels/helpers.h	126;"	d
CONVERT_TO_TENSOR4D_STRUCT_NO_STEP	src/core/CL/cl_kernels/helpers.h	130;"	d
CONVERT_TO_VECTOR_ITERATOR	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	94;"	d
CONVERT_TO_VECTOR_ITERATOR_NO_STEP	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	98;"	d
CONVERT_TO_VECTOR_STRUCT	src/core/CL/cl_kernels/helpers.h	98;"	d
CONVERT_TO_VECTOR_STRUCT_NO_STEP	src/core/CL/cl_kernels/helpers.h	101;"	d
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	123;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	125;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	236;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	238;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	365;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	367;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	509;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	511;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	656;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	658;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	798;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	800;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	922;"	d	file:
CONVOLVE	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	924;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	1024;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	138;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	140;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	267;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	269;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	367;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	477;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	647;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	650;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	775;"	d	file:
CONVOLVE1x3	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	896;"	d	file:
CONVOLVE1x5	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	134;"	d	file:
CONVOLVE1x5	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	137;"	d	file:
CPP	arm_compute/runtime/Scheduler.h	/^        CPP,   \/**< C++11 threads. *\/$/;"	m	class:arm_compute::Scheduler::Type
CPPCornerCandidatesKernel	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^class CPPCornerCandidatesKernel : public INEKernel$/;"	c	namespace:arm_compute
CPPCornerCandidatesKernel	src/core/CPP/kernels/CPPCornerCandidatesKernel.cpp	/^CPPCornerCandidatesKernel::CPPCornerCandidatesKernel()$/;"	f	class:CPPCornerCandidatesKernel
CPPDetectionWindowNonMaximaSuppressionKernel	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	/^class CPPDetectionWindowNonMaximaSuppressionKernel : public ICPPKernel$/;"	c	namespace:arm_compute
CPPDetectionWindowNonMaximaSuppressionKernel	src/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.cpp	/^CPPDetectionWindowNonMaximaSuppressionKernel::CPPDetectionWindowNonMaximaSuppressionKernel()$/;"	f	class:CPPDetectionWindowNonMaximaSuppressionKernel
CPPPermute	arm_compute/runtime/CPP/functions/CPPPermute.h	/^class CPPPermute : public ICPPSimpleFunction$/;"	c	namespace:arm_compute
CPPPermuteKernel	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	/^class CPPPermuteKernel : public ICPPKernel$/;"	c	namespace:arm_compute
CPPPermuteKernel	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^CPPPermuteKernel::CPPPermuteKernel()$/;"	f	class:CPPPermuteKernel
CPPScheduler	arm_compute/runtime/CPP/CPPScheduler.h	/^class CPPScheduler : public IScheduler$/;"	c	namespace:arm_compute
CPPScheduler	src/runtime/CPP/CPPScheduler.cpp	/^CPPScheduler::CPPScheduler()$/;"	f	class:arm_compute::CPPScheduler
CPPSortEuclideanDistanceKernel	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^class CPPSortEuclideanDistanceKernel : public ICPPKernel$/;"	c	namespace:arm_compute
CPPSortEuclideanDistanceKernel	src/core/CPP/kernels/CPPSortEuclideanDistanceKernel.cpp	/^CPPSortEuclideanDistanceKernel::CPPSortEuclideanDistanceKernel()$/;"	f	class:CPPSortEuclideanDistanceKernel
CPPUpsample	arm_compute/runtime/CPP/functions/CPPUpsample.h	/^class CPPUpsample : public ICPPSimpleFunction$/;"	c	namespace:arm_compute
CPPUpsampleKernel	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^class CPPUpsampleKernel : public ICPPKernel$/;"	c	namespace:arm_compute
CPPUpsampleKernel	src/core/CPP/kernels/CPPUpsampleKernel.cpp	/^CPPUpsampleKernel::CPPUpsampleKernel()$/;"	f	class:CPPUpsampleKernel
CPUInfo	src/core/CPP/CPPTypes.cpp	/^CPUInfo::CPUInfo()$/;"	f	class:CPUInfo
CPUModel	arm_compute/core/CPP/CPPTypes.h	/^enum class CPUModel$/;"	c	namespace:arm_compute
CRASHED	tests/framework/TestResult.h	/^        CRASHED,$/;"	m	class:arm_compute::test::framework::TestResult::Status
CROSS	arm_compute/core/Types.h	/^    CROSS, \/**< Cross pattern matrix. *\/$/;"	m	class:arm_compute::MatrixPattern
CRTP	arm_compute/core/utils/misc/CRTP.h	/^struct CRTP$/;"	s	namespace:arm_compute::misc
CURRENT_ITEM_OFFSET	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	231;"	d
CURRENT_ITEM_OFFSET_IN_BYTES	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	234;"	d
CaffePreproccessor	utils/GraphUtils.cpp	/^CaffePreproccessor::CaffePreproccessor(std::array<float, 3> mean, bool bgr)$/;"	f	class:CaffePreproccessor
CaffePreproccessor	utils/GraphUtils.h	/^class CaffePreproccessor : public IPreprocessor$/;"	c	namespace:arm_compute::graph_utils
CartesianProductDataset	tests/framework/datasets/CartesianProductDataset.h	/^    CartesianProductDataset(T &&dataset1, U &&dataset2)$/;"	f	class:arm_compute::test::framework::dataset::CartesianProductDataset
CartesianProductDataset	tests/framework/datasets/CartesianProductDataset.h	/^class CartesianProductDataset : public Dataset$/;"	c	namespace:arm_compute::test::framework::dataset
Channel	arm_compute/core/Types.h	/^enum class Channel$/;"	c	namespace:arm_compute
ChannelCombineValidationFixture	tests/validation/fixtures/ChannelCombineFixture.h	/^class ChannelCombineValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ChannelExtractRGBADataset	tests/validation/CL/ChannelExtract.cpp	/^const auto ChannelExtractRGBADataset = combine(framework::dataset::make("FormatType", { Format::RGBA8888 }),$/;"	m	namespace:arm_compute::test::validation::__anon405	file:
ChannelExtractRGBADataset	tests/validation/NEON/ChannelExtract.cpp	/^const auto ChannelExtractRGBADataset = combine(framework::dataset::make("FormatType", { Format::RGBA8888 }),$/;"	m	namespace:arm_compute::test::validation::__anon478	file:
ChannelExtractValidationFixture	tests/validation/fixtures/ChannelExtractFixture.h	/^class ChannelExtractValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ChannelExtractYUVDataset	tests/validation/CL/ChannelExtract.cpp	/^const auto ChannelExtractYUVDataset = combine(framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 }),$/;"	m	namespace:arm_compute::test::validation::__anon405	file:
ChannelExtractYUVDataset	tests/validation/NEON/ChannelExtract.cpp	/^const auto ChannelExtractYUVDataset = combine(framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 }),$/;"	m	namespace:arm_compute::test::validation::__anon478	file:
ChannelExtractYUVPlanarDataset	tests/validation/CL/ChannelExtract.cpp	/^const auto ChannelExtractYUVPlanarDataset = combine(framework::dataset::make("FormatType", { Format::IYUV, Format::YUV444, Format::NV12, Format::NV21 }),$/;"	m	namespace:arm_compute::test::validation::__anon405	file:
ChannelExtractYUVPlanarDataset	tests/validation/NEON/ChannelExtract.cpp	/^const auto ChannelExtractYUVPlanarDataset = combine(framework::dataset::make("FormatType", { Format::IYUV, Format::YUV444, Format::NV12, Format::NV21 }),$/;"	m	namespace:arm_compute::test::validation::__anon478	file:
ChannelShuffleLayerDataset	tests/datasets/ChannelShuffleLayerDataset.h	/^class ChannelShuffleLayerDataset$/;"	c	namespace:arm_compute::test::datasets
ChannelShuffleLayerValidationFixture	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^class ChannelShuffleLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Clear	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    inline void Clear() {$/;"	f	class:final
CloseResultsWindow	documentation/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	documentation/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
CommandQueue	include/CL/cl.hpp	/^    CommandQueue($/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl.hpp	/^    CommandQueue() { }$/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl.hpp	/^    CommandQueue(const CommandQueue& commandQueue) : detail::Wrapper<cl_type>(commandQueue) { }$/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl.hpp	/^    CommandQueue(const cl_command_queue& commandQueue) : detail::Wrapper<cl_type>(commandQueue) { }$/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl.hpp	/^    explicit CommandQueue($/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl.hpp	/^   CommandQueue($/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl.hpp	/^class CommandQueue : public detail::Wrapper<cl_command_queue>$/;"	c	namespace:cl
CommandQueue	include/CL/cl2.hpp	/^    CommandQueue($/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl2.hpp	/^    CommandQueue() { }$/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl2.hpp	/^    CommandQueue(const CommandQueue& queue) : detail::Wrapper<cl_type>(queue) {}$/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl2.hpp	/^    explicit CommandQueue($/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl2.hpp	/^    explicit CommandQueue(const cl_command_queue& commandQueue, bool retainObject = false) : $/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl2.hpp	/^   CommandQueue($/;"	f	class:cl::CommandQueue
CommandQueue	include/CL/cl2.hpp	/^class CommandQueue : public detail::Wrapper<cl_command_queue>$/;"	c	namespace:cl
CommonOptions	tests/framework/command_line/CommonOptions.cpp	/^CommonOptions::CommonOptions(CommandLineParser &parser)$/;"	f	class:arm_compute::test::framework::CommonOptions
CommonOptions	tests/framework/command_line/CommonOptions.h	/^class CommonOptions$/;"	c	namespace:arm_compute::test::framework
Comparable	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^struct Comparable : misc::CRTP<T, Comparable>$/;"	s	namespace:arm_compute::strong_type
Const	arm_compute/graph/Types.h	/^    Const,$/;"	m	class:arm_compute::graph::NodeType
ConstNode	src/graph/nodes/ConstNode.cpp	/^ConstNode::ConstNode(TensorDescriptor desc)$/;"	f	class:arm_compute::graph::ConstNode
ContainerDataset	tests/framework/datasets/ContainerDataset.h	/^    ContainerDataset(std::string name, T &&container)$/;"	f	class:arm_compute::test::framework::dataset::ContainerDataset
ContainerDataset	tests/framework/datasets/ContainerDataset.h	/^class ContainerDataset : public NamedDataset$/;"	c	namespace:arm_compute::test::framework::dataset
Context	include/CL/cl.hpp	/^    Context($/;"	f	class:cl::Context
Context	include/CL/cl.hpp	/^    Context() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Context
Context	include/CL/cl.hpp	/^    Context(const Context& context) : detail::Wrapper<cl_type>(context) { }$/;"	f	class:cl::Context
Context	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Context(const cl_context& context) : detail::Wrapper<cl_type>(context) { }$/;"	f	class:cl::Context
Context	include/CL/cl.hpp	/^class Context $/;"	c	namespace:cl
Context	include/CL/cl2.hpp	/^    Context($/;"	f	class:cl::Context
Context	include/CL/cl2.hpp	/^    Context() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Context
Context	include/CL/cl2.hpp	/^    Context(const Context& ctx) : detail::Wrapper<cl_type>(ctx) {}$/;"	f	class:cl::Context
Context	include/CL/cl2.hpp	/^    explicit Context(const cl_context& context, bool retainObject = false) : $/;"	f	class:cl::Context
Context	include/CL/cl2.hpp	/^class Context $/;"	c	namespace:cl
ConvertFullyConnectedWeightsValidationFixture	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^class ConvertFullyConnectedWeightsValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ConvertPolicies	tests/datasets/ConvertPolicyDataset.h	/^    ConvertPolicies()$/;"	f	class:arm_compute::test::datasets::final
ConvertPolicy	arm_compute/core/Types.h	/^enum class ConvertPolicy$/;"	c	namespace:arm_compute
Convolution	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    class Convolution$/;"	c	class:winograd::WinogradGEMM
Convolution	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^template class WinogradGEMM<2, 2, 3, 3>::Convolution<float, float>;$/;"	m	class:WinogradGEMM	typeref:class:WinogradGEMM::	file:
Convolution	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^template class WinogradGEMM<2, 2, 5, 5>::Convolution<float, float>;$/;"	m	class:WinogradGEMM	typeref:class:WinogradGEMM::	file:
Convolution	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^template class WinogradGEMM<4, 4, 3, 3>::Convolution<float, float>;$/;"	m	class:WinogradGEMM	typeref:class:WinogradGEMM::	file:
ConvolutionLayer	arm_compute/graph/Types.h	/^    ConvolutionLayer,$/;"	m	class:arm_compute::graph::NodeType
ConvolutionLayer	arm_compute/graph/frontend/Layers.h	/^    ConvolutionLayer(unsigned int           conv_width,$/;"	f	class:arm_compute::graph::frontend::final
ConvolutionLayerDataset	tests/datasets/ConvolutionLayerDataset.h	/^class ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
ConvolutionLayerFixture	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^class ConvolutionLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
ConvolutionLayerNode	src/graph/nodes/ConvolutionLayerNode.cpp	/^ConvolutionLayerNode::ConvolutionLayerNode(PadStrideInfo info, ConvolutionMethod method, FastMathHint fast_math_hint, QuantizationInfo out_quant_info)$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
ConvolutionMethod	arm_compute/core/Types.h	/^enum class ConvolutionMethod$/;"	c	class:arm_compute::HOGNormType
ConvolutionMethod	arm_compute/graph/Types.h	/^enum class ConvolutionMethod$/;"	c	namespace:arm_compute::graph
ConvolutionRectangleValidationFixture	tests/validation/fixtures/ConvolutionFixture.h	/^class ConvolutionRectangleValidationFixture : public ConvolutionValidationFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ConvolutionSeparableValidationFixture	tests/validation/fixtures/ConvolutionFixture.h	/^class ConvolutionSeparableValidationFixture : public ConvolutionValidationFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ConvolutionSquareValidationFixture	tests/validation/fixtures/ConvolutionFixture.h	/^class ConvolutionSquareValidationFixture : public ConvolutionValidationFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ConvolutionValidationFixedPointFixture	tests/validation/fixtures/ConvolutionLayerFixture.h	/^class ConvolutionValidationFixedPointFixture : public ConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ConvolutionValidationFixture	tests/validation/fixtures/ConvolutionFixture.h	/^class ConvolutionValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ConvolutionValidationFixture	tests/validation/fixtures/ConvolutionLayerFixture.h	/^class ConvolutionValidationFixture : public ConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
ConvolutionValidationGenericFixture	tests/validation/fixtures/ConvolutionLayerFixture.h	/^class ConvolutionValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ConvolutionValidationQuantizedFixture	tests/validation/fixtures/ConvolutionLayerFixture.h	/^class ConvolutionValidationQuantizedFixture : public ConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
Coordinates	arm_compute/core/Coordinates.h	/^    constexpr Coordinates(Ts... coords)$/;"	f	class:arm_compute::Coordinates
Coordinates	arm_compute/core/Coordinates.h	/^class Coordinates : public Dimensions<int>$/;"	c	namespace:arm_compute
Coordinates2D	arm_compute/core/Types.h	/^struct Coordinates2D$/;"	s	namespace:arm_compute
Coordinates2D	src/core/CL/cl_kernels/types.h	/^typedef struct Coordinates2D$/;"	s
Coordinates2D	src/core/CL/cl_kernels/types.h	/^} Coordinates2D;$/;"	t	typeref:struct:Coordinates2D
Coordinates3D	arm_compute/core/Types.h	/^struct Coordinates3D$/;"	s	namespace:arm_compute
CopyFixture	tests/validation/fixtures/CopyFixture.h	/^class CopyFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
CounterMapping	tests/framework/instruments/hwc_names.hpp	/^struct CounterMapping$/;"	s	namespace:mali_userspace
Custom	arm_compute/core/Types.h	/^        Custom,  \/**< Custom precision specified by the user using the precision parameter *\/$/;"	m	class:arm_compute::HOGNormType::IOFormatInfo::PrecisionType
D0	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^constexpr float D0                    = 1 << W_BITS;$/;"	v
D0	tests/validation/reference/OpticalFlow.cpp	/^constexpr float D0                    = 1 << W_BITS;$/;"	m	namespace:arm_compute::test::validation::reference::__anon544	file:
DATA_TEST_CASE	tests/framework/Macros.h	175;"	d
DATA_TEST_CASE	tests/validation/CL/AbsoluteDifference.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), AbsoluteDifferenceS16Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/AbsoluteDifference.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), AbsoluteDifferenceU8Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), AccumulateS16Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), AccumulateU8Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), CNNDataTypes), framework::dataset::make("InPlace", { false, true })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::U8, DataType::S16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("ConvertPolicy", { ConvertPolicy::SATURATE, ConvertPolicy::WRAP })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("ConvertPolicy", { ConvertPolicy::SATURATE, ConvertPolicy::WRAP })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/BatchNormalizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/BatchNormalizationLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/BitwiseAnd.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/BitwiseNot.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/BitwiseOr.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/BitwiseXor.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Box3x3.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^DATA_TEST_CASE(RGBA, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("FormatType", { Format::RGB888, Format::RGBA8888 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^DATA_TEST_CASE(YUV, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^DATA_TEST_CASE(YUVPlanar, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("FormatType", { Format::IYUV, Format::YUV444, Format::NV12, Format::NV21 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^DATA_TEST_CASE(RGBA, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), ChannelExtractRGBADataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^DATA_TEST_CASE(YUV, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), ChannelExtractYUVDataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^DATA_TEST_CASE(YUVPlanar, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), ChannelExtractYUVPlanarDataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(datasets::SmallRandomChannelShuffleLayerDataset(), framework::dataset::make("DataType", { DataType::S8, DataType::U8, DataType::S16, DataType::U16, DataType::U32, DataType::S32, DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::U8, DataType::S16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallConvolutionLayerDataset(), datasets::LargeConvolutionLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^DATA_TEST_CASE(ValidateConvolutionMethod, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DeconvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, (combine(datasets::SmallDeconvolutionShapes(), framework::dataset::make("DataType", DataType::F32))),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DeconvolutionLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::QS8, DataType::QS16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("ConvertPolicy", { ConvertPolicy::SATURATE, ConvertPolicy::WRAP })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^DATA_TEST_CASE(Validate3x3, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^DATA_TEST_CASE(ValidateGeneric, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DequantizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(DequantizationShapes, framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Derivative.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Dilate.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallDilatedConvolutionLayerDataset(), datasets::LargeDilatedConvolutionLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^DATA_TEST_CASE(ValidateConvolutionMethod, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/EqualizeHistogram.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Erode.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/FastCorners.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/FillBorder.cpp	/^DATA_TEST_CASE(FillBorder, framework::DatasetMode::ALL, combine(combine(combine(combine($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallFullyConnectedLayerDataset(), datasets::LargeFullyConnectedLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallGEMMDataset(), datasets::LargeGEMMDataset()), CNNDataTypes),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), quantize_down_int32_to_uint8_scale_cases),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, framework::dataset::concat(datasets::SmallGEMMLowpDataset(), datasets::LargeGEMMLowpDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Gaussian3x3.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Gaussian5x5.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/GaussianPyramid.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, large_gaussian_pyramid_levels,$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/HarrisCorners.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), data), framework::dataset::make("Format", Format::U8)), shape,$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Histogram.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/IntegralImage.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/L2NormalizeLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/LSTMLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/LocallyConnected.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallLocallyConnectedDataset(), datasets::LargeLocallyConnectedDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/LocallyConnected.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Magnitude.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::S16, DataType::S32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/MeanStdDev.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Median3x3.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::F32)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::S16)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/NonLinearFilter.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), datasets::NonLinearFilterFunctions()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(datasets::Small4DShapes(), framework::dataset::make("DataType", { DataType::S8, DataType::U8, DataType::S16, DataType::U16, DataType::U32, DataType::S32, DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Phase.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::S16, DataType::S32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/PixelWiseMultiplication.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/QuantizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(QuantizationShapes, framework::dataset::make("DataType", DataType::F32)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/RNNLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/ReductionOperation.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Remap.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(concat(datasets::MediumShapes(), datasets::LargeShapes()), ScaleDataTypes),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Scharr.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SoftmaxLayerSmallShapes(), datasets::SoftmaxLayerLargeShapes()), CNNDataTypes), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/TableLookup.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::U8, DataType::S16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Threshold.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), datasets::MixedThresholdDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", { DataType::S8, DataType::U8, DataType::S16, DataType::U16, DataType::U32, DataType::S32, DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/WarpAffine.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/WarpPerspective.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(framework::dataset::concat(datasets::Small3x3Shapes(), datasets::Large3x3Shapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallWinogradInputTransformDataset(), datasets::LargeWinogradInputTransformDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallWinogradOutputTransformDataset(), datasets::LargeWinogradOutputTransformDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(datasets::Small4DShapes(), framework::dataset::make("DataType", { DataType::S8, DataType::U8, DataType::S16, DataType::U16, DataType::U32, DataType::S32, DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), CNNDataTypes), framework::dataset::make("InPlace", { false, true })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallConvolutionLayerDataset(), datasets::LargeConvolutionLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallFullyConnectedLayerDataset(), datasets::LargeFullyConnectedLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/GEMM.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallGEMMDataset(), datasets::LargeGEMMDataset()), CNNDataTypes),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(datasets::RandomNormalizePlanarYUVLayerDataset(), framework::dataset::make("DataType", { DataType::F16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Scale.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(concat(datasets::MediumShapes(), datasets::LargeShapes()), ScaleDataTypes),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SoftmaxLayerSmallShapes(), datasets::SoftmaxLayerLargeShapes()), CNNDataTypes), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Transpose.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", { DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/AbsoluteDifference.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), AbsoluteDifferenceU8Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/AbsoluteDifference.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), AbsoluteDifferenceS16Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), AccumulateS16Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), AccumulateU8Dataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), CNNDataTypes), framework::dataset::make("InPlace", { false, true })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::U8, DataType::S16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("ConvertPolicy", { ConvertPolicy::SATURATE, ConvertPolicy::WRAP })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("ConvertPolicy", { ConvertPolicy::SATURATE, ConvertPolicy::WRAP })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/BatchNormalizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/BatchNormalizationLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/BitwiseAnd.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/BitwiseNot.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/BitwiseOr.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/BitwiseXor.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Box3x3.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^DATA_TEST_CASE(RGBA, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("FormatType", { Format::RGB888, Format::RGBA8888 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^DATA_TEST_CASE(YUV, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^DATA_TEST_CASE(YUVPlanar, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("FormatType", { Format::IYUV, Format::YUV444, Format::NV12, Format::NV21 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^DATA_TEST_CASE(RGBA, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), ChannelExtractRGBADataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^DATA_TEST_CASE(YUV, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), ChannelExtractYUVDataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^DATA_TEST_CASE(YUVPlanar, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), ChannelExtractYUVPlanarDataset),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Col2Im.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::U8, DataType::S16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallConvolutionLayerDataset(), datasets::LargeConvolutionLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^DATA_TEST_CASE(ValidateConvolutionMethod, framework::DatasetMode::ALL, zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DeconvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, (combine(datasets::SmallDeconvolutionShapes(), framework::dataset::make("DataType", DataType::F32))),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DeconvolutionLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::QS8, DataType::QS16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("ConvertPolicy", { ConvertPolicy::SATURATE, ConvertPolicy::WRAP })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DequantizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(DequantizationShapes, framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Derivative.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Dilate.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallDilatedConvolutionLayerDataset(), datasets::LargeDilatedConvolutionLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^DATA_TEST_CASE(ValidateConvolutionMethod, framework::DatasetMode::ALL, zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/DirectConvolutionLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/EqualizeHistogram.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Erode.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/FastCorners.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/FillBorder.cpp	/^DATA_TEST_CASE(FillBorder, framework::DatasetMode::ALL, combine(combine(combine(combine($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(framework::dataset::concat(datasets::SmallFullyConnectedLayerDataset(), datasets::LargeFullyConnectedLayerDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallGEMMDataset(), datasets::LargeGEMMDataset()), CNNDataTypes),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), quantize_down_int32_to_uint8_scale_cases),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, framework::dataset::concat(datasets::SmallGEMMLowpDataset(), datasets::LargeGEMMLowpDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Gaussian3x3.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Gaussian5x5.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/GaussianPyramid.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, large_gaussian_pyramid_levels,$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/HarrisCorners.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), data), framework::dataset::make("Format", Format::U8)), shape,$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Histogram.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Im2Col.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/IntegralImage.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/L2NormalizeLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/LocallyConnected.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallLocallyConnectedDataset(), datasets::LargeLocallyConnectedDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/LocallyConnected.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Magnitude.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::S16)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/MeanStdDev.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Median3x3.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::F32)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::S16)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", DataType::U8)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/NonLinearFilter.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), datasets::NonLinearFilterFunctions()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(datasets::Small4DShapes(), framework::dataset::make("DataType", { DataType::S8, DataType::U8, DataType::S16, DataType::U16, DataType::U32, DataType::S32, DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Phase.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::S16)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/PixelWiseMultiplication.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/QuantizationLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(QuantizationShapes, framework::dataset::make("DataType", DataType::F32)), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/ReductionOperation.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Remap.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), ScaleDataTypes), ScaleDataLayouts),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip(zip(zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Schaar.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::SoftmaxLayerSmallShapes(), datasets::SoftmaxLayerLargeShapes()), CNNDataTypes), shape, data_type)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/TableLookup.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", { DataType::U8, DataType::S16 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Threshold.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), datasets::MixedThresholdDataset()),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(concat(datasets::Small2DShapes(), datasets::Large2DShapes()), framework::dataset::make("DataType", { DataType::S8, DataType::U8, DataType::S16, DataType::U16, DataType::U32, DataType::S32, DataType::F16, DataType::F32 })),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^DATA_TEST_CASE(Validate, framework::DatasetMode::ALL, zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/WarpAffine.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/NEON/WarpPerspective.cpp	/^DATA_TEST_CASE(Configuration, framework::DatasetMode::ALL, combine(combine(combine(concat(datasets::SmallShapes(), datasets::LargeShapes()), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/UNIT/FixedPoint.cpp	/^DATA_TEST_CASE(FixedPointQS8Inputs, framework::DatasetMode::ALL, combine($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/UNIT/FixedPoint.cpp	/^DATA_TEST_CASE(FixedPointQS8Outputs, framework::DatasetMode::ALL, zip(combine($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/UNIT/TensorInfo.cpp	/^DATA_TEST_CASE(AutoPadding, framework::DatasetMode::ALL, zip(zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/UNIT/TensorShape.cpp	/^DATA_TEST_CASE(Construction, framework::DatasetMode::ALL, zip(zip($/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/UNIT/TensorShape.cpp	/^DATA_TEST_CASE(SetEmpty, framework::DatasetMode::ALL, framework::dataset::make("Dimension", { 0U, 1U, 2U, 3U, 4U, 5U }), dimension)$/;"	f	namespace:arm_compute::test::validation
DATA_TEST_CASE	tests/validation/UNIT/Utils.cpp	/^DATA_TEST_CASE(Coord2Index, framework::DatasetMode::ALL, zip(zip(framework::dataset::make("Shape", { TensorShape{ 1U }, TensorShape{ 2U }, TensorShape{ 2U, 3U } }),$/;"	f
DATA_TEST_CASE	tests/validation/UNIT/Utils.cpp	/^DATA_TEST_CASE(Index2Coord, framework::DatasetMode::ALL, zip(zip(framework::dataset::make("Shape", { TensorShape{ 1U }, TensorShape{ 2U }, TensorShape{ 2U, 3U } }), framework::dataset::make("Index", { 0, 1, 2 })),$/;"	f
DATA_TEST_CASE	tests/validation/UNIT/Utils.cpp	/^DATA_TEST_CASE(RoundFloatToNearestUp, framework::DatasetMode::ALL, zip(framework::dataset::make("FloatIn", { 1.f, 1.2f, 1.5f, 2.5f, 2.9f, -3.f, -3.5f, -3.8f, -4.3f, -4.5f }),$/;"	f
DATA_TEST_CASE	tests/validation/UNIT/Utils.cpp	/^DATA_TEST_CASE(RoundFloatToZero, framework::DatasetMode::ALL, zip(framework::dataset::make("FloatIn", { 1.f, 1.2f, 1.5f, 2.5f, 2.9f, -3.f, -3.5f, -3.8f, -4.3f, -4.5f }),$/;"	f
DATA_TEST_CASE	tests/validation/UNIT/Utils.cpp	/^DATA_TEST_CASE(RoundHalfEven, framework::DatasetMode::ALL, zip(framework::dataset::make("FloatIn", { 1.f, 1.2f, 1.5f, 2.5f, 2.9f, -3.f, -3.5f, -3.8f, -4.3f, -4.5f }),$/;"	f
DATA_TEST_CASE	tests/validation/UNIT/Utils.cpp	/^DATA_TEST_CASE(RoundHalfUp, framework::DatasetMode::ALL, zip(framework::dataset::make("FloatIn", { 1.f, 1.2f, 1.5f, 2.5f, 2.9f, -3.f, -3.5f, -3.8f, -4.3f, -4.5f }),$/;"	f
DATA_TEST_CASE_CONSTRUCTOR	tests/framework/Macros.h	97;"	d
DATA_TEST_CASE_IMPL	tests/framework/Macros.h	155;"	d
DATA_TEST_REGISTRAR	tests/framework/Macros.h	132;"	d
DEBUG	tests/framework/Exceptions.h	/^    DEBUG,$/;"	m	class:arm_compute::test::framework::LogLevel
DECLARE_FUNCTION_PTR	arm_compute/core/CL/OpenCL.h	125;"	d
DECLARE_FUNCTION_PTR	arm_compute/core/CL/OpenCL.h	78;"	d
DECLARE_NEON_FUNCTIONS_FOR_FIXED_POINT	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	199;"	d	file:
DECLARE_NEON_FUNCTIONS_FOR_FLOAT	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	248;"	d	file:
DECLARE_NEON_FUNCTIONS_FOR_TYPE	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	132;"	d	file:
DECLARE_NEON_VEC_TYPE	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	48;"	d	file:
DEFAULT	arm_compute/graph/Types.h	/^    DEFAULT,       \/**< Default approach using internal heuristics *\/$/;"	m	class:arm_compute::graph::DepthwiseConvolutionMethod
DEFAULT	arm_compute/graph/Types.h	/^    DEFAULT, \/**< Default approach using internal heuristics *\/$/;"	m	class:arm_compute::graph::ConvolutionMethod
DEFAULT_VALIDATE	tests/validation/NEON/PixelWiseMultiplication.cpp	45;"	d	file:
DEPTH_CONCATENATE	arm_compute/graph/frontend/Types.h	/^    DEPTH_CONCATENATE, \/**< Concatenate across depth *\/$/;"	m	class:arm_compute::graph::frontend::BranchMergeMethod
DETERMINANT_THRESHOLD	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^constexpr float DETERMINANT_THRESHOLD = 1.0e-07f; \/\/ Threshold for the determinant. Used for lost tracking criteria$/;"	v
DETERMINANT_THRESHOLD	tests/validation/reference/OpticalFlow.cpp	/^constexpr float DETERMINANT_THRESHOLD = 1.0e-07f;$/;"	m	namespace:arm_compute::test::validation::reference::__anon544	file:
DIRECT	arm_compute/core/Types.h	/^    DIRECT,  \/**< Direct convolution *\/$/;"	m	class:arm_compute::HOGNormType::ConvolutionMethod
DIRECT	arm_compute/graph/Types.h	/^    DIRECT,  \/**< Deep direct convolution *\/$/;"	m	class:arm_compute::graph::ConvolutionMethod
DISABLED	arm_compute/graph/Types.h	/^    DISABLED, \/**< Fast math disabled for Convolution layer *\/$/;"	m	class:arm_compute::graph::FastMathHint
DISABLED	tests/framework/DatasetModes.h	/^    DISABLED  = 0,$/;"	m	class:arm_compute::test::framework::DatasetMode
DISABLED_DATA_TEST_CASE	tests/framework/Macros.h	179;"	d
DISABLED_FIXTURE_DATA_TEST_CASE	tests/framework/Macros.h	221;"	d
DISABLED_FIXTURE_DATA_TEST_CASE	tests/validation/NEON/WarpAffine.cpp	/^DISABLED_FIXTURE_DATA_TEST_CASE(RunLarge, NEWarpAffineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
DISABLED_FIXTURE_TEST_CASE	tests/framework/Macros.h	198;"	d
DISABLED_REGISTER_FIXTURE_DATA_TEST_CASE	tests/framework/Macros.h	262;"	d
DISABLED_REGISTER_FIXTURE_TEST_CASE	tests/framework/Macros.h	240;"	d
DISABLED_TEST_CASE	tests/framework/Macros.h	152;"	d
DISK	arm_compute/core/Types.h	/^    DISK,  \/**< Disk pattern matrix. *\/$/;"	m	class:arm_compute::MatrixPattern
DIVQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	309;"	d
DIV_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	39;"	d
DIV_OP	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	104;"	d	file:
DIV_OP	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	37;"	d	file:
DIV_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	326;"	d
DIV_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	325;"	d
DIV_SAT_OP_VEC_EXPAND	src/core/CL/cl_kernels/fixed_point.h	329;"	d
DIV_SAT_OP_VEC_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	328;"	d
DOMPopupSearchResults	documentation/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	documentation/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	documentation/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	documentation/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	documentation/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	documentation/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	documentation/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
DWC	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^  > DWC;$/;"	t	struct:depthwise::DepthwiseConvolutionImpl
DWC	arm_compute/core/NEON/kernels/convolution/depthwise/impl_fp32_fp32.hpp	/^  > DWC;$/;"	t	struct:depthwise::DepthwiseConvolutionImpl
DataLayout	arm_compute/core/Types.h	/^enum class DataLayout$/;"	c	namespace:arm_compute
DataLayoutDimension	arm_compute/core/Types.h	/^enum class DataLayoutDimension$/;"	c	namespace:arm_compute
DataTestCase	tests/framework/TestCase.h	/^    explicit DataTestCase(T data)$/;"	f	class:arm_compute::test::framework::DataTestCase
DataTestCase	tests/framework/TestCase.h	/^class DataTestCase : public TestCase$/;"	c	namespace:arm_compute::test::framework
DataTestCaseFactory	tests/framework/TestCaseFactory.h	/^inline DataTestCaseFactory<T, D>::DataTestCaseFactory(std::string suite_name, std::string test_name, DatasetMode mode, Status status, std::string description, const D &data)$/;"	f	class:arm_compute::test::framework::DataTestCaseFactory
DataType	arm_compute/core/Types.h	/^enum class DataType$/;"	c	namespace:arm_compute
Dataset	tests/framework/datasets/Dataset.h	/^class Dataset$/;"	c	namespace:arm_compute::test::framework::dataset
DatasetMode	tests/framework/DatasetModes.h	/^enum class DatasetMode : unsigned int$/;"	c	namespace:arm_compute::test::framework
DateDecorator	arm_compute/core/utils/logging/LogMsgDecorators.h	/^class DateDecorator : public IDecorator$/;"	c	namespace:arm_compute::logging
DeconvolutionLayerFixtureBase	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^class DeconvolutionLayerFixtureBase : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DeconvolutionValidationFixture	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^class DeconvolutionValidationFixture : public DeconvolutionLayerFixtureBase<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
Default	arm_compute/core/Types.h	/^        Default, \/**< Default precision to the one that the current stream has *\/$/;"	m	class:arm_compute::HOGNormType::IOFormatInfo::PrecisionType
DefaultNodeVisitor	arm_compute/graph/INodeVisitor.h	/^class DefaultNodeVisitor : public INodeVisitor$/;"	c	namespace:arm_compute::graph
Deleter	include/CL/cl2.hpp	/^        Deleter(const Alloc &alloc, size_type copies) : alloc_{ alloc }, copies_{ copies }$/;"	f	class:cl::detail::Deleter
Deleter	include/CL/cl2.hpp	/^    class Deleter {$/;"	c	namespace:cl::detail
DepthConcatenateLayer	arm_compute/graph/Types.h	/^    DepthConcatenateLayer,$/;"	m	class:arm_compute::graph::NodeType
DepthConcatenateLayerFixture	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^class DepthConcatenateLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
DepthConcatenateLayerNode	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^DepthConcatenateLayerNode::DepthConcatenateLayerNode(unsigned int total_nodes)$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
DepthConcatenateLayerShapes	tests/datasets/ShapeDatasets.h	/^    DepthConcatenateLayerShapes()$/;"	f	class:arm_compute::test::datasets::final
DepthConcatenateLayerValidationFixture	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^class DepthConcatenateLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DepthConvertLayerFP32toQS16Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerFP32toQS16Dataset          = combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::QS16));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerFP32toQS16Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerFP32toQS16Dataset          = combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::QS16));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerFP32toQS8Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerFP32toQS8Dataset           = combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::QS8));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerFP32toQS8Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerFP32toQS8Dataset           = combine(framework::dataset::make("DataType", DataType::F32), framework::dataset::make("DataType", DataType::QS8));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerFixedPointQuantizedDataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerFixedPointQuantizedDataset = framework::dataset::make("FractionalBits", 1, 7);$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerFixedPointQuantizedDataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerFixedPointQuantizedDataset = framework::dataset::make("FractionalBits", 1, 7);$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerQS16toFP32Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerQS16toFP32Dataset          = combine(framework::dataset::make("DataType", DataType::QS16), framework::dataset::make("DataType", DataType::F32));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerQS16toFP32Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerQS16toFP32Dataset          = combine(framework::dataset::make("DataType", DataType::QS16), framework::dataset::make("DataType", DataType::F32));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerQS8toFP32Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerQS8toFP32Dataset           = combine(framework::dataset::make("DataType", DataType::QS8), framework::dataset::make("DataType", DataType::F32));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerQS8toFP32Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerQS8toFP32Dataset           = combine(framework::dataset::make("DataType", DataType::QS8), framework::dataset::make("DataType", DataType::F32));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerS16toS32Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerS16toS32Dataset            = combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::S32));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerS16toS32Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerS16toS32Dataset            = combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::S32));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerS16toU8Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerS16toU8Dataset             = combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::U8));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerS16toU8Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerS16toU8Dataset             = combine(framework::dataset::make("DataType", DataType::S16), framework::dataset::make("DataType", DataType::U8));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerShiftDataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerShiftDataset               = framework::dataset::make("Shift", 0, 7);$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerShiftDataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerShiftDataset               = framework::dataset::make("Shift", 0, 7);$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerU16toU32Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU16toU32Dataset            = combine(framework::dataset::make("DataType", DataType::U16), framework::dataset::make("DataType", DataType::U32));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerU16toU32Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU16toU32Dataset            = combine(framework::dataset::make("DataType", DataType::U16), framework::dataset::make("DataType", DataType::U32));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerU16toU8Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU16toU8Dataset             = combine(framework::dataset::make("DataType", DataType::U16), framework::dataset::make("DataType", DataType::U8));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerU16toU8Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU16toU8Dataset             = combine(framework::dataset::make("DataType", DataType::U16), framework::dataset::make("DataType", DataType::U8));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerU8toS16Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU8toS16Dataset             = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S16));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerU8toS16Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU8toS16Dataset             = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S16));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerU8toS32Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU8toS32Dataset             = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S32));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerU8toS32Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU8toS32Dataset             = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::S32));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerU8toU16Dataset	tests/validation/CL/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU8toU16Dataset             = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U16));$/;"	m	namespace:arm_compute::test::validation::__anon409	file:
DepthConvertLayerU8toU16Dataset	tests/validation/NEON/DepthConvertLayer.cpp	/^const auto DepthConvertLayerU8toU16Dataset             = combine(framework::dataset::make("DataType", DataType::U8), framework::dataset::make("DataType", DataType::U16));$/;"	m	namespace:arm_compute::test::validation::__anon483	file:
DepthConvertLayerValidationFixedPointFixture	tests/validation/fixtures/DepthConvertLayerFixture.h	/^class DepthConvertLayerValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DepthConvertLayerValidationFixture	tests/validation/fixtures/DepthConvertLayerFixture.h	/^class DepthConvertLayerValidationFixture : public DepthConvertLayerValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T1, T2>$/;"	c	namespace:arm_compute::test::validation
DepthConvertLayerValidationFractionalBitsFixture	tests/validation/fixtures/DepthConvertLayerFixture.h	/^class DepthConvertLayerValidationFractionalBitsFixture : public DepthConvertLayerValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T1, T2>$/;"	c	namespace:arm_compute::test::validation
DepthwiseConvolution	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    DepthwiseConvolution($/;"	f	class:depthwise::DepthwiseConvolution
DepthwiseConvolution	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^class DepthwiseConvolution : public IDepthwiseConvolution$/;"	c	namespace:depthwise
DepthwiseConvolution	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^DepthwiseConvolution<OTR, OTC, KR, KC, SR, SC, TIn, TOut>::DepthwiseConvolution($/;"	f	class:depthwise::DepthwiseConvolution
DepthwiseConvolutionImpl	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^struct DepthwiseConvolutionImpl : public DepthwiseConvolution<$/;"	s	namespace:depthwise
DepthwiseConvolutionImpl	arm_compute/core/NEON/kernels/convolution/depthwise/impl_fp32_fp32.hpp	/^struct DepthwiseConvolutionImpl<OutputTileRows, OutputTileCols, KernelRows, KernelCols, StrideRows, StrideCols, float, float>$/;"	s	namespace:depthwise
DepthwiseConvolutionLayer	arm_compute/graph/Types.h	/^    DepthwiseConvolutionLayer,$/;"	m	class:arm_compute::graph::NodeType
DepthwiseConvolutionLayer	arm_compute/graph/frontend/Layers.h	/^    DepthwiseConvolutionLayer(unsigned int           conv_width,$/;"	f	class:arm_compute::graph::frontend::final
DepthwiseConvolutionLayerDataset	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
DepthwiseConvolutionLayerFixture	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^class DepthwiseConvolutionLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
DepthwiseConvolutionLayerNode	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^DepthwiseConvolutionLayerNode::DepthwiseConvolutionLayerNode(PadStrideInfo info, DepthwiseConvolutionMethod method)$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
DepthwiseConvolutionLayerValidationFixture	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^class DepthwiseConvolutionLayerValidationFixture : public DepthwiseConvolutionLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DepthwiseConvolutionLayerValidationGenericFixture	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^class DepthwiseConvolutionLayerValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DepthwiseConvolutionLayerValidationQuantizedFixture	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^class DepthwiseConvolutionLayerValidationQuantizedFixture : public DepthwiseConvolutionLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DepthwiseConvolutionMethod	arm_compute/graph/Types.h	/^enum class DepthwiseConvolutionMethod$/;"	c	namespace:arm_compute::graph
DepthwiseSeparableConvolutionLayerDataset	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^class DepthwiseSeparableConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
DepthwiseSeparableConvolutionLayerFixture	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^class DepthwiseSeparableConvolutionLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
DepthwiseSeparableConvolutionValidationFixture	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^class DepthwiseSeparableConvolutionValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DequantizationLayerFixture	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^class DequantizationLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
DequantizationShapes	tests/validation/CL/DequantizationLayer.cpp	/^const auto DequantizationShapes = concat(concat(concat(datasets::Small3DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon412	file:
DequantizationShapes	tests/validation/NEON/DequantizationLayer.cpp	/^const auto DequantizationShapes = concat(concat(concat(datasets::Small3DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon486	file:
DequantizationValidationFixedPointFixture	tests/validation/fixtures/DequantizationLayerFixture.h	/^class DequantizationValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DequantizationValidationFixture	tests/validation/fixtures/DequantizationLayerFixture.h	/^class DequantizationValidationFixture : public DequantizationValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DerivativeValidationFixture	tests/validation/fixtures/DerivativeFixture.h	/^class DerivativeValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DetectionWindow	arm_compute/core/Types.h	/^struct DetectionWindow$/;"	s	class:arm_compute::HOGNormType
DetectionWindow	src/core/CL/cl_kernels/types.h	/^typedef struct DetectionWindow$/;"	s
DetectionWindow	src/core/CL/cl_kernels/types.h	/^} DetectionWindow;$/;"	t	typeref:struct:DetectionWindow
DetectionWindowStrideDataset	tests/validation/CL/HOGDetector.cpp	/^const auto DetectionWindowStrideDataset = framework::dataset::make("DetectionWindowStride", { Size2D(8, 8), Size2D(16, 16) });$/;"	m	namespace:arm_compute::test::validation::__anon427	file:
DetectionWindowStrideDataset	tests/validation/NEON/HOGDetector.cpp	/^const auto DetectionWindowStrideDataset = framework::dataset::make("DetectionWindowStride", { Size2D(8, 8), Size2D(16, 16) });$/;"	m	namespace:arm_compute::test::validation::__anon503	file:
Device	include/CL/cl.hpp	/^    Device() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Device
Device	include/CL/cl.hpp	/^    Device(const Device& device) : detail::Wrapper<cl_type>(device) { }$/;"	f	class:cl::Device
Device	include/CL/cl.hpp	/^    Device(const cl_device_id &device) : detail::Wrapper<cl_type>(device) { }$/;"	f	class:cl::Device
Device	include/CL/cl.hpp	/^class Device : public detail::Wrapper<cl_device_id>$/;"	c	namespace:cl
Device	include/CL/cl2.hpp	/^    Device() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Device
Device	include/CL/cl2.hpp	/^    Device(const Device& dev) : detail::Wrapper<cl_type>(dev) {}$/;"	f	class:cl::Device
Device	include/CL/cl2.hpp	/^    explicit Device(const cl_device_id &device, bool retainObject = false) : $/;"	f	class:cl::Device
Device	include/CL/cl2.hpp	/^class Device : public detail::Wrapper<cl_device_id>$/;"	c	namespace:cl
DeviceCommandQueue	include/CL/cl2.hpp	/^    DeviceCommandQueue($/;"	f	class:cl::DeviceCommandQueue
DeviceCommandQueue	include/CL/cl2.hpp	/^    DeviceCommandQueue() { }$/;"	f	class:cl::DeviceCommandQueue
DeviceCommandQueue	include/CL/cl2.hpp	/^    DeviceCommandQueue(DeviceQueueProperties properties, cl_int* err = NULL)$/;"	f	class:cl::DeviceCommandQueue
DeviceCommandQueue	include/CL/cl2.hpp	/^    DeviceCommandQueue(const DeviceCommandQueue& queue) : detail::Wrapper<cl_type>(queue) {}$/;"	f	class:cl::DeviceCommandQueue
DeviceCommandQueue	include/CL/cl2.hpp	/^    explicit DeviceCommandQueue(const cl_command_queue& commandQueue, bool retainObject = false) :$/;"	f	class:cl::DeviceCommandQueue
DeviceCommandQueue	include/CL/cl2.hpp	/^class DeviceCommandQueue : public detail::Wrapper<cl_command_queue>$/;"	c	namespace:cl
DeviceQueueProperties	include/CL/cl2.hpp	/^enum class DeviceQueueProperties : cl_command_queue_properties$/;"	c	namespace:cl
DilateValidationFixture	tests/validation/fixtures/DilateFixture.h	/^class DilateValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DimX	arm_compute/core/Window.h	/^    static constexpr size_t DimX = 0;$/;"	m	class:arm_compute::Window
DimY	arm_compute/core/Window.h	/^    static constexpr size_t DimY = 1;$/;"	m	class:arm_compute::Window
DimZ	arm_compute/core/Window.h	/^    static constexpr size_t DimZ = 2;$/;"	m	class:arm_compute::Window
Dimension	arm_compute/core/Helpers.h	/^        constexpr Dimension()$/;"	f	class:arm_compute::Iterator::Dimension
Dimension	arm_compute/core/Helpers.h	/^    class Dimension$/;"	c	class:arm_compute::Iterator
Dimension	arm_compute/core/Window.h	/^        constexpr Dimension(int start = 0, int end = 1, int step = 1)$/;"	f	class:arm_compute::Window::Dimension
Dimension	arm_compute/core/Window.h	/^    class Dimension$/;"	c	class:arm_compute::Window
DimensionRoundingType	arm_compute/core/Types.h	/^enum class DimensionRoundingType$/;"	c	class:arm_compute::HOGNormType
Dimensions	arm_compute/core/Dimensions.h	/^    explicit Dimensions(Ts... dims)$/;"	f	class:arm_compute::Dimensions
Dimensions	arm_compute/core/Dimensions.h	/^class Dimensions$/;"	c	namespace:arm_compute
DirectConv	tests/networks/AlexNetNetwork.h	/^    struct DirectConv$/;"	s	class:arm_compute::test::networks::AlexNetNetwork
DirectConvolutionLayerDataset	tests/datasets/DirectConvolutionLayerDataset.h	/^    DirectConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
DirectConvolutionLayerFixture	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
DirectConvolutionValidationFixedPointFixture	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionValidationFixedPointFixture : public DirectConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationFixedPointTensorShiftFixture	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^class DirectConvolutionValidationFixedPointTensorShiftFixture : public DirectConvolutionValidationGenericTensorShiftFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationFixture	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionValidationFixture : public DirectConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationGenericFixture	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationGenericTensorShiftFixture	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^class DirectConvolutionValidationGenericTensorShiftFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationQuantizedFixture	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionValidationQuantizedFixture : public DirectConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationQuantizedTensorShiftFixture	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^class DirectConvolutionValidationQuantizedTensorShiftFixture : public DirectConvolutionValidationGenericTensorShiftFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationTensorShiftFixture	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^class DirectConvolutionValidationTensorShiftFixture : public DirectConvolutionValidationGenericTensorShiftFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationWithTensorShapesFixture	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionValidationWithTensorShapesFixture : public DirectConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationWithTensorShapesQuantizedFixture	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^class DirectConvolutionValidationWithTensorShapesQuantizedFixture : public DirectConvolutionValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationWithTensorShapesQuantizedTensorShiftFixture	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^class DirectConvolutionValidationWithTensorShapesQuantizedTensorShiftFixture : public DirectConvolutionValidationGenericTensorShiftFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
DirectConvolutionValidationWithTensorShapesTensorShiftFixture	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^class DirectConvolutionValidationWithTensorShapesTensorShiftFixture : public DirectConvolutionValidationGenericTensorShiftFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
Distribution1D	arm_compute/runtime/Distribution1D.h	/^class Distribution1D : public IDistribution1D$/;"	c	namespace:arm_compute
Distribution1D	src/runtime/Distribution1D.cpp	/^Distribution1D::Distribution1D(size_t num_bins, int32_t offset, uint32_t range)$/;"	f	class:Distribution1D
DropoutLayerValidationFixture	tests/validation/fixtures/DropoutLayerFixture.h	/^class DropoutLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
DummyAccessor	utils/GraphUtils.cpp	/^DummyAccessor::DummyAccessor(unsigned int maximum)$/;"	f	class:DummyAccessor
EDGE	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^constexpr int EDGE    = 255;$/;"	m	namespace:__anon248	file:
EGLAPI	include/linux/EGL/eglplatform.h	50;"	d
EGLAPIENTRY	include/linux/EGL/eglplatform.h	54;"	d
EGLAPIENTRYP	include/linux/EGL/eglplatform.h	56;"	d
EGLAttrib	include/linux/EGL/egl.h	/^typedef intptr_t EGLAttrib;$/;"	t
EGLAttribKHR	include/linux/EGL/eglext.h	/^typedef intptr_t EGLAttribKHR;$/;"	t
EGLBoolean	include/linux/EGL/egl.h	/^typedef unsigned int EGLBoolean;$/;"	t
EGLClientBuffer	include/linux/EGL/egl.h	/^typedef void *EGLClientBuffer;$/;"	t
EGLClientPixmapHI	include/linux/EGL/eglext.h	/^struct EGLClientPixmapHI {$/;"	s
EGLConfig	include/linux/EGL/egl.h	/^typedef void *EGLConfig;$/;"	t
EGLContext	include/linux/EGL/egl.h	/^typedef void *EGLContext;$/;"	t
EGLDeviceEXT	include/linux/EGL/eglext.h	/^typedef void *EGLDeviceEXT;$/;"	t
EGLDisplay	include/linux/EGL/egl.h	/^typedef void *EGLDisplay;$/;"	t
EGLGetBlobFuncANDROID	include/linux/EGL/eglext.h	/^typedef EGLsizeiANDROID (*EGLGetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, void *value, EGLsizeiANDROID valueSize);$/;"	t
EGLImage	include/linux/EGL/egl.h	/^typedef void *EGLImage;$/;"	t
EGLImageKHR	include/linux/EGL/eglext.h	/^typedef void *EGLImageKHR;$/;"	t
EGLNativeDisplayType	include/linux/EGL/eglplatform.h	/^typedef Display *EGLNativeDisplayType;$/;"	t
EGLNativeDisplayType	include/linux/EGL/eglplatform.h	/^typedef HDC     EGLNativeDisplayType;$/;"	t
EGLNativeDisplayType	include/linux/EGL/eglplatform.h	/^typedef int   EGLNativeDisplayType;$/;"	t
EGLNativeDisplayType	include/linux/EGL/eglplatform.h	/^typedef void*         EGLNativeDisplayType;$/;"	t
EGLNativeFileDescriptorKHR	include/linux/EGL/eglext.h	/^typedef int EGLNativeFileDescriptorKHR;$/;"	t
EGLNativePixmapType	include/linux/EGL/eglplatform.h	/^typedef HBITMAP EGLNativePixmapType;$/;"	t
EGLNativePixmapType	include/linux/EGL/eglplatform.h	/^typedef Pixmap   EGLNativePixmapType;$/;"	t
EGLNativePixmapType	include/linux/EGL/eglplatform.h	/^typedef void *EGLNativePixmapType;$/;"	t
EGLNativePixmapType	include/linux/EGL/eglplatform.h	/^typedef void*         EGLNativePixmapType;$/;"	t
EGLNativeWindowType	include/linux/EGL/eglplatform.h	/^typedef HWND    EGLNativeWindowType;$/;"	t
EGLNativeWindowType	include/linux/EGL/eglplatform.h	/^typedef Window   EGLNativeWindowType;$/;"	t
EGLNativeWindowType	include/linux/EGL/eglplatform.h	/^typedef fbdev_window* EGLNativeWindowType;$/;"	t
EGLNativeWindowType	include/linux/EGL/eglplatform.h	/^typedef void *EGLNativeWindowType;$/;"	t
EGLOutputLayerEXT	include/linux/EGL/eglext.h	/^typedef void *EGLOutputLayerEXT;$/;"	t
EGLOutputPortEXT	include/linux/EGL/eglext.h	/^typedef void *EGLOutputPortEXT;$/;"	t
EGLSetBlobFuncANDROID	include/linux/EGL/eglext.h	/^typedef void (*EGLSetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, const void *value, EGLsizeiANDROID valueSize);$/;"	t
EGLStreamKHR	include/linux/EGL/eglext.h	/^typedef void *EGLStreamKHR;$/;"	t
EGLSurface	include/linux/EGL/egl.h	/^typedef void *EGLSurface;$/;"	t
EGLSync	include/linux/EGL/egl.h	/^typedef void *EGLSync;$/;"	t
EGLSyncKHR	include/linux/EGL/eglext.h	/^typedef void *EGLSyncKHR;$/;"	t
EGLSyncNV	include/linux/EGL/eglext.h	/^typedef void *EGLSyncNV;$/;"	t
EGLTime	include/linux/EGL/egl.h	/^typedef khronos_utime_nanoseconds_t EGLTime;$/;"	t
EGLTimeKHR	include/linux/EGL/eglext.h	/^typedef khronos_utime_nanoseconds_t EGLTimeKHR;$/;"	t
EGLTimeNV	include/linux/EGL/eglext.h	/^typedef khronos_utime_nanoseconds_t EGLTimeNV;$/;"	t
EGL_ALPHA_FORMAT	include/linux/EGL/egl.h	173;"	d
EGL_ALPHA_FORMAT_NONPRE	include/linux/EGL/egl.h	174;"	d
EGL_ALPHA_FORMAT_PRE	include/linux/EGL/egl.h	175;"	d
EGL_ALPHA_MASK_SIZE	include/linux/EGL/egl.h	176;"	d
EGL_ALPHA_SIZE	include/linux/EGL/egl.h	62;"	d
EGL_ALREADY_SIGNALED_NV	include/linux/EGL/eglext.h	753;"	d
EGL_ANDROID_blob_cache	include/linux/EGL/eglext.h	371;"	d
EGL_ANDROID_framebuffer_target	include/linux/EGL/eglext.h	382;"	d
EGL_ANDROID_image_native_buffer	include/linux/EGL/eglext.h	387;"	d
EGL_ANDROID_native_fence_sync	include/linux/EGL/eglext.h	392;"	d
EGL_ANDROID_recordable	include/linux/EGL/eglext.h	404;"	d
EGL_ANGLE_d3d_share_handle_client_buffer	include/linux/EGL/eglext.h	409;"	d
EGL_ANGLE_query_surface_pointer	include/linux/EGL/eglext.h	414;"	d
EGL_ANGLE_surface_d3d_texture_2d_share_handle	include/linux/EGL/eglext.h	422;"	d
EGL_ARM_pixmap_multisample_discard	include/linux/EGL/eglext.h	426;"	d
EGL_AUTO_STEREO_NV	include/linux/EGL/eglext.h	673;"	d
EGL_BACK_BUFFER	include/linux/EGL/egl.h	149;"	d
EGL_BAD_ACCESS	include/linux/EGL/egl.h	63;"	d
EGL_BAD_ALLOC	include/linux/EGL/egl.h	64;"	d
EGL_BAD_ATTRIBUTE	include/linux/EGL/egl.h	65;"	d
EGL_BAD_CONFIG	include/linux/EGL/egl.h	66;"	d
EGL_BAD_CONTEXT	include/linux/EGL/egl.h	67;"	d
EGL_BAD_CURRENT_SURFACE	include/linux/EGL/egl.h	68;"	d
EGL_BAD_DEVICE_EXT	include/linux/EGL/eglext.h	451;"	d
EGL_BAD_DISPLAY	include/linux/EGL/egl.h	69;"	d
EGL_BAD_MATCH	include/linux/EGL/egl.h	70;"	d
EGL_BAD_NATIVE_PIXMAP	include/linux/EGL/egl.h	71;"	d
EGL_BAD_NATIVE_WINDOW	include/linux/EGL/egl.h	72;"	d
EGL_BAD_OUTPUT_LAYER_EXT	include/linux/EGL/eglext.h	512;"	d
EGL_BAD_OUTPUT_PORT_EXT	include/linux/EGL/eglext.h	513;"	d
EGL_BAD_PARAMETER	include/linux/EGL/egl.h	73;"	d
EGL_BAD_STATE_KHR	include/linux/EGL/eglext.h	277;"	d
EGL_BAD_STREAM_KHR	include/linux/EGL/eglext.h	276;"	d
EGL_BAD_SURFACE	include/linux/EGL/egl.h	74;"	d
EGL_BIND_TO_TEXTURE_RGB	include/linux/EGL/egl.h	150;"	d
EGL_BIND_TO_TEXTURE_RGBA	include/linux/EGL/egl.h	151;"	d
EGL_BITMAP_ORIGIN_KHR	include/linux/EGL/eglext.h	181;"	d
EGL_BITMAP_PITCH_KHR	include/linux/EGL/eglext.h	180;"	d
EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR	include/linux/EGL/eglext.h	185;"	d
EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR	include/linux/EGL/eglext.h	184;"	d
EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR	include/linux/EGL/eglext.h	183;"	d
EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR	include/linux/EGL/eglext.h	186;"	d
EGL_BITMAP_PIXEL_RED_OFFSET_KHR	include/linux/EGL/eglext.h	182;"	d
EGL_BITMAP_PIXEL_SIZE_KHR	include/linux/EGL/eglext.h	199;"	d
EGL_BITMAP_POINTER_KHR	include/linux/EGL/eglext.h	179;"	d
EGL_BLUE_SIZE	include/linux/EGL/egl.h	75;"	d
EGL_BUFFER_AGE_EXT	include/linux/EGL/eglext.h	432;"	d
EGL_BUFFER_DESTROYED	include/linux/EGL/egl.h	178;"	d
EGL_BUFFER_PRESERVED	include/linux/EGL/egl.h	177;"	d
EGL_BUFFER_SIZE	include/linux/EGL/egl.h	76;"	d
EGL_CLIENT_APIS	include/linux/EGL/egl.h	179;"	d
EGL_CLIENT_PIXMAP_POINTER_HI	include/linux/EGL/eglext.h	605;"	d
EGL_CL_EVENT_HANDLE	include/linux/EGL/egl.h	256;"	d
EGL_CL_EVENT_HANDLE_KHR	include/linux/EGL/eglext.h	54;"	d
EGL_COLORSPACE	include/linux/EGL/egl.h	180;"	d
EGL_COLORSPACE_LINEAR	include/linux/EGL/egl.h	182;"	d
EGL_COLORSPACE_sRGB	include/linux/EGL/egl.h	181;"	d
EGL_COLOR_ARGB_HI	include/linux/EGL/eglext.h	617;"	d
EGL_COLOR_BUFFER_TYPE	include/linux/EGL/egl.h	183;"	d
EGL_COLOR_FORMAT_HI	include/linux/EGL/eglext.h	614;"	d
EGL_COLOR_RGBA_HI	include/linux/EGL/eglext.h	616;"	d
EGL_COLOR_RGB_HI	include/linux/EGL/eglext.h	615;"	d
EGL_CONDITION_SATISFIED	include/linux/EGL/egl.h	268;"	d
EGL_CONDITION_SATISFIED_KHR	include/linux/EGL/eglext.h	239;"	d
EGL_CONDITION_SATISFIED_NV	include/linux/EGL/eglext.h	755;"	d
EGL_CONFIG_CAVEAT	include/linux/EGL/egl.h	77;"	d
EGL_CONFIG_ID	include/linux/EGL/egl.h	78;"	d
EGL_CONFORMANT	include/linux/EGL/egl.h	211;"	d
EGL_CONFORMANT_KHR	include/linux/EGL/eglext.h	75;"	d
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR	include/linux/EGL/eglext.h	296;"	d
EGL_CONSUMER_FRAME_KHR	include/linux/EGL/eglext.h	268;"	d
EGL_CONSUMER_LATENCY_USEC_KHR	include/linux/EGL/eglext.h	266;"	d
EGL_CONTEXT_CLIENT_TYPE	include/linux/EGL/egl.h	184;"	d
EGL_CONTEXT_CLIENT_VERSION	include/linux/EGL/egl.h	212;"	d
EGL_CONTEXT_FLAGS_KHR	include/linux/EGL/eglext.h	84;"	d
EGL_CONTEXT_LOST	include/linux/EGL/egl.h	152;"	d
EGL_CONTEXT_MAJOR_VERSION	include/linux/EGL/egl.h	244;"	d
EGL_CONTEXT_MAJOR_VERSION_KHR	include/linux/EGL/eglext.h	82;"	d
EGL_CONTEXT_MINOR_VERSION	include/linux/EGL/egl.h	245;"	d
EGL_CONTEXT_MINOR_VERSION_KHR	include/linux/EGL/eglext.h	83;"	d
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT	include/linux/EGL/egl.h	251;"	d
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR	include/linux/EGL/eglext.h	93;"	d
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT	include/linux/EGL/egl.h	250;"	d
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR	include/linux/EGL/eglext.h	92;"	d
EGL_CONTEXT_OPENGL_DEBUG	include/linux/EGL/egl.h	252;"	d
EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR	include/linux/EGL/eglext.h	89;"	d
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE	include/linux/EGL/egl.h	253;"	d
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR	include/linux/EGL/eglext.h	90;"	d
EGL_CONTEXT_OPENGL_PROFILE_MASK	include/linux/EGL/egl.h	246;"	d
EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR	include/linux/EGL/eglext.h	85;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY	include/linux/EGL/egl.h	247;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT	include/linux/EGL/eglext.h	442;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR	include/linux/EGL/eglext.h	86;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS	include/linux/EGL/egl.h	254;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR	include/linux/EGL/eglext.h	91;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT	include/linux/EGL/eglext.h	441;"	d
EGL_CONTEXT_PRIORITY_HIGH_IMG	include/linux/EGL/eglext.h	623;"	d
EGL_CONTEXT_PRIORITY_LEVEL_IMG	include/linux/EGL/eglext.h	622;"	d
EGL_CONTEXT_PRIORITY_LOW_IMG	include/linux/EGL/eglext.h	625;"	d
EGL_CONTEXT_PRIORITY_MEDIUM_IMG	include/linux/EGL/eglext.h	624;"	d
EGL_CORE_NATIVE_ENGINE	include/linux/EGL/egl.h	79;"	d
EGL_COVERAGE_BUFFERS_NV	include/linux/EGL/eglext.h	678;"	d
EGL_COVERAGE_SAMPLES_NV	include/linux/EGL/eglext.h	679;"	d
EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV	include/linux/EGL/eglext.h	685;"	d
EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV	include/linux/EGL/eglext.h	686;"	d
EGL_COVERAGE_SAMPLE_RESOLVE_NV	include/linux/EGL/eglext.h	684;"	d
EGL_CUDA_DEVICE_NV	include/linux/EGL/eglext.h	705;"	d
EGL_CUDA_EVENT_HANDLE_NV	include/linux/EGL/eglext.h	691;"	d
EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE	include/linux/EGL/eglext.h	410;"	d
EGL_DEFAULT_DISPLAY	include/linux/EGL/egl.h	227;"	d
EGL_DEPTH_ENCODING_NONE_NV	include/linux/EGL/eglext.h	699;"	d
EGL_DEPTH_ENCODING_NONLINEAR_NV	include/linux/EGL/eglext.h	700;"	d
EGL_DEPTH_ENCODING_NV	include/linux/EGL/eglext.h	698;"	d
EGL_DEPTH_SIZE	include/linux/EGL/egl.h	80;"	d
EGL_DEVICE_EXT	include/linux/EGL/eglext.h	452;"	d
EGL_DISCARD_SAMPLES_ARM	include/linux/EGL/eglext.h	427;"	d
EGL_DISPLAY_SCALING	include/linux/EGL/egl.h	185;"	d
EGL_DMA_BUF_PLANE0_FD_EXT	include/linux/EGL/eglext.h	479;"	d
EGL_DMA_BUF_PLANE0_OFFSET_EXT	include/linux/EGL/eglext.h	480;"	d
EGL_DMA_BUF_PLANE0_PITCH_EXT	include/linux/EGL/eglext.h	481;"	d
EGL_DMA_BUF_PLANE1_FD_EXT	include/linux/EGL/eglext.h	482;"	d
EGL_DMA_BUF_PLANE1_OFFSET_EXT	include/linux/EGL/eglext.h	483;"	d
EGL_DMA_BUF_PLANE1_PITCH_EXT	include/linux/EGL/eglext.h	484;"	d
EGL_DMA_BUF_PLANE2_FD_EXT	include/linux/EGL/eglext.h	485;"	d
EGL_DMA_BUF_PLANE2_OFFSET_EXT	include/linux/EGL/eglext.h	486;"	d
EGL_DMA_BUF_PLANE2_PITCH_EXT	include/linux/EGL/eglext.h	487;"	d
EGL_DONT_CARE	include/linux/EGL/egl.h	81;"	d
EGL_DRAW	include/linux/EGL/egl.h	82;"	d
EGL_DRM_BUFFER_FORMAT_ARGB32_MESA	include/linux/EGL/eglext.h	632;"	d
EGL_DRM_BUFFER_FORMAT_MESA	include/linux/EGL/eglext.h	630;"	d
EGL_DRM_BUFFER_MESA	include/linux/EGL/eglext.h	633;"	d
EGL_DRM_BUFFER_STRIDE_MESA	include/linux/EGL/eglext.h	634;"	d
EGL_DRM_BUFFER_USE_MESA	include/linux/EGL/eglext.h	631;"	d
EGL_DRM_BUFFER_USE_SCANOUT_MESA	include/linux/EGL/eglext.h	635;"	d
EGL_DRM_BUFFER_USE_SHARE_MESA	include/linux/EGL/eglext.h	636;"	d
EGL_DRM_CONNECTOR_EXT	include/linux/EGL/eglext.h	539;"	d
EGL_DRM_CRTC_EXT	include/linux/EGL/eglext.h	537;"	d
EGL_DRM_DEVICE_FILE_EXT	include/linux/EGL/eglext.h	467;"	d
EGL_DRM_PLANE_EXT	include/linux/EGL/eglext.h	538;"	d
EGL_EGLEXT_VERSION	include/linux/EGL/eglext.h	41;"	d
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	101;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	105;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	106;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	110;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	150;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	152;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	156;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	98;"	d	file:
EGL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	99;"	d	file:
EGL_EXTENSIONS	include/linux/EGL/egl.h	83;"	d
EGL_EXT_buffer_age	include/linux/EGL/eglext.h	431;"	d
EGL_EXT_client_extensions	include/linux/EGL/eglext.h	436;"	d
EGL_EXT_create_context_robustness	include/linux/EGL/eglext.h	440;"	d
EGL_EXT_device_base	include/linux/EGL/eglext.h	448;"	d
EGL_EXT_device_drm	include/linux/EGL/eglext.h	466;"	d
EGL_EXT_device_openwf	include/linux/EGL/eglext.h	471;"	d
EGL_EXT_image_dma_buf_import	include/linux/EGL/eglext.h	476;"	d
EGL_EXT_multiview_window	include/linux/EGL/eglext.h	502;"	d
EGL_EXT_output_base	include/linux/EGL/eglext.h	507;"	d
EGL_EXT_output_drm	include/linux/EGL/eglext.h	536;"	d
EGL_EXT_output_openwf	include/linux/EGL/eglext.h	543;"	d
EGL_EXT_platform_base	include/linux/EGL/eglext.h	549;"	d
EGL_EXT_platform_device	include/linux/EGL/eglext.h	561;"	d
EGL_EXT_platform_wayland	include/linux/EGL/eglext.h	566;"	d
EGL_EXT_platform_x11	include/linux/EGL/eglext.h	571;"	d
EGL_EXT_protected_surface	include/linux/EGL/eglext.h	577;"	d
EGL_EXT_stream_consumer_egloutput	include/linux/EGL/eglext.h	582;"	d
EGL_EXT_swap_buffers_with_damage	include/linux/EGL/eglext.h	590;"	d
EGL_FALSE	include/linux/EGL/egl.h	84;"	d
EGL_FOREVER	include/linux/EGL/egl.h	266;"	d
EGL_FOREVER_KHR	include/linux/EGL/eglext.h	243;"	d
EGL_FOREVER_NV	include/linux/EGL/eglext.h	752;"	d
EGL_FORMAT_RGBA_8888_EXACT_KHR	include/linux/EGL/eglext.h	175;"	d
EGL_FORMAT_RGBA_8888_KHR	include/linux/EGL/eglext.h	176;"	d
EGL_FORMAT_RGB_565_EXACT_KHR	include/linux/EGL/eglext.h	173;"	d
EGL_FORMAT_RGB_565_KHR	include/linux/EGL/eglext.h	174;"	d
EGL_FRAMEBUFFER_TARGET_ANDROID	include/linux/EGL/eglext.h	383;"	d
EGL_GL_COLORSPACE	include/linux/EGL/egl.h	271;"	d
EGL_GL_COLORSPACE_KHR	include/linux/EGL/eglext.h	112;"	d
EGL_GL_COLORSPACE_LINEAR	include/linux/EGL/egl.h	273;"	d
EGL_GL_COLORSPACE_LINEAR_KHR	include/linux/EGL/eglext.h	114;"	d
EGL_GL_COLORSPACE_SRGB	include/linux/EGL/egl.h	272;"	d
EGL_GL_COLORSPACE_SRGB_KHR	include/linux/EGL/eglext.h	113;"	d
EGL_GL_RENDERBUFFER	include/linux/EGL/egl.h	274;"	d
EGL_GL_RENDERBUFFER_KHR	include/linux/EGL/eglext.h	119;"	d
EGL_GL_TEXTURE_2D	include/linux/EGL/egl.h	275;"	d
EGL_GL_TEXTURE_2D_KHR	include/linux/EGL/eglext.h	124;"	d
EGL_GL_TEXTURE_3D	include/linux/EGL/egl.h	277;"	d
EGL_GL_TEXTURE_3D_KHR	include/linux/EGL/eglext.h	130;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X	include/linux/EGL/egl.h	280;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR	include/linux/EGL/eglext.h	137;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	include/linux/EGL/egl.h	282;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR	include/linux/EGL/eglext.h	139;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	include/linux/EGL/egl.h	284;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR	include/linux/EGL/eglext.h	141;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X	include/linux/EGL/egl.h	279;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR	include/linux/EGL/eglext.h	136;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y	include/linux/EGL/egl.h	281;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR	include/linux/EGL/eglext.h	138;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z	include/linux/EGL/egl.h	283;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR	include/linux/EGL/eglext.h	140;"	d
EGL_GL_TEXTURE_LEVEL	include/linux/EGL/egl.h	276;"	d
EGL_GL_TEXTURE_LEVEL_KHR	include/linux/EGL/eglext.h	125;"	d
EGL_GL_TEXTURE_ZOFFSET	include/linux/EGL/egl.h	278;"	d
EGL_GL_TEXTURE_ZOFFSET_KHR	include/linux/EGL/eglext.h	131;"	d
EGL_GREEN_SIZE	include/linux/EGL/egl.h	85;"	d
EGL_HEIGHT	include/linux/EGL/egl.h	86;"	d
EGL_HI_clientpixmap	include/linux/EGL/eglext.h	598;"	d
EGL_HI_colorformats	include/linux/EGL/eglext.h	613;"	d
EGL_HORIZONTAL_RESOLUTION	include/linux/EGL/egl.h	186;"	d
EGL_IMAGE_PRESERVED	include/linux/EGL/egl.h	285;"	d
EGL_IMAGE_PRESERVED_KHR	include/linux/EGL/eglext.h	159;"	d
EGL_IMG_context_priority	include/linux/EGL/eglext.h	621;"	d
EGL_ITU_REC2020_EXT	include/linux/EGL/eglext.h	494;"	d
EGL_ITU_REC601_EXT	include/linux/EGL/eglext.h	492;"	d
EGL_ITU_REC709_EXT	include/linux/EGL/eglext.h	493;"	d
EGL_KHR_cl_event	include/linux/EGL/eglext.h	53;"	d
EGL_KHR_cl_event2	include/linux/EGL/eglext.h	60;"	d
EGL_KHR_client_get_all_proc_addresses	include/linux/EGL/eglext.h	70;"	d
EGL_KHR_config_attribs	include/linux/EGL/eglext.h	74;"	d
EGL_KHR_create_context	include/linux/EGL/eglext.h	81;"	d
EGL_KHR_fence_sync	include/linux/EGL/eglext.h	98;"	d
EGL_KHR_get_all_proc_addresses	include/linux/EGL/eglext.h	107;"	d
EGL_KHR_gl_colorspace	include/linux/EGL/eglext.h	111;"	d
EGL_KHR_gl_renderbuffer_image	include/linux/EGL/eglext.h	118;"	d
EGL_KHR_gl_texture_2D_image	include/linux/EGL/eglext.h	123;"	d
EGL_KHR_gl_texture_3D_image	include/linux/EGL/eglext.h	129;"	d
EGL_KHR_gl_texture_cubemap_image	include/linux/EGL/eglext.h	135;"	d
EGL_KHR_image	include/linux/EGL/eglext.h	145;"	d
EGL_KHR_image_base	include/linux/EGL/eglext.h	158;"	d
EGL_KHR_image_pixmap	include/linux/EGL/eglext.h	163;"	d
EGL_KHR_lock_surface	include/linux/EGL/eglext.h	167;"	d
EGL_KHR_lock_surface2	include/linux/EGL/eglext.h	198;"	d
EGL_KHR_lock_surface3	include/linux/EGL/eglext.h	203;"	d
EGL_KHR_platform_android	include/linux/EGL/eglext.h	211;"	d
EGL_KHR_platform_gbm	include/linux/EGL/eglext.h	216;"	d
EGL_KHR_platform_wayland	include/linux/EGL/eglext.h	221;"	d
EGL_KHR_platform_x11	include/linux/EGL/eglext.h	226;"	d
EGL_KHR_reusable_sync	include/linux/EGL/eglext.h	232;"	d
EGL_KHR_stream	include/linux/EGL/eglext.h	261;"	d
EGL_KHR_stream_consumer_gltexture	include/linux/EGL/eglext.h	294;"	d
EGL_KHR_stream_cross_process_fd	include/linux/EGL/eglext.h	309;"	d
EGL_KHR_stream_fifo	include/linux/EGL/eglext.h	323;"	d
EGL_KHR_stream_producer_aldatalocator	include/linux/EGL/eglext.h	337;"	d
EGL_KHR_stream_producer_eglsurface	include/linux/EGL/eglext.h	343;"	d
EGL_KHR_surfaceless_context	include/linux/EGL/eglext.h	354;"	d
EGL_KHR_vg_parent_image	include/linux/EGL/eglext.h	358;"	d
EGL_KHR_wait_sync	include/linux/EGL/eglext.h	363;"	d
EGL_LARGEST_PBUFFER	include/linux/EGL/egl.h	87;"	d
EGL_LEVEL	include/linux/EGL/egl.h	88;"	d
EGL_LINUX_DMA_BUF_EXT	include/linux/EGL/eglext.h	477;"	d
EGL_LINUX_DRM_FOURCC_EXT	include/linux/EGL/eglext.h	478;"	d
EGL_LOCK_SURFACE_BIT_KHR	include/linux/EGL/eglext.h	170;"	d
EGL_LOCK_USAGE_HINT_KHR	include/linux/EGL/eglext.h	178;"	d
EGL_LOSE_CONTEXT_ON_RESET	include/linux/EGL/egl.h	249;"	d
EGL_LOSE_CONTEXT_ON_RESET_EXT	include/linux/EGL/eglext.h	444;"	d
EGL_LOSE_CONTEXT_ON_RESET_KHR	include/linux/EGL/eglext.h	88;"	d
EGL_LOWER_LEFT_KHR	include/linux/EGL/eglext.h	187;"	d
EGL_LUMINANCE_BUFFER	include/linux/EGL/egl.h	187;"	d
EGL_LUMINANCE_SIZE	include/linux/EGL/egl.h	188;"	d
EGL_MAP_PRESERVE_PIXELS_KHR	include/linux/EGL/eglext.h	177;"	d
EGL_MATCH_FORMAT_KHR	include/linux/EGL/eglext.h	172;"	d
EGL_MATCH_NATIVE_PIXMAP	include/linux/EGL/egl.h	213;"	d
EGL_MAX_PBUFFER_HEIGHT	include/linux/EGL/egl.h	89;"	d
EGL_MAX_PBUFFER_PIXELS	include/linux/EGL/egl.h	90;"	d
EGL_MAX_PBUFFER_WIDTH	include/linux/EGL/egl.h	91;"	d
EGL_MAX_SWAP_INTERVAL	include/linux/EGL/egl.h	154;"	d
EGL_MESA_drm_image	include/linux/EGL/eglext.h	629;"	d
EGL_MESA_platform_gbm	include/linux/EGL/eglext.h	646;"	d
EGL_MIN_SWAP_INTERVAL	include/linux/EGL/egl.h	153;"	d
EGL_MIPMAP_LEVEL	include/linux/EGL/egl.h	156;"	d
EGL_MIPMAP_TEXTURE	include/linux/EGL/egl.h	155;"	d
EGL_MULTISAMPLE_RESOLVE	include/linux/EGL/egl.h	229;"	d
EGL_MULTISAMPLE_RESOLVE_BOX	include/linux/EGL/egl.h	231;"	d
EGL_MULTISAMPLE_RESOLVE_BOX_BIT	include/linux/EGL/egl.h	228;"	d
EGL_MULTISAMPLE_RESOLVE_DEFAULT	include/linux/EGL/egl.h	230;"	d
EGL_MULTIVIEW_VIEW_COUNT_EXT	include/linux/EGL/eglext.h	503;"	d
EGL_NATIVE_BUFFER_ANDROID	include/linux/EGL/eglext.h	388;"	d
EGL_NATIVE_BUFFER_TIZEN	include/linux/EGL/eglext.h	792;"	d
EGL_NATIVE_PIXMAP_KHR	include/linux/EGL/eglext.h	147;"	d
EGL_NATIVE_RENDERABLE	include/linux/EGL/egl.h	92;"	d
EGL_NATIVE_SURFACE_TIZEN	include/linux/EGL/eglext.h	797;"	d
EGL_NATIVE_VISUAL_ID	include/linux/EGL/egl.h	93;"	d
EGL_NATIVE_VISUAL_TYPE	include/linux/EGL/egl.h	94;"	d
EGL_NOK_swap_region	include/linux/EGL/eglext.h	651;"	d
EGL_NOK_swap_region2	include/linux/EGL/eglext.h	659;"	d
EGL_NOK_texture_from_pixmap	include/linux/EGL/eglext.h	667;"	d
EGL_NONE	include/linux/EGL/egl.h	95;"	d
EGL_NON_CONFORMANT_CONFIG	include/linux/EGL/egl.h	96;"	d
EGL_NOT_INITIALIZED	include/linux/EGL/egl.h	97;"	d
EGL_NO_CONTEXT	include/linux/EGL/egl.h	98;"	d
EGL_NO_DEVICE_EXT	include/linux/EGL/eglext.h	450;"	d
EGL_NO_DISPLAY	include/linux/EGL/egl.h	99;"	d
EGL_NO_FILE_DESCRIPTOR_KHR	include/linux/EGL/eglext.h	312;"	d
EGL_NO_IMAGE	include/linux/EGL/egl.h	286;"	d
EGL_NO_IMAGE_KHR	include/linux/EGL/eglext.h	148;"	d
EGL_NO_NATIVE_FENCE_FD_ANDROID	include/linux/EGL/eglext.h	396;"	d
EGL_NO_OUTPUT_LAYER_EXT	include/linux/EGL/eglext.h	510;"	d
EGL_NO_OUTPUT_PORT_EXT	include/linux/EGL/eglext.h	511;"	d
EGL_NO_RESET_NOTIFICATION	include/linux/EGL/egl.h	248;"	d
EGL_NO_RESET_NOTIFICATION_EXT	include/linux/EGL/eglext.h	443;"	d
EGL_NO_RESET_NOTIFICATION_KHR	include/linux/EGL/eglext.h	87;"	d
EGL_NO_STREAM_KHR	include/linux/EGL/eglext.h	265;"	d
EGL_NO_SURFACE	include/linux/EGL/egl.h	100;"	d
EGL_NO_SYNC	include/linux/EGL/egl.h	269;"	d
EGL_NO_SYNC_KHR	include/linux/EGL/eglext.h	244;"	d
EGL_NO_SYNC_NV	include/linux/EGL/eglext.h	759;"	d
EGL_NO_TEXTURE	include/linux/EGL/egl.h	157;"	d
EGL_NV_3dvision_surface	include/linux/EGL/eglext.h	672;"	d
EGL_NV_coverage_sample	include/linux/EGL/eglext.h	677;"	d
EGL_NV_coverage_sample_resolve	include/linux/EGL/eglext.h	683;"	d
EGL_NV_cuda_event	include/linux/EGL/eglext.h	690;"	d
EGL_NV_depth_nonlinear	include/linux/EGL/eglext.h	697;"	d
EGL_NV_device_cuda	include/linux/EGL/eglext.h	704;"	d
EGL_NV_native_query	include/linux/EGL/eglext.h	709;"	d
EGL_NV_post_convert_rounding	include/linux/EGL/eglext.h	721;"	d
EGL_NV_post_sub_buffer	include/linux/EGL/eglext.h	725;"	d
EGL_NV_stream_sync	include/linux/EGL/eglext.h	734;"	d
EGL_NV_sync	include/linux/EGL/eglext.h	743;"	d
EGL_NV_system_time	include/linux/EGL/eglext.h	778;"	d
EGL_OPENGL_API	include/linux/EGL/egl.h	232;"	d
EGL_OPENGL_BIT	include/linux/EGL/egl.h	233;"	d
EGL_OPENGL_ES2_BIT	include/linux/EGL/egl.h	214;"	d
EGL_OPENGL_ES3_BIT	include/linux/EGL/egl.h	255;"	d
EGL_OPENGL_ES3_BIT_KHR	include/linux/EGL/eglext.h	94;"	d
EGL_OPENGL_ES_API	include/linux/EGL/egl.h	191;"	d
EGL_OPENGL_ES_BIT	include/linux/EGL/egl.h	189;"	d
EGL_OPENVG_API	include/linux/EGL/egl.h	192;"	d
EGL_OPENVG_BIT	include/linux/EGL/egl.h	190;"	d
EGL_OPENVG_IMAGE	include/linux/EGL/egl.h	193;"	d
EGL_OPENWF_DEVICE_ID_EXT	include/linux/EGL/eglext.h	472;"	d
EGL_OPENWF_PIPELINE_ID_EXT	include/linux/EGL/eglext.h	544;"	d
EGL_OPENWF_PORT_ID_EXT	include/linux/EGL/eglext.h	545;"	d
EGL_OPTIMAL_FORMAT_BIT_KHR	include/linux/EGL/eglext.h	171;"	d
EGL_PBUFFER_BIT	include/linux/EGL/egl.h	101;"	d
EGL_PIXEL_ASPECT_RATIO	include/linux/EGL/egl.h	194;"	d
EGL_PIXMAP_BIT	include/linux/EGL/egl.h	102;"	d
EGL_PLATFORM_ANDROID_KHR	include/linux/EGL/eglext.h	212;"	d
EGL_PLATFORM_DEVICE_EXT	include/linux/EGL/eglext.h	562;"	d
EGL_PLATFORM_GBM_KHR	include/linux/EGL/eglext.h	217;"	d
EGL_PLATFORM_GBM_MESA	include/linux/EGL/eglext.h	647;"	d
EGL_PLATFORM_WAYLAND_EXT	include/linux/EGL/eglext.h	567;"	d
EGL_PLATFORM_WAYLAND_KHR	include/linux/EGL/eglext.h	222;"	d
EGL_PLATFORM_X11_EXT	include/linux/EGL/eglext.h	572;"	d
EGL_PLATFORM_X11_KHR	include/linux/EGL/eglext.h	227;"	d
EGL_PLATFORM_X11_SCREEN_EXT	include/linux/EGL/eglext.h	573;"	d
EGL_PLATFORM_X11_SCREEN_KHR	include/linux/EGL/eglext.h	228;"	d
EGL_POST_SUB_BUFFER_SUPPORTED_NV	include/linux/EGL/eglext.h	726;"	d
EGL_PRODUCER_FRAME_KHR	include/linux/EGL/eglext.h	267;"	d
EGL_PROTECTED_CONTENT_EXT	include/linux/EGL/eglext.h	578;"	d
EGL_READ	include/linux/EGL/egl.h	103;"	d
EGL_READ_SURFACE_BIT_KHR	include/linux/EGL/eglext.h	168;"	d
EGL_RECORDABLE_ANDROID	include/linux/EGL/eglext.h	405;"	d
EGL_RED_SIZE	include/linux/EGL/egl.h	104;"	d
EGL_RENDERABLE_TYPE	include/linux/EGL/egl.h	195;"	d
EGL_RENDER_BUFFER	include/linux/EGL/egl.h	196;"	d
EGL_RGB_BUFFER	include/linux/EGL/egl.h	197;"	d
EGL_SAMPLES	include/linux/EGL/egl.h	105;"	d
EGL_SAMPLE_BUFFERS	include/linux/EGL/egl.h	106;"	d
EGL_SAMPLE_RANGE_HINT_EXT	include/linux/EGL/eglext.h	489;"	d
EGL_SIGNALED	include/linux/EGL/egl.h	263;"	d
EGL_SIGNALED_KHR	include/linux/EGL/eglext.h	236;"	d
EGL_SIGNALED_NV	include/linux/EGL/eglext.h	749;"	d
EGL_SINGLE_BUFFER	include/linux/EGL/egl.h	198;"	d
EGL_SLOW_CONFIG	include/linux/EGL/egl.h	107;"	d
EGL_STENCIL_SIZE	include/linux/EGL/egl.h	108;"	d
EGL_STREAM_BIT_KHR	include/linux/EGL/eglext.h	345;"	d
EGL_STREAM_FIFO_LENGTH_KHR	include/linux/EGL/eglext.h	325;"	d
EGL_STREAM_STATE_CONNECTING_KHR	include/linux/EGL/eglext.h	271;"	d
EGL_STREAM_STATE_CREATED_KHR	include/linux/EGL/eglext.h	270;"	d
EGL_STREAM_STATE_DISCONNECTED_KHR	include/linux/EGL/eglext.h	275;"	d
EGL_STREAM_STATE_EMPTY_KHR	include/linux/EGL/eglext.h	272;"	d
EGL_STREAM_STATE_KHR	include/linux/EGL/eglext.h	269;"	d
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR	include/linux/EGL/eglext.h	273;"	d
EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR	include/linux/EGL/eglext.h	274;"	d
EGL_STREAM_TIME_CONSUMER_KHR	include/linux/EGL/eglext.h	327;"	d
EGL_STREAM_TIME_NOW_KHR	include/linux/EGL/eglext.h	326;"	d
EGL_STREAM_TIME_PRODUCER_KHR	include/linux/EGL/eglext.h	328;"	d
EGL_SUCCESS	include/linux/EGL/egl.h	109;"	d
EGL_SURFACE_TYPE	include/linux/EGL/egl.h	110;"	d
EGL_SWAP_BEHAVIOR	include/linux/EGL/egl.h	199;"	d
EGL_SWAP_BEHAVIOR_PRESERVED_BIT	include/linux/EGL/egl.h	234;"	d
EGL_SWAP_INTERVAL_EXT	include/linux/EGL/eglext.h	514;"	d
EGL_SYNC_CL_EVENT	include/linux/EGL/egl.h	257;"	d
EGL_SYNC_CL_EVENT_COMPLETE	include/linux/EGL/egl.h	258;"	d
EGL_SYNC_CL_EVENT_COMPLETE_KHR	include/linux/EGL/eglext.h	56;"	d
EGL_SYNC_CL_EVENT_KHR	include/linux/EGL/eglext.h	55;"	d
EGL_SYNC_CONDITION	include/linux/EGL/egl.h	262;"	d
EGL_SYNC_CONDITION_KHR	include/linux/EGL/eglext.h	101;"	d
EGL_SYNC_CONDITION_NV	include/linux/EGL/eglext.h	757;"	d
EGL_SYNC_CUDA_EVENT_COMPLETE_NV	include/linux/EGL/eglext.h	693;"	d
EGL_SYNC_CUDA_EVENT_NV	include/linux/EGL/eglext.h	692;"	d
EGL_SYNC_FENCE	include/linux/EGL/egl.h	270;"	d
EGL_SYNC_FENCE_KHR	include/linux/EGL/eglext.h	102;"	d
EGL_SYNC_FENCE_NV	include/linux/EGL/eglext.h	758;"	d
EGL_SYNC_FLUSH_COMMANDS_BIT	include/linux/EGL/egl.h	265;"	d
EGL_SYNC_FLUSH_COMMANDS_BIT_KHR	include/linux/EGL/eglext.h	242;"	d
EGL_SYNC_FLUSH_COMMANDS_BIT_NV	include/linux/EGL/eglext.h	751;"	d
EGL_SYNC_NATIVE_FENCE_ANDROID	include/linux/EGL/eglext.h	393;"	d
EGL_SYNC_NATIVE_FENCE_FD_ANDROID	include/linux/EGL/eglext.h	394;"	d
EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID	include/linux/EGL/eglext.h	395;"	d
EGL_SYNC_NEW_FRAME_NV	include/linux/EGL/eglext.h	735;"	d
EGL_SYNC_PRIOR_COMMANDS_COMPLETE	include/linux/EGL/egl.h	259;"	d
EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR	include/linux/EGL/eglext.h	100;"	d
EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV	include/linux/EGL/eglext.h	747;"	d
EGL_SYNC_REUSABLE_KHR	include/linux/EGL/eglext.h	241;"	d
EGL_SYNC_STATUS	include/linux/EGL/egl.h	261;"	d
EGL_SYNC_STATUS_KHR	include/linux/EGL/eglext.h	235;"	d
EGL_SYNC_STATUS_NV	include/linux/EGL/eglext.h	748;"	d
EGL_SYNC_TYPE	include/linux/EGL/egl.h	260;"	d
EGL_SYNC_TYPE_KHR	include/linux/EGL/eglext.h	240;"	d
EGL_SYNC_TYPE_NV	include/linux/EGL/eglext.h	756;"	d
EGL_TEXTURE_2D	include/linux/EGL/egl.h	158;"	d
EGL_TEXTURE_FORMAT	include/linux/EGL/egl.h	159;"	d
EGL_TEXTURE_RGB	include/linux/EGL/egl.h	160;"	d
EGL_TEXTURE_RGBA	include/linux/EGL/egl.h	161;"	d
EGL_TEXTURE_TARGET	include/linux/EGL/egl.h	162;"	d
EGL_TIMEOUT_EXPIRED	include/linux/EGL/egl.h	267;"	d
EGL_TIMEOUT_EXPIRED_KHR	include/linux/EGL/eglext.h	238;"	d
EGL_TIMEOUT_EXPIRED_NV	include/linux/EGL/eglext.h	754;"	d
EGL_TIZEN_image_native_buffer	include/linux/EGL/eglext.h	791;"	d
EGL_TIZEN_image_native_surface	include/linux/EGL/eglext.h	796;"	d
EGL_TRANSPARENT_BLUE_VALUE	include/linux/EGL/egl.h	111;"	d
EGL_TRANSPARENT_GREEN_VALUE	include/linux/EGL/egl.h	112;"	d
EGL_TRANSPARENT_RED_VALUE	include/linux/EGL/egl.h	113;"	d
EGL_TRANSPARENT_RGB	include/linux/EGL/egl.h	114;"	d
EGL_TRANSPARENT_TYPE	include/linux/EGL/egl.h	115;"	d
EGL_TRUE	include/linux/EGL/egl.h	116;"	d
EGL_UNKNOWN	include/linux/EGL/egl.h	200;"	d
EGL_UNSIGNALED	include/linux/EGL/egl.h	264;"	d
EGL_UNSIGNALED_KHR	include/linux/EGL/eglext.h	237;"	d
EGL_UNSIGNALED_NV	include/linux/EGL/eglext.h	750;"	d
EGL_UPPER_LEFT_KHR	include/linux/EGL/eglext.h	188;"	d
EGL_VENDOR	include/linux/EGL/egl.h	117;"	d
EGL_VERSION	include/linux/EGL/egl.h	118;"	d
EGL_VERSION_1_0	include/linux/EGL/egl.h	53;"	d
EGL_VERSION_1_1	include/linux/EGL/egl.h	148;"	d
EGL_VERSION_1_2	include/linux/EGL/egl.h	170;"	d
EGL_VERSION_1_3	include/linux/EGL/egl.h	210;"	d
EGL_VERSION_1_4	include/linux/EGL/egl.h	226;"	d
EGL_VERSION_1_5	include/linux/EGL/egl.h	239;"	d
EGL_VERTICAL_RESOLUTION	include/linux/EGL/egl.h	201;"	d
EGL_VG_ALPHA_FORMAT	include/linux/EGL/egl.h	215;"	d
EGL_VG_ALPHA_FORMAT_NONPRE	include/linux/EGL/egl.h	216;"	d
EGL_VG_ALPHA_FORMAT_PRE	include/linux/EGL/egl.h	217;"	d
EGL_VG_ALPHA_FORMAT_PRE_BIT	include/linux/EGL/egl.h	218;"	d
EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR	include/linux/EGL/eglext.h	77;"	d
EGL_VG_COLORSPACE	include/linux/EGL/egl.h	219;"	d
EGL_VG_COLORSPACE_LINEAR	include/linux/EGL/egl.h	221;"	d
EGL_VG_COLORSPACE_LINEAR_BIT	include/linux/EGL/egl.h	222;"	d
EGL_VG_COLORSPACE_LINEAR_BIT_KHR	include/linux/EGL/eglext.h	76;"	d
EGL_VG_COLORSPACE_sRGB	include/linux/EGL/egl.h	220;"	d
EGL_VG_PARENT_IMAGE_KHR	include/linux/EGL/eglext.h	359;"	d
EGL_WIDTH	include/linux/EGL/egl.h	119;"	d
EGL_WINDOW_BIT	include/linux/EGL/egl.h	120;"	d
EGL_WRITE_SURFACE_BIT_KHR	include/linux/EGL/eglext.h	169;"	d
EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT	include/linux/EGL/eglext.h	490;"	d
EGL_YUV_CHROMA_SITING_0_5_EXT	include/linux/EGL/eglext.h	498;"	d
EGL_YUV_CHROMA_SITING_0_EXT	include/linux/EGL/eglext.h	497;"	d
EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT	include/linux/EGL/eglext.h	491;"	d
EGL_YUV_COLOR_SPACE_HINT_EXT	include/linux/EGL/eglext.h	488;"	d
EGL_YUV_FULL_RANGE_EXT	include/linux/EGL/eglext.h	495;"	d
EGL_YUV_NARROW_RANGE_EXT	include/linux/EGL/eglext.h	496;"	d
EGL_Y_INVERTED_NOK	include/linux/EGL/eglext.h	668;"	d
EGLenum	include/linux/EGL/egl.h	/^typedef unsigned int EGLenum;$/;"	t
EGLint	include/linux/EGL/eglplatform.h	/^typedef khronos_int32_t EGLint;$/;"	t
EGLsizeiANDROID	include/linux/EGL/eglext.h	/^typedef khronos_ssize_t EGLsizeiANDROID;$/;"	t
EGLuint64KHR	include/linux/EGL/eglext.h	/^typedef khronos_uint64_t EGLuint64KHR;$/;"	t
EGLuint64NV	include/linux/EGL/eglext.h	/^typedef khronos_utime_nanoseconds_t EGLuint64NV;$/;"	t
EIGENVALUE_THRESHOLD	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^constexpr float EIGENVALUE_THRESHOLD  = 1.0e-04f; \/\/ Thresholds for minimum eigenvalue. Used for lost tracking criteria$/;"	v
EIGENVALUE_THRESHOLD	tests/validation/reference/OpticalFlow.cpp	/^constexpr float EIGENVALUE_THRESHOLD  = 1.0e-04f;$/;"	m	namespace:arm_compute::test::validation::reference::__anon544	file:
ENABLED	arm_compute/graph/Types.h	/^    ENABLED,  \/**< Fast math enabled for Convolution layer *\/$/;"	m	class:arm_compute::graph::FastMathHint
ERROR	arm_compute/core/utils/logging/Types.h	/^    ERROR,   \/**< Error log level *\/$/;"	m	class:arm_compute::logging::LogLevel
ERRORS	tests/framework/Exceptions.h	/^    ERRORS,$/;"	m	class:arm_compute::test::framework::LogLevel
EXCLUDE_BORDER	tests/PaddingCalculator.h	/^        EXCLUDE_BORDER,$/;"	m	class:arm_compute::test::final::Option
EXP	tests/Types.h	/^    EXP,       \/**< Exponential *\/$/;"	m	class:arm_compute::FixedPointOp
EXPAND	src/core/CL/cl_kernels/helpers.h	37;"	d
EXPECTED_FAILURE	tests/framework/TestCaseFactory.h	/^        EXPECTED_FAILURE,$/;"	m	class:arm_compute::test::framework::TestCaseFactory::Status
EXPECTED_FAILURE	tests/framework/TestResult.h	/^        EXPECTED_FAILURE,$/;"	m	class:arm_compute::test::framework::TestResult::Status
EXPECTED_FAILURE_DATA_TEST_CASE	tests/framework/Macros.h	177;"	d
EXPECTED_FAILURE_FIXTURE_DATA_TEST_CASE	tests/framework/Macros.h	219;"	d
EXPECTED_FAILURE_FIXTURE_TEST_CASE	tests/framework/Macros.h	196;"	d
EXPECTED_FAILURE_REGISTER_FIXTURE_DATA_TEST_CASE	tests/framework/Macros.h	260;"	d
EXPECTED_FAILURE_REGISTER_FIXTURE_TEST_CASE	tests/framework/Macros.h	238;"	d
EXPECTED_FAILURE_TEST_CASE	tests/framework/Macros.h	150;"	d
EXPQ_IMPL	src/core/CL/cl_kernels/fixed_point.h	341;"	d
EXP_BARREL_SHIFTER	src/core/CL/cl_kernels/helpers_asymm.h	303;"	d
EXP_BARREL_SHIFTER_IMPL	src/core/CL/cl_kernels/helpers_asymm.h	144;"	d
EXP_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	40;"	d
EXP_OP	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	38;"	d	file:
EXP_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	372;"	d
EXP_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	371;"	d
Edge	arm_compute/graph/Edge.h	/^    Edge(EdgeID id, INode *producer, unsigned int producer_idx, INode *consumer, unsigned int consumer_idx, Tensor *tensor)$/;"	f	class:arm_compute::graph::final
Element	arm_compute/runtime/ISimpleLifetimeManager.h	/^        Element(void *id_ = nullptr, void **handle_ = nullptr, size_t size_ = 0, bool status_ = false)$/;"	f	struct:arm_compute::ISimpleLifetimeManager::Element
Element	arm_compute/runtime/ISimpleLifetimeManager.h	/^    struct Element$/;"	s	class:arm_compute::ISimpleLifetimeManager
EltwiseLayer	arm_compute/graph/Types.h	/^    EltwiseLayer,$/;"	m	class:arm_compute::graph::NodeType
EltwiseLayerNode	src/graph/nodes/EltwiseLayerNode.cpp	/^EltwiseLayerNode::EltwiseLayerNode(EltwiseOperation op, ConvertPolicy c_policy, RoundingPolicy r_policy)$/;"	f	class:arm_compute::graph::EltwiseLayerNode
EltwiseOperation	arm_compute/graph/Types.h	/^enum class EltwiseOperation$/;"	c	namespace:arm_compute::graph
EmptyEdgeID	arm_compute/graph/Types.h	/^constexpr EdgeID EmptyEdgeID = std::numeric_limits<EdgeID>::max();$/;"	m	namespace:arm_compute::graph
EmptyNodeID	arm_compute/graph/Types.h	/^constexpr NodeID EmptyNodeID = std::numeric_limits<NodeID>::max();$/;"	m	namespace:arm_compute::graph
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, Event e, NDRange global) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, Event e, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, Event e, NDRange offset, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, NDRange global) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, NDRange offset, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, const VECTOR_CLASS<Event> &events, NDRange global) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, const VECTOR_CLASS<Event> &events, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(CommandQueue &queue, const VECTOR_CLASS<Event> &events, NDRange offset, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(Event e, NDRange global) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(Event e, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(Event e, NDRange offset, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(NDRange global) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(NDRange offset, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(const VECTOR_CLASS<Event> &events, NDRange global) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(const VECTOR_CLASS<Event> &events, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^    EnqueueArgs(const VECTOR_CLASS<Event> &events, NDRange offset, NDRange global, NDRange local) : $/;"	f	struct:cl::EnqueueArgs
EnqueueArgs	include/CL/cl.hpp	/^struct EnqueueArgs$/;"	s	namespace:cl
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, Event e, NDRange global) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, Event e, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, Event e, NDRange offset, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, NDRange global) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, NDRange offset, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, const vector<Event> &events, NDRange global) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, const vector<Event> &events, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(CommandQueue &queue, const vector<Event> &events, NDRange offset, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(Event e, NDRange global) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(Event e, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(Event e, NDRange offset, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(NDRange global) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(NDRange offset, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(const vector<Event> &events, NDRange global) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(const vector<Event> &events, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^    EnqueueArgs(const vector<Event> &events, NDRange offset, NDRange global, NDRange local) : $/;"	f	class:cl::EnqueueArgs
EnqueueArgs	include/CL/cl2.hpp	/^class EnqueueArgs$/;"	c	namespace:cl
EnumListOption	tests/framework/command_line/EnumListOption.h	/^class EnumListOption : public Option$/;"	c	namespace:arm_compute::test::framework
EnumListOption	tests/framework/command_line/EnumListOption.h	/^inline EnumListOption<T>::EnumListOption(std::string name, std::set<T> allowed_values)$/;"	f	class:arm_compute::test::framework::EnumListOption
EnumListOption	tests/framework/command_line/EnumListOption.h	/^inline EnumListOption<T>::EnumListOption(std::string name, std::set<T> allowed_values, std::initializer_list<T> &&default_values)$/;"	f	class:arm_compute::test::framework::EnumListOption
EnumOption	tests/framework/command_line/EnumOption.h	/^class EnumOption : public SimpleOption<T>$/;"	c	namespace:arm_compute::test::framework
EnumOption	tests/framework/command_line/EnumOption.h	/^inline EnumOption<T>::EnumOption(std::string name, std::set<T> allowed_values)$/;"	f	class:arm_compute::test::framework::EnumOption
EnumOption	tests/framework/command_line/EnumOption.h	/^inline EnumOption<T>::EnumOption(std::string name, std::set<T> allowed_values, T default_value)$/;"	f	class:arm_compute::test::framework::EnumOption
EqualizeHistogramFixture	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^class EqualizeHistogramFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
EqualizeHistogramValidationFixture	tests/validation/fixtures/EqualizeHistogramFixture.h	/^class EqualizeHistogramValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ErodeValidationFixture	tests/validation/fixtures/ErodeFixture.h	/^class ErodeValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Error	include/CL/cl.hpp	/^    Error(cl_int err, const char * errStr = NULL) : err_(err), errStr_(errStr)$/;"	f	class:cl::Error
Error	include/CL/cl.hpp	/^class Error : public std::exception$/;"	c	namespace:cl
Error	include/CL/cl2.hpp	/^        Error(cl_int err, const char * errStr = NULL) : err_(err), errStr_(errStr)$/;"	f	class:cl::Error
Error	include/CL/cl2.hpp	/^    class Error : public std::exception$/;"	c	namespace:cl
ErrorCode	arm_compute/core/Error.h	/^enum class ErrorCode$/;"	c	namespace:arm_compute
Event	include/CL/cl.hpp	/^    Event() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Event
Event	include/CL/cl.hpp	/^    Event(const Event& event) : detail::Wrapper<cl_type>(event) { }$/;"	f	class:cl::Event
Event	include/CL/cl.hpp	/^    Event(const cl_event& event) : detail::Wrapper<cl_type>(event) { }$/;"	f	class:cl::Event
Event	include/CL/cl.hpp	/^class Event : public detail::Wrapper<cl_event>$/;"	c	namespace:cl
Event	include/CL/cl2.hpp	/^    Event() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Event
Event	include/CL/cl2.hpp	/^    explicit Event(const cl_event& event, bool retainObject = false) : $/;"	f	class:cl::Event
Event	include/CL/cl2.hpp	/^class Event : public detail::Wrapper<cl_event>$/;"	c	namespace:cl
Example	utils/Utils.h	/^class Example$/;"	c	namespace:arm_compute::utils
ExecutionTask	arm_compute/graph/Workload.h	/^struct ExecutionTask$/;"	s	namespace:arm_compute::graph
ExecutionWorkload	arm_compute/graph/Workload.h	/^struct ExecutionWorkload$/;"	s	namespace:arm_compute::graph
F16	arm_compute/core/Types.h	/^    F16,      \/**< 1 channel, 1 F16 per channel *\/$/;"	m	class:arm_compute::Format
F16	arm_compute/core/Types.h	/^    F16,     \/**< 16-bit floating-point number *\/$/;"	m	class:arm_compute::DataType
F32	arm_compute/core/Types.h	/^    F32,      \/**< 1 channel, 1 F32 per channel *\/$/;"	m	class:arm_compute::Format
F32	arm_compute/core/Types.h	/^    F32,     \/**< 32-bit floating-point number *\/$/;"	m	class:arm_compute::DataType
F64	arm_compute/core/Types.h	/^    F64,     \/**< 64-bit floating-point number *\/$/;"	m	class:arm_compute::DataType
FAILED	tests/framework/TestResult.h	/^        FAILED,$/;"	m	class:arm_compute::test::framework::TestResult::Status
FBDEV_PIXMAP_SUPPORTS_UMP	include/linux/EGL/fbdev_window.h	/^	FBDEV_PIXMAP_SUPPORTS_UMP = (1<<0)$/;"	e	enum:__anon181
FILTER	tests/validation/reference/Winograd.h	/^    FILTER, \/**< Winograd filter transform *\/$/;"	m	class:arm_compute::test::validation::reference::WinogradTransformType
FIRST_PFD	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans/generic.cpp	48;"	d	file:
FIXTURE_DATA_SETUP	tests/framework/Macros.h	107;"	d
FIXTURE_DATA_TEST_CASE	tests/framework/Macros.h	217;"	d
FIXTURE_DATA_TEST_CASE	tests/validation/CL/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAbsoluteDifferenceFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AbsoluteDifferenceS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAbsoluteDifferenceFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AbsoluteDifferenceU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAbsoluteDifferenceFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AbsoluteDifferenceS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAbsoluteDifferenceFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AbsoluteDifferenceU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAccumulateFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAccumulateSquaredFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAccumulateWeightedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AccumulateU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAccumulateFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAccumulateSquaredFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAccumulateWeightedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AccumulateU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLActivationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ActivationDataset), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLActivationLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLActivationLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), QuantizedActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLActivationLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLActivationLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLActivationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ActivationDataset), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLActivationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLActivationLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), QuantizedActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLActivationLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLActivationLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLArithmeticAdditionFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticAdditionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLArithmeticAdditionFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticAdditionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeBroadcast, CLArithmeticAdditionBroadcastFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapesBroadcast(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticAdditionFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ArithmeticAdditionQS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticAdditionFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ArithmeticAdditionQS8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticAdditionFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticAdditionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticAdditionFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), ArithmeticAdditionFP16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticAdditionFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticAdditionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticAdditionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticAdditionU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallBroadcast, CLArithmeticAdditionBroadcastFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapesBroadcast(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLArithmeticAdditionFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ArithmeticAdditionQS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLArithmeticAdditionFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ArithmeticAdditionQS8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAriSubS16U8ToS16Fixture, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLAriSubU8S16ToS16Fixture, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLArithmeticSubtractionFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticSubtractionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLArithmeticSubtractionToS16Fixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticSubtractionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLArithmeticSubtractionToS16Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAriSubS16U8ToS16Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLAriSubU8S16ToS16Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionFP16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionToS16Fixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLArithmeticSubtractionToS16Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLArithmeticSubtractionFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLArithmeticSubtractionFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, CLBatchNormalizationLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, CLBatchNormalizationLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, CLBatchNormalizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, CLBatchNormalizationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseAnd.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLBitwiseAndFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseAnd.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLBitwiseAndFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseNot.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLBitwiseNotFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseNot.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLBitwiseNotFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseOr.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLBitwiseOrFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseOr.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLBitwiseOrFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseXor.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLBitwiseXorFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/BitwiseXor.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLBitwiseXorFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Box3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLBox3x3Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Box3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLBox3x3Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelCombineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("FormatType", { Format::NV12, Format::NV21, Format::IYUV, Format::YUV444 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelCombineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("FormatType", { Format::RGB888, Format::RGBA8888 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelCombineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelCombineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("FormatType", { Format::NV12, Format::NV21, Format::IYUV, Format::YUV444 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelCombineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("FormatType", { Format::RGB888, Format::RGBA8888 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelCombineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelExtractFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), ChannelExtractRGBADataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelExtractFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), ChannelExtractYUVDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelExtractFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), ChannelExtractYUVPlanarDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelExtractFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), ChannelExtractRGBADataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelExtractFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), ChannelExtractYUVDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelExtractFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), ChannelExtractYUVPlanarDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelShuffleLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeRandomChannelShuffleLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelShuffleLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeRandomChannelShuffleLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLChannelShuffleLayerFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeRandomChannelShuffleLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelShuffleLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallRandomChannelShuffleLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelShuffleLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallRandomChannelShuffleLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ChannelShuffle.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLChannelShuffleLayerFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallRandomChannelShuffleLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvertFullyConnectedWeightsFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::Large3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvertFullyConnectedWeightsFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::Large3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvertFullyConnectedWeightsFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large3DShapes(), combine(params,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvertFullyConnectedWeightsFixture<float>, framework::DatasetMode::ALL, combine(datasets::Small3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvertFullyConnectedWeightsFixture<half>, framework::DatasetMode::ALL, combine(datasets::Small3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvertFullyConnectedWeightsFixture<uint8_t>, framework::DatasetMode::ALL, combine(datasets::Small3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvolutionFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvolutionFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvolutionFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLConvolutionFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvolutionFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvolutionFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvolutionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLConvolutionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMConvolutionLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMConvolutionLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::TinyConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::TinyConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Copy.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLCopyFixture<float>, framework::DatasetMode::NIGHTLY, combine(zip(datasets::LargeShapes(), datasets::LargeShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Copy.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLCopyFixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(zip(datasets::LargeShapes(), datasets::LargeShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Copy.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLCopyFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(zip(datasets::LargeShapes(), datasets::LargeShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Copy.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLCopyFixture<float>, framework::DatasetMode::PRECOMMIT, combine(zip(datasets::SmallShapes(), datasets::SmallShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Copy.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLCopyFixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(zip(datasets::SmallShapes(), datasets::SmallShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Copy.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLCopyFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(zip(datasets::SmallShapes(), datasets::SmallShapes()), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DeconvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDeconvolutionLayerFixture1x1<float>, framework::DatasetMode::ALL, combine(data1x1, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DeconvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDeconvolutionLayerFixture3x3<float>, framework::DatasetMode::ALL, combine(data3x3, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DeconvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDeconvolutionLayerFixture4x4<float>, framework::DatasetMode::ALL, combine(data4x4, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConcatenateLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConcatenateLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConcatenateLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConcatenateLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConcatenateLayerFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConcatenateLayerFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLDepthConcatenateLayerFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Tiny2DShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLDepthConcatenateLayerFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Tiny2DShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToS16Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU8toS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToS32Fixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerS16toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToS32Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU8toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToU16Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU8toU16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToU32Fixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU16toU32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToU8Fixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerS16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthConvertLayerToU8Fixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToS16Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU8toS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToS32Fixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerS16toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToS32Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU8toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToU16Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU8toU16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToU32Fixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU16toU32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToU8Fixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerS16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthConvertLayerToU8Fixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS16, CLDepthConvertLayerToFP32FixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS16, CLDepthConvertLayerToQS16FixedPointFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS8, CLDepthConvertLayerToFP32FixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS8, CLDepthConvertLayerToQS8FixedPointFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS16, CLDepthConvertLayerToFP32FixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS16, CLDepthConvertLayerToQS16FixedPointFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS8, CLDepthConvertLayerToFP32FixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS8, CLDepthConvertLayerToQS8FixedPointFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthwiseConvolutionLayerFixture3x3<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthwiseConvolutionLayerFixture3x3<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthwiseConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthwiseConvolutionLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthwiseConvolutionLayerQuantizedFixture3x3<uint8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDepthwiseConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseConvolutionLayerFixture3x3<float>, framework::DatasetMode::ALL,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseConvolutionLayerFixture3x3<half>, framework::DatasetMode::ALL,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseConvolutionLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallDepthwiseConvolutionLayerDataset(), depth_multipliers),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseConvolutionLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallDepthwiseConvolutionLayerDataset(), depth_multipliers),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseConvolutionLayerQuantizedFixture3x3<uint8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DepthwiseSeparableConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDepthwiseSeparableConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, datasets::MobileNetDepthwiseSeparableConvolutionLayerDataset())$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DequantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDequantizationLayerFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DequantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDequantizationLayerFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Derivative.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDerivativeFixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Derivative.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDerivativeFixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Dilate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLDilateFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Dilate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLDilateFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMDilatedConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMDilatedConvolutionLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMDilatedConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMDilatedConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMDilatedConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMDilatedConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMDilatedConvolutionLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMDilatedConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMDilatedConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMDilatedConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(combine(data_fixed_point, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(combine(data_fixed_point, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(data, framework::dataset::make("DataType", DataType::F32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(combine(data, framework::dataset::make("DataType", DataType::F16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(combine(data, framework::dataset::make("DataType", DataType::QASYMM8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionValidationWithTensorShapesFixture<float>, framework::DatasetMode::ALL, combine(combine(datasets::DirectConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, CLDirectConvolutionValidationWithTensorShapesQuantizedFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(combine(datasets::DirectConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/EqualizeHistogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLEqualizeHistogramFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/EqualizeHistogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLEqualizeHistogramFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Erode.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLErodeFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Erode.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLErodeFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FastCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFastCornersFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeImageFiles(), framework::dataset::make("Format", Format::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FastCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFastCornersFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallImageFiles(), framework::dataset::make("Format", Format::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FixedPoint/FixedPoint_QS8.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(combine(datasets::Small1DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFlattenLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFlattenLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFlattenLayerFixture<float>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFlattenLayerFixture<half>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFlattenLayerFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFlattenLayerFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLFlattenLayerFixture<int16_t>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Tiny3DShapes(), datasets::Tiny4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLFlattenLayerFixture<int8_t>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Tiny3DShapes(), datasets::Tiny4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Floor.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFloorFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Floor.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFloorFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFullyConnectedLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeFullyConnectedLayerDataset(), FullyConnectedParameters),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFullyConnectedLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLFullyConnectedLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine($/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFullyConnectedLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFullyConnectedLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFullyConnectedLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallFullyConnectedLayerDataset(), FullyConnectedParameters),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFullyConnectedLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLFullyConnectedLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine($/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLFullyConnectedLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLFullyConnectedLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeGEMMDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeGEMMDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallGEMMDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallGEMMDataset(), framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMInterleave4x4Fixture, framework::DatasetMode::PRECOMMIT, data_interleave * framework::dataset::make("DataType", DataType::F32))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMTranspose1xWFixture, framework::DatasetMode::PRECOMMIT, data_transpose * framework::dataset::make("DataType", DataType::F32))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::TinyGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::TinyGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMInterleave4x4Fixture, framework::DatasetMode::PRECOMMIT, data_interleave *$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLGEMMTranspose1xWFixture, framework::DatasetMode::PRECOMMIT, data_transpose *$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMLowpMatrixMultiplyCoreFixture, framework::DatasetMode::NIGHTLY, datasets::LargeGEMMLowpDataset())$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), quantize_down_int32_to_uint8_scale_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMLowpMatrixMultiplyCoreFixture, framework::DatasetMode::ALL, datasets::SmallGEMMLowpDataset())$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointFixture, framework::DatasetMode::ALL, combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::ALL, combine(datasets::SmallShapes(), quantize_down_int32_to_uint8_scale_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::ALL, combine(datasets::SmallShapes(), quantize_down_int32_to_uint8_scale_relu_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Gaussian3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGaussian3x3Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Gaussian3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGaussian3x3Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Gaussian5x5.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLGaussian5x5Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Gaussian5x5.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLGaussian5x5Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GaussianPyramid.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeGaussianPyramidHalf, CLGaussianPyramidHalfFixture<uint8_t>, framework::DatasetMode::NIGHTLY, large_gaussian_pyramid_levels)$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GaussianPyramid.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallGaussianPyramidHalf, CLGaussianPyramidHalfFixture<uint8_t>, framework::DatasetMode::ALL, small_gaussian_pyramid_levels)$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GlobalPoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunGlobalPooling, CLGlobalPoolingLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(GlobalPoolingLayerDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/GlobalPoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunGlobalPooling, CLGlobalPoolingLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(GlobalPoolingLayerDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HOGDescriptor.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLHOGDescriptorFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HOGDescriptor.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLHOGDescriptorFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HOGDetector.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLHOGDetectorFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HOGDetector.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLHOGDetectorFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HOGMultiDetection.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLHOGMultiDetectionFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HOGMultiDetection.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLHOGMultiDetectionFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HarrisCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLHarrisCornersFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeImageFiles(), data), framework::dataset::make("Format", Format::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/HarrisCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLHarrisCornersFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallImageFiles(), data), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Histogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLHistogramFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Histogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLHistogramFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/IntegralImage.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLIntegralImageFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/IntegralImage.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLIntegralImageFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/L2NormalizeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLL2NormalizeLayerFixture<float>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/L2NormalizeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLL2NormalizeLayerFixture<float>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/LSTMLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLLSTMLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallLSTMLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/LSTMLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLLSTMLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallLSTMLayerDataset(), framework::dataset::make("DataType", DataType::F16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/LocallyConnected.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLLocallyConnectedFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeLocallyConnectedDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/LocallyConnected.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLLocallyConnectedFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallLocallyConnectedDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMagnitudeFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMagnitudeFixture<int32_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), framework::dataset::make("Format", Format::S32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMagnitudeFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMagnitudeFixture<int32_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format", Format::S32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MeanStdDev.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMeanStdDevFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MeanStdDev.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMeanStdDevFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Median3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMedian3x3Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Median3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMedian3x3Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMinMaxLocationFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMinMaxLocationFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLMinMaxLocationFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMinMaxLocationFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMinMaxLocationFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLMinMaxLocationFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NonLinearFilter.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLNonLinearFilterFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NonLinearFilter.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLNonLinearFilterFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLNormalizationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(NormalizationDatasetFP32, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLNormalizationLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(NormalizationDatasetFP16, framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLNormalizationLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(NormalizationDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLNormalizationLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(NormalizationDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLNormalizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(NormalizationDatasetFP32, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLNormalizationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(NormalizationDatasetFP16, framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLNormalizationLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(NormalizationDatasetQS, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLNormalizationLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(NormalizationDatasetQS, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/OpticalFlow.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLOpticalFlowFixture, framework::DatasetMode::NIGHTLY, combine(combine($/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/OpticalFlow.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLOpticalFlowFixture, framework::DatasetMode::PRECOMMIT, combine(combine($/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPermuteFixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPermuteFixture<uint32_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPermuteFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPermuteFixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPermuteFixture<uint32_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPermuteFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Phase.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPhaseFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::Large2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Phase.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPhaseFixture<int32_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::Large2DShapes(), framework::dataset::make("Format", Format::S32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Phase.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPhaseFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Phase.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPhaseFixture<int32_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format", Format::S32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPoolingLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPoolingLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLPoolingLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetQASYMM8,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPoolingLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPoolingLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPoolingLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetFP, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPoolingLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLPoolingLayerQuantizedFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetQASYMM8,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSpecial, CLSpecialPoolingLayerFixture<float>, framework::DatasetMode::ALL, datasets::PoolingLayerDatasetSpecial() * framework::dataset::make("DataType", DataType::F32))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLPoolingLayerFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(datasets::TinyShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLPoolingLayerFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(datasets::TinyShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/QuantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLQuantizationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/QuantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLQuantizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/RNNLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLRNNLayerFixture<float>, framework::DatasetMode::ALL, combine(datasets::SmallRNNLayerDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/RNNLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLRNNLayerFixture<half>, framework::DatasetMode::ALL, combine(datasets::SmallRNNLayerDataset(), framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReductionOperation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLReductionOperationFixture<float>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReductionOperation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLReductionOperationFixture<float>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Remap.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLRemapFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR })),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Remap.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLRemapFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR })),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLReshapeLayerFixture<float>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLReshapeLayerFixture<half>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLReshapeLayerFixture<int16_t>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", DataType::S16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLReshapeLayerFixture<int8_t>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", DataType::S8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLReshapeLayerFixture<uint8_t>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", { DataType::U8, DataType::QASYMM8 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLScaleFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLScaleFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLScaleFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLScaleFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLScaleFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLScaleFixture<half>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLScaleFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLScaleFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scharr.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLScharr3x3Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Scharr.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLScharr3x3Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLSobel3x3Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLSobel5x5Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLSobel7x7Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSobel3x3Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSobel5x5Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSobel7x7Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLSoftmaxLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLSoftmaxLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLSoftmaxLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSoftmaxLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSoftmaxLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerSmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSoftmaxLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSoftmaxLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLSoftmaxLayerQuantizedFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLSoftmaxLayerFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(datasets::SoftmaxLayerTinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLSoftmaxLayerFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(datasets::SoftmaxLayerTinyShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeS16, CLTableLookupFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::S16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeU8, CLTableLookupFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallS16, CLTableLookupFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::S16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallU8, CLTableLookupFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Threshold.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLThresholdFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), datasets::MixedThresholdDataset()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Threshold.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLThresholdFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), datasets::MixedThresholdDataset()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLTransposeFixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large1DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLTransposeFixture<uint32_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large1DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLTransposeFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large1DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLTransposeFixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small1DShapes(), datasets::Small2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLTransposeFixture<uint32_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small1DShapes(), datasets::Small2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLTransposeFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small1DShapes(), datasets::Small2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WarpAffine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWarpAffineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WarpAffine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWarpAffineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WarpPerspective.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWarpPerspectiveFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WarpPerspective.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWarpPerspectiveFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWidthConcatenateLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::WidthConcatenateLayerShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWidthConcatenateLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWidthConcatenateLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWidthConcatenateLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWidthConcatenateLayerFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::WidthConcatenateLayerShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWidthConcatenateLayerFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::WidthConcatenateLayerShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLWidthConcatenateLayerFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Tiny2DShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, CLWidthConcatenateLayerFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Tiny2DShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWinogradConvolutionLayerFastMathFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWinogradFilterTransformFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWinogradInputTransformFixture, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeWinogradInputTransformDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CLWinogradOutputTransformFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeWinogradOutputTransformDataset(), framework::dataset::make("DataType", { DataType::F32 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWinogradConvolutionLayerFastMathFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWinogradFilterTransformFixture, framework::DatasetMode::ALL,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWinogradInputTransformFixture, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallWinogradInputTransformDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CL/Winograd.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CLWinogradOutputTransformFixture, framework::DatasetMode::ALL, combine(datasets::SmallWinogradOutputTransformDataset(), framework::dataset::make("DataType", { DataType::F32 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CPPPermuteFixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CPPPermuteFixture<uint32_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, CPPPermuteFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CPPPermuteFixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CPPPermuteFixture<uint32_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/CPP/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, CPPPermuteFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCActivationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ActivationDataset), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCActivationLayerFixture<half_float::half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCActivationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ActivationDataset), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCActivationLayerFixture<half_float::half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCArithmeticAdditionFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), ArithmeticAdditionFP16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, GCBatchNormalizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, GCBatchNormalizationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCConvolutionLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCConvolutionLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCDepthConcatenateLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCDepthConcatenateLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCDepthConcatenateLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCDepthConcatenateLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCDepthwiseConvolutionLayerFixture3x3<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCDepthwiseConvolutionLayerFixture3x3<half>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, GCDirectConvolutionLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(data, framework::dataset::make("DataType", DataType::F32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, GCDirectConvolutionLayerFixture<half_float::half>, framework::DatasetMode::ALL, combine(combine(combine(data, framework::dataset::make("DataType", DataType::F16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^FIXTURE_DATA_TEST_CASE(Run, GCDirectConvolutionLayerTensorShiftFixture<float>, framework::DatasetMode::ALL, combine(data, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^FIXTURE_DATA_TEST_CASE(Run, GCDirectConvolutionLayerTensorShiftFixture<half_float::half>, framework::DatasetMode::ALL, combine(data, framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCFullyConnectedLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeFullyConnectedLayerDataset(), FullyConnectedParameters),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCFullyConnectedLayerFixture<half_float::half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCFullyConnectedLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallFullyConnectedLayerDataset(), FullyConnectedParameters),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCFullyConnectedLayerFixture<half_float::half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCGEMMFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeGEMMDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCGEMMFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallGEMMDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/GlobalPoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunGlobalPooling, GCGlobalPoolingLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(GlobalPoolingLayerDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/GlobalPoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunGlobalPooling, GCGlobalPoolingLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(GlobalPoolingLayerDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCNormalizationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(NormalizationDataset, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCNormalizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(NormalizationDataset, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, GCNormalizePlanarYUVLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::RandomNormalizePlanarYUVLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCPoolingLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCPoolingLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCPoolingLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetFP, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCPoolingLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCScaleFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCScaleFixture<half>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCSoftmaxLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCSoftmaxLayerFixture<half_float::half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCSoftmaxLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCSoftmaxLayerFixture<half_float::half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCTransposeFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, GCTransposeFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCTransposeFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/GLES_COMPUTE/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, GCTransposeFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAbsoluteDifferenceFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AbsoluteDifferenceS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAbsoluteDifferenceFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AbsoluteDifferenceU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAbsoluteDifferenceFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AbsoluteDifferenceS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/AbsoluteDifference.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAbsoluteDifferenceFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AbsoluteDifferenceU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAccumulateFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAccumulateSquaredFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAccumulateWeightedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), AccumulateU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAccumulateFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAccumulateSquaredFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AccumulateS16Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Accumulate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAccumulateWeightedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), AccumulateU8Dataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEActivationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ActivationDataset), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEActivationLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEActivationLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), QuantizedActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEActivationLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEActivationLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEActivationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ActivationDataset), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEActivationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEActivationLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), QuantizedActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEActivationLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ActivationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEActivationLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ActivationDataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEArithmeticAdditionFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticAdditionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEArithmeticAdditionFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticAdditionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeBroadcast, NEArithmeticAdditionBroadcastFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapesBroadcast(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticAdditionFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ArithmeticAdditionQS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticAdditionFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(), ArithmeticAdditionQS8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticAdditionFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticAdditionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticAdditionFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), ArithmeticAdditionFP16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticAdditionFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticAdditionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticAdditionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticAdditionU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallBroadcast, NEArithmeticAdditionBroadcastFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapesBroadcast(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEArithmeticAdditionFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ArithmeticAdditionQS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticAddition.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEArithmeticAdditionFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(), ArithmeticAdditionQS8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAriSubS16U8ToS16Fixture, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEAriSubU8S16ToS16Fixture, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEArithmeticSubtractionFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticSubtractionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEArithmeticSubtractionToS16Fixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), ArithmeticSubtractionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEArithmeticSubtractionToS16Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAriSubS16U8ToS16Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEAriSubU8S16ToS16Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionFP32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionFP16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionToS16Fixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), ArithmeticSubtractionS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEArithmeticSubtractionToS16Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEArithmeticSubtractionFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ArithmeticSubtraction.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEArithmeticSubtractionFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, NEBatchNormalizationLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, NEBatchNormalizationLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, NEBatchNormalizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BatchNormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Random, NEBatchNormalizationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::RandomBatchNormalizationLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseAnd.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEBitwiseAndFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseAnd.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEBitwiseAndFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseNot.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEBitwiseNotFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseNot.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEBitwiseNotFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseOr.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEBitwiseOrFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseOr.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEBitwiseOrFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseXor.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEBitwiseXorFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/BitwiseXor.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEBitwiseXorFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Box3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEBox3x3Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Box3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEBox3x3Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEChannelCombineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("FormatType", { Format::NV12, Format::NV21, Format::IYUV, Format::YUV444 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEChannelCombineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("FormatType", { Format::RGB888, Format::RGBA8888 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEChannelCombineFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEChannelCombineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("FormatType", { Format::NV12, Format::NV21, Format::IYUV, Format::YUV444 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEChannelCombineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("FormatType", { Format::RGB888, Format::RGBA8888 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelCombine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEChannelCombineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("FormatType", { Format::YUYV422, Format::UYVY422 })))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEChannelExtractFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), ChannelExtractRGBADataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEChannelExtractFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), ChannelExtractYUVDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEChannelExtractFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), ChannelExtractYUVPlanarDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEChannelExtractFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), ChannelExtractRGBADataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEChannelExtractFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), ChannelExtractYUVDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ChannelExtract.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEChannelExtractFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), ChannelExtractYUVPlanarDataset))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvertFullyConnectedWeightsFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::Large3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvertFullyConnectedWeightsFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::Large3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvertFullyConnectedWeightsFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large3DShapes(), combine(params,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvertFullyConnectedWeightsFixture<float>, framework::DatasetMode::ALL, combine(datasets::Small3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvertFullyConnectedWeightsFixture<half>, framework::DatasetMode::ALL, combine(datasets::Small3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvertFullyConnectedWeightsFixture<uint8_t>, framework::DatasetMode::ALL, combine(datasets::Small3DShapes(), combine(params, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvolutionFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvolutionFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvolutionFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEConvolutionFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvolutionFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvolutionFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvolutionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Convolution.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEConvolutionFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMConvolutionLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMConvolutionLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEWinogradConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallNoBias, NEWinogradConvolutionLayerNoBiasFixture<float>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEGEMMConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::TinyConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEGEMMConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::TinyConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DeconvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDeconvolutionLayerFixture1x1<float>, framework::DatasetMode::ALL, combine(data1x1, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DeconvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDeconvolutionLayerFixture3x3<float>, framework::DatasetMode::ALL, combine(data3x3, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DeconvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDeconvolutionLayerFixture4x4<float>, framework::DatasetMode::ALL, combine(data4x4, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConcatenateLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConcatenateLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConcatenateLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConcatenateLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConcatenateLayerFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConcatenateLayerFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::DepthConcatenateLayerShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEDepthConcatenateLayerFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Tiny2DShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEDepthConcatenateLayerFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Tiny2DShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToS16Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU8toS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToS32Fixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerS16toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToS32Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU8toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToU16Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU8toU16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToU32Fixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU16toU32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToU8Fixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerS16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthConvertLayerToU8Fixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), DepthConvertLayerU16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToS16Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU8toS16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToS32Fixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerS16toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToS32Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU8toS32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToU16Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU8toU16Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToU32Fixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU16toU32Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToU8Fixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerS16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthConvertLayerToU8Fixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), DepthConvertLayerU16toU8Dataset),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS16, NEDepthConvertLayerToFP32FixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS16, NEDepthConvertLayerToQS16FixedPointFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS8, NEDepthConvertLayerToFP32FixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallQS8, NEDepthConvertLayerToQS8FixedPointFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS16, NEDepthConvertLayerToFP32FixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS16, NEDepthConvertLayerToQS16FixedPointFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS8, NEDepthConvertLayerToFP32FixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthConvertLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTinyQS8, NEDepthConvertLayerToQS8FixedPointFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthwiseConvolutionLayerFixture3x3<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthwiseConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeDepthwiseConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDepthwiseConvolutionLayerQuantizedFixture3x3<uint8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunOptimized, NEDepthwiseConvolutionLayerFixture3x3<float>, framework::DatasetMode::ALL, combine(combine(combine(datasets::OptimizedDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthwiseConvolutionLayerFixture3x3<float>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallDepthwiseConvolutionLayerDataset3x3(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthwiseConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallDepthwiseConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthwiseConvolutionLayerQuantizedFixture3x3<uint8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthwiseConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DepthwiseSeparableConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDepthwiseSeparableConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, datasets::MobileNetDepthwiseSeparableConvolutionLayerDataset())$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DequantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDequantizationLayerFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DequantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDequantizationLayerFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Derivative.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDerivativeFixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Derivative.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDerivativeFixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Dilate.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEDilateFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Dilate.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEDilateFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMDilatedConvolutionLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMDilatedConvolutionLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(datasets::LargeDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMDilatedConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMDilatedConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMDilatedConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMDilatedConvolutionLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMDilatedConvolutionLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(datasets::SmallDilatedConvolutionLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMDilatedConvolutionLayerQuantizedFixture<uint8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEGEMMDilatedConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEGEMMDilatedConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDirectConvolutionLayerFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(combine(data_qs16, framework::dataset::make("DataType", DataType::QS16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDirectConvolutionLayerFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(combine(data_qs8, framework::dataset::make("DataType", DataType::QS8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDirectConvolutionLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(data_f32, framework::dataset::make("DataType", DataType::F32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/DirectConvolutionLayer.cpp	/^FIXTURE_DATA_TEST_CASE(Run, NEDirectConvolutionLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(combine(data_f32, framework::dataset::make("DataType", DataType::F16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/EqualizeHistogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEEqualizeHistogramFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/EqualizeHistogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEEqualizeHistogramFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Erode.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEErodeFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Erode.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEErodeFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FastCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEFastCornersFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeImageFiles(), framework::dataset::make("Format", Format::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FastCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFastCornersFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallImageFiles(), framework::dataset::make("Format", Format::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FixedPoint/FixedPoint.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(combine(datasets::Small1DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FixedPoint/FixedPoint.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(combine(framework::dataset::make("Shape", TensorShape(8192U)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FixedPoint/FixedPoint.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(combine(datasets::Small1DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEFlattenLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEFlattenLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFlattenLayerFixture<float>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFlattenLayerFixture<half>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFlattenLayerFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFlattenLayerFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(framework::dataset::concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEFlattenLayerFixture<int16_t>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Tiny3DShapes(), datasets::Tiny4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Flatten.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEFlattenLayerFixture<int8_t>, framework::DatasetMode::ALL, combine(framework::dataset::concat(datasets::Tiny3DShapes(), datasets::Tiny4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Floor.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEFloorFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Floor.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFloorFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEFullyConnectedLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeFullyConnectedLayerDataset(), FullyConnectedParameters),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEFullyConnectedLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFullyConnectedLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFullyConnectedLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFullyConnectedLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallFullyConnectedLayerDataset(), FullyConnectedParameters),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEFullyConnectedLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEFullyConnectedLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FullyConnectedLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEFullyConnectedLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::TinyFullyConnectedLayerDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeGEMMDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMFixture<half>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeGEMMDataset(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallGEMMDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMFixture<half>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallGEMMDataset(), framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMInterleave4x4Fixture, framework::DatasetMode::PRECOMMIT, data_interleave * framework::dataset::make("DataType", DataType::F32))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMInterleave4x4Fixture, framework::DatasetMode::PRECOMMIT, data_interleave *$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMTranspose1xWFixture, framework::DatasetMode::PRECOMMIT, data_transpose * framework::dataset::make("DataType", DataType::F32))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMTranspose1xWFixture, framework::DatasetMode::PRECOMMIT, data_transpose *$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEGEMMFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::TinyGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMM.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEGEMMFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::TinyGEMMDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMLowpMatrixMultiplyCoreFixture, framework::DatasetMode::NIGHTLY, datasets::LargeGEMMLowpDataset())$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), quantize_down_int32_to_uint8_scale_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), quantize_down_int32_to_uint8_scale_relu_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMAssemblyFixture_S8, framework::DatasetMode::PRECOMMIT, data_matrix_multiply)$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMAssemblyFixture_U8, framework::DatasetMode::PRECOMMIT, data_matrix_multiply)$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMLowpMatrixMultiplyCoreFixture, framework::DatasetMode::ALL, datasets::SmallGEMMLowpDataset())$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointFixture, framework::DatasetMode::ALL, combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::ALL, combine(datasets::SmallShapes(), quantize_down_int32_to_uint8_scale_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GEMMLowp.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGEMMLowpQuantizeDownInt32ToUint8ScaleFixture, framework::DatasetMode::ALL, combine(datasets::SmallShapes(), quantize_down_int32_to_uint8_scale_relu_cases))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Gaussian3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGaussian3x3Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Gaussian3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGaussian3x3Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Gaussian5x5.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEGaussian5x5Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Gaussian5x5.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEGaussian5x5Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GaussianPyramid.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeGaussianPyramidHalf, NEGaussianPyramidHalfFixture<uint8_t>, framework::DatasetMode::NIGHTLY, large_gaussian_pyramid_levels)$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GaussianPyramid.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallGaussianPyramidHalf, NEGaussianPyramidHalfFixture<uint8_t>, framework::DatasetMode::ALL, small_gaussian_pyramid_levels)$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/GlobalPoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunGlobalPooling, NEGlobalPoolingLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(GlobalPoolingLayerDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HOGDescriptor.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEHOGDescriptorFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HOGDescriptor.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEHOGDescriptorFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HOGDetector.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEHOGDetectorFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HOGDetector.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEHOGDetectorFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HOGMultiDetection.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEHOGMultiDetectionFixture, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HOGMultiDetection.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEHOGMultiDetectionFixture, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HarrisCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEHarrisCornersFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeImageFiles(), data), framework::dataset::make("Format", Format::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/HarrisCorners.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEHarrisCornersFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallImageFiles(), data), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Histogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEHistogramFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Histogram.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEHistogramFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Im2Col.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEIm2ColFixture<float>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::F32)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Im2Col.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEIm2ColFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::F16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Im2Col.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEIm2ColFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::QASYMM8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/IntegralImage.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEIntegralImageFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/IntegralImage.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEIntegralImageFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/L2NormalizeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEL2NormalizeLayerFixture<float>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/L2NormalizeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEL2NormalizeLayerFixture<float>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/LocallyConnected.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NELocallyConnectedFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::LargeLocallyConnectedDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/LocallyConnected.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NELocallyConnectedFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallLocallyConnectedDataset(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEMagnitudeFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMagnitudeFixture<half_float::half>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Magnitude.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMagnitudeFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MeanStdDev.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEMeanStdDevFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MeanStdDev.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMeanStdDevFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Median3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEMedian3x3Fixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Median3x3.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMedian3x3Fixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEMinMaxLocationFixture<float>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEMinMaxLocationFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEMinMaxLocationFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::Large2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMinMaxLocationFixture<float>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMinMaxLocationFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/MinMaxLocation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEMinMaxLocationFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::Small2DShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NonLinearFilter.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NENonLinearFilterFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NonLinearFilter.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NENonLinearFilterFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(combine(combine(datasets::SmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NENormalizationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(NormalizationDatasetFP32, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NENormalizationLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(NormalizationDataset, framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NENormalizationLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(NormalizationDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NENormalizationLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(NormalizationDataset, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NENormalizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(NormalizationDatasetFP32, framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NENormalizationLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(NormalizationDataset, framework::dataset::make("DataType", DataType::F16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NENormalizationLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(NormalizationDatasetQS, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/NormalizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NENormalizationLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(NormalizationDatasetQS, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/OpticalFlow.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEOpticalFlowFixture, framework::DatasetMode::NIGHTLY, combine(combine($/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/OpticalFlow.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEOpticalFlowFixture, framework::DatasetMode::PRECOMMIT, combine(combine($/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPermuteFixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPermuteFixture<uint32_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPermuteFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(PermuteParametersLarge, framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPermuteFixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPermuteFixture<uint32_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Permute.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPermuteFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(PermuteParametersSmall, framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Phase.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPhaseFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::Large2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Phase.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPhaseFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::Small2DShapes(), framework::dataset::make("Format", Format::S16)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPoolingLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPoolingLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEPoolingLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), combine(PoolingLayerDatasetQASYMM8,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPoolingLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPoolingLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPoolingLayerFixture<float>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetFP, framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPoolingLayerFixture<half>, framework::DatasetMode::ALL, combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetFP,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEPoolingLayerQuantizedFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(combine(datasets::SmallShapes(), combine(PoolingLayerDatasetQASYMM8,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSpecial, NESpecialPoolingLayerFixture<float>, framework::DatasetMode::ALL, datasets::PoolingLayerDatasetSpecial() * framework::dataset::make("DataType", DataType::F32))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEPoolingLayerFixedPointFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(datasets::TinyShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PoolingLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NEPoolingLayerFixedPointFixture<int8_t>, framework::DatasetMode::ALL, combine(combine(datasets::TinyShapes(), combine(PoolingLayerDatasetQS,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/QuantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEQuantizationLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large3DShapes(), datasets::Large4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/QuantizationLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEQuantizationLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small3DShapes(), datasets::Small4DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ReductionOperation.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEReductionOperationFixture<float>, framework::DatasetMode::NIGHTLY,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ReductionOperation.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEReductionOperationFixture<float>, framework::DatasetMode::PRECOMMIT,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Remap.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NERemapFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR })),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Remap.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NERemapFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR })),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEReshapeLayerFixture<float>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", DataType::F32)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEReshapeLayerFixture<int16_t>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", DataType::S16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/ReshapeLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEReshapeLayerFixture<int8_t>, framework::DatasetMode::ALL, combine(datasets::SmallReshapeLayerDataset(), framework::dataset::make("DataType", DataType::S8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEScaleFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEScaleFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEScaleFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEScaleFixture<float>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEScaleFixture<int16_t>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Scale.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEScaleFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Schaar.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEScharr3x3Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Schaar.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEScharr3x3Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NESobel3x3Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NESobel5x5Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NESobel7x7Fixture, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::Large2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESobel3x3Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESobel5x5Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Sobel.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESobel7x7Fixture, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::Small2DShapes(), datasets::BorderModes()), framework::dataset::make("Format",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NESoftmaxLayerFixture<float>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NESoftmaxLayerFixture<half>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NESoftmaxLayerQuantizedFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerLargeShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESoftmaxLayerFixedPointFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESoftmaxLayerFixedPointFixture<int8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::SoftmaxLayerSmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESoftmaxLayerFixture<float>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESoftmaxLayerFixture<half>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NESoftmaxLayerQuantizedFixture<uint8_t>, framework::DatasetMode::ALL, combine(combine(datasets::SoftmaxLayerSmallShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NESoftmaxLayerFixedPointFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SoftmaxLayerTinyShapes(),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/SoftmaxLayer.cpp	/^FIXTURE_DATA_TEST_CASE(RunTiny, NESoftmaxLayerFixedPointFixture<int8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SoftmaxLayerTinyShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeS16, NETableLookupFixture<int16_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::S16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunLargeU8, NETableLookupFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(datasets::LargeShapes(), framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallS16, NETableLookupFixture<int16_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::S16)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/TableLookup.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmallU8, NETableLookupFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::U8)))$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Threshold.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, ThresholdFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(datasets::LargeShapes(), datasets::MixedThresholdDataset()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Threshold.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, ThresholdFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(datasets::SmallShapes(), datasets::MixedThresholdDataset()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NETransposeFixture<uint16_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large1DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NETransposeFixture<uint32_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large1DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NETransposeFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(concat(datasets::Large1DShapes(), datasets::Large2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NETransposeFixture<uint16_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small1DShapes(), datasets::Small2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NETransposeFixture<uint32_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small1DShapes(), datasets::Small2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/Transpose.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NETransposeFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(concat(datasets::Small1DShapes(), datasets::Small2DShapes()),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/WarpAffine.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEWarpAffineFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType", DataType::U8)),$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/WarpPerspective.cpp	/^FIXTURE_DATA_TEST_CASE(RunLarge, NEWarpPerspectiveFixture<uint8_t>, framework::DatasetMode::NIGHTLY, combine(combine(combine(datasets::LargeShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE	tests/validation/NEON/WarpPerspective.cpp	/^FIXTURE_DATA_TEST_CASE(RunSmall, NEWarpPerspectiveFixture<uint8_t>, framework::DatasetMode::PRECOMMIT, combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("DataType",$/;"	f	namespace:arm_compute::test::validation
FIXTURE_DATA_TEST_CASE_IMPL	tests/framework/Macros.h	201;"	d
FIXTURE_RUN	tests/framework/Macros.h	112;"	d
FIXTURE_SETUP	tests/framework/Macros.h	102;"	d
FIXTURE_SYNC	tests/framework/Macros.h	117;"	d
FIXTURE_TEARDOWN	tests/framework/Macros.h	122;"	d
FIXTURE_TEST_CASE	tests/framework/Macros.h	194;"	d
FIXTURE_TEST_CASE	tests/validation/CL/UNIT/MemoryManager.cpp	/^FIXTURE_TEST_CASE(BlobMemoryManagerSimpleWithinFunctionLevel,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_TEST_CASE	tests/validation/GLES_COMPUTE/UNIT/MemoryManager.cpp	/^FIXTURE_TEST_CASE(BlobMemoryManagerReconfigure,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_TEST_CASE	tests/validation/GLES_COMPUTE/UNIT/MemoryManager.cpp	/^FIXTURE_TEST_CASE(BlobMemoryManagerReconfigure2,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_TEST_CASE	tests/validation/GLES_COMPUTE/UNIT/MemoryManager.cpp	/^FIXTURE_TEST_CASE(BlobMemoryManagerSimpleWithinFunctionLevel,$/;"	f	namespace:arm_compute::test::validation
FIXTURE_TEST_CASE_IMPL	tests/framework/Macros.h	182;"	d
FLOOR	arm_compute/core/Types.h	/^    FLOOR, \/**< Floor rounding *\/$/;"	m	class:arm_compute::HOGNormType::DimensionRoundingType
FLT_SCALE	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^constexpr float FLT_SCALE             = 1.0f \/ (1 << 20);$/;"	v
FLT_SCALE	tests/validation/reference/OpticalFlow.cpp	/^constexpr float FLT_SCALE             = 1.0f \/ (1 << 20);$/;"	m	namespace:arm_compute::test::validation::reference::__anon544	file:
FORWARD_DECLARE_VGET_LANE_FOR_TYPE	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	99;"	d	file:
FP_FAST_FMAH	include/half/half.hpp	235;"	d
FP_ILOGB0	include/half/half.hpp	238;"	d
FP_ILOGBNAN	include/half/half.hpp	241;"	d
FP_INFINITE	include/half/half.hpp	253;"	d
FP_NAN	include/half/half.hpp	250;"	d
FP_NORMAL	include/half/half.hpp	256;"	d
FP_PIXEL_WISE_MULTIPLICATION_FIXTURE_DATA_TEST_CASE	tests/validation/CL/PixelWiseMultiplication.cpp	62;"	d	file:
FP_PIXEL_WISE_MULTIPLICATION_FIXTURE_DATA_TEST_CASE	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	46;"	d	file:
FP_PIXEL_WISE_MULTIPLICATION_FIXTURE_DATA_TEST_CASE_OTHER	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	60;"	d	file:
FP_SUBNORMAL	include/half/half.hpp	244;"	d
FP_ZERO	include/half/half.hpp	247;"	d
FastCornersValidationFixture	tests/validation/fixtures/FastCornersFixture.h	/^class FastCornersValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
FastMathHint	arm_compute/graph/Types.h	/^enum class FastMathHint$/;"	c	namespace:arm_compute::graph
FileHandler	arm_compute/core/utils/io/FileHandler.h	/^class FileHandler$/;"	c	namespace:arm_compute::io
FileHandler	src/core/utils/io/FileHandler.cpp	/^FileHandler::FileHandler()$/;"	f	class:FileHandler
FileNotFound	tests/framework/Exceptions.cpp	/^FileNotFound::FileNotFound(const std::string &msg)$/;"	f	class:arm_compute::test::framework::FileNotFound
FileNotFound	tests/framework/Exceptions.h	/^class FileNotFound : public std::runtime_error$/;"	c	namespace:arm_compute::test::framework
FilePrinter	src/core/utils/logging/FilePrinter.cpp	/^FilePrinter::FilePrinter(const std::string &filename)$/;"	f	class:FilePrinter
Fill	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    inline void Fill(T val) {$/;"	f	class:final
FindChildElement	documentation/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
FixedPointOp	tests/Types.h	/^enum class FixedPointOp$/;"	c	namespace:arm_compute
FixedPointPixelWiseMultiplicationValidationFixture	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^class FixedPointPixelWiseMultiplicationValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
FixedPointValidationFixture	tests/validation/fixtures/FixedPointFixture.h	/^class FixedPointValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Fixture	tests/framework/Fixture.h	/^class Fixture$/;"	c	namespace:arm_compute::test::framework
FlattenLayer	arm_compute/graph/Types.h	/^    FlattenLayer,$/;"	m	class:arm_compute::graph::NodeType
FlattenLayer	arm_compute/graph/frontend/Layers.h	/^    FlattenLayer()$/;"	f	class:arm_compute::graph::frontend::final
FlattenLayerFixture	tests/benchmark/fixtures/FlattenLayerFixture.h	/^class FlattenLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
FlattenLayerNode	src/graph/nodes/FlattenLayerNode.cpp	/^FlattenLayerNode::FlattenLayerNode()$/;"	f	class:arm_compute::graph::FlattenLayerNode
FlattenLayerValidationFixture	tests/validation/fixtures/FlattenLayerFixture.h	/^class FlattenLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
FloatFlip	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^inline int32_t FloatFlip(float val)$/;"	f	namespace:arm_compute
FloorFixture	tests/benchmark/fixtures/FloorFixture.h	/^class FloorFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
FloorValidationFixture	tests/validation/fixtures/FloorFixture.h	/^class FloorValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Format	arm_compute/core/Types.h	/^enum class Format$/;"	c	namespace:arm_compute
Framework	tests/framework/Framework.cpp	/^Framework::Framework()$/;"	f	class:arm_compute::test::framework::Framework
FullyConnectedLayer	arm_compute/graph/Types.h	/^    FullyConnectedLayer,$/;"	m	class:arm_compute::graph::NodeType
FullyConnectedLayer	arm_compute/graph/frontend/Layers.h	/^    FullyConnectedLayer(unsigned int        num_outputs,$/;"	f	class:arm_compute::graph::frontend::final
FullyConnectedLayerDataset	tests/datasets/FullyConnectedLayerDataset.h	/^class FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
FullyConnectedLayerFixture	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^class FullyConnectedLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
FullyConnectedLayerNode	src/graph/nodes/FullyConnectedLayer.cpp	/^FullyConnectedLayerNode::FullyConnectedLayerNode(unsigned int num_outputs)$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
FullyConnectedLayerValidationFixedPointFixture	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^class FullyConnectedLayerValidationFixedPointFixture : public FullyConnectedLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T, run_interleave>$/;"	c	namespace:arm_compute::test::validation
FullyConnectedLayerValidationFixture	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^class FullyConnectedLayerValidationFixture : public FullyConnectedLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T, run_interleave>$/;"	c	namespace:arm_compute::test::validation
FullyConnectedLayerValidationGenericFixture	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^class FullyConnectedLayerValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
FullyConnectedLayerValidationQuantizedFixture	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^class FullyConnectedLayerValidationQuantizedFixture : public FullyConnectedLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T, run_interleave>$/;"	c	namespace:arm_compute::test::validation
FullyConnectedParameters	tests/validation/CL/FullyConnectedLayer.cpp	/^const auto FullyConnectedParameters = combine(framework::dataset::make("TransposeWeights", { false, true }), framework::dataset::make("ReshapeWeights", { false, true }));$/;"	m	namespace:arm_compute::test::validation::__anon420	file:
FullyConnectedParameters	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^const auto FullyConnectedParameters = combine(framework::dataset::make("TransposeWeights", { false, true }), framework::dataset::make("ReshapeWeights", { false, true }));$/;"	m	namespace:arm_compute::test::validation::__anon461	file:
FullyConnectedParameters	tests/validation/NEON/FullyConnectedLayer.cpp	/^const auto FullyConnectedParameters = combine(framework::dataset::make("TransposeWeights", { false, true }), framework::dataset::make("ReshapeWeights", { false, true }));$/;"	m	namespace:arm_compute::test::validation::__anon495	file:
FuncNamesDataset	tests/validation/UNIT/FixedPoint.cpp	/^const auto FuncNamesDataset = framework::dataset::make("FunctionNames", { FixedPointOp::ADD,$/;"	m	namespace:arm_compute::test::validation::__anon526	file:
FunctorType	include/CL/cl.hpp	/^		NullType> FunctorType;$/;"	t	struct:cl::detail::functionImplementation_
FunctorType	include/CL/cl.hpp	/^		T31> FunctorType;$/;"	t	struct:cl::detail::functionImplementation_
FunctorType	include/CL/cl.hpp	/^    > FunctorType;$/;"	t	struct:cl::make_kernel
FunctorType	include/CL/cl2.hpp	/^        typedef KernelFunctor<Ts...> FunctorType;$/;"	t	struct:cl::compatibility::make_kernel
G	arm_compute/core/Types.h	/^    G,       \/**< Green channel. *\/$/;"	m	class:arm_compute::Channel
G51	arm_compute/core/GPUTarget.h	/^    G51           = 0x230,$/;"	m	class:arm_compute::GPUTarget
G51BIG	arm_compute/core/GPUTarget.h	/^    G51BIG        = 0x231,$/;"	m	class:arm_compute::GPUTarget
G51LIT	arm_compute/core/GPUTarget.h	/^    G51LIT        = 0x232,$/;"	m	class:arm_compute::GPUTarget
G71	arm_compute/core/GPUTarget.h	/^    G71           = 0x210,$/;"	m	class:arm_compute::GPUTarget
G72	arm_compute/core/GPUTarget.h	/^    G72           = 0x220,$/;"	m	class:arm_compute::GPUTarget
GC	arm_compute/graph/Types.h	/^    GC,          \/**< GLES compute capable target device *\/$/;"	m	class:arm_compute::graph::Target
GCAbsDiffExample	examples/gc_absdiff.cpp	/^class GCAbsDiffExample : public Example$/;"	c	file:
GCAbsoluteDifference	arm_compute/runtime/GLES_COMPUTE/functions/GCAbsoluteDifference.h	/^class GCAbsoluteDifference : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCAbsoluteDifferenceKernel	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	/^class GCAbsoluteDifferenceKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCAbsoluteDifferenceKernel	src/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.cpp	/^GCAbsoluteDifferenceKernel::GCAbsoluteDifferenceKernel()$/;"	f	class:GCAbsoluteDifferenceKernel
GCAccessor	tests/GLES_COMPUTE/GCAccessor.h	/^class GCAccessor : public IAccessor$/;"	c	namespace:arm_compute::test
GCAccessor	tests/GLES_COMPUTE/GCAccessor.h	/^inline GCAccessor::GCAccessor(GCTensor &tensor)$/;"	f	class:arm_compute::test::GCAccessor
GCActivationLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCActivationLayer.h	/^class GCActivationLayer : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCActivationLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.h	/^class GCActivationLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCActivationLayerKernel	src/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.cpp	/^GCActivationLayerKernel::GCActivationLayerKernel()$/;"	f	class:GCActivationLayerKernel
GCArithmeticAddition	arm_compute/runtime/GLES_COMPUTE/functions/GCArithmeticAddition.h	/^class GCArithmeticAddition : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCArithmeticAdditionKernel	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	/^class GCArithmeticAdditionKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCArithmeticAdditionKernel	src/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.cpp	/^GCArithmeticAdditionKernel::GCArithmeticAdditionKernel()$/;"	f	class:GCArithmeticAdditionKernel
GCBatchNormalizationLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.h	/^class GCBatchNormalizationLayer : public IFunction$/;"	c	namespace:arm_compute
GCBatchNormalizationLayer	src/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.cpp	/^GCBatchNormalizationLayer::GCBatchNormalizationLayer()$/;"	f	class:GCBatchNormalizationLayer
GCBatchNormalizationLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^class GCBatchNormalizationLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCBatchNormalizationLayerKernel	src/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.cpp	/^GCBatchNormalizationLayerKernel::GCBatchNormalizationLayerKernel()$/;"	f	class:GCBatchNormalizationLayerKernel
GCCSO_SHADER_BINARY_FJ	include/linux/GLES2/gl2ext.h	641;"	d
GCCol2ImKernel	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	/^class GCCol2ImKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCCol2ImKernel	src/core/GLES_COMPUTE/kernels/GCCol2ImKernel.cpp	/^GCCol2ImKernel::GCCol2ImKernel()$/;"	f	class:GCCol2ImKernel
GCConvolutionLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^class GCConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
GCConvolutionLayer	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^GCConvolutionLayer::GCConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:GCConvolutionLayer
GCConvolutionLayerReshapeWeights	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^class GCConvolutionLayerReshapeWeights : public IFunction$/;"	c	namespace:arm_compute
GCConvolutionLayerReshapeWeights	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^GCConvolutionLayerReshapeWeights::GCConvolutionLayerReshapeWeights()$/;"	f	class:GCConvolutionLayerReshapeWeights
GCDCExample	examples/gc_dc.cpp	/^class GCDCExample : public Example$/;"	c	file:
GCDepthConcatenateLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	/^class GCDepthConcatenateLayer : public IFunction$/;"	c	namespace:arm_compute
GCDepthConcatenateLayer	src/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.cpp	/^GCDepthConcatenateLayer::GCDepthConcatenateLayer() \/\/NOLINT$/;"	f	class:GCDepthConcatenateLayer
GCDepthConcatenateLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^class GCDepthConcatenateLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCDepthConcatenateLayerKernel	src/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.cpp	/^GCDepthConcatenateLayerKernel::GCDepthConcatenateLayerKernel()$/;"	f	class:GCDepthConcatenateLayerKernel
GCDepthwiseConvolutionLayer3x3	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	/^class GCDepthwiseConvolutionLayer3x3 : public IFunction$/;"	c	namespace:arm_compute
GCDepthwiseConvolutionLayer3x3	src/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.cpp	/^GCDepthwiseConvolutionLayer3x3::GCDepthwiseConvolutionLayer3x3()$/;"	f	class:GCDepthwiseConvolutionLayer3x3
GCDepthwiseConvolutionLayer3x3Kernel	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^class GCDepthwiseConvolutionLayer3x3Kernel : public IGCKernel$/;"	c	namespace:arm_compute
GCDepthwiseConvolutionLayer3x3Kernel	src/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.cpp	/^GCDepthwiseConvolutionLayer3x3Kernel::GCDepthwiseConvolutionLayer3x3Kernel()$/;"	f	class:GCDepthwiseConvolutionLayer3x3Kernel
GCDeviceBackend	src/graph/backends/GLES/GCDeviceBackend.cpp	/^GCDeviceBackend::GCDeviceBackend()$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
GCDirectConvolutionLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	/^class GCDirectConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
GCDirectConvolutionLayer	src/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.cpp	/^GCDirectConvolutionLayer::GCDirectConvolutionLayer()$/;"	f	class:GCDirectConvolutionLayer
GCDirectConvolutionLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^class GCDirectConvolutionLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCDirectConvolutionLayerKernel	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^GCDirectConvolutionLayerKernel<kernel_size>::GCDirectConvolutionLayerKernel()$/;"	f	class:GCDirectConvolutionLayerKernel
GCDirectConvolutionLayerKernel	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^template class arm_compute::GCDirectConvolutionLayerKernel<1>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
GCDirectConvolutionLayerKernel	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^template class arm_compute::GCDirectConvolutionLayerKernel<3>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
GCDirectConvolutionLayerKernel	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^template class arm_compute::GCDirectConvolutionLayerKernel<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
GCDropoutLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCDropoutLayer.h	/^class GCDropoutLayer : public IFunction$/;"	c	namespace:arm_compute
GCDropoutLayer	src/runtime/GLES_COMPUTE/functions/GCDropoutLayer.cpp	/^GCDropoutLayer::GCDropoutLayer()$/;"	f	class:GCDropoutLayer
GCDropoutLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^class GCDropoutLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCDropoutLayerKernel	src/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.cpp	/^GCDropoutLayerKernel::GCDropoutLayerKernel()$/;"	f	class:GCDropoutLayerKernel
GCFillBorder	arm_compute/runtime/GLES_COMPUTE/functions/GCFillBorder.h	/^class GCFillBorder : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCFillBorderKernel	arm_compute/core/GLES_COMPUTE/kernels/GCFillBorderKernel.h	/^class GCFillBorderKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCFillBorderKernel	src/core/GLES_COMPUTE/kernels/GCFillBorderKernel.cpp	/^GCFillBorderKernel::GCFillBorderKernel()$/;"	f	class:GCFillBorderKernel
GCFullyConnectedLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^class GCFullyConnectedLayer : public IFunction$/;"	c	namespace:arm_compute
GCFullyConnectedLayer	src/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.cpp	/^GCFullyConnectedLayer::GCFullyConnectedLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:GCFullyConnectedLayer
GCFullyConnectedLayerReshapeWeights	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^class GCFullyConnectedLayerReshapeWeights : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCGEMM	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^class GCGEMM : public IFunction$/;"	c	namespace:arm_compute
GCGEMM	src/runtime/GLES_COMPUTE/functions/GCGEMM.cpp	/^GCGEMM::GCGEMM(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:GCGEMM
GCGEMMInterleave4x4	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMMInterleave4x4.h	/^class GCGEMMInterleave4x4 : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCGEMMInterleave4x4Kernel	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.h	/^class GCGEMMInterleave4x4Kernel : public IGCKernel$/;"	c	namespace:arm_compute
GCGEMMInterleave4x4Kernel	src/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.cpp	/^GCGEMMInterleave4x4Kernel::GCGEMMInterleave4x4Kernel()$/;"	f	class:GCGEMMInterleave4x4Kernel
GCGEMMMatrixAccumulateBiasesKernel	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	/^class GCGEMMMatrixAccumulateBiasesKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCGEMMMatrixAccumulateBiasesKernel	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.cpp	/^GCGEMMMatrixAccumulateBiasesKernel::GCGEMMMatrixAccumulateBiasesKernel()$/;"	f	class:GCGEMMMatrixAccumulateBiasesKernel
GCGEMMMatrixAdditionKernel	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.h	/^class GCGEMMMatrixAdditionKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCGEMMMatrixAdditionKernel	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.cpp	/^GCGEMMMatrixAdditionKernel::GCGEMMMatrixAdditionKernel()$/;"	f	class:GCGEMMMatrixAdditionKernel
GCGEMMMatrixMultiplyKernel	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	/^class GCGEMMMatrixMultiplyKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCGEMMMatrixMultiplyKernel	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.cpp	/^GCGEMMMatrixMultiplyKernel::GCGEMMMatrixMultiplyKernel()$/;"	f	class:GCGEMMMatrixMultiplyKernel
GCGEMMTranspose1xW	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMMTranspose1xW.h	/^class GCGEMMTranspose1xW : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCGEMMTranspose1xWKernel	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMTranspose1xWKernel.h	/^class GCGEMMTranspose1xWKernel : public IGCSimple2DKernel$/;"	c	namespace:arm_compute
GCIm2ColKernel	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^class GCIm2ColKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCIm2ColKernel	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^GCIm2ColKernel::GCIm2ColKernel()$/;"	f	class:GCIm2ColKernel
GCKernel	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^class GCKernel$/;"	c	namespace:arm_compute
GCKernel	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernel::GCKernel()$/;"	f	class:GCKernel
GCKernel	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernel::GCKernel(std::string name, GLuint program)$/;"	f	class:GCKernel
GCKernelLibrary	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^class GCKernelLibrary$/;"	c	namespace:arm_compute
GCKernelLibrary	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernelLibrary::GCKernelLibrary()$/;"	f	class:GCKernelLibrary
GCL_API_SUFFIX__VERSION_1_1	include/CL/cl_platform.h	66;"	d
GCL_API_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	72;"	d
GCL_API_SUFFIX__VERSION_1_2	include/CL/cl_platform.h	79;"	d
GCLogits1DMaxKernel	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^class GCLogits1DMaxKernel : public IGCSimple3DKernel$/;"	c	namespace:arm_compute
GCLogits1DNormKernel	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^class GCLogits1DNormKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCLogits1DNormKernel	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^GCLogits1DNormKernel::GCLogits1DNormKernel()$/;"	f	class:GCLogits1DNormKernel
GCLogits1DShiftExpSumKernel	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^class GCLogits1DShiftExpSumKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCLogits1DShiftExpSumKernel	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^GCLogits1DShiftExpSumKernel::GCLogits1DShiftExpSumKernel()$/;"	f	class:GCLogits1DShiftExpSumKernel
GCNormalizationLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^class GCNormalizationLayer : public IFunction$/;"	c	namespace:arm_compute
GCNormalizationLayer	src/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.cpp	/^GCNormalizationLayer::GCNormalizationLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:GCNormalizationLayer
GCNormalizationLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^class GCNormalizationLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCNormalizationLayerKernel	src/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.cpp	/^GCNormalizationLayerKernel::GCNormalizationLayerKernel()$/;"	f	class:GCNormalizationLayerKernel
GCNormalizePlanarYUVLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.h	/^class GCNormalizePlanarYUVLayer : public IFunction$/;"	c	namespace:arm_compute
GCNormalizePlanarYUVLayer	src/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.cpp	/^GCNormalizePlanarYUVLayer::GCNormalizePlanarYUVLayer()$/;"	f	class:GCNormalizePlanarYUVLayer
GCNormalizePlanarYUVLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^class GCNormalizePlanarYUVLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCNormalizePlanarYUVLayerKernel	src/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.cpp	/^GCNormalizePlanarYUVLayerKernel::GCNormalizePlanarYUVLayerKernel()$/;"	f	class:GCNormalizePlanarYUVLayerKernel
GCPixelWiseMultiplication	arm_compute/runtime/GLES_COMPUTE/functions/GCPixelWiseMultiplication.h	/^class GCPixelWiseMultiplication : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCPixelWiseMultiplicationKernel	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	/^class GCPixelWiseMultiplicationKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCPixelWiseMultiplicationKernel	src/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.cpp	/^GCPixelWiseMultiplicationKernel::GCPixelWiseMultiplicationKernel()$/;"	f	class:GCPixelWiseMultiplicationKernel
GCPoolingLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	/^class GCPoolingLayer : public IFunction$/;"	c	namespace:arm_compute
GCPoolingLayer	src/runtime/GLES_COMPUTE/functions/GCPoolingLayer.cpp	/^GCPoolingLayer::GCPoolingLayer()$/;"	f	class:GCPoolingLayer
GCPoolingLayerKernel	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^class GCPoolingLayerKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCPoolingLayerKernel	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^GCPoolingLayerKernel::GCPoolingLayerKernel()$/;"	f	class:GCPoolingLayerKernel
GCProgram	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^class GCProgram$/;"	c	namespace:arm_compute
GCProgram	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCProgram::GCProgram()$/;"	f	class:GCProgram
GCProgram	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCProgram::GCProgram(std::string name, std::string source)$/;"	f	class:GCProgram
GCScale	arm_compute/runtime/GLES_COMPUTE/functions/GCScale.h	/^class GCScale : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCScaleKernel	arm_compute/core/GLES_COMPUTE/kernels/GCScaleKernel.h	/^class GCScaleKernel : public IGCSimple3DKernel$/;"	c	namespace:arm_compute
GCScheduler	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^class GCScheduler$/;"	c	namespace:arm_compute
GCScheduler	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^GCScheduler::GCScheduler()$/;"	f	class:GCScheduler
GCSoftmaxLayer	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^class GCSoftmaxLayer : public IFunction$/;"	c	namespace:arm_compute
GCSoftmaxLayer	src/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.cpp	/^GCSoftmaxLayer::GCSoftmaxLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:GCSoftmaxLayer
GCTensor	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^class GCTensor : public IGCTensor$/;"	c	namespace:arm_compute
GCTensor	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^GCTensor::GCTensor()$/;"	f	class:GCTensor
GCTensorAllocator	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^class GCTensorAllocator : public ITensorAllocator$/;"	c	namespace:arm_compute
GCTensorAllocator	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^GCTensorAllocator::GCTensorAllocator(GCTensor *owner)$/;"	f	class:GCTensorAllocator
GCTensorHandle	src/graph/backends/GLES/GCTensorHandle.cpp	/^GCTensorHandle::GCTensorHandle(const ITensorInfo &info)$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
GCTensorShift	arm_compute/runtime/GLES_COMPUTE/functions/GCTensorShift.h	/^class GCTensorShift : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCTensorShiftKernel	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	/^class GCTensorShiftKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCTensorShiftKernel	src/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.cpp	/^GCTensorShiftKernel::GCTensorShiftKernel()$/;"	f	class:GCTensorShiftKernel
GCTranspose	arm_compute/runtime/GLES_COMPUTE/functions/GCTranspose.h	/^class GCTranspose : public IGCSimpleFunction$/;"	c	namespace:arm_compute
GCTransposeKernel	arm_compute/core/GLES_COMPUTE/kernels/GCTransposeKernel.h	/^class GCTransposeKernel : public IGCSimple2DKernel$/;"	c	namespace:arm_compute
GCWeightsReshapeKernel	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	/^class GCWeightsReshapeKernel : public IGCKernel$/;"	c	namespace:arm_compute
GCWeightsReshapeKernel	src/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.cpp	/^GCWeightsReshapeKernel::GCWeightsReshapeKernel()$/;"	f	class:GCWeightsReshapeKernel
GEMM	arm_compute/core/Types.h	/^    GEMM,    \/**< Convolution using GEMM *\/$/;"	m	class:arm_compute::HOGNormType::ConvolutionMethod
GEMM	arm_compute/graph/Types.h	/^    GEMM,    \/**< GEMM based convolution *\/$/;"	m	class:arm_compute::graph::ConvolutionMethod
GEMMDataset	tests/datasets/GEMMDataset.h	/^class GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
GEMMFixture	tests/benchmark/fixtures/GEMMFixture.h	/^class GEMMFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
GEMMInfo	arm_compute/core/Types.h	/^    GEMMInfo()$/;"	f	class:arm_compute::HOGNormType::GEMMInfo
GEMMInfo	arm_compute/core/Types.h	/^    GEMMInfo(bool is_a_reshaped, bool is_b_reshaped, bool reshape_b_only_on_first_run, const GEMMReshapeInfo &reshape_info = GEMMReshapeInfo())$/;"	f	class:arm_compute::HOGNormType::GEMMInfo
GEMMInfo	arm_compute/core/Types.h	/^class GEMMInfo$/;"	c	class:arm_compute::HOGNormType
GEMMInterleave4x4Fixture	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^class GEMMInterleave4x4Fixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
GEMMInterleave4x4ValidationFixedPointFixture	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^class GEMMInterleave4x4ValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMInterleave4x4ValidationFixture	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^class GEMMInterleave4x4ValidationFixture : public GEMMInterleave4x4ValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
GEMMLowpAssemblyFixture	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^class GEMMLowpAssemblyFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMLowpDataset	tests/datasets/GEMMLowpDataset.h	/^class GEMMLowpDataset$/;"	c	namespace:arm_compute::test::datasets
GEMMLowpMatrixMultiplyCoreFixture	tests/benchmark/fixtures/GEMMLowpFixture.h	/^class GEMMLowpMatrixMultiplyCoreFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
GEMMLowpMatrixMultiplyCoreValidationFixture	tests/validation/fixtures/GEMMLowpFixture.h	/^class GEMMLowpMatrixMultiplyCoreValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointValidationFixture	tests/validation/fixtures/GEMMLowpFixture.h	/^class GEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMLowpQuantizeDownInt32ToUint8ScaleValidationFixture	tests/validation/fixtures/GEMMLowpFixture.h	/^class GEMMLowpQuantizeDownInt32ToUint8ScaleValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMReshapeInfo	arm_compute/core/Types.h	/^    GEMMReshapeInfo()$/;"	f	class:arm_compute::HOGNormType::final
GEMMReshapeInfo	arm_compute/core/Types.h	/^    GEMMReshapeInfo(int m, int n, int k, int mult_transpose1xW_width = 1, int mult_interleave4x4_height = 1)$/;"	f	class:arm_compute::HOGNormType::final
GEMMTranspose1xWValidationFixedPointFixture	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^class GEMMTranspose1xWValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMTranspose1xWValidationFixture	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^class GEMMTranspose1xWValidationFixture : public GEMMTranspose1xWValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
GEMMValidationFixedPointFixture	tests/validation/fixtures/GEMMFixture.h	/^class GEMMValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GEMMValidationFixture	tests/validation/fixtures/GEMMFixture.h	/^class GEMMValidationFixture : public GEMMValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
GEMV	arm_compute/graph/Types.h	/^    GEMV,          \/**< Generic GEMV based depthwise convolution *\/$/;"	m	class:arm_compute::graph::DepthwiseConvolutionMethod
GENERIC	arm_compute/core/CPP/CPPTypes.h	/^    GENERIC,$/;"	m	class:arm_compute::CPUModel
GLBufferWrapper	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    GLBufferWrapper()$/;"	f	class:arm_compute::GLBufferWrapper
GLBufferWrapper	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^class GLBufferWrapper$/;"	c	namespace:arm_compute
GLDEBUGPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);$/;"	t
GLESSymbols	src/core/GLES_COMPUTE/OpenGLES.cpp	/^class GLESSymbols$/;"	c	file:
GL_3DC_XY_AMD	include/linux/GLES/glext.h	232;"	d
GL_3DC_XY_AMD	include/linux/GLES2/gl2ext.h	267;"	d
GL_3DC_X_AMD	include/linux/GLES/glext.h	231;"	d
GL_3DC_X_AMD	include/linux/GLES2/gl2ext.h	266;"	d
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS	include/linux/GLES3/gl31.h	1013;"	d
GL_ACTIVE_ATTRIBUTES	include/linux/GLES2/gl2.h	275;"	d
GL_ACTIVE_ATTRIBUTES	include/linux/GLES3/gl3.h	299;"	d
GL_ACTIVE_ATTRIBUTES	include/linux/GLES3/gl31.h	232;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	include/linux/GLES2/gl2.h	276;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	include/linux/GLES3/gl3.h	300;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	include/linux/GLES3/gl31.h	233;"	d
GL_ACTIVE_PROGRAM	include/linux/GLES3/gl31.h	1000;"	d
GL_ACTIVE_PROGRAM_EXT	include/linux/GLES2/gl2ext.h	534;"	d
GL_ACTIVE_RESOURCES	include/linux/GLES3/gl31.h	974;"	d
GL_ACTIVE_TEXTURE	include/linux/GLES/gl.h	481;"	d
GL_ACTIVE_TEXTURE	include/linux/GLES2/gl2.h	371;"	d
GL_ACTIVE_TEXTURE	include/linux/GLES3/gl3.h	395;"	d
GL_ACTIVE_TEXTURE	include/linux/GLES3/gl31.h	307;"	d
GL_ACTIVE_UNIFORMS	include/linux/GLES2/gl2.h	273;"	d
GL_ACTIVE_UNIFORMS	include/linux/GLES3/gl3.h	297;"	d
GL_ACTIVE_UNIFORMS	include/linux/GLES3/gl31.h	230;"	d
GL_ACTIVE_UNIFORM_BLOCKS	include/linux/GLES3/gl3.h	732;"	d
GL_ACTIVE_UNIFORM_BLOCKS	include/linux/GLES3/gl31.h	764;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	include/linux/GLES3/gl3.h	731;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	include/linux/GLES3/gl31.h	763;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	include/linux/GLES2/gl2.h	274;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	include/linux/GLES3/gl3.h	298;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	include/linux/GLES3/gl31.h	231;"	d
GL_ACTIVE_VARIABLES	include/linux/GLES3/gl31.h	989;"	d
GL_ADD	include/linux/GLES/gl.h	416;"	d
GL_ADD_BLEND_IMG	include/linux/GLES/glext.h	448;"	d
GL_ADD_SIGNED	include/linux/GLES/gl.h	527;"	d
GL_ALIASED_LINE_WIDTH_RANGE	include/linux/GLES/gl.h	202;"	d
GL_ALIASED_LINE_WIDTH_RANGE	include/linux/GLES2/gl2.h	170;"	d
GL_ALIASED_LINE_WIDTH_RANGE	include/linux/GLES3/gl3.h	194;"	d
GL_ALIASED_LINE_WIDTH_RANGE	include/linux/GLES3/gl31.h	149;"	d
GL_ALIASED_POINT_SIZE_RANGE	include/linux/GLES/gl.h	201;"	d
GL_ALIASED_POINT_SIZE_RANGE	include/linux/GLES2/gl2.h	169;"	d
GL_ALIASED_POINT_SIZE_RANGE	include/linux/GLES3/gl3.h	193;"	d
GL_ALIASED_POINT_SIZE_RANGE	include/linux/GLES3/gl31.h	148;"	d
GL_ALL_BARRIER_BITS	include/linux/GLES3/gl31.h	1037;"	d
GL_ALL_COMPLETED_NV	include/linux/GLES/glext.h	477;"	d
GL_ALL_COMPLETED_NV	include/linux/GLES2/gl2ext.h	747;"	d
GL_ALL_SHADER_BITS	include/linux/GLES3/gl31.h	998;"	d
GL_ALL_SHADER_BITS_EXT	include/linux/GLES2/gl2ext.h	532;"	d
GL_ALPHA	include/linux/GLES/gl.h	362;"	d
GL_ALPHA	include/linux/GLES2/gl2.h	246;"	d
GL_ALPHA	include/linux/GLES3/gl3.h	270;"	d
GL_ALPHA	include/linux/GLES3/gl31.h	208;"	d
GL_ALPHA16F_EXT	include/linux/GLES/glext.h	415;"	d
GL_ALPHA16F_EXT	include/linux/GLES2/gl2ext.h	600;"	d
GL_ALPHA32F_EXT	include/linux/GLES/glext.h	410;"	d
GL_ALPHA32F_EXT	include/linux/GLES2/gl2ext.h	595;"	d
GL_ALPHA8_EXT	include/linux/GLES/glext.h	405;"	d
GL_ALPHA8_EXT	include/linux/GLES2/gl2ext.h	590;"	d
GL_ALPHA8_OES	include/linux/GLES2/gl2ext.h	98;"	d
GL_ALPHA_BITS	include/linux/GLES/gl.h	249;"	d
GL_ALPHA_BITS	include/linux/GLES2/gl2.h	205;"	d
GL_ALPHA_BITS	include/linux/GLES3/gl3.h	229;"	d
GL_ALPHA_BITS	include/linux/GLES3/gl31.h	183;"	d
GL_ALPHA_SCALE	include/linux/GLES/gl.h	539;"	d
GL_ALPHA_TEST	include/linux/GLES/gl.h	134;"	d
GL_ALPHA_TEST_FUNC	include/linux/GLES/gl.h	226;"	d
GL_ALPHA_TEST_FUNC_QCOM	include/linux/GLES2/gl2ext.h	782;"	d
GL_ALPHA_TEST_QCOM	include/linux/GLES2/gl2ext.h	781;"	d
GL_ALPHA_TEST_REF	include/linux/GLES/gl.h	227;"	d
GL_ALPHA_TEST_REF_QCOM	include/linux/GLES2/gl2ext.h	783;"	d
GL_ALREADY_SIGNALED	include/linux/GLES3/gl3.h	760;"	d
GL_ALREADY_SIGNALED	include/linux/GLES3/gl31.h	792;"	d
GL_ALREADY_SIGNALED_APPLE	include/linux/GLES/glext.h	284;"	d
GL_ALREADY_SIGNALED_APPLE	include/linux/GLES2/gl2ext.h	394;"	d
GL_ALWAYS	include/linux/GLES/gl.h	72;"	d
GL_ALWAYS	include/linux/GLES2/gl2.h	288;"	d
GL_ALWAYS	include/linux/GLES3/gl3.h	312;"	d
GL_ALWAYS	include/linux/GLES3/gl31.h	243;"	d
GL_AMBIENT	include/linux/GLES/gl.h	302;"	d
GL_AMBIENT_AND_DIFFUSE	include/linux/GLES/gl.h	345;"	d
GL_AMD_compressed_3DC_texture	include/linux/GLES/glext.h	937;"	d
GL_AMD_compressed_3DC_texture	include/linux/GLES2/gl2ext.h	1105;"	d
GL_AMD_compressed_ATC_texture	include/linux/GLES/glext.h	942;"	d
GL_AMD_compressed_ATC_texture	include/linux/GLES2/gl2ext.h	1110;"	d
GL_AMD_performance_monitor	include/linux/GLES2/gl2ext.h	1115;"	d
GL_AMD_program_binary_Z400	include/linux/GLES2/gl2ext.h	1144;"	d
GL_AND	include/linux/GLES/gl.h	323;"	d
GL_AND_INVERTED	include/linux/GLES/gl.h	326;"	d
GL_AND_REVERSE	include/linux/GLES/gl.h	324;"	d
GL_ANGLE_framebuffer_blit	include/linux/GLES2/gl2ext.h	1153;"	d
GL_ANGLE_framebuffer_multisample	include/linux/GLES2/gl2ext.h	1162;"	d
GL_ANGLE_instanced_arrays	include/linux/GLES2/gl2ext.h	1170;"	d
GL_ANGLE_pack_reverse_row_order	include/linux/GLES2/gl2ext.h	1183;"	d
GL_ANGLE_texture_compression_dxt3	include/linux/GLES2/gl2ext.h	1188;"	d
GL_ANGLE_texture_compression_dxt5	include/linux/GLES2/gl2ext.h	1193;"	d
GL_ANGLE_texture_usage	include/linux/GLES2/gl2ext.h	1198;"	d
GL_ANGLE_translated_shader_source	include/linux/GLES2/gl2ext.h	1202;"	d
GL_ANY_SAMPLES_PASSED	include/linux/GLES3/gl3.h	767;"	d
GL_ANY_SAMPLES_PASSED	include/linux/GLES3/gl31.h	799;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE	include/linux/GLES3/gl3.h	768;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE	include/linux/GLES3/gl31.h	800;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT	include/linux/GLES2/gl2ext.h	503;"	d
GL_ANY_SAMPLES_PASSED_EXT	include/linux/GLES2/gl2ext.h	502;"	d
GL_API	include/linux/GLES/glplatform.h	23;"	d
GL_APICALL	include/linux/GLES2/gl2platform.h	23;"	d
GL_APICALL	include/linux/GLES3/gl3platform.h	23;"	d
GL_APIENTRY	include/linux/GLES/glplatform.h	27;"	d
GL_APIENTRY	include/linux/GLES2/gl2platform.h	27;"	d
GL_APIENTRY	include/linux/GLES3/gl3platform.h	27;"	d
GL_APIENTRYP	include/linux/GLES/glext.h	16;"	d
GL_APIENTRYP	include/linux/GLES2/gl2ext.h	16;"	d
GL_APIENTRYP	include/linux/GLES3/gl31.h	41;"	d
GL_APPLE_copy_texture_levels	include/linux/GLES/glext.h	951;"	d
GL_APPLE_copy_texture_levels	include/linux/GLES2/gl2ext.h	1215;"	d
GL_APPLE_framebuffer_multisample	include/linux/GLES/glext.h	960;"	d
GL_APPLE_framebuffer_multisample	include/linux/GLES2/gl2ext.h	1224;"	d
GL_APPLE_rgb_422	include/linux/GLES2/gl2ext.h	1235;"	d
GL_APPLE_sync	include/linux/GLES/glext.h	971;"	d
GL_APPLE_sync	include/linux/GLES2/gl2ext.h	1240;"	d
GL_APPLE_texture_2D_limited_npot	include/linux/GLES/glext.h	992;"	d
GL_APPLE_texture_format_BGRA8888	include/linux/GLES/glext.h	997;"	d
GL_APPLE_texture_format_BGRA8888	include/linux/GLES2/gl2ext.h	1261;"	d
GL_APPLE_texture_max_level	include/linux/GLES/glext.h	1002;"	d
GL_APPLE_texture_max_level	include/linux/GLES2/gl2ext.h	1266;"	d
GL_ARM_mali_program_binary	include/linux/GLES2/gl2ext.h	1275;"	d
GL_ARM_mali_shader_binary	include/linux/GLES2/gl2ext.h	1280;"	d
GL_ARM_rgba8	include/linux/GLES/glext.h	1011;"	d
GL_ARM_rgba8	include/linux/GLES2/gl2ext.h	1285;"	d
GL_ARRAY_BUFFER	include/linux/GLES/gl.h	505;"	d
GL_ARRAY_BUFFER	include/linux/GLES2/gl2.h	115;"	d
GL_ARRAY_BUFFER	include/linux/GLES3/gl3.h	139;"	d
GL_ARRAY_BUFFER	include/linux/GLES3/gl31.h	117;"	d
GL_ARRAY_BUFFER_BINDING	include/linux/GLES/gl.h	508;"	d
GL_ARRAY_BUFFER_BINDING	include/linux/GLES2/gl2.h	117;"	d
GL_ARRAY_BUFFER_BINDING	include/linux/GLES3/gl3.h	141;"	d
GL_ARRAY_BUFFER_BINDING	include/linux/GLES3/gl31.h	119;"	d
GL_ARRAY_SIZE	include/linux/GLES3/gl31.h	979;"	d
GL_ARRAY_STRIDE	include/linux/GLES3/gl31.h	982;"	d
GL_ATC_RGBA_EXPLICIT_ALPHA_AMD	include/linux/GLES/glext.h	238;"	d
GL_ATC_RGBA_EXPLICIT_ALPHA_AMD	include/linux/GLES2/gl2ext.h	273;"	d
GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD	include/linux/GLES/glext.h	239;"	d
GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD	include/linux/GLES2/gl2ext.h	274;"	d
GL_ATC_RGB_AMD	include/linux/GLES/glext.h	237;"	d
GL_ATC_RGB_AMD	include/linux/GLES2/gl2ext.h	272;"	d
GL_ATOMIC_COUNTER_BARRIER_BIT	include/linux/GLES3/gl31.h	1036;"	d
GL_ATOMIC_COUNTER_BUFFER	include/linux/GLES3/gl31.h	972;"	d
GL_ATOMIC_COUNTER_BUFFER_BINDING	include/linux/GLES3/gl31.h	1002;"	d
GL_ATOMIC_COUNTER_BUFFER_INDEX	include/linux/GLES3/gl31.h	985;"	d
GL_ATOMIC_COUNTER_BUFFER_SIZE	include/linux/GLES3/gl31.h	1004;"	d
GL_ATOMIC_COUNTER_BUFFER_START	include/linux/GLES3/gl31.h	1003;"	d
GL_ATTACHED_SHADERS	include/linux/GLES2/gl2.h	272;"	d
GL_ATTACHED_SHADERS	include/linux/GLES3/gl3.h	296;"	d
GL_ATTACHED_SHADERS	include/linux/GLES3/gl31.h	229;"	d
GL_BACK	include/linux/GLES/gl.h	116;"	d
GL_BACK	include/linux/GLES2/gl2.h	131;"	d
GL_BACK	include/linux/GLES3/gl3.h	155;"	d
GL_BACK	include/linux/GLES3/gl31.h	128;"	d
GL_BGRA8_EXT	include/linux/GLES/glext.h	420;"	d
GL_BGRA8_EXT	include/linux/GLES2/gl2ext.h	605;"	d
GL_BGRA_EXT	include/linux/GLES/glext.h	297;"	d
GL_BGRA_EXT	include/linux/GLES/glext.h	353;"	d
GL_BGRA_EXT	include/linux/GLES/glext.h	392;"	d
GL_BGRA_EXT	include/linux/GLES2/gl2ext.h	404;"	d
GL_BGRA_EXT	include/linux/GLES2/gl2ext.h	511;"	d
GL_BGRA_EXT	include/linux/GLES2/gl2ext.h	576;"	d
GL_BGRA_IMG	include/linux/GLES/glext.h	429;"	d
GL_BGRA_IMG	include/linux/GLES2/gl2ext.h	655;"	d
GL_BINNING_CONTROL_HINT_QCOM	include/linux/GLES2/gl2ext.h	788;"	d
GL_BLEND	include/linux/GLES/gl.h	135;"	d
GL_BLEND	include/linux/GLES2/gl2.h	147;"	d
GL_BLEND	include/linux/GLES3/gl3.h	171;"	d
GL_BLEND	include/linux/GLES3/gl31.h	132;"	d
GL_BLEND_COLOR	include/linux/GLES2/gl2.h	112;"	d
GL_BLEND_COLOR	include/linux/GLES3/gl3.h	136;"	d
GL_BLEND_COLOR	include/linux/GLES3/gl31.h	116;"	d
GL_BLEND_DST	include/linux/GLES/gl.h	228;"	d
GL_BLEND_DST_ALPHA	include/linux/GLES2/gl2.h	106;"	d
GL_BLEND_DST_ALPHA	include/linux/GLES3/gl3.h	130;"	d
GL_BLEND_DST_ALPHA	include/linux/GLES3/gl31.h	110;"	d
GL_BLEND_DST_ALPHA_OES	include/linux/GLES/glext.h	34;"	d
GL_BLEND_DST_RGB	include/linux/GLES2/gl2.h	104;"	d
GL_BLEND_DST_RGB	include/linux/GLES3/gl3.h	128;"	d
GL_BLEND_DST_RGB	include/linux/GLES3/gl31.h	108;"	d
GL_BLEND_DST_RGB_OES	include/linux/GLES/glext.h	32;"	d
GL_BLEND_EQUATION	include/linux/GLES2/gl2.h	95;"	d
GL_BLEND_EQUATION	include/linux/GLES3/gl3.h	119;"	d
GL_BLEND_EQUATION	include/linux/GLES3/gl31.h	103;"	d
GL_BLEND_EQUATION_ALPHA	include/linux/GLES2/gl2.h	97;"	d
GL_BLEND_EQUATION_ALPHA	include/linux/GLES3/gl3.h	121;"	d
GL_BLEND_EQUATION_ALPHA	include/linux/GLES3/gl31.h	105;"	d
GL_BLEND_EQUATION_ALPHA_OES	include/linux/GLES/glext.h	27;"	d
GL_BLEND_EQUATION_OES	include/linux/GLES/glext.h	40;"	d
GL_BLEND_EQUATION_RGB	include/linux/GLES2/gl2.h	96;"	d
GL_BLEND_EQUATION_RGB	include/linux/GLES3/gl3.h	120;"	d
GL_BLEND_EQUATION_RGB	include/linux/GLES3/gl31.h	104;"	d
GL_BLEND_EQUATION_RGB_OES	include/linux/GLES/glext.h	26;"	d
GL_BLEND_SRC	include/linux/GLES/gl.h	229;"	d
GL_BLEND_SRC_ALPHA	include/linux/GLES2/gl2.h	107;"	d
GL_BLEND_SRC_ALPHA	include/linux/GLES3/gl3.h	131;"	d
GL_BLEND_SRC_ALPHA	include/linux/GLES3/gl31.h	111;"	d
GL_BLEND_SRC_ALPHA_OES	include/linux/GLES/glext.h	35;"	d
GL_BLEND_SRC_RGB	include/linux/GLES2/gl2.h	105;"	d
GL_BLEND_SRC_RGB	include/linux/GLES3/gl3.h	129;"	d
GL_BLEND_SRC_RGB	include/linux/GLES3/gl31.h	109;"	d
GL_BLEND_SRC_RGB_OES	include/linux/GLES/glext.h	33;"	d
GL_BLOCK_INDEX	include/linux/GLES3/gl31.h	981;"	d
GL_BLUE	include/linux/GLES3/gl3.h	776;"	d
GL_BLUE	include/linux/GLES3/gl31.h	808;"	d
GL_BLUE_BITS	include/linux/GLES/gl.h	248;"	d
GL_BLUE_BITS	include/linux/GLES2/gl2.h	204;"	d
GL_BLUE_BITS	include/linux/GLES3/gl3.h	228;"	d
GL_BLUE_BITS	include/linux/GLES3/gl31.h	182;"	d
GL_BOOL	include/linux/GLES2/gl2.h	385;"	d
GL_BOOL	include/linux/GLES3/gl3.h	409;"	d
GL_BOOL	include/linux/GLES3/gl31.h	317;"	d
GL_BOOL_VEC2	include/linux/GLES2/gl2.h	386;"	d
GL_BOOL_VEC2	include/linux/GLES3/gl3.h	410;"	d
GL_BOOL_VEC2	include/linux/GLES3/gl31.h	318;"	d
GL_BOOL_VEC3	include/linux/GLES2/gl2.h	387;"	d
GL_BOOL_VEC3	include/linux/GLES3/gl3.h	411;"	d
GL_BOOL_VEC3	include/linux/GLES3/gl31.h	319;"	d
GL_BOOL_VEC4	include/linux/GLES2/gl2.h	388;"	d
GL_BOOL_VEC4	include/linux/GLES3/gl3.h	412;"	d
GL_BOOL_VEC4	include/linux/GLES3/gl31.h	320;"	d
GL_BUFFER	include/linux/GLES2/gl2ext.h	209;"	d
GL_BUFFER_ACCESS_FLAGS	include/linux/GLES3/gl3.h	636;"	d
GL_BUFFER_ACCESS_FLAGS	include/linux/GLES3/gl31.h	668;"	d
GL_BUFFER_ACCESS_OES	include/linux/GLES/glext.h	129;"	d
GL_BUFFER_ACCESS_OES	include/linux/GLES2/gl2ext.h	84;"	d
GL_BUFFER_BINDING	include/linux/GLES3/gl31.h	986;"	d
GL_BUFFER_DATA_SIZE	include/linux/GLES3/gl31.h	987;"	d
GL_BUFFER_MAPPED	include/linux/GLES3/gl3.h	531;"	d
GL_BUFFER_MAPPED	include/linux/GLES3/gl31.h	563;"	d
GL_BUFFER_MAPPED_OES	include/linux/GLES/glext.h	130;"	d
GL_BUFFER_MAPPED_OES	include/linux/GLES2/gl2ext.h	85;"	d
GL_BUFFER_MAP_LENGTH	include/linux/GLES3/gl3.h	637;"	d
GL_BUFFER_MAP_LENGTH	include/linux/GLES3/gl31.h	669;"	d
GL_BUFFER_MAP_OFFSET	include/linux/GLES3/gl3.h	638;"	d
GL_BUFFER_MAP_OFFSET	include/linux/GLES3/gl31.h	670;"	d
GL_BUFFER_MAP_POINTER	include/linux/GLES3/gl3.h	532;"	d
GL_BUFFER_MAP_POINTER	include/linux/GLES3/gl31.h	564;"	d
GL_BUFFER_MAP_POINTER_OES	include/linux/GLES/glext.h	131;"	d
GL_BUFFER_MAP_POINTER_OES	include/linux/GLES2/gl2ext.h	86;"	d
GL_BUFFER_OBJECT_EXT	include/linux/GLES2/gl2ext.h	454;"	d
GL_BUFFER_SIZE	include/linux/GLES/gl.h	518;"	d
GL_BUFFER_SIZE	include/linux/GLES2/gl2.h	124;"	d
GL_BUFFER_SIZE	include/linux/GLES3/gl3.h	148;"	d
GL_BUFFER_SIZE	include/linux/GLES3/gl31.h	124;"	d
GL_BUFFER_UPDATE_BARRIER_BIT	include/linux/GLES3/gl31.h	1033;"	d
GL_BUFFER_USAGE	include/linux/GLES/gl.h	519;"	d
GL_BUFFER_USAGE	include/linux/GLES2/gl2.h	125;"	d
GL_BUFFER_USAGE	include/linux/GLES3/gl3.h	149;"	d
GL_BUFFER_USAGE	include/linux/GLES3/gl31.h	125;"	d
GL_BUFFER_VARIABLE	include/linux/GLES3/gl31.h	970;"	d
GL_BYTE	include/linux/GLES/gl.h	314;"	d
GL_BYTE	include/linux/GLES2/gl2.h	235;"	d
GL_BYTE	include/linux/GLES3/gl3.h	259;"	d
GL_BYTE	include/linux/GLES3/gl31.h	199;"	d
GL_CCW	include/linux/GLES/gl.h	187;"	d
GL_CCW	include/linux/GLES2/gl2.h	165;"	d
GL_CCW	include/linux/GLES3/gl3.h	189;"	d
GL_CCW	include/linux/GLES3/gl31.h	146;"	d
GL_CLAMP_TO_EDGE	include/linux/GLES/gl.h	486;"	d
GL_CLAMP_TO_EDGE	include/linux/GLES2/gl2.h	375;"	d
GL_CLAMP_TO_EDGE	include/linux/GLES3/gl3.h	399;"	d
GL_CLAMP_TO_EDGE	include/linux/GLES3/gl31.h	309;"	d
GL_CLEAR	include/linux/GLES/gl.h	322;"	d
GL_CLIENT_ACTIVE_TEXTURE	include/linux/GLES/gl.h	482;"	d
GL_CLIP_PLANE0	include/linux/GLES/gl.h	96;"	d
GL_CLIP_PLANE0_IMG	include/linux/GLES/glext.h	454;"	d
GL_CLIP_PLANE1	include/linux/GLES/gl.h	97;"	d
GL_CLIP_PLANE1_IMG	include/linux/GLES/glext.h	455;"	d
GL_CLIP_PLANE2	include/linux/GLES/gl.h	98;"	d
GL_CLIP_PLANE2_IMG	include/linux/GLES/glext.h	456;"	d
GL_CLIP_PLANE3	include/linux/GLES/gl.h	99;"	d
GL_CLIP_PLANE3_IMG	include/linux/GLES/glext.h	457;"	d
GL_CLIP_PLANE4	include/linux/GLES/gl.h	100;"	d
GL_CLIP_PLANE4_IMG	include/linux/GLES/glext.h	458;"	d
GL_CLIP_PLANE5	include/linux/GLES/gl.h	101;"	d
GL_CLIP_PLANE5_IMG	include/linux/GLES/glext.h	459;"	d
GL_COLOR	include/linux/GLES3/gl3.h	502;"	d
GL_COLOR	include/linux/GLES3/gl31.h	534;"	d
GL_COLOR_ARRAY	include/linux/GLES/gl.h	157;"	d
GL_COLOR_ARRAY_BUFFER_BINDING	include/linux/GLES/gl.h	512;"	d
GL_COLOR_ARRAY_POINTER	include/linux/GLES/gl.h	269;"	d
GL_COLOR_ARRAY_SIZE	include/linux/GLES/gl.h	261;"	d
GL_COLOR_ARRAY_STRIDE	include/linux/GLES/gl.h	263;"	d
GL_COLOR_ARRAY_TYPE	include/linux/GLES/gl.h	262;"	d
GL_COLOR_ATTACHMENT0	include/linux/GLES2/gl2.h	451;"	d
GL_COLOR_ATTACHMENT0	include/linux/GLES3/gl3.h	475;"	d
GL_COLOR_ATTACHMENT0	include/linux/GLES3/gl31.h	367;"	d
GL_COLOR_ATTACHMENT0_NV	include/linux/GLES2/gl2ext.h	721;"	d
GL_COLOR_ATTACHMENT0_OES	include/linux/GLES/glext.h	111;"	d
GL_COLOR_ATTACHMENT1	include/linux/GLES3/gl3.h	664;"	d
GL_COLOR_ATTACHMENT1	include/linux/GLES3/gl31.h	696;"	d
GL_COLOR_ATTACHMENT10	include/linux/GLES3/gl3.h	673;"	d
GL_COLOR_ATTACHMENT10	include/linux/GLES3/gl31.h	705;"	d
GL_COLOR_ATTACHMENT10_NV	include/linux/GLES2/gl2ext.h	731;"	d
GL_COLOR_ATTACHMENT11	include/linux/GLES3/gl3.h	674;"	d
GL_COLOR_ATTACHMENT11	include/linux/GLES3/gl31.h	706;"	d
GL_COLOR_ATTACHMENT11_NV	include/linux/GLES2/gl2ext.h	732;"	d
GL_COLOR_ATTACHMENT12	include/linux/GLES3/gl3.h	675;"	d
GL_COLOR_ATTACHMENT12	include/linux/GLES3/gl31.h	707;"	d
GL_COLOR_ATTACHMENT12_NV	include/linux/GLES2/gl2ext.h	733;"	d
GL_COLOR_ATTACHMENT13	include/linux/GLES3/gl3.h	676;"	d
GL_COLOR_ATTACHMENT13	include/linux/GLES3/gl31.h	708;"	d
GL_COLOR_ATTACHMENT13_NV	include/linux/GLES2/gl2ext.h	734;"	d
GL_COLOR_ATTACHMENT14	include/linux/GLES3/gl3.h	677;"	d
GL_COLOR_ATTACHMENT14	include/linux/GLES3/gl31.h	709;"	d
GL_COLOR_ATTACHMENT14_NV	include/linux/GLES2/gl2ext.h	735;"	d
GL_COLOR_ATTACHMENT15	include/linux/GLES3/gl3.h	678;"	d
GL_COLOR_ATTACHMENT15	include/linux/GLES3/gl31.h	710;"	d
GL_COLOR_ATTACHMENT15_NV	include/linux/GLES2/gl2ext.h	736;"	d
GL_COLOR_ATTACHMENT1_NV	include/linux/GLES2/gl2ext.h	722;"	d
GL_COLOR_ATTACHMENT2	include/linux/GLES3/gl3.h	665;"	d
GL_COLOR_ATTACHMENT2	include/linux/GLES3/gl31.h	697;"	d
GL_COLOR_ATTACHMENT2_NV	include/linux/GLES2/gl2ext.h	723;"	d
GL_COLOR_ATTACHMENT3	include/linux/GLES3/gl3.h	666;"	d
GL_COLOR_ATTACHMENT3	include/linux/GLES3/gl31.h	698;"	d
GL_COLOR_ATTACHMENT3_NV	include/linux/GLES2/gl2ext.h	724;"	d
GL_COLOR_ATTACHMENT4	include/linux/GLES3/gl3.h	667;"	d
GL_COLOR_ATTACHMENT4	include/linux/GLES3/gl31.h	699;"	d
GL_COLOR_ATTACHMENT4_NV	include/linux/GLES2/gl2ext.h	725;"	d
GL_COLOR_ATTACHMENT5	include/linux/GLES3/gl3.h	668;"	d
GL_COLOR_ATTACHMENT5	include/linux/GLES3/gl31.h	700;"	d
GL_COLOR_ATTACHMENT5_NV	include/linux/GLES2/gl2ext.h	726;"	d
GL_COLOR_ATTACHMENT6	include/linux/GLES3/gl3.h	669;"	d
GL_COLOR_ATTACHMENT6	include/linux/GLES3/gl31.h	701;"	d
GL_COLOR_ATTACHMENT6_NV	include/linux/GLES2/gl2ext.h	727;"	d
GL_COLOR_ATTACHMENT7	include/linux/GLES3/gl3.h	670;"	d
GL_COLOR_ATTACHMENT7	include/linux/GLES3/gl31.h	702;"	d
GL_COLOR_ATTACHMENT7_NV	include/linux/GLES2/gl2ext.h	728;"	d
GL_COLOR_ATTACHMENT8	include/linux/GLES3/gl3.h	671;"	d
GL_COLOR_ATTACHMENT8	include/linux/GLES3/gl31.h	703;"	d
GL_COLOR_ATTACHMENT8_NV	include/linux/GLES2/gl2ext.h	729;"	d
GL_COLOR_ATTACHMENT9	include/linux/GLES3/gl3.h	672;"	d
GL_COLOR_ATTACHMENT9	include/linux/GLES3/gl31.h	704;"	d
GL_COLOR_ATTACHMENT9_NV	include/linux/GLES2/gl2ext.h	730;"	d
GL_COLOR_ATTACHMENT_EXT	include/linux/GLES2/gl2ext.h	490;"	d
GL_COLOR_BUFFER_BIT	include/linux/GLES/gl.h	49;"	d
GL_COLOR_BUFFER_BIT	include/linux/GLES2/gl2.h	47;"	d
GL_COLOR_BUFFER_BIT	include/linux/GLES3/gl3.h	81;"	d
GL_COLOR_BUFFER_BIT	include/linux/GLES3/gl31.h	81;"	d
GL_COLOR_BUFFER_BIT0_QCOM	include/linux/GLES/glext.h	519;"	d
GL_COLOR_BUFFER_BIT0_QCOM	include/linux/GLES2/gl2ext.h	827;"	d
GL_COLOR_BUFFER_BIT1_QCOM	include/linux/GLES/glext.h	520;"	d
GL_COLOR_BUFFER_BIT1_QCOM	include/linux/GLES2/gl2ext.h	828;"	d
GL_COLOR_BUFFER_BIT2_QCOM	include/linux/GLES/glext.h	521;"	d
GL_COLOR_BUFFER_BIT2_QCOM	include/linux/GLES2/gl2ext.h	829;"	d
GL_COLOR_BUFFER_BIT3_QCOM	include/linux/GLES/glext.h	522;"	d
GL_COLOR_BUFFER_BIT3_QCOM	include/linux/GLES2/gl2ext.h	830;"	d
GL_COLOR_BUFFER_BIT4_QCOM	include/linux/GLES/glext.h	523;"	d
GL_COLOR_BUFFER_BIT4_QCOM	include/linux/GLES2/gl2ext.h	831;"	d
GL_COLOR_BUFFER_BIT5_QCOM	include/linux/GLES/glext.h	524;"	d
GL_COLOR_BUFFER_BIT5_QCOM	include/linux/GLES2/gl2ext.h	832;"	d
GL_COLOR_BUFFER_BIT6_QCOM	include/linux/GLES/glext.h	525;"	d
GL_COLOR_BUFFER_BIT6_QCOM	include/linux/GLES2/gl2ext.h	833;"	d
GL_COLOR_BUFFER_BIT7_QCOM	include/linux/GLES/glext.h	526;"	d
GL_COLOR_BUFFER_BIT7_QCOM	include/linux/GLES2/gl2ext.h	834;"	d
GL_COLOR_CLEAR_VALUE	include/linux/GLES/gl.h	233;"	d
GL_COLOR_CLEAR_VALUE	include/linux/GLES2/gl2.h	195;"	d
GL_COLOR_CLEAR_VALUE	include/linux/GLES3/gl3.h	219;"	d
GL_COLOR_CLEAR_VALUE	include/linux/GLES3/gl31.h	173;"	d
GL_COLOR_EXT	include/linux/GLES/glext.h	324;"	d
GL_COLOR_EXT	include/linux/GLES2/gl2ext.h	464;"	d
GL_COLOR_LOGIC_OP	include/linux/GLES/gl.h	136;"	d
GL_COLOR_MATERIAL	include/linux/GLES/gl.h	151;"	d
GL_COLOR_WRITEMASK	include/linux/GLES/gl.h	234;"	d
GL_COLOR_WRITEMASK	include/linux/GLES2/gl2.h	196;"	d
GL_COLOR_WRITEMASK	include/linux/GLES3/gl3.h	220;"	d
GL_COLOR_WRITEMASK	include/linux/GLES3/gl31.h	174;"	d
GL_COMBINE	include/linux/GLES/gl.h	523;"	d
GL_COMBINE_ALPHA	include/linux/GLES/gl.h	525;"	d
GL_COMBINE_RGB	include/linux/GLES/gl.h	524;"	d
GL_COMMAND_BARRIER_BIT	include/linux/GLES3/gl31.h	1030;"	d
GL_COMPARE_REF_TO_TEXTURE	include/linux/GLES3/gl3.h	574;"	d
GL_COMPARE_REF_TO_TEXTURE	include/linux/GLES3/gl31.h	606;"	d
GL_COMPARE_REF_TO_TEXTURE_EXT	include/linux/GLES2/gl2ext.h	550;"	d
GL_COMPILE_STATUS	include/linux/GLES2/gl2.h	409;"	d
GL_COMPILE_STATUS	include/linux/GLES3/gl3.h	433;"	d
GL_COMPILE_STATUS	include/linux/GLES3/gl31.h	335;"	d
GL_COMPRESSED_R11_EAC	include/linux/GLES3/gl3.h	786;"	d
GL_COMPRESSED_R11_EAC	include/linux/GLES3/gl31.h	818;"	d
GL_COMPRESSED_RG11_EAC	include/linux/GLES3/gl3.h	788;"	d
GL_COMPRESSED_RG11_EAC	include/linux/GLES3/gl31.h	820;"	d
GL_COMPRESSED_RGB8_ETC2	include/linux/GLES3/gl3.h	790;"	d
GL_COMPRESSED_RGB8_ETC2	include/linux/GLES3/gl31.h	822;"	d
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	include/linux/GLES3/gl3.h	792;"	d
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	include/linux/GLES3/gl31.h	824;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	include/linux/GLES3/gl3.h	794;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	include/linux/GLES3/gl31.h	826;"	d
GL_COMPRESSED_RGBA_ASTC_10x10_KHR	include/linux/GLES2/gl2ext.h	241;"	d
GL_COMPRESSED_RGBA_ASTC_10x5_KHR	include/linux/GLES2/gl2ext.h	238;"	d
GL_COMPRESSED_RGBA_ASTC_10x6_KHR	include/linux/GLES2/gl2ext.h	239;"	d
GL_COMPRESSED_RGBA_ASTC_10x8_KHR	include/linux/GLES2/gl2ext.h	240;"	d
GL_COMPRESSED_RGBA_ASTC_12x10_KHR	include/linux/GLES2/gl2ext.h	242;"	d
GL_COMPRESSED_RGBA_ASTC_12x12_KHR	include/linux/GLES2/gl2ext.h	243;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	include/linux/GLES2/gl2ext.h	230;"	d
GL_COMPRESSED_RGBA_ASTC_5x4_KHR	include/linux/GLES2/gl2ext.h	231;"	d
GL_COMPRESSED_RGBA_ASTC_5x5_KHR	include/linux/GLES2/gl2ext.h	232;"	d
GL_COMPRESSED_RGBA_ASTC_6x5_KHR	include/linux/GLES2/gl2ext.h	233;"	d
GL_COMPRESSED_RGBA_ASTC_6x6_KHR	include/linux/GLES2/gl2ext.h	234;"	d
GL_COMPRESSED_RGBA_ASTC_8x5_KHR	include/linux/GLES2/gl2ext.h	235;"	d
GL_COMPRESSED_RGBA_ASTC_8x6_KHR	include/linux/GLES2/gl2ext.h	236;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	include/linux/GLES2/gl2ext.h	237;"	d
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG	include/linux/GLES/glext.h	438;"	d
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG	include/linux/GLES2/gl2ext.h	669;"	d
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG	include/linux/GLES/glext.h	437;"	d
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG	include/linux/GLES2/gl2ext.h	668;"	d
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	include/linux/GLES/glext.h	381;"	d
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	include/linux/GLES2/gl2ext.h	565;"	d
GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE	include/linux/GLES2/gl2ext.h	324;"	d
GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE	include/linux/GLES2/gl2ext.h	329;"	d
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG	include/linux/GLES/glext.h	436;"	d
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG	include/linux/GLES2/gl2ext.h	667;"	d
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG	include/linux/GLES/glext.h	435;"	d
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG	include/linux/GLES2/gl2ext.h	666;"	d
GL_COMPRESSED_RGB_S3TC_DXT1_EXT	include/linux/GLES/glext.h	380;"	d
GL_COMPRESSED_RGB_S3TC_DXT1_EXT	include/linux/GLES2/gl2ext.h	564;"	d
GL_COMPRESSED_SIGNED_R11_EAC	include/linux/GLES3/gl3.h	787;"	d
GL_COMPRESSED_SIGNED_R11_EAC	include/linux/GLES3/gl31.h	819;"	d
GL_COMPRESSED_SIGNED_RG11_EAC	include/linux/GLES3/gl3.h	789;"	d
GL_COMPRESSED_SIGNED_RG11_EAC	include/linux/GLES3/gl31.h	821;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR	include/linux/GLES2/gl2ext.h	255;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR	include/linux/GLES2/gl2ext.h	252;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR	include/linux/GLES2/gl2ext.h	253;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR	include/linux/GLES2/gl2ext.h	254;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR	include/linux/GLES2/gl2ext.h	256;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR	include/linux/GLES2/gl2ext.h	257;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR	include/linux/GLES2/gl2ext.h	244;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR	include/linux/GLES2/gl2ext.h	245;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR	include/linux/GLES2/gl2ext.h	246;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR	include/linux/GLES2/gl2ext.h	247;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR	include/linux/GLES2/gl2ext.h	248;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR	include/linux/GLES2/gl2ext.h	249;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR	include/linux/GLES2/gl2ext.h	250;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR	include/linux/GLES2/gl2ext.h	251;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	include/linux/GLES3/gl3.h	795;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	include/linux/GLES3/gl31.h	827;"	d
GL_COMPRESSED_SRGB8_ETC2	include/linux/GLES3/gl3.h	791;"	d
GL_COMPRESSED_SRGB8_ETC2	include/linux/GLES3/gl31.h	823;"	d
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	include/linux/GLES3/gl3.h	793;"	d
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	include/linux/GLES3/gl31.h	825;"	d
GL_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES/gl.h	283;"	d
GL_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES2/gl2.h	224;"	d
GL_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES3/gl3.h	248;"	d
GL_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES3/gl31.h	194;"	d
GL_COMPUTE_SHADER	include/linux/GLES3/gl31.h	940;"	d
GL_COMPUTE_SHADER_BIT	include/linux/GLES3/gl31.h	955;"	d
GL_COMPUTE_WORK_GROUP_SIZE	include/linux/GLES3/gl31.h	952;"	d
GL_CONDITION_SATISFIED	include/linux/GLES3/gl3.h	762;"	d
GL_CONDITION_SATISFIED	include/linux/GLES3/gl31.h	794;"	d
GL_CONDITION_SATISFIED_APPLE	include/linux/GLES/glext.h	286;"	d
GL_CONDITION_SATISFIED_APPLE	include/linux/GLES2/gl2ext.h	396;"	d
GL_CONSTANT	include/linux/GLES/gl.h	529;"	d
GL_CONSTANT_ALPHA	include/linux/GLES2/gl2.h	110;"	d
GL_CONSTANT_ALPHA	include/linux/GLES3/gl3.h	134;"	d
GL_CONSTANT_ALPHA	include/linux/GLES3/gl31.h	114;"	d
GL_CONSTANT_ATTENUATION	include/linux/GLES/gl.h	309;"	d
GL_CONSTANT_COLOR	include/linux/GLES2/gl2.h	108;"	d
GL_CONSTANT_COLOR	include/linux/GLES3/gl3.h	132;"	d
GL_CONSTANT_COLOR	include/linux/GLES3/gl31.h	112;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	include/linux/GLES2/gl2ext.h	224;"	d
GL_CONTEXT_ROBUST_ACCESS_EXT	include/linux/GLES/glext.h	364;"	d
GL_CONTEXT_ROBUST_ACCESS_EXT	include/linux/GLES2/gl2ext.h	522;"	d
GL_COORD_REPLACE_OES	include/linux/GLES/gl.h	587;"	d
GL_COPY	include/linux/GLES/gl.h	325;"	d
GL_COPY_INVERTED	include/linux/GLES/gl.h	334;"	d
GL_COPY_READ_BUFFER	include/linux/GLES3/gl3.h	715;"	d
GL_COPY_READ_BUFFER	include/linux/GLES3/gl31.h	747;"	d
GL_COPY_READ_BUFFER_BINDING	include/linux/GLES3/gl3.h	717;"	d
GL_COPY_READ_BUFFER_BINDING	include/linux/GLES3/gl31.h	749;"	d
GL_COPY_WRITE_BUFFER	include/linux/GLES3/gl3.h	716;"	d
GL_COPY_WRITE_BUFFER	include/linux/GLES3/gl31.h	748;"	d
GL_COPY_WRITE_BUFFER_BINDING	include/linux/GLES3/gl3.h	718;"	d
GL_COPY_WRITE_BUFFER_BINDING	include/linux/GLES3/gl31.h	750;"	d
GL_COUNTER_RANGE_AMD	include/linux/GLES2/gl2ext.h	280;"	d
GL_COUNTER_TYPE_AMD	include/linux/GLES2/gl2ext.h	279;"	d
GL_COVERAGE_ALL_FRAGMENTS_NV	include/linux/GLES2/gl2ext.h	691;"	d
GL_COVERAGE_ATTACHMENT_NV	include/linux/GLES2/gl2ext.h	688;"	d
GL_COVERAGE_AUTOMATIC_NV	include/linux/GLES2/gl2ext.h	693;"	d
GL_COVERAGE_BUFFERS_NV	include/linux/GLES2/gl2ext.h	689;"	d
GL_COVERAGE_BUFFER_BIT_NV	include/linux/GLES2/gl2ext.h	694;"	d
GL_COVERAGE_COMPONENT4_NV	include/linux/GLES2/gl2ext.h	687;"	d
GL_COVERAGE_COMPONENT_NV	include/linux/GLES2/gl2ext.h	686;"	d
GL_COVERAGE_EDGE_FRAGMENTS_NV	include/linux/GLES2/gl2ext.h	692;"	d
GL_COVERAGE_SAMPLES_NV	include/linux/GLES2/gl2ext.h	690;"	d
GL_CPU_OPTIMIZED_QCOM	include/linux/GLES2/gl2ext.h	789;"	d
GL_CULL_FACE	include/linux/GLES/gl.h	133;"	d
GL_CULL_FACE	include/linux/GLES2/gl2.h	146;"	d
GL_CULL_FACE	include/linux/GLES3/gl3.h	170;"	d
GL_CULL_FACE	include/linux/GLES3/gl31.h	131;"	d
GL_CULL_FACE_MODE	include/linux/GLES/gl.h	203;"	d
GL_CULL_FACE_MODE	include/linux/GLES2/gl2.h	171;"	d
GL_CULL_FACE_MODE	include/linux/GLES3/gl3.h	195;"	d
GL_CULL_FACE_MODE	include/linux/GLES3/gl31.h	150;"	d
GL_CURRENT_COLOR	include/linux/GLES/gl.h	190;"	d
GL_CURRENT_NORMAL	include/linux/GLES/gl.h	191;"	d
GL_CURRENT_PALETTE_MATRIX_OES	include/linux/GLES/glext.h	148;"	d
GL_CURRENT_PROGRAM	include/linux/GLES2/gl2.h	278;"	d
GL_CURRENT_PROGRAM	include/linux/GLES3/gl3.h	302;"	d
GL_CURRENT_PROGRAM	include/linux/GLES3/gl31.h	235;"	d
GL_CURRENT_QUERY	include/linux/GLES3/gl3.h	528;"	d
GL_CURRENT_QUERY	include/linux/GLES3/gl31.h	560;"	d
GL_CURRENT_QUERY_EXT	include/linux/GLES2/gl2ext.h	504;"	d
GL_CURRENT_TEXTURE_COORDS	include/linux/GLES/gl.h	192;"	d
GL_CURRENT_VERTEX_ATTRIB	include/linux/GLES2/gl2.h	127;"	d
GL_CURRENT_VERTEX_ATTRIB	include/linux/GLES3/gl3.h	151;"	d
GL_CURRENT_VERTEX_ATTRIB	include/linux/GLES3/gl31.h	126;"	d
GL_CW	include/linux/GLES/gl.h	186;"	d
GL_CW	include/linux/GLES2/gl2.h	164;"	d
GL_CW	include/linux/GLES3/gl3.h	188;"	d
GL_CW	include/linux/GLES3/gl31.h	145;"	d
GL_DEBUG_CALLBACK_FUNCTION	include/linux/GLES2/gl2ext.h	189;"	d
GL_DEBUG_CALLBACK_USER_PARAM	include/linux/GLES2/gl2ext.h	190;"	d
GL_DEBUG_GROUP_STACK_DEPTH	include/linux/GLES2/gl2ext.h	208;"	d
GL_DEBUG_LOGGED_MESSAGES	include/linux/GLES2/gl2ext.h	219;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	include/linux/GLES2/gl2ext.h	188;"	d
GL_DEBUG_OUTPUT	include/linux/GLES2/gl2ext.h	223;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS	include/linux/GLES2/gl2ext.h	187;"	d
GL_DEBUG_SEVERITY_HIGH	include/linux/GLES2/gl2ext.h	220;"	d
GL_DEBUG_SEVERITY_LOW	include/linux/GLES2/gl2ext.h	222;"	d
GL_DEBUG_SEVERITY_MEDIUM	include/linux/GLES2/gl2ext.h	221;"	d
GL_DEBUG_SEVERITY_NOTIFICATION	include/linux/GLES2/gl2ext.h	206;"	d
GL_DEBUG_SOURCE_API	include/linux/GLES2/gl2ext.h	191;"	d
GL_DEBUG_SOURCE_APPLICATION	include/linux/GLES2/gl2ext.h	195;"	d
GL_DEBUG_SOURCE_OTHER	include/linux/GLES2/gl2ext.h	196;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER	include/linux/GLES2/gl2ext.h	193;"	d
GL_DEBUG_SOURCE_THIRD_PARTY	include/linux/GLES2/gl2ext.h	194;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM	include/linux/GLES2/gl2ext.h	192;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	include/linux/GLES2/gl2ext.h	198;"	d
GL_DEBUG_TYPE_ERROR	include/linux/GLES2/gl2ext.h	197;"	d
GL_DEBUG_TYPE_MARKER	include/linux/GLES2/gl2ext.h	203;"	d
GL_DEBUG_TYPE_OTHER	include/linux/GLES2/gl2ext.h	202;"	d
GL_DEBUG_TYPE_PERFORMANCE	include/linux/GLES2/gl2ext.h	201;"	d
GL_DEBUG_TYPE_POP_GROUP	include/linux/GLES2/gl2ext.h	205;"	d
GL_DEBUG_TYPE_PORTABILITY	include/linux/GLES2/gl2ext.h	200;"	d
GL_DEBUG_TYPE_PUSH_GROUP	include/linux/GLES2/gl2ext.h	204;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	include/linux/GLES2/gl2ext.h	199;"	d
GL_DECAL	include/linux/GLES/gl.h	414;"	d
GL_DECR	include/linux/GLES/gl.h	397;"	d
GL_DECR	include/linux/GLES2/gl2.h	295;"	d
GL_DECR	include/linux/GLES3/gl3.h	319;"	d
GL_DECR	include/linux/GLES3/gl31.h	247;"	d
GL_DECR_WRAP	include/linux/GLES2/gl2.h	298;"	d
GL_DECR_WRAP	include/linux/GLES3/gl3.h	322;"	d
GL_DECR_WRAP	include/linux/GLES3/gl31.h	250;"	d
GL_DECR_WRAP_OES	include/linux/GLES/glext.h	195;"	d
GL_DELETE_STATUS	include/linux/GLES2/gl2.h	269;"	d
GL_DELETE_STATUS	include/linux/GLES3/gl3.h	293;"	d
GL_DELETE_STATUS	include/linux/GLES3/gl31.h	226;"	d
GL_DEPTH	include/linux/GLES3/gl3.h	503;"	d
GL_DEPTH	include/linux/GLES3/gl31.h	535;"	d
GL_DEPTH24_STENCIL8	include/linux/GLES3/gl3.h	655;"	d
GL_DEPTH24_STENCIL8	include/linux/GLES3/gl31.h	687;"	d
GL_DEPTH24_STENCIL8_OES	include/linux/GLES/glext.h	165;"	d
GL_DEPTH24_STENCIL8_OES	include/linux/GLES2/gl2ext.h	93;"	d
GL_DEPTH32F_STENCIL8	include/linux/GLES3/gl3.h	640;"	d
GL_DEPTH32F_STENCIL8	include/linux/GLES3/gl31.h	672;"	d
GL_DEPTH_ATTACHMENT	include/linux/GLES2/gl2.h	452;"	d
GL_DEPTH_ATTACHMENT	include/linux/GLES3/gl3.h	476;"	d
GL_DEPTH_ATTACHMENT	include/linux/GLES3/gl31.h	368;"	d
GL_DEPTH_ATTACHMENT_OES	include/linux/GLES/glext.h	112;"	d
GL_DEPTH_BITS	include/linux/GLES/gl.h	250;"	d
GL_DEPTH_BITS	include/linux/GLES2/gl2.h	206;"	d
GL_DEPTH_BITS	include/linux/GLES3/gl3.h	230;"	d
GL_DEPTH_BITS	include/linux/GLES3/gl31.h	184;"	d
GL_DEPTH_BUFFER_BIT	include/linux/GLES/gl.h	47;"	d
GL_DEPTH_BUFFER_BIT	include/linux/GLES2/gl2.h	45;"	d
GL_DEPTH_BUFFER_BIT	include/linux/GLES3/gl3.h	79;"	d
GL_DEPTH_BUFFER_BIT	include/linux/GLES3/gl31.h	79;"	d
GL_DEPTH_BUFFER_BIT0_QCOM	include/linux/GLES/glext.h	527;"	d
GL_DEPTH_BUFFER_BIT0_QCOM	include/linux/GLES2/gl2ext.h	835;"	d
GL_DEPTH_BUFFER_BIT1_QCOM	include/linux/GLES/glext.h	528;"	d
GL_DEPTH_BUFFER_BIT1_QCOM	include/linux/GLES2/gl2ext.h	836;"	d
GL_DEPTH_BUFFER_BIT2_QCOM	include/linux/GLES/glext.h	529;"	d
GL_DEPTH_BUFFER_BIT2_QCOM	include/linux/GLES2/gl2ext.h	837;"	d
GL_DEPTH_BUFFER_BIT3_QCOM	include/linux/GLES/glext.h	530;"	d
GL_DEPTH_BUFFER_BIT3_QCOM	include/linux/GLES2/gl2ext.h	838;"	d
GL_DEPTH_BUFFER_BIT4_QCOM	include/linux/GLES/glext.h	531;"	d
GL_DEPTH_BUFFER_BIT4_QCOM	include/linux/GLES2/gl2ext.h	839;"	d
GL_DEPTH_BUFFER_BIT5_QCOM	include/linux/GLES/glext.h	532;"	d
GL_DEPTH_BUFFER_BIT5_QCOM	include/linux/GLES2/gl2ext.h	840;"	d
GL_DEPTH_BUFFER_BIT6_QCOM	include/linux/GLES/glext.h	533;"	d
GL_DEPTH_BUFFER_BIT6_QCOM	include/linux/GLES2/gl2ext.h	841;"	d
GL_DEPTH_BUFFER_BIT7_QCOM	include/linux/GLES/glext.h	534;"	d
GL_DEPTH_BUFFER_BIT7_QCOM	include/linux/GLES2/gl2ext.h	842;"	d
GL_DEPTH_CLEAR_VALUE	include/linux/GLES/gl.h	208;"	d
GL_DEPTH_CLEAR_VALUE	include/linux/GLES2/gl2.h	175;"	d
GL_DEPTH_CLEAR_VALUE	include/linux/GLES3/gl3.h	199;"	d
GL_DEPTH_CLEAR_VALUE	include/linux/GLES3/gl31.h	154;"	d
GL_DEPTH_COMPONENT	include/linux/GLES2/gl2.h	245;"	d
GL_DEPTH_COMPONENT	include/linux/GLES3/gl3.h	269;"	d
GL_DEPTH_COMPONENT	include/linux/GLES3/gl31.h	207;"	d
GL_DEPTH_COMPONENT16	include/linux/GLES2/gl2.h	433;"	d
GL_DEPTH_COMPONENT16	include/linux/GLES3/gl3.h	457;"	d
GL_DEPTH_COMPONENT16	include/linux/GLES3/gl31.h	352;"	d
GL_DEPTH_COMPONENT16_NONLINEAR_NV	include/linux/GLES2/gl2ext.h	699;"	d
GL_DEPTH_COMPONENT16_OES	include/linux/GLES/glext.h	97;"	d
GL_DEPTH_COMPONENT16_OES	include/linux/GLES2/gl2ext.h	99;"	d
GL_DEPTH_COMPONENT24	include/linux/GLES3/gl3.h	524;"	d
GL_DEPTH_COMPONENT24	include/linux/GLES3/gl31.h	556;"	d
GL_DEPTH_COMPONENT24_OES	include/linux/GLES/glext.h	53;"	d
GL_DEPTH_COMPONENT24_OES	include/linux/GLES2/gl2ext.h	44;"	d
GL_DEPTH_COMPONENT32F	include/linux/GLES3/gl3.h	639;"	d
GL_DEPTH_COMPONENT32F	include/linux/GLES3/gl31.h	671;"	d
GL_DEPTH_COMPONENT32_OES	include/linux/GLES/glext.h	58;"	d
GL_DEPTH_COMPONENT32_OES	include/linux/GLES2/gl2ext.h	49;"	d
GL_DEPTH_EXT	include/linux/GLES/glext.h	325;"	d
GL_DEPTH_EXT	include/linux/GLES2/gl2ext.h	465;"	d
GL_DEPTH_FUNC	include/linux/GLES/gl.h	209;"	d
GL_DEPTH_FUNC	include/linux/GLES2/gl2.h	176;"	d
GL_DEPTH_FUNC	include/linux/GLES3/gl3.h	200;"	d
GL_DEPTH_FUNC	include/linux/GLES3/gl31.h	155;"	d
GL_DEPTH_RANGE	include/linux/GLES/gl.h	206;"	d
GL_DEPTH_RANGE	include/linux/GLES2/gl2.h	173;"	d
GL_DEPTH_RANGE	include/linux/GLES3/gl3.h	197;"	d
GL_DEPTH_RANGE	include/linux/GLES3/gl31.h	152;"	d
GL_DEPTH_STENCIL	include/linux/GLES3/gl3.h	653;"	d
GL_DEPTH_STENCIL	include/linux/GLES3/gl31.h	685;"	d
GL_DEPTH_STENCIL_ATTACHMENT	include/linux/GLES3/gl3.h	652;"	d
GL_DEPTH_STENCIL_ATTACHMENT	include/linux/GLES3/gl31.h	684;"	d
GL_DEPTH_STENCIL_OES	include/linux/GLES/glext.h	163;"	d
GL_DEPTH_STENCIL_OES	include/linux/GLES2/gl2ext.h	91;"	d
GL_DEPTH_STENCIL_TEXTURE_MODE	include/linux/GLES3/gl31.h	1069;"	d
GL_DEPTH_TEST	include/linux/GLES/gl.h	139;"	d
GL_DEPTH_TEST	include/linux/GLES2/gl2.h	150;"	d
GL_DEPTH_TEST	include/linux/GLES3/gl3.h	174;"	d
GL_DEPTH_TEST	include/linux/GLES3/gl31.h	135;"	d
GL_DEPTH_WRITEMASK	include/linux/GLES/gl.h	207;"	d
GL_DEPTH_WRITEMASK	include/linux/GLES2/gl2.h	174;"	d
GL_DEPTH_WRITEMASK	include/linux/GLES3/gl3.h	198;"	d
GL_DEPTH_WRITEMASK	include/linux/GLES3/gl31.h	153;"	d
GL_DIFFUSE	include/linux/GLES/gl.h	303;"	d
GL_DISPATCH_INDIRECT_BUFFER	include/linux/GLES3/gl31.h	953;"	d
GL_DISPATCH_INDIRECT_BUFFER_BINDING	include/linux/GLES3/gl31.h	954;"	d
GL_DITHER	include/linux/GLES/gl.h	137;"	d
GL_DITHER	include/linux/GLES2/gl2.h	148;"	d
GL_DITHER	include/linux/GLES3/gl3.h	172;"	d
GL_DITHER	include/linux/GLES3/gl31.h	133;"	d
GL_DMP_shader_binary	include/linux/GLES2/gl2ext.h	1563;"	d
GL_DONT_CARE	include/linux/GLES/gl.h	286;"	d
GL_DONT_CARE	include/linux/GLES2/gl2.h	227;"	d
GL_DONT_CARE	include/linux/GLES3/gl3.h	251;"	d
GL_DONT_CARE	include/linux/GLES3/gl31.h	195;"	d
GL_DOT3_RGB	include/linux/GLES/gl.h	548;"	d
GL_DOT3_RGBA	include/linux/GLES/gl.h	549;"	d
GL_DOT3_RGBA_IMG	include/linux/GLES/glext.h	449;"	d
GL_DRAW_BUFFER0	include/linux/GLES3/gl3.h	540;"	d
GL_DRAW_BUFFER0	include/linux/GLES3/gl31.h	572;"	d
GL_DRAW_BUFFER0_NV	include/linux/GLES2/gl2ext.h	705;"	d
GL_DRAW_BUFFER1	include/linux/GLES3/gl3.h	541;"	d
GL_DRAW_BUFFER1	include/linux/GLES3/gl31.h	573;"	d
GL_DRAW_BUFFER10	include/linux/GLES3/gl3.h	550;"	d
GL_DRAW_BUFFER10	include/linux/GLES3/gl31.h	582;"	d
GL_DRAW_BUFFER10_NV	include/linux/GLES2/gl2ext.h	715;"	d
GL_DRAW_BUFFER11	include/linux/GLES3/gl3.h	551;"	d
GL_DRAW_BUFFER11	include/linux/GLES3/gl31.h	583;"	d
GL_DRAW_BUFFER11_NV	include/linux/GLES2/gl2ext.h	716;"	d
GL_DRAW_BUFFER12	include/linux/GLES3/gl3.h	552;"	d
GL_DRAW_BUFFER12	include/linux/GLES3/gl31.h	584;"	d
GL_DRAW_BUFFER12_NV	include/linux/GLES2/gl2ext.h	717;"	d
GL_DRAW_BUFFER13	include/linux/GLES3/gl3.h	553;"	d
GL_DRAW_BUFFER13	include/linux/GLES3/gl31.h	585;"	d
GL_DRAW_BUFFER13_NV	include/linux/GLES2/gl2ext.h	718;"	d
GL_DRAW_BUFFER14	include/linux/GLES3/gl3.h	554;"	d
GL_DRAW_BUFFER14	include/linux/GLES3/gl31.h	586;"	d
GL_DRAW_BUFFER14_NV	include/linux/GLES2/gl2ext.h	719;"	d
GL_DRAW_BUFFER15	include/linux/GLES3/gl3.h	555;"	d
GL_DRAW_BUFFER15	include/linux/GLES3/gl31.h	587;"	d
GL_DRAW_BUFFER15_NV	include/linux/GLES2/gl2ext.h	720;"	d
GL_DRAW_BUFFER1_NV	include/linux/GLES2/gl2ext.h	706;"	d
GL_DRAW_BUFFER2	include/linux/GLES3/gl3.h	542;"	d
GL_DRAW_BUFFER2	include/linux/GLES3/gl31.h	574;"	d
GL_DRAW_BUFFER2_NV	include/linux/GLES2/gl2ext.h	707;"	d
GL_DRAW_BUFFER3	include/linux/GLES3/gl3.h	543;"	d
GL_DRAW_BUFFER3	include/linux/GLES3/gl31.h	575;"	d
GL_DRAW_BUFFER3_NV	include/linux/GLES2/gl2ext.h	708;"	d
GL_DRAW_BUFFER4	include/linux/GLES3/gl3.h	544;"	d
GL_DRAW_BUFFER4	include/linux/GLES3/gl31.h	576;"	d
GL_DRAW_BUFFER4_NV	include/linux/GLES2/gl2ext.h	709;"	d
GL_DRAW_BUFFER5	include/linux/GLES3/gl3.h	545;"	d
GL_DRAW_BUFFER5	include/linux/GLES3/gl31.h	577;"	d
GL_DRAW_BUFFER5_NV	include/linux/GLES2/gl2ext.h	710;"	d
GL_DRAW_BUFFER6	include/linux/GLES3/gl3.h	546;"	d
GL_DRAW_BUFFER6	include/linux/GLES3/gl31.h	578;"	d
GL_DRAW_BUFFER6_NV	include/linux/GLES2/gl2ext.h	711;"	d
GL_DRAW_BUFFER7	include/linux/GLES3/gl3.h	547;"	d
GL_DRAW_BUFFER7	include/linux/GLES3/gl31.h	579;"	d
GL_DRAW_BUFFER7_NV	include/linux/GLES2/gl2ext.h	712;"	d
GL_DRAW_BUFFER8	include/linux/GLES3/gl3.h	548;"	d
GL_DRAW_BUFFER8	include/linux/GLES3/gl31.h	580;"	d
GL_DRAW_BUFFER8_NV	include/linux/GLES2/gl2ext.h	713;"	d
GL_DRAW_BUFFER9	include/linux/GLES3/gl3.h	549;"	d
GL_DRAW_BUFFER9	include/linux/GLES3/gl31.h	581;"	d
GL_DRAW_BUFFER9_NV	include/linux/GLES2/gl2ext.h	714;"	d
GL_DRAW_BUFFER_EXT	include/linux/GLES2/gl2ext.h	492;"	d
GL_DRAW_FRAMEBUFFER	include/linux/GLES3/gl3.h	659;"	d
GL_DRAW_FRAMEBUFFER	include/linux/GLES3/gl31.h	691;"	d
GL_DRAW_FRAMEBUFFER_ANGLE	include/linux/GLES2/gl2ext.h	300;"	d
GL_DRAW_FRAMEBUFFER_APPLE	include/linux/GLES/glext.h	255;"	d
GL_DRAW_FRAMEBUFFER_APPLE	include/linux/GLES2/gl2ext.h	356;"	d
GL_DRAW_FRAMEBUFFER_BINDING	include/linux/GLES3/gl3.h	657;"	d
GL_DRAW_FRAMEBUFFER_BINDING	include/linux/GLES3/gl31.h	689;"	d
GL_DRAW_FRAMEBUFFER_BINDING_ANGLE	include/linux/GLES2/gl2ext.h	301;"	d
GL_DRAW_FRAMEBUFFER_BINDING_APPLE	include/linux/GLES/glext.h	256;"	d
GL_DRAW_FRAMEBUFFER_BINDING_APPLE	include/linux/GLES2/gl2ext.h	357;"	d
GL_DRAW_INDIRECT_BUFFER	include/linux/GLES3/gl31.h	956;"	d
GL_DRAW_INDIRECT_BUFFER_BINDING	include/linux/GLES3/gl31.h	957;"	d
GL_DST_ALPHA	include/linux/GLES/gl.h	81;"	d
GL_DST_ALPHA	include/linux/GLES2/gl2.h	79;"	d
GL_DST_ALPHA	include/linux/GLES3/gl3.h	103;"	d
GL_DST_ALPHA	include/linux/GLES3/gl31.h	97;"	d
GL_DST_COLOR	include/linux/GLES/gl.h	87;"	d
GL_DST_COLOR	include/linux/GLES2/gl2.h	85;"	d
GL_DST_COLOR	include/linux/GLES3/gl3.h	109;"	d
GL_DST_COLOR	include/linux/GLES3/gl31.h	99;"	d
GL_DYNAMIC_COPY	include/linux/GLES3/gl3.h	538;"	d
GL_DYNAMIC_COPY	include/linux/GLES3/gl31.h	570;"	d
GL_DYNAMIC_DRAW	include/linux/GLES/gl.h	516;"	d
GL_DYNAMIC_DRAW	include/linux/GLES2/gl2.h	122;"	d
GL_DYNAMIC_DRAW	include/linux/GLES3/gl3.h	146;"	d
GL_DYNAMIC_DRAW	include/linux/GLES3/gl31.h	123;"	d
GL_DYNAMIC_READ	include/linux/GLES3/gl3.h	537;"	d
GL_DYNAMIC_READ	include/linux/GLES3/gl31.h	569;"	d
GL_ELEMENT_ARRAY_BARRIER_BIT	include/linux/GLES3/gl31.h	1026;"	d
GL_ELEMENT_ARRAY_BUFFER	include/linux/GLES/gl.h	506;"	d
GL_ELEMENT_ARRAY_BUFFER	include/linux/GLES2/gl2.h	116;"	d
GL_ELEMENT_ARRAY_BUFFER	include/linux/GLES3/gl3.h	140;"	d
GL_ELEMENT_ARRAY_BUFFER	include/linux/GLES3/gl31.h	118;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/linux/GLES/gl.h	509;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/linux/GLES2/gl2.h	118;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/linux/GLES3/gl3.h	142;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/linux/GLES3/gl31.h	120;"	d
GL_EMISSION	include/linux/GLES/gl.h	343;"	d
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	112;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	113;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	115;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	123;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	124;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	128;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	151;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	153;"	d	file:
GL_ENTRY	src/core/GLES_COMPUTE/OpenGLES.cpp	157;"	d	file:
GL_EQUAL	include/linux/GLES/gl.h	67;"	d
GL_EQUAL	include/linux/GLES2/gl2.h	283;"	d
GL_EQUAL	include/linux/GLES3/gl3.h	307;"	d
GL_EQUAL	include/linux/GLES3/gl31.h	238;"	d
GL_EQUIV	include/linux/GLES/gl.h	331;"	d
GL_ES_VERSION_2_0	include/linux/GLES2/gl2.h	42;"	d
GL_ES_VERSION_2_0	include/linux/GLES3/gl3.h	74;"	d
GL_ES_VERSION_2_0	include/linux/GLES3/gl31.h	57;"	d
GL_ES_VERSION_3_0	include/linux/GLES3/gl3.h	73;"	d
GL_ES_VERSION_3_0	include/linux/GLES3/gl31.h	525;"	d
GL_ES_VERSION_3_1	include/linux/GLES3/gl31.h	939;"	d
GL_ETC1_RGB8_OES	include/linux/GLES/glext.h	48;"	d
GL_ETC1_RGB8_OES	include/linux/GLES2/gl2ext.h	25;"	d
GL_EXP	include/linux/GLES/gl.h	175;"	d
GL_EXP2	include/linux/GLES/gl.h	176;"	d
GL_EXTENSIONS	include/linux/GLES/gl.h	404;"	d
GL_EXTENSIONS	include/linux/GLES2/gl2.h	304;"	d
GL_EXTENSIONS	include/linux/GLES3/gl3.h	328;"	d
GL_EXTENSIONS	include/linux/GLES3/gl31.h	254;"	d
GL_EXT_blend_minmax	include/linux/GLES/glext.h	1020;"	d
GL_EXT_blend_minmax	include/linux/GLES2/gl2ext.h	1294;"	d
GL_EXT_color_buffer_half_float	include/linux/GLES2/gl2ext.h	1299;"	d
GL_EXT_debug_label	include/linux/GLES2/gl2ext.h	1304;"	d
GL_EXT_debug_marker	include/linux/GLES2/gl2ext.h	1315;"	d
GL_EXT_discard_framebuffer	include/linux/GLES/glext.h	1025;"	d
GL_EXT_discard_framebuffer	include/linux/GLES2/gl2ext.h	1328;"	d
GL_EXT_map_buffer_range	include/linux/GLES/glext.h	1034;"	d
GL_EXT_map_buffer_range	include/linux/GLES2/gl2ext.h	1337;"	d
GL_EXT_multi_draw_arrays	include/linux/GLES/glext.h	1056;"	d
GL_EXT_multi_draw_arrays	include/linux/GLES2/gl2ext.h	1371;"	d
GL_EXT_multisampled_render_to_texture	include/linux/GLES/glext.h	1045;"	d
GL_EXT_multisampled_render_to_texture	include/linux/GLES2/gl2ext.h	1348;"	d
GL_EXT_multiview_draw_buffers	include/linux/GLES2/gl2ext.h	1359;"	d
GL_EXT_occlusion_query_boolean	include/linux/GLES2/gl2ext.h	1382;"	d
GL_EXT_read_format_bgra	include/linux/GLES/glext.h	1067;"	d
GL_EXT_read_format_bgra	include/linux/GLES2/gl2ext.h	1403;"	d
GL_EXT_robustness	include/linux/GLES/glext.h	1072;"	d
GL_EXT_robustness	include/linux/GLES2/gl2ext.h	1408;"	d
GL_EXT_sRGB	include/linux/GLES/glext.h	1087;"	d
GL_EXT_sRGB	include/linux/GLES2/gl2ext.h	1505;"	d
GL_EXT_separate_shader_objects	include/linux/GLES2/gl2ext.h	1423;"	d
GL_EXT_shader_framebuffer_fetch	include/linux/GLES2/gl2ext.h	1490;"	d
GL_EXT_shader_texture_lod	include/linux/GLES2/gl2ext.h	1495;"	d
GL_EXT_shadow_samplers	include/linux/GLES2/gl2ext.h	1500;"	d
GL_EXT_texture_compression_dxt1	include/linux/GLES/glext.h	1092;"	d
GL_EXT_texture_compression_dxt1	include/linux/GLES2/gl2ext.h	1510;"	d
GL_EXT_texture_filter_anisotropic	include/linux/GLES/glext.h	1097;"	d
GL_EXT_texture_filter_anisotropic	include/linux/GLES2/gl2ext.h	1515;"	d
GL_EXT_texture_format_BGRA8888	include/linux/GLES/glext.h	1102;"	d
GL_EXT_texture_format_BGRA8888	include/linux/GLES2/gl2ext.h	1520;"	d
GL_EXT_texture_lod_bias	include/linux/GLES/glext.h	1107;"	d
GL_EXT_texture_rg	include/linux/GLES2/gl2ext.h	1525;"	d
GL_EXT_texture_storage	include/linux/GLES/glext.h	1112;"	d
GL_EXT_texture_storage	include/linux/GLES2/gl2ext.h	1530;"	d
GL_EXT_texture_type_2_10_10_10_REV	include/linux/GLES2/gl2ext.h	1549;"	d
GL_EXT_unpack_subimage	include/linux/GLES2/gl2ext.h	1554;"	d
GL_FACTOR_ALPHA_MODULATE_IMG	include/linux/GLES/glext.h	446;"	d
GL_FALSE	include/linux/GLES/gl.h	52;"	d
GL_FALSE	include/linux/GLES2/gl2.h	50;"	d
GL_FALSE	include/linux/GLES3/gl3.h	84;"	d
GL_FALSE	include/linux/GLES3/gl31.h	82;"	d
GL_FASTEST	include/linux/GLES/gl.h	287;"	d
GL_FASTEST	include/linux/GLES2/gl2.h	228;"	d
GL_FASTEST	include/linux/GLES3/gl3.h	252;"	d
GL_FASTEST	include/linux/GLES3/gl31.h	196;"	d
GL_FENCE_CONDITION_NV	include/linux/GLES/glext.h	479;"	d
GL_FENCE_CONDITION_NV	include/linux/GLES2/gl2ext.h	749;"	d
GL_FENCE_STATUS_NV	include/linux/GLES/glext.h	478;"	d
GL_FENCE_STATUS_NV	include/linux/GLES2/gl2ext.h	748;"	d
GL_FIXED	include/linux/GLES/gl.h	319;"	d
GL_FIXED	include/linux/GLES2/gl2.h	242;"	d
GL_FIXED	include/linux/GLES3/gl3.h	266;"	d
GL_FIXED	include/linux/GLES3/gl31.h	206;"	d
GL_FIXED_OES	include/linux/GLES/glext.h	86;"	d
GL_FJ_shader_binary_GCCSO	include/linux/GLES2/gl2ext.h	1572;"	d
GL_FLAT	include/linux/GLES/gl.h	379;"	d
GL_FLOAT	include/linux/GLES/gl.h	318;"	d
GL_FLOAT	include/linux/GLES2/gl2.h	241;"	d
GL_FLOAT	include/linux/GLES3/gl3.h	265;"	d
GL_FLOAT	include/linux/GLES3/gl31.h	205;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	include/linux/GLES3/gl3.h	641;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	include/linux/GLES3/gl31.h	673;"	d
GL_FLOAT_MAT2	include/linux/GLES2/gl2.h	389;"	d
GL_FLOAT_MAT2	include/linux/GLES3/gl3.h	413;"	d
GL_FLOAT_MAT2	include/linux/GLES3/gl31.h	321;"	d
GL_FLOAT_MAT2x3	include/linux/GLES3/gl3.h	565;"	d
GL_FLOAT_MAT2x3	include/linux/GLES3/gl31.h	597;"	d
GL_FLOAT_MAT2x4	include/linux/GLES3/gl3.h	566;"	d
GL_FLOAT_MAT2x4	include/linux/GLES3/gl31.h	598;"	d
GL_FLOAT_MAT3	include/linux/GLES2/gl2.h	390;"	d
GL_FLOAT_MAT3	include/linux/GLES3/gl3.h	414;"	d
GL_FLOAT_MAT3	include/linux/GLES3/gl31.h	322;"	d
GL_FLOAT_MAT3x2	include/linux/GLES3/gl3.h	567;"	d
GL_FLOAT_MAT3x2	include/linux/GLES3/gl31.h	599;"	d
GL_FLOAT_MAT3x4	include/linux/GLES3/gl3.h	568;"	d
GL_FLOAT_MAT3x4	include/linux/GLES3/gl31.h	600;"	d
GL_FLOAT_MAT4	include/linux/GLES2/gl2.h	391;"	d
GL_FLOAT_MAT4	include/linux/GLES3/gl3.h	415;"	d
GL_FLOAT_MAT4	include/linux/GLES3/gl31.h	323;"	d
GL_FLOAT_MAT4x2	include/linux/GLES3/gl3.h	569;"	d
GL_FLOAT_MAT4x2	include/linux/GLES3/gl31.h	601;"	d
GL_FLOAT_MAT4x3	include/linux/GLES3/gl3.h	570;"	d
GL_FLOAT_MAT4x3	include/linux/GLES3/gl31.h	602;"	d
GL_FLOAT_VEC2	include/linux/GLES2/gl2.h	379;"	d
GL_FLOAT_VEC2	include/linux/GLES3/gl3.h	403;"	d
GL_FLOAT_VEC2	include/linux/GLES3/gl31.h	311;"	d
GL_FLOAT_VEC3	include/linux/GLES2/gl2.h	380;"	d
GL_FLOAT_VEC3	include/linux/GLES3/gl3.h	404;"	d
GL_FLOAT_VEC3	include/linux/GLES3/gl31.h	312;"	d
GL_FLOAT_VEC4	include/linux/GLES2/gl2.h	381;"	d
GL_FLOAT_VEC4	include/linux/GLES3/gl3.h	405;"	d
GL_FLOAT_VEC4	include/linux/GLES3/gl31.h	313;"	d
GL_FOG	include/linux/GLES/gl.h	130;"	d
GL_FOG_COLOR	include/linux/GLES/gl.h	183;"	d
GL_FOG_DENSITY	include/linux/GLES/gl.h	179;"	d
GL_FOG_END	include/linux/GLES/gl.h	181;"	d
GL_FOG_HINT	include/linux/GLES/gl.h	294;"	d
GL_FOG_MODE	include/linux/GLES/gl.h	182;"	d
GL_FOG_START	include/linux/GLES/gl.h	180;"	d
GL_FRAGMENT_ALPHA_MODULATE_IMG	include/linux/GLES/glext.h	447;"	d
GL_FRAGMENT_SHADER	include/linux/GLES2/gl2.h	259;"	d
GL_FRAGMENT_SHADER	include/linux/GLES3/gl3.h	283;"	d
GL_FRAGMENT_SHADER	include/linux/GLES3/gl31.h	216;"	d
GL_FRAGMENT_SHADER_BIT	include/linux/GLES3/gl31.h	997;"	d
GL_FRAGMENT_SHADER_BIT_EXT	include/linux/GLES2/gl2ext.h	531;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	include/linux/GLES3/gl3.h	560;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	include/linux/GLES3/gl31.h	592;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES	include/linux/GLES2/gl2ext.h	123;"	d
GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT	include/linux/GLES2/gl2ext.h	540;"	d
GL_FRAMEBUFFER	include/linux/GLES2/gl2.h	427;"	d
GL_FRAMEBUFFER	include/linux/GLES3/gl3.h	451;"	d
GL_FRAMEBUFFER	include/linux/GLES3/gl31.h	347;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	include/linux/GLES3/gl3.h	647;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	include/linux/GLES3/gl31.h	679;"	d
GL_FRAMEBUFFER_ATTACHMENT_ANGLE	include/linux/GLES2/gl2ext.h	335;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	include/linux/GLES3/gl3.h	646;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	include/linux/GLES3/gl31.h	678;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	include/linux/GLES3/gl3.h	642;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	include/linux/GLES3/gl31.h	674;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT	include/linux/GLES/glext.h	375;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT	include/linux/GLES2/gl2ext.h	559;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	include/linux/GLES3/gl3.h	643;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	include/linux/GLES3/gl31.h	675;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT	include/linux/GLES2/gl2ext.h	445;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	include/linux/GLES3/gl3.h	648;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	include/linux/GLES3/gl31.h	680;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	include/linux/GLES3/gl3.h	645;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	include/linux/GLES3/gl31.h	677;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	include/linux/GLES2/gl2.h	447;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	include/linux/GLES3/gl3.h	471;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	include/linux/GLES3/gl31.h	364;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES	include/linux/GLES/glext.h	108;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	include/linux/GLES2/gl2.h	446;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	include/linux/GLES3/gl3.h	470;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	include/linux/GLES3/gl31.h	363;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES	include/linux/GLES/glext.h	107;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	include/linux/GLES3/gl3.h	644;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	include/linux/GLES3/gl31.h	676;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	include/linux/GLES3/gl3.h	649;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	include/linux/GLES3/gl31.h	681;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES	include/linux/GLES2/gl2ext.h	147;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	include/linux/GLES2/gl2.h	449;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	include/linux/GLES3/gl3.h	473;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	include/linux/GLES3/gl31.h	366;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES	include/linux/GLES/glext.h	110;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	include/linux/GLES3/gl3.h	662;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	include/linux/GLES3/gl31.h	694;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	include/linux/GLES2/gl2.h	448;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	include/linux/GLES3/gl3.h	472;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	include/linux/GLES3/gl31.h	365;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES	include/linux/GLES/glext.h	109;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT	include/linux/GLES/glext.h	341;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT	include/linux/GLES2/gl2ext.h	481;"	d
GL_FRAMEBUFFER_BARRIER_BIT	include/linux/GLES3/gl31.h	1034;"	d
GL_FRAMEBUFFER_BINDING	include/linux/GLES2/gl2.h	463;"	d
GL_FRAMEBUFFER_BINDING	include/linux/GLES3/gl3.h	487;"	d
GL_FRAMEBUFFER_BINDING	include/linux/GLES3/gl31.h	376;"	d
GL_FRAMEBUFFER_BINDING_OES	include/linux/GLES/glext.h	120;"	d
GL_FRAMEBUFFER_COMPLETE	include/linux/GLES2/gl2.h	457;"	d
GL_FRAMEBUFFER_COMPLETE	include/linux/GLES3/gl3.h	481;"	d
GL_FRAMEBUFFER_COMPLETE	include/linux/GLES3/gl31.h	371;"	d
GL_FRAMEBUFFER_COMPLETE_OES	include/linux/GLES/glext.h	114;"	d
GL_FRAMEBUFFER_DEFAULT	include/linux/GLES3/gl3.h	650;"	d
GL_FRAMEBUFFER_DEFAULT	include/linux/GLES3/gl31.h	682;"	d
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	include/linux/GLES3/gl31.h	962;"	d
GL_FRAMEBUFFER_DEFAULT_HEIGHT	include/linux/GLES3/gl31.h	960;"	d
GL_FRAMEBUFFER_DEFAULT_SAMPLES	include/linux/GLES3/gl31.h	961;"	d
GL_FRAMEBUFFER_DEFAULT_WIDTH	include/linux/GLES3/gl31.h	959;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	include/linux/GLES2/gl2.h	458;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	include/linux/GLES3/gl3.h	482;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	include/linux/GLES3/gl31.h	372;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES	include/linux/GLES/glext.h	115;"	d
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS	include/linux/GLES2/gl2.h	460;"	d
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS	include/linux/GLES3/gl3.h	484;"	d
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS	include/linux/GLES3/gl31.h	374;"	d
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES	include/linux/GLES/glext.h	117;"	d
GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES	include/linux/GLES/glext.h	118;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	include/linux/GLES2/gl2.h	459;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	include/linux/GLES3/gl3.h	483;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	include/linux/GLES3/gl31.h	373;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES	include/linux/GLES/glext.h	116;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	include/linux/GLES3/gl3.h	679;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	include/linux/GLES3/gl31.h	711;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE	include/linux/GLES2/gl2ext.h	308;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE	include/linux/GLES/glext.h	252;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE	include/linux/GLES2/gl2ext.h	353;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT	include/linux/GLES/glext.h	344;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT	include/linux/GLES2/gl2ext.h	484;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG	include/linux/GLES/glext.h	466;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG	include/linux/GLES2/gl2ext.h	675;"	d
GL_FRAMEBUFFER_OES	include/linux/GLES/glext.h	92;"	d
GL_FRAMEBUFFER_UNDEFINED	include/linux/GLES3/gl3.h	651;"	d
GL_FRAMEBUFFER_UNDEFINED	include/linux/GLES3/gl31.h	683;"	d
GL_FRAMEBUFFER_UNDEFINED_OES	include/linux/GLES2/gl2ext.h	137;"	d
GL_FRAMEBUFFER_UNSUPPORTED	include/linux/GLES2/gl2.h	461;"	d
GL_FRAMEBUFFER_UNSUPPORTED	include/linux/GLES3/gl3.h	485;"	d
GL_FRAMEBUFFER_UNSUPPORTED	include/linux/GLES3/gl31.h	375;"	d
GL_FRAMEBUFFER_UNSUPPORTED_OES	include/linux/GLES/glext.h	119;"	d
GL_FRONT	include/linux/GLES/gl.h	115;"	d
GL_FRONT	include/linux/GLES2/gl2.h	130;"	d
GL_FRONT	include/linux/GLES3/gl3.h	154;"	d
GL_FRONT	include/linux/GLES3/gl31.h	127;"	d
GL_FRONT_AND_BACK	include/linux/GLES/gl.h	117;"	d
GL_FRONT_AND_BACK	include/linux/GLES2/gl2.h	132;"	d
GL_FRONT_AND_BACK	include/linux/GLES3/gl3.h	156;"	d
GL_FRONT_AND_BACK	include/linux/GLES3/gl31.h	129;"	d
GL_FRONT_FACE	include/linux/GLES/gl.h	204;"	d
GL_FRONT_FACE	include/linux/GLES2/gl2.h	172;"	d
GL_FRONT_FACE	include/linux/GLES3/gl3.h	196;"	d
GL_FRONT_FACE	include/linux/GLES3/gl31.h	151;"	d
GL_FUNC_ADD	include/linux/GLES2/gl2.h	94;"	d
GL_FUNC_ADD	include/linux/GLES3/gl3.h	118;"	d
GL_FUNC_ADD	include/linux/GLES3/gl31.h	102;"	d
GL_FUNC_ADD_OES	include/linux/GLES/glext.h	41;"	d
GL_FUNC_REVERSE_SUBTRACT	include/linux/GLES2/gl2.h	101;"	d
GL_FUNC_REVERSE_SUBTRACT	include/linux/GLES3/gl3.h	125;"	d
GL_FUNC_REVERSE_SUBTRACT	include/linux/GLES3/gl31.h	107;"	d
GL_FUNC_REVERSE_SUBTRACT_OES	include/linux/GLES/glext.h	43;"	d
GL_FUNC_SUBTRACT	include/linux/GLES2/gl2.h	100;"	d
GL_FUNC_SUBTRACT	include/linux/GLES3/gl3.h	124;"	d
GL_FUNC_SUBTRACT	include/linux/GLES3/gl31.h	106;"	d
GL_FUNC_SUBTRACT_OES	include/linux/GLES/glext.h	42;"	d
GL_GENERATE_MIPMAP	include/linux/GLES/gl.h	443;"	d
GL_GENERATE_MIPMAP_HINT	include/linux/GLES/gl.h	295;"	d
GL_GENERATE_MIPMAP_HINT	include/linux/GLES2/gl2.h	232;"	d
GL_GENERATE_MIPMAP_HINT	include/linux/GLES3/gl3.h	256;"	d
GL_GENERATE_MIPMAP_HINT	include/linux/GLES3/gl31.h	198;"	d
GL_GEQUAL	include/linux/GLES/gl.h	71;"	d
GL_GEQUAL	include/linux/GLES2/gl2.h	287;"	d
GL_GEQUAL	include/linux/GLES3/gl3.h	311;"	d
GL_GEQUAL	include/linux/GLES3/gl31.h	242;"	d
GL_GPU_OPTIMIZED_QCOM	include/linux/GLES2/gl2ext.h	790;"	d
GL_GREATER	include/linux/GLES/gl.h	69;"	d
GL_GREATER	include/linux/GLES2/gl2.h	285;"	d
GL_GREATER	include/linux/GLES3/gl3.h	309;"	d
GL_GREATER	include/linux/GLES3/gl31.h	240;"	d
GL_GREEN	include/linux/GLES3/gl3.h	775;"	d
GL_GREEN	include/linux/GLES3/gl31.h	807;"	d
GL_GREEN_BITS	include/linux/GLES/gl.h	247;"	d
GL_GREEN_BITS	include/linux/GLES2/gl2.h	203;"	d
GL_GREEN_BITS	include/linux/GLES3/gl3.h	227;"	d
GL_GREEN_BITS	include/linux/GLES3/gl31.h	181;"	d
GL_GUILTY_CONTEXT_RESET_EXT	include/linux/GLES/glext.h	361;"	d
GL_GUILTY_CONTEXT_RESET_EXT	include/linux/GLES2/gl2ext.h	519;"	d
GL_HALF_FLOAT	include/linux/GLES3/gl3.h	681;"	d
GL_HALF_FLOAT	include/linux/GLES3/gl31.h	713;"	d
GL_HALF_FLOAT_OES	include/linux/GLES2/gl2ext.h	158;"	d
GL_HIGH_FLOAT	include/linux/GLES2/gl2.h	421;"	d
GL_HIGH_FLOAT	include/linux/GLES3/gl3.h	445;"	d
GL_HIGH_FLOAT	include/linux/GLES3/gl31.h	343;"	d
GL_HIGH_INT	include/linux/GLES2/gl2.h	424;"	d
GL_HIGH_INT	include/linux/GLES3/gl3.h	448;"	d
GL_HIGH_INT	include/linux/GLES3/gl31.h	346;"	d
GL_IMAGE_2D	include/linux/GLES3/gl31.h	1038;"	d
GL_IMAGE_2D_ARRAY	include/linux/GLES3/gl31.h	1041;"	d
GL_IMAGE_3D	include/linux/GLES3/gl31.h	1039;"	d
GL_IMAGE_BINDING_ACCESS	include/linux/GLES3/gl31.h	1023;"	d
GL_IMAGE_BINDING_FORMAT	include/linux/GLES3/gl31.h	1024;"	d
GL_IMAGE_BINDING_LAYER	include/linux/GLES3/gl31.h	1022;"	d
GL_IMAGE_BINDING_LAYERED	include/linux/GLES3/gl31.h	1021;"	d
GL_IMAGE_BINDING_LEVEL	include/linux/GLES3/gl31.h	1020;"	d
GL_IMAGE_BINDING_NAME	include/linux/GLES3/gl31.h	1019;"	d
GL_IMAGE_CUBE	include/linux/GLES3/gl31.h	1040;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS	include/linux/GLES3/gl31.h	1052;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE	include/linux/GLES3/gl31.h	1051;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE	include/linux/GLES3/gl31.h	1050;"	d
GL_IMG_multisampled_render_to_texture	include/linux/GLES/glext.h	1161;"	d
GL_IMG_multisampled_render_to_texture	include/linux/GLES2/gl2ext.h	1601;"	d
GL_IMG_program_binary	include/linux/GLES2/gl2ext.h	1581;"	d
GL_IMG_read_format	include/linux/GLES/glext.h	1135;"	d
GL_IMG_read_format	include/linux/GLES2/gl2ext.h	1586;"	d
GL_IMG_shader_binary	include/linux/GLES2/gl2ext.h	1591;"	d
GL_IMG_texture_compression_pvrtc	include/linux/GLES/glext.h	1140;"	d
GL_IMG_texture_compression_pvrtc	include/linux/GLES2/gl2ext.h	1596;"	d
GL_IMG_texture_env_enhanced_fixed_function	include/linux/GLES/glext.h	1145;"	d
GL_IMG_user_clip_plane	include/linux/GLES/glext.h	1150;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	include/linux/GLES2/gl2.h	406;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	include/linux/GLES3/gl3.h	430;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	include/linux/GLES3/gl31.h	334;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES	include/linux/GLES/gl.h	558;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	include/linux/GLES2/gl2.h	405;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	include/linux/GLES3/gl3.h	429;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	include/linux/GLES3/gl31.h	333;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE_OES	include/linux/GLES/gl.h	557;"	d
GL_INCR	include/linux/GLES/gl.h	396;"	d
GL_INCR	include/linux/GLES2/gl2.h	294;"	d
GL_INCR	include/linux/GLES3/gl3.h	318;"	d
GL_INCR	include/linux/GLES3/gl31.h	246;"	d
GL_INCR_WRAP	include/linux/GLES2/gl2.h	297;"	d
GL_INCR_WRAP	include/linux/GLES3/gl3.h	321;"	d
GL_INCR_WRAP	include/linux/GLES3/gl31.h	249;"	d
GL_INCR_WRAP_OES	include/linux/GLES/glext.h	194;"	d
GL_INFO_LOG_LENGTH	include/linux/GLES2/gl2.h	410;"	d
GL_INFO_LOG_LENGTH	include/linux/GLES3/gl3.h	434;"	d
GL_INFO_LOG_LENGTH	include/linux/GLES3/gl31.h	336;"	d
GL_INNOCENT_CONTEXT_RESET_EXT	include/linux/GLES/glext.h	362;"	d
GL_INNOCENT_CONTEXT_RESET_EXT	include/linux/GLES2/gl2ext.h	520;"	d
GL_INT	include/linux/GLES2/gl2.h	239;"	d
GL_INT	include/linux/GLES3/gl3.h	263;"	d
GL_INT	include/linux/GLES3/gl31.h	203;"	d
GL_INTERLEAVED_ATTRIBS	include/linux/GLES3/gl3.h	603;"	d
GL_INTERLEAVED_ATTRIBS	include/linux/GLES3/gl31.h	635;"	d
GL_INTERPOLATE	include/linux/GLES/gl.h	528;"	d
GL_INT_10_10_10_2_OES	include/linux/GLES2/gl2ext.h	178;"	d
GL_INT_2_10_10_10_REV	include/linux/GLES3/gl3.h	777;"	d
GL_INT_2_10_10_10_REV	include/linux/GLES3/gl31.h	809;"	d
GL_INT_IMAGE_2D	include/linux/GLES3/gl31.h	1042;"	d
GL_INT_IMAGE_2D_ARRAY	include/linux/GLES3/gl31.h	1045;"	d
GL_INT_IMAGE_3D	include/linux/GLES3/gl31.h	1043;"	d
GL_INT_IMAGE_CUBE	include/linux/GLES3/gl31.h	1044;"	d
GL_INT_SAMPLER_2D	include/linux/GLES3/gl3.h	628;"	d
GL_INT_SAMPLER_2D	include/linux/GLES3/gl31.h	660;"	d
GL_INT_SAMPLER_2D_ARRAY	include/linux/GLES3/gl3.h	631;"	d
GL_INT_SAMPLER_2D_ARRAY	include/linux/GLES3/gl31.h	663;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	include/linux/GLES3/gl31.h	1102;"	d
GL_INT_SAMPLER_3D	include/linux/GLES3/gl3.h	629;"	d
GL_INT_SAMPLER_3D	include/linux/GLES3/gl31.h	661;"	d
GL_INT_SAMPLER_CUBE	include/linux/GLES3/gl3.h	630;"	d
GL_INT_SAMPLER_CUBE	include/linux/GLES3/gl31.h	662;"	d
GL_INT_VEC2	include/linux/GLES2/gl2.h	382;"	d
GL_INT_VEC2	include/linux/GLES3/gl3.h	406;"	d
GL_INT_VEC2	include/linux/GLES3/gl31.h	314;"	d
GL_INT_VEC3	include/linux/GLES2/gl2.h	383;"	d
GL_INT_VEC3	include/linux/GLES3/gl3.h	407;"	d
GL_INT_VEC3	include/linux/GLES3/gl31.h	315;"	d
GL_INT_VEC4	include/linux/GLES2/gl2.h	384;"	d
GL_INT_VEC4	include/linux/GLES3/gl3.h	408;"	d
GL_INT_VEC4	include/linux/GLES3/gl31.h	316;"	d
GL_INVALID_ENUM	include/linux/GLES/gl.h	166;"	d
GL_INVALID_ENUM	include/linux/GLES2/gl2.h	158;"	d
GL_INVALID_ENUM	include/linux/GLES3/gl3.h	182;"	d
GL_INVALID_ENUM	include/linux/GLES3/gl31.h	141;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	include/linux/GLES2/gl2.h	467;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	include/linux/GLES3/gl3.h	491;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	include/linux/GLES3/gl31.h	379;"	d
GL_INVALID_FRAMEBUFFER_OPERATION_OES	include/linux/GLES/glext.h	123;"	d
GL_INVALID_INDEX	include/linux/GLES3/gl3.h	748;"	d
GL_INVALID_INDEX	include/linux/GLES3/gl31.h	780;"	d
GL_INVALID_OPERATION	include/linux/GLES/gl.h	168;"	d
GL_INVALID_OPERATION	include/linux/GLES2/gl2.h	160;"	d
GL_INVALID_OPERATION	include/linux/GLES3/gl3.h	184;"	d
GL_INVALID_OPERATION	include/linux/GLES3/gl31.h	143;"	d
GL_INVALID_VALUE	include/linux/GLES/gl.h	167;"	d
GL_INVALID_VALUE	include/linux/GLES2/gl2.h	159;"	d
GL_INVALID_VALUE	include/linux/GLES3/gl3.h	183;"	d
GL_INVALID_VALUE	include/linux/GLES3/gl31.h	142;"	d
GL_INVERT	include/linux/GLES/gl.h	332;"	d
GL_INVERT	include/linux/GLES2/gl2.h	296;"	d
GL_INVERT	include/linux/GLES3/gl3.h	320;"	d
GL_INVERT	include/linux/GLES3/gl31.h	248;"	d
GL_IS_ROW_MAJOR	include/linux/GLES3/gl31.h	984;"	d
GL_KEEP	include/linux/GLES/gl.h	394;"	d
GL_KEEP	include/linux/GLES2/gl2.h	292;"	d
GL_KEEP	include/linux/GLES3/gl3.h	316;"	d
GL_KEEP	include/linux/GLES3/gl31.h	244;"	d
GL_KHR_debug	include/linux/GLES2/gl2ext.h	1067;"	d
GL_KHR_texture_compression_astc_ldr	include/linux/GLES2/gl2ext.h	1095;"	d
GL_LEQUAL	include/linux/GLES/gl.h	68;"	d
GL_LEQUAL	include/linux/GLES2/gl2.h	284;"	d
GL_LEQUAL	include/linux/GLES3/gl3.h	308;"	d
GL_LEQUAL	include/linux/GLES3/gl31.h	239;"	d
GL_LESS	include/linux/GLES/gl.h	66;"	d
GL_LESS	include/linux/GLES2/gl2.h	282;"	d
GL_LESS	include/linux/GLES3/gl3.h	306;"	d
GL_LESS	include/linux/GLES3/gl31.h	237;"	d
GL_LIGHT0	include/linux/GLES/gl.h	495;"	d
GL_LIGHT1	include/linux/GLES/gl.h	496;"	d
GL_LIGHT2	include/linux/GLES/gl.h	497;"	d
GL_LIGHT3	include/linux/GLES/gl.h	498;"	d
GL_LIGHT4	include/linux/GLES/gl.h	499;"	d
GL_LIGHT5	include/linux/GLES/gl.h	500;"	d
GL_LIGHT6	include/linux/GLES/gl.h	501;"	d
GL_LIGHT7	include/linux/GLES/gl.h	502;"	d
GL_LIGHTING	include/linux/GLES/gl.h	131;"	d
GL_LIGHT_MODEL_AMBIENT	include/linux/GLES/gl.h	298;"	d
GL_LIGHT_MODEL_TWO_SIDE	include/linux/GLES/gl.h	299;"	d
GL_LINEAR	include/linux/GLES/gl.h	428;"	d
GL_LINEAR	include/linux/GLES2/gl2.h	308;"	d
GL_LINEAR	include/linux/GLES3/gl3.h	332;"	d
GL_LINEAR	include/linux/GLES3/gl31.h	256;"	d
GL_LINEAR_ATTENUATION	include/linux/GLES/gl.h	310;"	d
GL_LINEAR_MIPMAP_LINEAR	include/linux/GLES/gl.h	436;"	d
GL_LINEAR_MIPMAP_LINEAR	include/linux/GLES2/gl2.h	316;"	d
GL_LINEAR_MIPMAP_LINEAR	include/linux/GLES3/gl3.h	340;"	d
GL_LINEAR_MIPMAP_LINEAR	include/linux/GLES3/gl31.h	260;"	d
GL_LINEAR_MIPMAP_NEAREST	include/linux/GLES/gl.h	434;"	d
GL_LINEAR_MIPMAP_NEAREST	include/linux/GLES2/gl2.h	314;"	d
GL_LINEAR_MIPMAP_NEAREST	include/linux/GLES3/gl3.h	338;"	d
GL_LINEAR_MIPMAP_NEAREST	include/linux/GLES3/gl31.h	258;"	d
GL_LINES	include/linux/GLES/gl.h	57;"	d
GL_LINES	include/linux/GLES2/gl2.h	55;"	d
GL_LINES	include/linux/GLES3/gl3.h	89;"	d
GL_LINES	include/linux/GLES3/gl31.h	85;"	d
GL_LINE_LOOP	include/linux/GLES/gl.h	58;"	d
GL_LINE_LOOP	include/linux/GLES2/gl2.h	56;"	d
GL_LINE_LOOP	include/linux/GLES3/gl3.h	90;"	d
GL_LINE_LOOP	include/linux/GLES3/gl31.h	86;"	d
GL_LINE_SMOOTH	include/linux/GLES/gl.h	149;"	d
GL_LINE_SMOOTH_HINT	include/linux/GLES/gl.h	293;"	d
GL_LINE_STRIP	include/linux/GLES/gl.h	59;"	d
GL_LINE_STRIP	include/linux/GLES2/gl2.h	57;"	d
GL_LINE_STRIP	include/linux/GLES3/gl3.h	91;"	d
GL_LINE_STRIP	include/linux/GLES3/gl31.h	87;"	d
GL_LINE_WIDTH	include/linux/GLES/gl.h	199;"	d
GL_LINE_WIDTH	include/linux/GLES2/gl2.h	168;"	d
GL_LINE_WIDTH	include/linux/GLES3/gl3.h	192;"	d
GL_LINE_WIDTH	include/linux/GLES3/gl31.h	147;"	d
GL_LINK_STATUS	include/linux/GLES2/gl2.h	270;"	d
GL_LINK_STATUS	include/linux/GLES3/gl3.h	294;"	d
GL_LINK_STATUS	include/linux/GLES3/gl31.h	227;"	d
GL_LOCATION	include/linux/GLES3/gl31.h	995;"	d
GL_LOGIC_OP_MODE	include/linux/GLES/gl.h	230;"	d
GL_LOSE_CONTEXT_ON_RESET_EXT	include/linux/GLES/glext.h	366;"	d
GL_LOSE_CONTEXT_ON_RESET_EXT	include/linux/GLES2/gl2ext.h	524;"	d
GL_LOW_FLOAT	include/linux/GLES2/gl2.h	419;"	d
GL_LOW_FLOAT	include/linux/GLES3/gl3.h	443;"	d
GL_LOW_FLOAT	include/linux/GLES3/gl31.h	341;"	d
GL_LOW_INT	include/linux/GLES2/gl2.h	422;"	d
GL_LOW_INT	include/linux/GLES3/gl3.h	446;"	d
GL_LOW_INT	include/linux/GLES3/gl31.h	344;"	d
GL_LUMINANCE	include/linux/GLES/gl.h	365;"	d
GL_LUMINANCE	include/linux/GLES2/gl2.h	249;"	d
GL_LUMINANCE	include/linux/GLES3/gl3.h	273;"	d
GL_LUMINANCE	include/linux/GLES3/gl31.h	211;"	d
GL_LUMINANCE16F_EXT	include/linux/GLES/glext.h	416;"	d
GL_LUMINANCE16F_EXT	include/linux/GLES2/gl2ext.h	601;"	d
GL_LUMINANCE32F_EXT	include/linux/GLES/glext.h	411;"	d
GL_LUMINANCE32F_EXT	include/linux/GLES2/gl2ext.h	596;"	d
GL_LUMINANCE4_ALPHA4_OES	include/linux/GLES2/gl2ext.h	103;"	d
GL_LUMINANCE8_ALPHA8_EXT	include/linux/GLES/glext.h	407;"	d
GL_LUMINANCE8_ALPHA8_EXT	include/linux/GLES2/gl2ext.h	592;"	d
GL_LUMINANCE8_ALPHA8_OES	include/linux/GLES2/gl2ext.h	104;"	d
GL_LUMINANCE8_EXT	include/linux/GLES/glext.h	406;"	d
GL_LUMINANCE8_EXT	include/linux/GLES2/gl2ext.h	591;"	d
GL_LUMINANCE8_OES	include/linux/GLES2/gl2ext.h	105;"	d
GL_LUMINANCE_ALPHA	include/linux/GLES/gl.h	366;"	d
GL_LUMINANCE_ALPHA	include/linux/GLES2/gl2.h	250;"	d
GL_LUMINANCE_ALPHA	include/linux/GLES3/gl3.h	274;"	d
GL_LUMINANCE_ALPHA	include/linux/GLES3/gl31.h	212;"	d
GL_LUMINANCE_ALPHA16F_EXT	include/linux/GLES/glext.h	417;"	d
GL_LUMINANCE_ALPHA16F_EXT	include/linux/GLES2/gl2ext.h	602;"	d
GL_LUMINANCE_ALPHA32F_EXT	include/linux/GLES/glext.h	412;"	d
GL_LUMINANCE_ALPHA32F_EXT	include/linux/GLES2/gl2ext.h	597;"	d
GL_MAJOR_VERSION	include/linux/GLES3/gl3.h	575;"	d
GL_MAJOR_VERSION	include/linux/GLES3/gl31.h	607;"	d
GL_MALI_PROGRAM_BINARY_ARM	include/linux/GLES2/gl2ext.h	418;"	d
GL_MALI_SHADER_BINARY_ARM	include/linux/GLES2/gl2ext.h	423;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	include/linux/GLES3/gl3.h	686;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	include/linux/GLES3/gl31.h	718;"	d
GL_MAP_FLUSH_EXPLICIT_BIT_EXT	include/linux/GLES/glext.h	335;"	d
GL_MAP_FLUSH_EXPLICIT_BIT_EXT	include/linux/GLES2/gl2ext.h	475;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	include/linux/GLES3/gl3.h	685;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	include/linux/GLES3/gl31.h	717;"	d
GL_MAP_INVALIDATE_BUFFER_BIT_EXT	include/linux/GLES/glext.h	334;"	d
GL_MAP_INVALIDATE_BUFFER_BIT_EXT	include/linux/GLES2/gl2ext.h	474;"	d
GL_MAP_INVALIDATE_RANGE_BIT	include/linux/GLES3/gl3.h	684;"	d
GL_MAP_INVALIDATE_RANGE_BIT	include/linux/GLES3/gl31.h	716;"	d
GL_MAP_INVALIDATE_RANGE_BIT_EXT	include/linux/GLES/glext.h	333;"	d
GL_MAP_INVALIDATE_RANGE_BIT_EXT	include/linux/GLES2/gl2ext.h	473;"	d
GL_MAP_READ_BIT	include/linux/GLES3/gl3.h	682;"	d
GL_MAP_READ_BIT	include/linux/GLES3/gl31.h	714;"	d
GL_MAP_READ_BIT_EXT	include/linux/GLES/glext.h	331;"	d
GL_MAP_READ_BIT_EXT	include/linux/GLES2/gl2ext.h	471;"	d
GL_MAP_UNSYNCHRONIZED_BIT	include/linux/GLES3/gl3.h	687;"	d
GL_MAP_UNSYNCHRONIZED_BIT	include/linux/GLES3/gl31.h	719;"	d
GL_MAP_UNSYNCHRONIZED_BIT_EXT	include/linux/GLES/glext.h	336;"	d
GL_MAP_UNSYNCHRONIZED_BIT_EXT	include/linux/GLES2/gl2ext.h	476;"	d
GL_MAP_WRITE_BIT	include/linux/GLES3/gl3.h	683;"	d
GL_MAP_WRITE_BIT	include/linux/GLES3/gl31.h	715;"	d
GL_MAP_WRITE_BIT_EXT	include/linux/GLES/glext.h	332;"	d
GL_MAP_WRITE_BIT_EXT	include/linux/GLES2/gl2ext.h	472;"	d
GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES	include/linux/GLES/glext.h	153;"	d
GL_MATRIX_INDEX_ARRAY_OES	include/linux/GLES/glext.h	146;"	d
GL_MATRIX_INDEX_ARRAY_POINTER_OES	include/linux/GLES/glext.h	152;"	d
GL_MATRIX_INDEX_ARRAY_SIZE_OES	include/linux/GLES/glext.h	149;"	d
GL_MATRIX_INDEX_ARRAY_STRIDE_OES	include/linux/GLES/glext.h	151;"	d
GL_MATRIX_INDEX_ARRAY_TYPE_OES	include/linux/GLES/glext.h	150;"	d
GL_MATRIX_MODE	include/linux/GLES/gl.h	218;"	d
GL_MATRIX_PALETTE_OES	include/linux/GLES/glext.h	145;"	d
GL_MATRIX_STRIDE	include/linux/GLES3/gl31.h	983;"	d
GL_MAX	include/linux/GLES3/gl3.h	523;"	d
GL_MAX	include/linux/GLES3/gl31.h	555;"	d
GL_MAX_3D_TEXTURE_SIZE	include/linux/GLES3/gl3.h	514;"	d
GL_MAX_3D_TEXTURE_SIZE	include/linux/GLES3/gl31.h	546;"	d
GL_MAX_3D_TEXTURE_SIZE_OES	include/linux/GLES2/gl2ext.h	145;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	include/linux/GLES3/gl3.h	583;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	include/linux/GLES3/gl31.h	615;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS	include/linux/GLES3/gl31.h	1012;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE	include/linux/GLES3/gl31.h	1011;"	d
GL_MAX_CLIP_PLANES	include/linux/GLES/gl.h	238;"	d
GL_MAX_CLIP_PLANES_IMG	include/linux/GLES/glext.h	460;"	d
GL_MAX_COLOR_ATTACHMENTS	include/linux/GLES3/gl3.h	663;"	d
GL_MAX_COLOR_ATTACHMENTS	include/linux/GLES3/gl31.h	695;"	d
GL_MAX_COLOR_ATTACHMENTS_NV	include/linux/GLES2/gl2ext.h	741;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	include/linux/GLES3/gl31.h	1078;"	d
GL_MAX_COMBINED_ATOMIC_COUNTERS	include/linux/GLES3/gl31.h	1010;"	d
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS	include/linux/GLES3/gl31.h	1007;"	d
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	include/linux/GLES3/gl31.h	948;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	include/linux/GLES3/gl3.h	729;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	include/linux/GLES3/gl31.h	761;"	d
GL_MAX_COMBINED_IMAGE_UNIFORMS	include/linux/GLES3/gl31.h	1018;"	d
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES	include/linux/GLES3/gl31.h	1068;"	d
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS	include/linux/GLES3/gl31.h	1063;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	include/linux/GLES2/gl2.h	264;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl3.h	288;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl31.h	221;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	include/linux/GLES3/gl3.h	725;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	include/linux/GLES3/gl31.h	757;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	include/linux/GLES3/gl3.h	728;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	include/linux/GLES3/gl31.h	760;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTERS	include/linux/GLES3/gl31.h	947;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS	include/linux/GLES3/gl31.h	946;"	d
GL_MAX_COMPUTE_IMAGE_UNIFORMS	include/linux/GLES3/gl31.h	943;"	d
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS	include/linux/GLES3/gl31.h	1062;"	d
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE	include/linux/GLES3/gl31.h	944;"	d
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl31.h	942;"	d
GL_MAX_COMPUTE_UNIFORM_BLOCKS	include/linux/GLES3/gl31.h	941;"	d
GL_MAX_COMPUTE_UNIFORM_COMPONENTS	include/linux/GLES3/gl31.h	945;"	d
GL_MAX_COMPUTE_WORK_GROUP_COUNT	include/linux/GLES3/gl31.h	950;"	d
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS	include/linux/GLES3/gl31.h	949;"	d
GL_MAX_COMPUTE_WORK_GROUP_SIZE	include/linux/GLES3/gl31.h	951;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	include/linux/GLES2/gl2.h	336;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	include/linux/GLES3/gl3.h	360;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	include/linux/GLES3/gl31.h	274;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES	include/linux/GLES/glext.h	210;"	d
GL_MAX_DEBUG_GROUP_STACK_DEPTH	include/linux/GLES2/gl2ext.h	207;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES	include/linux/GLES2/gl2ext.h	218;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH	include/linux/GLES2/gl2ext.h	217;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	include/linux/GLES3/gl31.h	1079;"	d
GL_MAX_DRAW_BUFFERS	include/linux/GLES3/gl3.h	539;"	d
GL_MAX_DRAW_BUFFERS	include/linux/GLES3/gl31.h	571;"	d
GL_MAX_DRAW_BUFFERS_NV	include/linux/GLES2/gl2ext.h	704;"	d
GL_MAX_ELEMENTS_INDICES	include/linux/GLES3/gl3.h	517;"	d
GL_MAX_ELEMENTS_INDICES	include/linux/GLES3/gl31.h	549;"	d
GL_MAX_ELEMENTS_VERTICES	include/linux/GLES3/gl3.h	516;"	d
GL_MAX_ELEMENTS_VERTICES	include/linux/GLES3/gl31.h	548;"	d
GL_MAX_ELEMENT_INDEX	include/linux/GLES3/gl3.h	797;"	d
GL_MAX_ELEMENT_INDEX	include/linux/GLES3/gl31.h	829;"	d
GL_MAX_EXT	include/linux/GLES/glext.h	319;"	d
GL_MAX_EXT	include/linux/GLES2/gl2ext.h	436;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTERS	include/linux/GLES3/gl31.h	1009;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS	include/linux/GLES3/gl31.h	1006;"	d
GL_MAX_FRAGMENT_IMAGE_UNIFORMS	include/linux/GLES3/gl31.h	1017;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	include/linux/GLES3/gl3.h	750;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	include/linux/GLES3/gl31.h	782;"	d
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS	include/linux/GLES3/gl31.h	1061;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	include/linux/GLES3/gl3.h	724;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	include/linux/GLES3/gl31.h	756;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	include/linux/GLES3/gl3.h	556;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	include/linux/GLES3/gl31.h	588;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	include/linux/GLES2/gl2.h	267;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	include/linux/GLES3/gl3.h	291;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	include/linux/GLES3/gl31.h	224;"	d
GL_MAX_FRAMEBUFFER_HEIGHT	include/linux/GLES3/gl31.h	964;"	d
GL_MAX_FRAMEBUFFER_SAMPLES	include/linux/GLES3/gl31.h	965;"	d
GL_MAX_FRAMEBUFFER_WIDTH	include/linux/GLES3/gl31.h	963;"	d
GL_MAX_IMAGE_UNITS	include/linux/GLES3/gl31.h	1015;"	d
GL_MAX_INTEGER_SAMPLES	include/linux/GLES3/gl31.h	1080;"	d
GL_MAX_LABEL_LENGTH	include/linux/GLES2/gl2ext.h	216;"	d
GL_MAX_LIGHTS	include/linux/GLES/gl.h	237;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	include/linux/GLES/gl.h	240;"	d
GL_MAX_MULTIVIEW_BUFFERS_EXT	include/linux/GLES2/gl2ext.h	494;"	d
GL_MAX_NAME_LENGTH	include/linux/GLES3/gl31.h	975;"	d
GL_MAX_NUM_ACTIVE_VARIABLES	include/linux/GLES3/gl31.h	976;"	d
GL_MAX_PALETTE_MATRICES_OES	include/linux/GLES/glext.h	144;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	include/linux/GLES3/gl3.h	585;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	include/linux/GLES3/gl31.h	617;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	include/linux/GLES3/gl31.h	1072;"	d
GL_MAX_PROJECTION_STACK_DEPTH	include/linux/GLES/gl.h	241;"	d
GL_MAX_RENDERBUFFER_SIZE	include/linux/GLES2/gl2.h	465;"	d
GL_MAX_RENDERBUFFER_SIZE	include/linux/GLES3/gl3.h	489;"	d
GL_MAX_RENDERBUFFER_SIZE	include/linux/GLES3/gl31.h	378;"	d
GL_MAX_RENDERBUFFER_SIZE_OES	include/linux/GLES/glext.h	122;"	d
GL_MAX_SAMPLES	include/linux/GLES3/gl3.h	680;"	d
GL_MAX_SAMPLES	include/linux/GLES3/gl31.h	712;"	d
GL_MAX_SAMPLES_ANGLE	include/linux/GLES2/gl2ext.h	309;"	d
GL_MAX_SAMPLES_APPLE	include/linux/GLES/glext.h	253;"	d
GL_MAX_SAMPLES_APPLE	include/linux/GLES2/gl2ext.h	354;"	d
GL_MAX_SAMPLES_EXT	include/linux/GLES/glext.h	345;"	d
GL_MAX_SAMPLES_EXT	include/linux/GLES2/gl2ext.h	485;"	d
GL_MAX_SAMPLES_IMG	include/linux/GLES/glext.h	467;"	d
GL_MAX_SAMPLES_IMG	include/linux/GLES2/gl2ext.h	676;"	d
GL_MAX_SAMPLE_MASK_WORDS	include/linux/GLES3/gl31.h	1077;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	include/linux/GLES3/gl3.h	751;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	include/linux/GLES3/gl31.h	783;"	d
GL_MAX_SERVER_WAIT_TIMEOUT_APPLE	include/linux/GLES/glext.h	275;"	d
GL_MAX_SERVER_WAIT_TIMEOUT_APPLE	include/linux/GLES2/gl2ext.h	385;"	d
GL_MAX_SHADER_STORAGE_BLOCK_SIZE	include/linux/GLES3/gl31.h	1065;"	d
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS	include/linux/GLES3/gl31.h	1064;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	include/linux/GLES2/gl2.h	266;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl3.h	290;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl31.h	223;"	d
GL_MAX_TEXTURE_LOD_BIAS	include/linux/GLES3/gl3.h	525;"	d
GL_MAX_TEXTURE_LOD_BIAS	include/linux/GLES3/gl31.h	557;"	d
GL_MAX_TEXTURE_LOD_BIAS_EXT	include/linux/GLES/glext.h	397;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	include/linux/GLES/glext.h	387;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	include/linux/GLES2/gl2ext.h	571;"	d
GL_MAX_TEXTURE_SIZE	include/linux/GLES/gl.h	239;"	d
GL_MAX_TEXTURE_SIZE	include/linux/GLES2/gl2.h	199;"	d
GL_MAX_TEXTURE_SIZE	include/linux/GLES3/gl3.h	223;"	d
GL_MAX_TEXTURE_SIZE	include/linux/GLES3/gl31.h	177;"	d
GL_MAX_TEXTURE_STACK_DEPTH	include/linux/GLES/gl.h	242;"	d
GL_MAX_TEXTURE_UNITS	include/linux/GLES/gl.h	244;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	include/linux/GLES3/gl3.h	601;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	include/linux/GLES3/gl31.h	633;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	include/linux/GLES3/gl3.h	602;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	include/linux/GLES3/gl31.h	634;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	include/linux/GLES3/gl3.h	595;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	include/linux/GLES3/gl31.h	627;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	include/linux/GLES3/gl3.h	727;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	include/linux/GLES3/gl31.h	759;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	include/linux/GLES3/gl3.h	726;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	include/linux/GLES3/gl31.h	758;"	d
GL_MAX_UNIFORM_LOCATIONS	include/linux/GLES3/gl31.h	958;"	d
GL_MAX_VARYING_COMPONENTS	include/linux/GLES3/gl3.h	586;"	d
GL_MAX_VARYING_COMPONENTS	include/linux/GLES3/gl31.h	618;"	d
GL_MAX_VARYING_VECTORS	include/linux/GLES2/gl2.h	263;"	d
GL_MAX_VARYING_VECTORS	include/linux/GLES3/gl3.h	287;"	d
GL_MAX_VARYING_VECTORS	include/linux/GLES3/gl31.h	220;"	d
GL_MAX_VERTEX_ATOMIC_COUNTERS	include/linux/GLES3/gl31.h	1008;"	d
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS	include/linux/GLES3/gl31.h	1005;"	d
GL_MAX_VERTEX_ATTRIBS	include/linux/GLES2/gl2.h	261;"	d
GL_MAX_VERTEX_ATTRIBS	include/linux/GLES3/gl3.h	285;"	d
GL_MAX_VERTEX_ATTRIBS	include/linux/GLES3/gl31.h	218;"	d
GL_MAX_VERTEX_ATTRIB_BINDINGS	include/linux/GLES3/gl31.h	1111;"	d
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET	include/linux/GLES3/gl31.h	1110;"	d
GL_MAX_VERTEX_ATTRIB_STRIDE	include/linux/GLES3/gl31.h	1112;"	d
GL_MAX_VERTEX_IMAGE_UNIFORMS	include/linux/GLES3/gl31.h	1016;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	include/linux/GLES3/gl3.h	749;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	include/linux/GLES3/gl31.h	781;"	d
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS	include/linux/GLES3/gl31.h	1060;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	include/linux/GLES2/gl2.h	265;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl3.h	289;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	include/linux/GLES3/gl31.h	222;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	include/linux/GLES3/gl3.h	723;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	include/linux/GLES3/gl31.h	755;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	include/linux/GLES3/gl3.h	557;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	include/linux/GLES3/gl31.h	589;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	include/linux/GLES2/gl2.h	262;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	include/linux/GLES3/gl3.h	286;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	include/linux/GLES3/gl31.h	219;"	d
GL_MAX_VERTEX_UNITS_OES	include/linux/GLES/glext.h	143;"	d
GL_MAX_VIEWPORT_DIMS	include/linux/GLES/gl.h	243;"	d
GL_MAX_VIEWPORT_DIMS	include/linux/GLES2/gl2.h	200;"	d
GL_MAX_VIEWPORT_DIMS	include/linux/GLES3/gl3.h	224;"	d
GL_MAX_VIEWPORT_DIMS	include/linux/GLES3/gl31.h	178;"	d
GL_MEDIUM_FLOAT	include/linux/GLES2/gl2.h	420;"	d
GL_MEDIUM_FLOAT	include/linux/GLES3/gl3.h	444;"	d
GL_MEDIUM_FLOAT	include/linux/GLES3/gl31.h	342;"	d
GL_MEDIUM_INT	include/linux/GLES2/gl2.h	423;"	d
GL_MEDIUM_INT	include/linux/GLES3/gl3.h	447;"	d
GL_MEDIUM_INT	include/linux/GLES3/gl31.h	345;"	d
GL_MIN	include/linux/GLES3/gl3.h	522;"	d
GL_MIN	include/linux/GLES3/gl31.h	554;"	d
GL_MINOR_VERSION	include/linux/GLES3/gl3.h	576;"	d
GL_MINOR_VERSION	include/linux/GLES3/gl31.h	608;"	d
GL_MIN_EXT	include/linux/GLES/glext.h	318;"	d
GL_MIN_EXT	include/linux/GLES2/gl2ext.h	435;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	include/linux/GLES3/gl3.h	584;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	include/linux/GLES3/gl31.h	616;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	include/linux/GLES3/gl31.h	1071;"	d
GL_MIRRORED_REPEAT	include/linux/GLES2/gl2.h	376;"	d
GL_MIRRORED_REPEAT	include/linux/GLES3/gl3.h	400;"	d
GL_MIRRORED_REPEAT	include/linux/GLES3/gl31.h	310;"	d
GL_MIRRORED_REPEAT_OES	include/linux/GLES/glext.h	217;"	d
GL_MODELVIEW	include/linux/GLES/gl.h	351;"	d
GL_MODELVIEW_MATRIX	include/linux/GLES/gl.h	223;"	d
GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES	include/linux/GLES/glext.h	136;"	d
GL_MODELVIEW_STACK_DEPTH	include/linux/GLES/gl.h	220;"	d
GL_MODULATE	include/linux/GLES/gl.h	413;"	d
GL_MODULATE_COLOR_IMG	include/linux/GLES/glext.h	443;"	d
GL_MULTISAMPLE	include/linux/GLES/gl.h	159;"	d
GL_MULTISAMPLE_BUFFER_BIT0_QCOM	include/linux/GLES/glext.h	543;"	d
GL_MULTISAMPLE_BUFFER_BIT0_QCOM	include/linux/GLES2/gl2ext.h	851;"	d
GL_MULTISAMPLE_BUFFER_BIT1_QCOM	include/linux/GLES/glext.h	544;"	d
GL_MULTISAMPLE_BUFFER_BIT1_QCOM	include/linux/GLES2/gl2ext.h	852;"	d
GL_MULTISAMPLE_BUFFER_BIT2_QCOM	include/linux/GLES/glext.h	545;"	d
GL_MULTISAMPLE_BUFFER_BIT2_QCOM	include/linux/GLES2/gl2ext.h	853;"	d
GL_MULTISAMPLE_BUFFER_BIT3_QCOM	include/linux/GLES/glext.h	546;"	d
GL_MULTISAMPLE_BUFFER_BIT3_QCOM	include/linux/GLES2/gl2ext.h	854;"	d
GL_MULTISAMPLE_BUFFER_BIT4_QCOM	include/linux/GLES/glext.h	547;"	d
GL_MULTISAMPLE_BUFFER_BIT4_QCOM	include/linux/GLES2/gl2ext.h	855;"	d
GL_MULTISAMPLE_BUFFER_BIT5_QCOM	include/linux/GLES/glext.h	548;"	d
GL_MULTISAMPLE_BUFFER_BIT5_QCOM	include/linux/GLES2/gl2ext.h	856;"	d
GL_MULTISAMPLE_BUFFER_BIT6_QCOM	include/linux/GLES/glext.h	549;"	d
GL_MULTISAMPLE_BUFFER_BIT6_QCOM	include/linux/GLES2/gl2ext.h	857;"	d
GL_MULTISAMPLE_BUFFER_BIT7_QCOM	include/linux/GLES/glext.h	550;"	d
GL_MULTISAMPLE_BUFFER_BIT7_QCOM	include/linux/GLES2/gl2ext.h	858;"	d
GL_MULTIVIEW_EXT	include/linux/GLES2/gl2ext.h	491;"	d
GL_NAME_LENGTH	include/linux/GLES3/gl31.h	977;"	d
GL_NAND	include/linux/GLES/gl.h	336;"	d
GL_NEAREST	include/linux/GLES/gl.h	427;"	d
GL_NEAREST	include/linux/GLES2/gl2.h	307;"	d
GL_NEAREST	include/linux/GLES3/gl3.h	331;"	d
GL_NEAREST	include/linux/GLES3/gl31.h	255;"	d
GL_NEAREST_MIPMAP_LINEAR	include/linux/GLES/gl.h	435;"	d
GL_NEAREST_MIPMAP_LINEAR	include/linux/GLES2/gl2.h	315;"	d
GL_NEAREST_MIPMAP_LINEAR	include/linux/GLES3/gl3.h	339;"	d
GL_NEAREST_MIPMAP_LINEAR	include/linux/GLES3/gl31.h	259;"	d
GL_NEAREST_MIPMAP_NEAREST	include/linux/GLES/gl.h	433;"	d
GL_NEAREST_MIPMAP_NEAREST	include/linux/GLES2/gl2.h	313;"	d
GL_NEAREST_MIPMAP_NEAREST	include/linux/GLES3/gl3.h	337;"	d
GL_NEAREST_MIPMAP_NEAREST	include/linux/GLES3/gl31.h	257;"	d
GL_NEVER	include/linux/GLES/gl.h	65;"	d
GL_NEVER	include/linux/GLES2/gl2.h	281;"	d
GL_NEVER	include/linux/GLES3/gl3.h	305;"	d
GL_NEVER	include/linux/GLES3/gl31.h	236;"	d
GL_NICEST	include/linux/GLES/gl.h	288;"	d
GL_NICEST	include/linux/GLES2/gl2.h	229;"	d
GL_NICEST	include/linux/GLES3/gl3.h	253;"	d
GL_NICEST	include/linux/GLES3/gl31.h	197;"	d
GL_NONE	include/linux/GLES2/gl2.h	455;"	d
GL_NONE	include/linux/GLES3/gl3.h	479;"	d
GL_NONE	include/linux/GLES3/gl31.h	370;"	d
GL_NONE_OES	include/linux/GLES/glext.h	91;"	d
GL_NOOP	include/linux/GLES/gl.h	327;"	d
GL_NOR	include/linux/GLES/gl.h	330;"	d
GL_NORMALIZE	include/linux/GLES/gl.h	152;"	d
GL_NORMAL_ARRAY	include/linux/GLES/gl.h	156;"	d
GL_NORMAL_ARRAY_BUFFER_BINDING	include/linux/GLES/gl.h	511;"	d
GL_NORMAL_ARRAY_POINTER	include/linux/GLES/gl.h	268;"	d
GL_NORMAL_ARRAY_STRIDE	include/linux/GLES/gl.h	260;"	d
GL_NORMAL_ARRAY_TYPE	include/linux/GLES/gl.h	259;"	d
GL_NORMAL_MAP_OES	include/linux/GLES/glext.h	200;"	d
GL_NOTEQUAL	include/linux/GLES/gl.h	70;"	d
GL_NOTEQUAL	include/linux/GLES2/gl2.h	286;"	d
GL_NOTEQUAL	include/linux/GLES3/gl3.h	310;"	d
GL_NOTEQUAL	include/linux/GLES3/gl31.h	241;"	d
GL_NO_ERROR	include/linux/GLES/gl.h	165;"	d
GL_NO_ERROR	include/linux/GLES2/gl2.h	157;"	d
GL_NO_ERROR	include/linux/GLES3/gl3.h	181;"	d
GL_NO_ERROR	include/linux/GLES3/gl31.h	140;"	d
GL_NO_RESET_NOTIFICATION_EXT	include/linux/GLES/glext.h	367;"	d
GL_NO_RESET_NOTIFICATION_EXT	include/linux/GLES2/gl2ext.h	525;"	d
GL_NUM_ACTIVE_VARIABLES	include/linux/GLES3/gl31.h	988;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES/gl.h	282;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES2/gl2.h	223;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES3/gl3.h	247;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	include/linux/GLES3/gl31.h	193;"	d
GL_NUM_EXTENSIONS	include/linux/GLES3/gl3.h	577;"	d
GL_NUM_EXTENSIONS	include/linux/GLES3/gl31.h	609;"	d
GL_NUM_PROGRAM_BINARY_FORMATS	include/linux/GLES3/gl3.h	784;"	d
GL_NUM_PROGRAM_BINARY_FORMATS	include/linux/GLES3/gl31.h	816;"	d
GL_NUM_PROGRAM_BINARY_FORMATS_OES	include/linux/GLES2/gl2ext.h	77;"	d
GL_NUM_SAMPLE_COUNTS	include/linux/GLES3/gl3.h	798;"	d
GL_NUM_SAMPLE_COUNTS	include/linux/GLES3/gl31.h	830;"	d
GL_NUM_SHADER_BINARY_FORMATS	include/linux/GLES2/gl2.h	416;"	d
GL_NUM_SHADER_BINARY_FORMATS	include/linux/GLES3/gl3.h	440;"	d
GL_NUM_SHADER_BINARY_FORMATS	include/linux/GLES3/gl31.h	340;"	d
GL_NV_coverage_sample	include/linux/GLES2/gl2ext.h	1616;"	d
GL_NV_depth_nonlinear	include/linux/GLES2/gl2ext.h	1627;"	d
GL_NV_draw_buffers	include/linux/GLES2/gl2ext.h	1632;"	d
GL_NV_fbo_color_attachments	include/linux/GLES2/gl2ext.h	1641;"	d
GL_NV_fence	include/linux/GLES/glext.h	1176;"	d
GL_NV_fence	include/linux/GLES2/gl2ext.h	1646;"	d
GL_NV_read_buffer	include/linux/GLES2/gl2ext.h	1667;"	d
GL_NV_read_buffer_front	include/linux/GLES2/gl2ext.h	1676;"	d
GL_NV_read_depth	include/linux/GLES2/gl2ext.h	1681;"	d
GL_NV_read_depth_stencil	include/linux/GLES2/gl2ext.h	1686;"	d
GL_NV_read_stencil	include/linux/GLES2/gl2ext.h	1691;"	d
GL_NV_texture_compression_s3tc_update	include/linux/GLES2/gl2ext.h	1696;"	d
GL_NV_texture_npot_2D_mipmap	include/linux/GLES2/gl2ext.h	1701;"	d
GL_OBJECT_TYPE	include/linux/GLES3/gl3.h	752;"	d
GL_OBJECT_TYPE	include/linux/GLES3/gl31.h	784;"	d
GL_OBJECT_TYPE_APPLE	include/linux/GLES/glext.h	276;"	d
GL_OBJECT_TYPE_APPLE	include/linux/GLES2/gl2ext.h	386;"	d
GL_OES_EGL_image	include/linux/GLES/glext.h	633;"	d
GL_OES_EGL_image	include/linux/GLES2/gl2ext.h	905;"	d
GL_OES_EGL_image_external	include/linux/GLES/glext.h	644;"	d
GL_OES_EGL_image_external	include/linux/GLES2/gl2ext.h	916;"	d
GL_OES_blend_equation_separate	include/linux/GLES/glext.h	563;"	d
GL_OES_blend_func_separate	include/linux/GLES/glext.h	572;"	d
GL_OES_blend_subtract	include/linux/GLES/glext.h	581;"	d
GL_OES_byte_coordinates	include/linux/GLES/glext.h	590;"	d
GL_OES_compressed_ETC1_RGB8_texture	include/linux/GLES/glext.h	595;"	d
GL_OES_compressed_ETC1_RGB8_texture	include/linux/GLES2/gl2ext.h	880;"	d
GL_OES_compressed_paletted_texture	include/linux/GLES/gl.h	751;"	d
GL_OES_compressed_paletted_texture	include/linux/GLES2/gl2ext.h	885;"	d
GL_OES_depth24	include/linux/GLES/glext.h	600;"	d
GL_OES_depth24	include/linux/GLES2/gl2ext.h	890;"	d
GL_OES_depth32	include/linux/GLES/glext.h	605;"	d
GL_OES_depth32	include/linux/GLES2/gl2ext.h	895;"	d
GL_OES_depth_texture	include/linux/GLES2/gl2ext.h	900;"	d
GL_OES_draw_texture	include/linux/GLES/glext.h	610;"	d
GL_OES_element_index_uint	include/linux/GLES/glext.h	650;"	d
GL_OES_element_index_uint	include/linux/GLES2/gl2ext.h	922;"	d
GL_OES_extended_matrix_palette	include/linux/GLES/glext.h	655;"	d
GL_OES_fbo_render_mipmap	include/linux/GLES/glext.h	660;"	d
GL_OES_fbo_render_mipmap	include/linux/GLES2/gl2ext.h	927;"	d
GL_OES_fixed_point	include/linux/GLES/glext.h	665;"	d
GL_OES_fragment_precision_high	include/linux/GLES2/gl2ext.h	932;"	d
GL_OES_framebuffer_object	include/linux/GLES/glext.h	750;"	d
GL_OES_get_program_binary	include/linux/GLES2/gl2ext.h	937;"	d
GL_OES_mapbuffer	include/linux/GLES/glext.h	787;"	d
GL_OES_mapbuffer	include/linux/GLES2/gl2ext.h	948;"	d
GL_OES_matrix_get	include/linux/GLES/glext.h	800;"	d
GL_OES_matrix_palette	include/linux/GLES/glext.h	805;"	d
GL_OES_packed_depth_stencil	include/linux/GLES/glext.h	820;"	d
GL_OES_packed_depth_stencil	include/linux/GLES2/gl2ext.h	961;"	d
GL_OES_point_size_array	include/linux/GLES/gl.h	756;"	d
GL_OES_point_sprite	include/linux/GLES/gl.h	762;"	d
GL_OES_query_matrix	include/linux/GLES/glext.h	830;"	d
GL_OES_read_format	include/linux/GLES/gl.h	746;"	d
GL_OES_required_internalformat	include/linux/GLES/glext.h	825;"	d
GL_OES_required_internalformat	include/linux/GLES2/gl2ext.h	966;"	d
GL_OES_rgb8_rgba8	include/linux/GLES/glext.h	839;"	d
GL_OES_rgb8_rgba8	include/linux/GLES2/gl2ext.h	971;"	d
GL_OES_single_precision	include/linux/GLES/glext.h	844;"	d
GL_OES_standard_derivatives	include/linux/GLES2/gl2ext.h	976;"	d
GL_OES_stencil1	include/linux/GLES/glext.h	863;"	d
GL_OES_stencil1	include/linux/GLES2/gl2ext.h	981;"	d
GL_OES_stencil4	include/linux/GLES/glext.h	868;"	d
GL_OES_stencil4	include/linux/GLES2/gl2ext.h	986;"	d
GL_OES_stencil8	include/linux/GLES/glext.h	873;"	d
GL_OES_stencil_wrap	include/linux/GLES/glext.h	878;"	d
GL_OES_surfaceless_context	include/linux/GLES2/gl2ext.h	990;"	d
GL_OES_texture_3D	include/linux/GLES2/gl2ext.h	995;"	d
GL_OES_texture_cube_map	include/linux/GLES/glext.h	883;"	d
GL_OES_texture_env_crossbar	include/linux/GLES/glext.h	908;"	d
GL_OES_texture_float	include/linux/GLES2/gl2ext.h	1014;"	d
GL_OES_texture_float_linear	include/linux/GLES2/gl2ext.h	1019;"	d
GL_OES_texture_half_float	include/linux/GLES2/gl2ext.h	1024;"	d
GL_OES_texture_half_float_linear	include/linux/GLES2/gl2ext.h	1029;"	d
GL_OES_texture_mirrored_repeat	include/linux/GLES/glext.h	913;"	d
GL_OES_texture_npot	include/linux/GLES2/gl2ext.h	1034;"	d
GL_OES_vertex_array_object	include/linux/GLES/glext.h	918;"	d
GL_OES_vertex_array_object	include/linux/GLES2/gl2ext.h	1039;"	d
GL_OES_vertex_half_float	include/linux/GLES2/gl2ext.h	1054;"	d
GL_OES_vertex_type_10_10_10_2	include/linux/GLES2/gl2ext.h	1059;"	d
GL_OFFSET	include/linux/GLES3/gl31.h	980;"	d
GL_ONE	include/linux/GLES/gl.h	76;"	d
GL_ONE	include/linux/GLES2/gl2.h	74;"	d
GL_ONE	include/linux/GLES3/gl3.h	98;"	d
GL_ONE	include/linux/GLES3/gl31.h	92;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	include/linux/GLES2/gl2.h	111;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	include/linux/GLES3/gl3.h	135;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	include/linux/GLES3/gl31.h	115;"	d
GL_ONE_MINUS_CONSTANT_COLOR	include/linux/GLES2/gl2.h	109;"	d
GL_ONE_MINUS_CONSTANT_COLOR	include/linux/GLES3/gl3.h	133;"	d
GL_ONE_MINUS_CONSTANT_COLOR	include/linux/GLES3/gl31.h	113;"	d
GL_ONE_MINUS_DST_ALPHA	include/linux/GLES/gl.h	82;"	d
GL_ONE_MINUS_DST_ALPHA	include/linux/GLES2/gl2.h	80;"	d
GL_ONE_MINUS_DST_ALPHA	include/linux/GLES3/gl3.h	104;"	d
GL_ONE_MINUS_DST_ALPHA	include/linux/GLES3/gl31.h	98;"	d
GL_ONE_MINUS_DST_COLOR	include/linux/GLES/gl.h	88;"	d
GL_ONE_MINUS_DST_COLOR	include/linux/GLES2/gl2.h	86;"	d
GL_ONE_MINUS_DST_COLOR	include/linux/GLES3/gl3.h	110;"	d
GL_ONE_MINUS_DST_COLOR	include/linux/GLES3/gl31.h	100;"	d
GL_ONE_MINUS_SRC_ALPHA	include/linux/GLES/gl.h	80;"	d
GL_ONE_MINUS_SRC_ALPHA	include/linux/GLES2/gl2.h	78;"	d
GL_ONE_MINUS_SRC_ALPHA	include/linux/GLES3/gl3.h	102;"	d
GL_ONE_MINUS_SRC_ALPHA	include/linux/GLES3/gl31.h	96;"	d
GL_ONE_MINUS_SRC_COLOR	include/linux/GLES/gl.h	78;"	d
GL_ONE_MINUS_SRC_COLOR	include/linux/GLES2/gl2.h	76;"	d
GL_ONE_MINUS_SRC_COLOR	include/linux/GLES3/gl3.h	100;"	d
GL_ONE_MINUS_SRC_COLOR	include/linux/GLES3/gl31.h	94;"	d
GL_OPERAND0_ALPHA	include/linux/GLES/gl.h	535;"	d
GL_OPERAND0_RGB	include/linux/GLES/gl.h	532;"	d
GL_OPERAND1_ALPHA	include/linux/GLES/gl.h	536;"	d
GL_OPERAND1_RGB	include/linux/GLES/gl.h	533;"	d
GL_OPERAND2_ALPHA	include/linux/GLES/gl.h	537;"	d
GL_OPERAND2_RGB	include/linux/GLES/gl.h	534;"	d
GL_OR	include/linux/GLES/gl.h	329;"	d
GL_OR_INVERTED	include/linux/GLES/gl.h	335;"	d
GL_OR_REVERSE	include/linux/GLES/gl.h	333;"	d
GL_OUT_OF_MEMORY	include/linux/GLES/gl.h	171;"	d
GL_OUT_OF_MEMORY	include/linux/GLES2/gl2.h	161;"	d
GL_OUT_OF_MEMORY	include/linux/GLES3/gl3.h	185;"	d
GL_OUT_OF_MEMORY	include/linux/GLES3/gl31.h	144;"	d
GL_PACK_ALIGNMENT	include/linux/GLES/gl.h	236;"	d
GL_PACK_ALIGNMENT	include/linux/GLES/gl.h	370;"	d
GL_PACK_ALIGNMENT	include/linux/GLES2/gl2.h	198;"	d
GL_PACK_ALIGNMENT	include/linux/GLES3/gl3.h	222;"	d
GL_PACK_ALIGNMENT	include/linux/GLES3/gl31.h	176;"	d
GL_PACK_REVERSE_ROW_ORDER_ANGLE	include/linux/GLES2/gl2ext.h	319;"	d
GL_PACK_ROW_LENGTH	include/linux/GLES3/gl3.h	499;"	d
GL_PACK_ROW_LENGTH	include/linux/GLES3/gl31.h	531;"	d
GL_PACK_SKIP_PIXELS	include/linux/GLES3/gl3.h	501;"	d
GL_PACK_SKIP_PIXELS	include/linux/GLES3/gl31.h	533;"	d
GL_PACK_SKIP_ROWS	include/linux/GLES3/gl3.h	500;"	d
GL_PACK_SKIP_ROWS	include/linux/GLES3/gl31.h	532;"	d
GL_PALETTE4_R5_G6_B5_OES	include/linux/GLES/gl.h	565;"	d
GL_PALETTE4_R5_G6_B5_OES	include/linux/GLES2/gl2ext.h	32;"	d
GL_PALETTE4_RGB5_A1_OES	include/linux/GLES/gl.h	567;"	d
GL_PALETTE4_RGB5_A1_OES	include/linux/GLES2/gl2ext.h	34;"	d
GL_PALETTE4_RGB8_OES	include/linux/GLES/gl.h	563;"	d
GL_PALETTE4_RGB8_OES	include/linux/GLES2/gl2ext.h	30;"	d
GL_PALETTE4_RGBA4_OES	include/linux/GLES/gl.h	566;"	d
GL_PALETTE4_RGBA4_OES	include/linux/GLES2/gl2ext.h	33;"	d
GL_PALETTE4_RGBA8_OES	include/linux/GLES/gl.h	564;"	d
GL_PALETTE4_RGBA8_OES	include/linux/GLES2/gl2ext.h	31;"	d
GL_PALETTE8_R5_G6_B5_OES	include/linux/GLES/gl.h	570;"	d
GL_PALETTE8_R5_G6_B5_OES	include/linux/GLES2/gl2ext.h	37;"	d
GL_PALETTE8_RGB5_A1_OES	include/linux/GLES/gl.h	572;"	d
GL_PALETTE8_RGB5_A1_OES	include/linux/GLES2/gl2ext.h	39;"	d
GL_PALETTE8_RGB8_OES	include/linux/GLES/gl.h	568;"	d
GL_PALETTE8_RGB8_OES	include/linux/GLES2/gl2ext.h	35;"	d
GL_PALETTE8_RGBA4_OES	include/linux/GLES/gl.h	571;"	d
GL_PALETTE8_RGBA4_OES	include/linux/GLES2/gl2ext.h	38;"	d
GL_PALETTE8_RGBA8_OES	include/linux/GLES/gl.h	569;"	d
GL_PALETTE8_RGBA8_OES	include/linux/GLES2/gl2ext.h	36;"	d
GL_PERCENTAGE_AMD	include/linux/GLES2/gl2ext.h	282;"	d
GL_PERFMON_GLOBAL_MODE_QCOM	include/linux/GLES/glext.h	509;"	d
GL_PERFMON_GLOBAL_MODE_QCOM	include/linux/GLES2/gl2ext.h	817;"	d
GL_PERFMON_RESULT_AMD	include/linux/GLES2/gl2ext.h	285;"	d
GL_PERFMON_RESULT_AVAILABLE_AMD	include/linux/GLES2/gl2ext.h	283;"	d
GL_PERFMON_RESULT_SIZE_AMD	include/linux/GLES2/gl2ext.h	284;"	d
GL_PERSPECTIVE_CORRECTION_HINT	include/linux/GLES/gl.h	291;"	d
GL_PIXEL_BUFFER_BARRIER_BIT	include/linux/GLES3/gl31.h	1031;"	d
GL_PIXEL_PACK_BUFFER	include/linux/GLES3/gl3.h	561;"	d
GL_PIXEL_PACK_BUFFER	include/linux/GLES3/gl31.h	593;"	d
GL_PIXEL_PACK_BUFFER_BINDING	include/linux/GLES3/gl3.h	563;"	d
GL_PIXEL_PACK_BUFFER_BINDING	include/linux/GLES3/gl31.h	595;"	d
GL_PIXEL_UNPACK_BUFFER	include/linux/GLES3/gl3.h	562;"	d
GL_PIXEL_UNPACK_BUFFER	include/linux/GLES3/gl31.h	594;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	include/linux/GLES3/gl3.h	564;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	include/linux/GLES3/gl31.h	596;"	d
GL_POINTS	include/linux/GLES/gl.h	56;"	d
GL_POINTS	include/linux/GLES2/gl2.h	54;"	d
GL_POINTS	include/linux/GLES3/gl3.h	88;"	d
GL_POINTS	include/linux/GLES3/gl31.h	84;"	d
GL_POINT_DISTANCE_ATTENUATION	include/linux/GLES/gl.h	197;"	d
GL_POINT_FADE_THRESHOLD_SIZE	include/linux/GLES/gl.h	196;"	d
GL_POINT_SIZE	include/linux/GLES/gl.h	193;"	d
GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES	include/linux/GLES/gl.h	581;"	d
GL_POINT_SIZE_ARRAY_OES	include/linux/GLES/gl.h	577;"	d
GL_POINT_SIZE_ARRAY_POINTER_OES	include/linux/GLES/gl.h	580;"	d
GL_POINT_SIZE_ARRAY_STRIDE_OES	include/linux/GLES/gl.h	579;"	d
GL_POINT_SIZE_ARRAY_TYPE_OES	include/linux/GLES/gl.h	578;"	d
GL_POINT_SIZE_MAX	include/linux/GLES/gl.h	195;"	d
GL_POINT_SIZE_MIN	include/linux/GLES/gl.h	194;"	d
GL_POINT_SMOOTH	include/linux/GLES/gl.h	148;"	d
GL_POINT_SMOOTH_HINT	include/linux/GLES/gl.h	292;"	d
GL_POINT_SPRITE_OES	include/linux/GLES/gl.h	586;"	d
GL_POLYGON_OFFSET_FACTOR	include/linux/GLES/gl.h	254;"	d
GL_POLYGON_OFFSET_FACTOR	include/linux/GLES2/gl2.h	210;"	d
GL_POLYGON_OFFSET_FACTOR	include/linux/GLES3/gl3.h	234;"	d
GL_POLYGON_OFFSET_FACTOR	include/linux/GLES3/gl31.h	187;"	d
GL_POLYGON_OFFSET_FILL	include/linux/GLES/gl.h	154;"	d
GL_POLYGON_OFFSET_FILL	include/linux/GLES/gl.h	253;"	d
GL_POLYGON_OFFSET_FILL	include/linux/GLES2/gl2.h	152;"	d
GL_POLYGON_OFFSET_FILL	include/linux/GLES3/gl3.h	176;"	d
GL_POLYGON_OFFSET_FILL	include/linux/GLES3/gl31.h	137;"	d
GL_POLYGON_OFFSET_UNITS	include/linux/GLES/gl.h	252;"	d
GL_POLYGON_OFFSET_UNITS	include/linux/GLES2/gl2.h	208;"	d
GL_POLYGON_OFFSET_UNITS	include/linux/GLES3/gl3.h	232;"	d
GL_POLYGON_OFFSET_UNITS	include/linux/GLES3/gl31.h	186;"	d
GL_POSITION	include/linux/GLES/gl.h	305;"	d
GL_PREVIOUS	include/linux/GLES/gl.h	531;"	d
GL_PRIMARY_COLOR	include/linux/GLES/gl.h	530;"	d
GL_PRIMITIVE_RESTART_FIXED_INDEX	include/linux/GLES3/gl3.h	714;"	d
GL_PRIMITIVE_RESTART_FIXED_INDEX	include/linux/GLES3/gl31.h	746;"	d
GL_PROGRAM	include/linux/GLES2/gl2ext.h	211;"	d
GL_PROGRAM_BINARY_FORMATS	include/linux/GLES3/gl3.h	785;"	d
GL_PROGRAM_BINARY_FORMATS	include/linux/GLES3/gl31.h	817;"	d
GL_PROGRAM_BINARY_FORMATS_OES	include/linux/GLES2/gl2ext.h	78;"	d
GL_PROGRAM_BINARY_LENGTH	include/linux/GLES3/gl3.h	783;"	d
GL_PROGRAM_BINARY_LENGTH	include/linux/GLES3/gl31.h	815;"	d
GL_PROGRAM_BINARY_LENGTH_OES	include/linux/GLES2/gl2ext.h	76;"	d
GL_PROGRAM_BINARY_RETRIEVABLE_HINT	include/linux/GLES3/gl3.h	782;"	d
GL_PROGRAM_BINARY_RETRIEVABLE_HINT	include/linux/GLES3/gl31.h	814;"	d
GL_PROGRAM_INPUT	include/linux/GLES3/gl31.h	968;"	d
GL_PROGRAM_OBJECT_EXT	include/linux/GLES2/gl2ext.h	452;"	d
GL_PROGRAM_OUTPUT	include/linux/GLES3/gl31.h	969;"	d
GL_PROGRAM_PIPELINE_BINDING	include/linux/GLES3/gl31.h	1001;"	d
GL_PROGRAM_PIPELINE_BINDING_EXT	include/linux/GLES2/gl2ext.h	535;"	d
GL_PROGRAM_PIPELINE_OBJECT_EXT	include/linux/GLES2/gl2ext.h	451;"	d
GL_PROGRAM_SEPARABLE	include/linux/GLES3/gl31.h	999;"	d
GL_PROGRAM_SEPARABLE_EXT	include/linux/GLES2/gl2ext.h	533;"	d
GL_PROJECTION	include/linux/GLES/gl.h	352;"	d
GL_PROJECTION_MATRIX	include/linux/GLES/gl.h	224;"	d
GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES	include/linux/GLES/glext.h	137;"	d
GL_PROJECTION_STACK_DEPTH	include/linux/GLES/gl.h	221;"	d
GL_QCOM_alpha_test	include/linux/GLES2/gl2ext.h	1710;"	d
GL_QCOM_binning_control	include/linux/GLES2/gl2ext.h	1719;"	d
GL_QCOM_driver_control	include/linux/GLES/glext.h	1201;"	d
GL_QCOM_driver_control	include/linux/GLES2/gl2ext.h	1724;"	d
GL_QCOM_extended_get	include/linux/GLES/glext.h	1216;"	d
GL_QCOM_extended_get	include/linux/GLES2/gl2ext.h	1739;"	d
GL_QCOM_extended_get2	include/linux/GLES/glext.h	1239;"	d
GL_QCOM_extended_get2	include/linux/GLES2/gl2ext.h	1762;"	d
GL_QCOM_perfmon_global_mode	include/linux/GLES/glext.h	1254;"	d
GL_QCOM_perfmon_global_mode	include/linux/GLES2/gl2ext.h	1777;"	d
GL_QCOM_tiled_rendering	include/linux/GLES/glext.h	1264;"	d
GL_QCOM_tiled_rendering	include/linux/GLES2/gl2ext.h	1787;"	d
GL_QCOM_writeonly_rendering	include/linux/GLES/glext.h	1259;"	d
GL_QCOM_writeonly_rendering	include/linux/GLES2/gl2ext.h	1782;"	d
GL_QUADRATIC_ATTENUATION	include/linux/GLES/gl.h	311;"	d
GL_QUERY	include/linux/GLES2/gl2ext.h	212;"	d
GL_QUERY_OBJECT_EXT	include/linux/GLES2/gl2ext.h	455;"	d
GL_QUERY_RESULT	include/linux/GLES3/gl3.h	529;"	d
GL_QUERY_RESULT	include/linux/GLES3/gl31.h	561;"	d
GL_QUERY_RESULT_AVAILABLE	include/linux/GLES3/gl3.h	530;"	d
GL_QUERY_RESULT_AVAILABLE	include/linux/GLES3/gl31.h	562;"	d
GL_QUERY_RESULT_AVAILABLE_EXT	include/linux/GLES2/gl2ext.h	506;"	d
GL_QUERY_RESULT_EXT	include/linux/GLES2/gl2ext.h	505;"	d
GL_R11F_G11F_B10F	include/linux/GLES3/gl3.h	589;"	d
GL_R11F_G11F_B10F	include/linux/GLES3/gl31.h	621;"	d
GL_R16F	include/linux/GLES3/gl3.h	692;"	d
GL_R16F	include/linux/GLES3/gl31.h	724;"	d
GL_R16F_EXT	include/linux/GLES2/gl2ext.h	444;"	d
GL_R16F_EXT	include/linux/GLES2/gl2ext.h	610;"	d
GL_R16I	include/linux/GLES3/gl3.h	698;"	d
GL_R16I	include/linux/GLES3/gl31.h	730;"	d
GL_R16UI	include/linux/GLES3/gl3.h	699;"	d
GL_R16UI	include/linux/GLES3/gl31.h	731;"	d
GL_R32F	include/linux/GLES3/gl3.h	693;"	d
GL_R32F	include/linux/GLES3/gl31.h	725;"	d
GL_R32F_EXT	include/linux/GLES2/gl2ext.h	608;"	d
GL_R32I	include/linux/GLES3/gl3.h	700;"	d
GL_R32I	include/linux/GLES3/gl31.h	732;"	d
GL_R32UI	include/linux/GLES3/gl3.h	701;"	d
GL_R32UI	include/linux/GLES3/gl31.h	733;"	d
GL_R8	include/linux/GLES3/gl3.h	690;"	d
GL_R8	include/linux/GLES3/gl31.h	722;"	d
GL_R8I	include/linux/GLES3/gl3.h	696;"	d
GL_R8I	include/linux/GLES3/gl31.h	728;"	d
GL_R8UI	include/linux/GLES3/gl3.h	697;"	d
GL_R8UI	include/linux/GLES3/gl31.h	729;"	d
GL_R8_EXT	include/linux/GLES2/gl2ext.h	583;"	d
GL_R8_EXT	include/linux/GLES2/gl2ext.h	606;"	d
GL_R8_SNORM	include/linux/GLES3/gl3.h	709;"	d
GL_R8_SNORM	include/linux/GLES3/gl31.h	741;"	d
GL_RASTERIZER_DISCARD	include/linux/GLES3/gl3.h	600;"	d
GL_RASTERIZER_DISCARD	include/linux/GLES3/gl31.h	632;"	d
GL_READ_BUFFER	include/linux/GLES3/gl3.h	495;"	d
GL_READ_BUFFER	include/linux/GLES3/gl31.h	527;"	d
GL_READ_BUFFER_EXT	include/linux/GLES2/gl2ext.h	493;"	d
GL_READ_BUFFER_NV	include/linux/GLES2/gl2ext.h	754;"	d
GL_READ_FRAMEBUFFER	include/linux/GLES3/gl3.h	658;"	d
GL_READ_FRAMEBUFFER	include/linux/GLES3/gl31.h	690;"	d
GL_READ_FRAMEBUFFER_ANGLE	include/linux/GLES2/gl2ext.h	299;"	d
GL_READ_FRAMEBUFFER_APPLE	include/linux/GLES/glext.h	254;"	d
GL_READ_FRAMEBUFFER_APPLE	include/linux/GLES2/gl2ext.h	355;"	d
GL_READ_FRAMEBUFFER_BINDING	include/linux/GLES3/gl3.h	660;"	d
GL_READ_FRAMEBUFFER_BINDING	include/linux/GLES3/gl31.h	692;"	d
GL_READ_FRAMEBUFFER_BINDING_ANGLE	include/linux/GLES2/gl2ext.h	302;"	d
GL_READ_FRAMEBUFFER_BINDING_APPLE	include/linux/GLES/glext.h	257;"	d
GL_READ_FRAMEBUFFER_BINDING_APPLE	include/linux/GLES2/gl2ext.h	358;"	d
GL_READ_ONLY	include/linux/GLES3/gl31.h	1053;"	d
GL_READ_WRITE	include/linux/GLES3/gl31.h	1055;"	d
GL_RECIP_ADD_SIGNED_ALPHA_IMG	include/linux/GLES/glext.h	444;"	d
GL_RED	include/linux/GLES3/gl3.h	505;"	d
GL_RED	include/linux/GLES3/gl31.h	537;"	d
GL_RED_BITS	include/linux/GLES/gl.h	246;"	d
GL_RED_BITS	include/linux/GLES2/gl2.h	202;"	d
GL_RED_BITS	include/linux/GLES3/gl3.h	226;"	d
GL_RED_BITS	include/linux/GLES3/gl31.h	180;"	d
GL_RED_EXT	include/linux/GLES2/gl2ext.h	581;"	d
GL_RED_INTEGER	include/linux/GLES3/gl3.h	619;"	d
GL_RED_INTEGER	include/linux/GLES3/gl31.h	651;"	d
GL_REFERENCED_BY_COMPUTE_SHADER	include/linux/GLES3/gl31.h	992;"	d
GL_REFERENCED_BY_FRAGMENT_SHADER	include/linux/GLES3/gl31.h	991;"	d
GL_REFERENCED_BY_VERTEX_SHADER	include/linux/GLES3/gl31.h	990;"	d
GL_REFLECTION_MAP_OES	include/linux/GLES/glext.h	201;"	d
GL_RENDERBUFFER	include/linux/GLES2/gl2.h	428;"	d
GL_RENDERBUFFER	include/linux/GLES3/gl3.h	452;"	d
GL_RENDERBUFFER	include/linux/GLES3/gl31.h	348;"	d
GL_RENDERBUFFER_ALPHA_SIZE	include/linux/GLES2/gl2.h	442;"	d
GL_RENDERBUFFER_ALPHA_SIZE	include/linux/GLES3/gl3.h	466;"	d
GL_RENDERBUFFER_ALPHA_SIZE	include/linux/GLES3/gl31.h	360;"	d
GL_RENDERBUFFER_ALPHA_SIZE_OES	include/linux/GLES/glext.h	104;"	d
GL_RENDERBUFFER_BINDING	include/linux/GLES2/gl2.h	464;"	d
GL_RENDERBUFFER_BINDING	include/linux/GLES3/gl3.h	488;"	d
GL_RENDERBUFFER_BINDING	include/linux/GLES3/gl31.h	377;"	d
GL_RENDERBUFFER_BINDING_OES	include/linux/GLES/glext.h	121;"	d
GL_RENDERBUFFER_BLUE_SIZE	include/linux/GLES2/gl2.h	441;"	d
GL_RENDERBUFFER_BLUE_SIZE	include/linux/GLES3/gl3.h	465;"	d
GL_RENDERBUFFER_BLUE_SIZE	include/linux/GLES3/gl31.h	359;"	d
GL_RENDERBUFFER_BLUE_SIZE_OES	include/linux/GLES/glext.h	103;"	d
GL_RENDERBUFFER_DEPTH_SIZE	include/linux/GLES2/gl2.h	443;"	d
GL_RENDERBUFFER_DEPTH_SIZE	include/linux/GLES3/gl3.h	467;"	d
GL_RENDERBUFFER_DEPTH_SIZE	include/linux/GLES3/gl31.h	361;"	d
GL_RENDERBUFFER_DEPTH_SIZE_OES	include/linux/GLES/glext.h	105;"	d
GL_RENDERBUFFER_GREEN_SIZE	include/linux/GLES2/gl2.h	440;"	d
GL_RENDERBUFFER_GREEN_SIZE	include/linux/GLES3/gl3.h	464;"	d
GL_RENDERBUFFER_GREEN_SIZE	include/linux/GLES3/gl31.h	358;"	d
GL_RENDERBUFFER_GREEN_SIZE_OES	include/linux/GLES/glext.h	102;"	d
GL_RENDERBUFFER_HEIGHT	include/linux/GLES2/gl2.h	437;"	d
GL_RENDERBUFFER_HEIGHT	include/linux/GLES3/gl3.h	461;"	d
GL_RENDERBUFFER_HEIGHT	include/linux/GLES3/gl31.h	355;"	d
GL_RENDERBUFFER_HEIGHT_OES	include/linux/GLES/glext.h	99;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	include/linux/GLES2/gl2.h	438;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	include/linux/GLES3/gl3.h	462;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	include/linux/GLES3/gl31.h	356;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT_OES	include/linux/GLES/glext.h	100;"	d
GL_RENDERBUFFER_OES	include/linux/GLES/glext.h	93;"	d
GL_RENDERBUFFER_RED_SIZE	include/linux/GLES2/gl2.h	439;"	d
GL_RENDERBUFFER_RED_SIZE	include/linux/GLES3/gl3.h	463;"	d
GL_RENDERBUFFER_RED_SIZE	include/linux/GLES3/gl31.h	357;"	d
GL_RENDERBUFFER_RED_SIZE_OES	include/linux/GLES/glext.h	101;"	d
GL_RENDERBUFFER_SAMPLES	include/linux/GLES3/gl3.h	661;"	d
GL_RENDERBUFFER_SAMPLES	include/linux/GLES3/gl31.h	693;"	d
GL_RENDERBUFFER_SAMPLES_ANGLE	include/linux/GLES2/gl2ext.h	307;"	d
GL_RENDERBUFFER_SAMPLES_APPLE	include/linux/GLES/glext.h	251;"	d
GL_RENDERBUFFER_SAMPLES_APPLE	include/linux/GLES2/gl2ext.h	352;"	d
GL_RENDERBUFFER_SAMPLES_EXT	include/linux/GLES/glext.h	343;"	d
GL_RENDERBUFFER_SAMPLES_EXT	include/linux/GLES2/gl2ext.h	483;"	d
GL_RENDERBUFFER_SAMPLES_IMG	include/linux/GLES/glext.h	465;"	d
GL_RENDERBUFFER_SAMPLES_IMG	include/linux/GLES2/gl2ext.h	674;"	d
GL_RENDERBUFFER_STENCIL_SIZE	include/linux/GLES2/gl2.h	444;"	d
GL_RENDERBUFFER_STENCIL_SIZE	include/linux/GLES3/gl3.h	468;"	d
GL_RENDERBUFFER_STENCIL_SIZE	include/linux/GLES3/gl31.h	362;"	d
GL_RENDERBUFFER_STENCIL_SIZE_OES	include/linux/GLES/glext.h	106;"	d
GL_RENDERBUFFER_WIDTH	include/linux/GLES2/gl2.h	436;"	d
GL_RENDERBUFFER_WIDTH	include/linux/GLES3/gl3.h	460;"	d
GL_RENDERBUFFER_WIDTH	include/linux/GLES3/gl31.h	354;"	d
GL_RENDERBUFFER_WIDTH_OES	include/linux/GLES/glext.h	98;"	d
GL_RENDERER	include/linux/GLES/gl.h	402;"	d
GL_RENDERER	include/linux/GLES2/gl2.h	302;"	d
GL_RENDERER	include/linux/GLES3/gl3.h	326;"	d
GL_RENDERER	include/linux/GLES3/gl31.h	252;"	d
GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM	include/linux/GLES2/gl2ext.h	791;"	d
GL_REPEAT	include/linux/GLES/gl.h	485;"	d
GL_REPEAT	include/linux/GLES2/gl2.h	374;"	d
GL_REPEAT	include/linux/GLES3/gl3.h	398;"	d
GL_REPEAT	include/linux/GLES3/gl31.h	308;"	d
GL_REPLACE	include/linux/GLES/gl.h	395;"	d
GL_REPLACE	include/linux/GLES2/gl2.h	293;"	d
GL_REPLACE	include/linux/GLES3/gl3.h	317;"	d
GL_REPLACE	include/linux/GLES3/gl31.h	245;"	d
GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES	include/linux/GLES/glext.h	76;"	d
GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES	include/linux/GLES2/gl2ext.h	66;"	d
GL_RESCALE_NORMAL	include/linux/GLES/gl.h	153;"	d
GL_RESET_NOTIFICATION_STRATEGY_EXT	include/linux/GLES/glext.h	365;"	d
GL_RESET_NOTIFICATION_STRATEGY_EXT	include/linux/GLES2/gl2ext.h	523;"	d
GL_RG	include/linux/GLES3/gl3.h	688;"	d
GL_RG	include/linux/GLES3/gl31.h	720;"	d
GL_RG16F	include/linux/GLES3/gl3.h	694;"	d
GL_RG16F	include/linux/GLES3/gl31.h	726;"	d
GL_RG16F_EXT	include/linux/GLES2/gl2ext.h	443;"	d
GL_RG16F_EXT	include/linux/GLES2/gl2ext.h	611;"	d
GL_RG16I	include/linux/GLES3/gl3.h	704;"	d
GL_RG16I	include/linux/GLES3/gl31.h	736;"	d
GL_RG16UI	include/linux/GLES3/gl3.h	705;"	d
GL_RG16UI	include/linux/GLES3/gl31.h	737;"	d
GL_RG32F	include/linux/GLES3/gl3.h	695;"	d
GL_RG32F	include/linux/GLES3/gl31.h	727;"	d
GL_RG32F_EXT	include/linux/GLES2/gl2ext.h	609;"	d
GL_RG32I	include/linux/GLES3/gl3.h	706;"	d
GL_RG32I	include/linux/GLES3/gl31.h	738;"	d
GL_RG32UI	include/linux/GLES3/gl3.h	707;"	d
GL_RG32UI	include/linux/GLES3/gl31.h	739;"	d
GL_RG8	include/linux/GLES3/gl3.h	691;"	d
GL_RG8	include/linux/GLES3/gl31.h	723;"	d
GL_RG8I	include/linux/GLES3/gl3.h	702;"	d
GL_RG8I	include/linux/GLES3/gl31.h	734;"	d
GL_RG8UI	include/linux/GLES3/gl3.h	703;"	d
GL_RG8UI	include/linux/GLES3/gl31.h	735;"	d
GL_RG8_EXT	include/linux/GLES2/gl2ext.h	584;"	d
GL_RG8_EXT	include/linux/GLES2/gl2ext.h	607;"	d
GL_RG8_SNORM	include/linux/GLES3/gl3.h	710;"	d
GL_RG8_SNORM	include/linux/GLES3/gl31.h	742;"	d
GL_RGB	include/linux/GLES/gl.h	363;"	d
GL_RGB	include/linux/GLES2/gl2.h	247;"	d
GL_RGB	include/linux/GLES3/gl3.h	271;"	d
GL_RGB	include/linux/GLES3/gl31.h	209;"	d
GL_RGB10_A2	include/linux/GLES3/gl3.h	508;"	d
GL_RGB10_A2	include/linux/GLES3/gl31.h	540;"	d
GL_RGB10_A2UI	include/linux/GLES3/gl3.h	770;"	d
GL_RGB10_A2UI	include/linux/GLES3/gl31.h	802;"	d
GL_RGB10_A2_EXT	include/linux/GLES/glext.h	418;"	d
GL_RGB10_A2_EXT	include/linux/GLES2/gl2ext.h	603;"	d
GL_RGB10_EXT	include/linux/GLES/glext.h	419;"	d
GL_RGB10_EXT	include/linux/GLES2/gl2ext.h	604;"	d
GL_RGB16F	include/linux/GLES3/gl3.h	581;"	d
GL_RGB16F	include/linux/GLES3/gl31.h	613;"	d
GL_RGB16F_EXT	include/linux/GLES/glext.h	414;"	d
GL_RGB16F_EXT	include/linux/GLES2/gl2ext.h	442;"	d
GL_RGB16I	include/linux/GLES3/gl3.h	616;"	d
GL_RGB16I	include/linux/GLES3/gl31.h	648;"	d
GL_RGB16UI	include/linux/GLES3/gl3.h	610;"	d
GL_RGB16UI	include/linux/GLES3/gl31.h	642;"	d
GL_RGB32F	include/linux/GLES3/gl3.h	579;"	d
GL_RGB32F	include/linux/GLES3/gl31.h	611;"	d
GL_RGB32F_EXT	include/linux/GLES/glext.h	409;"	d
GL_RGB32F_EXT	include/linux/GLES2/gl2ext.h	594;"	d
GL_RGB32I	include/linux/GLES3/gl3.h	614;"	d
GL_RGB32I	include/linux/GLES3/gl31.h	646;"	d
GL_RGB32UI	include/linux/GLES3/gl3.h	608;"	d
GL_RGB32UI	include/linux/GLES3/gl31.h	640;"	d
GL_RGB565	include/linux/GLES2/gl2.h	432;"	d
GL_RGB565	include/linux/GLES3/gl3.h	456;"	d
GL_RGB565	include/linux/GLES3/gl31.h	351;"	d
GL_RGB565_OES	include/linux/GLES/glext.h	96;"	d
GL_RGB565_OES	include/linux/GLES2/gl2ext.h	108;"	d
GL_RGB5_A1	include/linux/GLES2/gl2.h	431;"	d
GL_RGB5_A1	include/linux/GLES3/gl3.h	455;"	d
GL_RGB5_A1	include/linux/GLES3/gl31.h	350;"	d
GL_RGB5_A1_OES	include/linux/GLES/glext.h	95;"	d
GL_RGB5_A1_OES	include/linux/GLES2/gl2ext.h	107;"	d
GL_RGB8	include/linux/GLES3/gl3.h	506;"	d
GL_RGB8	include/linux/GLES3/gl31.h	538;"	d
GL_RGB8I	include/linux/GLES3/gl3.h	618;"	d
GL_RGB8I	include/linux/GLES3/gl31.h	650;"	d
GL_RGB8UI	include/linux/GLES3/gl3.h	612;"	d
GL_RGB8UI	include/linux/GLES3/gl31.h	644;"	d
GL_RGB8_OES	include/linux/GLES/glext.h	173;"	d
GL_RGB8_OES	include/linux/GLES2/gl2ext.h	117;"	d
GL_RGB8_SNORM	include/linux/GLES3/gl3.h	711;"	d
GL_RGB8_SNORM	include/linux/GLES3/gl31.h	743;"	d
GL_RGB9_E5	include/linux/GLES3/gl3.h	591;"	d
GL_RGB9_E5	include/linux/GLES3/gl31.h	623;"	d
GL_RGBA	include/linux/GLES/gl.h	364;"	d
GL_RGBA	include/linux/GLES2/gl2.h	248;"	d
GL_RGBA	include/linux/GLES3/gl3.h	272;"	d
GL_RGBA	include/linux/GLES3/gl31.h	210;"	d
GL_RGBA16F	include/linux/GLES3/gl3.h	580;"	d
GL_RGBA16F	include/linux/GLES3/gl31.h	612;"	d
GL_RGBA16F_EXT	include/linux/GLES2/gl2ext.h	441;"	d
GL_RGBA16I	include/linux/GLES3/gl3.h	615;"	d
GL_RGBA16I	include/linux/GLES3/gl31.h	647;"	d
GL_RGBA16UI	include/linux/GLES3/gl3.h	609;"	d
GL_RGBA16UI	include/linux/GLES3/gl31.h	641;"	d
GL_RGBA32F	include/linux/GLES3/gl3.h	578;"	d
GL_RGBA32F	include/linux/GLES3/gl31.h	610;"	d
GL_RGBA32F_EXT	include/linux/GLES/glext.h	408;"	d
GL_RGBA32F_EXT	include/linux/GLES2/gl2ext.h	593;"	d
GL_RGBA32I	include/linux/GLES3/gl3.h	613;"	d
GL_RGBA32I	include/linux/GLES3/gl31.h	645;"	d
GL_RGBA32UI	include/linux/GLES3/gl3.h	607;"	d
GL_RGBA32UI	include/linux/GLES3/gl31.h	639;"	d
GL_RGBA4	include/linux/GLES2/gl2.h	430;"	d
GL_RGBA4	include/linux/GLES3/gl3.h	454;"	d
GL_RGBA4	include/linux/GLES3/gl31.h	349;"	d
GL_RGBA4_OES	include/linux/GLES/glext.h	94;"	d
GL_RGBA4_OES	include/linux/GLES2/gl2ext.h	106;"	d
GL_RGBA8	include/linux/GLES3/gl3.h	507;"	d
GL_RGBA8	include/linux/GLES3/gl31.h	539;"	d
GL_RGBA8I	include/linux/GLES3/gl3.h	617;"	d
GL_RGBA8I	include/linux/GLES3/gl31.h	649;"	d
GL_RGBA8UI	include/linux/GLES3/gl3.h	611;"	d
GL_RGBA8UI	include/linux/GLES3/gl31.h	643;"	d
GL_RGBA8_OES	include/linux/GLES/glext.h	174;"	d
GL_RGBA8_OES	include/linux/GLES2/gl2ext.h	118;"	d
GL_RGBA8_SNORM	include/linux/GLES3/gl3.h	712;"	d
GL_RGBA8_SNORM	include/linux/GLES3/gl31.h	744;"	d
GL_RGBA_INTEGER	include/linux/GLES3/gl3.h	621;"	d
GL_RGBA_INTEGER	include/linux/GLES3/gl31.h	653;"	d
GL_RGB_422_APPLE	include/linux/GLES2/gl2ext.h	363;"	d
GL_RGB_INTEGER	include/linux/GLES3/gl3.h	620;"	d
GL_RGB_INTEGER	include/linux/GLES3/gl31.h	652;"	d
GL_RGB_SCALE	include/linux/GLES/gl.h	526;"	d
GL_RG_EXT	include/linux/GLES2/gl2ext.h	582;"	d
GL_RG_INTEGER	include/linux/GLES3/gl3.h	689;"	d
GL_RG_INTEGER	include/linux/GLES3/gl31.h	721;"	d
GL_SAMPLER	include/linux/GLES2/gl2ext.h	214;"	d
GL_SAMPLER_2D	include/linux/GLES2/gl2.h	392;"	d
GL_SAMPLER_2D	include/linux/GLES3/gl3.h	416;"	d
GL_SAMPLER_2D	include/linux/GLES3/gl31.h	324;"	d
GL_SAMPLER_2D_ARRAY	include/linux/GLES3/gl3.h	622;"	d
GL_SAMPLER_2D_ARRAY	include/linux/GLES3/gl31.h	654;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	include/linux/GLES3/gl3.h	623;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	include/linux/GLES3/gl31.h	655;"	d
GL_SAMPLER_2D_MULTISAMPLE	include/linux/GLES3/gl31.h	1101;"	d
GL_SAMPLER_2D_SHADOW	include/linux/GLES3/gl3.h	559;"	d
GL_SAMPLER_2D_SHADOW	include/linux/GLES3/gl31.h	591;"	d
GL_SAMPLER_2D_SHADOW_EXT	include/linux/GLES2/gl2ext.h	551;"	d
GL_SAMPLER_3D	include/linux/GLES3/gl3.h	558;"	d
GL_SAMPLER_3D	include/linux/GLES3/gl31.h	590;"	d
GL_SAMPLER_3D_OES	include/linux/GLES2/gl2ext.h	146;"	d
GL_SAMPLER_BINDING	include/linux/GLES3/gl3.h	769;"	d
GL_SAMPLER_BINDING	include/linux/GLES3/gl31.h	801;"	d
GL_SAMPLER_CUBE	include/linux/GLES2/gl2.h	393;"	d
GL_SAMPLER_CUBE	include/linux/GLES3/gl3.h	417;"	d
GL_SAMPLER_CUBE	include/linux/GLES3/gl31.h	325;"	d
GL_SAMPLER_CUBE_SHADOW	include/linux/GLES3/gl3.h	624;"	d
GL_SAMPLER_CUBE_SHADOW	include/linux/GLES3/gl31.h	656;"	d
GL_SAMPLER_EXTERNAL_OES	include/linux/GLES2/gl2ext.h	64;"	d
GL_SAMPLES	include/linux/GLES/gl.h	272;"	d
GL_SAMPLES	include/linux/GLES2/gl2.h	213;"	d
GL_SAMPLES	include/linux/GLES3/gl3.h	237;"	d
GL_SAMPLES	include/linux/GLES3/gl31.h	190;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	include/linux/GLES/gl.h	160;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	include/linux/GLES2/gl2.h	153;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	include/linux/GLES3/gl3.h	177;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	include/linux/GLES3/gl31.h	138;"	d
GL_SAMPLE_ALPHA_TO_ONE	include/linux/GLES/gl.h	161;"	d
GL_SAMPLE_BUFFERS	include/linux/GLES/gl.h	271;"	d
GL_SAMPLE_BUFFERS	include/linux/GLES2/gl2.h	212;"	d
GL_SAMPLE_BUFFERS	include/linux/GLES3/gl3.h	236;"	d
GL_SAMPLE_BUFFERS	include/linux/GLES3/gl31.h	189;"	d
GL_SAMPLE_COVERAGE	include/linux/GLES/gl.h	162;"	d
GL_SAMPLE_COVERAGE	include/linux/GLES2/gl2.h	154;"	d
GL_SAMPLE_COVERAGE	include/linux/GLES3/gl3.h	178;"	d
GL_SAMPLE_COVERAGE	include/linux/GLES3/gl31.h	139;"	d
GL_SAMPLE_COVERAGE_INVERT	include/linux/GLES/gl.h	274;"	d
GL_SAMPLE_COVERAGE_INVERT	include/linux/GLES2/gl2.h	215;"	d
GL_SAMPLE_COVERAGE_INVERT	include/linux/GLES3/gl3.h	239;"	d
GL_SAMPLE_COVERAGE_INVERT	include/linux/GLES3/gl31.h	192;"	d
GL_SAMPLE_COVERAGE_VALUE	include/linux/GLES/gl.h	273;"	d
GL_SAMPLE_COVERAGE_VALUE	include/linux/GLES2/gl2.h	214;"	d
GL_SAMPLE_COVERAGE_VALUE	include/linux/GLES3/gl3.h	238;"	d
GL_SAMPLE_COVERAGE_VALUE	include/linux/GLES3/gl31.h	191;"	d
GL_SAMPLE_MASK	include/linux/GLES3/gl31.h	1074;"	d
GL_SAMPLE_MASK_VALUE	include/linux/GLES3/gl31.h	1075;"	d
GL_SAMPLE_POSITION	include/linux/GLES3/gl31.h	1073;"	d
GL_SCISSOR_BOX	include/linux/GLES/gl.h	231;"	d
GL_SCISSOR_BOX	include/linux/GLES2/gl2.h	193;"	d
GL_SCISSOR_BOX	include/linux/GLES3/gl3.h	217;"	d
GL_SCISSOR_BOX	include/linux/GLES3/gl31.h	172;"	d
GL_SCISSOR_TEST	include/linux/GLES/gl.h	150;"	d
GL_SCISSOR_TEST	include/linux/GLES/gl.h	232;"	d
GL_SCISSOR_TEST	include/linux/GLES2/gl2.h	151;"	d
GL_SCISSOR_TEST	include/linux/GLES3/gl3.h	175;"	d
GL_SCISSOR_TEST	include/linux/GLES3/gl31.h	136;"	d
GL_SEPARATE_ATTRIBS	include/linux/GLES3/gl3.h	604;"	d
GL_SEPARATE_ATTRIBS	include/linux/GLES3/gl31.h	636;"	d
GL_SET	include/linux/GLES/gl.h	337;"	d
GL_SGX_BINARY_IMG	include/linux/GLES2/gl2ext.h	661;"	d
GL_SGX_PROGRAM_BINARY_IMG	include/linux/GLES2/gl2ext.h	650;"	d
GL_SHADER	include/linux/GLES2/gl2ext.h	210;"	d
GL_SHADER_BINARY_DMP	include/linux/GLES2/gl2ext.h	632;"	d
GL_SHADER_BINARY_FORMATS	include/linux/GLES2/gl2.h	415;"	d
GL_SHADER_BINARY_FORMATS	include/linux/GLES3/gl3.h	439;"	d
GL_SHADER_BINARY_FORMATS	include/linux/GLES3/gl31.h	339;"	d
GL_SHADER_BINARY_VIV	include/linux/GLES2/gl2ext.h	867;"	d
GL_SHADER_COMPILER	include/linux/GLES2/gl2.h	412;"	d
GL_SHADER_COMPILER	include/linux/GLES3/gl3.h	436;"	d
GL_SHADER_COMPILER	include/linux/GLES3/gl31.h	338;"	d
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT	include/linux/GLES3/gl31.h	1029;"	d
GL_SHADER_OBJECT_EXT	include/linux/GLES2/gl2ext.h	453;"	d
GL_SHADER_SOURCE_LENGTH	include/linux/GLES2/gl2.h	411;"	d
GL_SHADER_SOURCE_LENGTH	include/linux/GLES3/gl3.h	435;"	d
GL_SHADER_SOURCE_LENGTH	include/linux/GLES3/gl31.h	337;"	d
GL_SHADER_STORAGE_BARRIER_BIT	include/linux/GLES3/gl31.h	1067;"	d
GL_SHADER_STORAGE_BLOCK	include/linux/GLES3/gl31.h	971;"	d
GL_SHADER_STORAGE_BUFFER	include/linux/GLES3/gl31.h	1056;"	d
GL_SHADER_STORAGE_BUFFER_BINDING	include/linux/GLES3/gl31.h	1057;"	d
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT	include/linux/GLES3/gl31.h	1066;"	d
GL_SHADER_STORAGE_BUFFER_SIZE	include/linux/GLES3/gl31.h	1059;"	d
GL_SHADER_STORAGE_BUFFER_START	include/linux/GLES3/gl31.h	1058;"	d
GL_SHADER_TYPE	include/linux/GLES2/gl2.h	268;"	d
GL_SHADER_TYPE	include/linux/GLES3/gl3.h	292;"	d
GL_SHADER_TYPE	include/linux/GLES3/gl31.h	225;"	d
GL_SHADE_MODEL	include/linux/GLES/gl.h	205;"	d
GL_SHADING_LANGUAGE_VERSION	include/linux/GLES2/gl2.h	277;"	d
GL_SHADING_LANGUAGE_VERSION	include/linux/GLES3/gl3.h	301;"	d
GL_SHADING_LANGUAGE_VERSION	include/linux/GLES3/gl31.h	234;"	d
GL_SHININESS	include/linux/GLES/gl.h	344;"	d
GL_SHORT	include/linux/GLES/gl.h	316;"	d
GL_SHORT	include/linux/GLES2/gl2.h	237;"	d
GL_SHORT	include/linux/GLES3/gl3.h	261;"	d
GL_SHORT	include/linux/GLES3/gl31.h	201;"	d
GL_SIGNALED	include/linux/GLES3/gl3.h	759;"	d
GL_SIGNALED	include/linux/GLES3/gl31.h	791;"	d
GL_SIGNALED_APPLE	include/linux/GLES/glext.h	283;"	d
GL_SIGNALED_APPLE	include/linux/GLES2/gl2ext.h	393;"	d
GL_SIGNED_NORMALIZED	include/linux/GLES3/gl3.h	713;"	d
GL_SIGNED_NORMALIZED	include/linux/GLES3/gl31.h	745;"	d
GL_SMOOTH	include/linux/GLES/gl.h	380;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	include/linux/GLES/gl.h	200;"	d
GL_SMOOTH_POINT_SIZE_RANGE	include/linux/GLES/gl.h	198;"	d
GL_SPECULAR	include/linux/GLES/gl.h	304;"	d
GL_SPOT_CUTOFF	include/linux/GLES/gl.h	308;"	d
GL_SPOT_DIRECTION	include/linux/GLES/gl.h	306;"	d
GL_SPOT_EXPONENT	include/linux/GLES/gl.h	307;"	d
GL_SRC0_ALPHA	include/linux/GLES/gl.h	544;"	d
GL_SRC0_RGB	include/linux/GLES/gl.h	541;"	d
GL_SRC1_ALPHA	include/linux/GLES/gl.h	545;"	d
GL_SRC1_RGB	include/linux/GLES/gl.h	542;"	d
GL_SRC2_ALPHA	include/linux/GLES/gl.h	546;"	d
GL_SRC2_RGB	include/linux/GLES/gl.h	543;"	d
GL_SRC_ALPHA	include/linux/GLES/gl.h	79;"	d
GL_SRC_ALPHA	include/linux/GLES2/gl2.h	77;"	d
GL_SRC_ALPHA	include/linux/GLES3/gl3.h	101;"	d
GL_SRC_ALPHA	include/linux/GLES3/gl31.h	95;"	d
GL_SRC_ALPHA_SATURATE	include/linux/GLES/gl.h	89;"	d
GL_SRC_ALPHA_SATURATE	include/linux/GLES2/gl2.h	87;"	d
GL_SRC_ALPHA_SATURATE	include/linux/GLES3/gl3.h	111;"	d
GL_SRC_ALPHA_SATURATE	include/linux/GLES3/gl31.h	101;"	d
GL_SRC_COLOR	include/linux/GLES/gl.h	77;"	d
GL_SRC_COLOR	include/linux/GLES2/gl2.h	75;"	d
GL_SRC_COLOR	include/linux/GLES3/gl3.h	99;"	d
GL_SRC_COLOR	include/linux/GLES3/gl31.h	93;"	d
GL_SRGB	include/linux/GLES3/gl3.h	571;"	d
GL_SRGB	include/linux/GLES3/gl31.h	603;"	d
GL_SRGB8	include/linux/GLES3/gl3.h	572;"	d
GL_SRGB8	include/linux/GLES3/gl31.h	604;"	d
GL_SRGB8_ALPHA8	include/linux/GLES3/gl3.h	573;"	d
GL_SRGB8_ALPHA8	include/linux/GLES3/gl31.h	605;"	d
GL_SRGB8_ALPHA8_EXT	include/linux/GLES/glext.h	374;"	d
GL_SRGB8_ALPHA8_EXT	include/linux/GLES2/gl2ext.h	558;"	d
GL_SRGB_ALPHA_EXT	include/linux/GLES/glext.h	373;"	d
GL_SRGB_ALPHA_EXT	include/linux/GLES2/gl2ext.h	557;"	d
GL_SRGB_EXT	include/linux/GLES/glext.h	372;"	d
GL_SRGB_EXT	include/linux/GLES2/gl2ext.h	556;"	d
GL_STACK_OVERFLOW	include/linux/GLES/gl.h	169;"	d
GL_STACK_OVERFLOW	include/linux/GLES2/gl2ext.h	225;"	d
GL_STACK_UNDERFLOW	include/linux/GLES/gl.h	170;"	d
GL_STACK_UNDERFLOW	include/linux/GLES2/gl2ext.h	226;"	d
GL_STATE_RESTORE	include/linux/GLES/glext.h	501;"	d
GL_STATE_RESTORE	include/linux/GLES2/gl2ext.h	809;"	d
GL_STATIC_COPY	include/linux/GLES3/gl3.h	536;"	d
GL_STATIC_COPY	include/linux/GLES3/gl31.h	568;"	d
GL_STATIC_DRAW	include/linux/GLES/gl.h	515;"	d
GL_STATIC_DRAW	include/linux/GLES2/gl2.h	121;"	d
GL_STATIC_DRAW	include/linux/GLES3/gl3.h	145;"	d
GL_STATIC_DRAW	include/linux/GLES3/gl31.h	122;"	d
GL_STATIC_READ	include/linux/GLES3/gl3.h	535;"	d
GL_STATIC_READ	include/linux/GLES3/gl31.h	567;"	d
GL_STENCIL	include/linux/GLES3/gl3.h	504;"	d
GL_STENCIL	include/linux/GLES3/gl31.h	536;"	d
GL_STENCIL_ATTACHMENT	include/linux/GLES2/gl2.h	453;"	d
GL_STENCIL_ATTACHMENT	include/linux/GLES3/gl3.h	477;"	d
GL_STENCIL_ATTACHMENT	include/linux/GLES3/gl31.h	369;"	d
GL_STENCIL_ATTACHMENT_OES	include/linux/GLES/glext.h	113;"	d
GL_STENCIL_BACK_FAIL	include/linux/GLES2/gl2.h	186;"	d
GL_STENCIL_BACK_FAIL	include/linux/GLES3/gl3.h	210;"	d
GL_STENCIL_BACK_FAIL	include/linux/GLES3/gl31.h	165;"	d
GL_STENCIL_BACK_FUNC	include/linux/GLES2/gl2.h	185;"	d
GL_STENCIL_BACK_FUNC	include/linux/GLES3/gl3.h	209;"	d
GL_STENCIL_BACK_FUNC	include/linux/GLES3/gl31.h	164;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	include/linux/GLES2/gl2.h	187;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	include/linux/GLES3/gl3.h	211;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	include/linux/GLES3/gl31.h	166;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	include/linux/GLES2/gl2.h	188;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	include/linux/GLES3/gl3.h	212;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	include/linux/GLES3/gl31.h	167;"	d
GL_STENCIL_BACK_REF	include/linux/GLES2/gl2.h	189;"	d
GL_STENCIL_BACK_REF	include/linux/GLES3/gl3.h	213;"	d
GL_STENCIL_BACK_REF	include/linux/GLES3/gl31.h	168;"	d
GL_STENCIL_BACK_VALUE_MASK	include/linux/GLES2/gl2.h	190;"	d
GL_STENCIL_BACK_VALUE_MASK	include/linux/GLES3/gl3.h	214;"	d
GL_STENCIL_BACK_VALUE_MASK	include/linux/GLES3/gl31.h	169;"	d
GL_STENCIL_BACK_WRITEMASK	include/linux/GLES2/gl2.h	191;"	d
GL_STENCIL_BACK_WRITEMASK	include/linux/GLES3/gl3.h	215;"	d
GL_STENCIL_BACK_WRITEMASK	include/linux/GLES3/gl31.h	170;"	d
GL_STENCIL_BITS	include/linux/GLES/gl.h	251;"	d
GL_STENCIL_BITS	include/linux/GLES2/gl2.h	207;"	d
GL_STENCIL_BITS	include/linux/GLES3/gl3.h	231;"	d
GL_STENCIL_BITS	include/linux/GLES3/gl31.h	185;"	d
GL_STENCIL_BUFFER_BIT	include/linux/GLES/gl.h	48;"	d
GL_STENCIL_BUFFER_BIT	include/linux/GLES2/gl2.h	46;"	d
GL_STENCIL_BUFFER_BIT	include/linux/GLES3/gl3.h	80;"	d
GL_STENCIL_BUFFER_BIT	include/linux/GLES3/gl31.h	80;"	d
GL_STENCIL_BUFFER_BIT0_QCOM	include/linux/GLES/glext.h	535;"	d
GL_STENCIL_BUFFER_BIT0_QCOM	include/linux/GLES2/gl2ext.h	843;"	d
GL_STENCIL_BUFFER_BIT1_QCOM	include/linux/GLES/glext.h	536;"	d
GL_STENCIL_BUFFER_BIT1_QCOM	include/linux/GLES2/gl2ext.h	844;"	d
GL_STENCIL_BUFFER_BIT2_QCOM	include/linux/GLES/glext.h	537;"	d
GL_STENCIL_BUFFER_BIT2_QCOM	include/linux/GLES2/gl2ext.h	845;"	d
GL_STENCIL_BUFFER_BIT3_QCOM	include/linux/GLES/glext.h	538;"	d
GL_STENCIL_BUFFER_BIT3_QCOM	include/linux/GLES2/gl2ext.h	846;"	d
GL_STENCIL_BUFFER_BIT4_QCOM	include/linux/GLES/glext.h	539;"	d
GL_STENCIL_BUFFER_BIT4_QCOM	include/linux/GLES2/gl2ext.h	847;"	d
GL_STENCIL_BUFFER_BIT5_QCOM	include/linux/GLES/glext.h	540;"	d
GL_STENCIL_BUFFER_BIT5_QCOM	include/linux/GLES2/gl2ext.h	848;"	d
GL_STENCIL_BUFFER_BIT6_QCOM	include/linux/GLES/glext.h	541;"	d
GL_STENCIL_BUFFER_BIT6_QCOM	include/linux/GLES2/gl2ext.h	849;"	d
GL_STENCIL_BUFFER_BIT7_QCOM	include/linux/GLES/glext.h	542;"	d
GL_STENCIL_BUFFER_BIT7_QCOM	include/linux/GLES2/gl2ext.h	850;"	d
GL_STENCIL_CLEAR_VALUE	include/linux/GLES/gl.h	210;"	d
GL_STENCIL_CLEAR_VALUE	include/linux/GLES2/gl2.h	177;"	d
GL_STENCIL_CLEAR_VALUE	include/linux/GLES3/gl3.h	201;"	d
GL_STENCIL_CLEAR_VALUE	include/linux/GLES3/gl31.h	156;"	d
GL_STENCIL_EXT	include/linux/GLES/glext.h	326;"	d
GL_STENCIL_EXT	include/linux/GLES2/gl2ext.h	466;"	d
GL_STENCIL_FAIL	include/linux/GLES/gl.h	213;"	d
GL_STENCIL_FAIL	include/linux/GLES2/gl2.h	179;"	d
GL_STENCIL_FAIL	include/linux/GLES3/gl3.h	203;"	d
GL_STENCIL_FAIL	include/linux/GLES3/gl31.h	158;"	d
GL_STENCIL_FUNC	include/linux/GLES/gl.h	211;"	d
GL_STENCIL_FUNC	include/linux/GLES2/gl2.h	178;"	d
GL_STENCIL_FUNC	include/linux/GLES3/gl3.h	202;"	d
GL_STENCIL_FUNC	include/linux/GLES3/gl31.h	157;"	d
GL_STENCIL_INDEX	include/linux/GLES3/gl31.h	1070;"	d
GL_STENCIL_INDEX1_OES	include/linux/GLES/glext.h	179;"	d
GL_STENCIL_INDEX1_OES	include/linux/GLES2/gl2ext.h	128;"	d
GL_STENCIL_INDEX4_OES	include/linux/GLES/glext.h	184;"	d
GL_STENCIL_INDEX4_OES	include/linux/GLES2/gl2ext.h	133;"	d
GL_STENCIL_INDEX8	include/linux/GLES2/gl2.h	434;"	d
GL_STENCIL_INDEX8	include/linux/GLES3/gl3.h	458;"	d
GL_STENCIL_INDEX8	include/linux/GLES3/gl31.h	353;"	d
GL_STENCIL_INDEX8_OES	include/linux/GLES/glext.h	189;"	d
GL_STENCIL_PASS_DEPTH_FAIL	include/linux/GLES/gl.h	214;"	d
GL_STENCIL_PASS_DEPTH_FAIL	include/linux/GLES2/gl2.h	180;"	d
GL_STENCIL_PASS_DEPTH_FAIL	include/linux/GLES3/gl3.h	204;"	d
GL_STENCIL_PASS_DEPTH_FAIL	include/linux/GLES3/gl31.h	159;"	d
GL_STENCIL_PASS_DEPTH_PASS	include/linux/GLES/gl.h	215;"	d
GL_STENCIL_PASS_DEPTH_PASS	include/linux/GLES2/gl2.h	181;"	d
GL_STENCIL_PASS_DEPTH_PASS	include/linux/GLES3/gl3.h	205;"	d
GL_STENCIL_PASS_DEPTH_PASS	include/linux/GLES3/gl31.h	160;"	d
GL_STENCIL_REF	include/linux/GLES/gl.h	216;"	d
GL_STENCIL_REF	include/linux/GLES2/gl2.h	182;"	d
GL_STENCIL_REF	include/linux/GLES3/gl3.h	206;"	d
GL_STENCIL_REF	include/linux/GLES3/gl31.h	161;"	d
GL_STENCIL_TEST	include/linux/GLES/gl.h	138;"	d
GL_STENCIL_TEST	include/linux/GLES2/gl2.h	149;"	d
GL_STENCIL_TEST	include/linux/GLES3/gl3.h	173;"	d
GL_STENCIL_TEST	include/linux/GLES3/gl31.h	134;"	d
GL_STENCIL_VALUE_MASK	include/linux/GLES/gl.h	212;"	d
GL_STENCIL_VALUE_MASK	include/linux/GLES2/gl2.h	183;"	d
GL_STENCIL_VALUE_MASK	include/linux/GLES3/gl3.h	207;"	d
GL_STENCIL_VALUE_MASK	include/linux/GLES3/gl31.h	162;"	d
GL_STENCIL_WRITEMASK	include/linux/GLES/gl.h	217;"	d
GL_STENCIL_WRITEMASK	include/linux/GLES2/gl2.h	184;"	d
GL_STENCIL_WRITEMASK	include/linux/GLES3/gl3.h	208;"	d
GL_STENCIL_WRITEMASK	include/linux/GLES3/gl31.h	163;"	d
GL_STREAM_COPY	include/linux/GLES3/gl3.h	534;"	d
GL_STREAM_COPY	include/linux/GLES3/gl31.h	566;"	d
GL_STREAM_DRAW	include/linux/GLES2/gl2.h	120;"	d
GL_STREAM_DRAW	include/linux/GLES3/gl3.h	144;"	d
GL_STREAM_DRAW	include/linux/GLES3/gl31.h	121;"	d
GL_STREAM_READ	include/linux/GLES3/gl3.h	533;"	d
GL_STREAM_READ	include/linux/GLES3/gl31.h	565;"	d
GL_SUBPIXEL_BITS	include/linux/GLES/gl.h	245;"	d
GL_SUBPIXEL_BITS	include/linux/GLES2/gl2.h	201;"	d
GL_SUBPIXEL_BITS	include/linux/GLES3/gl3.h	225;"	d
GL_SUBPIXEL_BITS	include/linux/GLES3/gl31.h	179;"	d
GL_SUBTRACT	include/linux/GLES/gl.h	522;"	d
GL_SYNC_CONDITION	include/linux/GLES3/gl3.h	753;"	d
GL_SYNC_CONDITION	include/linux/GLES3/gl31.h	785;"	d
GL_SYNC_CONDITION_APPLE	include/linux/GLES/glext.h	277;"	d
GL_SYNC_CONDITION_APPLE	include/linux/GLES2/gl2ext.h	387;"	d
GL_SYNC_FENCE	include/linux/GLES3/gl3.h	756;"	d
GL_SYNC_FENCE	include/linux/GLES3/gl31.h	788;"	d
GL_SYNC_FENCE_APPLE	include/linux/GLES/glext.h	280;"	d
GL_SYNC_FENCE_APPLE	include/linux/GLES2/gl2ext.h	390;"	d
GL_SYNC_FLAGS	include/linux/GLES3/gl3.h	755;"	d
GL_SYNC_FLAGS	include/linux/GLES3/gl31.h	787;"	d
GL_SYNC_FLAGS_APPLE	include/linux/GLES/glext.h	279;"	d
GL_SYNC_FLAGS_APPLE	include/linux/GLES2/gl2ext.h	389;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	include/linux/GLES3/gl3.h	764;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	include/linux/GLES3/gl31.h	796;"	d
GL_SYNC_FLUSH_COMMANDS_BIT_APPLE	include/linux/GLES/glext.h	288;"	d
GL_SYNC_FLUSH_COMMANDS_BIT_APPLE	include/linux/GLES2/gl2ext.h	398;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	include/linux/GLES3/gl3.h	757;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	include/linux/GLES3/gl31.h	789;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE	include/linux/GLES/glext.h	281;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE	include/linux/GLES2/gl2ext.h	391;"	d
GL_SYNC_OBJECT_APPLE	include/linux/GLES/glext.h	274;"	d
GL_SYNC_OBJECT_APPLE	include/linux/GLES2/gl2ext.h	384;"	d
GL_SYNC_STATUS	include/linux/GLES3/gl3.h	754;"	d
GL_SYNC_STATUS	include/linux/GLES3/gl31.h	786;"	d
GL_SYNC_STATUS_APPLE	include/linux/GLES/glext.h	278;"	d
GL_SYNC_STATUS_APPLE	include/linux/GLES2/gl2ext.h	388;"	d
GL_TEXTURE	include/linux/GLES/gl.h	353;"	d
GL_TEXTURE	include/linux/GLES2/gl2.h	326;"	d
GL_TEXTURE	include/linux/GLES3/gl3.h	350;"	d
GL_TEXTURE	include/linux/GLES3/gl31.h	265;"	d
GL_TEXTURE0	include/linux/GLES/gl.h	449;"	d
GL_TEXTURE0	include/linux/GLES2/gl2.h	339;"	d
GL_TEXTURE0	include/linux/GLES3/gl3.h	363;"	d
GL_TEXTURE0	include/linux/GLES3/gl31.h	275;"	d
GL_TEXTURE1	include/linux/GLES/gl.h	450;"	d
GL_TEXTURE1	include/linux/GLES2/gl2.h	340;"	d
GL_TEXTURE1	include/linux/GLES3/gl3.h	364;"	d
GL_TEXTURE1	include/linux/GLES3/gl31.h	276;"	d
GL_TEXTURE10	include/linux/GLES/gl.h	459;"	d
GL_TEXTURE10	include/linux/GLES2/gl2.h	349;"	d
GL_TEXTURE10	include/linux/GLES3/gl3.h	373;"	d
GL_TEXTURE10	include/linux/GLES3/gl31.h	285;"	d
GL_TEXTURE11	include/linux/GLES/gl.h	460;"	d
GL_TEXTURE11	include/linux/GLES2/gl2.h	350;"	d
GL_TEXTURE11	include/linux/GLES3/gl3.h	374;"	d
GL_TEXTURE11	include/linux/GLES3/gl31.h	286;"	d
GL_TEXTURE12	include/linux/GLES/gl.h	461;"	d
GL_TEXTURE12	include/linux/GLES2/gl2.h	351;"	d
GL_TEXTURE12	include/linux/GLES3/gl3.h	375;"	d
GL_TEXTURE12	include/linux/GLES3/gl31.h	287;"	d
GL_TEXTURE13	include/linux/GLES/gl.h	462;"	d
GL_TEXTURE13	include/linux/GLES2/gl2.h	352;"	d
GL_TEXTURE13	include/linux/GLES3/gl3.h	376;"	d
GL_TEXTURE13	include/linux/GLES3/gl31.h	288;"	d
GL_TEXTURE14	include/linux/GLES/gl.h	463;"	d
GL_TEXTURE14	include/linux/GLES2/gl2.h	353;"	d
GL_TEXTURE14	include/linux/GLES3/gl3.h	377;"	d
GL_TEXTURE14	include/linux/GLES3/gl31.h	289;"	d
GL_TEXTURE15	include/linux/GLES/gl.h	464;"	d
GL_TEXTURE15	include/linux/GLES2/gl2.h	354;"	d
GL_TEXTURE15	include/linux/GLES3/gl3.h	378;"	d
GL_TEXTURE15	include/linux/GLES3/gl31.h	290;"	d
GL_TEXTURE16	include/linux/GLES/gl.h	465;"	d
GL_TEXTURE16	include/linux/GLES2/gl2.h	355;"	d
GL_TEXTURE16	include/linux/GLES3/gl3.h	379;"	d
GL_TEXTURE16	include/linux/GLES3/gl31.h	291;"	d
GL_TEXTURE17	include/linux/GLES/gl.h	466;"	d
GL_TEXTURE17	include/linux/GLES2/gl2.h	356;"	d
GL_TEXTURE17	include/linux/GLES3/gl3.h	380;"	d
GL_TEXTURE17	include/linux/GLES3/gl31.h	292;"	d
GL_TEXTURE18	include/linux/GLES/gl.h	467;"	d
GL_TEXTURE18	include/linux/GLES2/gl2.h	357;"	d
GL_TEXTURE18	include/linux/GLES3/gl3.h	381;"	d
GL_TEXTURE18	include/linux/GLES3/gl31.h	293;"	d
GL_TEXTURE19	include/linux/GLES/gl.h	468;"	d
GL_TEXTURE19	include/linux/GLES2/gl2.h	358;"	d
GL_TEXTURE19	include/linux/GLES3/gl3.h	382;"	d
GL_TEXTURE19	include/linux/GLES3/gl31.h	294;"	d
GL_TEXTURE2	include/linux/GLES/gl.h	451;"	d
GL_TEXTURE2	include/linux/GLES2/gl2.h	341;"	d
GL_TEXTURE2	include/linux/GLES3/gl3.h	365;"	d
GL_TEXTURE2	include/linux/GLES3/gl31.h	277;"	d
GL_TEXTURE20	include/linux/GLES/gl.h	469;"	d
GL_TEXTURE20	include/linux/GLES2/gl2.h	359;"	d
GL_TEXTURE20	include/linux/GLES3/gl3.h	383;"	d
GL_TEXTURE20	include/linux/GLES3/gl31.h	295;"	d
GL_TEXTURE21	include/linux/GLES/gl.h	470;"	d
GL_TEXTURE21	include/linux/GLES2/gl2.h	360;"	d
GL_TEXTURE21	include/linux/GLES3/gl3.h	384;"	d
GL_TEXTURE21	include/linux/GLES3/gl31.h	296;"	d
GL_TEXTURE22	include/linux/GLES/gl.h	471;"	d
GL_TEXTURE22	include/linux/GLES2/gl2.h	361;"	d
GL_TEXTURE22	include/linux/GLES3/gl3.h	385;"	d
GL_TEXTURE22	include/linux/GLES3/gl31.h	297;"	d
GL_TEXTURE23	include/linux/GLES/gl.h	472;"	d
GL_TEXTURE23	include/linux/GLES2/gl2.h	362;"	d
GL_TEXTURE23	include/linux/GLES3/gl3.h	386;"	d
GL_TEXTURE23	include/linux/GLES3/gl31.h	298;"	d
GL_TEXTURE24	include/linux/GLES/gl.h	473;"	d
GL_TEXTURE24	include/linux/GLES2/gl2.h	363;"	d
GL_TEXTURE24	include/linux/GLES3/gl3.h	387;"	d
GL_TEXTURE24	include/linux/GLES3/gl31.h	299;"	d
GL_TEXTURE25	include/linux/GLES/gl.h	474;"	d
GL_TEXTURE25	include/linux/GLES2/gl2.h	364;"	d
GL_TEXTURE25	include/linux/GLES3/gl3.h	388;"	d
GL_TEXTURE25	include/linux/GLES3/gl31.h	300;"	d
GL_TEXTURE26	include/linux/GLES/gl.h	475;"	d
GL_TEXTURE26	include/linux/GLES2/gl2.h	365;"	d
GL_TEXTURE26	include/linux/GLES3/gl3.h	389;"	d
GL_TEXTURE26	include/linux/GLES3/gl31.h	301;"	d
GL_TEXTURE27	include/linux/GLES/gl.h	476;"	d
GL_TEXTURE27	include/linux/GLES2/gl2.h	366;"	d
GL_TEXTURE27	include/linux/GLES3/gl3.h	390;"	d
GL_TEXTURE27	include/linux/GLES3/gl31.h	302;"	d
GL_TEXTURE28	include/linux/GLES/gl.h	477;"	d
GL_TEXTURE28	include/linux/GLES2/gl2.h	367;"	d
GL_TEXTURE28	include/linux/GLES3/gl3.h	391;"	d
GL_TEXTURE28	include/linux/GLES3/gl31.h	303;"	d
GL_TEXTURE29	include/linux/GLES/gl.h	478;"	d
GL_TEXTURE29	include/linux/GLES2/gl2.h	368;"	d
GL_TEXTURE29	include/linux/GLES3/gl3.h	392;"	d
GL_TEXTURE29	include/linux/GLES3/gl31.h	304;"	d
GL_TEXTURE3	include/linux/GLES/gl.h	452;"	d
GL_TEXTURE3	include/linux/GLES2/gl2.h	342;"	d
GL_TEXTURE3	include/linux/GLES3/gl3.h	366;"	d
GL_TEXTURE3	include/linux/GLES3/gl31.h	278;"	d
GL_TEXTURE30	include/linux/GLES/gl.h	479;"	d
GL_TEXTURE30	include/linux/GLES2/gl2.h	369;"	d
GL_TEXTURE30	include/linux/GLES3/gl3.h	393;"	d
GL_TEXTURE30	include/linux/GLES3/gl31.h	305;"	d
GL_TEXTURE31	include/linux/GLES/gl.h	480;"	d
GL_TEXTURE31	include/linux/GLES2/gl2.h	370;"	d
GL_TEXTURE31	include/linux/GLES3/gl3.h	394;"	d
GL_TEXTURE31	include/linux/GLES3/gl31.h	306;"	d
GL_TEXTURE4	include/linux/GLES/gl.h	453;"	d
GL_TEXTURE4	include/linux/GLES2/gl2.h	343;"	d
GL_TEXTURE4	include/linux/GLES3/gl3.h	367;"	d
GL_TEXTURE4	include/linux/GLES3/gl31.h	279;"	d
GL_TEXTURE5	include/linux/GLES/gl.h	454;"	d
GL_TEXTURE5	include/linux/GLES2/gl2.h	344;"	d
GL_TEXTURE5	include/linux/GLES3/gl3.h	368;"	d
GL_TEXTURE5	include/linux/GLES3/gl31.h	280;"	d
GL_TEXTURE6	include/linux/GLES/gl.h	455;"	d
GL_TEXTURE6	include/linux/GLES2/gl2.h	345;"	d
GL_TEXTURE6	include/linux/GLES3/gl3.h	369;"	d
GL_TEXTURE6	include/linux/GLES3/gl31.h	281;"	d
GL_TEXTURE7	include/linux/GLES/gl.h	456;"	d
GL_TEXTURE7	include/linux/GLES2/gl2.h	346;"	d
GL_TEXTURE7	include/linux/GLES3/gl3.h	370;"	d
GL_TEXTURE7	include/linux/GLES3/gl31.h	282;"	d
GL_TEXTURE8	include/linux/GLES/gl.h	457;"	d
GL_TEXTURE8	include/linux/GLES2/gl2.h	347;"	d
GL_TEXTURE8	include/linux/GLES3/gl3.h	371;"	d
GL_TEXTURE8	include/linux/GLES3/gl31.h	283;"	d
GL_TEXTURE9	include/linux/GLES/gl.h	458;"	d
GL_TEXTURE9	include/linux/GLES2/gl2.h	348;"	d
GL_TEXTURE9	include/linux/GLES3/gl3.h	372;"	d
GL_TEXTURE9	include/linux/GLES3/gl31.h	284;"	d
GL_TEXTURE_2D	include/linux/GLES/gl.h	132;"	d
GL_TEXTURE_2D	include/linux/GLES2/gl2.h	145;"	d
GL_TEXTURE_2D	include/linux/GLES3/gl3.h	169;"	d
GL_TEXTURE_2D	include/linux/GLES3/gl31.h	130;"	d
GL_TEXTURE_2D_ARRAY	include/linux/GLES3/gl3.h	587;"	d
GL_TEXTURE_2D_ARRAY	include/linux/GLES3/gl31.h	619;"	d
GL_TEXTURE_2D_MULTISAMPLE	include/linux/GLES3/gl31.h	1076;"	d
GL_TEXTURE_3D	include/linux/GLES3/gl3.h	512;"	d
GL_TEXTURE_3D	include/linux/GLES3/gl31.h	544;"	d
GL_TEXTURE_3D_OES	include/linux/GLES2/gl2ext.h	143;"	d
GL_TEXTURE_ALPHA_MODULATE_IMG	include/linux/GLES/glext.h	445;"	d
GL_TEXTURE_ALPHA_SIZE	include/linux/GLES3/gl31.h	1091;"	d
GL_TEXTURE_ALPHA_TYPE	include/linux/GLES3/gl31.h	1098;"	d
GL_TEXTURE_BASE_LEVEL	include/linux/GLES3/gl3.h	520;"	d
GL_TEXTURE_BASE_LEVEL	include/linux/GLES3/gl31.h	552;"	d
GL_TEXTURE_BINDING_2D	include/linux/GLES/gl.h	255;"	d
GL_TEXTURE_BINDING_2D	include/linux/GLES2/gl2.h	211;"	d
GL_TEXTURE_BINDING_2D	include/linux/GLES3/gl3.h	235;"	d
GL_TEXTURE_BINDING_2D	include/linux/GLES3/gl31.h	188;"	d
GL_TEXTURE_BINDING_2D_ARRAY	include/linux/GLES3/gl3.h	588;"	d
GL_TEXTURE_BINDING_2D_ARRAY	include/linux/GLES3/gl31.h	620;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	include/linux/GLES3/gl31.h	1081;"	d
GL_TEXTURE_BINDING_3D	include/linux/GLES3/gl3.h	509;"	d
GL_TEXTURE_BINDING_3D	include/linux/GLES3/gl31.h	541;"	d
GL_TEXTURE_BINDING_3D_OES	include/linux/GLES2/gl2ext.h	144;"	d
GL_TEXTURE_BINDING_CUBE_MAP	include/linux/GLES2/gl2.h	329;"	d
GL_TEXTURE_BINDING_CUBE_MAP	include/linux/GLES3/gl3.h	353;"	d
GL_TEXTURE_BINDING_CUBE_MAP	include/linux/GLES3/gl31.h	267;"	d
GL_TEXTURE_BINDING_CUBE_MAP_OES	include/linux/GLES/glext.h	203;"	d
GL_TEXTURE_BINDING_EXTERNAL_OES	include/linux/GLES/glext.h	75;"	d
GL_TEXTURE_BINDING_EXTERNAL_OES	include/linux/GLES2/gl2ext.h	65;"	d
GL_TEXTURE_BLUE_SIZE	include/linux/GLES3/gl31.h	1090;"	d
GL_TEXTURE_BLUE_TYPE	include/linux/GLES3/gl31.h	1097;"	d
GL_TEXTURE_COMPARE_FUNC	include/linux/GLES3/gl3.h	527;"	d
GL_TEXTURE_COMPARE_FUNC	include/linux/GLES3/gl31.h	559;"	d
GL_TEXTURE_COMPARE_FUNC_EXT	include/linux/GLES2/gl2ext.h	549;"	d
GL_TEXTURE_COMPARE_MODE	include/linux/GLES3/gl3.h	526;"	d
GL_TEXTURE_COMPARE_MODE	include/linux/GLES3/gl31.h	558;"	d
GL_TEXTURE_COMPARE_MODE_EXT	include/linux/GLES2/gl2ext.h	548;"	d
GL_TEXTURE_COMPRESSED	include/linux/GLES3/gl31.h	1100;"	d
GL_TEXTURE_COORD_ARRAY	include/linux/GLES/gl.h	158;"	d
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	include/linux/GLES/gl.h	513;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	include/linux/GLES/gl.h	270;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	include/linux/GLES/gl.h	264;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	include/linux/GLES/gl.h	266;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	include/linux/GLES/gl.h	265;"	d
GL_TEXTURE_CROP_RECT_OES	include/linux/GLES/glext.h	63;"	d
GL_TEXTURE_CUBE_MAP	include/linux/GLES2/gl2.h	328;"	d
GL_TEXTURE_CUBE_MAP	include/linux/GLES3/gl3.h	352;"	d
GL_TEXTURE_CUBE_MAP	include/linux/GLES3/gl31.h	266;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	include/linux/GLES2/gl2.h	331;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	include/linux/GLES3/gl3.h	355;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	include/linux/GLES3/gl31.h	269;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES	include/linux/GLES/glext.h	205;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	include/linux/GLES2/gl2.h	333;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	include/linux/GLES3/gl3.h	357;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	include/linux/GLES3/gl31.h	271;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES	include/linux/GLES/glext.h	207;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	include/linux/GLES2/gl2.h	335;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	include/linux/GLES3/gl3.h	359;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	include/linux/GLES3/gl31.h	273;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES	include/linux/GLES/glext.h	209;"	d
GL_TEXTURE_CUBE_MAP_OES	include/linux/GLES/glext.h	202;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	include/linux/GLES2/gl2.h	330;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	include/linux/GLES3/gl3.h	354;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	include/linux/GLES3/gl31.h	268;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES	include/linux/GLES/glext.h	204;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	include/linux/GLES2/gl2.h	332;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	include/linux/GLES3/gl3.h	356;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	include/linux/GLES3/gl31.h	270;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES	include/linux/GLES/glext.h	206;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	include/linux/GLES2/gl2.h	334;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	include/linux/GLES3/gl3.h	358;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	include/linux/GLES3/gl31.h	272;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES	include/linux/GLES/glext.h	208;"	d
GL_TEXTURE_DEPTH	include/linux/GLES3/gl31.h	1086;"	d
GL_TEXTURE_DEPTH_QCOM	include/linux/GLES/glext.h	493;"	d
GL_TEXTURE_DEPTH_QCOM	include/linux/GLES2/gl2ext.h	801;"	d
GL_TEXTURE_DEPTH_SIZE	include/linux/GLES3/gl31.h	1092;"	d
GL_TEXTURE_DEPTH_TYPE	include/linux/GLES3/gl31.h	1099;"	d
GL_TEXTURE_ENV	include/linux/GLES/gl.h	424;"	d
GL_TEXTURE_ENV_COLOR	include/linux/GLES/gl.h	421;"	d
GL_TEXTURE_ENV_MODE	include/linux/GLES/gl.h	420;"	d
GL_TEXTURE_EXTERNAL_OES	include/linux/GLES/glext.h	74;"	d
GL_TEXTURE_EXTERNAL_OES	include/linux/GLES2/gl2ext.h	63;"	d
GL_TEXTURE_FETCH_BARRIER_BIT	include/linux/GLES3/gl31.h	1028;"	d
GL_TEXTURE_FILTER_CONTROL_EXT	include/linux/GLES/glext.h	398;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	include/linux/GLES3/gl31.h	1083;"	d
GL_TEXTURE_FORMAT_QCOM	include/linux/GLES/glext.h	495;"	d
GL_TEXTURE_FORMAT_QCOM	include/linux/GLES2/gl2ext.h	803;"	d
GL_TEXTURE_GEN_MODE_OES	include/linux/GLES/glext.h	211;"	d
GL_TEXTURE_GEN_STR_OES	include/linux/GLES/glext.h	212;"	d
GL_TEXTURE_GREEN_SIZE	include/linux/GLES3/gl31.h	1089;"	d
GL_TEXTURE_GREEN_TYPE	include/linux/GLES3/gl31.h	1096;"	d
GL_TEXTURE_HEIGHT	include/linux/GLES3/gl31.h	1085;"	d
GL_TEXTURE_HEIGHT_QCOM	include/linux/GLES/glext.h	492;"	d
GL_TEXTURE_HEIGHT_QCOM	include/linux/GLES2/gl2ext.h	800;"	d
GL_TEXTURE_IMAGE_VALID_QCOM	include/linux/GLES/glext.h	497;"	d
GL_TEXTURE_IMAGE_VALID_QCOM	include/linux/GLES2/gl2ext.h	805;"	d
GL_TEXTURE_IMMUTABLE_FORMAT	include/linux/GLES3/gl3.h	796;"	d
GL_TEXTURE_IMMUTABLE_FORMAT	include/linux/GLES3/gl31.h	828;"	d
GL_TEXTURE_IMMUTABLE_FORMAT_EXT	include/linux/GLES/glext.h	404;"	d
GL_TEXTURE_IMMUTABLE_FORMAT_EXT	include/linux/GLES2/gl2ext.h	589;"	d
GL_TEXTURE_IMMUTABLE_LEVELS	include/linux/GLES3/gl3.h	799;"	d
GL_TEXTURE_IMMUTABLE_LEVELS	include/linux/GLES3/gl31.h	831;"	d
GL_TEXTURE_INTERNAL_FORMAT	include/linux/GLES3/gl31.h	1087;"	d
GL_TEXTURE_INTERNAL_FORMAT_QCOM	include/linux/GLES/glext.h	494;"	d
GL_TEXTURE_INTERNAL_FORMAT_QCOM	include/linux/GLES2/gl2ext.h	802;"	d
GL_TEXTURE_LOD_BIAS_EXT	include/linux/GLES/glext.h	399;"	d
GL_TEXTURE_MAG_FILTER	include/linux/GLES/gl.h	439;"	d
GL_TEXTURE_MAG_FILTER	include/linux/GLES2/gl2.h	319;"	d
GL_TEXTURE_MAG_FILTER	include/linux/GLES3/gl3.h	343;"	d
GL_TEXTURE_MAG_FILTER	include/linux/GLES3/gl31.h	261;"	d
GL_TEXTURE_MATRIX	include/linux/GLES/gl.h	225;"	d
GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES	include/linux/GLES/glext.h	138;"	d
GL_TEXTURE_MAX_ANISOTROPY_EXT	include/linux/GLES/glext.h	386;"	d
GL_TEXTURE_MAX_ANISOTROPY_EXT	include/linux/GLES2/gl2ext.h	570;"	d
GL_TEXTURE_MAX_LEVEL	include/linux/GLES3/gl3.h	521;"	d
GL_TEXTURE_MAX_LEVEL	include/linux/GLES3/gl31.h	553;"	d
GL_TEXTURE_MAX_LEVEL_APPLE	include/linux/GLES/glext.h	302;"	d
GL_TEXTURE_MAX_LEVEL_APPLE	include/linux/GLES2/gl2ext.h	409;"	d
GL_TEXTURE_MAX_LOD	include/linux/GLES3/gl3.h	519;"	d
GL_TEXTURE_MAX_LOD	include/linux/GLES3/gl31.h	551;"	d
GL_TEXTURE_MIN_FILTER	include/linux/GLES/gl.h	440;"	d
GL_TEXTURE_MIN_FILTER	include/linux/GLES2/gl2.h	320;"	d
GL_TEXTURE_MIN_FILTER	include/linux/GLES3/gl3.h	344;"	d
GL_TEXTURE_MIN_FILTER	include/linux/GLES3/gl31.h	262;"	d
GL_TEXTURE_MIN_LOD	include/linux/GLES3/gl3.h	518;"	d
GL_TEXTURE_MIN_LOD	include/linux/GLES3/gl31.h	550;"	d
GL_TEXTURE_NUM_LEVELS_QCOM	include/linux/GLES/glext.h	498;"	d
GL_TEXTURE_NUM_LEVELS_QCOM	include/linux/GLES2/gl2ext.h	806;"	d
GL_TEXTURE_OBJECT_VALID_QCOM	include/linux/GLES/glext.h	500;"	d
GL_TEXTURE_OBJECT_VALID_QCOM	include/linux/GLES2/gl2ext.h	808;"	d
GL_TEXTURE_RED_SIZE	include/linux/GLES3/gl31.h	1088;"	d
GL_TEXTURE_RED_TYPE	include/linux/GLES3/gl31.h	1095;"	d
GL_TEXTURE_SAMPLES	include/linux/GLES3/gl31.h	1082;"	d
GL_TEXTURE_SAMPLES_IMG	include/linux/GLES/glext.h	468;"	d
GL_TEXTURE_SAMPLES_IMG	include/linux/GLES2/gl2ext.h	677;"	d
GL_TEXTURE_SHARED_SIZE	include/linux/GLES3/gl31.h	1094;"	d
GL_TEXTURE_STACK_DEPTH	include/linux/GLES/gl.h	222;"	d
GL_TEXTURE_STENCIL_SIZE	include/linux/GLES3/gl31.h	1093;"	d
GL_TEXTURE_SWIZZLE_A	include/linux/GLES3/gl3.h	774;"	d
GL_TEXTURE_SWIZZLE_A	include/linux/GLES3/gl31.h	806;"	d
GL_TEXTURE_SWIZZLE_B	include/linux/GLES3/gl3.h	773;"	d
GL_TEXTURE_SWIZZLE_B	include/linux/GLES3/gl31.h	805;"	d
GL_TEXTURE_SWIZZLE_G	include/linux/GLES3/gl3.h	772;"	d
GL_TEXTURE_SWIZZLE_G	include/linux/GLES3/gl31.h	804;"	d
GL_TEXTURE_SWIZZLE_R	include/linux/GLES3/gl3.h	771;"	d
GL_TEXTURE_SWIZZLE_R	include/linux/GLES3/gl31.h	803;"	d
GL_TEXTURE_TARGET_QCOM	include/linux/GLES/glext.h	499;"	d
GL_TEXTURE_TARGET_QCOM	include/linux/GLES2/gl2ext.h	807;"	d
GL_TEXTURE_TYPE_QCOM	include/linux/GLES/glext.h	496;"	d
GL_TEXTURE_TYPE_QCOM	include/linux/GLES2/gl2ext.h	804;"	d
GL_TEXTURE_UPDATE_BARRIER_BIT	include/linux/GLES3/gl31.h	1032;"	d
GL_TEXTURE_USAGE_ANGLE	include/linux/GLES2/gl2ext.h	334;"	d
GL_TEXTURE_WIDTH	include/linux/GLES3/gl31.h	1084;"	d
GL_TEXTURE_WIDTH_QCOM	include/linux/GLES/glext.h	491;"	d
GL_TEXTURE_WIDTH_QCOM	include/linux/GLES2/gl2ext.h	799;"	d
GL_TEXTURE_WRAP_R	include/linux/GLES3/gl3.h	513;"	d
GL_TEXTURE_WRAP_R	include/linux/GLES3/gl31.h	545;"	d
GL_TEXTURE_WRAP_R_OES	include/linux/GLES2/gl2ext.h	142;"	d
GL_TEXTURE_WRAP_S	include/linux/GLES/gl.h	441;"	d
GL_TEXTURE_WRAP_S	include/linux/GLES2/gl2.h	321;"	d
GL_TEXTURE_WRAP_S	include/linux/GLES3/gl3.h	345;"	d
GL_TEXTURE_WRAP_S	include/linux/GLES3/gl31.h	263;"	d
GL_TEXTURE_WRAP_T	include/linux/GLES/gl.h	442;"	d
GL_TEXTURE_WRAP_T	include/linux/GLES2/gl2.h	322;"	d
GL_TEXTURE_WRAP_T	include/linux/GLES3/gl3.h	346;"	d
GL_TEXTURE_WRAP_T	include/linux/GLES3/gl31.h	264;"	d
GL_TIMEOUT_EXPIRED	include/linux/GLES3/gl3.h	761;"	d
GL_TIMEOUT_EXPIRED	include/linux/GLES3/gl31.h	793;"	d
GL_TIMEOUT_EXPIRED_APPLE	include/linux/GLES/glext.h	285;"	d
GL_TIMEOUT_EXPIRED_APPLE	include/linux/GLES2/gl2ext.h	395;"	d
GL_TIMEOUT_IGNORED	include/linux/GLES3/gl3.h	765;"	d
GL_TIMEOUT_IGNORED	include/linux/GLES3/gl31.h	797;"	d
GL_TIMEOUT_IGNORED_APPLE	include/linux/GLES/glext.h	289;"	d
GL_TIMEOUT_IGNORED_APPLE	include/linux/GLES2/gl2ext.h	399;"	d
GL_TOP_LEVEL_ARRAY_SIZE	include/linux/GLES3/gl31.h	993;"	d
GL_TOP_LEVEL_ARRAY_STRIDE	include/linux/GLES3/gl31.h	994;"	d
GL_TRANSFORM_FEEDBACK	include/linux/GLES3/gl3.h	778;"	d
GL_TRANSFORM_FEEDBACK	include/linux/GLES3/gl31.h	810;"	d
GL_TRANSFORM_FEEDBACK_ACTIVE	include/linux/GLES3/gl3.h	780;"	d
GL_TRANSFORM_FEEDBACK_ACTIVE	include/linux/GLES3/gl31.h	812;"	d
GL_TRANSFORM_FEEDBACK_BARRIER_BIT	include/linux/GLES3/gl31.h	1035;"	d
GL_TRANSFORM_FEEDBACK_BINDING	include/linux/GLES3/gl3.h	781;"	d
GL_TRANSFORM_FEEDBACK_BINDING	include/linux/GLES3/gl31.h	813;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	include/linux/GLES3/gl3.h	605;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	include/linux/GLES3/gl31.h	637;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	include/linux/GLES3/gl3.h	606;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	include/linux/GLES3/gl31.h	638;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	include/linux/GLES3/gl3.h	594;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	include/linux/GLES3/gl31.h	626;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	include/linux/GLES3/gl3.h	598;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	include/linux/GLES3/gl31.h	630;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	include/linux/GLES3/gl3.h	597;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	include/linux/GLES3/gl31.h	629;"	d
GL_TRANSFORM_FEEDBACK_PAUSED	include/linux/GLES3/gl3.h	779;"	d
GL_TRANSFORM_FEEDBACK_PAUSED	include/linux/GLES3/gl31.h	811;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	include/linux/GLES3/gl3.h	599;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	include/linux/GLES3/gl31.h	631;"	d
GL_TRANSFORM_FEEDBACK_VARYING	include/linux/GLES3/gl31.h	973;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	include/linux/GLES3/gl3.h	596;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	include/linux/GLES3/gl31.h	628;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	include/linux/GLES3/gl3.h	593;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	include/linux/GLES3/gl31.h	625;"	d
GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE	include/linux/GLES2/gl2ext.h	340;"	d
GL_TRIANGLES	include/linux/GLES/gl.h	60;"	d
GL_TRIANGLES	include/linux/GLES2/gl2.h	58;"	d
GL_TRIANGLES	include/linux/GLES3/gl3.h	92;"	d
GL_TRIANGLES	include/linux/GLES3/gl31.h	88;"	d
GL_TRIANGLE_FAN	include/linux/GLES/gl.h	62;"	d
GL_TRIANGLE_FAN	include/linux/GLES2/gl2.h	60;"	d
GL_TRIANGLE_FAN	include/linux/GLES3/gl3.h	94;"	d
GL_TRIANGLE_FAN	include/linux/GLES3/gl31.h	90;"	d
GL_TRIANGLE_STRIP	include/linux/GLES/gl.h	61;"	d
GL_TRIANGLE_STRIP	include/linux/GLES2/gl2.h	59;"	d
GL_TRIANGLE_STRIP	include/linux/GLES3/gl3.h	93;"	d
GL_TRIANGLE_STRIP	include/linux/GLES3/gl31.h	89;"	d
GL_TRUE	include/linux/GLES/gl.h	53;"	d
GL_TRUE	include/linux/GLES2/gl2.h	51;"	d
GL_TRUE	include/linux/GLES3/gl3.h	85;"	d
GL_TRUE	include/linux/GLES3/gl31.h	83;"	d
GL_TYPE	include/linux/GLES3/gl31.h	978;"	d
GL_UNIFORM	include/linux/GLES3/gl31.h	966;"	d
GL_UNIFORM_ARRAY_STRIDE	include/linux/GLES3/gl3.h	738;"	d
GL_UNIFORM_ARRAY_STRIDE	include/linux/GLES3/gl31.h	770;"	d
GL_UNIFORM_BARRIER_BIT	include/linux/GLES3/gl31.h	1027;"	d
GL_UNIFORM_BLOCK	include/linux/GLES3/gl31.h	967;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	include/linux/GLES3/gl3.h	744;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	include/linux/GLES3/gl31.h	776;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	include/linux/GLES3/gl3.h	745;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	include/linux/GLES3/gl31.h	777;"	d
GL_UNIFORM_BLOCK_BINDING	include/linux/GLES3/gl3.h	741;"	d
GL_UNIFORM_BLOCK_BINDING	include/linux/GLES3/gl31.h	773;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	include/linux/GLES3/gl3.h	742;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	include/linux/GLES3/gl31.h	774;"	d
GL_UNIFORM_BLOCK_INDEX	include/linux/GLES3/gl3.h	736;"	d
GL_UNIFORM_BLOCK_INDEX	include/linux/GLES3/gl31.h	768;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	include/linux/GLES3/gl3.h	743;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	include/linux/GLES3/gl31.h	775;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	include/linux/GLES3/gl3.h	747;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	include/linux/GLES3/gl31.h	779;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	include/linux/GLES3/gl3.h	746;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	include/linux/GLES3/gl31.h	778;"	d
GL_UNIFORM_BUFFER	include/linux/GLES3/gl3.h	719;"	d
GL_UNIFORM_BUFFER	include/linux/GLES3/gl31.h	751;"	d
GL_UNIFORM_BUFFER_BINDING	include/linux/GLES3/gl3.h	720;"	d
GL_UNIFORM_BUFFER_BINDING	include/linux/GLES3/gl31.h	752;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	include/linux/GLES3/gl3.h	730;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	include/linux/GLES3/gl31.h	762;"	d
GL_UNIFORM_BUFFER_SIZE	include/linux/GLES3/gl3.h	722;"	d
GL_UNIFORM_BUFFER_SIZE	include/linux/GLES3/gl31.h	754;"	d
GL_UNIFORM_BUFFER_START	include/linux/GLES3/gl3.h	721;"	d
GL_UNIFORM_BUFFER_START	include/linux/GLES3/gl31.h	753;"	d
GL_UNIFORM_IS_ROW_MAJOR	include/linux/GLES3/gl3.h	740;"	d
GL_UNIFORM_IS_ROW_MAJOR	include/linux/GLES3/gl31.h	772;"	d
GL_UNIFORM_MATRIX_STRIDE	include/linux/GLES3/gl3.h	739;"	d
GL_UNIFORM_MATRIX_STRIDE	include/linux/GLES3/gl31.h	771;"	d
GL_UNIFORM_NAME_LENGTH	include/linux/GLES3/gl3.h	735;"	d
GL_UNIFORM_NAME_LENGTH	include/linux/GLES3/gl31.h	767;"	d
GL_UNIFORM_OFFSET	include/linux/GLES3/gl3.h	737;"	d
GL_UNIFORM_OFFSET	include/linux/GLES3/gl31.h	769;"	d
GL_UNIFORM_SIZE	include/linux/GLES3/gl3.h	734;"	d
GL_UNIFORM_SIZE	include/linux/GLES3/gl31.h	766;"	d
GL_UNIFORM_TYPE	include/linux/GLES3/gl3.h	733;"	d
GL_UNIFORM_TYPE	include/linux/GLES3/gl31.h	765;"	d
GL_UNKNOWN_CONTEXT_RESET_EXT	include/linux/GLES/glext.h	363;"	d
GL_UNKNOWN_CONTEXT_RESET_EXT	include/linux/GLES2/gl2ext.h	521;"	d
GL_UNPACK_ALIGNMENT	include/linux/GLES/gl.h	235;"	d
GL_UNPACK_ALIGNMENT	include/linux/GLES/gl.h	369;"	d
GL_UNPACK_ALIGNMENT	include/linux/GLES2/gl2.h	197;"	d
GL_UNPACK_ALIGNMENT	include/linux/GLES3/gl3.h	221;"	d
GL_UNPACK_ALIGNMENT	include/linux/GLES3/gl31.h	175;"	d
GL_UNPACK_IMAGE_HEIGHT	include/linux/GLES3/gl3.h	511;"	d
GL_UNPACK_IMAGE_HEIGHT	include/linux/GLES3/gl31.h	543;"	d
GL_UNPACK_ROW_LENGTH	include/linux/GLES2/gl2ext.h	621;"	d
GL_UNPACK_ROW_LENGTH	include/linux/GLES3/gl3.h	496;"	d
GL_UNPACK_ROW_LENGTH	include/linux/GLES3/gl31.h	528;"	d
GL_UNPACK_SKIP_IMAGES	include/linux/GLES3/gl3.h	510;"	d
GL_UNPACK_SKIP_IMAGES	include/linux/GLES3/gl31.h	542;"	d
GL_UNPACK_SKIP_PIXELS	include/linux/GLES2/gl2ext.h	623;"	d
GL_UNPACK_SKIP_PIXELS	include/linux/GLES3/gl3.h	498;"	d
GL_UNPACK_SKIP_PIXELS	include/linux/GLES3/gl31.h	530;"	d
GL_UNPACK_SKIP_ROWS	include/linux/GLES2/gl2ext.h	622;"	d
GL_UNPACK_SKIP_ROWS	include/linux/GLES3/gl3.h	497;"	d
GL_UNPACK_SKIP_ROWS	include/linux/GLES3/gl31.h	529;"	d
GL_UNSIGNALED	include/linux/GLES3/gl3.h	758;"	d
GL_UNSIGNALED	include/linux/GLES3/gl31.h	790;"	d
GL_UNSIGNALED_APPLE	include/linux/GLES/glext.h	282;"	d
GL_UNSIGNALED_APPLE	include/linux/GLES2/gl2ext.h	392;"	d
GL_UNSIGNED_BYTE	include/linux/GLES/gl.h	315;"	d
GL_UNSIGNED_BYTE	include/linux/GLES2/gl2.h	236;"	d
GL_UNSIGNED_BYTE	include/linux/GLES3/gl3.h	260;"	d
GL_UNSIGNED_BYTE	include/linux/GLES3/gl31.h	200;"	d
GL_UNSIGNED_INT	include/linux/GLES/glext.h	81;"	d
GL_UNSIGNED_INT	include/linux/GLES2/gl2.h	240;"	d
GL_UNSIGNED_INT	include/linux/GLES2/gl2ext.h	71;"	d
GL_UNSIGNED_INT	include/linux/GLES3/gl3.h	264;"	d
GL_UNSIGNED_INT	include/linux/GLES3/gl31.h	204;"	d
GL_UNSIGNED_INT64_AMD	include/linux/GLES2/gl2ext.h	281;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	include/linux/GLES3/gl3.h	590;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	include/linux/GLES3/gl31.h	622;"	d
GL_UNSIGNED_INT_10_10_10_2_OES	include/linux/GLES2/gl2ext.h	177;"	d
GL_UNSIGNED_INT_24_8	include/linux/GLES3/gl3.h	654;"	d
GL_UNSIGNED_INT_24_8	include/linux/GLES3/gl31.h	686;"	d
GL_UNSIGNED_INT_24_8_OES	include/linux/GLES/glext.h	164;"	d
GL_UNSIGNED_INT_24_8_OES	include/linux/GLES2/gl2ext.h	92;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	include/linux/GLES3/gl3.h	515;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	include/linux/GLES3/gl31.h	547;"	d
GL_UNSIGNED_INT_2_10_10_10_REV_EXT	include/linux/GLES2/gl2ext.h	616;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	include/linux/GLES3/gl3.h	592;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	include/linux/GLES3/gl31.h	624;"	d
GL_UNSIGNED_INT_ATOMIC_COUNTER	include/linux/GLES3/gl31.h	1014;"	d
GL_UNSIGNED_INT_IMAGE_2D	include/linux/GLES3/gl31.h	1046;"	d
GL_UNSIGNED_INT_IMAGE_2D_ARRAY	include/linux/GLES3/gl31.h	1049;"	d
GL_UNSIGNED_INT_IMAGE_3D	include/linux/GLES3/gl31.h	1047;"	d
GL_UNSIGNED_INT_IMAGE_CUBE	include/linux/GLES3/gl31.h	1048;"	d
GL_UNSIGNED_INT_SAMPLER_2D	include/linux/GLES3/gl3.h	632;"	d
GL_UNSIGNED_INT_SAMPLER_2D	include/linux/GLES3/gl31.h	664;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	include/linux/GLES3/gl3.h	635;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	include/linux/GLES3/gl31.h	667;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	include/linux/GLES3/gl31.h	1103;"	d
GL_UNSIGNED_INT_SAMPLER_3D	include/linux/GLES3/gl3.h	633;"	d
GL_UNSIGNED_INT_SAMPLER_3D	include/linux/GLES3/gl31.h	665;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	include/linux/GLES3/gl3.h	634;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	include/linux/GLES3/gl31.h	666;"	d
GL_UNSIGNED_INT_VEC2	include/linux/GLES3/gl3.h	625;"	d
GL_UNSIGNED_INT_VEC2	include/linux/GLES3/gl31.h	657;"	d
GL_UNSIGNED_INT_VEC3	include/linux/GLES3/gl3.h	626;"	d
GL_UNSIGNED_INT_VEC3	include/linux/GLES3/gl31.h	658;"	d
GL_UNSIGNED_INT_VEC4	include/linux/GLES3/gl3.h	627;"	d
GL_UNSIGNED_INT_VEC4	include/linux/GLES3/gl31.h	659;"	d
GL_UNSIGNED_NORMALIZED	include/linux/GLES3/gl3.h	656;"	d
GL_UNSIGNED_NORMALIZED	include/linux/GLES3/gl31.h	688;"	d
GL_UNSIGNED_NORMALIZED_EXT	include/linux/GLES2/gl2ext.h	446;"	d
GL_UNSIGNED_SHORT	include/linux/GLES/gl.h	317;"	d
GL_UNSIGNED_SHORT	include/linux/GLES2/gl2.h	238;"	d
GL_UNSIGNED_SHORT	include/linux/GLES3/gl3.h	262;"	d
GL_UNSIGNED_SHORT	include/linux/GLES3/gl31.h	202;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT	include/linux/GLES/glext.h	355;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT	include/linux/GLES2/gl2ext.h	513;"	d
GL_UNSIGNED_SHORT_4_4_4_4	include/linux/GLES/gl.h	374;"	d
GL_UNSIGNED_SHORT_4_4_4_4	include/linux/GLES2/gl2.h	254;"	d
GL_UNSIGNED_SHORT_4_4_4_4	include/linux/GLES3/gl3.h	278;"	d
GL_UNSIGNED_SHORT_4_4_4_4	include/linux/GLES3/gl31.h	213;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT	include/linux/GLES/glext.h	354;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT	include/linux/GLES2/gl2ext.h	512;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG	include/linux/GLES/glext.h	430;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG	include/linux/GLES2/gl2ext.h	656;"	d
GL_UNSIGNED_SHORT_5_5_5_1	include/linux/GLES/gl.h	375;"	d
GL_UNSIGNED_SHORT_5_5_5_1	include/linux/GLES2/gl2.h	255;"	d
GL_UNSIGNED_SHORT_5_5_5_1	include/linux/GLES3/gl3.h	279;"	d
GL_UNSIGNED_SHORT_5_5_5_1	include/linux/GLES3/gl31.h	214;"	d
GL_UNSIGNED_SHORT_5_6_5	include/linux/GLES/gl.h	376;"	d
GL_UNSIGNED_SHORT_5_6_5	include/linux/GLES2/gl2.h	256;"	d
GL_UNSIGNED_SHORT_5_6_5	include/linux/GLES3/gl3.h	280;"	d
GL_UNSIGNED_SHORT_5_6_5	include/linux/GLES3/gl31.h	215;"	d
GL_UNSIGNED_SHORT_8_8_APPLE	include/linux/GLES2/gl2ext.h	364;"	d
GL_UNSIGNED_SHORT_8_8_REV_APPLE	include/linux/GLES2/gl2ext.h	365;"	d
GL_VALIDATE_STATUS	include/linux/GLES2/gl2.h	271;"	d
GL_VALIDATE_STATUS	include/linux/GLES3/gl3.h	295;"	d
GL_VALIDATE_STATUS	include/linux/GLES3/gl31.h	228;"	d
GL_VENDOR	include/linux/GLES/gl.h	401;"	d
GL_VENDOR	include/linux/GLES2/gl2.h	301;"	d
GL_VENDOR	include/linux/GLES3/gl3.h	325;"	d
GL_VENDOR	include/linux/GLES3/gl31.h	251;"	d
GL_VERSION	include/linux/GLES/gl.h	403;"	d
GL_VERSION	include/linux/GLES2/gl2.h	303;"	d
GL_VERSION	include/linux/GLES3/gl3.h	327;"	d
GL_VERSION	include/linux/GLES3/gl31.h	253;"	d
GL_VERSION_ES_CL_1_0	include/linux/GLES/gl.h	42;"	d
GL_VERSION_ES_CL_1_1	include/linux/GLES/gl.h	44;"	d
GL_VERSION_ES_CM_1_0	include/linux/GLES/gl.h	41;"	d
GL_VERSION_ES_CM_1_1	include/linux/GLES/gl.h	43;"	d
GL_VERTEX_ARRAY	include/linux/GLES/gl.h	155;"	d
GL_VERTEX_ARRAY_BINDING	include/linux/GLES3/gl3.h	708;"	d
GL_VERTEX_ARRAY_BINDING	include/linux/GLES3/gl31.h	740;"	d
GL_VERTEX_ARRAY_BINDING_OES	include/linux/GLES/glext.h	222;"	d
GL_VERTEX_ARRAY_BINDING_OES	include/linux/GLES2/gl2ext.h	169;"	d
GL_VERTEX_ARRAY_BUFFER_BINDING	include/linux/GLES/gl.h	510;"	d
GL_VERTEX_ARRAY_OBJECT_EXT	include/linux/GLES2/gl2ext.h	456;"	d
GL_VERTEX_ARRAY_POINTER	include/linux/GLES/gl.h	267;"	d
GL_VERTEX_ARRAY_SIZE	include/linux/GLES/gl.h	256;"	d
GL_VERTEX_ARRAY_STRIDE	include/linux/GLES/gl.h	258;"	d
GL_VERTEX_ARRAY_TYPE	include/linux/GLES/gl.h	257;"	d
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT	include/linux/GLES3/gl31.h	1025;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	include/linux/GLES2/gl2.h	402;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	include/linux/GLES3/gl3.h	426;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	include/linux/GLES3/gl31.h	332;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	include/linux/GLES3/gl3.h	766;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	include/linux/GLES3/gl31.h	798;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE	include/linux/GLES2/gl2ext.h	314;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	include/linux/GLES2/gl2.h	396;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	include/linux/GLES3/gl3.h	420;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	include/linux/GLES3/gl31.h	326;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	include/linux/GLES3/gl3.h	582;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	include/linux/GLES3/gl31.h	614;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	include/linux/GLES2/gl2.h	400;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	include/linux/GLES3/gl3.h	424;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	include/linux/GLES3/gl31.h	330;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	include/linux/GLES2/gl2.h	401;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	include/linux/GLES3/gl3.h	425;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	include/linux/GLES3/gl31.h	331;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	include/linux/GLES2/gl2.h	397;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	include/linux/GLES3/gl3.h	421;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	include/linux/GLES3/gl31.h	327;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	include/linux/GLES2/gl2.h	398;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	include/linux/GLES3/gl3.h	422;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	include/linux/GLES3/gl31.h	328;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	include/linux/GLES2/gl2.h	399;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	include/linux/GLES3/gl3.h	423;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	include/linux/GLES3/gl31.h	329;"	d
GL_VERTEX_ATTRIB_BINDING	include/linux/GLES3/gl31.h	1104;"	d
GL_VERTEX_ATTRIB_RELATIVE_OFFSET	include/linux/GLES3/gl31.h	1105;"	d
GL_VERTEX_BINDING_BUFFER	include/linux/GLES3/gl31.h	1109;"	d
GL_VERTEX_BINDING_DIVISOR	include/linux/GLES3/gl31.h	1106;"	d
GL_VERTEX_BINDING_OFFSET	include/linux/GLES3/gl31.h	1107;"	d
GL_VERTEX_BINDING_STRIDE	include/linux/GLES3/gl31.h	1108;"	d
GL_VERTEX_SHADER	include/linux/GLES2/gl2.h	260;"	d
GL_VERTEX_SHADER	include/linux/GLES3/gl3.h	284;"	d
GL_VERTEX_SHADER	include/linux/GLES3/gl31.h	217;"	d
GL_VERTEX_SHADER_BIT	include/linux/GLES3/gl31.h	996;"	d
GL_VERTEX_SHADER_BIT_EXT	include/linux/GLES2/gl2ext.h	530;"	d
GL_VIEWPORT	include/linux/GLES/gl.h	219;"	d
GL_VIEWPORT	include/linux/GLES2/gl2.h	192;"	d
GL_VIEWPORT	include/linux/GLES3/gl3.h	216;"	d
GL_VIEWPORT	include/linux/GLES3/gl31.h	171;"	d
GL_VIV_shader_binary	include/linux/GLES2/gl2ext.h	1802;"	d
GL_WAIT_FAILED	include/linux/GLES3/gl3.h	763;"	d
GL_WAIT_FAILED	include/linux/GLES3/gl31.h	795;"	d
GL_WAIT_FAILED_APPLE	include/linux/GLES/glext.h	287;"	d
GL_WAIT_FAILED_APPLE	include/linux/GLES2/gl2ext.h	397;"	d
GL_WEIGHT_ARRAY_BUFFER_BINDING_OES	include/linux/GLES/glext.h	158;"	d
GL_WEIGHT_ARRAY_OES	include/linux/GLES/glext.h	147;"	d
GL_WEIGHT_ARRAY_POINTER_OES	include/linux/GLES/glext.h	157;"	d
GL_WEIGHT_ARRAY_SIZE_OES	include/linux/GLES/glext.h	154;"	d
GL_WEIGHT_ARRAY_STRIDE_OES	include/linux/GLES/glext.h	156;"	d
GL_WEIGHT_ARRAY_TYPE_OES	include/linux/GLES/glext.h	155;"	d
GL_WRITEONLY_RENDERING_QCOM	include/linux/GLES/glext.h	514;"	d
GL_WRITEONLY_RENDERING_QCOM	include/linux/GLES2/gl2ext.h	822;"	d
GL_WRITE_ONLY	include/linux/GLES3/gl31.h	1054;"	d
GL_WRITE_ONLY_OES	include/linux/GLES/glext.h	128;"	d
GL_WRITE_ONLY_OES	include/linux/GLES2/gl2ext.h	83;"	d
GL_XOR	include/linux/GLES/gl.h	328;"	d
GL_Z400_BINARY_AMD	include/linux/GLES2/gl2ext.h	290;"	d
GL_ZERO	include/linux/GLES/gl.h	75;"	d
GL_ZERO	include/linux/GLES2/gl2.h	73;"	d
GL_ZERO	include/linux/GLES3/gl3.h	97;"	d
GL_ZERO	include/linux/GLES3/gl31.h	91;"	d
GLbitfield	include/linux/GLES/gl.h	/^typedef unsigned int     GLbitfield;$/;"	t
GLbitfield	include/linux/GLES2/gl2.h	/^typedef unsigned int     GLbitfield;$/;"	t
GLbitfield	include/linux/GLES3/gl3.h	/^typedef unsigned int     GLbitfield;$/;"	t
GLbitfield	include/linux/GLES3/gl31.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	include/linux/GLES/gl.h	/^typedef unsigned char    GLboolean;$/;"	t
GLboolean	include/linux/GLES2/gl2.h	/^typedef unsigned char    GLboolean;$/;"	t
GLboolean	include/linux/GLES3/gl3.h	/^typedef unsigned char    GLboolean;$/;"	t
GLboolean	include/linux/GLES3/gl31.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	include/linux/GLES/gl.h	/^typedef khronos_int8_t   GLbyte;$/;"	t
GLbyte	include/linux/GLES2/gl2.h	/^typedef khronos_int8_t   GLbyte;$/;"	t
GLbyte	include/linux/GLES3/gl3.h	/^typedef khronos_int8_t   GLbyte;$/;"	t
GLbyte	include/linux/GLES3/gl31.h	/^typedef khronos_int8_t GLbyte;$/;"	t
GLchar	include/linux/GLES/gl.h	/^typedef char             GLchar;$/;"	t
GLchar	include/linux/GLES2/gl2.h	/^typedef char             GLchar;$/;"	t
GLchar	include/linux/GLES3/gl3.h	/^typedef char             GLchar;$/;"	t
GLchar	include/linux/GLES3/gl31.h	/^typedef char GLchar;$/;"	t
GLclampf	include/linux/GLES/gl.h	/^typedef khronos_float_t  GLclampf;$/;"	t
GLclampf	include/linux/GLES2/gl2.h	/^typedef khronos_float_t  GLclampf;$/;"	t
GLclampf	include/linux/GLES3/gl3.h	/^typedef khronos_float_t  GLclampf;$/;"	t
GLclampf	include/linux/GLES3/gl31.h	/^typedef khronos_float_t GLclampf;$/;"	t
GLclampx	include/linux/GLES/gl.h	/^typedef khronos_int32_t  GLclampx;$/;"	t
GLeglImageOES	include/linux/GLES/glext.h	/^typedef void* GLeglImageOES;$/;"	t
GLeglImageOES	include/linux/GLES2/gl2ext.h	/^typedef void* GLeglImageOES;$/;"	t
GLenum	include/linux/GLES/gl.h	/^typedef unsigned int     GLenum;$/;"	t
GLenum	include/linux/GLES2/gl2.h	/^typedef unsigned int     GLenum;$/;"	t
GLenum	include/linux/GLES3/gl3.h	/^typedef unsigned int     GLenum;$/;"	t
GLenum	include/linux/GLES3/gl31.h	/^typedef unsigned int GLenum;$/;"	t
GLfixed	include/linux/GLES/gl.h	/^typedef khronos_int32_t  GLfixed;$/;"	t
GLfixed	include/linux/GLES2/gl2.h	/^typedef khronos_int32_t  GLfixed;$/;"	t
GLfixed	include/linux/GLES3/gl3.h	/^typedef khronos_int32_t  GLfixed;$/;"	t
GLfixed	include/linux/GLES3/gl31.h	/^typedef khronos_int32_t GLfixed;$/;"	t
GLfloat	include/linux/GLES/gl.h	/^typedef khronos_float_t  GLfloat;$/;"	t
GLfloat	include/linux/GLES2/gl2.h	/^typedef khronos_float_t  GLfloat;$/;"	t
GLfloat	include/linux/GLES3/gl3.h	/^typedef khronos_float_t  GLfloat;$/;"	t
GLfloat	include/linux/GLES3/gl31.h	/^typedef khronos_float_t GLfloat;$/;"	t
GLhalf	include/linux/GLES3/gl3.h	/^typedef unsigned short   GLhalf;$/;"	t
GLhalf	include/linux/GLES3/gl31.h	/^typedef unsigned short GLhalf;$/;"	t
GLint	include/linux/GLES/gl.h	/^typedef int              GLint;$/;"	t
GLint	include/linux/GLES2/gl2.h	/^typedef int              GLint;$/;"	t
GLint	include/linux/GLES3/gl3.h	/^typedef int              GLint;$/;"	t
GLint	include/linux/GLES3/gl31.h	/^typedef int GLint;$/;"	t
GLint64	include/linux/GLES/glext.h	/^typedef khronos_int64_t GLint64;$/;"	t
GLint64	include/linux/GLES2/gl2ext.h	/^typedef khronos_int64_t GLint64;$/;"	t
GLint64	include/linux/GLES3/gl3.h	/^typedef khronos_int64_t  GLint64;$/;"	t
GLint64	include/linux/GLES3/gl31.h	/^typedef khronos_int64_t GLint64;$/;"	t
GLintptr	include/linux/GLES/gl.h	/^typedef khronos_intptr_t GLintptr;$/;"	t
GLintptr	include/linux/GLES2/gl2.h	/^typedef khronos_intptr_t GLintptr;$/;"	t
GLintptr	include/linux/GLES3/gl3.h	/^typedef khronos_intptr_t GLintptr;$/;"	t
GLintptr	include/linux/GLES3/gl31.h	/^typedef khronos_intptr_t GLintptr;$/;"	t
GLshort	include/linux/GLES/gl.h	/^typedef short            GLshort;$/;"	t
GLshort	include/linux/GLES2/gl2.h	/^typedef short            GLshort;$/;"	t
GLshort	include/linux/GLES3/gl3.h	/^typedef short            GLshort;$/;"	t
GLshort	include/linux/GLES3/gl31.h	/^typedef short GLshort;$/;"	t
GLsizei	include/linux/GLES/gl.h	/^typedef int              GLsizei;$/;"	t
GLsizei	include/linux/GLES2/gl2.h	/^typedef int              GLsizei;$/;"	t
GLsizei	include/linux/GLES3/gl3.h	/^typedef int              GLsizei;$/;"	t
GLsizei	include/linux/GLES3/gl31.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	include/linux/GLES/gl.h	/^typedef khronos_ssize_t  GLsizeiptr;$/;"	t
GLsizeiptr	include/linux/GLES2/gl2.h	/^typedef khronos_ssize_t  GLsizeiptr;$/;"	t
GLsizeiptr	include/linux/GLES3/gl3.h	/^typedef khronos_ssize_t  GLsizeiptr;$/;"	t
GLsizeiptr	include/linux/GLES3/gl31.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t
GLsync	include/linux/GLES/glext.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLsync	include/linux/GLES2/gl2ext.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLsync	include/linux/GLES3/gl3.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLsync	include/linux/GLES3/gl31.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	include/linux/GLES/gl.h	/^typedef khronos_uint8_t  GLubyte;$/;"	t
GLubyte	include/linux/GLES2/gl2.h	/^typedef khronos_uint8_t  GLubyte;$/;"	t
GLubyte	include/linux/GLES3/gl3.h	/^typedef khronos_uint8_t  GLubyte;$/;"	t
GLubyte	include/linux/GLES3/gl31.h	/^typedef khronos_uint8_t GLubyte;$/;"	t
GLuint	include/linux/GLES/gl.h	/^typedef unsigned int     GLuint;$/;"	t
GLuint	include/linux/GLES2/gl2.h	/^typedef unsigned int     GLuint;$/;"	t
GLuint	include/linux/GLES3/gl3.h	/^typedef unsigned int     GLuint;$/;"	t
GLuint	include/linux/GLES3/gl31.h	/^typedef unsigned int GLuint;$/;"	t
GLuint64	include/linux/GLES/glext.h	/^typedef khronos_uint64_t GLuint64;$/;"	t
GLuint64	include/linux/GLES2/gl2ext.h	/^typedef khronos_uint64_t GLuint64;$/;"	t
GLuint64	include/linux/GLES3/gl3.h	/^typedef khronos_uint64_t GLuint64;$/;"	t
GLuint64	include/linux/GLES3/gl31.h	/^typedef khronos_uint64_t GLuint64;$/;"	t
GLushort	include/linux/GLES/gl.h	/^typedef unsigned short   GLushort;$/;"	t
GLushort	include/linux/GLES2/gl2.h	/^typedef unsigned short   GLushort;$/;"	t
GLushort	include/linux/GLES3/gl3.h	/^typedef unsigned short   GLushort;$/;"	t
GLushort	include/linux/GLES3/gl31.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	include/linux/GLES/gl.h	/^typedef void             GLvoid;$/;"	t
GLvoid	include/linux/GLES2/gl2.h	/^typedef void             GLvoid;$/;"	t
GLvoid	include/linux/GLES3/gl3.h	/^typedef void             GLvoid;$/;"	t
GLvoid	include/linux/GLES3/gl31.h	/^typedef void GLvoid;$/;"	t
GPUTarget	arm_compute/core/GPUTarget.h	/^enum class GPUTarget$/;"	c	namespace:arm_compute
GPU_ARCH_MASK	arm_compute/core/GPUTarget.h	/^    GPU_ARCH_MASK = 0xF00,$/;"	m	class:arm_compute::GPUTarget
GPU_MAX_JOB_SLOTS	tests/framework/instruments/hwc.hpp	120;"	d
GRAD_X	tests/Types.h	/^    GRAD_X,  \/**< x gradient dimension *\/$/;"	m	class:arm_compute::GradientDimension
GRAD_XY	tests/Types.h	/^    GRAD_XY, \/**< x and y gradient dimension *\/$/;"	m	class:arm_compute::GradientDimension
GRAD_Y	tests/Types.h	/^    GRAD_Y,  \/**< y gradient dimension *\/$/;"	m	class:arm_compute::GradientDimension
Gaussian3x3ValidationFixture	tests/validation/fixtures/Gaussian3x3Fixture.h	/^class Gaussian3x3ValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Gaussian5x5ValidationFixture	tests/validation/fixtures/Gaussian5x5Fixture.h	/^class Gaussian5x5ValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
GaussianPyramidHalfValidationFixture	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^class GaussianPyramidHalfValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Gemm	arm_compute/core/NEON/kernels/convolution/winograd/gemm.hpp	/^inline void Gemm(const TIn* const a, const TIn* const b, TOut *c,$/;"	f
GemmBatched	src/core/NEON/kernels/arm_gemm/gemm_batched.hpp	/^    GemmBatched(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	class:arm_gemm::GemmBatched
GemmBatched	src/core/NEON/kernels/arm_gemm/gemm_batched.hpp	/^class GemmBatched : public GemmCommon<To, Tr>$/;"	c	namespace:arm_gemm
GemmCommon	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^class GemmCommon {$/;"	c	namespace:arm_gemm
GemmInterleaved	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    GemmInterleaved(const CPUInfo *ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	class:arm_gemm::GemmInterleaved
GemmInterleaved	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^class GemmInterleaved : public GemmCommon<To, Tr>$/;"	c	namespace:arm_gemm
GemmNative	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    GemmNative(const CPUInfo *ci, const unsigned int M, const unsigned int N, const unsigned int K, const unsigned int nbatches, const unsigned int nmultis, const Tr beta)$/;"	f	class:arm_gemm::GemmNative
GemmNative	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^class GemmNative : public GemmCommon<To, Tr>$/;"	c	namespace:arm_gemm
GemvNativeTransposed	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    GemvNativeTransposed(const CPUInfo *ci, const unsigned int N, const unsigned int K, const unsigned int nmultis, const Tr beta)$/;"	f	class:arm_gemm::GemvNativeTransposed
GemvNativeTransposed	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^class GemvNativeTransposed : public GemmCommon<To, Tr>$/;"	c	namespace:arm_gemm
GemvPretransposed	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    GemvPretransposed(const CPUInfo *ci, const unsigned int N, const unsigned int K, const unsigned int nmultis, const bool trB, const Tr beta)$/;"	f	class:arm_gemm::GemvPretransposed
GemvPretransposed	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^class GemvPretransposed : public GemmCommon<To, Tr>$/;"	c	namespace:arm_gemm
GetInfoFunctor0	include/CL/cl.hpp	/^struct GetInfoFunctor0$/;"	s	namespace:cl::detail
GetInfoFunctor0	include/CL/cl2.hpp	/^struct GetInfoFunctor0$/;"	s	namespace:cl::detail
GetInfoFunctor1	include/CL/cl.hpp	/^struct GetInfoFunctor1$/;"	s	namespace:cl::detail
GetInfoFunctor1	include/CL/cl2.hpp	/^struct GetInfoFunctor1$/;"	s	namespace:cl::detail
GlobalPoolingLayerDataset	tests/validation/CL/GlobalPoolingLayer.cpp	/^const auto GlobalPoolingLayerDataset = combine(datasets::GlobalPoolingShapes(), datasets::PoolingTypes());$/;"	m	namespace:arm_compute::test::validation::__anon425	file:
GlobalPoolingLayerDataset	tests/validation/GLES_COMPUTE/GlobalPoolingLayer.cpp	/^const auto GlobalPoolingLayerDataset = combine(datasets::GlobalPoolingShapes(), datasets::PoolingTypes());$/;"	m	namespace:arm_compute::test::validation::__anon463	file:
GlobalPoolingLayerDataset	tests/validation/NEON/GlobalPoolingLayer.cpp	/^const auto GlobalPoolingLayerDataset = combine(datasets::GlobalPoolingShapes(), datasets::PoolingTypes());$/;"	m	namespace:arm_compute::test::validation::__anon501	file:
GlobalPoolingLayerValidationFixture	tests/validation/fixtures/PoolingLayerFixture.h	/^class GlobalPoolingLayerValidationFixture : public PoolingLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
GlobalPoolingShapes	tests/datasets/ShapeDatasets.h	/^    GlobalPoolingShapes()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1ActivationLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ActivationLayerDataset.h	/^    GoogLeNetInceptionV1ActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1ConvolutionLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^    GoogLeNetInceptionV1ConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1DirectConvolutionLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^    GoogLeNetInceptionV1DirectConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1FullyConnectedLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1FullyConnectedLayerDataset.h	/^    GoogLeNetInceptionV1FullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1GEMMDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1GEMMDataset.h	/^    GoogLeNetInceptionV1GEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1NormalizationLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1NormalizationLayerDataset.h	/^    GoogLeNetInceptionV1NormalizationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1PoolingLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1PoolingLayerDataset.h	/^    GoogLeNetInceptionV1PoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV1WinogradLayerDataset	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^    GoogLeNetInceptionV1WinogradLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4ActivationLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ActivationLayerDataset.h	/^    GoogLeNetInceptionV4ActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4BatchNormalizationLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4BatchNormalizationLayerDataset.h	/^    GoogLeNetInceptionV4BatchNormalizationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4ConvolutionLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^    GoogLeNetInceptionV4ConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4DirectConvolutionLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^    GoogLeNetInceptionV4DirectConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4FullyConnectedLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4FullyConnectedLayerDataset.h	/^    GoogLeNetInceptionV4FullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset.h	/^    GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4PoolingLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4PoolingLayerDataset.h	/^    GoogLeNetInceptionV4PoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogLeNetInceptionV4WinogradLayerDataset	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^    GoogLeNetInceptionV4WinogradLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
GoogleNetGEMMDataset	tests/datasets/GoogleNetGEMMDataset.h	/^    GoogleNetGEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
GradientDimension	tests/Types.h	/^enum class GradientDimension$/;"	c	namespace:arm_compute
GradientDimensions	tests/datasets/GradientDimensionDataset.h	/^    GradientDimensions()$/;"	f	class:arm_compute::test::datasets::final
Graph	src/graph/Graph.cpp	/^Graph::Graph(GraphID id, std::string name)$/;"	f	class:arm_compute::graph::Graph
GraphAlexnetExample	examples/graph_alexnet.cpp	/^class GraphAlexnetExample : public Example$/;"	c	file:
GraphAlexnetExample	examples_mod/graph_alexnet.cpp	/^class GraphAlexnetExample : public Example$/;"	c	file:
GraphConfig	arm_compute/graph/Types.h	/^struct GraphConfig$/;"	s	namespace:arm_compute::graph
GraphContext	src/graph/GraphContext.cpp	/^GraphContext::GraphContext()$/;"	f	class:arm_compute::graph::GraphContext
GraphGooglenetExample	examples/graph_googlenet.cpp	/^class GraphGooglenetExample : public Example$/;"	c	file:
GraphGooglenetExample	examples_mod/graph_googlenet.cpp	/^class GraphGooglenetExample : public Example$/;"	c	file:
GraphLenetExample	examples/graph_lenet.cpp	/^class GraphLenetExample : public Example$/;"	c	file:
GraphManager	src/graph/GraphManager.cpp	/^GraphManager::GraphManager()$/;"	f	class:arm_compute::graph::GraphManager
GraphMobileNetQASYMM8Example	examples/graph_mobilenet_qasymm8.cpp	/^class GraphMobileNetQASYMM8Example : public Example$/;"	c	file:
GraphMobilenetExample	examples/graph_mobilenet.cpp	/^class GraphMobilenetExample : public Example$/;"	c	file:
GraphMobilenetExample	examples_mod/graph_mobilenet.cpp	/^class GraphMobilenetExample : public Example$/;"	c	file:
GraphResNeXt50Example	examples/graph_resnext50.cpp	/^class GraphResNeXt50Example : public Example$/;"	c	file:
GraphResNet50Example	examples/graph_resnet50.cpp	/^class GraphResNet50Example : public Example$/;"	c	file:
GraphResNet50Example	examples_mod/graph_resnet50.cpp	/^class GraphResNet50Example : public Example$/;"	c	file:
GraphSqueezenetExample	examples/graph_squeezenet.cpp	/^class GraphSqueezenetExample : public Example$/;"	c	file:
GraphSqueezenetExample	examples_mod/graph_squeezenet.cpp	/^class GraphSqueezenetExample : public Example$/;"	c	file:
GraphSqueezenet_v1_1Example	examples/graph_squeezenet_v1_1.cpp	/^class GraphSqueezenet_v1_1Example : public Example$/;"	c	file:
GraphVGG16Example	examples/graph_vgg16.cpp	/^class GraphVGG16Example : public Example$/;"	c	file:
GraphVGG16Example	examples_mod/graph_vgg16.cpp	/^class GraphVGG16Example : public Example$/;"	c	file:
GraphVGG19Example	examples/graph_vgg19.cpp	/^class GraphVGG19Example : public Example$/;"	c	file:
GraphVGG19Example	examples_mod/graph_vgg19.cpp	/^class GraphVGG19Example : public Example$/;"	c	file:
HALF_CONSTEXPR	include/half/half.hpp	163;"	d
HALF_CONSTEXPR	include/half/half.hpp	166;"	d
HALF_CONSTEXPR_CONST	include/half/half.hpp	164;"	d
HALF_CONSTEXPR_CONST	include/half/half.hpp	167;"	d
HALF_ENABLE_CPP11_CMATH	include/half/half.hpp	108;"	d
HALF_ENABLE_CPP11_CMATH	include/half/half.hpp	124;"	d
HALF_ENABLE_CPP11_CMATH	include/half/half.hpp	134;"	d
HALF_ENABLE_CPP11_CMATH	include/half/half.hpp	155;"	d
HALF_ENABLE_CPP11_CMATH	support/Half.h	29;"	d
HALF_ENABLE_CPP11_CONSTEXPR	include/half/half.hpp	34;"	d
HALF_ENABLE_CPP11_CONSTEXPR	include/half/half.hpp	64;"	d
HALF_ENABLE_CPP11_CONSTEXPR	include/half/half.hpp	78;"	d
HALF_ENABLE_CPP11_CSTDINT	include/half/half.hpp	105;"	d
HALF_ENABLE_CPP11_CSTDINT	include/half/half.hpp	121;"	d
HALF_ENABLE_CPP11_CSTDINT	include/half/half.hpp	131;"	d
HALF_ENABLE_CPP11_CSTDINT	include/half/half.hpp	147;"	d
HALF_ENABLE_CPP11_HASH	include/half/half.hpp	111;"	d
HALF_ENABLE_CPP11_HASH	include/half/half.hpp	127;"	d
HALF_ENABLE_CPP11_HASH	include/half/half.hpp	137;"	d
HALF_ENABLE_CPP11_HASH	include/half/half.hpp	150;"	d
HALF_ENABLE_CPP11_LONG_LONG	include/half/half.hpp	43;"	d
HALF_ENABLE_CPP11_LONG_LONG	include/half/half.hpp	73;"	d
HALF_ENABLE_CPP11_LONG_LONG	include/half/half.hpp	90;"	d
HALF_ENABLE_CPP11_NOEXCEPT	include/half/half.hpp	37;"	d
HALF_ENABLE_CPP11_NOEXCEPT	include/half/half.hpp	67;"	d
HALF_ENABLE_CPP11_NOEXCEPT	include/half/half.hpp	81;"	d
HALF_ENABLE_CPP11_STATIC_ASSERT	include/half/half.hpp	31;"	d
HALF_ENABLE_CPP11_STATIC_ASSERT	include/half/half.hpp	61;"	d
HALF_ENABLE_CPP11_STATIC_ASSERT	include/half/half.hpp	87;"	d
HALF_ENABLE_CPP11_TYPE_TRAITS	include/half/half.hpp	102;"	d
HALF_ENABLE_CPP11_TYPE_TRAITS	include/half/half.hpp	118;"	d
HALF_ENABLE_CPP11_TYPE_TRAITS	include/half/half.hpp	144;"	d
HALF_ENABLE_CPP11_USER_LITERALS	include/half/half.hpp	40;"	d
HALF_ENABLE_CPP11_USER_LITERALS	include/half/half.hpp	70;"	d
HALF_ENABLE_CPP11_USER_LITERALS	include/half/half.hpp	84;"	d
HALF_GNUC_VERSION	include/half/half.hpp	159;"	d
HALF_GNUC_VERSION	include/half/half.hpp	26;"	d
HALF_HALF_HPP	include/half/half.hpp	23;"	d
HALF_NOEXCEPT	include/half/half.hpp	/^			explicit HALF_CONSTEXPR expr(float f) HALF_NOEXCEPT : value_(f) {}$/;"	m	struct:half_float::detail::expr
HALF_NOEXCEPT	include/half/half.hpp	172;"	d
HALF_NOEXCEPT	include/half/half.hpp	175;"	d
HALF_NOTHROW	include/half/half.hpp	173;"	d
HALF_NOTHROW	include/half/half.hpp	176;"	d
HALF_POP_WARNINGS	include/half/half.hpp	92;"	d
HALF_ROUND_STYLE	include/half/half.hpp	214;"	d
HALF_ROUND_STYLE	support/Half.h	33;"	d
HALF_ROUND_TIES_TO_EVEN	include/half/half.hpp	223;"	d
HALF_ROUND_TIES_TO_EVEN	support/Half.h	34;"	d
HEIGHT	arm_compute/core/Types.h	/^    HEIGHT,  \/**< height *\/$/;"	m	class:arm_compute::DataLayoutDimension
HOG	arm_compute/runtime/HOG.h	/^class HOG : public IHOG$/;"	c	namespace:arm_compute
HOG	src/runtime/HOG.cpp	/^HOG::HOG()$/;"	f	class:HOG
HOGAccessor	tests/NEON/HOGAccessor.h	/^    HOGAccessor(HOG &hog)$/;"	f	class:arm_compute::test::HOGAccessor
HOGAccessor	tests/NEON/HOGAccessor.h	/^class HOGAccessor : public IHOGAccessor$/;"	c	namespace:arm_compute::test
HOGDescriptorDataset	tests/datasets/HOGDescriptorDataset.h	/^class HOGDescriptorDataset$/;"	c	namespace:arm_compute::test::datasets
HOGDescriptorFixture	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^class HOGDescriptorFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
HOGDescriptorValidationFixture	tests/validation/fixtures/HOGDescriptorFixture.h	/^class HOGDescriptorValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
HOGDetectorValidationFixture	tests/validation/fixtures/HOGDetectorFixture.h	/^class HOGDetectorValidationFixture : public HOGDescriptorValidationFixture<TensorType, HOGType, AccessorType, HOGDescriptorType, T, U>$/;"	c	namespace:arm_compute::test::validation
HOGInfo	arm_compute/core/HOGInfo.h	/^class HOGInfo$/;"	c	namespace:arm_compute
HOGInfo	src/core/HOGInfo.cpp	/^HOGInfo::HOGInfo()$/;"	f	class:HOGInfo
HOGInfo	src/core/HOGInfo.cpp	/^HOGInfo::HOGInfo(const Size2D &cell_size, const Size2D &block_size, const Size2D &detection_window_size, const Size2D &block_stride, size_t num_bins,$/;"	f	class:HOGInfo
HOGMultiDetectionDataset	tests/datasets/HOGMultiDetectionDataset.h	/^class HOGMultiDetectionDataset$/;"	c	namespace:arm_compute::test::datasets
HOGMultiDetectionValidationFixture	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^class HOGMultiDetectionValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
HOGNormType	arm_compute/core/Types.h	/^enum class HOGNormType$/;"	c	namespace:arm_compute
HUGE_VALH	include/half/half.hpp	229;"	d
HWCAP_ASIMDDP	src/runtime/CPUUtils.cpp	64;"	d	file:
HWCAP_ASIMDHP	src/runtime/CPUUtils.cpp	56;"	d	file:
HWCAP_CPUID	src/runtime/CPUUtils.cpp	60;"	d	file:
HWCNT_READER_API	tests/framework/instruments/hwc.hpp	/^static const uint32_t HWCNT_READER_API = 1;$/;"	m	namespace:mali_userspace::__anon390
HWIO	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  HWIO,  \/\/\/< [Height x Width x Input channels x Output channels]$/;"	e	enum:WeightOrder
HarrisCornersFixture	tests/benchmark/fixtures/HarrisCornersFixture.h	/^class HarrisCornersFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
HarrisCornersParameters	tests/validation/Helpers.h	/^struct HarrisCornersParameters$/;"	s	namespace:arm_compute::test::validation
HarrisCornersValidationFixture	tests/validation/fixtures/HarrisCornersFixture.h	/^class HarrisCornersValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
HistogramFixture	tests/benchmark/fixtures/HistogramFixture.h	/^class HistogramFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
HistogramValidationFixture	tests/validation/fixtures/HistogramFixture.h	/^class HistogramValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
IAccessWindow	arm_compute/core/IAccessWindow.h	/^class IAccessWindow$/;"	c	namespace:arm_compute
IAccessor	tests/IAccessor.h	/^class IAccessor$/;"	c	namespace:arm_compute::test
IAllocator	arm_compute/runtime/IAllocator.h	/^class IAllocator$/;"	c	namespace:arm_compute
IArray	arm_compute/core/IArray.h	/^    IArray()$/;"	f	class:arm_compute::IArray
IArray	arm_compute/core/IArray.h	/^    IArray(size_t max_num_values)$/;"	f	class:arm_compute::IArray
IArray	arm_compute/core/IArray.h	/^class IArray$/;"	c	namespace:arm_compute
IArrayAccessor	tests/IArrayAccessor.h	/^class IArrayAccessor$/;"	c	namespace:arm_compute::test
ICLArray	arm_compute/core/CL/ICLArray.h	/^    explicit ICLArray(size_t max_num_values)$/;"	f	class:arm_compute::ICLArray
ICLArray	arm_compute/core/CL/ICLArray.h	/^class ICLArray : public IArray<T>$/;"	c	namespace:arm_compute
ICLDepthwiseConvolutionLayer3x3Kernel	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    ICLDepthwiseConvolutionLayer3x3Kernel()$/;"	f	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
ICLDepthwiseConvolutionLayer3x3Kernel	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^class ICLDepthwiseConvolutionLayer3x3Kernel : public ICLKernel$/;"	c	namespace:arm_compute
ICLDistribution1D	arm_compute/core/CL/ICLDistribution1D.h	/^class ICLDistribution1D : public IDistribution1D$/;"	c	namespace:arm_compute
ICLDistribution1D	src/core/CL/ICLDistribution1D.cpp	/^ICLDistribution1D::ICLDistribution1D(size_t num_bins, int32_t offset, uint32_t range)$/;"	f	class:ICLDistribution1D
ICLGEMMLowpReductionKernel	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^class ICLGEMMLowpReductionKernel : public ICLKernel$/;"	c	namespace:arm_compute
ICLGEMMLowpReductionKernel	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^ICLGEMMLowpReductionKernel::ICLGEMMLowpReductionKernel()$/;"	f	class:ICLGEMMLowpReductionKernel
ICLHOG	arm_compute/core/CL/ICLHOG.h	/^class ICLHOG : public IHOG$/;"	c	namespace:arm_compute
ICLHOG	src/core/CL/ICLHOG.cpp	/^ICLHOG::ICLHOG()$/;"	f	class:ICLHOG
ICLKernel	arm_compute/core/CL/ICLKernel.h	/^    ICLKernel()$/;"	f	class:arm_compute::ICLKernel
ICLKernel	arm_compute/core/CL/ICLKernel.h	/^class ICLKernel : public IKernel$/;"	c	namespace:arm_compute
ICLLut	arm_compute/core/CL/ICLLut.h	/^class ICLLut : public ILut$/;"	c	namespace:arm_compute
ICLLut	src/core/CL/ICLLut.cpp	/^ICLLut::ICLLut()$/;"	f	class:ICLLut
ICLMemoryRegion	arm_compute/runtime/CL/CLMemoryRegion.h	/^class ICLMemoryRegion : public IMemoryRegion$/;"	c	namespace:arm_compute
ICLMemoryRegion	src/runtime/CL/CLMemoryRegion.cpp	/^ICLMemoryRegion::ICLMemoryRegion(cl::Context ctx, size_t size)$/;"	f	class:arm_compute::ICLMemoryRegion
ICLMultiHOG	arm_compute/core/CL/ICLMultiHOG.h	/^class ICLMultiHOG : public IMultiHOG$/;"	c	namespace:arm_compute
ICLMultiImage	arm_compute/core/CL/ICLMultiImage.h	/^class ICLMultiImage : public IMultiImage$/;"	c	namespace:arm_compute
ICLSVMMemoryRegion	arm_compute/runtime/CL/CLMemoryRegion.h	/^class ICLSVMMemoryRegion : public ICLMemoryRegion$/;"	c	namespace:arm_compute
ICLSVMMemoryRegion	src/runtime/CL/CLMemoryRegion.cpp	/^ICLSVMMemoryRegion::ICLSVMMemoryRegion(cl::Context ctx, cl_mem_flags flags, size_t size, size_t alignment)$/;"	f	class:arm_compute::ICLSVMMemoryRegion
ICLSimple2DKernel	arm_compute/core/CL/ICLSimple2DKernel.h	/^class ICLSimple2DKernel : public ICLSimpleKernel$/;"	c	namespace:arm_compute
ICLSimple3DKernel	arm_compute/core/CL/ICLSimple3DKernel.h	/^class ICLSimple3DKernel : public ICLSimple2DKernel$/;"	c	namespace:arm_compute
ICLSimpleFunction	arm_compute/runtime/CL/ICLSimpleFunction.h	/^class ICLSimpleFunction : public IFunction$/;"	c	namespace:arm_compute
ICLSimpleFunction	src/runtime/CL/ICLSimpleFunction.cpp	/^ICLSimpleFunction::ICLSimpleFunction() \/\/ NOLINT$/;"	f	class:ICLSimpleFunction
ICLSimpleKernel	arm_compute/core/CL/ICLSimpleKernel.h	/^class ICLSimpleKernel : public ICLKernel$/;"	c	namespace:arm_compute
ICLSimpleKernel	src/core/CL/ICLSimpleKernel.cpp	/^ICLSimpleKernel::ICLSimpleKernel()$/;"	f	class:ICLSimpleKernel
ICLTensor	arm_compute/core/CL/ICLTensor.h	/^class ICLTensor : public ITensor$/;"	c	namespace:arm_compute
ICLTensor	src/core/CL/ICLTensor.cpp	/^ICLTensor::ICLTensor()$/;"	f	class:ICLTensor
ICLTuner	arm_compute/runtime/CL/ICLTuner.h	/^class ICLTuner$/;"	c	namespace:arm_compute
ICPPKernel	arm_compute/core/CPP/ICPPKernel.h	/^class ICPPKernel : public IKernel$/;"	c	namespace:arm_compute
ICPPSimpleFunction	arm_compute/runtime/CPP/ICPPSimpleFunction.h	/^class ICPPSimpleFunction : public IFunction$/;"	c	namespace:arm_compute
ICPPSimpleFunction	src/runtime/CPP/ICPPSimpleFunction.cpp	/^ICPPSimpleFunction::ICPPSimpleFunction() \/\/ NOLINT$/;"	f	class:ICPPSimpleFunction
ICPPSimpleKernel	arm_compute/core/CPP/ICPPSimpleKernel.h	/^class ICPPSimpleKernel : public ICPPKernel$/;"	c	namespace:arm_compute
ICPPSimpleKernel	src/core/CPP/ICPPSimpleKernel.cpp	/^ICPPSimpleKernel::ICPPSimpleKernel()$/;"	f	class:ICPPSimpleKernel
ICloneable	arm_compute/core/utils/misc/ICloneable.h	/^class ICloneable$/;"	c	namespace:arm_compute::misc
IDLE	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    IDLE,$/;"	m	class:arm_gemm::BufferStatus
IDecorator	arm_compute/core/utils/logging/LogMsgDecorators.h	/^class IDecorator$/;"	c	namespace:arm_compute::logging
IDepthwiseConvolution	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^class IDepthwiseConvolution$/;"	c	namespace:depthwise
IDeviceBackend	arm_compute/graph/IDeviceBackend.h	/^class IDeviceBackend$/;"	c	namespace:arm_compute::graph::backends
IDistribution	arm_compute/core/IDistribution.h	/^class IDistribution$/;"	c	namespace:arm_compute
IDistribution1D	arm_compute/core/IDistribution1D.h	/^class IDistribution1D : public IDistribution$/;"	c	namespace:arm_compute
IDistribution1D	src/core/IDistribution1D.cpp	/^IDistribution1D::IDistribution1D(size_t num_bins, int32_t offset, uint32_t range)$/;"	f	class:IDistribution1D
IFloatFlip	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^inline float IFloatFlip(int32_t val)$/;"	f	namespace:arm_compute
IFunction	arm_compute/runtime/IFunction.h	/^class IFunction$/;"	c	namespace:arm_compute
IGCKernel	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^class IGCKernel : public IKernel$/;"	c	namespace:arm_compute
IGCKernel	src/core/GLES_COMPUTE/IGCKernel.cpp	/^IGCKernel::IGCKernel()$/;"	f	class:IGCKernel
IGCSimple2DKernel	arm_compute/core/GLES_COMPUTE/IGCSimple2DKernel.h	/^class IGCSimple2DKernel : public IGCSimpleKernel$/;"	c	namespace:arm_compute
IGCSimple3DKernel	arm_compute/core/GLES_COMPUTE/IGCSimple3DKernel.h	/^class IGCSimple3DKernel : public IGCSimple2DKernel$/;"	c	namespace:arm_compute
IGCSimpleFunction	arm_compute/runtime/GLES_COMPUTE/IGCSimpleFunction.h	/^class IGCSimpleFunction : public IFunction$/;"	c	namespace:arm_compute
IGCSimpleFunction	src/runtime/GLES_COMPUTE/IGCSimpleFunction.cpp	/^IGCSimpleFunction::IGCSimpleFunction() \/\/NOLINT$/;"	f	class:IGCSimpleFunction
IGCSimpleKernel	arm_compute/core/GLES_COMPUTE/IGCSimpleKernel.h	/^class IGCSimpleKernel : public IGCKernel$/;"	c	namespace:arm_compute
IGCSimpleKernel	src/core/GLES_COMPUTE/IGCSimpleKernel.cpp	/^IGCSimpleKernel::IGCSimpleKernel()$/;"	f	class:IGCSimpleKernel
IGCTensor	arm_compute/core/GLES_COMPUTE/IGCTensor.h	/^class IGCTensor : public ITensor$/;"	c	namespace:arm_compute
IGCTensor	src/core/GLES_COMPUTE/IGCTensor.cpp	/^IGCTensor::IGCTensor()$/;"	f	class:IGCTensor
IGraphMutator	arm_compute/graph/IGraphMutator.h	/^class IGraphMutator$/;"	c	namespace:arm_compute::graph
IGraphPrinter	arm_compute/graph/IGraphPrinter.h	/^class IGraphPrinter$/;"	c	namespace:arm_compute::graph
IHOG	arm_compute/core/IHOG.h	/^class IHOG$/;"	c	namespace:arm_compute
IHOGAccessor	tests/IHOGAccessor.h	/^class IHOGAccessor$/;"	c	namespace:arm_compute::test
IKernel	arm_compute/core/IKernel.h	/^class IKernel$/;"	c	namespace:arm_compute
IKernel	src/core/IKernel.cpp	/^IKernel::IKernel()$/;"	f	class:IKernel
ILayer	arm_compute/graph/frontend/ILayer.h	/^class ILayer$/;"	c	namespace:arm_compute::graph::frontend
ILifetimeManager	arm_compute/runtime/ILifetimeManager.h	/^class ILifetimeManager$/;"	c	namespace:arm_compute
ILut	arm_compute/core/ILut.h	/^class ILut$/;"	c	namespace:arm_compute
ILutAccessor	tests/ILutAccessor.h	/^class ILutAccessor$/;"	c	namespace:arm_compute::test
ILutAllocator	arm_compute/runtime/ILutAllocator.h	/^class ILutAllocator$/;"	c	namespace:arm_compute
ILutAllocator	src/runtime/ILutAllocator.cpp	/^ILutAllocator::ILutAllocator()$/;"	f	class:ILutAllocator
IMAGE_DECLARATION	src/core/CL/cl_kernels/helpers.h	68;"	d
IMAGE_OFFSET	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	219;"	d
IMemoryGroup	arm_compute/runtime/IMemoryGroup.h	/^class IMemoryGroup$/;"	c	namespace:arm_compute
IMemoryManager	arm_compute/runtime/IMemoryManager.h	/^class IMemoryManager$/;"	c	namespace:arm_compute
IMemoryPool	arm_compute/runtime/IMemoryPool.h	/^class IMemoryPool$/;"	c	namespace:arm_compute
IMemoryRegion	arm_compute/runtime/IMemoryRegion.h	/^    IMemoryRegion(size_t size)$/;"	f	class:arm_compute::IMemoryRegion
IMemoryRegion	arm_compute/runtime/IMemoryRegion.h	/^class IMemoryRegion$/;"	c	namespace:arm_compute
IMultiHOG	arm_compute/core/IMultiHOG.h	/^class IMultiHOG$/;"	c	namespace:arm_compute
IMultiImage	arm_compute/core/IMultiImage.h	/^class IMultiImage$/;"	c	namespace:arm_compute
INEGEMMLowpReductionKernel	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^class INEGEMMLowpReductionKernel : public INEKernel$/;"	c	namespace:arm_compute
INEGEMMLowpReductionKernel	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^INEGEMMLowpReductionKernel::INEGEMMLowpReductionKernel()$/;"	f	class:INEGEMMLowpReductionKernel
INEHarrisScoreKernel	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^class INEHarrisScoreKernel : public INEKernel$/;"	c	namespace:arm_compute
INEHarrisScoreKernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^INEHarrisScoreKernel::INEHarrisScoreKernel()$/;"	f	class:INEHarrisScoreKernel
INESimpleFunction	arm_compute/runtime/NEON/INESimpleFunction.h	/^class INESimpleFunction : public IFunction$/;"	c	namespace:arm_compute
INESimpleFunction	src/runtime/NEON/INESimpleFunction.cpp	/^INESimpleFunction::INESimpleFunction() \/\/ NOLINT$/;"	f	class:INESimpleFunction
INEWarpKernel	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^class INEWarpKernel : public INEKernel$/;"	c	namespace:arm_compute
INEWarpKernel	src/core/NEON/kernels/NEWarpKernel.cpp	/^INEWarpKernel::INEWarpKernel()$/;"	f	class:INEWarpKernel
INEWinogradLayerBatchedGEMMKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class INEWinogradLayerBatchedGEMMKernel : public INEKernel$/;"	c	namespace:arm_compute
INEWinogradLayerTransformInputKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class INEWinogradLayerTransformInputKernel : public INEKernel$/;"	c	namespace:arm_compute
INEWinogradLayerTransformOutputKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class INEWinogradLayerTransformOutputKernel : public INEKernel$/;"	c	namespace:arm_compute
INEWinogradLayerTransformWeightsKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class INEWinogradLayerTransformWeightsKernel : public INEKernel$/;"	c	namespace:arm_compute
INFO	arm_compute/core/utils/logging/Types.h	/^    INFO,    \/**< Information log level *\/$/;"	m	class:arm_compute::logging::LogLevel
INITIAL_VALUE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	118;"	d	file:
INITIAL_VALUE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	120;"	d	file:
INITIAL_VALUE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	464;"	d	file:
INITIAL_VALUE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	466;"	d	file:
INPUT	tests/validation/reference/Winograd.h	/^    INPUT,  \/**< Winograd input transform *\/$/;"	m	class:arm_compute::test::validation::reference::WinogradTransformType
INT_ROUND	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^constexpr int INT_ROUND(T x, int n)$/;"	f	namespace:__anon275
INT_ROUND	tests/validation/reference/OpticalFlow.cpp	/^constexpr int INT_ROUND(T x, int n)$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
INVSQRTQ_IMPL	src/core/CL/cl_kernels/fixed_point.h	422;"	d
INVSQRT_OP	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	36;"	d	file:
INVSQRT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	447;"	d
INVSQRT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	446;"	d
INV_SQRT	tests/Types.h	/^    INV_SQRT,  \/**< Inverse square root *\/$/;"	m	class:arm_compute::FixedPointOp
IN_MAP_1D	arm_compute/core/Types.h	/^    IN_MAP_1D, \/**< Normalization applied within the same map in 1D region *\/$/;"	m	class:arm_compute::NormType
IN_MAP_2D	arm_compute/core/Types.h	/^    IN_MAP_2D, \/**< Normalization applied within the same map in 2D region *\/$/;"	m	class:arm_compute::NormType
INode	arm_compute/graph/INode.h	/^class INode$/;"	c	namespace:arm_compute::graph
INode	src/graph/INode.cpp	/^INode::INode()$/;"	f	class:arm_compute::graph::INode
INodeVisitor	arm_compute/graph/INodeVisitor.h	/^class INodeVisitor$/;"	c	namespace:arm_compute::graph
IOFormatInfo	arm_compute/core/Types.h	/^    IOFormatInfo(PrintRegion   print_region   = PrintRegion::ValidRegion,$/;"	f	struct:arm_compute::HOGNormType::IOFormatInfo
IOFormatInfo	arm_compute/core/Types.h	/^struct IOFormatInfo$/;"	s	class:arm_compute::HOGNormType
IPoolManager	arm_compute/runtime/IPoolManager.h	/^class IPoolManager$/;"	c	namespace:arm_compute
IPreprocessor	utils/GraphUtils.h	/^class IPreprocessor$/;"	c	namespace:arm_compute::graph_utils
IPyramid	arm_compute/core/IPyramid.h	/^class IPyramid$/;"	c	namespace:arm_compute
IScheduler	arm_compute/runtime/IScheduler.h	/^class IScheduler$/;"	c	namespace:arm_compute
IScheduler	src/runtime/IScheduler.cpp	/^IScheduler::IScheduler()$/;"	f	class:arm_compute::IScheduler
ISimpleLifetimeManager	arm_compute/runtime/ISimpleLifetimeManager.h	/^class ISimpleLifetimeManager : public ILifetimeManager$/;"	c	namespace:arm_compute
ISimpleLifetimeManager	src/runtime/ISimpleLifetimeManager.cpp	/^ISimpleLifetimeManager::ISimpleLifetimeManager()$/;"	f	class:ISimpleLifetimeManager
IStream	arm_compute/graph/frontend/IStream.h	/^class IStream$/;"	c	namespace:arm_compute::graph::frontend
ITensor	arm_compute/core/ITensor.h	/^class ITensor$/;"	c	namespace:arm_compute
ITensorAccessor	arm_compute/graph/ITensorAccessor.h	/^class ITensorAccessor$/;"	c	namespace:arm_compute::graph
ITensorAllocator	arm_compute/runtime/ITensorAllocator.h	/^class ITensorAllocator$/;"	c	namespace:arm_compute
ITensorAllocator	src/runtime/ITensorAllocator.cpp	/^ITensorAllocator::ITensorAllocator()$/;"	f	class:ITensorAllocator
ITensorHandle	arm_compute/graph/ITensorHandle.h	/^class ITensorHandle$/;"	c	namespace:arm_compute::graph
ITensorInfo	arm_compute/core/ITensorInfo.h	/^class ITensorInfo : public misc::ICloneable<ITensorInfo>$/;"	c	namespace:arm_compute
IYUV	arm_compute/core/Types.h	/^    IYUV,     \/**< A 3 plane of 8-bit 4:2:0 sampled Y, U, V planes *\/$/;"	m	class:arm_compute::Format
Im2ColValidationFixture	tests/validation/fixtures/Im2ColFixture.h	/^class Im2ColValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Image	include/CL/cl.hpp	/^    Image() : Memory() { }$/;"	f	class:cl::Image
Image	include/CL/cl.hpp	/^    Image(const Image& image) : Memory(image) { }$/;"	f	class:cl::Image
Image	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image(const cl_mem& image) : Memory(image) { }$/;"	f	class:cl::Image
Image	include/CL/cl.hpp	/^class Image : public Memory$/;"	c	namespace:cl
Image	include/CL/cl2.hpp	/^    Image() : Memory() { }$/;"	f	class:cl::Image
Image	include/CL/cl2.hpp	/^    Image(const Image& img) : Memory(img) {}$/;"	f	class:cl::Image
Image	include/CL/cl2.hpp	/^    explicit Image(const cl_mem& image, bool retainObject = false) :$/;"	f	class:cl::Image
Image	include/CL/cl2.hpp	/^class Image : public Memory$/;"	c	namespace:cl
Image	src/core/CL/cl_kernels/helpers.h	/^typedef struct Image$/;"	s
Image	src/core/CL/cl_kernels/helpers.h	/^} Image;$/;"	t	typeref:struct:Image
Image1D	include/CL/cl.hpp	/^    Image1D($/;"	f	class:cl::Image1D
Image1D	include/CL/cl.hpp	/^    Image1D() { }$/;"	f	class:cl::Image1D
Image1D	include/CL/cl.hpp	/^    Image1D(const Image1D& image1D) : Image(image1D) { }$/;"	f	class:cl::Image1D
Image1D	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image1D(const cl_mem& image1D) : Image(image1D) { }$/;"	f	class:cl::Image1D
Image1D	include/CL/cl.hpp	/^class Image1D : public Image$/;"	c	namespace:cl
Image1D	include/CL/cl2.hpp	/^    Image1D($/;"	f	class:cl::Image1D
Image1D	include/CL/cl2.hpp	/^    Image1D() { }$/;"	f	class:cl::Image1D
Image1D	include/CL/cl2.hpp	/^    Image1D(const Image1D& img) : Image(img) {}$/;"	f	class:cl::Image1D
Image1D	include/CL/cl2.hpp	/^    explicit Image1D(const cl_mem& image1D, bool retainObject = false) :$/;"	f	class:cl::Image1D
Image1D	include/CL/cl2.hpp	/^class Image1D : public Image$/;"	c	namespace:cl
Image1DArray	include/CL/cl.hpp	/^    Image1DArray($/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl.hpp	/^    Image1DArray() { }$/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl.hpp	/^    Image1DArray(const Image1DArray& imageArray) : Image(imageArray) { }$/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image1DArray(const cl_mem& imageArray) : Image(imageArray) { }$/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl.hpp	/^class Image1DArray : public Image$/;"	c	namespace:cl
Image1DArray	include/CL/cl2.hpp	/^    Image1DArray($/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl2.hpp	/^    Image1DArray() { }$/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl2.hpp	/^    Image1DArray(const Image1DArray& img) : Image(img) {}$/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl2.hpp	/^    explicit Image1DArray(const cl_mem& imageArray, bool retainObject = false) :$/;"	f	class:cl::Image1DArray
Image1DArray	include/CL/cl2.hpp	/^class Image1DArray : public Image$/;"	c	namespace:cl
Image1DBuffer	include/CL/cl.hpp	/^    Image1DBuffer($/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl.hpp	/^    Image1DBuffer() { }$/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl.hpp	/^    Image1DBuffer(const Image1DBuffer& image1D) : Image(image1D) { }$/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image1DBuffer(const cl_mem& image1D) : Image(image1D) { }$/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl.hpp	/^class Image1DBuffer : public Image$/;"	c	namespace:cl
Image1DBuffer	include/CL/cl2.hpp	/^    Image1DBuffer($/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl2.hpp	/^    Image1DBuffer() { }$/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl2.hpp	/^    Image1DBuffer(const Image1DBuffer& img) : Image(img) {}$/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl2.hpp	/^    explicit Image1DBuffer(const cl_mem& image1D, bool retainObject = false) :$/;"	f	class:cl::Image1DBuffer
Image1DBuffer	include/CL/cl2.hpp	/^class Image1DBuffer : public Image$/;"	c	namespace:cl
Image2D	include/CL/cl.hpp	/^    Image2D($/;"	f	class:cl::Image2D
Image2D	include/CL/cl.hpp	/^    Image2D() { }$/;"	f	class:cl::Image2D
Image2D	include/CL/cl.hpp	/^    Image2D(const Image2D& image2D) : Image(image2D) { }$/;"	f	class:cl::Image2D
Image2D	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image2D(const cl_mem& image2D) : Image(image2D) { }$/;"	f	class:cl::Image2D
Image2D	include/CL/cl.hpp	/^class Image2D : public Image$/;"	c	namespace:cl
Image2D	include/CL/cl2.hpp	/^    Image2D($/;"	f	class:cl::Image2D
Image2D	include/CL/cl2.hpp	/^    Image2D() { }$/;"	f	class:cl::Image2D
Image2D	include/CL/cl2.hpp	/^    Image2D(const Image2D& img) : Image(img) {}$/;"	f	class:cl::Image2D
Image2D	include/CL/cl2.hpp	/^    explicit Image2D(const cl_mem& image2D, bool retainObject = false) :$/;"	f	class:cl::Image2D
Image2D	include/CL/cl2.hpp	/^class Image2D : public Image$/;"	c	namespace:cl
Image2DArray	include/CL/cl.hpp	/^    Image2DArray($/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl.hpp	/^    Image2DArray() { }$/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl.hpp	/^    Image2DArray(const Image2DArray& imageArray) : Image(imageArray) { }$/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image2DArray(const cl_mem& imageArray) : Image(imageArray) { }$/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl.hpp	/^class Image2DArray : public Image$/;"	c	namespace:cl
Image2DArray	include/CL/cl2.hpp	/^    Image2DArray($/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl2.hpp	/^    Image2DArray() { }$/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl2.hpp	/^    Image2DArray(const Image2DArray& img) : Image(img) {}$/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl2.hpp	/^    explicit Image2DArray(const cl_mem& imageArray, bool retainObject = false) : Image(imageArray, retainObject) { }$/;"	f	class:cl::Image2DArray
Image2DArray	include/CL/cl2.hpp	/^class Image2DArray : public Image$/;"	c	namespace:cl
Image2DGL	include/CL/cl.hpp	/^    Image2DGL($/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
Image2DGL	include/CL/cl.hpp	/^    Image2DGL() : Image2D() { }$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
Image2DGL	include/CL/cl.hpp	/^    Image2DGL(const Image2DGL& image) : Image2D(image) { }$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
Image2DGL	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image2DGL(const cl_mem& image) : Image2D(image) { }$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
Image2DGL	include/CL/cl2.hpp	/^    Image2DGL($/;"	f	class:cl::Image2DGL
Image2DGL	include/CL/cl2.hpp	/^    Image2DGL() : Image2D() { }$/;"	f	class:cl::Image2DGL
Image2DGL	include/CL/cl2.hpp	/^    Image2DGL(const Image2DGL& img) : Image2D(img) {}$/;"	f	class:cl::Image2DGL
Image2DGL	include/CL/cl2.hpp	/^    explicit Image2DGL(const cl_mem& image, bool retainObject = false) : $/;"	f	class:cl::Image2DGL
Image2DGL	include/CL/cl2.hpp	/^class CL_EXT_PREFIX__VERSION_1_1_DEPRECATED Image2DGL : public Image2D $/;"	c	namespace:cl
Image3D	include/CL/cl.hpp	/^    Image3D($/;"	f	class:cl::Image3D
Image3D	include/CL/cl.hpp	/^    Image3D() { }$/;"	f	class:cl::Image3D
Image3D	include/CL/cl.hpp	/^    Image3D(const Image3D& image3D) : Image(image3D) { }$/;"	f	class:cl::Image3D
Image3D	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image3D(const cl_mem& image3D) : Image(image3D) { }$/;"	f	class:cl::Image3D
Image3D	include/CL/cl.hpp	/^class Image3D : public Image$/;"	c	namespace:cl
Image3D	include/CL/cl2.hpp	/^    Image3D($/;"	f	class:cl::Image3D
Image3D	include/CL/cl2.hpp	/^    Image3D() : Image() { }$/;"	f	class:cl::Image3D
Image3D	include/CL/cl2.hpp	/^    Image3D(const Image3D& img) : Image(img) {}$/;"	f	class:cl::Image3D
Image3D	include/CL/cl2.hpp	/^    explicit Image3D(const cl_mem& image3D, bool retainObject = false) : $/;"	f	class:cl::Image3D
Image3D	include/CL/cl2.hpp	/^class Image3D : public Image$/;"	c	namespace:cl
Image3DGL	include/CL/cl.hpp	/^    Image3DGL($/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl.hpp	/^    Image3DGL() : Image3D() { }$/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl.hpp	/^    Image3DGL(const Image3DGL& image) : Image3D(image) { }$/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Image3DGL(const cl_mem& image) : Image3D(image) { }$/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl.hpp	/^class Image3DGL : public Image3D$/;"	c	namespace:cl
Image3DGL	include/CL/cl2.hpp	/^    Image3DGL($/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl2.hpp	/^    Image3DGL() : Image3D() { }$/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl2.hpp	/^    Image3DGL(const Image3DGL& img) : Image3D(img) {}$/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl2.hpp	/^    explicit Image3DGL(const cl_mem& image, bool retainObject = false) : $/;"	f	class:cl::Image3DGL
Image3DGL	include/CL/cl2.hpp	/^class Image3DGL : public Image3D$/;"	c	namespace:cl
ImageAttributes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^struct ImageAttributes$/;"	s
ImageFileDataset	tests/datasets/ImageFileDatasets.h	/^class ImageFileDataset$/;"	c	namespace:arm_compute::test::datasets
ImageFormat	include/CL/cl.hpp	/^    ImageFormat(){}$/;"	f	struct:cl::ImageFormat
ImageFormat	include/CL/cl.hpp	/^    ImageFormat(cl_channel_order order, cl_channel_type type)$/;"	f	struct:cl::ImageFormat
ImageFormat	include/CL/cl.hpp	/^struct ImageFormat : public cl_image_format$/;"	s	namespace:cl
ImageFormat	include/CL/cl2.hpp	/^    ImageFormat(){}$/;"	f	struct:cl::ImageFormat
ImageFormat	include/CL/cl2.hpp	/^    ImageFormat(cl_channel_order order, cl_channel_type type)$/;"	f	struct:cl::ImageFormat
ImageFormat	include/CL/cl2.hpp	/^struct ImageFormat : public cl_image_format$/;"	s	namespace:cl
ImageGL	include/CL/cl.hpp	/^    ImageGL($/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl.hpp	/^    ImageGL() : Image() { }$/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl.hpp	/^    ImageGL(const ImageGL& image) : Image(image) { }$/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS ImageGL(const cl_mem& image) : Image(image) { }$/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl.hpp	/^class ImageGL : public Image$/;"	c	namespace:cl
ImageGL	include/CL/cl2.hpp	/^    ImageGL($/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl2.hpp	/^    ImageGL() : Image() { }$/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl2.hpp	/^    ImageGL(const ImageGL& img) : Image(img) {}$/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl2.hpp	/^    explicit ImageGL(const cl_mem& image, bool retainObject = false) : $/;"	f	class:cl::ImageGL
ImageGL	include/CL/cl2.hpp	/^class ImageGL : public Image$/;"	c	namespace:cl
ImageIterator	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^struct ImageIterator$/;"	s
InceptionV3Example	examples/graph_inception_v3.cpp	/^class InceptionV3Example : public Example$/;"	c	file:
InitializerListDataset	tests/framework/datasets/InitializerListDataset.h	/^    InitializerListDataset(std::string name, std::initializer_list<T> &&list)$/;"	f	class:arm_compute::test::framework::dataset::final
Input	arm_compute/graph/Types.h	/^    Input,$/;"	m	class:arm_compute::graph::NodeType
InputLayer	arm_compute/graph/frontend/Layers.h	/^    InputLayer(TensorDescriptor desc, ITensorAccessorUPtr accessor)$/;"	f	class:arm_compute::graph::frontend::final
InputNode	src/graph/nodes/InputNode.cpp	/^InputNode::InputNode(TensorDescriptor desc)$/;"	f	class:arm_compute::graph::InputNode
InputTransform	arm_compute/core/NEON/kernels/convolution/winograd/transforms/input.hpp	/^  WinogradGEMM<otr, otc, kr, kc>::InputTransform<T>::InputTransform($/;"	f	class:winograd::WinogradGEMM::InputTransform
InputTransform	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    struct InputTransform$/;"	s	class:winograd::WinogradGEMM
InputTransform	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_3x3_fp32.cpp	/^template struct WinogradGEMM<2, 2, 3, 3>::InputTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
InputTransform	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_5x5_fp32.cpp	/^template struct WinogradGEMM<2, 2, 5, 5>::InputTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
InputTransform	src/core/NEON/kernels/convolution/winograd/transforms/input_4x4_3x3_fp32.cpp	/^template struct WinogradGEMM<4, 4, 3, 3>::InputTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
InputType	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    typedef TIn InputType;$/;"	t	class:depthwise::DepthwiseConvolution
InputType	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        typedef TIn InputType;$/;"	t	class:winograd::WinogradGEMM::Convolution
Instrument	tests/framework/instruments/Instrument.h	/^class Instrument$/;"	c	namespace:arm_compute::test::framework
InstrumentType	tests/framework/instruments/Instruments.h	/^enum class InstrumentType : unsigned int$/;"	c	namespace:arm_compute::test::framework
InstrumentsStats	tests/framework/instruments/InstrumentsStats.cpp	/^InstrumentsStats::InstrumentsStats(const std::vector<Measurement> &measurements)$/;"	f	class:arm_compute::test::framework::InstrumentsStats
InstrumentsStats	tests/framework/instruments/InstrumentsStats.h	/^class InstrumentsStats$/;"	c	namespace:arm_compute::test::framework
IntegralImageFixture	tests/benchmark/fixtures/IntegralImageFixture.h	/^class IntegralImageFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
IntegralImageValidationFixture	tests/validation/fixtures/IntegralImageFixture.h	/^class IntegralImageValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Interceptor	tests/framework/instruments/SchedulerTimer.cpp	/^    Interceptor(std::list<SchedulerTimer::kernel_info> &kernels, IScheduler &real_scheduler, ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::final
InternalKeyPoint	tests/Types.h	/^struct InternalKeyPoint$/;"	s	namespace:arm_compute
InterpolationPolicies	tests/datasets/InterpolationPolicyDataset.h	/^    InterpolationPolicies()$/;"	f	class:arm_compute::test::datasets::final
InterpolationPolicy	arm_compute/core/Types.h	/^enum class InterpolationPolicy$/;"	c	namespace:arm_compute
Iterator	arm_compute/core/Helpers.h	/^class Iterator$/;"	c	namespace:arm_compute
JOIN_PARAM	tests/framework/Macros.h	83;"	d
JOIN_PARAM1	tests/framework/Macros.h	55;"	d
JOIN_PARAM10	tests/framework/Macros.h	80;"	d
JOIN_PARAM2	tests/framework/Macros.h	56;"	d
JOIN_PARAM3	tests/framework/Macros.h	59;"	d
JOIN_PARAM4	tests/framework/Macros.h	62;"	d
JOIN_PARAM5	tests/framework/Macros.h	65;"	d
JOIN_PARAM6	tests/framework/Macros.h	68;"	d
JOIN_PARAM7	tests/framework/Macros.h	71;"	d
JOIN_PARAM8	tests/framework/Macros.h	74;"	d
JOIN_PARAM9	tests/framework/Macros.h	77;"	d
JSON	tests/framework/printers/Printers.h	/^    JSON,$/;"	m	class:arm_compute::test::framework::LogFormat
JSONPrinter	tests/framework/printers/JSONPrinter.h	/^class JSONPrinter : public Printer$/;"	c	namespace:arm_compute::test::framework
JoinDataset	tests/framework/datasets/JoinDataset.h	/^    JoinDataset(T &&dataset1, U &&dataset2)$/;"	f	class:arm_compute::test::framework::dataset::JoinDataset
JoinDataset	tests/framework/datasets/JoinDataset.h	/^class JoinDataset : public Dataset$/;"	c	namespace:arm_compute::test::framework::dataset
K	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int M, N, K;$/;"	m	class:winograd::BatchedBlockedGemm
KBASE_FUNC_GPU_PROPS_REG_DUMP	tests/framework/instruments/hwc.hpp	/^    KBASE_FUNC_GPU_PROPS_REG_DUMP    = KBASE_FUNC_HWCNT_UK_FUNC_ID + 14,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_FUNC_HWCNT_CLEAR	tests/framework/instruments/hwc.hpp	/^    KBASE_FUNC_HWCNT_CLEAR           = KBASE_FUNC_HWCNT_UK_FUNC_ID + 12,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_FUNC_HWCNT_DUMP	tests/framework/instruments/hwc.hpp	/^    KBASE_FUNC_HWCNT_DUMP            = KBASE_FUNC_HWCNT_UK_FUNC_ID + 11,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_FUNC_HWCNT_READER_SETUP	tests/framework/instruments/hwc.hpp	/^    KBASE_FUNC_HWCNT_READER_SETUP    = KBASE_FUNC_HWCNT_UK_FUNC_ID + 36,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_FUNC_HWCNT_UK_FUNC_ID	tests/framework/instruments/hwc.hpp	/^    KBASE_FUNC_HWCNT_UK_FUNC_ID      = 512,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_FUNC_SET_FLAGS	tests/framework/instruments/hwc.hpp	/^    KBASE_FUNC_SET_FLAGS             = KBASE_FUNC_HWCNT_UK_FUNC_ID + 18,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_GPUPROP_COHERENCY_GROUP_0	tests/framework/instruments/hwc.hpp	178;"	d
KBASE_GPUPROP_COHERENCY_GROUP_1	tests/framework/instruments/hwc.hpp	179;"	d
KBASE_GPUPROP_COHERENCY_GROUP_10	tests/framework/instruments/hwc.hpp	188;"	d
KBASE_GPUPROP_COHERENCY_GROUP_11	tests/framework/instruments/hwc.hpp	189;"	d
KBASE_GPUPROP_COHERENCY_GROUP_12	tests/framework/instruments/hwc.hpp	190;"	d
KBASE_GPUPROP_COHERENCY_GROUP_13	tests/framework/instruments/hwc.hpp	191;"	d
KBASE_GPUPROP_COHERENCY_GROUP_14	tests/framework/instruments/hwc.hpp	192;"	d
KBASE_GPUPROP_COHERENCY_GROUP_15	tests/framework/instruments/hwc.hpp	193;"	d
KBASE_GPUPROP_COHERENCY_GROUP_2	tests/framework/instruments/hwc.hpp	180;"	d
KBASE_GPUPROP_COHERENCY_GROUP_3	tests/framework/instruments/hwc.hpp	181;"	d
KBASE_GPUPROP_COHERENCY_GROUP_4	tests/framework/instruments/hwc.hpp	182;"	d
KBASE_GPUPROP_COHERENCY_GROUP_5	tests/framework/instruments/hwc.hpp	183;"	d
KBASE_GPUPROP_COHERENCY_GROUP_6	tests/framework/instruments/hwc.hpp	184;"	d
KBASE_GPUPROP_COHERENCY_GROUP_7	tests/framework/instruments/hwc.hpp	185;"	d
KBASE_GPUPROP_COHERENCY_GROUP_8	tests/framework/instruments/hwc.hpp	186;"	d
KBASE_GPUPROP_COHERENCY_GROUP_9	tests/framework/instruments/hwc.hpp	187;"	d
KBASE_GPUPROP_COHERENCY_NUM_CORE_GROUPS	tests/framework/instruments/hwc.hpp	177;"	d
KBASE_GPUPROP_COHERENCY_NUM_GROUPS	tests/framework/instruments/hwc.hpp	176;"	d
KBASE_GPUPROP_MAJOR_REVISION	tests/framework/instruments/hwc.hpp	174;"	d
KBASE_GPUPROP_MINOR_REVISION	tests/framework/instruments/hwc.hpp	173;"	d
KBASE_GPUPROP_PRODUCT_ID	tests/framework/instruments/hwc.hpp	172;"	d
KBASE_GPUPROP_VALUE_SIZE_U16	tests/framework/instruments/hwc.hpp	168;"	d
KBASE_GPUPROP_VALUE_SIZE_U32	tests/framework/instruments/hwc.hpp	169;"	d
KBASE_GPUPROP_VALUE_SIZE_U64	tests/framework/instruments/hwc.hpp	170;"	d
KBASE_GPUPROP_VALUE_SIZE_U8	tests/framework/instruments/hwc.hpp	167;"	d
KBASE_HWCNT_READER	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER                 = 0xBE,$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_CLEAR	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_CLEAR           = MALI_IOW(KBASE_HWCNT_READER, 0x11, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_DISABLE_EVENT	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_DISABLE_EVENT   = MALI_IOW(KBASE_HWCNT_READER, 0x41, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_DUMP	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_DUMP            = MALI_IOW(KBASE_HWCNT_READER, 0x10, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_ENABLE_EVENT	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_ENABLE_EVENT    = MALI_IOW(KBASE_HWCNT_READER, 0x40, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_GET_API_VERSION	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_GET_API_VERSION = MALI_IOW(KBASE_HWCNT_READER, 0xFF, uint32_t)$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_GET_BUFFER	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_GET_BUFFER      = MALI_IOR(KBASE_HWCNT_READER, 0x20, struct kbase_hwcnt_reader_metadata),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_GET_BUFFER_SIZE	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_GET_BUFFER_SIZE = MALI_IOR(KBASE_HWCNT_READER, 0x01, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_GET_HWVER	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_GET_HWVER       = MALI_IOR(KBASE_HWCNT_READER, 0x00, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_PUT_BUFFER	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_PUT_BUFFER      = MALI_IOW(KBASE_HWCNT_READER, 0x21, struct kbase_hwcnt_reader_metadata),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_HWCNT_READER_SET_INTERVAL	tests/framework/instruments/hwc.hpp	/^    KBASE_HWCNT_READER_SET_INTERVAL    = MALI_IOW(KBASE_HWCNT_READER, 0x30, uint32_t),$/;"	e	enum:mali_userspace::__anon390::__anon391
KBASE_IOCTL_GET_GPUPROPS	tests/framework/instruments/hwc.hpp	293;"	d
KBASE_IOCTL_TYPE	tests/framework/instruments/hwc.hpp	292;"	d
KHRONOS_APIATTRIBUTES	include/linux/KHR/khrplatform.h	131;"	d
KHRONOS_APIATTRIBUTES	include/linux/KHR/khrplatform.h	133;"	d
KHRONOS_APICALL	include/linux/KHR/khrplatform.h	102;"	d
KHRONOS_APICALL	include/linux/KHR/khrplatform.h	104;"	d
KHRONOS_APICALL	include/linux/KHR/khrplatform.h	107;"	d
KHRONOS_APICALL	include/linux/KHR/khrplatform.h	109;"	d
KHRONOS_APIENTRY	include/linux/KHR/khrplatform.h	120;"	d
KHRONOS_APIENTRY	include/linux/KHR/khrplatform.h	122;"	d
KHRONOS_BOOLEAN_ENUM_FORCE_SIZE	include/linux/KHR/khrplatform.h	/^    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM$/;"	e	enum:__anon182
KHRONOS_FALSE	include/linux/KHR/khrplatform.h	/^    KHRONOS_FALSE = 0,$/;"	e	enum:__anon182
KHRONOS_MAX_ENUM	include/linux/KHR/khrplatform.h	258;"	d
KHRONOS_SUPPORT_FLOAT	include/linux/KHR/khrplatform.h	151;"	d
KHRONOS_SUPPORT_FLOAT	include/linux/KHR/khrplatform.h	164;"	d
KHRONOS_SUPPORT_FLOAT	include/linux/KHR/khrplatform.h	176;"	d
KHRONOS_SUPPORT_FLOAT	include/linux/KHR/khrplatform.h	193;"	d
KHRONOS_SUPPORT_FLOAT	include/linux/KHR/khrplatform.h	203;"	d
KHRONOS_SUPPORT_FLOAT	include/linux/KHR/khrplatform.h	216;"	d
KHRONOS_SUPPORT_INT64	include/linux/KHR/khrplatform.h	150;"	d
KHRONOS_SUPPORT_INT64	include/linux/KHR/khrplatform.h	163;"	d
KHRONOS_SUPPORT_INT64	include/linux/KHR/khrplatform.h	175;"	d
KHRONOS_SUPPORT_INT64	include/linux/KHR/khrplatform.h	192;"	d
KHRONOS_SUPPORT_INT64	include/linux/KHR/khrplatform.h	202;"	d
KHRONOS_SUPPORT_INT64	include/linux/KHR/khrplatform.h	215;"	d
KHRONOS_TRUE	include/linux/KHR/khrplatform.h	/^    KHRONOS_TRUE  = 1,$/;"	e	enum:__anon182
Kernel	arm_compute/core/CL/CLKernelLibrary.h	/^class Kernel$/;"	c	namespace:arm_compute
Kernel	include/CL/cl.hpp	/^    Kernel() { }$/;"	f	class:cl::Kernel
Kernel	include/CL/cl.hpp	/^    Kernel(const Kernel& kernel) : detail::Wrapper<cl_type>(kernel) { }$/;"	f	class:cl::Kernel
Kernel	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Kernel(const cl_kernel& kernel) : detail::Wrapper<cl_type>(kernel) { }$/;"	f	class:cl::Kernel
Kernel	include/CL/cl.hpp	/^class Kernel : public detail::Wrapper<cl_kernel>$/;"	c	namespace:cl
Kernel	include/CL/cl.hpp	/^inline Kernel::Kernel(const Program& program, const char* name, cl_int* err)$/;"	f	class:cl::Kernel
Kernel	include/CL/cl2.hpp	/^    Kernel() { }$/;"	f	class:cl::Kernel
Kernel	include/CL/cl2.hpp	/^    Kernel(const Kernel& kernel) : detail::Wrapper<cl_type>(kernel) {}$/;"	f	class:cl::Kernel
Kernel	include/CL/cl2.hpp	/^    explicit Kernel(const cl_kernel& kernel, bool retainObject = false) : $/;"	f	class:cl::Kernel
Kernel	include/CL/cl2.hpp	/^class Kernel : public detail::Wrapper<cl_kernel>$/;"	c	namespace:cl
Kernel	include/CL/cl2.hpp	/^inline Kernel::Kernel(const Program& program, const char* name, cl_int* err)$/;"	f	class:cl::Kernel
Kernel	src/core/CL/CLKernelLibrary.cpp	/^Kernel::Kernel()$/;"	f	class:Kernel
Kernel	src/core/CL/CLKernelLibrary.cpp	/^Kernel::Kernel(std::string name, const cl::Program &program)$/;"	f	class:Kernel
KernelArgumentHandler	include/CL/cl.hpp	/^struct KernelArgumentHandler$/;"	s	namespace:cl::detail
KernelArgumentHandler	include/CL/cl.hpp	/^struct KernelArgumentHandler<LocalSpaceArg>$/;"	s	namespace:cl::detail
KernelArgumentHandler	include/CL/cl2.hpp	/^    struct KernelArgumentHandler<cl::DeviceCommandQueue, void>$/;"	s	namespace:cl::detail
KernelArgumentHandler	include/CL/cl2.hpp	/^struct KernelArgumentHandler<LocalSpaceArg, void>$/;"	s	namespace:cl::detail
KernelArgumentHandler	include/CL/cl2.hpp	/^struct KernelArgumentHandler<T, typename std::enable_if<!std::is_base_of<cl::Memory, T>::value>::type>$/;"	s	namespace:cl::detail
KernelArgumentHandler	include/CL/cl2.hpp	/^struct KernelArgumentHandler<T, typename std::enable_if<std::is_base_of<cl::Memory, T>::value>::type>$/;"	s	namespace:cl::detail
KernelFunctor	include/CL/cl2.hpp	/^    KernelFunctor($/;"	f	class:cl::KernelFunctor
KernelFunctor	include/CL/cl2.hpp	/^    KernelFunctor(Kernel kernel) : kernel_(kernel)$/;"	f	class:cl::KernelFunctor
KernelFunctor	include/CL/cl2.hpp	/^class KernelFunctor$/;"	c	namespace:cl
KernelFunctorGlobal	include/CL/cl.hpp	/^   KernelFunctorGlobal($/;"	f	class:cl::detail::KernelFunctorGlobal
KernelFunctorGlobal	include/CL/cl.hpp	/^class KernelFunctorGlobal$/;"	c	namespace:cl::detail
KernelShape	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  inline KernelShape($/;"	f	struct:KernelShape
KernelShape	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^struct KernelShape$/;"	s
KeyPoint	arm_compute/core/Types.h	/^struct KeyPoint$/;"	s	namespace:arm_compute
Keypoint	src/core/CL/cl_kernels/types.h	/^typedef struct Keypoint$/;"	s
Keypoint	src/core/CL/cl_kernels/types.h	/^} Keypoint;$/;"	t	typeref:struct:Keypoint
L1NORM	arm_compute/core/Types.h	/^    L1NORM, \/**< L1 normalization type *\/$/;"	m	class:arm_compute::MagnitudeType
L1_NORM	arm_compute/core/Types.h	/^    L1_NORM    = 3  \/**< L1 norm *\/$/;"	m	class:arm_compute::HOGNormType
L2HYS_NORM	arm_compute/core/Types.h	/^    L2HYS_NORM = 2, \/**< L2-norm followed by clipping *\/$/;"	m	class:arm_compute::HOGNormType
L2NormalizeLayerFixture	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^class L2NormalizeLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
L2NormalizeLayerValidationFixture	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^class L2NormalizeLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
L2_NORM	arm_compute/core/Types.h	/^    L2_NORM    = 1, \/**< L2-norm *\/$/;"	m	class:arm_compute::HOGNormType
LEAKY_RELU	arm_compute/core/Types.h	/^        LEAKY_RELU,      \/**< Leaky Rectifier ( \\f$ f(x)= log(1+e^x) \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
LINUX_UK_BASE_MAGIC	tests/framework/instruments/hwc.hpp	/^    LINUX_UK_BASE_MAGIC              = 0x80,$/;"	e	enum:mali_userspace::__anon390::__anon391
LOAD	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	285;"	d
LOAD_AND_UNPACK	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	648;"	d	file:
LOAD_AND_UNPACK	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	651;"	d	file:
LOAD_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	287;"	d
LOAD_FUNCTION_PTR	src/core/CL/OpenCL.cpp	121;"	d	file:
LOAD_FUNCTION_PTR	src/core/CL/OpenCL.cpp	74;"	d	file:
LOAD_SRC_AT_ROW	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	133;"	d	file:
LOAD_SRC_AT_ROW	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	136;"	d	file:
LOAD_UNPACK2_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	421;"	d
LOAD_UNPACK2_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	419;"	d
LOAD_UNPACK4_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	440;"	d
LOAD_UNPACK4_CURRENT_ITEM_U8	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	495;"	d
LOAD_UNPACK4_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	438;"	d
LOAD_UNPACK4_U8	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	493;"	d
LOAD_UNPACK8_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	454;"	d
LOAD_UNPACK8_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	452;"	d
LOAD_UNPACK_SWIZZLE	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	192;"	d	file:
LOAD_UNPACK_SWIZZLE	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	194;"	d	file:
LOAD_UNPACK_SWIZZLE	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	196;"	d	file:
LOAD_UNPACK_SWIZZLE	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	68;"	d	file:
LOAD_WEIGHT_AT_ROW	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	142;"	d	file:
LOG	tests/Types.h	/^    LOG,       \/**< Logarithm *\/$/;"	m	class:arm_compute::FixedPointOp
LOGISTIC	arm_compute/core/Types.h	/^        LOGISTIC,        \/**< Logistic ( \\f$ f(x) = \\frac{1}{1 + e^{-x}} \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
LOGQ_IMPL	src/core/CL/cl_kernels/fixed_point.h	384;"	d
LOG_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	41;"	d
LOG_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	410;"	d
LOG_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	409;"	d
LSTMLayerDataset	tests/datasets/LSTMLayerDataset.h	/^class LSTMLayerDataset$/;"	c	namespace:arm_compute::test::datasets
LSTMLayerValidationFixture	tests/validation/fixtures/LSTMLayerFixture.h	/^class LSTMLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
LSTMParams	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    LSTMParams()$/;"	f	class:arm_compute::LSTMParams
LSTMParams	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^class LSTMParams$/;"	c	namespace:arm_compute
LU_BOUNDED_RELU	arm_compute/core/Types.h	/^        LU_BOUNDED_RELU, \/**< Lower and Upper Bounded Rectifier ( \\f$ f(x) = min(a, max(b,x)) \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
Large1DShapes	tests/datasets/ShapeDatasets.h	/^    Large1DShapes()$/;"	f	class:arm_compute::test::datasets::final
Large2DShapes	tests/datasets/ShapeDatasets.h	/^    Large2DShapes()$/;"	f	class:arm_compute::test::datasets::final
Large3DShapes	tests/datasets/ShapeDatasets.h	/^    Large3DShapes()$/;"	f	class:arm_compute::test::datasets::final
Large3x3Shapes	tests/datasets/ShapeDatasets.h	/^    Large3x3Shapes()$/;"	f	class:arm_compute::test::datasets::final
Large4DShapes	tests/datasets/ShapeDatasets.h	/^    Large4DShapes()$/;"	f	class:arm_compute::test::datasets::final
Large5x5Shapes	tests/datasets/ShapeDatasets.h	/^    Large5x5Shapes()$/;"	f	class:arm_compute::test::datasets::final
LargeConvolutionLayerDataset	tests/datasets/LargeConvolutionLayerDataset.h	/^    LargeConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeDepthwiseConvolutionLayerDataset	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    LargeDepthwiseConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeDepthwiseConvolutionLayerDataset3x3	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    LargeDepthwiseConvolutionLayerDataset3x3()$/;"	f	class:arm_compute::test::datasets::final
LargeDilatedConvolutionLayerDataset	tests/datasets/DilatedConvolutionLayerDataset.h	/^    LargeDilatedConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeFullyConnectedLayerDataset	tests/datasets/FullyConnectedLayerDataset.h	/^    LargeFullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeGEMMDataset	tests/datasets/LargeGEMMDataset.h	/^    LargeGEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeGEMMLowpDataset	tests/datasets/LargeGEMMLowpDataset.h	/^    LargeGEMMLowpDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeHOGDescriptorDataset	tests/datasets/HOGDescriptorDataset.h	/^    LargeHOGDescriptorDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeHOGMultiDetectionDataset	tests/datasets/HOGMultiDetectionDataset.h	/^    LargeHOGMultiDetectionDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeImageFiles	tests/datasets/ImageFileDatasets.h	/^    LargeImageFiles()$/;"	f	class:arm_compute::test::datasets::final
LargeImageShapes	tests/datasets/ShapeDatasets.h	/^    LargeImageShapes()$/;"	f	class:arm_compute::test::datasets::final
LargeLocallyConnectedDataset	tests/datasets/LocallyConnectedDataset.h	/^    LargeLocallyConnectedDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeOpticalFlowDataset	tests/datasets/OpticalFlowDataset.h	/^    LargeOpticalFlowDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeRandomChannelShuffleLayerDataset	tests/datasets/ChannelShuffleLayerDataset.h	/^    LargeRandomChannelShuffleLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeScaleLayerShapes	tests/datasets/ScaleLayerDataset.h	/^    LargeScaleLayerShapes()$/;"	f	class:arm_compute::test::datasets::final
LargeShapes	tests/datasets/ShapeDatasets.h	/^    LargeShapes()$/;"	f	class:arm_compute::test::datasets::final
LargeShapesBroadcast	tests/datasets/ShapeDatasets.h	/^    LargeShapesBroadcast()$/;"	f	class:arm_compute::test::datasets::final
LargeWinogradConvolutionLayer3x3Dataset	tests/datasets/LargeConvolutionLayerDataset.h	/^    LargeWinogradConvolutionLayer3x3Dataset()$/;"	f	class:arm_compute::test::datasets::final
LargeWinogradConvolutionLayer5x5Dataset	tests/datasets/LargeConvolutionLayerDataset.h	/^    LargeWinogradConvolutionLayer5x5Dataset()$/;"	f	class:arm_compute::test::datasets::final
LargeWinogradInputTransformDataset	tests/datasets/WinogradInputTransformDataset.h	/^    LargeWinogradInputTransformDataset()$/;"	f	class:arm_compute::test::datasets::final
LargeWinogradOutputTransformDataset	tests/datasets/WinogradOutputTransformDataset.h	/^    LargeWinogradOutputTransformDataset()$/;"	f	class:arm_compute::test::datasets::final
LeNet5ActivationLayerDataset	tests/datasets/system_tests/lenet5/LeNet5ActivationLayerDataset.h	/^    LeNet5ActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LeNet5ConvolutionLayerDataset	tests/datasets/system_tests/lenet5/LeNet5ConvolutionLayerDataset.h	/^    LeNet5ConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LeNet5Fixture	tests/benchmark/fixtures/LeNet5Fixture.h	/^class LeNet5Fixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
LeNet5FullyConnectedLayerDataset	tests/datasets/system_tests/lenet5/LeNet5FullyConnectedLayerDataset.h	/^    LeNet5FullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
LeNet5Network	tests/networks/LeNet5Network.h	/^class LeNet5Network$/;"	c	namespace:arm_compute::test::networks
LeNet5PoolingLayerDataset	tests/datasets/system_tests/lenet5/LeNet5PoolingLayerDataset.h	/^    LeNet5PoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
ListOption	tests/framework/command_line/ListOption.h	/^class ListOption : public Option$/;"	c	namespace:arm_compute::test::framework
ListOption	tests/framework/command_line/ListOption.h	/^inline ListOption<T>::ListOption(std::string name, std::initializer_list<T> &&default_values)$/;"	f	class:arm_compute::test::framework::ListOption
LoadArrayFromNumpy	include/libnpy/npy.hpp	/^inline void LoadArrayFromNumpy(const std::string& filename, std::vector<unsigned long>& shape, std::vector<Scalar>& data)$/;"	f	namespace:npy
Local	include/CL/cl.hpp	/^Local(::size_t size)$/;"	f	namespace:cl
Local	include/CL/cl2.hpp	/^Local(size_type size)$/;"	f	namespace:cl
LocalSpaceArg	include/CL/cl.hpp	/^struct LocalSpaceArg$/;"	s	namespace:cl
LocalSpaceArg	include/CL/cl2.hpp	/^struct LocalSpaceArg$/;"	s	namespace:cl
LocallyConnectedValidationFixture	tests/validation/fixtures/LocallyConnectedFixture.h	/^class LocallyConnectedValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
LogFormat	tests/framework/printers/Printers.h	/^enum class LogFormat$/;"	c	namespace:arm_compute::test::framework
LogLevel	arm_compute/core/utils/logging/Types.h	/^enum class LogLevel$/;"	c	namespace:arm_compute::logging
LogLevel	tests/framework/Exceptions.h	/^enum class LogLevel$/;"	c	namespace:arm_compute::test::framework
LogLevelDecorator	arm_compute/core/utils/logging/LogMsgDecorators.h	/^class LogLevelDecorator : public IDecorator$/;"	c	namespace:arm_compute::logging
LogMsg	arm_compute/core/utils/logging/Types.h	/^    LogMsg()$/;"	f	struct:arm_compute::logging::LogMsg
LogMsg	arm_compute/core/utils/logging/Types.h	/^    LogMsg(std::string msg, LogLevel log_level = LogLevel::OFF)$/;"	f	struct:arm_compute::logging::LogMsg
LogMsg	arm_compute/core/utils/logging/Types.h	/^struct LogMsg$/;"	s	namespace:arm_compute::logging
Logger	arm_compute/core/utils/logging/Logger.h	/^class Logger$/;"	c	namespace:arm_compute::logging
Logger	src/core/utils/logging/Logger.cpp	/^Logger::Logger(std::string                              name,$/;"	f	class:Logger
Logger	src/core/utils/logging/Logger.cpp	/^Logger::Logger(std::string name, LogLevel log_level, std::shared_ptr<Printer> printer)$/;"	f	class:Logger
Logger	src/core/utils/logging/Logger.cpp	/^Logger::Logger(std::string name, LogLevel log_level, std::vector<std::shared_ptr<Printer>> printers)$/;"	f	class:Logger
LoggerRegistry	src/core/utils/logging/LoggerRegistry.cpp	/^LoggerRegistry::LoggerRegistry()$/;"	f	class:LoggerRegistry
Lut	arm_compute/runtime/Lut.h	/^class Lut : public ILut$/;"	c	namespace:arm_compute
Lut	src/runtime/Lut.cpp	/^Lut::Lut()$/;"	f	class:Lut
Lut	src/runtime/Lut.cpp	/^Lut::Lut(size_t num_elements, DataType data_type)$/;"	f	class:Lut
LutAccessor	tests/NEON/LutAccessor.h	/^    LutAccessor(Lut &lut)$/;"	f	class:arm_compute::test::LutAccessor
LutAccessor	tests/NEON/LutAccessor.h	/^class LutAccessor : public ILutAccessor<T>$/;"	c	namespace:arm_compute::test
LutAllocator	arm_compute/runtime/LutAllocator.h	/^class LutAllocator : public ILutAllocator$/;"	c	namespace:arm_compute
LutAllocator	src/runtime/LutAllocator.cpp	/^LutAllocator::LutAllocator()$/;"	f	class:LutAllocator
M	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int M, N, K;$/;"	m	class:winograd::BatchedBlockedGemm
MAKE_ARG_PARAM	tests/framework/Macros.h	88;"	d
MAKE_ARG_PARAMS	tests/framework/Macros.h	90;"	d
MAKE_TYPE_PARAM	tests/framework/Macros.h	87;"	d
MAKE_TYPE_PARAMS	tests/framework/Macros.h	89;"	d
MALI	tests/framework/instruments/Instruments.h	/^    MALI                    = 0x0300,$/;"	m	class:arm_compute::test::framework::InstrumentType
MALI_IOR	tests/framework/instruments/hwc.hpp	44;"	d
MALI_IOR	tests/framework/instruments/hwc.hpp	47;"	d
MALI_IOW	tests/framework/instruments/hwc.hpp	45;"	d
MALI_IOW	tests/framework/instruments/hwc.hpp	48;"	d
MALI_NAME_BLOCK_JM	tests/framework/instruments/hwc_names.hpp	/^    MALI_NAME_BLOCK_JM     = 0,$/;"	e	enum:mali_userspace::MaliCounterBlockName
MALI_NAME_BLOCK_MMU	tests/framework/instruments/hwc_names.hpp	/^    MALI_NAME_BLOCK_MMU    = 3$/;"	e	enum:mali_userspace::MaliCounterBlockName
MALI_NAME_BLOCK_SHADER	tests/framework/instruments/hwc_names.hpp	/^    MALI_NAME_BLOCK_SHADER = 2,$/;"	e	enum:mali_userspace::MaliCounterBlockName
MALI_NAME_BLOCK_SIZE	tests/framework/instruments/hwc_names.hpp	/^    MALI_NAME_BLOCK_SIZE = 64$/;"	e	enum:mali_userspace::__anon394
MALI_NAME_BLOCK_TILER	tests/framework/instruments/hwc_names.hpp	/^    MALI_NAME_BLOCK_TILER  = 1,$/;"	e	enum:mali_userspace::MaliCounterBlockName
MAX	arm_compute/core/Types.h	/^    MAX    = 2, \/**< Non linear dilate. *\/$/;"	m	class:arm_compute::NonLinearFilterFunction
MAX	arm_compute/core/Types.h	/^    MAX, \/**< Max Pooling *\/$/;"	m	class:arm_compute::HOGNormType::PoolingType
MAXQ_IMPL	src/core/CL/cl_kernels/fixed_point.h	129;"	d
MAX_DIMS	arm_compute/core/Dimensions.h	/^constexpr size_t MAX_DIMS = 6;$/;"	m	namespace:arm_compute
MAX_MATRIX_SIZE	src/core/CL/kernels/CLConvolutionKernel.cpp	44;"	d	file:
MAX_OP	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	34;"	d	file:
MAX_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	147;"	d
MAX_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	146;"	d
MAYBE	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^constexpr int MAYBE   = 127;$/;"	m	namespace:__anon248	file:
MEASUREMENTS	tests/framework/Exceptions.h	/^    MEASUREMENTS,$/;"	m	class:arm_compute::test::framework::LogLevel
MEDIAN	arm_compute/core/Types.h	/^    MEDIAN = 0, \/**< Non linear median filter. *\/$/;"	m	class:arm_compute::NonLinearFilterFunction
MIDGARD	arm_compute/core/GPUTarget.h	/^    MIDGARD       = 0x100,$/;"	m	class:arm_compute::GPUTarget
MIN	arm_compute/core/Types.h	/^    MIN    = 1, \/**< Non linear erode. *\/$/;"	m	class:arm_compute::NonLinearFilterFunction
MLALQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	288;"	d
MLAL_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	299;"	d
MLAL_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	298;"	d
MLAQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	267;"	d
MLA_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	38;"	d
MLA_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	279;"	d
MLA_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	278;"	d
MUL	tests/Types.h	/^    MUL,       \/**< Multiplication *\/$/;"	m	class:arm_compute::FixedPointOp
MULQ_IMPL	src/core/CL/cl_kernels/fixed_point.h	213;"	d
MULQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	236;"	d
MUL_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	37;"	d
MUL_OP	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	35;"	d	file:
MUL_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	227;"	d
MUL_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	226;"	d
MUL_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	258;"	d
MUL_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	257;"	d
M_BLOCK	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static constexpr int M_BLOCK = 4;   \/** Size of block used by GEMM. *\/$/;"	m	class:winograd::WinogradGEMM::Convolution
MagnitudeFixture	tests/benchmark/fixtures/MagnitudeFixture.h	/^class MagnitudeFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
MagnitudeType	arm_compute/core/Types.h	/^enum class MagnitudeType$/;"	c	namespace:arm_compute
MagnitudeValidationFixture	tests/validation/fixtures/MagnitudeFixture.h	/^class MagnitudeValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
MaliCounter	tests/framework/instruments/MaliCounter.cpp	/^MaliCounter::MaliCounter(ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::MaliCounter
MaliCounter	tests/framework/instruments/MaliCounter.h	/^class MaliCounter : public Instrument$/;"	c	namespace:arm_compute::test::framework
MaliCounterBlockName	tests/framework/instruments/hwc_names.hpp	/^enum MaliCounterBlockName$/;"	g	namespace:mali_userspace
MaliHWInfo	tests/framework/instruments/MaliCounter.cpp	/^struct MaliHWInfo$/;"	s	namespace:arm_compute::test::framework::__anon387	file:
MappingType	arm_compute/runtime/Types.h	/^enum class MappingType$/;"	c	namespace:arm_compute
MatrixMultiplyGEMMDataset	tests/datasets/MatrixMultiplyGEMMDataset.h	/^    MatrixMultiplyGEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
MatrixPattern	arm_compute/core/Types.h	/^enum class MatrixPattern$/;"	c	namespace:arm_compute
MatrixPatterns	tests/datasets/MatrixPatternDataset.h	/^    MatrixPatterns()$/;"	f	class:arm_compute::test::datasets::final
MeanStdDevFixture	tests/benchmark/fixtures/MeanStdDevFixture.h	/^class MeanStdDevFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
MeanStdDevValidationFixture	tests/validation/fixtures/MeanStdDevFixture.h	/^class MeanStdDevValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Measurement	tests/framework/instruments/Measurement.h	/^    Measurement(Floating v, std::string unit, std::list<std::string> raw = {})$/;"	f	struct:arm_compute::test::framework::Measurement
Measurement	tests/framework/instruments/Measurement.h	/^    Measurement(Integer v, std::string unit, std::list<std::string> raw = {})$/;"	f	struct:arm_compute::test::framework::Measurement
Measurement	tests/framework/instruments/Measurement.h	/^struct Measurement$/;"	s	namespace:arm_compute::test::framework
Median3x3Fixture	tests/benchmark/fixtures/Median3x3Fixture.h	/^class Median3x3Fixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
Median3x3ValidationFixture	tests/validation/fixtures/Median3x3Fixture.h	/^class Median3x3ValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Medium2DShapes	tests/datasets/ShapeDatasets.h	/^    Medium2DShapes()$/;"	f	class:arm_compute::test::datasets::final
Medium3DShapes	tests/datasets/ShapeDatasets.h	/^    Medium3DShapes()$/;"	f	class:arm_compute::test::datasets::final
Medium4DShapes	tests/datasets/ShapeDatasets.h	/^    Medium4DShapes()$/;"	f	class:arm_compute::test::datasets::final
MediumShapes	tests/datasets/ShapeDatasets.h	/^    MediumShapes()$/;"	f	class:arm_compute::test::datasets::final
Memory	arm_compute/runtime/Memory.h	/^class Memory$/;"	c	namespace:arm_compute
Memory	include/CL/cl.hpp	/^    Memory() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Memory
Memory	include/CL/cl.hpp	/^    Memory(const Memory& memory) : detail::Wrapper<cl_type>(memory) { }$/;"	f	class:cl::Memory
Memory	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Memory(const cl_mem& memory) : detail::Wrapper<cl_type>(memory) { }$/;"	f	class:cl::Memory
Memory	include/CL/cl.hpp	/^class Memory : public detail::Wrapper<cl_mem>$/;"	c	namespace:cl
Memory	include/CL/cl2.hpp	/^    Memory() : detail::Wrapper<cl_type>() { }$/;"	f	class:cl::Memory
Memory	include/CL/cl2.hpp	/^    Memory(const Memory& mem) : detail::Wrapper<cl_type>(mem) {}$/;"	f	class:cl::Memory
Memory	include/CL/cl2.hpp	/^    explicit Memory(const cl_mem& memory, bool retainObject) :$/;"	f	class:cl::Memory
Memory	include/CL/cl2.hpp	/^class Memory : public detail::Wrapper<cl_mem>$/;"	c	namespace:cl
Memory	src/runtime/Memory.cpp	/^Memory::Memory()$/;"	f	class:arm_compute::Memory
Memory	src/runtime/Memory.cpp	/^Memory::Memory(IMemoryRegion *memory)$/;"	f	class:arm_compute::Memory
Memory	src/runtime/Memory.cpp	/^Memory::Memory(std::shared_ptr<IMemoryRegion> memory)$/;"	f	class:arm_compute::Memory
MemoryGroupBase	arm_compute/runtime/MemoryGroupBase.h	/^class MemoryGroupBase : public IMemoryGroup$/;"	c	namespace:arm_compute
MemoryGroupBase	arm_compute/runtime/MemoryGroupBase.h	/^inline MemoryGroupBase<TensorType>::MemoryGroupBase(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:arm_compute::MemoryGroupBase
MemoryManagerAffinity	arm_compute/graph/Types.h	/^enum class MemoryManagerAffinity$/;"	c	namespace:arm_compute::graph
MemoryManagerContext	arm_compute/graph/GraphContext.h	/^struct MemoryManagerContext$/;"	s	namespace:arm_compute::graph
MemoryManagerOnDemand	arm_compute/runtime/MemoryManagerOnDemand.h	/^class MemoryManagerOnDemand : public IMemoryManager$/;"	c	namespace:arm_compute
MemoryManagerOnDemand	src/runtime/MemoryManagerOnDemand.cpp	/^MemoryManagerOnDemand::MemoryManagerOnDemand(std::shared_ptr<ILifetimeManager> lifetime_manager, std::shared_ptr<IPoolManager> pool_manager)$/;"	f	class:MemoryManagerOnDemand
MemoryRegion	arm_compute/runtime/MemoryRegion.h	/^    MemoryRegion(size_t size)$/;"	f	class:arm_compute::final
MergeResults	src/core/NEON/kernels/arm_gemm/mergeresults.hpp	/^inline void MergeResults(Tout *out, const Tin *in, int ldc, int y0, int ymax, int x0, int xmax, const Tout alpha, const Tout beta)$/;"	f	namespace:arm_gemm
MergeResults	src/core/NEON/kernels/arm_gemm/merges/a32_merge_float_8x6.hpp	/^inline void MergeResults<8, 6>(float *out, const float *in, const int ldout, const int y0, const int ymax, const int x0, const int xmax, const float alpha, const float beta)$/;"	f
MergeResults	src/core/NEON/kernels/arm_gemm/merges/a64_merge_float_12x8.hpp	/^inline void MergeResults<12, 8>(float *out, const float *in, const int ldout, const int y0, const int ymax, const int x0, const int xmax, const float alpha, const float beta)$/;"	f
MergeResults	src/core/NEON/kernels/arm_gemm/merges/a64_merge_float_to_half_12x8.hpp	/^inline void MergeResults<12, 8>(__fp16 *out, const float *in, int ldout, int y0, int ymax, int x0, int xmax, const __fp16 alpha, const __fp16 beta)$/;"	f
MergeResults	src/core/NEON/kernels/arm_gemm/merges/a64_merge_half_24x8.hpp	/^inline void MergeResults<24, 8>(__fp16 *out, const __fp16 *in, const int ldout, const int y0, const int ymax,$/;"	f
MergeResults	src/core/NEON/kernels/arm_gemm/merges/a64_merge_int32_12x8.hpp	/^inline void MergeResults<12, 8>(int32_t *out, const int32_t *in, const int ldout, const int y0, const int ymax, const int x0, const int xmax, const int32_t alpha, const int32_t beta)$/;"	f
MergeResults	src/core/NEON/kernels/arm_gemm/merges/a64_merge_int32_12x8.hpp	/^inline void MergeResults<12, 8>(uint32_t *out, const uint32_t *in, const int ldout, const int y0, const int ymax, const int x0, const int xmax, const uint32_t alpha, const uint32_t beta)$/;"	f
MinMaxLocationFixture	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^class MinMaxLocationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
MinMaxLocationValidationFixture	tests/validation/fixtures/MinMaxLocationFixture.h	/^class MinMaxLocationValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
MinMaxLocationValues	tests/Types.h	/^struct MinMaxLocationValues$/;"	s	namespace:arm_compute
MixedThresholdDataset	tests/datasets/ThresholdDataset.h	/^    MixedThresholdDataset()$/;"	f	class:arm_compute::test::datasets::final
MobileNetActivationLayerDataset	tests/datasets/system_tests/mobilenet/MobileNetActivationLayerDataset.h	/^    MobileNetActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
MobileNetBatchNormalizationLayerDataset	tests/datasets/system_tests/mobilenet/MobileNetBatchNormalizationLayerDataset.h	/^    MobileNetBatchNormalizationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
MobileNetConvolutionLayerDataset	tests/datasets/system_tests/mobilenet/MobileNetConvolutionLayerDataset.h	/^    MobileNetConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
MobileNetDepthwiseConvolutionLayerDataset	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseConvolutionLayerDataset.h	/^    MobileNetDepthwiseConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
MobileNetDepthwiseSeparableConvolutionLayerDataset	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseSeparableConvolutionLayerDataset.h	/^    MobileNetDepthwiseSeparableConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
MobileNetFixture	tests/benchmark/fixtures/MobileNetFixture.h	/^class MobileNetFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
MobileNetNetwork	tests/networks/MobileNetNetwork.h	/^class MobileNetNetwork$/;"	c	namespace:arm_compute::test::networks
MobileNetV1Fixture	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^class MobileNetV1Fixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
MobileNetV1Network	tests/networks/MobileNetV1Network.h	/^class MobileNetV1Network$/;"	c	namespace:arm_compute::test::networks
MultiHOG	arm_compute/runtime/MultiHOG.h	/^class MultiHOG : public IMultiHOG$/;"	c	namespace:arm_compute
MultiHOG	src/runtime/MultiHOG.cpp	/^MultiHOG::MultiHOG(size_t num_models)$/;"	f	class:MultiHOG
MultiImage	arm_compute/runtime/MultiImage.h	/^class MultiImage : public IMultiImage$/;"	c	namespace:arm_compute
MultiImage	src/runtime/MultiImage.cpp	/^MultiImage::MultiImage()$/;"	f	class:MultiImage
MultiImageInfo	arm_compute/core/MultiImageInfo.h	/^class MultiImageInfo$/;"	c	namespace:arm_compute
MultiImageInfo	src/core/MultiImageInfo.cpp	/^MultiImageInfo::MultiImageInfo()$/;"	f	class:MultiImageInfo
N	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int M, N, K;$/;"	m	class:winograd::BatchedBlockedGemm
NAVTREE	documentation/navtreedata.js	/^var NAVTREE =$/;"	v
NAVTREEINDEX	documentation/navtreedata.js	/^var NAVTREEINDEX =$/;"	v
NCHW	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  NCHW,  \/\/\/< [Batch x Channels x Height x Width]$/;"	e	enum:TensorOrder
NCHW	arm_compute/core/Types.h	/^    NCHW,    \/**< Num samples, channels, height, width *\/$/;"	m	class:arm_compute::DataLayout
NDRange	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    NDRange()$/;"	f	class:arm_compute::gles::NDRange
NDRange	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    NDRange(size_t size0)$/;"	f	class:arm_compute::gles::NDRange
NDRange	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    NDRange(size_t size0, size_t size1)$/;"	f	class:arm_compute::gles::NDRange
NDRange	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    NDRange(size_t size0, size_t size1, size_t size2)$/;"	f	class:arm_compute::gles::NDRange
NDRange	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^class NDRange$/;"	c	namespace:arm_compute::gles
NDRange	include/CL/cl.hpp	/^    NDRange()$/;"	f	class:cl::NDRange
NDRange	include/CL/cl.hpp	/^    NDRange(::size_t size0)$/;"	f	class:cl::NDRange
NDRange	include/CL/cl.hpp	/^    NDRange(::size_t size0, ::size_t size1)$/;"	f	class:cl::NDRange
NDRange	include/CL/cl.hpp	/^    NDRange(::size_t size0, ::size_t size1, ::size_t size2)$/;"	f	class:cl::NDRange
NDRange	include/CL/cl.hpp	/^class NDRange$/;"	c	namespace:cl
NDRange	include/CL/cl2.hpp	/^    NDRange()$/;"	f	class:cl::NDRange
NDRange	include/CL/cl2.hpp	/^    NDRange(size_type size0)$/;"	f	class:cl::NDRange
NDRange	include/CL/cl2.hpp	/^    NDRange(size_type size0, size_type size1)$/;"	f	class:cl::NDRange
NDRange	include/CL/cl2.hpp	/^    NDRange(size_type size0, size_type size1, size_type size2)$/;"	f	class:cl::NDRange
NDRange	include/CL/cl2.hpp	/^class NDRange$/;"	c	namespace:cl
NEAREST_NEIGHBOR	arm_compute/core/Types.h	/^    NEAREST_NEIGHBOR, \/**< Output values are defined to match the source pixel whose center is nearest to the sample position *\/$/;"	m	class:arm_compute::InterpolationPolicy
NEAbsoluteDifference	arm_compute/runtime/NEON/functions/NEAbsoluteDifference.h	/^class NEAbsoluteDifference : public INESimpleFunction$/;"	c	namespace:arm_compute
NEAbsoluteDifferenceKernel	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	/^class NEAbsoluteDifferenceKernel : public INEKernel$/;"	c	namespace:arm_compute
NEAbsoluteDifferenceKernel	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^NEAbsoluteDifferenceKernel::NEAbsoluteDifferenceKernel()$/;"	f	class:NEAbsoluteDifferenceKernel
NEAccumulate	arm_compute/runtime/NEON/functions/NEAccumulate.h	/^class NEAccumulate : public INESimpleFunction$/;"	c	namespace:arm_compute
NEAccumulateKernel	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^class NEAccumulateKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEAccumulateSquared	arm_compute/runtime/NEON/functions/NEAccumulate.h	/^class NEAccumulateSquared : public INESimpleFunction$/;"	c	namespace:arm_compute
NEAccumulateSquaredKernel	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^class NEAccumulateSquaredKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEAccumulateSquaredKernel	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^NEAccumulateSquaredKernel::NEAccumulateSquaredKernel()$/;"	f	class:NEAccumulateSquaredKernel
NEAccumulateWeighted	arm_compute/runtime/NEON/functions/NEAccumulate.h	/^class NEAccumulateWeighted : public INESimpleFunction$/;"	c	namespace:arm_compute
NEAccumulateWeightedFP16Kernel	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^class NEAccumulateWeightedFP16Kernel : public NEAccumulateWeightedKernel$/;"	c	namespace:arm_compute
NEAccumulateWeightedKernel	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^class NEAccumulateWeightedKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEAccumulateWeightedKernel	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^NEAccumulateWeightedKernel::NEAccumulateWeightedKernel()$/;"	f	class:NEAccumulateWeightedKernel
NEActivationLayer	arm_compute/runtime/NEON/functions/NEActivationLayer.h	/^class NEActivationLayer : public INESimpleFunction$/;"	c	namespace:arm_compute
NEActivationLayerKernel	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^class NEActivationLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEActivationLayerKernel	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^NEActivationLayerKernel::NEActivationLayerKernel()$/;"	f	class:NEActivationLayerKernel
NEArithmeticAddition	arm_compute/runtime/NEON/functions/NEArithmeticAddition.h	/^class NEArithmeticAddition : public INESimpleFunction$/;"	c	namespace:arm_compute
NEArithmeticAdditionKernel	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^class NEArithmeticAdditionKernel : public INEKernel$/;"	c	namespace:arm_compute
NEArithmeticAdditionKernel	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^NEArithmeticAdditionKernel::NEArithmeticAdditionKernel()$/;"	f	class:NEArithmeticAdditionKernel
NEArithmeticSubtraction	arm_compute/runtime/NEON/functions/NEArithmeticSubtraction.h	/^class NEArithmeticSubtraction : public INESimpleFunction$/;"	c	namespace:arm_compute
NEArithmeticSubtractionKernel	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	/^class NEArithmeticSubtractionKernel : public INEKernel$/;"	c	namespace:arm_compute
NEArithmeticSubtractionKernel	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^NEArithmeticSubtractionKernel::NEArithmeticSubtractionKernel()$/;"	f	class:NEArithmeticSubtractionKernel
NEBatchNormalizationLayer	arm_compute/runtime/NEON/functions/NEBatchNormalizationLayer.h	/^class NEBatchNormalizationLayer : public IFunction$/;"	c	namespace:arm_compute
NEBatchNormalizationLayer	src/runtime/NEON/functions/NEBatchNormalizationLayer.cpp	/^NEBatchNormalizationLayer::NEBatchNormalizationLayer()$/;"	f	class:NEBatchNormalizationLayer
NEBatchNormalizationLayerKernel	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^class NEBatchNormalizationLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEBatchNormalizationLayerKernel	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^NEBatchNormalizationLayerKernel::NEBatchNormalizationLayerKernel()$/;"	f	class:NEBatchNormalizationLayerKernel
NEBitwiseAnd	arm_compute/runtime/NEON/functions/NEBitwiseAnd.h	/^class NEBitwiseAnd : public INESimpleFunction$/;"	c	namespace:arm_compute
NEBitwiseAndKernel	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	/^class NEBitwiseAndKernel : public INEKernel$/;"	c	namespace:arm_compute
NEBitwiseAndKernel	src/core/NEON/kernels/NEBitwiseAndKernel.cpp	/^NEBitwiseAndKernel::NEBitwiseAndKernel()$/;"	f	class:NEBitwiseAndKernel
NEBitwiseNot	arm_compute/runtime/NEON/functions/NEBitwiseNot.h	/^class NEBitwiseNot : public INESimpleFunction$/;"	c	namespace:arm_compute
NEBitwiseNotKernel	arm_compute/core/NEON/kernels/NEBitwiseNotKernel.h	/^class NEBitwiseNotKernel : public INEKernel$/;"	c	namespace:arm_compute
NEBitwiseNotKernel	src/core/NEON/kernels/NEBitwiseNotKernel.cpp	/^NEBitwiseNotKernel::NEBitwiseNotKernel()$/;"	f	class:NEBitwiseNotKernel
NEBitwiseOr	arm_compute/runtime/NEON/functions/NEBitwiseOr.h	/^class NEBitwiseOr : public INESimpleFunction$/;"	c	namespace:arm_compute
NEBitwiseOrKernel	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	/^class NEBitwiseOrKernel : public INEKernel$/;"	c	namespace:arm_compute
NEBitwiseOrKernel	src/core/NEON/kernels/NEBitwiseOrKernel.cpp	/^NEBitwiseOrKernel::NEBitwiseOrKernel()$/;"	f	class:NEBitwiseOrKernel
NEBitwiseXor	arm_compute/runtime/NEON/functions/NEBitwiseXor.h	/^class NEBitwiseXor : public INESimpleFunction$/;"	c	namespace:arm_compute
NEBitwiseXorKernel	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	/^class NEBitwiseXorKernel : public INEKernel$/;"	c	namespace:arm_compute
NEBitwiseXorKernel	src/core/NEON/kernels/NEBitwiseXorKernel.cpp	/^NEBitwiseXorKernel::NEBitwiseXorKernel()$/;"	f	class:NEBitwiseXorKernel
NEBox3x3	arm_compute/runtime/NEON/functions/NEBox3x3.h	/^class NEBox3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NEBox3x3FP16Kernel	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	/^class NEBox3x3FP16Kernel : public NEBox3x3Kernel$/;"	c	namespace:arm_compute
NEBox3x3Kernel	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	/^class NEBox3x3Kernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NECannyEdge	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^class NECannyEdge : public IFunction$/;"	c	namespace:arm_compute
NECannyEdge	src/runtime/NEON/functions/NECannyEdge.cpp	/^NECannyEdge::NECannyEdge(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:NECannyEdge
NEChannelCombine	arm_compute/runtime/NEON/functions/NEChannelCombine.h	/^class NEChannelCombine : public INESimpleFunction$/;"	c	namespace:arm_compute
NEChannelCombineKernel	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^class NEChannelCombineKernel : public INEKernel$/;"	c	namespace:arm_compute
NEChannelCombineKernel	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^NEChannelCombineKernel::NEChannelCombineKernel()$/;"	f	class:NEChannelCombineKernel
NEChannelExtract	arm_compute/runtime/NEON/functions/NEChannelExtract.h	/^class NEChannelExtract : public INESimpleFunction$/;"	c	namespace:arm_compute
NEChannelExtractKernel	arm_compute/core/NEON/kernels/NEChannelExtractKernel.h	/^class NEChannelExtractKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEChannelExtractKernel	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^NEChannelExtractKernel::NEChannelExtractKernel()$/;"	f	class:NEChannelExtractKernel
NECol2Im	arm_compute/runtime/NEON/functions/NECol2Im.h	/^class NECol2Im : public INESimpleFunction$/;"	c	namespace:arm_compute
NECol2ImKernel	arm_compute/core/NEON/kernels/NECol2ImKernel.h	/^class NECol2ImKernel : public INEKernel$/;"	c	namespace:arm_compute
NECol2ImKernel	src/core/NEON/kernels/NECol2ImKernel.cpp	/^NECol2ImKernel::NECol2ImKernel()$/;"	f	class:NECol2ImKernel
NEColorConvert	arm_compute/runtime/NEON/functions/NEColorConvert.h	/^class NEColorConvert : public INESimpleFunction$/;"	c	namespace:arm_compute
NEColorConvertKernel	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	/^class NEColorConvertKernel : public INEKernel$/;"	c	namespace:arm_compute
NEColorConvertKernel	src/core/NEON/kernels/NEColorConvertKernel.cpp	/^NEColorConvertKernel::NEColorConvertKernel()$/;"	f	class:NEColorConvertKernel
NEConvertFullyConnectedWeights	arm_compute/runtime/NEON/functions/NEConvertFullyConnectedWeights.h	/^class NEConvertFullyConnectedWeights : public IFunction$/;"	c	namespace:arm_compute
NEConvertFullyConnectedWeights	src/runtime/NEON/functions/NEConvertFullyConnectedWeights.cpp	/^NEConvertFullyConnectedWeights::NEConvertFullyConnectedWeights()$/;"	f	class:NEConvertFullyConnectedWeights
NEConvertFullyConnectedWeightsKernel	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^class NEConvertFullyConnectedWeightsKernel : public INEKernel$/;"	c	namespace:arm_compute
NEConvertFullyConnectedWeightsKernel	src/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.cpp	/^NEConvertFullyConnectedWeightsKernel::NEConvertFullyConnectedWeightsKernel()$/;"	f	class:NEConvertFullyConnectedWeightsKernel
NEConvolution3x3	arm_compute/runtime/NEON/functions/NEConvolution.h	/^class NEConvolution3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NEConvolutionKernel	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^class NEConvolutionKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEConvolutionKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^NEConvolutionKernel<matrix_size>::NEConvolutionKernel()$/;"	f	class:arm_compute::NEConvolutionKernel
NEConvolutionKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NEConvolutionKernel<3>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NEConvolutionKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NEConvolutionKernel<5>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NEConvolutionKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NEConvolutionKernel<7>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NEConvolutionKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NEConvolutionKernel<9>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NEConvolutionLayer	arm_compute/runtime/NEON/functions/NEConvolutionLayer.h	/^class NEConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEConvolutionLayer	src/runtime/NEON/functions/NEConvolutionLayer.cpp	/^NEConvolutionLayer::NEConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager) \/\/NOLINT$/;"	f	class:arm_compute::NEConvolutionLayer
NEConvolutionLayerReshapeWeights	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^class NEConvolutionLayerReshapeWeights : public IFunction$/;"	c	namespace:arm_compute
NEConvolutionLayerReshapeWeights	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^NEConvolutionLayerReshapeWeights::NEConvolutionLayerReshapeWeights(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:arm_compute::NEConvolutionLayerReshapeWeights
NEConvolutionRectangle	arm_compute/runtime/NEON/functions/NEConvolution.h	/^class NEConvolutionRectangle : public INESimpleFunction$/;"	c	namespace:arm_compute
NEConvolutionRectangleKernel	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^class NEConvolutionRectangleKernel : public INEKernel$/;"	c	namespace:arm_compute
NEConvolutionRectangleKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^NEConvolutionRectangleKernel::NEConvolutionRectangleKernel()$/;"	f	class:arm_compute::NEConvolutionRectangleKernel
NEConvolutionSquare	arm_compute/runtime/NEON/functions/NEConvolution.h	/^class NEConvolutionSquare : public IFunction$/;"	c	namespace:arm_compute
NEConvolutionSquare	src/runtime/NEON/functions/NEConvolution.cpp	/^NEConvolutionSquare<matrix_size>::NEConvolutionSquare(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEConvolutionSquare
NEConvolutionSquare	src/runtime/NEON/functions/NEConvolution.cpp	/^template class arm_compute::NEConvolutionSquare<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEConvolutionSquare	src/runtime/NEON/functions/NEConvolution.cpp	/^template class arm_compute::NEConvolutionSquare<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEConvolutionSquare	src/runtime/NEON/functions/NEConvolution.cpp	/^template class arm_compute::NEConvolutionSquare<9>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NECumulativeDistributionKernel	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^class NECumulativeDistributionKernel : public INEKernel$/;"	c	namespace:arm_compute
NECumulativeDistributionKernel	src/core/NEON/kernels/NECumulativeDistributionKernel.cpp	/^NECumulativeDistributionKernel::NECumulativeDistributionKernel()$/;"	f	class:NECumulativeDistributionKernel
NEDeconvolutionLayer	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^class NEDeconvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEDeconvolutionLayer	src/runtime/NEON/functions/NEDeconvolutionLayer.cpp	/^NEDeconvolutionLayer::NEDeconvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:NEDeconvolutionLayer
NEDepthConcatenateLayer	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^class NEDepthConcatenateLayer : public IFunction$/;"	c	namespace:arm_compute
NEDepthConcatenateLayer	src/runtime/NEON/functions/NEDepthConcatenateLayer.cpp	/^NEDepthConcatenateLayer::NEDepthConcatenateLayer() \/\/ NOLINT$/;"	f	class:NEDepthConcatenateLayer
NEDepthConcatenateLayerKernel	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^class NEDepthConcatenateLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDepthConcatenateLayerKernel	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^NEDepthConcatenateLayerKernel::NEDepthConcatenateLayerKernel()$/;"	f	class:NEDepthConcatenateLayerKernel
NEDepthConvertLayer	arm_compute/runtime/NEON/functions/NEDepthConvertLayer.h	/^class NEDepthConvertLayer : public INESimpleFunction$/;"	c	namespace:arm_compute
NEDepthConvertLayerKernel	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^class NEDepthConvertLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDepthConvertLayerKernel	src/core/NEON/kernels/NEDepthConvertLayerKernel.cpp	/^NEDepthConvertLayerKernel::NEDepthConvertLayerKernel()$/;"	f	class:NEDepthConvertLayerKernel
NEDepthwiseConvolutionLayer	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^class NEDepthwiseConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEDepthwiseConvolutionLayer	src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp	/^NEDepthwiseConvolutionLayer::NEDepthwiseConvolutionLayer()$/;"	f	class:NEDepthwiseConvolutionLayer
NEDepthwiseConvolutionLayer3x3	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^class NEDepthwiseConvolutionLayer3x3 : public IFunction$/;"	c	namespace:arm_compute
NEDepthwiseConvolutionLayer3x3	src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp	/^NEDepthwiseConvolutionLayer3x3::NEDepthwiseConvolutionLayer3x3()$/;"	f	class:NEDepthwiseConvolutionLayer3x3
NEDepthwiseConvolutionLayer3x3Kernel	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^class NEDepthwiseConvolutionLayer3x3Kernel : public INEKernel$/;"	c	namespace:arm_compute
NEDepthwiseConvolutionLayer3x3Kernel	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^NEDepthwiseConvolutionLayer3x3Kernel::NEDepthwiseConvolutionLayer3x3Kernel()$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
NEDepthwiseIm2ColKernel	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^class NEDepthwiseIm2ColKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDepthwiseIm2ColKernel	src/core/NEON/kernels/NEDepthwiseIm2ColKernel.cpp	/^NEDepthwiseIm2ColKernel::NEDepthwiseIm2ColKernel()$/;"	f	class:NEDepthwiseIm2ColKernel
NEDepthwiseSeparableConvolutionLayer	arm_compute/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.h	/^class NEDepthwiseSeparableConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEDepthwiseSeparableConvolutionLayer	src/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.cpp	/^NEDepthwiseSeparableConvolutionLayer::NEDepthwiseSeparableConvolutionLayer()$/;"	f	class:NEDepthwiseSeparableConvolutionLayer
NEDepthwiseVectorToTensorKernel	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^class NEDepthwiseVectorToTensorKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDepthwiseVectorToTensorKernel	src/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.cpp	/^NEDepthwiseVectorToTensorKernel::NEDepthwiseVectorToTensorKernel()$/;"	f	class:NEDepthwiseVectorToTensorKernel
NEDepthwiseWeightsReshapeKernel	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^class NEDepthwiseWeightsReshapeKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDepthwiseWeightsReshapeKernel	src/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.cpp	/^NEDepthwiseWeightsReshapeKernel::NEDepthwiseWeightsReshapeKernel()$/;"	f	class:NEDepthwiseWeightsReshapeKernel
NEDequantizationLayer	arm_compute/runtime/NEON/functions/NEDequantizationLayer.h	/^class NEDequantizationLayer : public IFunction$/;"	c	namespace:arm_compute
NEDequantizationLayer	src/runtime/NEON/functions/NEDequantizationLayer.cpp	/^NEDequantizationLayer::NEDequantizationLayer()$/;"	f	class:NEDequantizationLayer
NEDequantizationLayerKernel	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	/^class NEDequantizationLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDequantizationLayerKernel	src/core/NEON/kernels/NEDequantizationLayerKernel.cpp	/^NEDequantizationLayerKernel::NEDequantizationLayerKernel()$/;"	f	class:NEDequantizationLayerKernel
NEDerivative	arm_compute/runtime/NEON/functions/NEDerivative.h	/^class NEDerivative : public IFunction$/;"	c	namespace:arm_compute
NEDerivative	src/runtime/NEON/functions/NEDerivative.cpp	/^NEDerivative::NEDerivative()$/;"	f	class:NEDerivative
NEDerivativeKernel	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^class NEDerivativeKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDerivativeKernel	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^NEDerivativeKernel::NEDerivativeKernel()$/;"	f	class:NEDerivativeKernel
NEDeviceBackend	src/graph/backends/NEON/NEDeviceBackend.cpp	/^NEDeviceBackend::NEDeviceBackend()$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
NEDilate	arm_compute/runtime/NEON/functions/NEDilate.h	/^class NEDilate : public INESimpleFunction$/;"	c	namespace:arm_compute
NEDilateKernel	arm_compute/core/NEON/kernels/NEDilateKernel.h	/^class NEDilateKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEDirectConvolutionLayer	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^class NEDirectConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEDirectConvolutionLayer	src/runtime/NEON/functions/NEDirectConvolutionLayer.cpp	/^NEDirectConvolutionLayer::NEDirectConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEDirectConvolutionLayer
NEDirectConvolutionLayerKernel	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^class NEDirectConvolutionLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDirectConvolutionLayerKernel	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^NEDirectConvolutionLayerKernel::NEDirectConvolutionLayerKernel()$/;"	f	class:NEDirectConvolutionLayerKernel
NEDirectConvolutionLayerOutputStageKernel	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^class NEDirectConvolutionLayerOutputStageKernel : public INEKernel$/;"	c	namespace:arm_compute
NEDirectConvolutionLayerOutputStageKernel	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^NEDirectConvolutionLayerOutputStageKernel::NEDirectConvolutionLayerOutputStageKernel()$/;"	f	class:NEDirectConvolutionLayerOutputStageKernel
NEEdgeNonMaxSuppressionKernel	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^class NEEdgeNonMaxSuppressionKernel : public INEKernel$/;"	c	namespace:arm_compute
NEEdgeNonMaxSuppressionKernel	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^NEEdgeNonMaxSuppressionKernel::NEEdgeNonMaxSuppressionKernel()$/;"	f	class:NEEdgeNonMaxSuppressionKernel
NEEdgeTraceKernel	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^class NEEdgeTraceKernel : public INEKernel$/;"	c	namespace:arm_compute
NEEdgeTraceKernel	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^NEEdgeTraceKernel::NEEdgeTraceKernel()$/;"	f	class:NEEdgeTraceKernel
NEEqualizeHistogram	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^class NEEqualizeHistogram : public IFunction$/;"	c	namespace:arm_compute
NEEqualizeHistogram	src/runtime/NEON/functions/NEEqualizeHistogram.cpp	/^NEEqualizeHistogram::NEEqualizeHistogram()$/;"	f	class:NEEqualizeHistogram
NEErode	arm_compute/runtime/NEON/functions/NEErode.h	/^class NEErode : public INESimpleFunction$/;"	c	namespace:arm_compute
NEErodeKernel	arm_compute/core/NEON/kernels/NEErodeKernel.h	/^class NEErodeKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEFastCorners	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^class NEFastCorners : public IFunction$/;"	c	namespace:arm_compute
NEFastCorners	src/runtime/NEON/functions/NEFastCorners.cpp	/^NEFastCorners::NEFastCorners(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEFastCorners
NEFastCornersKernel	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^class NEFastCornersKernel : public INEKernel$/;"	c	namespace:arm_compute
NEFastCornersKernel	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^NEFastCornersKernel::NEFastCornersKernel()$/;"	f	class:NEFastCornersKernel
NEFillArrayKernel	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^class NEFillArrayKernel : public INEKernel$/;"	c	namespace:arm_compute
NEFillArrayKernel	src/core/NEON/kernels/NEFillArrayKernel.cpp	/^NEFillArrayKernel::NEFillArrayKernel()$/;"	f	class:NEFillArrayKernel
NEFillBorder	arm_compute/runtime/NEON/functions/NEFillBorder.h	/^class NEFillBorder : public IFunction$/;"	c	namespace:arm_compute
NEFillBorderKernel	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^class NEFillBorderKernel : public INEKernel$/;"	c	namespace:arm_compute
NEFillBorderKernel	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^NEFillBorderKernel::NEFillBorderKernel()$/;"	f	class:NEFillBorderKernel
NEFillInnerBorderKernel	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	/^class NEFillInnerBorderKernel : public INEKernel$/;"	c	namespace:arm_compute
NEFillInnerBorderKernel	src/core/NEON/kernels/NEFillInnerBorderKernel.cpp	/^NEFillInnerBorderKernel::NEFillInnerBorderKernel()$/;"	f	class:NEFillInnerBorderKernel
NEFlattenLayer	arm_compute/runtime/NEON/functions/NEFlattenLayer.h	/^class NEFlattenLayer : public INESimpleFunction$/;"	c	namespace:arm_compute
NEFloor	arm_compute/runtime/NEON/functions/NEFloor.h	/^class NEFloor : public INESimpleFunction$/;"	c	namespace:arm_compute
NEFloorKernel	arm_compute/core/NEON/kernels/NEFloorKernel.h	/^class NEFloorKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEFullyConnectedLayer	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^class NEFullyConnectedLayer : public IFunction$/;"	c	namespace:arm_compute
NEFullyConnectedLayer	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^NEFullyConnectedLayer::NEFullyConnectedLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEFullyConnectedLayer
NEFullyConnectedLayerReshapeWeights	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^class NEFullyConnectedLayerReshapeWeights : public IFunction$/;"	c	namespace:arm_compute
NEFullyConnectedLayerReshapeWeights	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^NEFullyConnectedLayerReshapeWeights::NEFullyConnectedLayerReshapeWeights(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEFullyConnectedLayerReshapeWeights
NEGEMM	arm_compute/runtime/NEON/functions/NEGEMM.h	/^class NEGEMM : public IFunction$/;"	c	namespace:arm_compute
NEGEMM	src/runtime/NEON/functions/NEGEMM.cpp	/^NEGEMM::NEGEMM(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:arm_compute::NEGEMM
NEGEMMAssemblyBaseKernel	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    NEGEMMAssemblyBaseKernel()$/;"	f	class:arm_compute::NEGEMMAssemblyBaseKernel
NEGEMMAssemblyBaseKernel	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^class NEGEMMAssemblyBaseKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMAssemblyWrapper	arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h	/^    NEGEMMAssemblyWrapper() : _kernel(nullptr) {}$/;"	f	class:arm_compute::final
NEGEMMConvolutionLayer	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^class NEGEMMConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEGEMMConvolutionLayer	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^NEGEMMConvolutionLayer::NEGEMMConvolutionLayer(const std::shared_ptr<IMemoryManager> &memory_manager)$/;"	f	class:arm_compute::NEGEMMConvolutionLayer
NEGEMMInterleave4x4	arm_compute/runtime/NEON/functions/NEGEMMInterleave4x4.h	/^class NEGEMMInterleave4x4 : public INESimpleFunction$/;"	c	namespace:arm_compute
NEGEMMInterleave4x4Kernel	arm_compute/core/NEON/kernels/NEGEMMInterleave4x4Kernel.h	/^class NEGEMMInterleave4x4Kernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGEMMInterleave4x4Kernel	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^NEGEMMInterleave4x4Kernel::NEGEMMInterleave4x4Kernel()$/;"	f	class:NEGEMMInterleave4x4Kernel
NEGEMMLowpAssemblyMatrixMultiplyCore	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^class NEGEMMLowpAssemblyMatrixMultiplyCore : public IFunction$/;"	c	namespace:arm_compute
NEGEMMLowpAssemblyMatrixMultiplyCore	src/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.cpp	/^NEGEMMLowpAssemblyMatrixMultiplyCore::NEGEMMLowpAssemblyMatrixMultiplyCore(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEGEMMLowpAssemblyMatrixMultiplyCore
NEGEMMLowpMatrixAReductionKernel	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^class NEGEMMLowpMatrixAReductionKernel : public INEGEMMLowpReductionKernel$/;"	c	namespace:arm_compute
NEGEMMLowpMatrixBReductionKernel	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^class NEGEMMLowpMatrixBReductionKernel : public INEGEMMLowpReductionKernel$/;"	c	namespace:arm_compute
NEGEMMLowpMatrixMultiplyCore	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^class NEGEMMLowpMatrixMultiplyCore : public IFunction$/;"	c	namespace:arm_compute
NEGEMMLowpMatrixMultiplyCore	src/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.cpp	/^NEGEMMLowpMatrixMultiplyCore::NEGEMMLowpMatrixMultiplyCore(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEGEMMLowpMatrixMultiplyCore
NEGEMMLowpMatrixMultiplyKernel	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^class NEGEMMLowpMatrixMultiplyKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMLowpMatrixMultiplyKernel	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^NEGEMMLowpMatrixMultiplyKernel::NEGEMMLowpMatrixMultiplyKernel()$/;"	f	class:NEGEMMLowpMatrixMultiplyKernel
NEGEMMLowpOffsetContributionKernel	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^class NEGEMMLowpOffsetContributionKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMLowpOffsetContributionKernel	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^NEGEMMLowpOffsetContributionKernel::NEGEMMLowpOffsetContributionKernel()$/;"	f	class:NEGEMMLowpOffsetContributionKernel
NEGEMMLowpQuantizeDownInt32ToUint8Scale	arm_compute/runtime/NEON/functions/NEGEMMLowpOutputStage.h	/^class NEGEMMLowpQuantizeDownInt32ToUint8Scale : public INESimpleFunction$/;"	c	namespace:arm_compute
NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint	arm_compute/runtime/NEON/functions/NEGEMMLowpOutputStage.h	/^class NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint : public INESimpleFunction$/;"	c	namespace:arm_compute
NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^class NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel()$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^class NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel()$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
NEGEMMMatrixAccumulateBiasesKernel	arm_compute/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.h	/^class NEGEMMMatrixAccumulateBiasesKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMMatrixAccumulateBiasesKernel	src/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.cpp	/^NEGEMMMatrixAccumulateBiasesKernel::NEGEMMMatrixAccumulateBiasesKernel()$/;"	f	class:NEGEMMMatrixAccumulateBiasesKernel
NEGEMMMatrixAdditionKernel	arm_compute/core/NEON/kernels/NEGEMMMatrixAdditionKernel.h	/^class NEGEMMMatrixAdditionKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGEMMMatrixAdditionKernel	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^NEGEMMMatrixAdditionKernel::NEGEMMMatrixAdditionKernel()$/;"	f	class:NEGEMMMatrixAdditionKernel
NEGEMMMatrixMultiplyKernel	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^class NEGEMMMatrixMultiplyKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGEMMMatrixMultiplyKernel	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^NEGEMMMatrixMultiplyKernel::NEGEMMMatrixMultiplyKernel()$/;"	f	class:NEGEMMMatrixMultiplyKernel
NEGEMMMatrixVectorMultiplyKernel	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^class NEGEMMMatrixVectorMultiplyKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGEMMMatrixVectorMultiplyKernel	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^NEGEMMMatrixVectorMultiplyKernel::NEGEMMMatrixVectorMultiplyKernel()$/;"	f	class:NEGEMMMatrixVectorMultiplyKernel
NEGEMMTranspose1xW	arm_compute/runtime/NEON/functions/NEGEMMTranspose1xW.h	/^class NEGEMMTranspose1xW : public INESimpleFunction$/;"	c	namespace:arm_compute
NEGEMMTranspose1xWKernel	arm_compute/core/NEON/kernels/NEGEMMTranspose1xWKernel.h	/^class NEGEMMTranspose1xWKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGaussian3x3	arm_compute/runtime/NEON/functions/NEGaussian3x3.h	/^class NEGaussian3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NEGaussian3x3Kernel	arm_compute/core/NEON/kernels/NEGaussian3x3Kernel.h	/^class NEGaussian3x3Kernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGaussian5x5	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^class NEGaussian5x5 : public IFunction$/;"	c	namespace:arm_compute
NEGaussian5x5	src/runtime/NEON/functions/NEGaussian5x5.cpp	/^NEGaussian5x5::NEGaussian5x5(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEGaussian5x5
NEGaussian5x5HorKernel	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^class NEGaussian5x5HorKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGaussian5x5HorKernel	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^NEGaussian5x5HorKernel::NEGaussian5x5HorKernel()$/;"	f	class:NEGaussian5x5HorKernel
NEGaussian5x5VertKernel	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^class NEGaussian5x5VertKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGaussianPyramid	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^class NEGaussianPyramid : public IFunction$/;"	c	namespace:arm_compute
NEGaussianPyramid	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^NEGaussianPyramid::NEGaussianPyramid()$/;"	f	class:NEGaussianPyramid
NEGaussianPyramidHalf	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^class NEGaussianPyramidHalf : public NEGaussianPyramid$/;"	c	namespace:arm_compute
NEGaussianPyramidHalf	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^NEGaussianPyramidHalf::NEGaussianPyramidHalf() \/\/ NOLINT$/;"	f	class:NEGaussianPyramidHalf
NEGaussianPyramidHorKernel	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^class NEGaussianPyramidHorKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGaussianPyramidHorKernel	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^NEGaussianPyramidHorKernel::NEGaussianPyramidHorKernel()$/;"	f	class:NEGaussianPyramidHorKernel
NEGaussianPyramidOrb	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^class NEGaussianPyramidOrb : public NEGaussianPyramid$/;"	c	namespace:arm_compute
NEGaussianPyramidOrb	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^NEGaussianPyramidOrb::NEGaussianPyramidOrb() \/\/ NOLINT$/;"	f	class:NEGaussianPyramidOrb
NEGaussianPyramidVertKernel	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^class NEGaussianPyramidVertKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEGaussianPyramidVertKernel	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^NEGaussianPyramidVertKernel::NEGaussianPyramidVertKernel()$/;"	f	class:NEGaussianPyramidVertKernel
NEGradientFP16Kernel	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^class NEGradientFP16Kernel : public NEGradientKernel$/;"	c	namespace:arm_compute
NEGradientKernel	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^class NEGradientKernel : public INEKernel$/;"	c	namespace:arm_compute
NEGradientKernel	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^NEGradientKernel::NEGradientKernel()$/;"	f	class:NEGradientKernel
NEHOGBlockNormalizationKernel	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^class NEHOGBlockNormalizationKernel : public INEKernel$/;"	c	namespace:arm_compute
NEHOGBlockNormalizationKernel	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^NEHOGBlockNormalizationKernel::NEHOGBlockNormalizationKernel()$/;"	f	class:NEHOGBlockNormalizationKernel
NEHOGDescriptor	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^class NEHOGDescriptor : public IFunction$/;"	c	namespace:arm_compute
NEHOGDescriptor	src/runtime/NEON/functions/NEHOGDescriptor.cpp	/^NEHOGDescriptor::NEHOGDescriptor(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEHOGDescriptor
NEHOGDetector	arm_compute/runtime/NEON/functions/NEHOGDetector.h	/^class NEHOGDetector : public INESimpleFunction$/;"	c	namespace:arm_compute
NEHOGDetectorKernel	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^class NEHOGDetectorKernel : public INEKernel$/;"	c	namespace:arm_compute
NEHOGDetectorKernel	src/core/NEON/kernels/NEHOGDetectorKernel.cpp	/^NEHOGDetectorKernel::NEHOGDetectorKernel()$/;"	f	class:NEHOGDetectorKernel
NEHOGGradient	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^class NEHOGGradient : public IFunction$/;"	c	namespace:arm_compute
NEHOGGradient	src/runtime/NEON/functions/NEHOGGradient.cpp	/^NEHOGGradient::NEHOGGradient(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:NEHOGGradient
NEHOGMultiDetection	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^class NEHOGMultiDetection : public IFunction$/;"	c	namespace:arm_compute
NEHOGMultiDetection	src/runtime/NEON/functions/NEHOGMultiDetection.cpp	/^NEHOGMultiDetection::NEHOGMultiDetection(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:NEHOGMultiDetection
NEHOGOrientationBinningKernel	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^class NEHOGOrientationBinningKernel : public INEKernel$/;"	c	namespace:arm_compute
NEHOGOrientationBinningKernel	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^NEHOGOrientationBinningKernel::NEHOGOrientationBinningKernel()$/;"	f	class:NEHOGOrientationBinningKernel
NEHarrisCorners	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^class NEHarrisCorners : public IFunction$/;"	c	namespace:arm_compute
NEHarrisCorners	src/runtime/NEON/functions/NEHarrisCorners.cpp	/^NEHarrisCorners::NEHarrisCorners(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:NEHarrisCorners
NEHarrisScoreFP16Kernel	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^class NEHarrisScoreFP16Kernel : public INEHarrisScoreKernel$/;"	c	namespace:arm_compute
NEHarrisScoreFP16Kernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^NEHarrisScoreFP16Kernel<block_size>::NEHarrisScoreFP16Kernel()$/;"	f	class:NEHarrisScoreFP16Kernel
NEHarrisScoreFP16Kernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^template class arm_compute::NEHarrisScoreFP16Kernel<3>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEHarrisScoreFP16Kernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^template class arm_compute::NEHarrisScoreFP16Kernel<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEHarrisScoreFP16Kernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^template class arm_compute::NEHarrisScoreFP16Kernel<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEHarrisScoreKernel	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^class NEHarrisScoreKernel : public INEHarrisScoreKernel$/;"	c	namespace:arm_compute
NEHarrisScoreKernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^NEHarrisScoreKernel<block_size>::NEHarrisScoreKernel()$/;"	f	class:NEHarrisScoreKernel
NEHarrisScoreKernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^template class arm_compute::NEHarrisScoreKernel<3>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEHarrisScoreKernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^template class arm_compute::NEHarrisScoreKernel<5>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEHarrisScoreKernel	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^template class arm_compute::NEHarrisScoreKernel<7>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEHistogram	arm_compute/runtime/NEON/functions/NEHistogram.h	/^class NEHistogram : public IFunction$/;"	c	namespace:arm_compute
NEHistogram	src/runtime/NEON/functions/NEHistogram.cpp	/^NEHistogram::NEHistogram()$/;"	f	class:NEHistogram
NEHistogramKernel	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^class NEHistogramKernel : public INEKernel$/;"	c	namespace:arm_compute
NEHistogramKernel	src/core/NEON/kernels/NEHistogramKernel.cpp	/^NEHistogramKernel::NEHistogramKernel()$/;"	f	class:NEHistogramKernel
NEIm2Col	arm_compute/runtime/NEON/functions/NEIm2Col.h	/^class NEIm2Col : public IFunction$/;"	c	namespace:arm_compute
NEIm2Col	src/runtime/NEON/functions/NEIm2Col.cpp	/^NEIm2Col::NEIm2Col()$/;"	f	class:NEIm2Col
NEIm2ColKernel	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^class NEIm2ColKernel : public INEKernel$/;"	c	namespace:arm_compute
NEIm2ColKernel	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^NEIm2ColKernel::NEIm2ColKernel()$/;"	f	class:NEIm2ColKernel
NEIntegralImage	arm_compute/runtime/NEON/functions/NEIntegralImage.h	/^class NEIntegralImage : public INESimpleFunction$/;"	c	namespace:arm_compute
NEIntegralImageKernel	arm_compute/core/NEON/kernels/NEIntegralImageKernel.h	/^class NEIntegralImageKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEL2NormalizeLayer	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^class NEL2NormalizeLayer : public IFunction$/;"	c	namespace:arm_compute
NEL2NormalizeLayer	src/runtime/NEON/functions/NEL2NormalizeLayer.cpp	/^NEL2NormalizeLayer::NEL2NormalizeLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NEL2NormalizeLayer
NEL2NormalizeLayerKernel	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^class NEL2NormalizeLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEL2NormalizeLayerKernel	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^NEL2NormalizeLayerKernel::NEL2NormalizeLayerKernel()$/;"	f	class:NEL2NormalizeLayerKernel
NELKInternalKeypoint	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^struct NELKInternalKeypoint$/;"	s	namespace:arm_compute
NELKTrackerKernel	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^class NELKTrackerKernel : public INEKernel$/;"	c	namespace:arm_compute
NELKTrackerKernel	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^NELKTrackerKernel::NELKTrackerKernel()$/;"	f	class:NELKTrackerKernel
NELaplacianPyramid	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^class NELaplacianPyramid : public IFunction$/;"	c	namespace:arm_compute
NELaplacianPyramid	src/runtime/NEON/functions/NELaplacianPyramid.cpp	/^NELaplacianPyramid::NELaplacianPyramid() \/\/ NOLINT$/;"	f	class:NELaplacianPyramid
NELaplacianReconstruct	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^class NELaplacianReconstruct : public IFunction$/;"	c	namespace:arm_compute
NELaplacianReconstruct	src/runtime/NEON/functions/NELaplacianReconstruct.cpp	/^NELaplacianReconstruct::NELaplacianReconstruct() \/\/ NOLINT$/;"	f	class:NELaplacianReconstruct
NELocallyConnectedLayer	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^class NELocallyConnectedLayer : public IFunction$/;"	c	namespace:arm_compute
NELocallyConnectedLayer	src/runtime/NEON/functions/NELocallyConnectedLayer.cpp	/^NELocallyConnectedLayer::NELocallyConnectedLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NELocallyConnectedLayer
NELocallyConnectedMatrixMultiplyKernel	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	/^class NELocallyConnectedMatrixMultiplyKernel : public INEKernel$/;"	c	namespace:arm_compute
NELocallyConnectedMatrixMultiplyKernel	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^NELocallyConnectedMatrixMultiplyKernel::NELocallyConnectedMatrixMultiplyKernel()$/;"	f	class:NELocallyConnectedMatrixMultiplyKernel
NELogits1DMaxKernel	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^class NELogits1DMaxKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NELogits1DMaxKernel	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^NELogits1DMaxKernel::NELogits1DMaxKernel()$/;"	f	class:arm_compute::NELogits1DMaxKernel
NELogits1DSoftmaxKernel	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^class NELogits1DSoftmaxKernel : public INEKernel$/;"	c	namespace:arm_compute
NELogits1DSoftmaxKernel	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^NELogits1DSoftmaxKernel::NELogits1DSoftmaxKernel()$/;"	f	class:arm_compute::NELogits1DSoftmaxKernel
NEMagnitude	arm_compute/runtime/NEON/functions/NEMagnitude.h	/^class NEMagnitude : public INESimpleFunction$/;"	c	namespace:arm_compute
NEMagnitudePhaseFP16Kernel	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^class NEMagnitudePhaseFP16Kernel : public INEKernel$/;"	c	namespace:arm_compute
NEMagnitudePhaseFP16Kernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^NEMagnitudePhaseFP16Kernel<mag_type, phase_type>::NEMagnitudePhaseFP16Kernel()$/;"	f	class:NEMagnitudePhaseFP16Kernel
NEMagnitudePhaseFP16Kernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseFP16Kernel<MagnitudeType::L1NORM, PhaseType::SIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseFP16Kernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseFP16Kernel<MagnitudeType::L1NORM, PhaseType::UNSIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseFP16Kernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseFP16Kernel<MagnitudeType::L2NORM, PhaseType::SIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseFP16Kernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseFP16Kernel<MagnitudeType::L2NORM, PhaseType::UNSIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseKernel	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^class NEMagnitudePhaseKernel : public INEKernel$/;"	c	namespace:arm_compute
NEMagnitudePhaseKernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^NEMagnitudePhaseKernel<mag_type, phase_type>::NEMagnitudePhaseKernel()$/;"	f	class:NEMagnitudePhaseKernel
NEMagnitudePhaseKernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseKernel<MagnitudeType::L1NORM, PhaseType::SIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseKernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseKernel<MagnitudeType::L1NORM, PhaseType::UNSIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseKernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseKernel<MagnitudeType::L2NORM, PhaseType::SIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMagnitudePhaseKernel	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^template class arm_compute::NEMagnitudePhaseKernel<MagnitudeType::L2NORM, PhaseType::UNSIGNED>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEMeanStdDev	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^class NEMeanStdDev : public IFunction$/;"	c	namespace:arm_compute
NEMeanStdDev	src/runtime/NEON/functions/NEMeanStdDev.cpp	/^NEMeanStdDev::NEMeanStdDev()$/;"	f	class:NEMeanStdDev
NEMeanStdDevKernel	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^class NEMeanStdDevKernel : public INEKernel$/;"	c	namespace:arm_compute
NEMeanStdDevKernel	src/core/NEON/kernels/NEMeanStdDevKernel.cpp	/^NEMeanStdDevKernel::NEMeanStdDevKernel()$/;"	f	class:NEMeanStdDevKernel
NEMedian3x3	arm_compute/runtime/NEON/functions/NEMedian3x3.h	/^class NEMedian3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NEMedian3x3Kernel	arm_compute/core/NEON/kernels/NEMedian3x3Kernel.h	/^class NEMedian3x3Kernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEMinMaxKernel	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^class NEMinMaxKernel : public INEKernel$/;"	c	namespace:arm_compute
NEMinMaxKernel	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^NEMinMaxKernel::NEMinMaxKernel()$/;"	f	class:arm_compute::NEMinMaxKernel
NEMinMaxLayerKernel	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	/^class NEMinMaxLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEMinMaxLayerKernel	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^NEMinMaxLayerKernel::NEMinMaxLayerKernel()$/;"	f	class:arm_compute::NEMinMaxLayerKernel
NEMinMaxLocation	arm_compute/runtime/NEON/functions/NEMinMaxLocation.h	/^class NEMinMaxLocation : public IFunction$/;"	c	namespace:arm_compute
NEMinMaxLocation	src/runtime/NEON/functions/NEMinMaxLocation.cpp	/^NEMinMaxLocation::NEMinMaxLocation()$/;"	f	class:NEMinMaxLocation
NEMinMaxLocationKernel	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^class NEMinMaxLocationKernel : public INEKernel$/;"	c	namespace:arm_compute
NEMinMaxLocationKernel	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^NEMinMaxLocationKernel::NEMinMaxLocationKernel()$/;"	f	class:arm_compute::NEMinMaxLocationKernel
NENonLinearFilter	arm_compute/runtime/NEON/functions/NENonLinearFilter.h	/^class NENonLinearFilter : public INESimpleFunction$/;"	c	namespace:arm_compute
NENonLinearFilterKernel	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^class NENonLinearFilterKernel : public INEKernel$/;"	c	namespace:arm_compute
NENonLinearFilterKernel	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^NENonLinearFilterKernel::NENonLinearFilterKernel()$/;"	f	class:arm_compute::NENonLinearFilterKernel
NENonMaximaSuppression3x3	arm_compute/runtime/NEON/functions/NENonMaximaSuppression3x3.h	/^class NENonMaximaSuppression3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NENonMaximaSuppression3x3FP16Kernel	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^class NENonMaximaSuppression3x3FP16Kernel : public NENonMaximaSuppression3x3Kernel$/;"	c	namespace:arm_compute
NENonMaximaSuppression3x3Kernel	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^class NENonMaximaSuppression3x3Kernel : public INEKernel$/;"	c	namespace:arm_compute
NENonMaximaSuppression3x3Kernel	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^NENonMaximaSuppression3x3Kernel::NENonMaximaSuppression3x3Kernel()$/;"	f	class:NENonMaximaSuppression3x3Kernel
NENormalizationLayer	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^class NENormalizationLayer : public IFunction$/;"	c	namespace:arm_compute
NENormalizationLayer	src/runtime/NEON/functions/NENormalizationLayer.cpp	/^NENormalizationLayer::NENormalizationLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NENormalizationLayer
NENormalizationLayerKernel	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^class NENormalizationLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NENormalizationLayerKernel	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^NENormalizationLayerKernel::NENormalizationLayerKernel()$/;"	f	class:NENormalizationLayerKernel
NEON	arm_compute/graph/Types.h	/^    NEON,        \/**< NEON capable target device *\/$/;"	m	class:arm_compute::graph::Target
NEONCLScaleMedianGaussianExample	examples/neoncl_scale_median_gaussian.cpp	/^class NEONCLScaleMedianGaussianExample : public Example$/;"	c	file:
NEONCNNExample	examples/neon_cnn.cpp	/^class NEONCNNExample : public Example$/;"	c	file:
NEONCartoonEffectExample	examples/neon_cartoon_effect.cpp	/^class NEONCartoonEffectExample : public Example$/;"	c	file:
NEONConvolutionExample	examples/neon_convolution.cpp	/^class NEONConvolutionExample : public Example$/;"	c	file:
NEONCopyObjectsExample	examples/neon_copy_objects.cpp	/^class NEONCopyObjectsExample : public Example$/;"	c	file:
NEONScaleExample	examples/neon_scale.cpp	/^class NEONScaleExample : public Example$/;"	c	file:
NEOpticalFlow	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^class NEOpticalFlow : public IFunction$/;"	c	namespace:arm_compute
NEOpticalFlow	src/runtime/NEON/functions/NEOpticalFlow.cpp	/^NEOpticalFlow::NEOpticalFlow(std::shared_ptr<IMemoryManager> memory_manager) \/\/ NOLINT$/;"	f	class:NEOpticalFlow
NEPermute	arm_compute/runtime/NEON/functions/NEPermute.h	/^class NEPermute : public INESimpleFunction$/;"	c	namespace:arm_compute
NEPermuteKernel	arm_compute/core/NEON/kernels/NEPermuteKernel.h	/^class NEPermuteKernel : public INEKernel$/;"	c	namespace:arm_compute
NEPermuteKernel	src/core/NEON/kernels/NEPermuteKernel.cpp	/^NEPermuteKernel::NEPermuteKernel()$/;"	f	class:NEPermuteKernel
NEPhase	arm_compute/runtime/NEON/functions/NEPhase.h	/^class NEPhase : public INESimpleFunction$/;"	c	namespace:arm_compute
NEPixelWiseMultiplication	arm_compute/runtime/NEON/functions/NEPixelWiseMultiplication.h	/^class NEPixelWiseMultiplication : public INESimpleFunction$/;"	c	namespace:arm_compute
NEPixelWiseMultiplicationKernel	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^class NEPixelWiseMultiplicationKernel : public INEKernel$/;"	c	namespace:arm_compute
NEPixelWiseMultiplicationKernel	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^NEPixelWiseMultiplicationKernel::NEPixelWiseMultiplicationKernel()$/;"	f	class:NEPixelWiseMultiplicationKernel
NEPoolingLayer	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^class NEPoolingLayer : public IFunction$/;"	c	namespace:arm_compute
NEPoolingLayer	src/runtime/NEON/functions/NEPoolingLayer.cpp	/^NEPoolingLayer::NEPoolingLayer()$/;"	f	class:NEPoolingLayer
NEPoolingLayerKernel	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^class NEPoolingLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEPoolingLayerKernel	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^NEPoolingLayerKernel::NEPoolingLayerKernel()$/;"	f	class:NEPoolingLayerKernel
NEQuantizationLayer	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	/^class NEQuantizationLayer : public IFunction$/;"	c	namespace:arm_compute
NEQuantizationLayer	src/runtime/NEON/functions/NEQuantizationLayer.cpp	/^NEQuantizationLayer::NEQuantizationLayer()$/;"	f	class:NEQuantizationLayer
NEQuantizationLayerKernel	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	/^class NEQuantizationLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEQuantizationLayerKernel	src/core/NEON/kernels/NEQuantizationLayerKernel.cpp	/^NEQuantizationLayerKernel::NEQuantizationLayerKernel()$/;"	f	class:NEQuantizationLayerKernel
NEROIPoolingLayer	arm_compute/runtime/NEON/functions/NEROIPoolingLayer.h	/^class NEROIPoolingLayer : public IFunction$/;"	c	namespace:arm_compute
NEROIPoolingLayer	src/runtime/NEON/functions/NEROIPoolingLayer.cpp	/^NEROIPoolingLayer::NEROIPoolingLayer()$/;"	f	class:NEROIPoolingLayer
NEROIPoolingLayerKernel	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^class NEROIPoolingLayerKernel : public INEKernel$/;"	c	namespace:arm_compute
NEROIPoolingLayerKernel	src/core/NEON/kernels/NEROIPoolingLayerKernel.cpp	/^NEROIPoolingLayerKernel::NEROIPoolingLayerKernel()$/;"	f	class:NEROIPoolingLayerKernel
NEReductionOperation	arm_compute/runtime/NEON/functions/NEReductionOperation.h	/^class NEReductionOperation : public IFunction$/;"	c	namespace:arm_compute
NEReductionOperation	src/runtime/NEON/functions/NEReductionOperation.cpp	/^NEReductionOperation::NEReductionOperation()$/;"	f	class:NEReductionOperation
NEReductionOperationKernel	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^class NEReductionOperationKernel : public INEKernel$/;"	c	namespace:arm_compute
NEReductionOperationKernel	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^NEReductionOperationKernel::NEReductionOperationKernel()$/;"	f	class:NEReductionOperationKernel
NERemap	arm_compute/runtime/NEON/functions/NERemap.h	/^class NERemap : public INESimpleFunction$/;"	c	namespace:arm_compute
NERemapKernel	arm_compute/core/NEON/kernels/NERemapKernel.h	/^class NERemapKernel : public INEKernel$/;"	c	namespace:arm_compute
NERemapKernel	src/core/NEON/kernels/NERemapKernel.cpp	/^NERemapKernel::NERemapKernel()$/;"	f	class:NERemapKernel
NEReshapeLayer	arm_compute/runtime/NEON/functions/NEReshapeLayer.h	/^class NEReshapeLayer : public INESimpleFunction$/;"	c	namespace:arm_compute
NEReshapeLayerKernel	arm_compute/core/NEON/kernels/NEReshapeLayerKernel.h	/^class NEReshapeLayerKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NEScale	arm_compute/runtime/NEON/functions/NEScale.h	/^class NEScale : public IFunction$/;"	c	namespace:arm_compute
NEScale	src/runtime/NEON/functions/NEScale.cpp	/^NEScale::NEScale() \/\/ NOLINT$/;"	f	class:NEScale
NEScaleKernel	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^class NEScaleKernel : public INEKernel$/;"	c	namespace:arm_compute
NEScaleKernel	src/core/NEON/kernels/NEScaleKernel.cpp	/^NEScaleKernel::NEScaleKernel()$/;"	f	class:arm_compute::NEScaleKernel
NEScharr3x3	arm_compute/runtime/NEON/functions/NEScharr3x3.h	/^class NEScharr3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NEScharr3x3Kernel	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^class NEScharr3x3Kernel : public INEKernel$/;"	c	namespace:arm_compute
NEScharr3x3Kernel	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^NEScharr3x3Kernel::NEScharr3x3Kernel()$/;"	f	class:NEScharr3x3Kernel
NESeparableConvolutionHorKernel	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^class NESeparableConvolutionHorKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NESeparableConvolutionHorKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^NESeparableConvolutionHorKernel<matrix_size>::NESeparableConvolutionHorKernel()$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
NESeparableConvolutionHorKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NESeparableConvolutionHorKernel<5>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NESeparableConvolutionHorKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NESeparableConvolutionHorKernel<7>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NESeparableConvolutionHorKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NESeparableConvolutionHorKernel<9>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NESeparableConvolutionVertKernel	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^class NESeparableConvolutionVertKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NESeparableConvolutionVertKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^NESeparableConvolutionVertKernel<matrix_size>::NESeparableConvolutionVertKernel()$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
NESeparableConvolutionVertKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NESeparableConvolutionVertKernel<5>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NESeparableConvolutionVertKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NESeparableConvolutionVertKernel<7>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NESeparableConvolutionVertKernel	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^template class arm_compute::NESeparableConvolutionVertKernel<9>;$/;"	m	class:arm_compute::arm_compute	typeref:class:arm_compute::arm_compute::	file:
NESobel3x3	arm_compute/runtime/NEON/functions/NESobel3x3.h	/^class NESobel3x3 : public INESimpleFunction$/;"	c	namespace:arm_compute
NESobel3x3Kernel	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^class NESobel3x3Kernel : public INEKernel$/;"	c	namespace:arm_compute
NESobel3x3Kernel	src/core/NEON/kernels/NESobel3x3Kernel.cpp	/^NESobel3x3Kernel::NESobel3x3Kernel()$/;"	f	class:NESobel3x3Kernel
NESobel5x5	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^class NESobel5x5 : public IFunction$/;"	c	namespace:arm_compute
NESobel5x5	src/runtime/NEON/functions/NESobel5x5.cpp	/^NESobel5x5::NESobel5x5(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NESobel5x5
NESobel5x5HorKernel	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^class NESobel5x5HorKernel : public INEKernel$/;"	c	namespace:arm_compute
NESobel5x5HorKernel	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^NESobel5x5HorKernel::NESobel5x5HorKernel()$/;"	f	class:NESobel5x5HorKernel
NESobel5x5VertKernel	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^class NESobel5x5VertKernel : public INEKernel$/;"	c	namespace:arm_compute
NESobel5x5VertKernel	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^NESobel5x5VertKernel::NESobel5x5VertKernel()$/;"	f	class:NESobel5x5VertKernel
NESobel7x7	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^class NESobel7x7 : public IFunction$/;"	c	namespace:arm_compute
NESobel7x7	src/runtime/NEON/functions/NESobel7x7.cpp	/^NESobel7x7::NESobel7x7(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NESobel7x7
NESobel7x7HorKernel	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^class NESobel7x7HorKernel : public INEKernel$/;"	c	namespace:arm_compute
NESobel7x7HorKernel	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^NESobel7x7HorKernel::NESobel7x7HorKernel()$/;"	f	class:NESobel7x7HorKernel
NESobel7x7VertKernel	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^class NESobel7x7VertKernel : public INEKernel$/;"	c	namespace:arm_compute
NESobel7x7VertKernel	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^NESobel7x7VertKernel::NESobel7x7VertKernel()$/;"	f	class:NESobel7x7VertKernel
NESoftmaxLayer	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^class NESoftmaxLayer : public IFunction$/;"	c	namespace:arm_compute
NESoftmaxLayer	src/runtime/NEON/functions/NESoftmaxLayer.cpp	/^NESoftmaxLayer::NESoftmaxLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:NESoftmaxLayer
NESubTensorHandle	src/graph/backends/NEON/NESubTensorHandle.cpp	/^NESubTensorHandle::NESubTensorHandle(ITensorHandle *parent_handle, const TensorShape &shape, const Coordinates &coords, bool extend_parent)$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
NESynthetizeFunction	tests/NEON/Helper.h	/^class NESynthetizeFunction : public INESimpleFunction$/;"	c	namespace:arm_compute::test
NESynthetizeFunctionWithZeroConstantBorder	tests/NEON/Helper.h	/^class NESynthetizeFunctionWithZeroConstantBorder : public INESimpleFunction$/;"	c	namespace:arm_compute::test
NETableLookup	arm_compute/runtime/NEON/functions/NETableLookup.h	/^class NETableLookup : public INESimpleFunction$/;"	c	namespace:arm_compute
NETableLookupKernel	arm_compute/core/NEON/kernels/NETableLookupKernel.h	/^class NETableLookupKernel : public INESimpleKernel$/;"	c	namespace:arm_compute
NETableLookupKernel	src/core/NEON/kernels/NETableLookupKernel.cpp	/^NETableLookupKernel::NETableLookupKernel()$/;"	f	class:NETableLookupKernel
NETensorHandle	src/graph/backends/NEON/NETensorHandle.cpp	/^NETensorHandle::NETensorHandle(const ITensorInfo &info)$/;"	f	class:arm_compute::graph::backends::NETensorHandle
NEThreshold	arm_compute/runtime/NEON/functions/NEThreshold.h	/^class NEThreshold : public INESimpleFunction$/;"	c	namespace:arm_compute
NEThresholdKernel	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^class NEThresholdKernel : public INEKernel$/;"	c	namespace:arm_compute
NEThresholdKernel	src/core/NEON/kernels/NEThresholdKernel.cpp	/^NEThresholdKernel::NEThresholdKernel()$/;"	f	class:NEThresholdKernel
NETranspose	arm_compute/runtime/NEON/functions/NETranspose.h	/^class NETranspose : public INESimpleFunction$/;"	c	namespace:arm_compute
NETransposeKernel	arm_compute/core/NEON/kernels/NETransposeKernel.h	/^class NETransposeKernel : public INEKernel$/;"	c	namespace:arm_compute
NETransposeKernel	src/core/NEON/kernels/NETransposeKernel.cpp	/^NETransposeKernel::NETransposeKernel()$/;"	f	class:NETransposeKernel
NEWarpAffine	arm_compute/runtime/NEON/functions/NEWarpAffine.h	/^class NEWarpAffine : public INESimpleFunction$/;"	c	namespace:arm_compute
NEWarpAffineKernel	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^class NEWarpAffineKernel : public INEWarpKernel$/;"	c	namespace:arm_compute
NEWarpAffineKernel	src/core/NEON/kernels/NEWarpKernel.cpp	/^template class arm_compute::NEWarpAffineKernel<InterpolationPolicy::BILINEAR>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEWarpAffineKernel	src/core/NEON/kernels/NEWarpKernel.cpp	/^template class arm_compute::NEWarpAffineKernel<InterpolationPolicy::NEAREST_NEIGHBOR>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEWarpPerspective	arm_compute/runtime/NEON/functions/NEWarpPerspective.h	/^class NEWarpPerspective : public INESimpleFunction$/;"	c	namespace:arm_compute
NEWarpPerspectiveKernel	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^class NEWarpPerspectiveKernel : public INEWarpKernel$/;"	c	namespace:arm_compute
NEWarpPerspectiveKernel	src/core/NEON/kernels/NEWarpKernel.cpp	/^template class arm_compute::NEWarpPerspectiveKernel<InterpolationPolicy::BILINEAR>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEWarpPerspectiveKernel	src/core/NEON/kernels/NEWarpKernel.cpp	/^template class arm_compute::NEWarpPerspectiveKernel<InterpolationPolicy::NEAREST_NEIGHBOR>;$/;"	m	class:arm_compute	typeref:class:arm_compute::	file:
NEWeightsReshapeKernel	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	/^class NEWeightsReshapeKernel : public INEKernel$/;"	c	namespace:arm_compute
NEWeightsReshapeKernel	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^NEWeightsReshapeKernel::NEWeightsReshapeKernel()$/;"	f	class:NEWeightsReshapeKernel
NEWinogradConvolutionLayer	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^class NEWinogradConvolutionLayer : public IFunction$/;"	c	namespace:arm_compute
NEWinogradConvolutionLayer	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^NEWinogradConvolutionLayer::NEWinogradConvolutionLayer(std::shared_ptr<IMemoryManager> memory_manager)$/;"	f	class:arm_compute::NEWinogradConvolutionLayer
NEWinogradLayerBatchedGEMMKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class NEWinogradLayerBatchedGEMMKernel : public INEWinogradLayerBatchedGEMMKernel<TIn, TOut>$/;"	c	namespace:arm_compute
NEWinogradLayerBatchedGEMMKernel	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::NEWinogradLayerBatchedGEMMKernel()$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
NEWinogradLayerTransformInputKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class NEWinogradLayerTransformInputKernel : public INEWinogradLayerTransformInputKernel<T>$/;"	c	namespace:arm_compute
NEWinogradLayerTransformInputKernel	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^NEWinogradLayerTransformInputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::NEWinogradLayerTransformInputKernel()$/;"	f	class:arm_compute::NEWinogradLayerTransformInputKernel
NEWinogradLayerTransformOutputKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class NEWinogradLayerTransformOutputKernel : public INEWinogradLayerTransformOutputKernel<T>$/;"	c	namespace:arm_compute
NEWinogradLayerTransformOutputKernel	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::NEWinogradLayerTransformOutputKernel()$/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
NEWinogradLayerTransformWeightsKernel	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::NEWinogradLayerTransformWeightsKernel()$/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
NHWC	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  NHWC,  \/\/\/< [Batch x Height x Width x Channels]$/;"	e	enum:TensorOrder
NIGHTLY	tests/framework/DatasetModes.h	/^    NIGHTLY   = 2$/;"	m	class:arm_compute::test::framework::DatasetMode
NONE	tests/framework/Exceptions.h	/^    NONE,$/;"	m	class:arm_compute::test::framework::LogLevel
NONE	tests/framework/instruments/Instrument.h	/^    NONE,     \/* Default scale *\/$/;"	m	class:arm_compute::test::framework::ScaleFactor
NONE	tests/framework/instruments/Instruments.h	/^    NONE                    = 0,$/;"	m	class:arm_compute::test::framework::InstrumentType
NONE	tests/framework/printers/Printers.h	/^    NONE,$/;"	m	class:arm_compute::test::framework::LogFormat
NOT_RUN	tests/framework/TestResult.h	/^        NOT_RUN,$/;"	m	class:arm_compute::test::framework::TestResult::Status
NO_EDGE	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^constexpr int NO_EDGE = 0;$/;"	m	namespace:__anon248	file:
NPYLoader	utils/Utils.h	/^    NPYLoader()$/;"	f	class:arm_compute::utils::NPYLoader
NPYLoader	utils/Utils.h	/^class NPYLoader$/;"	c	namespace:arm_compute::utils
NPY_H	include/libnpy/npy.hpp	24;"	d
NUM_ITER	examples_mod/graph_googlenet.cpp	36;"	d	file:
NUM_PRODUCTS	tests/framework/instruments/hwc_names.hpp	/^    NUM_PRODUCTS = sizeof(products) \/ sizeof(products[0])$/;"	e	enum:mali_userspace::__anon396
NV12	arm_compute/core/Types.h	/^    NV12,     \/**< A 2 plane YUV format of Luma (Y) and interleaved UV data at 4:2:0 sampling *\/$/;"	m	class:arm_compute::Format
NV21	arm_compute/core/Types.h	/^    NV21,     \/**< A 2 plane YUV format of Luma (Y) and interleaved VU data at 4:2:0 sampling *\/$/;"	m	class:arm_compute::Format
N_BLOCK	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static constexpr int N_BLOCK = 16;  \/** Size of block used by GEMM. *\/$/;"	m	class:winograd::WinogradGEMM::Convolution
N_GEMMS	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int N_GEMMS = inner_tile_rows * inner_tile_cols;$/;"	m	class:winograd::WinogradGEMM
NamedDataset	tests/framework/datasets/Dataset.h	/^    explicit NamedDataset(std::string name)$/;"	f	class:arm_compute::test::framework::dataset::NamedDataset
NamedDataset	tests/framework/datasets/Dataset.h	/^class NamedDataset : public Dataset$/;"	c	namespace:arm_compute::test::framework::dataset
NativeDisplayType	include/linux/EGL/eglplatform.h	/^typedef EGLNativeDisplayType NativeDisplayType;$/;"	t
NativePixmapType	include/linux/EGL/eglplatform.h	/^typedef EGLNativePixmapType  NativePixmapType;$/;"	t
NativeWindowType	include/linux/EGL/eglplatform.h	/^typedef EGLNativeWindowType  NativeWindowType;$/;"	t
Nav	documentation/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	documentation/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	documentation/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	documentation/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
NoPadding	arm_compute/core/Types.h	/^        NoPadding,   \/**< Prints the Tensor object without the padding *\/$/;"	m	class:arm_compute::HOGNormType::IOFormatInfo::PrintRegion
NodeIdxPair	arm_compute/graph/Types.h	/^struct NodeIdxPair$/;"	s	namespace:arm_compute::graph
NodeParams	arm_compute/graph/Types.h	/^struct NodeParams$/;"	s	namespace:arm_compute::graph
NodeType	arm_compute/graph/Types.h	/^enum class NodeType$/;"	c	namespace:arm_compute::graph
NonLinearFilterFunction	arm_compute/core/Types.h	/^enum class NonLinearFilterFunction : unsigned$/;"	c	namespace:arm_compute
NonLinearFilterFunctions	tests/datasets/NonLinearFilterFunctionDataset.h	/^    NonLinearFilterFunctions()$/;"	f	class:arm_compute::test::datasets::final
NonLinearFilterValidationFixture	tests/validation/fixtures/NonLinearFilterFixture.h	/^class NonLinearFilterValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
None	include/CL/cl2.hpp	/^    None = 0,$/;"	m	class:cl::DeviceQueueProperties
None	include/CL/cl2.hpp	/^    None = 0,$/;"	m	class:cl::QueueProperties
NormType	arm_compute/core/Types.h	/^enum class NormType$/;"	c	namespace:arm_compute
NormalizationDataset	tests/validation/CL/NormalizationLayer.cpp	/^const auto NormalizationDataset = combine(combine(combine(combine(datasets::SmallShapes(), datasets::NormalizationTypes()),$/;"	m	namespace:arm_compute::test::validation::__anon436	file:
NormalizationDataset	tests/validation/GLES_COMPUTE/NormalizationLayer.cpp	/^const auto NormalizationDataset = combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("NormType", { NormType::IN_MAP_1D, NormType::CROSS_MAP })),$/;"	m	namespace:arm_compute::test::validation::__anon464	file:
NormalizationDataset	tests/validation/NEON/NormalizationLayer.cpp	/^const auto NormalizationDataset = combine(combine(combine(combine(datasets::SmallShapes(), datasets::NormalizationTypes()), framework::dataset::make("NormalizationSize", 3, 9, 2)),$/;"	m	namespace:arm_compute::test::validation::__anon512	file:
NormalizationDatasetFP16	tests/validation/CL/NormalizationLayer.cpp	/^const auto NormalizationDatasetFP16 = combine(combine(combine(combine(datasets::SmallShapes(), framework::dataset::make("NormType", { NormType::IN_MAP_1D, NormType::CROSS_MAP })),$/;"	m	namespace:arm_compute::test::validation::__anon436	file:
NormalizationDatasetFP32	tests/validation/CL/NormalizationLayer.cpp	/^const auto NormalizationDatasetFP32 = combine(combine(combine(combine(datasets::SmallShapes(), datasets::NormalizationTypes()),$/;"	m	namespace:arm_compute::test::validation::__anon436	file:
NormalizationDatasetFP32	tests/validation/NEON/NormalizationLayer.cpp	/^const auto NormalizationDatasetFP32 = combine(combine(combine(combine(datasets::SmallShapes(), datasets::NormalizationTypes()), framework::dataset::make("NormalizationSize", 3, 9, 2)),$/;"	m	namespace:arm_compute::test::validation::__anon512	file:
NormalizationDatasetQS	tests/validation/CL/NormalizationLayer.cpp	/^const auto NormalizationDatasetQS = combine(combine(combine(combine(datasets::TinyShapes(), datasets::NormalizationTypes()),$/;"	m	namespace:arm_compute::test::validation::__anon436	file:
NormalizationDatasetQS	tests/validation/NEON/NormalizationLayer.cpp	/^const auto NormalizationDatasetQS = combine(combine(combine(combine(datasets::TinyShapes(), datasets::NormalizationTypes()), framework::dataset::make("NormalizationSize", 3, 9, 2)),$/;"	m	namespace:arm_compute::test::validation::__anon512	file:
NormalizationLayer	arm_compute/graph/Types.h	/^    NormalizationLayer,$/;"	m	class:arm_compute::graph::NodeType
NormalizationLayer	arm_compute/graph/frontend/Layers.h	/^    NormalizationLayer(NormalizationLayerInfo norm_info)$/;"	f	class:arm_compute::graph::frontend::final
NormalizationLayerFixture	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^class NormalizationLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
NormalizationLayerInfo	arm_compute/core/Types.h	/^    NormalizationLayerInfo(NormType type, uint32_t norm_size = 5, float alpha = 0.0001f, float beta = 0.5f, float kappa = 1.f, bool is_scaled = true)$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
NormalizationLayerInfo	arm_compute/core/Types.h	/^class NormalizationLayerInfo$/;"	c	class:arm_compute::HOGNormType
NormalizationLayerNode	src/graph/nodes/NormalizationLayerNode.cpp	/^NormalizationLayerNode::NormalizationLayerNode(NormalizationLayerInfo norm_info)$/;"	f	class:arm_compute::graph::NormalizationLayerNode
NormalizationTypes	tests/datasets/NormalizationTypesDataset.h	/^    NormalizationTypes()$/;"	f	class:arm_compute::test::datasets::final
NormalizationValidationFixedPointFixture	tests/validation/fixtures/NormalizationLayerFixture.h	/^class NormalizationValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
NormalizationValidationFixture	tests/validation/fixtures/NormalizationLayerFixture.h	/^class NormalizationValidationFixture : public NormalizationValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
NormalizePlanarYUVLayerDataset	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^class NormalizePlanarYUVLayerDataset$/;"	c	namespace:arm_compute::test::datasets
NormalizePlanarYUVLayerFixture	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^class NormalizePlanarYUVLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test
NormalizePlanarYUVLayerValidationFixedPointFixture	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^class NormalizePlanarYUVLayerValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
NormalizePlanarYUVLayerValidationFixture	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^class NormalizePlanarYUVLayerValidationFixture : public NormalizePlanarYUVLayerValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
NullRange	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^static const NDRange NullRange;$/;"	m	namespace:arm_compute::gles
NullRange	include/CL/cl.hpp	/^static const NDRange NullRange;$/;"	m	namespace:cl
NullRange	include/CL/cl2.hpp	/^static const NDRange NullRange;$/;"	m	namespace:cl
NullType	include/CL/cl.hpp	/^class NullType {};$/;"	c	namespace:cl::detail
NumPyAccessor	utils/GraphUtils.cpp	/^NumPyAccessor::NumPyAccessor(std::string npy_path, TensorShape shape, DataType data_type, std::ostream &output_stream)$/;"	f	class:NumPyAccessor
NumPyBinLoader	utils/GraphUtils.cpp	/^NumPyBinLoader::NumPyBinLoader(std::string filename, DataLayout file_layout)$/;"	f	class:NumPyBinLoader
OIHW	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  OIHW,  \/\/\/< [Output channels x Input channels x Height x Width]$/;"	e	enum:WeightOrder
OK	arm_compute/core/Error.h	/^    OK,           \/**< No error *\/$/;"	m	class:arm_compute::ErrorCode
OMP	arm_compute/runtime/Scheduler.h	/^        OMP,   \/**< OpenMP. *\/$/;"	m	class:arm_compute::Scheduler::Type
OMPScheduler	arm_compute/runtime/OMP/OMPScheduler.h	/^class OMPScheduler : public IScheduler$/;"	c	namespace:arm_compute
OMPScheduler	src/runtime/OMP/OMPScheduler.cpp	/^OMPScheduler::OMPScheduler() \/\/ NOLINT$/;"	f	class:OMPScheduler
OPENCL_MEMORY_USAGE	tests/framework/instruments/Instruments.h	/^    OPENCL_MEMORY_USAGE     = 0x0600,$/;"	m	class:arm_compute::test::framework::InstrumentType
OPENCL_TIMER	tests/framework/instruments/Instruments.h	/^    OPENCL_TIMER            = 0x0400,$/;"	m	class:arm_compute::test::framework::InstrumentType
OPTIMIZED_3x3	arm_compute/graph/Types.h	/^    OPTIMIZED_3x3, \/**< Optimized 3x3 direct depthwise convolution *\/$/;"	m	class:arm_compute::graph::DepthwiseConvolutionMethod
OffsetLifetimeManager	arm_compute/runtime/OffsetLifetimeManager.h	/^class OffsetLifetimeManager : public ISimpleLifetimeManager$/;"	c	namespace:arm_compute
OffsetLifetimeManager	src/runtime/OffsetLifetimeManager.cpp	/^OffsetLifetimeManager::OffsetLifetimeManager()$/;"	f	class:OffsetLifetimeManager
OffsetMemoryPool	arm_compute/runtime/OffsetMemoryPool.h	/^class OffsetMemoryPool : public IMemoryPool$/;"	c	namespace:arm_compute
OffsetMemoryPool	src/runtime/OffsetMemoryPool.cpp	/^OffsetMemoryPool::OffsetMemoryPool(IAllocator *allocator, size_t blob_size)$/;"	f	class:OffsetMemoryPool
OnSearchFieldChange	documentation/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	documentation/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	documentation/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	documentation/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	documentation/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	documentation/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
OpenCLMemoryUsage	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^OpenCLMemoryUsage::OpenCLMemoryUsage(ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
OpenCLMemoryUsage	tests/framework/instruments/OpenCLMemoryUsage.h	/^class OpenCLMemoryUsage : public Instrument$/;"	c	namespace:arm_compute::test::framework
OpenCLTimer	tests/framework/instruments/OpenCLTimer.cpp	/^OpenCLTimer::OpenCLTimer(ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::OpenCLTimer
OpenCLTimer	tests/framework/instruments/OpenCLTimer.h	/^class OpenCLTimer : public Instrument$/;"	c	namespace:arm_compute::test::framework
OpticalFlowDataset	tests/datasets/OpticalFlowDataset.h	/^class OpticalFlowDataset$/;"	c	namespace:arm_compute::test::datasets
OpticalFlowParameters	tests/Types.h	/^    OpticalFlowParameters(Termination termination,$/;"	f	struct:arm_compute::OpticalFlowParameters
OpticalFlowParameters	tests/Types.h	/^struct OpticalFlowParameters$/;"	s	namespace:arm_compute
OpticalFlowValidationFixture	tests/validation/fixtures/OpticalFlowFixture.h	/^class OpticalFlowValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
OptimizedDepthwiseConvolutionLayerDataset3x3	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    OptimizedDepthwiseConvolutionLayerDataset3x3()$/;"	f	class:arm_compute::test::datasets::final
Option	tests/PaddingCalculator.h	/^    enum class Option$/;"	c	class:arm_compute::test::final
Option	tests/framework/command_line/Option.cpp	/^Option::Option(std::string name)$/;"	f	class:arm_compute::test::framework::Option
Option	tests/framework/command_line/Option.cpp	/^Option::Option(std::string name, bool is_required, bool is_set)$/;"	f	class:arm_compute::test::framework::Option
Option	tests/framework/command_line/Option.h	/^class Option$/;"	c	namespace:arm_compute::test::framework
OutOfOrder	include/CL/cl2.hpp	/^    OutOfOrder = CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE,$/;"	m	class:cl::QueueProperties
Output	arm_compute/graph/Types.h	/^    Output,$/;"	m	class:arm_compute::graph::NodeType
OutputLayer	arm_compute/graph/frontend/Layers.h	/^    OutputLayer(ITensorAccessorUPtr accessor)$/;"	f	class:arm_compute::graph::frontend::final
OutputNode	src/graph/nodes/OutputNode.cpp	/^OutputNode::OutputNode()$/;"	f	class:arm_compute::graph::OutputNode
OutputTransform	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  WinogradGEMM<output_tile_rows, output_tile_cols, kr, kc>::OutputTransform<T>::OutputTransform($/;"	f	class:winograd::WinogradGEMM::OutputTransform
OutputTransform	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    struct OutputTransform$/;"	s	class:winograd::WinogradGEMM
OutputTransform	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_3x3_fp32.cpp	/^template struct WinogradGEMM<2, 2, 3, 3>::OutputTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
OutputTransform	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_5x5_fp32.cpp	/^template struct WinogradGEMM<2, 2, 5, 5>::OutputTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
OutputTransform	src/core/NEON/kernels/convolution/winograd/transforms/output_4x4_3x3_fp32.cpp	/^template struct WinogradGEMM<4, 4, 3, 3>::OutputTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
OutputType	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    typedef TOut OutputType;$/;"	t	class:depthwise::DepthwiseConvolution
OutputType	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        typedef TOut OutputType;$/;"	t	class:winograd::WinogradGEMM::Convolution
OverflowPolicy	tests/validation/FixedPoint.h	/^enum class OverflowPolicy$/;"	c	namespace:arm_compute::test::fixed_point_arithmetic
PADDING_SAME	arm_compute/core/NEON/kernels/convolution/common/convolution.hpp	/^  PADDING_SAME, PADDING_VALID$/;"	e	enum:PaddingType
PADDING_VALID	arm_compute/core/NEON/kernels/convolution/common/convolution.hpp	/^  PADDING_SAME, PADDING_VALID$/;"	e	enum:PaddingType
PERMUTATIONS	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^constexpr size_t PERMUTATIONS = 16;$/;"	m	namespace:__anon258	file:
PERM_SIZE	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^constexpr size_t PERM_SIZE    = 16;$/;"	m	namespace:__anon258	file:
PFD	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans/generic.cpp	49;"	d	file:
PFLGLDRAWARRAYSINSTANCEDANGLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFLGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);$/;"	t
PFLGLDRAWELEMENTSINSTANCEDANGLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFLGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);$/;"	t
PFLGLGETTRANSLATEDSHADERSOURCEANGLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFLGLGETTRANSLATEDSHADERSOURCEANGLEPROC) (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source);$/;"	t
PFLGLVERTEXATTRIBDIVISORANGLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFLGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor);$/;"	t
PFNEGLCLIENTWAITSYNCKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLCLIENTWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout);$/;"	t
PFNEGLCLIENTWAITSYNCNVPROC	include/linux/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLCLIENTWAITSYNCNVPROC) (EGLSyncNV sync, EGLint flags, EGLTimeNV timeout);$/;"	t
PFNEGLCREATEDRMIMAGEMESAPROC	include/linux/EGL/eglext.h	/^typedef EGLImageKHR (EGLAPIENTRYP PFNEGLCREATEDRMIMAGEMESAPROC) (EGLDisplay dpy, const EGLint *attrib_list);$/;"	t
PFNEGLCREATEFENCESYNCNVPROC	include/linux/EGL/eglext.h	/^typedef EGLSyncNV (EGLAPIENTRYP PFNEGLCREATEFENCESYNCNVPROC) (EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list);$/;"	t
PFNEGLCREATEIMAGEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLImageKHR (EGLAPIENTRYP PFNEGLCREATEIMAGEKHRPROC) (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list);$/;"	t
PFNEGLCREATEPIXMAPSURFACEHIPROC	include/linux/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPIXMAPSURFACEHIPROC) (EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap);$/;"	t
PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC) (EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list);$/;"	t
PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC) (EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list);$/;"	t
PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLStreamKHR (EGLAPIENTRYP PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC) (EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor);$/;"	t
PFNEGLCREATESTREAMKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLStreamKHR (EGLAPIENTRYP PFNEGLCREATESTREAMKHRPROC) (EGLDisplay dpy, const EGLint *attrib_list);$/;"	t
PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC) (EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list);$/;"	t
PFNEGLCREATESTREAMSYNCNVPROC	include/linux/EGL/eglext.h	/^typedef EGLSyncKHR (EGLAPIENTRYP PFNEGLCREATESTREAMSYNCNVPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list);$/;"	t
PFNEGLCREATESYNC64KHRPROC	include/linux/EGL/eglext.h	/^typedef EGLSyncKHR (EGLAPIENTRYP PFNEGLCREATESYNC64KHRPROC) (EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list);$/;"	t
PFNEGLCREATESYNCKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLSyncKHR (EGLAPIENTRYP PFNEGLCREATESYNCKHRPROC) (EGLDisplay dpy, EGLenum type, const EGLint *attrib_list);$/;"	t
PFNEGLDESTROYIMAGEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYIMAGEKHRPROC) (EGLDisplay dpy, EGLImageKHR image);$/;"	t
PFNEGLDESTROYSTREAMKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSTREAMKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t
PFNEGLDESTROYSYNCKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync);$/;"	t
PFNEGLDESTROYSYNCNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSYNCNVPROC) (EGLSyncNV sync);$/;"	t
PFNEGLDUPNATIVEFENCEFDANDROIDPROC	include/linux/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLDUPNATIVEFENCEFDANDROIDPROC) (EGLDisplay dpy, EGLSyncKHR sync);$/;"	t
PFNEGLEXPORTDRMIMAGEMESAPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLEXPORTDRMIMAGEMESAPROC) (EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride);$/;"	t
PFNEGLFENCENVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLFENCENVPROC) (EGLSyncNV sync);$/;"	t
PFNEGLGETOUTPUTLAYERSEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETOUTPUTLAYERSEXTPROC) (EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers);$/;"	t
PFNEGLGETOUTPUTPORTSEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETOUTPUTPORTSEXTPROC) (EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports);$/;"	t
PFNEGLGETPLATFORMDISPLAYEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYEXTPROC) (EGLenum platform, void *native_display, const EGLint *attrib_list);$/;"	t
PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLNativeFileDescriptorKHR (EGLAPIENTRYP PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t
PFNEGLGETSYNCATTRIBKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETSYNCATTRIBKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value);$/;"	t
PFNEGLGETSYNCATTRIBNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETSYNCATTRIBNVPROC) (EGLSyncNV sync, EGLint attribute, EGLint *value);$/;"	t
PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC	include/linux/EGL/eglext.h	/^typedef EGLuint64NV (EGLAPIENTRYP PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC) (void);$/;"	t
PFNEGLGETSYSTEMTIMENVPROC	include/linux/EGL/eglext.h	/^typedef EGLuint64NV (EGLAPIENTRYP PFNEGLGETSYSTEMTIMENVPROC) (void);$/;"	t
PFNEGLLOCKSURFACEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLLOCKSURFACEKHRPROC) (EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list);$/;"	t
PFNEGLOUTPUTLAYERATTRIBEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLOUTPUTLAYERATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value);$/;"	t
PFNEGLOUTPUTPORTATTRIBEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLOUTPUTPORTATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value);$/;"	t
PFNEGLPOSTSUBBUFFERNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLPOSTSUBBUFFERNVPROC) (EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height);$/;"	t
PFNEGLQUERYDEVICEATTRIBEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDEVICEATTRIBEXTPROC) (EGLDeviceEXT device, EGLint attribute, EGLAttrib *value);$/;"	t
PFNEGLQUERYDEVICESEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDEVICESEXTPROC) (EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices);$/;"	t
PFNEGLQUERYDEVICESTRINGEXTPROC	include/linux/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYDEVICESTRINGEXTPROC) (EGLDeviceEXT device, EGLint name);$/;"	t
PFNEGLQUERYDISPLAYATTRIBEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBEXTPROC) (EGLDisplay dpy, EGLint attribute, EGLAttrib *value);$/;"	t
PFNEGLQUERYNATIVEDISPLAYNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYNATIVEDISPLAYNVPROC) (EGLDisplay dpy, EGLNativeDisplayType *display_id);$/;"	t
PFNEGLQUERYNATIVEPIXMAPNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYNATIVEPIXMAPNVPROC) (EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap);$/;"	t
PFNEGLQUERYNATIVEWINDOWNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYNATIVEWINDOWNVPROC) (EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window);$/;"	t
PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value);$/;"	t
PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC	include/linux/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC) (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name);$/;"	t
PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value);$/;"	t
PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC	include/linux/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC) (EGLDisplay dpy, EGLOutputPortEXT port, EGLint name);$/;"	t
PFNEGLQUERYSTREAMKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value);$/;"	t
PFNEGLQUERYSTREAMTIMEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMTIMEKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value);$/;"	t
PFNEGLQUERYSTREAMU64KHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMU64KHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value);$/;"	t
PFNEGLQUERYSURFACE64KHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSURFACE64KHRPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value);$/;"	t
PFNEGLQUERYSURFACEPOINTERANGLEPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSURFACEPOINTERANGLEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value);$/;"	t
PFNEGLSETBLOBCACHEFUNCSANDROIDPROC	include/linux/EGL/eglext.h	/^typedef void (EGLAPIENTRYP PFNEGLSETBLOBCACHEFUNCSANDROIDPROC) (EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get);$/;"	t
PFNEGLSIGNALSYNCKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSIGNALSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode);$/;"	t
PFNEGLSIGNALSYNCNVPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSIGNALSYNCNVPROC) (EGLSyncNV sync, EGLenum mode);$/;"	t
PFNEGLSTREAMATTRIBKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value);$/;"	t
PFNEGLSTREAMCONSUMERACQUIREKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERACQUIREKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t
PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t
PFNEGLSTREAMCONSUMEROUTPUTEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMEROUTPUTEXTPROC) (EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer);$/;"	t
PFNEGLSTREAMCONSUMERRELEASEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERRELEASEKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t
PFNEGLSWAPBUFFERSREGION2NOKPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSREGION2NOKPROC) (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects);$/;"	t
PFNEGLSWAPBUFFERSREGIONNOKPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSREGIONNOKPROC) (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects);$/;"	t
PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC) (EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects);$/;"	t
PFNEGLUNLOCKSURFACEKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLUNLOCKSURFACEKHRPROC) (EGLDisplay dpy, EGLSurface surface);$/;"	t
PFNEGLWAITSYNCKHRPROC	include/linux/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags);$/;"	t
PFNGLACTIVESHADERPROGRAMEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLACTIVESHADERPROGRAMEXTPROC) (GLuint pipeline, GLuint program);$/;"	t
PFNGLALPHAFUNCQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLALPHAFUNCQCOMPROC) (GLenum func, GLclampf ref);$/;"	t
PFNGLALPHAFUNCXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLALPHAFUNCXOESPROC) (GLenum func, GLclampx ref);$/;"	t
PFNGLBEGINPERFMONITORAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);$/;"	t
PFNGLBEGINQUERYEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLBEGINQUERYEXTPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBINDFRAMEBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLBINDFRAMEBUFFEROESPROC) (GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDPROGRAMPIPELINEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLBINDPROGRAMPIPELINEEXTPROC) (GLuint pipeline);$/;"	t
PFNGLBINDRENDERBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLBINDRENDERBUFFEROESPROC) (GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDVERTEXARRAYOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLBINDVERTEXARRAYOESPROC) (GLuint array);$/;"	t
PFNGLBINDVERTEXARRAYOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLBINDVERTEXARRAYOESPROC) (GLuint array);$/;"	t
PFNGLBLENDEQUATIONOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLBLENDEQUATIONOESPROC) (GLenum mode);$/;"	t
PFNGLBLENDEQUATIONSEPARATEOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLBLENDEQUATIONSEPARATEOESPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLBLENDFUNCSEPARATEOESPROC) (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLITFRAMEBUFFERANGLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSOESPROC	include/linux/GLES/glext.h	/^typedef GLenum (GL_APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSOESPROC) (GLenum target);$/;"	t
PFNGLCLEARCOLORXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLEARCOLORXOESPROC) (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);$/;"	t
PFNGLCLEARDEPTHFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLEARDEPTHFOESPROC) (GLclampf depth);$/;"	t
PFNGLCLEARDEPTHXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLEARDEPTHXOESPROC) (GLclampx depth);$/;"	t
PFNGLCLIENTWAITSYNCAPPLEPROC	include/linux/GLES/glext.h	/^typedef GLenum (GL_APIENTRYP PFNGLCLIENTWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCLIENTWAITSYNCAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef GLenum (GL_APIENTRYP PFNGLCLIENTWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCLIPPLANEFIMGPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLIPPLANEFIMGPROC) (GLenum p, const GLfloat *eqn);$/;"	t
PFNGLCLIPPLANEFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation);$/;"	t
PFNGLCLIPPLANEXIMGPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLIPPLANEXIMGPROC) (GLenum p, const GLfixed *eqn);$/;"	t
PFNGLCLIPPLANEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation);$/;"	t
PFNGLCOLOR4XOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLCOPYTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXTURELEVELSAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCOPYTEXTURELEVELSAPPLEPROC) (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);$/;"	t
PFNGLCOPYTEXTURELEVELSAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLCOPYTEXTURELEVELSAPPLEPROC) (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);$/;"	t
PFNGLCOVERAGEMASKNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLCOVERAGEMASKNVPROC) (GLboolean mask);$/;"	t
PFNGLCOVERAGEOPERATIONNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLCOVERAGEOPERATIONNVPROC) (GLenum operation);$/;"	t
PFNGLCREATESHADERPROGRAMVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef GLuint (GL_APIENTRYP PFNGLCREATESHADERPROGRAMVEXTPROC) (GLenum type, GLsizei count, const GLchar **strings);$/;"	t
PFNGLCURRENTPALETTEMATRIXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLCURRENTPALETTEMATRIXOESPROC) (GLuint matrixpaletteindex);$/;"	t
PFNGLDEBUGMESSAGECALLBACKPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECONTROLPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGEINSERTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDELETEFENCESNVPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);$/;"	t
PFNGLDELETEFENCESNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);$/;"	t
PFNGLDELETEFRAMEBUFFERSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEFRAMEBUFFERSOESPROC) (GLsizei n, const GLuint* framebuffers);$/;"	t
PFNGLDELETEPERFMONITORSAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);$/;"	t
PFNGLDELETEPROGRAMPIPELINESEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEPROGRAMPIPELINESEXTPROC) (GLsizei n, const GLuint *pipelines);$/;"	t
PFNGLDELETEQUERIESEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEQUERIESEXTPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETERENDERBUFFERSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDELETERENDERBUFFERSOESPROC) (GLsizei n, const GLuint* renderbuffers);$/;"	t
PFNGLDELETESYNCAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDELETESYNCAPPLEPROC) (GLsync sync);$/;"	t
PFNGLDELETESYNCAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDELETESYNCAPPLEPROC) (GLsync sync);$/;"	t
PFNGLDELETEVERTEXARRAYSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEVERTEXARRAYSOESPROC) (GLsizei n, const GLuint *arrays);$/;"	t
PFNGLDELETEVERTEXARRAYSOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDELETEVERTEXARRAYSOESPROC) (GLsizei n, const GLuint *arrays);$/;"	t
PFNGLDEPTHRANGEFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDEPTHRANGEFOESPROC) (GLclampf zNear, GLclampf zFar);$/;"	t
PFNGLDEPTHRANGEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDEPTHRANGEXOESPROC) (GLclampx zNear, GLclampx zFar);$/;"	t
PFNGLDISABLEDRIVERCONTROLQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDISABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl);$/;"	t
PFNGLDISABLEDRIVERCONTROLQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDISABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl);$/;"	t
PFNGLDISCARDFRAMEBUFFEREXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDISCARDFRAMEBUFFEREXTPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	t
PFNGLDISCARDFRAMEBUFFEREXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDISCARDFRAMEBUFFEREXTPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	t
PFNGLDRAWBUFFERSINDEXEDEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWBUFFERSINDEXEDEXTPROC) (GLint n, const GLenum *location, const GLint *indices);$/;"	t
PFNGLDRAWBUFFERSNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWBUFFERSNVPROC) (GLsizei n, const GLenum *bufs);$/;"	t
PFNGLDRAWTEXFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXFOESPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);$/;"	t
PFNGLDRAWTEXFVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXFVOESPROC) (const GLfloat *coords);$/;"	t
PFNGLDRAWTEXIOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXIOESPROC) (GLint x, GLint y, GLint z, GLint width, GLint height);$/;"	t
PFNGLDRAWTEXIVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXIVOESPROC) (const GLint *coords);$/;"	t
PFNGLDRAWTEXSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXSOESPROC) (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);$/;"	t
PFNGLDRAWTEXSVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXSVOESPROC) (const GLshort *coords);$/;"	t
PFNGLDRAWTEXXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXXOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);$/;"	t
PFNGLDRAWTEXXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLDRAWTEXXVOESPROC) (const GLfixed *coords);$/;"	t
PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image);$/;"	t
PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image);$/;"	t
PFNGLEGLIMAGETARGETTEXTURE2DOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);$/;"	t
PFNGLEGLIMAGETARGETTEXTURE2DOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);$/;"	t
PFNGLENABLEDRIVERCONTROLQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLENABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl);$/;"	t
PFNGLENABLEDRIVERCONTROLQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLENABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl);$/;"	t
PFNGLENDPERFMONITORAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);$/;"	t
PFNGLENDQUERYEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLENDQUERYEXTPROC) (GLenum target);$/;"	t
PFNGLENDTILINGQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLENDTILINGQCOMPROC) (GLbitfield preserveMask);$/;"	t
PFNGLENDTILINGQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLENDTILINGQCOMPROC) (GLbitfield preserveMask);$/;"	t
PFNGLEXTGETBUFFERPOINTERVQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETBUFFERPOINTERVQCOMPROC) (GLenum target, GLvoid **params);$/;"	t
PFNGLEXTGETBUFFERPOINTERVQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETBUFFERPOINTERVQCOMPROC) (GLenum target, GLvoid **params);$/;"	t
PFNGLEXTGETBUFFERSQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETBUFFERSQCOMPROC) (GLuint *buffers, GLint maxBuffers, GLint *numBuffers);$/;"	t
PFNGLEXTGETBUFFERSQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETBUFFERSQCOMPROC) (GLuint *buffers, GLint maxBuffers, GLint *numBuffers);$/;"	t
PFNGLEXTGETFRAMEBUFFERSQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETFRAMEBUFFERSQCOMPROC) (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);$/;"	t
PFNGLEXTGETFRAMEBUFFERSQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETFRAMEBUFFERSQCOMPROC) (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);$/;"	t
PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) (GLuint program, GLenum shadertype, GLchar *source, GLint *length);$/;"	t
PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) (GLuint program, GLenum shadertype, GLchar *source, GLint *length);$/;"	t
PFNGLEXTGETPROGRAMSQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETPROGRAMSQCOMPROC) (GLuint *programs, GLint maxPrograms, GLint *numPrograms);$/;"	t
PFNGLEXTGETPROGRAMSQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETPROGRAMSQCOMPROC) (GLuint *programs, GLint maxPrograms, GLint *numPrograms);$/;"	t
PFNGLEXTGETRENDERBUFFERSQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETRENDERBUFFERSQCOMPROC) (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);$/;"	t
PFNGLEXTGETRENDERBUFFERSQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETRENDERBUFFERSQCOMPROC) (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);$/;"	t
PFNGLEXTGETSHADERSQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETSHADERSQCOMPROC) (GLuint *shaders, GLint maxShaders, GLint *numShaders);$/;"	t
PFNGLEXTGETSHADERSQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETSHADERSQCOMPROC) (GLuint *shaders, GLint maxShaders, GLint *numShaders);$/;"	t
PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);$/;"	t
PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);$/;"	t
PFNGLEXTGETTEXSUBIMAGEQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETTEXSUBIMAGEQCOMPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels);$/;"	t
PFNGLEXTGETTEXSUBIMAGEQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETTEXSUBIMAGEQCOMPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels);$/;"	t
PFNGLEXTGETTEXTURESQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETTEXTURESQCOMPROC) (GLuint *textures, GLint maxTextures, GLint *numTextures);$/;"	t
PFNGLEXTGETTEXTURESQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTGETTEXTURESQCOMPROC) (GLuint *textures, GLint maxTextures, GLint *numTextures);$/;"	t
PFNGLEXTISPROGRAMBINARYQCOMPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLEXTISPROGRAMBINARYQCOMPROC) (GLuint program);$/;"	t
PFNGLEXTISPROGRAMBINARYQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLEXTISPROGRAMBINARYQCOMPROC) (GLuint program);$/;"	t
PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLFENCESYNCAPPLEPROC	include/linux/GLES/glext.h	/^typedef GLsync (GL_APIENTRYP PFNGLFENCESYNCAPPLEPROC) (GLenum condition, GLbitfield flags);$/;"	t
PFNGLFENCESYNCAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef GLsync (GL_APIENTRYP PFNGLFENCESYNCAPPLEPROC) (GLenum condition, GLbitfield flags);$/;"	t
PFNGLFINISHFENCENVPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);$/;"	t
PFNGLFINISHFENCENVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFOGXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFOGXOESPROC) (GLenum pname, GLfixed param);$/;"	t
PFNGLFOGXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *params);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEROESPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DOESPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DOES	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DOES) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	t
PFNGLFRUSTUMFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFRUSTUMFOESPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);$/;"	t
PFNGLFRUSTUMXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLFRUSTUMXOESPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);$/;"	t
PFNGLGENERATEMIPMAPOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGENERATEMIPMAPOESPROC) (GLenum target);$/;"	t
PFNGLGENFENCESNVPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);$/;"	t
PFNGLGENFENCESNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);$/;"	t
PFNGLGENFRAMEBUFFERSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGENFRAMEBUFFERSOESPROC) (GLsizei n, GLuint* framebuffers);$/;"	t
PFNGLGENPERFMONITORSAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);$/;"	t
PFNGLGENPROGRAMPIPELINESEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGENPROGRAMPIPELINESEXTPROC) (GLsizei n, GLuint *pipelines);$/;"	t
PFNGLGENQUERIESEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGENQUERIESEXTPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENRENDERBUFFERSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGENRENDERBUFFERSOESPROC) (GLsizei n, GLuint* renderbuffers);$/;"	t
PFNGLGENVERTEXARRAYSOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGENVERTEXARRAYSOESPROC) (GLsizei n, GLuint *arrays);$/;"	t
PFNGLGENVERTEXARRAYSOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGENVERTEXARRAYSOESPROC) (GLsizei n, GLuint *arrays);$/;"	t
PFNGLGETBUFFERPOINTERVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETBUFFERPOINTERVOESPROC) (GLenum target, GLenum pname, GLvoid ** params);$/;"	t
PFNGLGETBUFFERPOINTERVOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETBUFFERPOINTERVOESPROC) (GLenum target, GLenum pname, GLvoid** params);$/;"	t
PFNGLGETCLIPPLANEFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETCLIPPLANEFOESPROC) (GLenum pname, GLfloat eqn[4]);$/;"	t
PFNGLGETCLIPPLANEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETCLIPPLANEXOESPROC) (GLenum pname, GLfixed eqn[4]);$/;"	t
PFNGLGETDEBUGMESSAGELOGPROC	include/linux/GLES2/gl2ext.h	/^typedef GLuint (GL_APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDRIVERCONTROLSQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETDRIVERCONTROLSQCOMPROC) (GLint *num, GLsizei size, GLuint *driverControls);$/;"	t
PFNGLGETDRIVERCONTROLSQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETDRIVERCONTROLSQCOMPROC) (GLint *num, GLsizei size, GLuint *driverControls);$/;"	t
PFNGLGETDRIVERCONTROLSTRINGQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString);$/;"	t
PFNGLGETDRIVERCONTROLSTRINGQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString);$/;"	t
PFNGLGETFENCEIVNVPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);$/;"	t
PFNGLGETFENCEIVNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);$/;"	t
PFNGLGETFIXEDVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);$/;"	t
PFNGLGETGRAPHICSRESETSTATUSEXTPROC	include/linux/GLES/glext.h	/^typedef GLenum (GL_APIENTRYP PFNGLGETGRAPHICSRESETSTATUSEXTPROC) (void);$/;"	t
PFNGLGETGRAPHICSRESETSTATUSEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef GLenum (GL_APIENTRYP PFNGLGETGRAPHICSRESETSTATUSEXTPROC) (void);$/;"	t
PFNGLGETINTEGER64VAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETINTEGER64VAPPLEPROC) (GLenum pname, GLint64 *params);$/;"	t
PFNGLGETINTEGER64VAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETINTEGER64VAPPLEPROC) (GLenum pname, GLint64 *params);$/;"	t
PFNGLGETINTEGERI_VEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETINTEGERI_VEXTPROC) (GLenum target, GLuint index, GLint *data);$/;"	t
PFNGLGETLIGHTXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETLIGHTXVOESPROC) (GLenum light, GLenum pname, GLfixed *params);$/;"	t
PFNGLGETMATERIALXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETMATERIALXVOESPROC) (GLenum face, GLenum pname, GLfixed *params);$/;"	t
PFNGLGETNUNIFORMFVEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETNUNIFORMFVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, float *params);$/;"	t
PFNGLGETNUNIFORMFVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETNUNIFORMFVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, float *params);$/;"	t
PFNGLGETNUNIFORMIVEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETNUNIFORMIVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETNUNIFORMIVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETNUNIFORMIVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETOBJECTLABELEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETOBJECTLABELPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETOBJECTPTRLABELPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);$/;"	t
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, GLvoid *data);$/;"	t
PFNGLGETPERFMONITORCOUNTERSAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);$/;"	t
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);$/;"	t
PFNGLGETPERFMONITORGROUPSAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);$/;"	t
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);$/;"	t
PFNGLGETPOINTERVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params);$/;"	t
PFNGLGETPROGRAMBINARYOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPROGRAMBINARYOESPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);$/;"	t
PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMPIPELINEIVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETPROGRAMPIPELINEIVEXTPROC) (GLuint pipeline, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYIVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETQUERYIVEXTPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTUIVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETQUERYOBJECTUIVEXTPROC) (GLuint id, GLenum pname, GLuint *params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVOESPROC) (GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETSYNCIVAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETSYNCIVAPPLEPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	t
PFNGLGETSYNCIVAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLGETSYNCIVAPPLEPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	t
PFNGLGETTEXENVXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETTEXENVXVOESPROC) (GLenum env, GLenum pname, GLfixed *params);$/;"	t
PFNGLGETTEXGENFVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETTEXGENFVOESPROC) (GLenum coord, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXGENIVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETTEXGENIVOESPROC) (GLenum coord, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXGENXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params);$/;"	t
PFNGLGETTEXPARAMETERXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);$/;"	t
PFNGLINSERTEVENTMARKEREXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker);$/;"	t
PFNGLISFENCENVPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);$/;"	t
PFNGLISFENCENVPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);$/;"	t
PFNGLISFRAMEBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISFRAMEBUFFEROESPROC) (GLuint framebuffer);$/;"	t
PFNGLISPROGRAMPIPELINEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISPROGRAMPIPELINEEXTPROC) (GLuint pipeline);$/;"	t
PFNGLISQUERYEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISQUERYEXTPROC) (GLuint id);$/;"	t
PFNGLISRENDERBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISRENDERBUFFEROESPROC) (GLuint renderbuffer);$/;"	t
PFNGLISSYNCAPPLEPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISSYNCAPPLEPROC) (GLsync sync);$/;"	t
PFNGLISSYNCAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISSYNCAPPLEPROC) (GLsync sync);$/;"	t
PFNGLISVERTEXARRAYOESPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISVERTEXARRAYOESPROC) (GLuint array);$/;"	t
PFNGLISVERTEXARRAYOESPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLISVERTEXARRAYOESPROC) (GLuint array);$/;"	t
PFNGLLABELOBJECTEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label);$/;"	t
PFNGLLIGHTMODELXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param);$/;"	t
PFNGLLIGHTMODELXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *params);$/;"	t
PFNGLLIGHTXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param);$/;"	t
PFNGLLIGHTXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params);$/;"	t
PFNGLLINEWIDTHXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLINEWIDTHXOESPROC) (GLfixed width);$/;"	t
PFNGLLOADMATRIXXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLOADMATRIXXOESPROC) (const GLfixed *m);$/;"	t
PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC) (void);$/;"	t
PFNGLMAPBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef void* (GL_APIENTRYP PFNGLMAPBUFFEROESPROC) (GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFEROESPROC	include/linux/GLES2/gl2ext.h	/^typedef void* (GL_APIENTRYP PFNGLMAPBUFFEROESPROC) (GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFERRANGEEXTPROC	include/linux/GLES/glext.h	/^typedef void* (GL_APIENTRYP PFNGLMAPBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMAPBUFFERRANGEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void* (GL_APIENTRYP PFNGLMAPBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMATERIALXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);$/;"	t
PFNGLMATERIALXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *params);$/;"	t
PFNGLMATRIXINDEXPOINTEROESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMATRIXINDEXPOINTEROESPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	t
PFNGLMULTIDRAWARRAYSEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);$/;"	t
PFNGLMULTIDRAWARRAYSEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);$/;"	t
PFNGLMULTIDRAWELEMENTSEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);$/;"	t
PFNGLMULTIDRAWELEMENTSEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);$/;"	t
PFNGLMULTITEXCOORD4XOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMULTITEXCOORD4XOESPROC) (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);$/;"	t
PFNGLMULTMATRIXXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLMULTMATRIXXOESPROC) (const GLfixed *m);$/;"	t
PFNGLNORMAL3XOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz);$/;"	t
PFNGLOBJECTLABELPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);$/;"	t
PFNGLOBJECTPTRLABELPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);$/;"	t
PFNGLORTHOFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLORTHOFOESPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);$/;"	t
PFNGLORTHOXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLORTHOXOESPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);$/;"	t
PFNGLPOINTPARAMETERXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLPOINTPARAMETERXOESPROC) (GLenum pname, GLfixed param);$/;"	t
PFNGLPOINTPARAMETERXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params);$/;"	t
PFNGLPOINTSIZEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLPOINTSIZEXOESPROC) (GLfixed size);$/;"	t
PFNGLPOLYGONOFFSETXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units);$/;"	t
PFNGLPOPDEBUGGROUPPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);$/;"	t
PFNGLPOPGROUPMARKEREXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPOPGROUPMARKEREXTPROC) (void);$/;"	t
PFNGLPROGRAMBINARYOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMBINARYOESPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length);$/;"	t
PFNGLPROGRAMPARAMETERIEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);$/;"	t
PFNGLPROGRAMUNIFORM1FEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat x);$/;"	t
PFNGLPROGRAMUNIFORM1FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM1IEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint x);$/;"	t
PFNGLPROGRAMUNIFORM1IVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM2FEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat x, GLfloat y);$/;"	t
PFNGLPROGRAMUNIFORM2FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM2IEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint x, GLint y);$/;"	t
PFNGLPROGRAMUNIFORM2IVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM3FEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLPROGRAMUNIFORM3FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM3IEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z);$/;"	t
PFNGLPROGRAMUNIFORM3IVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM4FEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLPROGRAMUNIFORM4FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM4IEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLPROGRAMUNIFORM4IVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPUSHDEBUGGROUPPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);$/;"	t
PFNGLPUSHGROUPMARKEREXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker);$/;"	t
PFNGLQUERYMATRIXXOESPROC	include/linux/GLES/glext.h	/^typedef GLbitfield (GL_APIENTRYP PFNGLQUERYMATRIXXOESPROC) (GLfixed mantissa[16], GLint exponent[16]);$/;"	t
PFNGLREADBUFFERINDEXEDEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLREADBUFFERINDEXEDEXTPROC) (GLenum src, GLint index);$/;"	t
PFNGLREADBUFFERNVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLREADBUFFERNVPROC) (GLenum mode);$/;"	t
PFNGLREADNPIXELSEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLREADNPIXELSEXTPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);$/;"	t
PFNGLREADNPIXELSEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLREADNPIXELSEXTPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) (void);$/;"	t
PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) (void);$/;"	t
PFNGLROTATEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);$/;"	t
PFNGLSAMPLECOVERAGEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLSAMPLECOVERAGEXOESPROC) (GLclampx value, GLboolean invert);$/;"	t
PFNGLSCALEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);$/;"	t
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *countersList);$/;"	t
PFNGLSETFENCENVPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);$/;"	t
PFNGLSETFENCENVPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);$/;"	t
PFNGLSTARTTILINGQCOMPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLSTARTTILINGQCOMPROC) (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);$/;"	t
PFNGLSTARTTILINGQCOMPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLSTARTTILINGQCOMPROC) (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);$/;"	t
PFNGLTESTFENCENVPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);$/;"	t
PFNGLTESTFENCENVPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);$/;"	t
PFNGLTEXENVXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param);$/;"	t
PFNGLTEXENVXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);$/;"	t
PFNGLTEXGENFOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXGENFOESPROC) (GLenum coord, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXGENFVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXGENFVOESPROC) (GLenum coord, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXGENIOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXGENIOESPROC) (GLenum coord, GLenum pname, GLint param);$/;"	t
PFNGLTEXGENIVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXGENIVOESPROC) (GLenum coord, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXGENXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param);$/;"	t
PFNGLTEXGENXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params);$/;"	t
PFNGLTEXIMAGE3DOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);$/;"	t
PFNGLTEXPARAMETERXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);$/;"	t
PFNGLTEXPARAMETERXVOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);$/;"	t
PFNGLTEXSTORAGE1DEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXSTORAGE1DEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXSTORAGE2DEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXSTORAGE2DEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXSTORAGE3DEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXSTORAGE3DEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXSUBIMAGE3DOESPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);$/;"	t
PFNGLTEXTURESTORAGE1DEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXTURESTORAGE1DEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXTURESTORAGE2DEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXTURESTORAGE2DEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXTURESTORAGE3DEXTPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXTURESTORAGE3DEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTRANSLATEXOESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);$/;"	t
PFNGLUNMAPBUFFEROESPROC	include/linux/GLES/glext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLUNMAPBUFFEROESPROC) (GLenum target);$/;"	t
PFNGLUNMAPBUFFEROESPROC	include/linux/GLES2/gl2ext.h	/^typedef GLboolean (GL_APIENTRYP PFNGLUNMAPBUFFEROESPROC) (GLenum target);$/;"	t
PFNGLUSEPROGRAMSTAGESEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLUSEPROGRAMSTAGESEXTPROC) (GLuint pipeline, GLbitfield stages, GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPIPELINEEXTPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) (GLuint pipeline);$/;"	t
PFNGLWAITSYNCAPPLEPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLWAITSYNCAPPLEPROC	include/linux/GLES2/gl2ext.h	/^typedef void (GL_APIENTRYP PFNGLWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLWEIGHTPOINTEROESPROC	include/linux/GLES/glext.h	/^typedef void (GL_APIENTRYP PFNGLWEIGHTPOINTEROESPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	t
PFN_clCreateFromD3D10BufferKHR	include/CL/cl.hpp	/^    typedef CL_API_ENTRY cl_mem (CL_API_CALL *PFN_clCreateFromD3D10BufferKHR)($/;"	t	class:cl::BufferD3D10
PFN_clEnqueueAcquireD3D10ObjectsKHR	include/CL/cl.hpp	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *PFN_clEnqueueAcquireD3D10ObjectsKHR)($/;"	t	class:cl::CommandQueue
PFN_clEnqueueAcquireD3D10ObjectsKHR	include/CL/cl2.hpp	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *PFN_clEnqueueAcquireD3D10ObjectsKHR)($/;"	t	class:cl::CommandQueue
PFN_clEnqueueReleaseD3D10ObjectsKHR	include/CL/cl.hpp	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *PFN_clEnqueueReleaseD3D10ObjectsKHR)($/;"	t	class:cl::CommandQueue
PFN_clEnqueueReleaseD3D10ObjectsKHR	include/CL/cl2.hpp	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *PFN_clEnqueueReleaseD3D10ObjectsKHR)($/;"	t	class:cl::CommandQueue
PI	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float PI           = 3.141592653589793f;$/;"	m	namespace:__anon277	file:
PIPE_DESCRIPTOR_COUNT	tests/framework/instruments/hwc.hpp	/^    PIPE_DESCRIPTOR_COUNT \/**< The number of descriptors forming a pipe. *\/$/;"	e	enum:mali_userspace::__anon390::__anon392
PIPE_DESCRIPTOR_IN	tests/framework/instruments/hwc.hpp	/^    PIPE_DESCRIPTOR_IN,  \/**< The index of a pipe's input descriptor. *\/$/;"	e	enum:mali_userspace::__anon390::__anon392
PIPE_DESCRIPTOR_OUT	tests/framework/instruments/hwc.hpp	/^    PIPE_DESCRIPTOR_OUT, \/**< The index of a pipe's output descriptor. *\/$/;"	e	enum:mali_userspace::__anon390::__anon392
PIXEL_WISE_MULTIPLICATION_DATA_TEST_CASE	tests/validation/NEON/PixelWiseMultiplication.cpp	51;"	d	file:
PIXEL_WISE_MULTIPLICATION_FIXTURE_DATA_TEST_CASE	tests/validation/CL/PixelWiseMultiplication.cpp	49;"	d	file:
PIXEL_WISE_MULTIPLICATION_FIXTURE_DATA_TEST_CASE	tests/validation/NEON/PixelWiseMultiplication.cpp	65;"	d	file:
PI_4	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float PI_4         = 0.7853981633974483f;$/;"	m	namespace:__anon277	file:
PMU	tests/framework/instruments/Instruments.h	/^    PMU                     = 0x0200,$/;"	m	class:arm_compute::test::framework::InstrumentType
PMU	tests/framework/instruments/PMU.cpp	/^PMU::PMU()$/;"	f	class:arm_compute::test::framework::PMU
PMU	tests/framework/instruments/PMU.cpp	/^PMU::PMU(uint64_t config)$/;"	f	class:arm_compute::test::framework::PMU
PMU	tests/framework/instruments/PMU.h	/^class PMU$/;"	c	namespace:arm_compute::test::framework
PMUCounter	tests/framework/instruments/PMUCounter.h	/^    PMUCounter(ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::PMUCounter
PMUCounter	tests/framework/instruments/PMUCounter.h	/^class PMUCounter : public Instrument$/;"	c	namespace:arm_compute::test::framework
PMU_CYCLE_COUNTER	tests/framework/instruments/Instruments.h	/^    PMU_CYCLE_COUNTER       = 0x0201,$/;"	m	class:arm_compute::test::framework::InstrumentType
PMU_INSTRUCTION_COUNTER	tests/framework/instruments/Instruments.h	/^    PMU_INSTRUCTION_COUNTER = 0x0202,$/;"	m	class:arm_compute::test::framework::InstrumentType
POLL_DESCRIPTOR_COUNT	tests/framework/instruments/hwc.hpp	/^    POLL_DESCRIPTOR_COUNT \/**< The number of descriptors poll is waiting for. *\/$/;"	e	enum:mali_userspace::__anon390::__anon393
POLL_DESCRIPTOR_HWCNT_READER	tests/framework/instruments/hwc.hpp	/^    POLL_DESCRIPTOR_HWCNT_READER, \/**< The index of the hwcnt reader descriptor in poll fds array. *\/$/;"	e	enum:mali_userspace::__anon390::__anon393
POLL_DESCRIPTOR_SIGNAL	tests/framework/instruments/hwc.hpp	/^    POLL_DESCRIPTOR_SIGNAL,       \/**< The index of the signal descriptor in poll fds array. *\/$/;"	e	enum:mali_userspace::__anon390::__anon393
POOLING3x3_STRIDE1	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	216;"	d	file:
POOLING3x3_STRIDE1_fp16	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	683;"	d	file:
POOLING3x3_STRIDE2	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	263;"	d	file:
POOLING3x3_STRIDE2_fp16	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	730;"	d	file:
POOLING3x3_STRIDE3	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	310;"	d	file:
POOLING3x3_STRIDE3_fp16	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	792;"	d	file:
POOL_OP	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	58;"	d	file:
POOL_OP	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	62;"	d	file:
POOL_OP_float	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	59;"	d	file:
POOL_OP_float	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	80;"	d	file:
POOL_OP_vec2	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	60;"	d	file:
POOL_OP_vec2	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	86;"	d	file:
POOL_SIZE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	182;"	d	file:
POOL_SIZE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	184;"	d	file:
POOL_SIZE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	186;"	d	file:
POOL_SIZE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	649;"	d	file:
POOL_SIZE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	651;"	d	file:
POOL_SIZE	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	653;"	d	file:
POPULATING	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    POPULATING,$/;"	m	class:arm_gemm::BufferStatus
POW2_OP	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	101;"	d	file:
POW2_OP	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	99;"	d	file:
PPMAccessor	utils/GraphUtils.cpp	/^PPMAccessor::PPMAccessor(std::string ppm_path, bool bgr, std::unique_ptr<IPreprocessor> preprocessor)$/;"	f	class:PPMAccessor
PPMLoader	utils/Utils.h	/^    PPMLoader()$/;"	f	class:arm_compute::utils::PPMLoader
PPMLoader	utils/Utils.h	/^class PPMLoader$/;"	c	namespace:arm_compute::utils
PPMWriter	utils/GraphUtils.cpp	/^PPMWriter::PPMWriter(std::string name, unsigned int maximum)$/;"	f	class:PPMWriter
PPMWriter	utils/GraphUtils.h	/^class PPMWriter : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
PRECOMMIT	tests/framework/DatasetModes.h	/^    PRECOMMIT = 1,$/;"	m	class:arm_compute::test::framework::DatasetMode
PRINT_STUB_ERROR	opencl-1.2-stubs/opencl_stubs.c	4;"	d	file:
PRINT_STUB_ERROR	opengles-3.1-stubs/EGL.c	3;"	d	file:
PRINT_STUB_ERROR	opengles-3.1-stubs/GLESv2.c	3;"	d	file:
PROCESS_1X_1Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	209;"	d	file:
PROCESS_4X_1Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	192;"	d	file:
PROCESS_4X_1Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	210;"	d	file:
PROCESS_4X_1Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	274;"	d	file:
PROCESS_4X_2Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	275;"	d	file:
PROCESS_4X_2Y_2Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	278;"	d	file:
PROCESS_4X_3Y_1Z	src/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.cpp	112;"	d	file:
PROCESS_4X_3Y_1Z	src/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.cpp	120;"	d	file:
PROCESS_4X_3Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	134;"	d	file:
PROCESS_4X_3Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	163;"	d	file:
PROCESS_4X_3Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	276;"	d	file:
PROCESS_4X_3Y_2Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	165;"	d	file:
PROCESS_4X_4Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	164;"	d	file:
PROCESS_4X_4Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	277;"	d	file:
PROCESS_8X_1Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	211;"	d	file:
PROCESS_8X_1Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	279;"	d	file:
PROCESS_8X_2Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	229;"	d	file:
PROCESS_8X_2Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	280;"	d	file:
PROCESS_8X_3Y_1Z	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	162;"	d	file:
PRODUCT_ID_MASK_NEW	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_MASK_NEW = 0xf00f,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_MASK_OLD	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_MASK_OLD = 0xffff,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T60X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T60X = 0x6956,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T62X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T62X = 0x0620,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T72X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T72X = 0x0720,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T76X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T76X = 0x0750,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T82X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T82X = 0x0820,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T83X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T83X = 0x0830,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_T86X	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_T86X = 0x0860,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_TFRX	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_TFRX = 0x0880,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_THEX	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_THEX = 0x6001,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_TMIX	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_TMIX = 0x6000,$/;"	e	enum:mali_userspace::__anon395
PRODUCT_ID_TSIX	tests/framework/instruments/hwc_names.hpp	/^    PRODUCT_ID_TSIX = 0x7000$/;"	e	enum:mali_userspace::__anon395
PROFILE_KERNEL	src/core/NEON/kernels/arm_gemm/profiler.hpp	151;"	d
PROFILE_MERGE	src/core/NEON/kernels/arm_gemm/profiler.hpp	152;"	d
PROFILE_PREPA	src/core/NEON/kernels/arm_gemm/profiler.hpp	149;"	d
PROFILE_PREPB	src/core/NEON/kernels/arm_gemm/profiler.hpp	150;"	d
PROP	tests/framework/instruments/hwc.hpp	212;"	d
PROP	tests/framework/instruments/hwc.hpp	243;"	d
PROP2	tests/framework/instruments/hwc.hpp	217;"	d
PROP2	tests/framework/instruments/hwc.hpp	244;"	d
PadStrideInfo	arm_compute/core/Types.h	/^    PadStrideInfo(unsigned int stride_x = 1, unsigned int stride_y = 1,$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
PadStrideInfo	arm_compute/core/Types.h	/^    PadStrideInfo(unsigned int stride_x, unsigned int stride_y,$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
PadStrideInfo	arm_compute/core/Types.h	/^class PadStrideInfo$/;"	c	class:arm_compute::HOGNormType
PaddingCalculator	tests/PaddingCalculator.h	/^    PaddingCalculator(int size, int processed_elements)$/;"	f	class:arm_compute::test::final
PaddingSizesDataset	tests/validation/CL/FillBorder.cpp	/^const auto PaddingSizesDataset = concat(concat($/;"	m	namespace:arm_compute::test::validation	file:
PaddingSizesDataset	tests/validation/NEON/FillBorder.cpp	/^const auto PaddingSizesDataset = concat(concat($/;"	m	namespace:arm_compute::test::validation	file:
PaddingType	arm_compute/core/NEON/kernels/convolution/common/convolution.hpp	/^enum PaddingType {$/;"	g
PassManager	src/graph/PassManager.cpp	/^PassManager::PassManager()$/;"	f	class:arm_compute::graph::PassManager
PerCPUData	src/runtime/CPUUtils.cpp	/^struct PerCPUData$/;"	s	namespace:__anon319	file:
PermuteParametersLarge	tests/validation/CL/Permute.cpp	/^const auto PermuteParametersLarge = combine(datasets::Large4DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon437	file:
PermuteParametersLarge	tests/validation/CPP/Permute.cpp	/^const auto PermuteParametersLarge = combine(datasets::Large4DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon453	file:
PermuteParametersLarge	tests/validation/NEON/Permute.cpp	/^const auto PermuteParametersLarge = combine(datasets::Large4DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon513	file:
PermuteParametersSmall	tests/validation/CL/Permute.cpp	/^const auto PermuteParametersSmall = combine(datasets::Small4DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon437	file:
PermuteParametersSmall	tests/validation/CPP/Permute.cpp	/^const auto PermuteParametersSmall = combine(concat(concat(datasets::Small2DShapes(), datasets::Small3DShapes()), datasets::Small4DShapes()),$/;"	m	namespace:arm_compute::test::validation::__anon453	file:
PermuteParametersSmall	tests/validation/NEON/Permute.cpp	/^const auto PermuteParametersSmall = combine(concat(concat(datasets::Small2DShapes(), datasets::Small3DShapes()), datasets::Small4DShapes()),$/;"	m	namespace:arm_compute::test::validation::__anon513	file:
PermuteValidationFixture	tests/validation/fixtures/PermuteFixture.h	/^class PermuteValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
PhaseFixture	tests/benchmark/fixtures/PhaseFixture.h	/^class PhaseFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
PhaseType	arm_compute/core/Types.h	/^enum class PhaseType$/;"	c	namespace:arm_compute
PhaseValidationFixture	tests/validation/fixtures/PhaseFixture.h	/^class PhaseValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Pipe	include/CL/cl2.hpp	/^    Pipe($/;"	f	class:cl::Pipe
Pipe	include/CL/cl2.hpp	/^    Pipe() : Memory() { }$/;"	f	class:cl::Pipe
Pipe	include/CL/cl2.hpp	/^    Pipe(const Pipe& pipe) : Memory(pipe) {}$/;"	f	class:cl::Pipe
Pipe	include/CL/cl2.hpp	/^    explicit Pipe(const cl_mem& pipe, bool retainObject = false) :$/;"	f	class:cl::Pipe
Pipe	include/CL/cl2.hpp	/^class Pipe : public Memory$/;"	c	namespace:cl
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue()$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(double v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(float v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(half v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(int16_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(int32_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(int64_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(uint16_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(uint32_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(uint64_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^    PixelValue(uint8_t v)$/;"	f	class:arm_compute::PixelValue
PixelValue	arm_compute/core/PixelValue.h	/^class PixelValue$/;"	c	namespace:arm_compute
PixelWiseMultiplicationBroadcastValidationFixture	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^class PixelWiseMultiplicationBroadcastValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
PixelWiseMultiplicationValidationFixture	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^class PixelWiseMultiplicationValidationFixture : public PixelWiseMultiplicationBroadcastValidationFixture<TensorType, AccessorType, FunctionType, T1, T2>$/;"	c	namespace:arm_compute::test::validation
Platform	include/CL/cl.hpp	/^    Platform() : detail::Wrapper<cl_type>()  { }$/;"	f	class:cl::Platform
Platform	include/CL/cl.hpp	/^    Platform(const Platform& platform) : detail::Wrapper<cl_type>(platform) { }$/;"	f	class:cl::Platform
Platform	include/CL/cl.hpp	/^    Platform(const cl_platform_id &platform) : detail::Wrapper<cl_type>(platform) { }$/;"	f	class:cl::Platform
Platform	include/CL/cl.hpp	/^class Platform : public detail::Wrapper<cl_platform_id>$/;"	c	namespace:cl
Platform	include/CL/cl2.hpp	/^    Platform() : detail::Wrapper<cl_type>()  { }$/;"	f	class:cl::Platform
Platform	include/CL/cl2.hpp	/^    explicit Platform(const cl_platform_id &platform, bool retainObject = false) : $/;"	f	class:cl::Platform
Platform	include/CL/cl2.hpp	/^class Platform : public detail::Wrapper<cl_platform_id>$/;"	c	namespace:cl
PoolManager	arm_compute/runtime/PoolManager.h	/^class PoolManager : public IPoolManager$/;"	c	namespace:arm_compute
PoolManager	src/runtime/PoolManager.cpp	/^PoolManager::PoolManager()$/;"	f	class:PoolManager
PoolingLayer	arm_compute/graph/Types.h	/^    PoolingLayer,$/;"	m	class:arm_compute::graph::NodeType
PoolingLayer	arm_compute/graph/frontend/Layers.h	/^    PoolingLayer(PoolingLayerInfo pool_info)$/;"	f	class:arm_compute::graph::frontend::final
PoolingLayerDataset	tests/datasets/PoolingLayerDataset.h	/^class PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
PoolingLayerDatasetFP	tests/validation/CL/PoolingLayer.cpp	/^const auto PoolingLayerDatasetFP = combine(combine(combine(datasets::PoolingTypes(), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3), Size2D(7, 7), Size2D(9, 9), Size2D(5, 7), Size2D(7, 9) })),$/;"	m	namespace:arm_compute::test::validation::__anon440	file:
PoolingLayerDatasetFP	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^const auto PoolingLayerDatasetFP = combine(combine(combine(datasets::PoolingTypes(), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3), Size2D(4, 4), Size2D(7, 7), Size2D(9, 9) })),$/;"	m	namespace:arm_compute::test::validation::__anon466	file:
PoolingLayerDatasetFP	tests/validation/NEON/PoolingLayer.cpp	/^const auto PoolingLayerDatasetFP = combine(combine(combine(datasets::PoolingTypes(), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3), Size2D(7, 7), Size2D(9, 9), Size2D(4, 4), Size2D(3, 7), Size2D(7, 8) })),$/;"	m	namespace:arm_compute::test::validation::__anon516	file:
PoolingLayerDatasetQASYMM8	tests/validation/CL/PoolingLayer.cpp	/^const auto PoolingLayerDatasetQASYMM8 = combine(combine(combine(framework::dataset::make("PoolingType", { PoolingType::MAX, PoolingType::AVG }), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3), Size2D(5, 7), Size2D(8, 9) })),$/;"	m	namespace:arm_compute::test::validation::__anon440	file:
PoolingLayerDatasetQASYMM8	tests/validation/NEON/PoolingLayer.cpp	/^const auto PoolingLayerDatasetQASYMM8 = combine(combine(combine(framework::dataset::make("PoolingType", { PoolingType::MAX, PoolingType::AVG }), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3), Size2D(4, 4), Size2D(9, 9), Size2D(3, 7), Size2D(7, 8) })),$/;"	m	namespace:arm_compute::test::validation::__anon516	file:
PoolingLayerDatasetQS	tests/validation/CL/PoolingLayer.cpp	/^const auto PoolingLayerDatasetQS = combine(combine(combine(framework::dataset::make("PoolingType", { PoolingType::MAX, PoolingType::AVG }), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3) })),$/;"	m	namespace:arm_compute::test::validation::__anon440	file:
PoolingLayerDatasetQS	tests/validation/NEON/PoolingLayer.cpp	/^const auto PoolingLayerDatasetQS = combine(combine(combine(framework::dataset::make("PoolingType", { PoolingType::MAX, PoolingType::AVG }), framework::dataset::make("PoolingSize", { Size2D(2, 2), Size2D(3, 3) })),$/;"	m	namespace:arm_compute::test::validation::__anon516	file:
PoolingLayerDatasetSpecial	tests/datasets/PoolingLayerDataset.h	/^    PoolingLayerDatasetSpecial()$/;"	f	class:arm_compute::test::datasets::final
PoolingLayerFixture	tests/benchmark/fixtures/PoolingLayerFixture.h	/^class PoolingLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
PoolingLayerInfo	arm_compute/core/Types.h	/^    PoolingLayerInfo()$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
PoolingLayerInfo	arm_compute/core/Types.h	/^    explicit PoolingLayerInfo(PoolingType   pool_type,$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
PoolingLayerInfo	arm_compute/core/Types.h	/^    explicit PoolingLayerInfo(PoolingType pool_type)$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
PoolingLayerInfo	arm_compute/core/Types.h	/^class PoolingLayerInfo$/;"	c	class:arm_compute::HOGNormType
PoolingLayerNode	src/graph/nodes/PoolingLayerNode.cpp	/^PoolingLayerNode::PoolingLayerNode(PoolingLayerInfo pool_info)$/;"	f	class:arm_compute::graph::PoolingLayerNode
PoolingLayerValidationFixedPointFixture	tests/validation/fixtures/PoolingLayerFixture.h	/^class PoolingLayerValidationFixedPointFixture : public PoolingLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
PoolingLayerValidationFixture	tests/validation/fixtures/PoolingLayerFixture.h	/^class PoolingLayerValidationFixture : public PoolingLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
PoolingLayerValidationGenericFixture	tests/validation/fixtures/PoolingLayerFixture.h	/^class PoolingLayerValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
PoolingLayerValidationQuantizedFixture	tests/validation/fixtures/PoolingLayerFixture.h	/^class PoolingLayerValidationQuantizedFixture : public PoolingLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
PoolingType	arm_compute/core/Types.h	/^enum class PoolingType$/;"	c	class:arm_compute::HOGNormType
PoolingTypes	tests/datasets/PoolingTypesDataset.h	/^    PoolingTypes()$/;"	f	class:arm_compute::test::datasets::final
PrecisionType	arm_compute/core/Types.h	/^    enum class PrecisionType$/;"	c	struct:arm_compute::HOGNormType::IOFormatInfo
PrettyPrinter	tests/framework/printers/PrettyPrinter.h	/^class PrettyPrinter : public Printer$/;"	c	namespace:arm_compute::test::framework
PrintMatrix	src/core/NEON/kernels/convolution/common/utils.cpp	/^void PrintMatrix(const float* const m, const int M, const int N, const int row_stride)$/;"	f
PrintRegion	arm_compute/core/Types.h	/^    enum class PrintRegion$/;"	c	struct:arm_compute::HOGNormType::IOFormatInfo
Printer	arm_compute/core/utils/logging/IPrinter.h	/^    Printer()$/;"	f	class:arm_compute::logging::Printer
Printer	arm_compute/core/utils/logging/IPrinter.h	/^class Printer$/;"	c	namespace:arm_compute::logging
Printer	tests/framework/printers/Printer.cpp	/^Printer::Printer(std::ostream &stream)$/;"	f	class:arm_compute::test::framework::Printer
Printer	tests/framework/printers/Printer.h	/^class Printer$/;"	c	namespace:arm_compute::test::framework
ProcessKeys	documentation/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
Profiler	tests/framework/Profiler.h	/^class Profiler$/;"	c	namespace:arm_compute::test::framework
Profiling	include/CL/cl2.hpp	/^    Profiling = CL_QUEUE_PROFILING_ENABLE,$/;"	m	class:cl::DeviceQueueProperties
Profiling	include/CL/cl2.hpp	/^    Profiling = CL_QUEUE_PROFILING_ENABLE,$/;"	m	class:cl::QueueProperties
Program	arm_compute/core/CL/CLKernelLibrary.h	/^class Program$/;"	c	namespace:arm_compute
Program	include/CL/cl.hpp	/^    Program($/;"	f	class:cl::Program
Program	include/CL/cl.hpp	/^    Program() { }$/;"	f	class:cl::Program
Program	include/CL/cl.hpp	/^    Program(const Program& program) : detail::Wrapper<cl_type>(program) { }$/;"	f	class:cl::Program
Program	include/CL/cl.hpp	/^    __CL_EXPLICIT_CONSTRUCTORS Program(const cl_program& program) : detail::Wrapper<cl_type>(program) { }$/;"	f	class:cl::Program
Program	include/CL/cl.hpp	/^class Program : public detail::Wrapper<cl_program>$/;"	c	namespace:cl
Program	include/CL/cl2.hpp	/^    Program($/;"	f	class:cl::Program
Program	include/CL/cl2.hpp	/^    Program() { }$/;"	f	class:cl::Program
Program	include/CL/cl2.hpp	/^    Program(const Program& program) : detail::Wrapper<cl_type>(program) {}$/;"	f	class:cl::Program
Program	include/CL/cl2.hpp	/^    explicit Program(const cl_program& program, bool retainObject = false) : $/;"	f	class:cl::Program
Program	include/CL/cl2.hpp	/^class Program : public detail::Wrapper<cl_program>$/;"	c	namespace:cl
Program	src/core/CL/CLKernelLibrary.cpp	/^Program::Program()$/;"	f	class:Program
Program	src/core/CL/CLKernelLibrary.cpp	/^Program::Program(cl::Context context, cl::Device device, std::string name, std::vector<unsigned char> binary)$/;"	f	class:Program
Program	src/core/CL/CLKernelLibrary.cpp	/^Program::Program(cl::Context context, std::string name, std::string source)$/;"	f	class:Program
Pyramid	arm_compute/runtime/Pyramid.h	/^class Pyramid : public IPyramid$/;"	c	namespace:arm_compute
PyramidInfo	arm_compute/core/PyramidInfo.h	/^class PyramidInfo$/;"	c	namespace:arm_compute
PyramidInfo	src/core/PyramidInfo.cpp	/^PyramidInfo::PyramidInfo()$/;"	f	class:PyramidInfo
PyramidInfo	src/core/PyramidInfo.cpp	/^PyramidInfo::PyramidInfo(size_t num_levels, float scale, const TensorShape &tensor_shape, Format format)$/;"	f	class:PyramidInfo
PyramidInfo	src/core/PyramidInfo.cpp	/^PyramidInfo::PyramidInfo(size_t num_levels, float scale, size_t width, size_t height, Format format)$/;"	f	class:PyramidInfo
QASYMM8	arm_compute/core/Types.h	/^    QASYMM8, \/**< quantized, asymmetric fixed-point 8-bit number *\/$/;"	m	class:arm_compute::DataType
QS16	arm_compute/core/Types.h	/^    QS16,    \/**< quantized, symmetric fixed-point 16-bit number *\/$/;"	m	class:arm_compute::DataType
QS32	arm_compute/core/Types.h	/^    QS32,    \/**< quantized, symmetric fixed-point 32-bit number *\/$/;"	m	class:arm_compute::DataType
QS8	arm_compute/core/Types.h	/^    QS8,     \/**< quantized, symmetric fixed-point 8-bit number *\/$/;"	m	class:arm_compute::DataType
QuantizationInfo	arm_compute/core/Types.h	/^    QuantizationInfo()$/;"	f	struct:arm_compute::QuantizationInfo
QuantizationInfo	arm_compute/core/Types.h	/^    QuantizationInfo(float scale, int offset)$/;"	f	struct:arm_compute::QuantizationInfo
QuantizationInfo	arm_compute/core/Types.h	/^struct QuantizationInfo$/;"	s	namespace:arm_compute
QuantizationLayerFixture	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^class QuantizationLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
QuantizationShapes	tests/validation/CL/QuantizationLayer.cpp	/^const auto                         QuantizationShapes = concat(concat(concat(datasets::Small3DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon441	file:
QuantizationShapes	tests/validation/NEON/QuantizationLayer.cpp	/^const auto QuantizationShapes = concat(concat(concat(datasets::Small3DShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon517	file:
QuantizationValidationFixedPointFixture	tests/validation/fixtures/QuantizationLayerFixture.h	/^class QuantizationValidationFixedPointFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
QuantizationValidationFixture	tests/validation/fixtures/QuantizationLayerFixture.h	/^class QuantizationValidationFixture : public QuantizationValidationFixedPointFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
QuantizedActivationDataset	tests/validation/CL/ActivationLayer.cpp	/^const auto QuantizedActivationDataset = combine(combine(framework::dataset::make("InPlace", { false, true }), QuantizedActivationFunctionsDataset),$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationDataset	tests/validation/NEON/ActivationLayer.cpp	/^const auto QuantizedActivationDataset = combine(combine(framework::dataset::make("InPlace", { false, true }), QuantizedActivationFunctionsDataset),$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationFunctionsDataset	tests/validation/CL/ActivationLayer.cpp	/^const auto QuantizedActivationFunctionsDataset = framework::dataset::make("ActivationFunction", { ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU,$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationFunctionsDataset	tests/validation/CL/ConvolutionLayer.cpp	/^const auto QuantizedActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationFunctionsDataset	tests/validation/CL/DirectConvolutionLayer.cpp	/^const auto QuantizedActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationFunctionsDataset	tests/validation/NEON/ActivationLayer.cpp	/^const auto QuantizedActivationFunctionsDataset = framework::dataset::make("ActivationFunction", { ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU,$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationFunctionsDataset	tests/validation/NEON/ConvolutionLayer.cpp	/^const auto QuantizedActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation	file:
QuantizedActivationFunctionsDataset	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto QuantizedActivationFunctionsDataset = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation	file:
QueueProperties	include/CL/cl2.hpp	/^enum class QueueProperties : cl_command_queue_properties$/;"	c	namespace:cl
R	arm_compute/core/Types.h	/^    R,       \/**< Red channel. *\/$/;"	m	class:arm_compute::Channel
REGISTER_FIXTURE_DATA_TEST_CASE	tests/framework/Macros.h	258;"	d
REGISTER_FIXTURE_DATA_TEST_CASE_IMPL	tests/framework/Macros.h	243;"	d
REGISTER_FIXTURE_TEST_CASE	tests/framework/Macros.h	236;"	d
REGISTER_FIXTURE_TEST_CASE_IMPL	tests/framework/Macros.h	224;"	d
RELU	arm_compute/core/Types.h	/^        RELU,            \/**< Rectifier ( \\f$ f(x) = max(0,x) \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
RGB888	arm_compute/core/Types.h	/^    RGB888,   \/**< 3 channels, 1 U8 per channel *\/$/;"	m	class:arm_compute::Format
RGBA8888	arm_compute/core/Types.h	/^    RGBA8888, \/**< 4 channels, 1 U8 per channel *\/$/;"	m	class:arm_compute::Format
RNNLayerDataset	tests/datasets/RNNLayerDataset.h	/^class RNNLayerDataset$/;"	c	namespace:arm_compute::test::datasets
RNNLayerValidationFixture	tests/validation/fixtures/RNNLayerFixture.h	/^class RNNLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ROI	arm_compute/core/Types.h	/^struct ROI$/;"	s	namespace:arm_compute
ROIPoolingLayerDataset	tests/datasets/ROIPoolingLayerDataset.h	/^class ROIPoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
ROIPoolingLayerFixture	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^class ROIPoolingLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
ROIPoolingLayerInfo	arm_compute/core/Types.h	/^    ROIPoolingLayerInfo(unsigned int pooled_width, unsigned int pooled_height, float spatial_scale)$/;"	f	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
ROIPoolingLayerInfo	arm_compute/core/Types.h	/^class ROIPoolingLayerInfo$/;"	c	class:arm_compute::HOGNormType
ROUND_UP	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	45;"	d
RandomAccessor	utils/GraphUtils.cpp	/^RandomAccessor::RandomAccessor(PixelValue lower, PixelValue upper, std::random_device::result_type seed)$/;"	f	class:RandomAccessor
RandomBatchNormalizationLayerDataset	tests/datasets/RandomBatchNormalizationLayerDataset.h	/^    RandomBatchNormalizationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
RandomNormalizePlanarYUVLayerDataset	tests/datasets/RandomNormalizePlanarYUVLayerDataset.h	/^    RandomNormalizePlanarYUVLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
RangeDataset	tests/framework/datasets/RangeDataset.h	/^    RangeDataset(std::string name, T start, T end, T step = 1)$/;"	f	class:arm_compute::test::framework::dataset::final
Range_128_1	arm_compute/core/CL/OpenCL.h	/^static const NDRange Range_128_1 = NDRange(128, 1);$/;"	m	namespace:cl
Range_128_1	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^static const NDRange Range_128_1 = NDRange(128, 1);$/;"	m	namespace:arm_compute::gles
RawLutAccessor	tests/RawLutAccessor.h	/^    RawLutAccessor(std::map<T, T> &lut)$/;"	f	class:arm_compute::test::RawLutAccessor
RawLutAccessor	tests/RawLutAccessor.h	/^class RawLutAccessor : public ILutAccessor<T>$/;"	c	namespace:arm_compute::test
RawTensor	tests/RawTensor.cpp	/^RawTensor::RawTensor(TensorShape shape, DataType data_type, int num_channels, int fixed_point_position)$/;"	f	class:arm_compute::test::RawTensor
RawTensor	tests/RawTensor.cpp	/^RawTensor::RawTensor(TensorShape shape, Format format, int fixed_point_position)$/;"	f	class:arm_compute::test::RawTensor
RawTensor	tests/RawTensor.cpp	/^RawTensor::RawTensor(const RawTensor &tensor)$/;"	f	class:arm_compute::test::RawTensor
RawTensor	tests/RawTensor.h	/^    RawTensor(SimpleTensor<T> &&tensor)$/;"	f	class:arm_compute::test::RawTensor
RawTensor	tests/RawTensor.h	/^class RawTensor : public SimpleTensor<uint8_t>$/;"	c	namespace:arm_compute::test
Rectangle	arm_compute/core/Types.h	/^struct Rectangle$/;"	s	namespace:arm_compute
Reducer	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^class Reducer$/;"	c	namespace:__anon290	file:
ReductionOperation	arm_compute/core/Types.h	/^enum class ReductionOperation$/;"	c	namespace:arm_compute
ReductionOperationValidationFixture	tests/validation/fixtures/ReductionOperationFixture.h	/^class ReductionOperationValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ReductionOperations	tests/datasets/ReductionOperationDataset.h	/^    ReductionOperations()$/;"	f	class:arm_compute::test::datasets::final
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_command_queue>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_context>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_device_id>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_event>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_kernel>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_mem>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_platform_id>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_program>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl.hpp	/^struct ReferenceHandler<cl_sampler>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_command_queue>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_context>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_device_id>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_event>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_kernel>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_mem>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_platform_id>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_program>$/;"	s	namespace:cl::detail
ReferenceHandler	include/CL/cl2.hpp	/^struct ReferenceHandler<cl_sampler>$/;"	s	namespace:cl::detail
RelativeTolerance	tests/validation/Validation.h	/^    explicit constexpr RelativeTolerance(value_type value)$/;"	f	class:arm_compute::test::validation::RelativeTolerance
RelativeTolerance	tests/validation/Validation.h	/^class RelativeTolerance$/;"	c	namespace:arm_compute::test::validation
RemapValidationFixture	tests/validation/fixtures/RemapFixture.h	/^class RemapValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ReshapeLayer	arm_compute/graph/Types.h	/^    ReshapeLayer,$/;"	m	class:arm_compute::graph::NodeType
ReshapeLayer	arm_compute/graph/frontend/Layers.h	/^    ReshapeLayer(TensorShape shape)$/;"	f	class:arm_compute::graph::frontend::final
ReshapeLayerDataset	tests/datasets/ReshapeLayerDataset.h	/^class ReshapeLayerDataset$/;"	c	namespace:arm_compute::test::datasets
ReshapeLayerFixture	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^class ReshapeLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
ReshapeLayerNode	src/graph/nodes/ReshapeLayer.cpp	/^ReshapeLayerNode::ReshapeLayerNode(TensorShape shape)$/;"	f	class:arm_compute::graph::ReshapeLayerNode
ReshapeLayerValidationFixture	tests/validation/fixtures/ReshapeLayerFixture.h	/^class ReshapeLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
RoundingPolicy	arm_compute/core/Rounding.h	/^enum class RoundingPolicy$/;"	c	namespace:arm_compute
RoundingPolicy	tests/validation/FixedPoint.h	/^enum class RoundingPolicy$/;"	c	namespace:arm_compute::test::fixed_point_arithmetic
S16	arm_compute/core/Types.h	/^    S16,      \/**< 1 channel, 1 S16 per channel *\/$/;"	m	class:arm_compute::Format
S16	arm_compute/core/Types.h	/^    S16,     \/**< signed 16-bit number *\/$/;"	m	class:arm_compute::DataType
S32	arm_compute/core/Types.h	/^    S32,      \/**< 1 channel, 1 S32 per channel *\/$/;"	m	class:arm_compute::Format
S32	arm_compute/core/Types.h	/^    S32,     \/**< signed 32-bit number *\/$/;"	m	class:arm_compute::DataType
S64	arm_compute/core/Types.h	/^    S64,     \/**< signed 64-bit number *\/$/;"	m	class:arm_compute::DataType
S8	arm_compute/core/Types.h	/^    S8,      \/**< signed 8-bit number *\/$/;"	m	class:arm_compute::DataType
SCALE_180	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float SCALE_180    = 180.0f \/ PI;$/;"	m	namespace:__anon277	file:
SCALE_1K	tests/framework/instruments/Instrument.h	/^    SCALE_1K, \/* 1000          *\/$/;"	m	class:arm_compute::test::framework::ScaleFactor
SCALE_1M	tests/framework/instruments/Instrument.h	/^    SCALE_1M, \/* 1 000 000     *\/$/;"	m	class:arm_compute::test::framework::ScaleFactor
SCALE_360	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float SCALE_360    = SCALE_180 * SCALE_FACTOR;$/;"	m	namespace:__anon277	file:
SCALE_FACTOR	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^constexpr float SCALE_FACTOR = 0.7111111111111111f;$/;"	m	namespace:__anon277	file:
SCALE_PYRAMID_HALF	arm_compute/core/Types.h	/^constexpr float SCALE_PYRAMID_HALF = 0.5f;$/;"	m	namespace:arm_compute
SCALE_PYRAMID_ORB	arm_compute/core/Types.h	/^constexpr float SCALE_PYRAMID_ORB = 8.408964152537146130583778358414e-01;$/;"	m	namespace:arm_compute
SCHEDULER_TIMER	tests/framework/instruments/Instruments.h	/^    SCHEDULER_TIMER         = 0x0500,$/;"	m	class:arm_compute::test::framework::InstrumentType
SET_TENSOR_ITERATOR_OFFSET_IN_BYTES	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	243;"	d
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/absdiff.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/activation_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/arithmetic_add.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/concatenate.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/convolution_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/dropout.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/fill_border.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/gemm.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	28;"	d
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/normalization_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/normalize_planar_yuv_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/pixelwise_mul_float.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/scale.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/tensor_shift.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SHADER_PARAMS_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/transpose.cs	/^SHADER_PARAMS_DECLARATION$/;"	p
SIGNED	arm_compute/core/Types.h	/^    SIGNED,  \/**< Angle range: [0, 360] *\/$/;"	m	class:arm_compute::PhaseType
SOFT_RELU	arm_compute/core/Types.h	/^        SOFT_RELU,       \/**< Soft Rectifier ( \\f$ f(x)= log(1+e^x) \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
SORT	src/core/CL/cl_kernels/non_linear_filter_helpers.h	30;"	d
SQCVT_SAT	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	37;"	d	file:
SQCVT_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	506;"	d
SQCVT_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	516;"	d
SQCVT_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	515;"	d
SQRT	arm_compute/core/Types.h	/^        SQRT,            \/**< Square root ( \\f$ f(x) = \\sqrt{x} \\f$ )*\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
SQRT_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	42;"	d
SQRT_OP	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	105;"	d	file:
SQUARE	arm_compute/core/Types.h	/^        SQUARE,          \/**< Square ( \\f$ f(x)= x^2 \\f$ )*\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
ST	arm_compute/runtime/Scheduler.h	/^        ST,    \/**< Single thread. *\/$/;"	m	class:arm_compute::Scheduler::Type
STORE	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	286;"	d
STORE_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	288;"	d
STORE_PACK2_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	422;"	d
STORE_PACK2_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	420;"	d
STORE_PACK4_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	441;"	d
STORE_PACK4_CURRENT_ITEM_U8	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	496;"	d
STORE_PACK4_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	439;"	d
STORE_PACK4_U8	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	494;"	d
STORE_PACK8_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	455;"	d
STORE_PACK8_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	453;"	d
STRING_CLASS	include/CL/cl.hpp	/^typedef std::string STRING_CLASS;$/;"	t	namespace:cl
SUB	arm_compute/graph/Types.h	/^    SUB, \/**< Arithmetic subtraction *\/$/;"	m	class:arm_compute::graph::EltwiseOperation
SUB	tests/Types.h	/^    SUB,       \/**< Subtraction *\/$/;"	m	class:arm_compute::FixedPointOp
SUBQ_SAT_IMPL	src/core/CL/cl_kernels/fixed_point.h	186;"	d
SUB_OP	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	36;"	d
SUB_OP	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	34;"	d	file:
SUB_OP	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	36;"	d	file:
SUB_SAT_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	204;"	d
SUB_SAT_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	203;"	d
SUCCESS	tests/framework/TestResult.h	/^        SUCCESS,$/;"	m	class:arm_compute::test::framework::TestResult::Status
SUM	arm_compute/core/Types.h	/^    SUM,        \/**< Sum *\/$/;"	m	class:arm_compute::ReductionOperation
SUM_SQUARE	arm_compute/core/Types.h	/^    SUM_SQUARE, \/**< Sum of squares *\/$/;"	m	class:arm_compute::ReductionOperation
SVMAllocator	include/CL/cl2.hpp	/^    SVMAllocator() :$/;"	f	class:cl::SVMAllocator
SVMAllocator	include/CL/cl2.hpp	/^    SVMAllocator(const SVMAllocator &other) :$/;"	f	class:cl::SVMAllocator
SVMAllocator	include/CL/cl2.hpp	/^    SVMAllocator(const SVMAllocator<U, SVMTrait> &other) :$/;"	f	class:cl::SVMAllocator
SVMAllocator	include/CL/cl2.hpp	/^    explicit SVMAllocator(cl::Context context) :$/;"	f	class:cl::SVMAllocator
SVMAllocator	include/CL/cl2.hpp	/^class SVMAllocator {$/;"	c	namespace:cl
SVMAllocator	include/CL/cl2.hpp	/^class SVMAllocator<void, SVMTrait> {$/;"	c	namespace:cl
SVMTraitAtomic	include/CL/cl2.hpp	/^class SVMTraitAtomic$/;"	c	namespace:cl
SVMTraitCoarse	include/CL/cl2.hpp	/^class SVMTraitCoarse$/;"	c	namespace:cl
SVMTraitFine	include/CL/cl2.hpp	/^class SVMTraitFine$/;"	c	namespace:cl
SVMTraitNull	include/CL/cl2.hpp	/^    class SVMTraitNull$/;"	c	namespace:cl::detail
SVMTraitReadOnly	include/CL/cl2.hpp	/^class SVMTraitReadOnly$/;"	c	namespace:cl
SVMTraitReadWrite	include/CL/cl2.hpp	/^class SVMTraitReadWrite$/;"	c	namespace:cl
SVMTraitWriteOnly	include/CL/cl2.hpp	/^class SVMTraitWriteOnly$/;"	c	namespace:cl
SWAP_4x4_func	src/core/GLES_COMPUTE/cs_shaders/transpose.cs	39;"	d	file:
SWAP_ROW_func	src/core/GLES_COMPUTE/cs_shaders/transpose.cs	32;"	d	file:
SYNCOFFMSG	documentation/navtreedata.js	/^var SYNCOFFMSG = 'click to enable panel synchronisation';/;"	v
SYNCONMSG	documentation/navtreedata.js	/^var SYNCONMSG = 'click to disable panel synchronisation';$/;"	v
Sampler	include/CL/cl.hpp	/^    Sampler($/;"	f	class:cl::Sampler
Sampler	include/CL/cl.hpp	/^    Sampler() { }$/;"	f	class:cl::Sampler
Sampler	include/CL/cl.hpp	/^    Sampler(const Sampler& sampler) : detail::Wrapper<cl_type>(sampler) { }$/;"	f	class:cl::Sampler
Sampler	include/CL/cl.hpp	/^    Sampler(const cl_sampler& sampler) : detail::Wrapper<cl_type>(sampler) { }$/;"	f	class:cl::Sampler
Sampler	include/CL/cl.hpp	/^class Sampler : public detail::Wrapper<cl_sampler>$/;"	c	namespace:cl
Sampler	include/CL/cl2.hpp	/^    Sampler($/;"	f	class:cl::Sampler
Sampler	include/CL/cl2.hpp	/^    Sampler() { }$/;"	f	class:cl::Sampler
Sampler	include/CL/cl2.hpp	/^    Sampler(const Sampler& sam) : detail::Wrapper<cl_type>(sam) {}$/;"	f	class:cl::Sampler
Sampler	include/CL/cl2.hpp	/^    explicit Sampler(const cl_sampler& sampler, bool retainObject = false) : $/;"	f	class:cl::Sampler
Sampler	include/CL/cl2.hpp	/^class Sampler : public detail::Wrapper<cl_sampler>$/;"	c	namespace:cl
SamplingPolicies	tests/datasets/SamplingPolicyDataset.h	/^    SamplingPolicies()$/;"	f	class:arm_compute::test::datasets::final
SamplingPolicy	arm_compute/core/Types.h	/^enum class SamplingPolicy$/;"	c	namespace:arm_compute
SaveArrayAsNumpy	include/libnpy/npy.hpp	/^inline void SaveArrayAsNumpy( const std::string& filename, bool fortran_order, unsigned int n_dims, const unsigned long shape[], const std::vector<Scalar>& data)$/;"	f	namespace:npy
ScaleDataLayouts	tests/validation/NEON/Scale.cpp	/^const auto ScaleDataLayouts = framework::dataset::make("DataLayout",$/;"	m	namespace:arm_compute::test::validation::__anon522	file:
ScaleDataTypes	tests/validation/CL/Scale.cpp	/^const auto ScaleDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon447	file:
ScaleDataTypes	tests/validation/GLES_COMPUTE/Scale.cpp	/^const auto ScaleDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon467	file:
ScaleDataTypes	tests/validation/NEON/Scale.cpp	/^const auto ScaleDataTypes = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::validation::__anon522	file:
ScaleFactor	tests/framework/instruments/Instrument.h	/^enum class ScaleFactor : unsigned int$/;"	c	namespace:arm_compute::test::framework
ScaleFixture	tests/benchmark/fixtures/ScaleFixture.h	/^class ScaleFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
ScaleLayer	arm_compute/graph/Types.h	/^    ScaleLayer,$/;"	m	class:arm_compute::graph::NodeType
ScaleLayer	arm_compute/graph/frontend/Layers.h	/^    ScaleLayer(ITensorAccessorUPtr mul_w,$/;"	f	class:arm_compute::graph::frontend::final
ScaleLayerDataset	tests/datasets/ScaleLayerDataset.h	/^class ScaleLayerDataset$/;"	c	namespace:arm_compute::test::datasets
ScaleLayerFixture	tests/benchmark/fixtures/ScaleLayerFixture.h	/^class ScaleLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test
ScaleValidationFixture	tests/validation/fixtures/ScaleFixture.h	/^class ScaleValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
ScharrValidationFixture	tests/validation/fixtures/ScharrFixture.h	/^class ScharrValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Scheduler	arm_compute/runtime/Scheduler.h	/^class Scheduler$/;"	c	namespace:arm_compute
SchedulerTimer	tests/framework/instruments/SchedulerTimer.cpp	/^SchedulerTimer::SchedulerTimer(ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::SchedulerTimer
SchedulerTimer	tests/framework/instruments/SchedulerTimer.h	/^class SchedulerTimer : public Instrument$/;"	c	namespace:arm_compute::test::framework
ScopedProfiler	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    ScopedProfilerClass ScopedProfiler(int i, unsigned long u)$/;"	f	class:arm_gemm::profiler
ScopedProfilerClass	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^        ScopedProfilerClass(profiler &prof, int i, unsigned long u)$/;"	f	class:arm_gemm::profiler::ScopedProfilerClass
ScopedProfilerClass	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    class ScopedProfilerClass$/;"	c	class:arm_gemm::profiler
Search	documentation/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	documentation/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	documentation/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	documentation/search/search.js	/^function SearchResults(name)$/;"	c
SelectItemCount	documentation/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	documentation/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
Semaphore	support/Semaphore.h	/^    Semaphore(int value = 0)$/;"	f	class:arm_compute::Semaphore
Semaphore	support/Semaphore.h	/^class Semaphore$/;"	c	namespace:arm_compute
SetArg	include/CL/cl.hpp	/^struct SetArg$/;"	s	namespace:cl::detail
SetArg	include/CL/cl.hpp	/^struct SetArg<index, NullType>$/;"	s	namespace:cl::detail
SignalImpl	arm_compute/core/utils/misc/Signal.h	/^class SignalImpl<ReturnType(Args...)>$/;"	c	namespace:arm_compute::utils::signal::detail
SimpleOption	tests/framework/command_line/SimpleOption.h	/^class SimpleOption : public Option$/;"	c	namespace:arm_compute::test::framework
SimpleOption	tests/framework/command_line/SimpleOption.h	/^inline SimpleOption<T>::SimpleOption(std::string name, T default_value)$/;"	f	class:arm_compute::test::framework::SimpleOption
SimpleTensor	tests/SimpleTensor.h	/^SimpleTensor<T>::SimpleTensor(TensorShape shape, DataType data_type, int num_channels, int fixed_point_position, QuantizationInfo quantization_info, DataLayout data_layout)$/;"	f	class:arm_compute::test::SimpleTensor
SimpleTensor	tests/SimpleTensor.h	/^SimpleTensor<T>::SimpleTensor(TensorShape shape, Format format, int fixed_point_position)$/;"	f	class:arm_compute::test::SimpleTensor
SimpleTensor	tests/SimpleTensor.h	/^SimpleTensor<T>::SimpleTensor(const SimpleTensor &tensor)$/;"	f	class:arm_compute::test::SimpleTensor
SimpleTensor	tests/SimpleTensor.h	/^class SimpleTensor : public IAccessor$/;"	c	namespace:arm_compute::test
SingleThreadScheduler	arm_compute/runtime/SingleThreadScheduler.h	/^class SingleThreadScheduler : public IScheduler$/;"	c	namespace:arm_compute
SingletonDataset	tests/framework/datasets/SingletonDataset.h	/^    SingletonDataset(std::string name, T &&value)$/;"	f	class:arm_compute::test::framework::dataset::SingletonDataset
SingletonDataset	tests/framework/datasets/SingletonDataset.h	/^class SingletonDataset : public NamedDataset$/;"	c	namespace:arm_compute::test::framework::dataset
Size2D	arm_compute/core/Size2D.h	/^    Size2D(size_t w, size_t h)$/;"	f	class:arm_compute::Size2D
Size2D	arm_compute/core/Size2D.h	/^class Size2D$/;"	c	namespace:arm_compute
Small1DShapes	tests/datasets/ShapeDatasets.h	/^    Small1DShapes()$/;"	f	class:arm_compute::test::datasets::final
Small2DShapes	tests/datasets/ShapeDatasets.h	/^    Small2DShapes()$/;"	f	class:arm_compute::test::datasets::final
Small3DShapes	tests/datasets/ShapeDatasets.h	/^    Small3DShapes()$/;"	f	class:arm_compute::test::datasets::final
Small3x3Shapes	tests/datasets/ShapeDatasets.h	/^    Small3x3Shapes()$/;"	f	class:arm_compute::test::datasets::final
Small4DShapes	tests/datasets/ShapeDatasets.h	/^    Small4DShapes()$/;"	f	class:arm_compute::test::datasets::final
Small5x5Shapes	tests/datasets/ShapeDatasets.h	/^    Small5x5Shapes()$/;"	f	class:arm_compute::test::datasets::final
SmallConvolutionLayerDataset	tests/datasets/SmallConvolutionLayerDataset.h	/^    SmallConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallDeconvolutionShapes	tests/datasets/ShapeDatasets.h	/^    SmallDeconvolutionShapes()$/;"	f	class:arm_compute::test::datasets::final
SmallDepthwiseConvolutionLayerDataset	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    SmallDepthwiseConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallDepthwiseConvolutionLayerDataset3x3	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    SmallDepthwiseConvolutionLayerDataset3x3()$/;"	f	class:arm_compute::test::datasets::final
SmallDepthwiseConvolutionLayerDataset3x3NCHW	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    SmallDepthwiseConvolutionLayerDataset3x3NCHW()$/;"	f	class:arm_compute::test::datasets::final
SmallDilatedConvolutionLayerDataset	tests/datasets/DilatedConvolutionLayerDataset.h	/^    SmallDilatedConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallDirectConvolutionShapes	tests/datasets/ShapeDatasets.h	/^    SmallDirectConvolutionShapes()$/;"	f	class:arm_compute::test::datasets::final
SmallDirectConvolutionTensorShiftShapes	tests/datasets/ShapeDatasets.h	/^    SmallDirectConvolutionTensorShiftShapes()$/;"	f	class:arm_compute::test::datasets::final
SmallFullyConnectedLayerDataset	tests/datasets/FullyConnectedLayerDataset.h	/^    SmallFullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallGEMMDataset	tests/datasets/SmallGEMMDataset.h	/^    SmallGEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallGEMMLowpDataset	tests/datasets/SmallGEMMLowpDataset.h	/^    SmallGEMMLowpDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallHOGDescriptorDataset	tests/datasets/HOGDescriptorDataset.h	/^    SmallHOGDescriptorDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallHOGMultiDetectionDataset	tests/datasets/HOGMultiDetectionDataset.h	/^    SmallHOGMultiDetectionDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallImageFiles	tests/datasets/ImageFileDatasets.h	/^    SmallImageFiles()$/;"	f	class:arm_compute::test::datasets::final
SmallImageShapes	tests/datasets/ShapeDatasets.h	/^    SmallImageShapes()$/;"	f	class:arm_compute::test::datasets::final
SmallLSTMLayerDataset	tests/datasets/LSTMLayerDataset.h	/^    SmallLSTMLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallLocallyConnectedDataset	tests/datasets/LocallyConnectedDataset.h	/^    SmallLocallyConnectedDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallOpticalFlowDataset	tests/datasets/OpticalFlowDataset.h	/^    SmallOpticalFlowDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallRNNLayerDataset	tests/datasets/RNNLayerDataset.h	/^    SmallRNNLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallROIPoolingLayerDataset	tests/datasets/ROIPoolingLayerDataset.h	/^    SmallROIPoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallRandomChannelShuffleLayerDataset	tests/datasets/ChannelShuffleLayerDataset.h	/^    SmallRandomChannelShuffleLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallReshapeLayerDataset	tests/datasets/ReshapeLayerDataset.h	/^    SmallReshapeLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallScaleLayerShapes	tests/datasets/ScaleLayerDataset.h	/^    SmallScaleLayerShapes()$/;"	f	class:arm_compute::test::datasets::final
SmallShapes	tests/datasets/ShapeDatasets.h	/^    SmallShapes()$/;"	f	class:arm_compute::test::datasets::final
SmallShapesBroadcast	tests/datasets/ShapeDatasets.h	/^    SmallShapesBroadcast()$/;"	f	class:arm_compute::test::datasets::final
SmallWinogradConvolutionLayer3x3Dataset	tests/datasets/SmallConvolutionLayerDataset.h	/^    SmallWinogradConvolutionLayer3x3Dataset()$/;"	f	class:arm_compute::test::datasets::final
SmallWinogradConvolutionLayer5x5Dataset	tests/datasets/SmallConvolutionLayerDataset.h	/^    SmallWinogradConvolutionLayer5x5Dataset()$/;"	f	class:arm_compute::test::datasets::final
SmallWinogradInputTransformDataset	tests/datasets/WinogradInputTransformDataset.h	/^    SmallWinogradInputTransformDataset()$/;"	f	class:arm_compute::test::datasets::final
SmallWinogradOutputTransformDataset	tests/datasets/WinogradOutputTransformDataset.h	/^    SmallWinogradOutputTransformDataset()$/;"	f	class:arm_compute::test::datasets::final
SobelValidationFixture	tests/validation/fixtures/SobelFixture.h	/^class SobelValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
SoftmaxLayer	arm_compute/graph/Types.h	/^    SoftmaxLayer,$/;"	m	class:arm_compute::graph::NodeType
SoftmaxLayer	arm_compute/graph/frontend/Layers.h	/^    SoftmaxLayer(float beta = 1.0f)$/;"	f	class:arm_compute::graph::frontend::final
SoftmaxLayerFixture	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^class SoftmaxLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
SoftmaxLayerLargeShapes	tests/datasets/ShapeDatasets.h	/^    SoftmaxLayerLargeShapes()$/;"	f	class:arm_compute::test::datasets::final
SoftmaxLayerNode	src/graph/nodes/SoftmaxLayerNode.cpp	/^SoftmaxLayerNode::SoftmaxLayerNode(float beta)$/;"	f	class:arm_compute::graph::SoftmaxLayerNode
SoftmaxLayerSmallShapes	tests/datasets/ShapeDatasets.h	/^    SoftmaxLayerSmallShapes()$/;"	f	class:arm_compute::test::datasets::final
SoftmaxLayerTinyShapes	tests/datasets/ShapeDatasets.h	/^    SoftmaxLayerTinyShapes()$/;"	f	class:arm_compute::test::datasets::final
SoftmaxValidationFixedPointFixture	tests/validation/fixtures/SoftmaxLayerFixture.h	/^class SoftmaxValidationFixedPointFixture : public SoftmaxValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
SoftmaxValidationFixture	tests/validation/fixtures/SoftmaxLayerFixture.h	/^class SoftmaxValidationFixture : public SoftmaxValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
SoftmaxValidationGenericFixture	tests/validation/fixtures/SoftmaxLayerFixture.h	/^class SoftmaxValidationGenericFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
SoftmaxValidationQuantizedFixture	tests/validation/fixtures/SoftmaxLayerFixture.h	/^class SoftmaxValidationQuantizedFixture : public SoftmaxValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
Sources	include/CL/cl.hpp	/^    typedef VECTOR_CLASS<std::pair<const char*, ::size_t> > Sources;$/;"	t	class:cl::Program
Sources	include/CL/cl2.hpp	/^    typedef vector<string> Sources;$/;"	t	class:cl::Program
SpecialPoolingLayerValidationFixture	tests/validation/fixtures/PoolingLayerFixture.h	/^class SpecialPoolingLayerValidationFixture : public PoolingLayerValidationGenericFixture<TensorType, AccessorType, FunctionType, T>$/;"	c	namespace:arm_compute::test::validation
SplitLayer	arm_compute/graph/Types.h	/^    SplitLayer,$/;"	m	class:arm_compute::graph::NodeType
SplitLayerNode	src/graph/nodes/SplitLayerNode.cpp	/^SplitLayerNode::SplitLayerNode(unsigned int num_splits, unsigned int axis)$/;"	f	class:arm_compute::graph::SplitLayerNode
SqueezeNetActivationLayerDataset	tests/datasets/system_tests/squeezenet/SqueezeNetActivationLayerDataset.h	/^    SqueezeNetActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SqueezeNetConvolutionLayerDataset	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^    SqueezeNetConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SqueezeNetPoolingLayerDataset	tests/datasets/system_tests/squeezenet/SqueezeNetPoolingLayerDataset.h	/^    SqueezeNetPoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
SqueezeNetWinogradLayerDataset	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^    SqueezeNetWinogradLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
Stats	tests/framework/instruments/OpenCLMemoryUsage.h	/^    struct Stats$/;"	s	class:arm_compute::test::framework::OpenCLMemoryUsage
Status	arm_compute/core/Error.h	/^    Status()$/;"	f	class:arm_compute::Status
Status	arm_compute/core/Error.h	/^    explicit Status(ErrorCode error_status, std::string error_description = " ")$/;"	f	class:arm_compute::Status
Status	arm_compute/core/Error.h	/^class Status$/;"	c	namespace:arm_compute
Status	tests/framework/TestCaseFactory.h	/^    enum class Status$/;"	c	class:arm_compute::test::framework::TestCaseFactory
Status	tests/framework/TestResult.h	/^    enum class Status$/;"	c	struct:arm_compute::test::framework::TestResult
Steps	arm_compute/core/Steps.h	/^    Steps(Ts... steps)$/;"	f	class:arm_compute::Steps
Steps	arm_compute/core/Steps.h	/^class Steps : public Dimensions<unsigned int>$/;"	c	namespace:arm_compute
Stream	src/graph/frontend/Stream.cpp	/^Stream::Stream(size_t id, std::string name)$/;"	f	class:arm_compute::graph::frontend::Stream
StreamHints	arm_compute/graph/frontend/Types.h	/^struct StreamHints$/;"	s	namespace:arm_compute::graph::frontend
Strides	arm_compute/core/Strides.h	/^    constexpr Strides(Ts... strides)$/;"	f	class:arm_compute::Strides
Strides	arm_compute/core/Strides.h	/^class Strides : public Dimensions<size_t>$/;"	c	namespace:arm_compute
StringDecorator	arm_compute/core/utils/logging/LogMsgDecorators.h	/^    StringDecorator(const std::string &str)$/;"	f	class:arm_compute::logging::StringDecorator
StringDecorator	arm_compute/core/utils/logging/LogMsgDecorators.h	/^class StringDecorator : public IDecorator$/;"	c	namespace:arm_compute::logging
StrongType	arm_compute/core/utils/strong_type/StrongType.h	/^    StrongType(T val)$/;"	f	class:arm_compute::strong_type::StrongType
StrongType	arm_compute/core/utils/strong_type/StrongType.h	/^class StrongType : public Attributes<StrongType<T, Tag, Attributes...>>...$/;"	c	namespace:arm_compute::strong_type
SubStream	src/graph/frontend/SubStream.cpp	/^SubStream::SubStream(IStream &s)$/;"	f	class:arm_compute::graph::frontend::SubStream
SubTensor	arm_compute/runtime/SubTensor.h	/^class SubTensor : public ITensor$/;"	c	namespace:arm_compute
SubTensor	src/runtime/SubTensor.cpp	/^SubTensor::SubTensor()$/;"	f	class:SubTensor
SubTensor	src/runtime/SubTensor.cpp	/^SubTensor::SubTensor(ITensor *parent, const TensorShape &tensor_shape, const Coordinates &coords, bool extend_parent)$/;"	f	class:SubTensor
SubTensorInfo	src/core/SubTensorInfo.cpp	/^SubTensorInfo::SubTensorInfo()$/;"	f	class:SubTensorInfo
SubTensorInfo	src/core/SubTensorInfo.cpp	/^SubTensorInfo::SubTensorInfo(ITensorInfo *parent, TensorShape tensor_shape, Coordinates coords, bool extend_parent)$/;"	f	class:SubTensorInfo
SumsqOpX	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^struct SumsqOpX$/;"	s	namespace:__anon290	file:
T600	arm_compute/core/GPUTarget.h	/^    T600          = 0x110,$/;"	m	class:arm_compute::GPUTarget
T700	arm_compute/core/GPUTarget.h	/^    T700          = 0x120,$/;"	m	class:arm_compute::GPUTarget
T800	arm_compute/core/GPUTarget.h	/^    T800          = 0x130,$/;"	m	class:arm_compute::GPUTarget
TANH	arm_compute/core/Types.h	/^        TANH,            \/**< Hyperbolic tangent ( \\f$ f(x) = a \\cdot tanh(b \\cdot x) \\f$ ) *\/$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo::ActivationFunction
TANHQ_IMPL	src/core/CL/cl_kernels/fixed_point.h	459;"	d
TANH_OP_EXPAND	src/core/CL/cl_kernels/fixed_point.h	474;"	d
TANH_OP_EXPAND_STR	src/core/CL/cl_kernels/fixed_point.h	473;"	d
TBOX	arm_compute/core/GPUTarget.h	/^    TBOX          = 0x260$/;"	m	class:arm_compute::GPUTarget
TENSOR3D_DECLARATION	src/core/CL/cl_kernels/helpers.h	76;"	d
TENSOR3D_OFFSET	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	222;"	d
TENSOR4D_DECLARATION	src/core/CL/cl_kernels/helpers.h	86;"	d
TENSOR_DECLARATION	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	31;"	d
TENSOR_ITERATOR_ADVANCE	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	237;"	d
TENSOR_ITERATOR_ADVANCE_IN_BYTES	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	240;"	d
TENSOR_OFFSET_ADVANCE	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	225;"	d
TENSOR_OFFSET_ADVANCE_IN_BYTES	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	228;"	d
TERM_CRITERIA_EPSILON	arm_compute/core/Types.h	/^    TERM_CRITERIA_EPSILON,    \/**< Terminate when within epsilon of a threshold *\/$/;"	m	class:arm_compute::Termination
TERM_CRITERIA_ITERATIONS	arm_compute/core/Types.h	/^    TERM_CRITERIA_ITERATIONS, \/**< Terminate after a maximum number of iterations *\/$/;"	m	class:arm_compute::Termination
TESTS	tests/framework/Exceptions.h	/^    TESTS,$/;"	m	class:arm_compute::test::framework::LogLevel
TEST_CASE	tests/framework/Macros.h	148;"	d
TEST_CASE	tests/validation/CL/DepthConcatenateLayer.cpp	/^TEST_CASE(Configuration, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/CL/SYSTEM/AlexNet.cpp	/^TEST_CASE(AlexNet, framework::DatasetMode::PRECOMMIT)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/CL/SYSTEM/LeNet5.cpp	/^TEST_CASE(LeNet5, framework::DatasetMode::PRECOMMIT)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/CL/UNIT/TensorAllocator.cpp	/^TEST_CASE(ImportMemory, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/CL/UNIT/Tuner.cpp	/^TEST_CASE(BifrostTunerSimple, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/CL/WidthConcatenateLayer.cpp	/^TEST_CASE(Configuration, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/NEON/DepthConcatenateLayer.cpp	/^TEST_CASE(Configuration, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/NEON/SYSTEM/AlexNet.cpp	/^TEST_CASE(AlexNet, framework::DatasetMode::PRECOMMIT)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/NEON/SYSTEM/LeNet5.cpp	/^TEST_CASE(LeNet5, framework::DatasetMode::PRECOMMIT)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/NEON/UNIT/MemoryManager.cpp	/^TEST_CASE(BlobMemoryManagerSimpleWithinFunctionLevel, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/NEON/UNIT/TensorAllocator.cpp	/^TEST_CASE(ImportMemory, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/UNIT/GPUTarget.cpp	/^TEST_CASE(GPUTargetIsIn, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/UNIT/GPUTarget.cpp	/^TEST_CASE(GetGPUTargetFromName, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/UNIT/TensorInfo.cpp	/^TEST_CASE(Clone, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE	tests/validation/UNIT/TensorInfo.cpp	/^TEST_CASE(TensorInfoBuild, framework::DatasetMode::ALL)$/;"	f	namespace:arm_compute::test::validation
TEST_CASE_CONSTRUCTOR	tests/framework/Macros.h	95;"	d
TEST_CASE_IMPL	tests/framework/Macros.h	138;"	d
TEST_REGISTRAR	tests/framework/Macros.h	127;"	d
TEST_SUITE	tests/framework/Macros.h	34;"	d
TEST_SUITE_END	tests/framework/Macros.h	39;"	d
TFPreproccessor	utils/GraphUtils.h	/^class TFPreproccessor : public IPreprocessor$/;"	c	namespace:arm_compute::graph_utils
TIME_MS	tests/framework/instruments/Instrument.h	/^    TIME_MS,  \/* Milliseconds  *\/$/;"	m	class:arm_compute::test::framework::ScaleFactor
TIME_S	tests/framework/instruments/Instrument.h	/^    TIME_S,   \/* Seconds       *\/$/;"	m	class:arm_compute::test::framework::ScaleFactor
TIME_US	tests/framework/instruments/Instrument.h	/^    TIME_US,  \/* Microseconds  *\/$/;"	m	class:arm_compute::test::framework::ScaleFactor
TNOX	arm_compute/core/GPUTarget.h	/^    TNOX          = 0x240,$/;"	m	class:arm_compute::GPUTarget
TO_NEAREST_EVEN	arm_compute/core/Rounding.h	/^    TO_NEAREST_EVEN, \/**< Rounds to nearest value; half rounds to nearest even *\/$/;"	m	class:arm_compute::RoundingPolicy
TO_NEAREST_UP	arm_compute/core/Rounding.h	/^    TO_NEAREST_UP,   \/**< Rounds to nearest value; half rounds away from zero *\/$/;"	m	class:arm_compute::RoundingPolicy
TO_ZERO	arm_compute/core/Rounding.h	/^    TO_ZERO,         \/**< Truncates the least significand values that are lost in operations. *\/$/;"	m	class:arm_compute::RoundingPolicy
TO_ZERO	tests/validation/FixedPoint.h	/^    TO_ZERO,        \/**< Round to zero policy *\/$/;"	m	class:arm_compute::test::fixed_point_arithmetic::RoundingPolicy
TRANSPOSE_4x4_func	src/core/GLES_COMPUTE/cs_shaders/transpose.cs	48;"	d	file:
TRANSPOSE_8X8	src/core/GLES_COMPUTE/kernels/GCTransposeKernel.cpp	82;"	d	file:
TTRX	arm_compute/core/GPUTarget.h	/^    TTRX          = 0x250,$/;"	m	class:arm_compute::GPUTarget
TYPE_ALIAS	src/core/CL/cl_kernels/fixed_point.h	27;"	d
TableLookupValidationFixture	tests/validation/fixtures/TableLookupFixture.h	/^class TableLookupValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Target	arm_compute/graph/Types.h	/^enum class Target$/;"	c	namespace:arm_compute::graph
TaskExecutor	src/graph/Workload.cpp	/^TaskExecutor::TaskExecutor()$/;"	f	class:arm_compute::graph::TaskExecutor
TaskHandles	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^struct TaskHandles$/;"	s	namespace:arm_compute::graph::detail::__anon309	file:
Tensor	arm_compute/runtime/Tensor.h	/^class Tensor : public ITensor$/;"	c	namespace:arm_compute
Tensor	src/graph/Tensor.cpp	/^Tensor::Tensor(TensorID id, TensorDescriptor desc)$/;"	f	class:arm_compute::graph::Tensor
Tensor	src/runtime/Tensor.cpp	/^Tensor::Tensor()$/;"	f	class:Tensor
Tensor3D	src/core/CL/cl_kernels/helpers.h	/^typedef struct Tensor3D$/;"	s
Tensor3D	src/core/CL/cl_kernels/helpers.h	/^} Tensor3D;$/;"	t	typeref:struct:Tensor3D
Tensor3DAttributes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^struct Tensor3DAttributes$/;"	s
Tensor3DIterator	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^struct Tensor3DIterator$/;"	s
Tensor4D	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    Tensor4D(ShapeT shape) :$/;"	f	class:final
Tensor4D	src/core/CL/cl_kernels/helpers.h	/^typedef struct Tensor4D$/;"	s
Tensor4D	src/core/CL/cl_kernels/helpers.h	/^} Tensor4D;$/;"	t	typeref:struct:Tensor4D
Tensor4DShape	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  inline Tensor4DShape($/;"	f	struct:Tensor4DShape
Tensor4DShape	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^struct Tensor4DShape$/;"	s
TensorAllocator	arm_compute/runtime/TensorAllocator.h	/^class TensorAllocator : public ITensorAllocator$/;"	c	namespace:arm_compute
TensorAllocator	src/runtime/TensorAllocator.cpp	/^TensorAllocator::TensorAllocator(Tensor *owner)$/;"	f	class:TensorAllocator
TensorCache	tests/TensorCache.h	/^class TensorCache$/;"	c	namespace:arm_compute::test
TensorDescriptor	arm_compute/graph/TensorDescriptor.h	/^    TensorDescriptor(TensorShape      tensor_shape,$/;"	f	struct:arm_compute::graph::final
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo()$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(Format format)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(const HOGInfo &hog_info, unsigned int width, unsigned int height)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(const ITensorInfo &info)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(const TensorShape &tensor_shape, Format format)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(const TensorShape &tensor_shape, size_t num_channels, DataType data_type, QuantizationInfo quantization_info)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(const TensorShape &tensor_shape, size_t num_channels, DataType data_type, int fixed_point_position)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(size_t num_channels, DataType data_type, size_t fixed_point_position)$/;"	f	class:TensorInfo
TensorInfo	src/core/TensorInfo.cpp	/^TensorInfo::TensorInfo(unsigned int width, unsigned int height, Format format)$/;"	f	class:TensorInfo
TensorOrder	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^enum TensorOrder$/;"	g
TensorShape	arm_compute/core/TensorShape.h	/^    TensorShape(Ts... dims)$/;"	f	class:arm_compute::TensorShape
TensorShape	arm_compute/core/TensorShape.h	/^class TensorShape : public Dimensions<size_t>$/;"	c	namespace:arm_compute
Termination	arm_compute/core/Types.h	/^enum class Termination$/;"	c	namespace:arm_compute
TestCase	tests/framework/TestCase.h	/^class TestCase$/;"	c	namespace:arm_compute::test::framework
TestCaseFactory	tests/framework/TestCaseFactory.h	/^class TestCaseFactory$/;"	c	namespace:arm_compute::test::framework
TestCaseFactory	tests/framework/TestCaseFactory.h	/^inline TestCaseFactory::TestCaseFactory(std::string suite_name, std::string test_name, DatasetMode mode, Status status, std::string description)$/;"	f	class:arm_compute::test::framework::TestCaseFactory
TestCaseRegistrar	tests/framework/Registrars.h	/^inline TestCaseRegistrar<T>::TestCaseRegistrar(std::string test_name, DatasetMode mode, TestCaseFactory::Status status)$/;"	f	class:arm_compute::test::framework::detail::TestCaseRegistrar
TestCaseRegistrar	tests/framework/Registrars.h	/^inline TestCaseRegistrar<T>::TestCaseRegistrar(std::string test_name, DatasetMode mode, TestCaseFactory::Status status, D &&dataset)$/;"	f	class:arm_compute::test::framework::detail::TestCaseRegistrar
TestEq	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  inline bool TestEq(const Tensor4DShape& other) const$/;"	f	struct:Tensor4DShape
TestError	tests/framework/Exceptions.cpp	/^TestError::TestError(const std::string &msg, LogLevel level, std::string context)$/;"	f	class:arm_compute::test::framework::TestError
TestError	tests/framework/Exceptions.h	/^class TestError : public std::runtime_error$/;"	c	namespace:arm_compute::test::framework
TestFilter	tests/framework/TestFilter.cpp	/^TestFilter::TestFilter(DatasetMode mode, const std::string &name_filter, const std::string &id_filter)$/;"	f	class:arm_compute::test::framework::TestFilter
TestInfo	tests/framework/Framework.h	/^struct TestInfo$/;"	s	namespace:arm_compute::test::framework
TestResult	tests/framework/TestResult.h	/^    TestResult(Status status)$/;"	f	struct:arm_compute::test::framework::TestResult
TestResult	tests/framework/TestResult.h	/^    TestResult(Status status, const Profiler::MeasurementsMap &measurements)$/;"	f	struct:arm_compute::test::framework::TestResult
TestResult	tests/framework/TestResult.h	/^struct TestResult$/;"	s	namespace:arm_compute::test::framework
TestSuiteRegistrar	tests/framework/Registrars.h	/^inline TestSuiteRegistrar::TestSuiteRegistrar()$/;"	f	class:arm_compute::test::framework::detail::TestSuiteRegistrar
TestSuiteRegistrar	tests/framework/Registrars.h	/^inline TestSuiteRegistrar::TestSuiteRegistrar(std::string name)$/;"	f	class:arm_compute::test::framework::detail::TestSuiteRegistrar
Thread	src/runtime/CPP/CPPScheduler.cpp	/^Thread::Thread()$/;"	f	class:arm_compute::Thread
Thread	src/runtime/CPP/CPPScheduler.cpp	/^class Thread$/;"	c	namespace:arm_compute	file:
ThreadIdDecorator	arm_compute/core/utils/logging/LogMsgDecorators.h	/^class ThreadIdDecorator : public IDecorator$/;"	c	namespace:arm_compute::logging
ThreadInfo	arm_compute/core/CPP/CPPTypes.h	/^struct ThreadInfo$/;"	s	namespace:arm_compute
ThresholdDataset	tests/datasets/ThresholdDataset.h	/^class ThresholdDataset$/;"	c	namespace:arm_compute::test::datasets
ThresholdType	arm_compute/core/Types.h	/^enum class ThresholdType$/;"	c	namespace:arm_compute
ThresholdValidationFixture	tests/validation/fixtures/ThresholdFixture.h	/^class ThresholdValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
TileFn	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    typedef void (*TileFn)($/;"	t	class:depthwise::DepthwiseConvolution
TileFn	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        typedef void (*TileFn)(int, const T*, int, const T*, T*, int, int);$/;"	t	struct:winograd::WinogradGEMM::OutputTransform
TileFn	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        typedef void (*TileFn)(int, const T*, int, int, T*, int);$/;"	t	struct:winograd::WinogradGEMM::InputTransform
Tiny2DShapes	tests/datasets/ShapeDatasets.h	/^    Tiny2DShapes()$/;"	f	class:arm_compute::test::datasets::final
Tiny3DShapes	tests/datasets/ShapeDatasets.h	/^    Tiny3DShapes()$/;"	f	class:arm_compute::test::datasets::final
Tiny4DShapes	tests/datasets/ShapeDatasets.h	/^    Tiny4DShapes()$/;"	f	class:arm_compute::test::datasets::final
TinyConvolutionLayerDataset	tests/datasets/TinyConvolutionLayerDataset.h	/^    TinyConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
TinyDilatedConvolutionLayerDataset	tests/datasets/DilatedConvolutionLayerDataset.h	/^    TinyDilatedConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
TinyDirectConvolutionShapes	tests/datasets/ShapeDatasets.h	/^    TinyDirectConvolutionShapes()$/;"	f	class:arm_compute::test::datasets::final
TinyFullyConnectedLayerDataset	tests/datasets/FullyConnectedLayerDataset.h	/^    TinyFullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
TinyGEMMDataset	tests/datasets/TinyGEMMDataset.h	/^    TinyGEMMDataset()$/;"	f	class:arm_compute::test::datasets::final
TinyShapes	tests/datasets/ShapeDatasets.h	/^    TinyShapes()$/;"	f	class:arm_compute::test::datasets::final
Toggle	documentation/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
ToggleOption	tests/framework/command_line/ToggleOption.cpp	/^ToggleOption::ToggleOption(std::string name, bool default_value)$/;"	f	class:arm_compute::test::framework::ToggleOption
ToggleOption	tests/framework/command_line/ToggleOption.h	/^class ToggleOption : public SimpleOption<bool>$/;"	c	namespace:arm_compute::test::framework
Toi	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    typedef typename strategy::operand_type Toi;$/;"	t	class:arm_gemm::GemmInterleaved
Toi	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    typedef typename strategy::operand_type Toi;$/;"	t	class:arm_gemm::GemmNative
Toi	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    typedef typename strategy::operand_type Toi;$/;"	t	class:arm_gemm::GemvNativeTransposed
Toi	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    typedef typename strategy::operand_type Toi;$/;"	t	class:arm_gemm::GemvPretransposed
TopNPredictionsAccessor	utils/GraphUtils.cpp	/^TopNPredictionsAccessor::TopNPredictionsAccessor(const std::string &labels_path, size_t top_n, std::ostream &output_stream)$/;"	f	class:TopNPredictionsAccessor
Transform	src/core/NEON/kernels/arm_gemm/transform.hpp	/^    static inline void Transform(T *out, const T *const in, const int stride,$/;"	f	struct:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transform.hpp	/^    static void Transform(TOut *out, const TIn *const in, const int stride,$/;"	f	struct:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transform.hpp	/^void Transform($/;"	f
Transform	src/core/NEON/kernels/arm_gemm/transforms/a32_interleave_6way_32bit.hpp	/^inline void TransformImpl<6, 1, false, 4, 4>::Transform(T *out, const T *in, int ldin, int y0, int ymax, int k0, int kmax)$/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a32_transpose_interleave_8way_32bit.hpp	/^inline void TransformImpl<16, 1, true, 2, 2>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a32_transpose_interleave_8way_32bit.hpp	/^inline void TransformImpl<8, 1, true, 4, 4>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_block16_interleave4_8bit.hpp	/^void TransformImpl<4, 16, false, 1, 1>::Transform(T *out, const T *in, int ldin, int y0, int ymax, int k0, int kmax)$/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_interleave_8way_16bit.hpp	/^void TransformImpl<8, 1, false, 2, 2>::Transform(T *out, const T *in, int ldin, int y0, int ymax, int k0, int kmax)$/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_interleave_8way_32bit.hpp	/^inline void TransformImpl<8, 1, false, 4, 4>::Transform(T *out, const T *in, int ldin, int y0, int ymax, int k0, int kmax)$/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_interleave_8way_half_to_float.hpp	/^inline void TransformImpl<8, 1, false, 4, 2>::Transform(float *out, const __fp16 *in, int ldin, int y0, int ymax, int k0, int kmax)$/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_16bit.hpp	/^inline void TransformImpl<12, 1, true, 2, 2>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_16bit.hpp	/^inline void TransformImpl<6, 1, true, 4, 4>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_half_to_float.hpp	/^inline void TransformImpl<12, 1, true, 4, 2>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_24way_16bit.hpp	/^inline void TransformImpl<12, 1, true, 4, 4>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_24way_16bit.hpp	/^inline void TransformImpl<24, 1, true, 2, 2>::Transform($/;"	f	class:TransformImpl
Transform	src/core/NEON/kernels/arm_gemm/transforms/transpose_interleave_common.hpp	/^    static inline void Transform(TOut *out, const TIn *in, const int stride, const int x0, const int xmax, const int k0, const int kmax)$/;"	f	struct:TransposeInterleaveCommon
TransformImpl	src/core/NEON/kernels/arm_gemm/transform.hpp	/^struct TransformImpl$/;"	s
TransposeFixture	tests/benchmark/fixtures/TransposeFixture.h	/^class TransposeFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
TransposeInterleaveCommon	src/core/NEON/kernels/arm_gemm/transforms/transpose_interleave_common.hpp	/^struct TransposeInterleaveCommon$/;"	s
TransposeValidationFixture	tests/validation/fixtures/TransposeFixture.h	/^class TransposeValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Tri	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    typedef typename strategy::result_type  Tri;$/;"	t	class:arm_gemm::GemmInterleaved
Tri	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    typedef typename strategy::result_type  Tri;$/;"	t	class:arm_gemm::GemmNative
Tri	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    typedef typename strategy::result_type  Tri;$/;"	t	class:arm_gemm::GemvNativeTransposed
Tri	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    typedef typename strategy::result_type  Tri;$/;"	t	class:arm_gemm::GemvPretransposed
Type	arm_compute/runtime/Scheduler.h	/^    enum class Type$/;"	c	class:arm_compute::Scheduler
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<char>& v) $/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<double>& v) $/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<float>& v) $/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<int>& v) $/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<long double>& v) $/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<long long>& v) :c_endian {host_endian_char}, c_type {'i'}, len {sizeof(long long)} {}$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<long>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<short>& v) $/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<std::complex<double>>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<std::complex<float>>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<std::complex<long double>>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<unsigned char>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<unsigned int>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<unsigned long long>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<unsigned long>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^    Typestring(const std::vector<unsigned short>& v)$/;"	f	struct:npy::Typestring
Typestring	include/libnpy/npy.hpp	/^struct Typestring {$/;"	s	namespace:npy
U	arm_compute/core/Types.h	/^    U,       \/**< Cb\/U channel. *\/$/;"	m	class:arm_compute::Channel
U16	arm_compute/core/Types.h	/^    U16,      \/**< 1 channel, 1 U16 per channel *\/$/;"	m	class:arm_compute::Format
U16	arm_compute/core/Types.h	/^    U16,     \/**< unsigned 16-bit number *\/$/;"	m	class:arm_compute::DataType
U32	arm_compute/core/Types.h	/^    U32,      \/**< 1 channel, 1 U32 per channel *\/$/;"	m	class:arm_compute::Format
U32	arm_compute/core/Types.h	/^    U32,     \/**< unsigned 32-bit number *\/$/;"	m	class:arm_compute::DataType
U64	arm_compute/core/Types.h	/^    U64,     \/**< unsigned 64-bit number *\/$/;"	m	class:arm_compute::DataType
U8	arm_compute/core/Types.h	/^    U8,       \/**< 1 channel, 1 U8 per channel *\/$/;"	m	class:arm_compute::Format
U8	arm_compute/core/Types.h	/^    U8,      \/**< unsigned 8-bit number *\/$/;"	m	class:arm_compute::DataType
UKP_FUNC_ID_CHECK_VERSION	tests/framework/instruments/hwc.hpp	/^    UKP_FUNC_ID_CHECK_VERSION = 0,$/;"	e	enum:mali_userspace::__anon390::__anon391
UNDEFINED	arm_compute/core/Types.h	/^    UNDEFINED, \/**< Borders are left undefined *\/$/;"	m	class:arm_compute::BorderMode
UNKNOWN	arm_compute/core/GPUTarget.h	/^    UNKNOWN       = 0x101,$/;"	m	class:arm_compute::GPUTarget
UNKNOWN	arm_compute/core/Types.h	/^    UNKNOWN,  \/**< Unknown image format *\/$/;"	m	class:arm_compute::Format
UNKNOWN	arm_compute/core/Types.h	/^    UNKNOWN, \/** Unknown channel format *\/$/;"	m	class:arm_compute::Channel
UNKNOWN	arm_compute/core/Types.h	/^    UNKNOWN, \/**< Unknown data layout *\/$/;"	m	class:arm_compute::DataLayout
UNKNOWN	arm_compute/core/Types.h	/^    UNKNOWN, \/**< Unknown data type *\/$/;"	m	class:arm_compute::DataType
UNREACHABLE	src/core/NEON/kernels/arm_gemm/utils.hpp	28;"	d
UNSPECIFIED	arm_compute/graph/Types.h	/^    UNSPECIFIED, \/**< Unspecified Target *\/$/;"	m	class:arm_compute::graph::Target
USE_SEMAPHORE	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	33;"	d
UV88	arm_compute/core/Types.h	/^    UV88,     \/**< 2 channel, 1 U8 per channel *\/$/;"	m	class:arm_compute::Format
UnloadCompiler	include/CL/cl.hpp	/^UnloadCompiler()$/;"	f	namespace:cl
UnloadCompiler	include/CL/cl2.hpp	/^UnloadCompiler()$/;"	f	namespace:cl
UserEvent	include/CL/cl.hpp	/^    UserEvent($/;"	f	class:cl::UserEvent
UserEvent	include/CL/cl.hpp	/^    UserEvent() : Event() { }$/;"	f	class:cl::UserEvent
UserEvent	include/CL/cl.hpp	/^    UserEvent(const UserEvent& event) : Event(event) { }$/;"	f	class:cl::UserEvent
UserEvent	include/CL/cl.hpp	/^class UserEvent : public Event$/;"	c	namespace:cl
UserEvent	include/CL/cl2.hpp	/^    UserEvent($/;"	f	class:cl::UserEvent
UserEvent	include/CL/cl2.hpp	/^    UserEvent() : Event() { }$/;"	f	class:cl::UserEvent
UserEvent	include/CL/cl2.hpp	/^class UserEvent : public Event$/;"	c	namespace:cl
VALIDATE	tests/validation/CL/PixelWiseMultiplication.cpp	47;"	d	file:
VALIDATE	tests/validation/NEON/PixelWiseMultiplication.cpp	46;"	d	file:
VAND_IMPL	arm_compute/core/NEON/wrapper/intrinsics/and.h	33;"	d
VAND_IMPL	arm_compute/core/NEON/wrapper/intrinsics/and.h	57;"	d
VARIADIC_SIZE	tests/framework/Macros.h	53;"	d
VARIADIC_SIZE_IMPL	tests/framework/Macros.h	52;"	d
VDUP_N_IMPL	arm_compute/core/NEON/wrapper/intrinsics/dup_n.h	35;"	d
VDUP_N_IMPL	arm_compute/core/NEON/wrapper/intrinsics/dup_n.h	57;"	d
VECTOR_CLASS	include/CL/cl.hpp	648;"	d
VECTOR_CLASS	include/CL/cl.hpp	650;"	d
VECTOR_DECLARATION	src/core/CL/cl_kernels/helpers.h	62;"	d
VECTOR_OFFSET	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	216;"	d
VEC_DATA_TYPE	src/core/CL/cl_kernels/fixed_point.h	86;"	d
VEC_DATA_TYPE	src/core/CL/cl_kernels/fixed_point.h	93;"	d
VEC_DATA_TYPE	src/core/CL/cl_kernels/helpers.h	48;"	d
VEC_DATA_TYPE_STR	src/core/CL/cl_kernels/fixed_point.h	85;"	d
VEC_DATA_TYPE_STR	src/core/CL/cl_kernels/fixed_point.h	92;"	d
VEC_DATA_TYPE_STR	src/core/CL/cl_kernels/helpers.h	47;"	d
VERBOSE	arm_compute/core/utils/logging/Types.h	/^    VERBOSE, \/**< All logging messages *\/$/;"	m	class:arm_compute::logging::LogLevel
VGG16ActivationLayerDataset	tests/datasets/system_tests/vgg/vgg16/VGG16ActivationLayerDataset.h	/^    VGG16ActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
VGG16ConvolutionLayerDataset	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^    VGG16ConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
VGG16DirectConvolutionLayerDataset	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^    VGG16DirectConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
VGG16FullyConnectedLayerDataset	tests/datasets/system_tests/vgg/vgg16/VGG16FullyConnectedLayerDataset.h	/^    VGG16FullyConnectedLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
VGG16PoolingLayerDataset	tests/datasets/system_tests/vgg/vgg16/VGG16PoolingLayerDataset.h	/^    VGG16PoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
VLOAD	src/core/CL/cl_kernels/helpers.h	42;"	d
VLOAD2	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	290;"	d
VLOAD2_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	298;"	d
VLOAD2_UNPACK4_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	426;"	d
VLOAD2_UNPACK4_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	424;"	d
VLOAD2_UNPACK8_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	445;"	d
VLOAD2_UNPACK8_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	443;"	d
VLOAD3	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	301;"	d
VLOAD3_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	311;"	d
VLOAD3_UNPACK12_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	449;"	d
VLOAD3_UNPACK12_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	448;"	d
VLOAD3_UNPACK6_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	430;"	d
VLOAD3_UNPACK6_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	429;"	d
VLOAD4	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	314;"	d
VLOAD4_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	326;"	d
VLOAD4_UNPACK8_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	434;"	d
VLOAD4_UNPACK8_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	432;"	d
VLOAD5	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	329;"	d
VLOAD5_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	343;"	d
VLOADQ_IMPL	arm_compute/core/NEON/wrapper/intrinsics/load.h	49;"	d
VLOAD_IMPL	arm_compute/core/NEON/wrapper/intrinsics/load.h	33;"	d
VLOAD_IMPL	arm_compute/core/NEON/wrapper/intrinsics/load.h	65;"	d
VLOAD_STR	src/core/CL/cl_kernels/helpers.h	41;"	d
VMAX_IMPL	arm_compute/core/NEON/wrapper/intrinsics/max.h	33;"	d
VMAX_IMPL	arm_compute/core/NEON/wrapper/intrinsics/max.h	55;"	d
VMIN_IMPL	arm_compute/core/NEON/wrapper/intrinsics/min.h	33;"	d
VMIN_IMPL	arm_compute/core/NEON/wrapper/intrinsics/min.h	55;"	d
VSTORE	src/core/CL/cl_kernels/helpers.h	45;"	d
VSTORE2	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	294;"	d
VSTORE2_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	299;"	d
VSTORE2_PACK4_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	427;"	d
VSTORE2_PACK4_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	425;"	d
VSTORE2_PACK8_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	446;"	d
VSTORE2_PACK8_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	444;"	d
VSTORE3	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	306;"	d
VSTORE3_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	312;"	d
VSTORE4	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	320;"	d
VSTORE4_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	327;"	d
VSTORE4_PACK8_CURRENT_ITEM_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	435;"	d
VSTORE4_PACK8_HALF	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	433;"	d
VSTORE5	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	336;"	d
VSTORE5_CURRENT_ITEM	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	344;"	d
VSTORE_IMPL	arm_compute/core/NEON/wrapper/intrinsics/store.h	33;"	d
VSTORE_IMPL	arm_compute/core/NEON/wrapper/intrinsics/store.h	59;"	d
VSTORE_STR	src/core/CL/cl_kernels/helpers.h	44;"	d
ValidRegion	arm_compute/core/Types.h	/^        ValidRegion, \/**< Prints the valid region of the Tensor object *\/$/;"	m	class:arm_compute::HOGNormType::IOFormatInfo::PrintRegion
ValidRegion	arm_compute/core/Types.h	/^    ValidRegion()$/;"	f	struct:arm_compute::ValidRegion
ValidRegion	arm_compute/core/Types.h	/^    ValidRegion(const Coordinates &an_anchor, const TensorShape &a_shape)$/;"	f	struct:arm_compute::ValidRegion
ValidRegion	arm_compute/core/Types.h	/^    ValidRegion(const Coordinates &an_anchor, const TensorShape &a_shape, size_t num_dimensions)$/;"	f	struct:arm_compute::ValidRegion
ValidRegion	arm_compute/core/Types.h	/^struct ValidRegion$/;"	s	namespace:arm_compute
Value	tests/framework/instruments/Measurement.h	/^        Value(bool is_floating)$/;"	f	struct:arm_compute::test::framework::Measurement::Value
Value	tests/framework/instruments/Measurement.h	/^    struct Value$/;"	s	struct:arm_compute::test::framework::Measurement
Vector	src/core/CL/cl_kernels/helpers.h	/^typedef struct Vector$/;"	s
Vector	src/core/CL/cl_kernels/helpers.h	/^} Vector;$/;"	t	typeref:struct:Vector
VectorAttributes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^struct VectorAttributes$/;"	s
VectorIterator	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^struct VectorIterator$/;"	s
WALL_CLOCK_TIMER	tests/framework/instruments/Instruments.h	/^    WALL_CLOCK_TIMER        = 0x0100,$/;"	m	class:arm_compute::test::framework::InstrumentType
WARN	arm_compute/core/utils/logging/Types.h	/^    WARN,    \/**< Warning log level *\/$/;"	m	class:arm_compute::logging::LogLevel
WIDTH	arm_compute/core/Types.h	/^    WIDTH,   \/**< width *\/$/;"	m	class:arm_compute::DataLayoutDimension
WIN32_LEAN_AND_MEAN	include/linux/EGL/eglplatform.h	72;"	d
WINDOW_BLOCK	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^      static constexpr unsigned int WINDOW_BLOCK = 16;  \/\/ Base size of window$/;"	m	struct:winograd::WinogradGEMM::InputTransform
WINDOW_BLOCK	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^      static constexpr unsigned int WINDOW_BLOCK = 16;  \/\/ Base size of window$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
WRAP	arm_compute/core/Types.h	/^    WRAP,    \/**< Wrap around *\/$/;"	m	class:arm_compute::ConvertPolicy
WRAP	tests/validation/FixedPoint.h	/^    WRAP,    \/**< Wrap policy *\/$/;"	m	class:arm_compute::test::fixed_point_arithmetic::OverflowPolicy
WRAP_VALIDATE	tests/validation/NEON/PixelWiseMultiplication.cpp	47;"	d	file:
W_BITS	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^constexpr int   W_BITS                = 14;$/;"	v
W_BITS	tests/validation/reference/OpticalFlow.cpp	/^constexpr int   W_BITS                = 14;$/;"	m	namespace:arm_compute::test::validation::reference::__anon544	file:
WaitForEvents	include/CL/cl.hpp	/^WaitForEvents(const VECTOR_CLASS<Event>& events)$/;"	f	namespace:cl
WaitForEvents	include/CL/cl2.hpp	/^WaitForEvents(const vector<Event>& events)$/;"	f	namespace:cl
WallClockTimer	tests/framework/instruments/WallClockTimer.h	/^    WallClockTimer(ScaleFactor scale_factor)$/;"	f	class:arm_compute::test::framework::WallClockTimer
WallClockTimer	tests/framework/instruments/WallClockTimer.h	/^class WallClockTimer : public Instrument$/;"	c	namespace:arm_compute::test::framework
WarpAffineValidationFixture	tests/validation/fixtures/WarpAffineFixture.h	/^class WarpAffineValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WarpPerspectiveValidationFixture	tests/validation/fixtures/WarpPerspectiveFixture.h	/^class WarpPerspectiveValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WeightOrder	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^enum WeightOrder$/;"	g
WeightsInfo	arm_compute/core/Types.h	/^    WeightsInfo()$/;"	f	class:arm_compute::HOGNormType::WeightsInfo
WeightsInfo	arm_compute/core/Types.h	/^    WeightsInfo(bool are_reshaped, unsigned int kernel_width, unsigned int kernel_height, unsigned int num_kernels)$/;"	f	class:arm_compute::HOGNormType::WeightsInfo
WeightsInfo	arm_compute/core/Types.h	/^class WeightsInfo$/;"	c	class:arm_compute::HOGNormType
WeightsTransform	arm_compute/core/NEON/kernels/convolution/winograd/transforms/kernel.hpp	/^WinogradGEMM<otr, otc, kr, kc>::WeightsTransform<T>::WeightsTransform($/;"	f	class:WinogradGEMM::WeightsTransform
WeightsTransform	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    struct WeightsTransform$/;"	s	class:winograd::WinogradGEMM
WeightsTransform	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_3x3_fp32.cpp	/^  template struct WinogradGEMM<2, 2, 3, 3>::WeightsTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
WeightsTransform	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_5x5_fp32.cpp	/^  template class WinogradGEMM<2, 2, 5, 5>::WeightsTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:class:winograd::WinogradGEMM::	file:
WeightsTransform	src/core/NEON/kernels/convolution/winograd/transforms/weights_4x4_3x3_fp32.cpp	/^  template struct WinogradGEMM<4, 4, 3, 3>::WeightsTransform<float>;$/;"	m	class:winograd::WinogradGEMM	typeref:struct:winograd::WinogradGEMM::	file:
WidthConcatenateLayerShapes	tests/datasets/ShapeDatasets.h	/^    WidthConcatenateLayerShapes()$/;"	f	class:arm_compute::test::datasets::final
WidthConcatenateLayerValidationFixture	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^class WidthConcatenateLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
Window	arm_compute/core/Window.h	/^    constexpr Window()$/;"	f	class:arm_compute::Window
Window	arm_compute/core/Window.h	/^class Window$/;"	c	namespace:arm_compute
WinogradConvolutionLayerFastMathValidationFixture	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^class WinogradConvolutionLayerFastMathValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WinogradConvolutionLayerFixture	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^class WinogradConvolutionLayerFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::benchmark
WinogradConvolutionLayerValidationFixture	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^class WinogradConvolutionLayerValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WinogradFilterTransformValidationFixture	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^class WinogradFilterTransformValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WinogradGEMM	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^class WinogradGEMM$/;"	c	namespace:winograd
WinogradInfo	arm_compute/core/Types.h	/^    WinogradInfo(Size2D output_tile_sz, Size2D kernel_sz, Size2D input_dims, PadStrideInfo conv_info, DataLayout data_layout)$/;"	f	struct:arm_compute::HOGNormType::WinogradInfo
WinogradInfo	arm_compute/core/Types.h	/^struct WinogradInfo$/;"	s	class:arm_compute::HOGNormType
WinogradInputTransformDataset	tests/datasets/WinogradInputTransformDataset.h	/^class WinogradInputTransformDataset$/;"	c	namespace:arm_compute::test::datasets
WinogradInputTransformValidationFixture	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^class WinogradInputTransformValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WinogradOutputTransformDataset	tests/datasets/WinogradOutputTransformDataset.h	/^class WinogradOutputTransformDataset$/;"	c	namespace:arm_compute::test::datasets
WinogradOutputTransformValidationFixture	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^class WinogradOutputTransformValidationFixture : public framework::Fixture$/;"	c	namespace:arm_compute::test::validation
WinogradTransformType	tests/validation/reference/Winograd.h	/^enum class WinogradTransformType$/;"	c	namespace:arm_compute::test::validation::reference
Wrapper	include/CL/cl.hpp	/^    Wrapper() : object_(NULL) { }$/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl.hpp	/^    Wrapper() : object_(NULL), referenceCountable_(false) $/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl.hpp	/^    Wrapper(const Wrapper<cl_type>& rhs)$/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl.hpp	/^    Wrapper(const cl_type &obj) : object_(obj) { }$/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl.hpp	/^    Wrapper(const cl_type &obj) : object_(obj), referenceCountable_(false) $/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl.hpp	/^class Wrapper$/;"	c	namespace:cl::detail
Wrapper	include/CL/cl.hpp	/^class Wrapper<cl_device_id>$/;"	c	namespace:cl::detail
Wrapper	include/CL/cl2.hpp	/^    Wrapper() : object_(NULL) { }$/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl2.hpp	/^    Wrapper() : object_(NULL), referenceCountable_(false) $/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl2.hpp	/^    Wrapper(const Wrapper<cl_type>& rhs)$/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl2.hpp	/^    Wrapper(const cl_type &obj, bool retainObject) : $/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl2.hpp	/^    Wrapper(const cl_type &obj, bool retainObject) : object_(obj) $/;"	f	class:cl::detail::Wrapper
Wrapper	include/CL/cl2.hpp	/^class Wrapper$/;"	c	namespace:cl::detail
Wrapper	include/CL/cl2.hpp	/^class Wrapper<cl_device_id>$/;"	c	namespace:cl::detail
Y	arm_compute/core/Types.h	/^    Y,       \/**< Luma channel. *\/$/;"	m	class:arm_compute::Channel
YOLOV2ActivationLayerDataset	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^    YOLOV2ActivationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
YOLOV2ActivationLayerLINEARDataset	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^    YOLOV2ActivationLayerLINEARDataset()$/;"	f	class:arm_compute::test::datasets::final
YOLOV2ActivationLayerRELUDataset	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^    YOLOV2ActivationLayerRELUDataset()$/;"	f	class:arm_compute::test::datasets::final
YOLOV2BatchNormalizationLayerDataset	tests/datasets/system_tests/yolo/v2/YOLOV2BatchNormalizationLayerDataset.h	/^    YOLOV2BatchNormalizationLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
YOLOV2ConvolutionLayerDataset	tests/datasets/system_tests/yolo/v2/YOLOV2ConvolutionLayerDataset.h	/^    YOLOV2ConvolutionLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
YOLOV2PoolingLayerDataset	tests/datasets/system_tests/yolo/v2/YOLOV2PoolingLayerDataset.h	/^    YOLOV2PoolingLayerDataset()$/;"	f	class:arm_compute::test::datasets::final
YUV444	arm_compute/core/Types.h	/^    YUV444,   \/**< A 3 plane of 8 bit 4:4:4 sampled Y, U, V planes *\/$/;"	m	class:arm_compute::Format
YUYV422	arm_compute/core/Types.h	/^    YUYV422,  \/**< A single plane of 32-bit macro pixel of Y0, U0, Y1, V0 bytes *\/$/;"	m	class:arm_compute::Format
ZipDataset	tests/framework/datasets/ZipDataset.h	/^    ZipDataset(T &&dataset1, U &&dataset2)$/;"	f	class:arm_compute::test::framework::dataset::ZipDataset
ZipDataset	tests/framework/datasets/ZipDataset.h	/^class ZipDataset : public Dataset$/;"	c	namespace:arm_compute::test::framework::dataset
_A_batch_stride	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _A_batch_stride=0;$/;"	m	class:arm_gemm::GemmCommon
_A_multi_stride	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _A_multi_stride=0;$/;"	m	class:arm_gemm::GemmCommon
_A_pretransposed	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const Toi *_A_pretransposed = nullptr;$/;"	m	class:arm_gemm::GemvPretransposed
_Aptr	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    const To *_Aptr=nullptr;$/;"	m	class:arm_gemm::GemmCommon
_B_multi_stride	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _B_multi_stride=0;$/;"	m	class:arm_gemm::GemmCommon
_B_pretranspose	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    Tensor                             _B_pretranspose;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_B_pretransposed	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    Tensor                     _B_pretransposed;$/;"	m	class:arm_compute::NEGEMM
_B_pretransposed	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _B_pretransposed;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_B_pretransposed	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    Tensor                     _B_pretransposed;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_B_transposed	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const Toi     *_B_transposed  = nullptr;$/;"	m	class:arm_gemm::GemmInterleaved
_Bptr	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    const To *_Bptr=nullptr;$/;"	m	class:arm_gemm::GemmCommon
_CL_STRINGIFY	include/CL/cl_platform.h	1443;"	d
_C_batch_stride	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _C_batch_stride=0;$/;"	m	class:arm_gemm::GemmCommon
_C_multi_stride	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _C_multi_stride=0;$/;"	m	class:arm_gemm::GemmCommon
_Cptr	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    Tr *_Cptr=nullptr;$/;"	m	class:arm_gemm::GemmCommon
_DECLARE_SDOT	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8/dot_toolchain_support.h	26;"	d
_DECLARE_UDOT	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8/dot_toolchain_support.h	26;"	d
_FBDEV_WINDOW_H_	include/linux/EGL/fbdev_window.h	13;"	d
_Known_bound	support/ToolchainSupport.h	/^    typedef void _Known_bound; \/**< Should never be used *\/$/;"	t	struct:arm_compute::support::cpp14::_Unique_if
_Ksize	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const unsigned int _Ksize;$/;"	m	class:arm_gemm::GemmInterleaved
_Ksize	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    const unsigned int _Ksize;$/;"	m	class:arm_gemm::GemmNative
_Ksize	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    const unsigned int _Ksize;$/;"	m	class:arm_gemm::GemvNativeTransposed
_Ksize	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const unsigned int _Ksize;$/;"	m	class:arm_gemm::GemvPretransposed
_L1_cache_size	arm_compute/core/CPP/CPPTypes.h	/^    unsigned int          _L1_cache_size = 32768;$/;"	m	class:arm_compute::final
_L2_cache_size	arm_compute/core/CPP/CPPTypes.h	/^    unsigned int          _L2_cache_size = 262144;$/;"	m	class:arm_compute::final
_Mround	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    unsigned int _Mround  = 0;$/;"	m	class:arm_gemm::GemmInterleaved
_Msize	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const unsigned int _Msize;$/;"	m	class:arm_gemm::GemmInterleaved
_Msize	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    const unsigned int _Msize;$/;"	m	class:arm_gemm::GemmNative
_Nsize	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const unsigned int _Nsize;$/;"	m	class:arm_gemm::GemmInterleaved
_Nsize	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    const unsigned int _Nsize;$/;"	m	class:arm_gemm::GemmNative
_Nsize	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    const unsigned int _Nsize;$/;"	m	class:arm_gemm::GemvNativeTransposed
_Nsize	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const unsigned int _Nsize;$/;"	m	class:arm_gemm::GemvPretransposed
_Single_object	support/ToolchainSupport.h	/^    typedef std::unique_ptr<T> _Single_object; \/**< Single object type *\/$/;"	t	struct:arm_compute::support::cpp14::_Unique_if
_Unique_if	support/ToolchainSupport.h	/^struct _Unique_if$/;"	s	namespace:arm_compute::support::cpp14
_Unique_if	support/ToolchainSupport.h	/^struct _Unique_if<T[N]>$/;"	s	namespace:arm_compute::support::cpp14
_Unique_if	support/ToolchainSupport.h	/^struct _Unique_if<T[]>$/;"	s	namespace:arm_compute::support::cpp14
_Unknown_bound	support/ToolchainSupport.h	/^    typedef std::unique_ptr<T[]> _Unknown_bound; \/**< Array type *\/$/;"	t	struct:arm_compute::support::cpp14::_Unique_if
__ARM_ASSEMBLY_HELPER_H__	arm_compute/runtime/NEON/AssemblyHelper.h	25;"	d
__ARM_COMPUTE_ACCESS_WINDOW_AUTO_PADDING_H__	arm_compute/core/AccessWindowAutoPadding.h	25;"	d
__ARM_COMPUTE_ALLOCATOR_H__	arm_compute/runtime/Allocator.h	25;"	d
__ARM_COMPUTE_ARRAY_H__	arm_compute/runtime/Array.h	25;"	d
__ARM_COMPUTE_ASSEMBLY_GEMM_KERNEL_WRAPPER_H__	arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h	25;"	d
__ARM_COMPUTE_BLOBLIFETIMEMANAGER_H__	arm_compute/runtime/BlobLifetimeManager.h	25;"	d
__ARM_COMPUTE_BLOBMEMORYPOOL_H__	arm_compute/runtime/BlobMemoryPool.h	25;"	d
__ARM_COMPUTE_CLABSOLUTEDIFFERENCEKERNEL_H__	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	25;"	d
__ARM_COMPUTE_CLABSOLUTEDIFFERENCE_H__	arm_compute/runtime/CL/functions/CLAbsoluteDifference.h	25;"	d
__ARM_COMPUTE_CLACCUMULATEKERNEL_H__	arm_compute/core/CL/kernels/CLAccumulateKernel.h	25;"	d
__ARM_COMPUTE_CLACCUMULATE_H__	arm_compute/runtime/CL/functions/CLAccumulate.h	25;"	d
__ARM_COMPUTE_CLACTIVATIONLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	25;"	d
__ARM_COMPUTE_CLACTIVATIONLAYER_H__	arm_compute/runtime/CL/functions/CLActivationLayer.h	25;"	d
__ARM_COMPUTE_CLARITHMETICADDITIONKERNEL_H__	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	25;"	d
__ARM_COMPUTE_CLARITHMETICADDITION_H__	arm_compute/runtime/CL/functions/CLArithmeticAddition.h	25;"	d
__ARM_COMPUTE_CLARITHMETICSUBTRACTIONKERNEL_H__	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	25;"	d
__ARM_COMPUTE_CLARITHMETICSUBTRACTION_H__	arm_compute/runtime/CL/functions/CLArithmeticSubtraction.h	25;"	d
__ARM_COMPUTE_CLARRAY_H__	arm_compute/runtime/CL/CLArray.h	25;"	d
__ARM_COMPUTE_CLBATCHNORMALIZATIONLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	25;"	d
__ARM_COMPUTE_CLBATCHNORMALIZATIONLAYER_H__	arm_compute/runtime/CL/functions/CLBatchNormalizationLayer.h	25;"	d
__ARM_COMPUTE_CLBITWISEANDKERNEL_H__	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	25;"	d
__ARM_COMPUTE_CLBITWISEAND_H__	arm_compute/runtime/CL/functions/CLBitwiseAnd.h	25;"	d
__ARM_COMPUTE_CLBITWISENOTKERNEL_H__	arm_compute/core/CL/kernels/CLBitwiseNotKernel.h	25;"	d
__ARM_COMPUTE_CLBITWISENOT_H__	arm_compute/runtime/CL/functions/CLBitwiseNot.h	25;"	d
__ARM_COMPUTE_CLBITWISEORKERNEL_H__	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	25;"	d
__ARM_COMPUTE_CLBITWISEOR_H__	arm_compute/runtime/CL/functions/CLBitwiseOr.h	25;"	d
__ARM_COMPUTE_CLBITWISEXORKERNEL_H__	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	25;"	d
__ARM_COMPUTE_CLBITWISEXOR_H__	arm_compute/runtime/CL/functions/CLBitwiseXor.h	25;"	d
__ARM_COMPUTE_CLBOX3X3KERNEL_H__	arm_compute/core/CL/kernels/CLBox3x3Kernel.h	25;"	d
__ARM_COMPUTE_CLBOX3X3_H__	arm_compute/runtime/CL/functions/CLBox3x3.h	25;"	d
__ARM_COMPUTE_CLBUFFERALLOCATOR_H__	arm_compute/runtime/CL/CLBufferAllocator.h	25;"	d
__ARM_COMPUTE_CLCANNYEDGEKERNEL_H__	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	25;"	d
__ARM_COMPUTE_CLCANNYEDGE_H__	arm_compute/runtime/CL/functions/CLCannyEdge.h	25;"	d
__ARM_COMPUTE_CLCHANNELCOMBINEKERNEL_H__	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	25;"	d
__ARM_COMPUTE_CLCHANNELCOMBINE_H__	arm_compute/runtime/CL/functions/CLChannelCombine.h	25;"	d
__ARM_COMPUTE_CLCHANNELEXTRACTKERNEL_H__	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	25;"	d
__ARM_COMPUTE_CLCHANNELEXTRACT_H__	arm_compute/runtime/CL/functions/CLChannelExtract.h	25;"	d
__ARM_COMPUTE_CLCHANNELSHUFFLELAYERKERNEL_H__	arm_compute/core/CL/kernels/CLChannelShuffleLayerKernel.h	25;"	d
__ARM_COMPUTE_CLCHANNELSHUFFLELAYER_H__	arm_compute/runtime/CL/functions/CLChannelShuffleLayer.h	25;"	d
__ARM_COMPUTE_CLCOL2IMKERNEL_H__	arm_compute/core/CL/kernels/CLCol2ImKernel.h	25;"	d
__ARM_COMPUTE_CLCOLORCONVERTKERNEL_H__	arm_compute/core/CL/kernels/CLColorConvertKernel.h	25;"	d
__ARM_COMPUTE_CLCOLORCONVERT_H__	arm_compute/runtime/CL/functions/CLColorConvert.h	25;"	d
__ARM_COMPUTE_CLCONVERTFULLYCONNECTEDWEIGHTSKERNEL_H__	arm_compute/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.h	25;"	d
__ARM_COMPUTE_CLCONVERTFULLYCONNECTEDWEIGHTS_H__	arm_compute/runtime/CL/functions/CLConvertFullyConnectedWeights.h	25;"	d
__ARM_COMPUTE_CLCONVOLUTIONKERNEL_H__	arm_compute/core/CL/kernels/CLConvolutionKernel.h	25;"	d
__ARM_COMPUTE_CLCONVOLUTIONLAYER_H__	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	25;"	d
__ARM_COMPUTE_CLCONVOLUTION_H__	arm_compute/runtime/CL/functions/CLConvolution.h	25;"	d
__ARM_COMPUTE_CLCOPYKERNEL_H__	arm_compute/core/CL/kernels/CLCopyKernel.h	25;"	d
__ARM_COMPUTE_CLCOPY_H__	arm_compute/runtime/CL/functions/CLCopy.h	25;"	d
__ARM_COMPUTE_CLDECONVOLUTIONLAYERUPSAMPLEKERNEL_H__	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	25;"	d
__ARM_COMPUTE_CLDECONVOLUTIONLAYERUPSAMPLE_H__	arm_compute/runtime/CL/functions/CLDeconvolutionLayerUpsample.h	25;"	d
__ARM_COMPUTE_CLDECONVOLUTIONLAYER_H__	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	25;"	d
__ARM_COMPUTE_CLDEPTHCONCATENATEKERNEL_H__	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	26;"	d
__ARM_COMPUTE_CLDEPTHCONCATENATE_H__	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	25;"	d
__ARM_COMPUTE_CLDEPTHCONVERTKERNEL_H__	arm_compute/core/CL/kernels/CLDepthConvertLayerKernel.h	25;"	d
__ARM_COMPUTE_CLDEPTHCONVERT_H__	arm_compute/runtime/CL/functions/CLDepthConvertLayer.h	25;"	d
__ARM_COMPUTE_CLDEPTHWISECONVOLUTIONNCHWKERNEL3x3_H__	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	25;"	d
__ARM_COMPUTE_CLDEPTHWISECONVOLUTIONNHWCKERNEL3x3_H__	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	25;"	d
__ARM_COMPUTE_CLDEPTHWISECONVOLUTION_H__	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	25;"	d
__ARM_COMPUTE_CLDEPTHWISEIM2COLKERNEL_H__	arm_compute/core/CL/kernels/CLDepthwiseIm2ColKernel.h	25;"	d
__ARM_COMPUTE_CLDEPTHWISEVECTORTOTENSORKERNEL_H__	arm_compute/core/CL/kernels/CLDepthwiseVectorToTensorKernel.h	25;"	d
__ARM_COMPUTE_CLDEPTHWISEWEIGHTSRESHAPEKERNEL_H__	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	25;"	d
__ARM_COMPUTE_CLDEQUANTIZATIONLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	25;"	d
__ARM_COMPUTE_CLDEQUANTIZATIONLAYER_H__	arm_compute/runtime/CL/functions/CLDequantizationLayer.h	25;"	d
__ARM_COMPUTE_CLDERIVATIVEKERNEL_H__	arm_compute/core/CL/kernels/CLDerivativeKernel.h	25;"	d
__ARM_COMPUTE_CLDERIVATIVE_H__	arm_compute/runtime/CL/functions/CLDerivative.h	25;"	d
__ARM_COMPUTE_CLDILATEKERNEL_H__	arm_compute/core/CL/kernels/CLDilateKernel.h	25;"	d
__ARM_COMPUTE_CLDILATE_H__	arm_compute/runtime/CL/functions/CLDilate.h	25;"	d
__ARM_COMPUTE_CLDIRECTCONVOLUTIONLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	25;"	d
__ARM_COMPUTE_CLDIRECTCONVOLUTIONLAYEROUTPUTSTAGEKERNEL_H__	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	25;"	d
__ARM_COMPUTE_CLDIRECTCONVOLUTIONLAYER_H__	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	25;"	d
__ARM_COMPUTE_CLDISTRIBUTION1D_H__	arm_compute/runtime/CL/CLDistribution1D.h	25;"	d
__ARM_COMPUTE_CLEQUALIZEHISTOGRAM_H__	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	25;"	d
__ARM_COMPUTE_CLERODEKERNEL_H__	arm_compute/core/CL/kernels/CLErodeKernel.h	25;"	d
__ARM_COMPUTE_CLERODE_H__	arm_compute/runtime/CL/functions/CLErode.h	25;"	d
__ARM_COMPUTE_CLFASTCORNERSKERNEL_H__	arm_compute/core/CL/kernels/CLFastCornersKernel.h	25;"	d
__ARM_COMPUTE_CLFASTCORNERS_H__	arm_compute/runtime/CL/functions/CLFastCorners.h	25;"	d
__ARM_COMPUTE_CLFILLBORDERKERNEL_H__	arm_compute/core/CL/kernels/CLFillBorderKernel.h	25;"	d
__ARM_COMPUTE_CLFILLBORDER_H__	arm_compute/runtime/CL/functions/CLFillBorder.h	25;"	d
__ARM_COMPUTE_CLFLATTENLAYER_H__	arm_compute/runtime/CL/functions/CLFlattenLayer.h	25;"	d
__ARM_COMPUTE_CLFLOORKERNEL_H__	arm_compute/core/CL/kernels/CLFloorKernel.h	25;"	d
__ARM_COMPUTE_CLFLOOR_H__	arm_compute/runtime/CL/functions/CLFloor.h	25;"	d
__ARM_COMPUTE_CLFULLYCONNECTEDLAYER_H__	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	25;"	d
__ARM_COMPUTE_CLFUNCTIONS_H__	arm_compute/runtime/CL/CLFunctions.h	25;"	d
__ARM_COMPUTE_CLGAUSSIAN3X3KERNEL_H__	arm_compute/core/CL/kernels/CLGaussian3x3Kernel.h	25;"	d
__ARM_COMPUTE_CLGAUSSIAN3X3_H__	arm_compute/runtime/CL/functions/CLGaussian3x3.h	25;"	d
__ARM_COMPUTE_CLGAUSSIAN5X5KERNEL_H__	arm_compute/core/CL/kernels/CLGaussian5x5Kernel.h	25;"	d
__ARM_COMPUTE_CLGAUSSIAN5X5_H__	arm_compute/runtime/CL/functions/CLGaussian5x5.h	25;"	d
__ARM_COMPUTE_CLGAUSSIANPYRAMIDKERNEL_H__	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	25;"	d
__ARM_COMPUTE_CLGAUSSIANPYRAMID_H__	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	25;"	d
__ARM_COMPUTE_CLGEMMCONVOLUTIONLAYER_H__	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	25;"	d
__ARM_COMPUTE_CLGEMMINTERLEAVE4X4KERNEL_H__	arm_compute/core/CL/kernels/CLGEMMInterleave4x4Kernel.h	25;"	d
__ARM_COMPUTE_CLGEMMINTERLEAVE4X4_H__	arm_compute/runtime/CL/functions/CLGEMMInterleave4x4.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWPMATRIXMULTIPLYCORE_H__	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWPMATRIXMULTIPLYKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWPOFFSETCONTRIBUTIONKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWPOUTPUTSTAGE_H__	arm_compute/runtime/CL/functions/CLGEMMLowpOutputStage.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWPQUANTIZEDOWNINT32TOUINT8SCALEBYFIXEDPOINTKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWPQUANTIZEDOWNINT32TOUINT8SCALEKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMLOWREDUCTIONKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMMATRIXACCUMULATEBIASESKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMMATRIXADDITIONKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMMatrixAdditionKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMMATRIXMULTIPLYKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMMATRIXVECTORMULTIPLYKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMTRANSPOSE1XWKERNEL_H__	arm_compute/core/CL/kernels/CLGEMMTranspose1xWKernel.h	25;"	d
__ARM_COMPUTE_CLGEMMTRANSPOSE1XW_H__	arm_compute/runtime/CL/functions/CLGEMMTranspose1xW.h	25;"	d
__ARM_COMPUTE_CLGEMM_H__	arm_compute/runtime/CL/functions/CLGEMM.h	25;"	d
__ARM_COMPUTE_CLHARRISCORNERSKERNEL_H__	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	25;"	d
__ARM_COMPUTE_CLHARRISCORNERS_H__	arm_compute/runtime/CL/functions/CLHarrisCorners.h	25;"	d
__ARM_COMPUTE_CLHELPERS_H__	arm_compute/core/CL/CLHelpers.h	25;"	d
__ARM_COMPUTE_CLHISTOGRAMKERNEL_H__	arm_compute/core/CL/kernels/CLHistogramKernel.h	25;"	d
__ARM_COMPUTE_CLHISTOGRAM_H__	arm_compute/runtime/CL/functions/CLHistogram.h	25;"	d
__ARM_COMPUTE_CLHOGDESCRIPTORKERNEL_H__	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	25;"	d
__ARM_COMPUTE_CLHOGDESCRIPTOR_H__	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	25;"	d
__ARM_COMPUTE_CLHOGDETECTORKERNEL_H__	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	25;"	d
__ARM_COMPUTE_CLHOGDETECTOR_H__	arm_compute/runtime/CL/functions/CLHOGDetector.h	25;"	d
__ARM_COMPUTE_CLHOGGRADIENT_H__	arm_compute/runtime/CL/functions/CLHOGGradient.h	25;"	d
__ARM_COMPUTE_CLHOGMULTIDETECTION_H__	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	25;"	d
__ARM_COMPUTE_CLHOG_H__	arm_compute/runtime/CL/CLHOG.h	25;"	d
__ARM_COMPUTE_CLIM2COLKERNEL_H__	arm_compute/core/CL/kernels/CLIm2ColKernel.h	25;"	d
__ARM_COMPUTE_CLINTEGRALIMAGEKERNEL_H__	arm_compute/core/CL/kernels/CLIntegralImageKernel.h	25;"	d
__ARM_COMPUTE_CLINTEGRALIMAGE_H__	arm_compute/runtime/CL/functions/CLIntegralImage.h	25;"	d
__ARM_COMPUTE_CLKERNELLIBRARY_H__	arm_compute/core/CL/CLKernelLibrary.h	25;"	d
__ARM_COMPUTE_CLKERNELS_H__	arm_compute/core/CL/CLKernels.h	25;"	d
__ARM_COMPUTE_CLL2NORMALIZELAYERKERNEL_H__	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	25;"	d
__ARM_COMPUTE_CLL2NORMALIZELAYER_H__	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	25;"	d
__ARM_COMPUTE_CLLAPLACIANPYRAMID_H__	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	25;"	d
__ARM_COMPUTE_CLLAPLACIANRECONSTRUCT_H__	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	25;"	d
__ARM_COMPUTE_CLLKTRACKERKERNEL_H__	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	25;"	d
__ARM_COMPUTE_CLLOCALLYCONNECTEDLAYER_H__	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	25;"	d
__ARM_COMPUTE_CLLOCALLYCONNECTEDMATRIXMULTIPLYKERNEL_H__	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_CLLSTMLAYER_H__	arm_compute/runtime/CL/functions/CLLSTMLayer.h	25;"	d
__ARM_COMPUTE_CLLUTALLOCATOR_H__	arm_compute/runtime/CL/CLLutAllocator.h	25;"	d
__ARM_COMPUTE_CLLUT_H__	arm_compute/runtime/CL/CLLut.h	25;"	d
__ARM_COMPUTE_CLMAGNITUDEPHASEKERNEL_H__	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	25;"	d
__ARM_COMPUTE_CLMAGNITUDE_H__	arm_compute/runtime/CL/functions/CLMagnitude.h	25;"	d
__ARM_COMPUTE_CLMEANSTDDEVKERNEL_H__	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	25;"	d
__ARM_COMPUTE_CLMEANSTDDEV_H__	arm_compute/runtime/CL/functions/CLMeanStdDev.h	25;"	d
__ARM_COMPUTE_CLMEDIAN3X3KERNEL_H__	arm_compute/core/CL/kernels/CLMedian3x3Kernel.h	25;"	d
__ARM_COMPUTE_CLMEDIAN3X3_H__	arm_compute/runtime/CL/functions/CLMedian3x3.h	25;"	d
__ARM_COMPUTE_CLMEMORYGROUP_H__	arm_compute/runtime/CL/CLMemoryGroup.h	25;"	d
__ARM_COMPUTE_CLMINMAXLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLMinMaxLayerKernel.h	25;"	d
__ARM_COMPUTE_CLMINMAXLOCATIONKERNEL_H__	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	25;"	d
__ARM_COMPUTE_CLMINMAXLOCATION_H__	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	25;"	d
__ARM_COMPUTE_CLMULTIHOG_H__	arm_compute/runtime/CL/CLMultiHOG.h	25;"	d
__ARM_COMPUTE_CLMULTIIMAGE_H__	arm_compute/runtime/CL/CLMultiImage.h	25;"	d
__ARM_COMPUTE_CLNONLINEARFILTERKERNEL_H__	arm_compute/core/CL/kernels/CLNonLinearFilterKernel.h	25;"	d
__ARM_COMPUTE_CLNONLINEARFILTER_H__	arm_compute/runtime/CL/functions/CLNonLinearFilter.h	25;"	d
__ARM_COMPUTE_CLNONMAXIMASUPPRESSION3X3_H__	arm_compute/runtime/CL/functions/CLNonMaximaSuppression3x3.h	25;"	d
__ARM_COMPUTE_CLNONMAXIMASUPPRESSION3x3KERNEL_H__	arm_compute/core/CL/kernels/CLNonMaximaSuppression3x3Kernel.h	25;"	d
__ARM_COMPUTE_CLNORMALIZATIONLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	25;"	d
__ARM_COMPUTE_CLNORMALIZATIONLAYER_H__	arm_compute/runtime/CL/functions/CLNormalizationLayer.h	25;"	d
__ARM_COMPUTE_CLOPTICALFLOW_H__	arm_compute/runtime/CL/functions/CLOpticalFlow.h	25;"	d
__ARM_COMPUTE_CLPERMUTEKERNEL_H__	arm_compute/core/CL/kernels/CLPermuteKernel.h	25;"	d
__ARM_COMPUTE_CLPERMUTE_H__	arm_compute/runtime/CL/functions/CLPermute.h	25;"	d
__ARM_COMPUTE_CLPHASE_H__	arm_compute/runtime/CL/functions/CLPhase.h	25;"	d
__ARM_COMPUTE_CLPIXELWISEMULTIPLICATIONKERNEL_H__	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	25;"	d
__ARM_COMPUTE_CLPIXELWISEMULTIPLICATION_H__	arm_compute/runtime/CL/functions/CLPixelWiseMultiplication.h	25;"	d
__ARM_COMPUTE_CLPOOLINGLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	25;"	d
__ARM_COMPUTE_CLPOOLINGLAYER_H__	arm_compute/runtime/CL/functions/CLPoolingLayer.h	25;"	d
__ARM_COMPUTE_CLPYRAMID_H__	arm_compute/runtime/CL/CLPyramid.h	25;"	d
__ARM_COMPUTE_CLQUANTIZATIONLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	25;"	d
__ARM_COMPUTE_CLQUANTIZATIONLAYER_H__	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	25;"	d
__ARM_COMPUTE_CLREDUCTIONOPERATIONKERNEL_H__	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	25;"	d
__ARM_COMPUTE_CLREDUCTIONOPERATION_H__	arm_compute/runtime/CL/functions/CLReductionOperation.h	25;"	d
__ARM_COMPUTE_CLREMAPKERNEL_H__	arm_compute/core/CL/kernels/CLRemapKernel.h	25;"	d
__ARM_COMPUTE_CLREMAP_H__	arm_compute/runtime/CL/functions/CLRemap.h	25;"	d
__ARM_COMPUTE_CLRESHAPELAYERKERNEL_H__	arm_compute/core/CL/kernels/CLReshapeLayerKernel.h	25;"	d
__ARM_COMPUTE_CLRESHAPELAYER_H__	arm_compute/runtime/CL/functions/CLReshapeLayer.h	25;"	d
__ARM_COMPUTE_CLRNN_LAYER_H__	arm_compute/runtime/CL/functions/CLRNNLayer.h	25;"	d
__ARM_COMPUTE_CLROIPOOLINGLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	25;"	d
__ARM_COMPUTE_CLROIPOOLINGLAYER_H__	arm_compute/runtime/CL/functions/CLROIPoolingLayer.h	25;"	d
__ARM_COMPUTE_CLSCALEKERNEL_H__	arm_compute/core/CL/kernels/CLScaleKernel.h	25;"	d
__ARM_COMPUTE_CLSCALE_H__	arm_compute/runtime/CL/functions/CLScale.h	25;"	d
__ARM_COMPUTE_CLSCHARR3X3KERNEL_H__	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	25;"	d
__ARM_COMPUTE_CLSCHARR3X3_H__	arm_compute/runtime/CL/functions/CLScharr3x3.h	25;"	d
__ARM_COMPUTE_CLSCHEDULER_H__	arm_compute/runtime/CL/CLScheduler.h	25;"	d
__ARM_COMPUTE_CLSOBEL3X3KERNEL_H__	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	25;"	d
__ARM_COMPUTE_CLSOBEL3X3_H__	arm_compute/runtime/CL/functions/CLSobel3x3.h	25;"	d
__ARM_COMPUTE_CLSOBEL5X5KERNEL_H__	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	25;"	d
__ARM_COMPUTE_CLSOBEL5X5_H__	arm_compute/runtime/CL/functions/CLSobel5x5.h	25;"	d
__ARM_COMPUTE_CLSOBEL7X7KERNEL_H__	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	25;"	d
__ARM_COMPUTE_CLSOBEL7X7_H__	arm_compute/runtime/CL/functions/CLSobel7x7.h	25;"	d
__ARM_COMPUTE_CLSOFTMAXLAYERKERNEL_H__	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	25;"	d
__ARM_COMPUTE_CLSOFTMAXLAYER_H__	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	25;"	d
__ARM_COMPUTE_CLSUBTENSOR_H__	arm_compute/runtime/CL/CLSubTensor.h	25;"	d
__ARM_COMPUTE_CLTABLELOOKUPKERNEL_H__	arm_compute/core/CL/kernels/CLTableLookupKernel.h	25;"	d
__ARM_COMPUTE_CLTABLELOOKUP_H__	arm_compute/runtime/CL/functions/CLTableLookup.h	25;"	d
__ARM_COMPUTE_CLTENSORALLOCATOR_H__	arm_compute/runtime/CL/CLTensorAllocator.h	25;"	d
__ARM_COMPUTE_CLTENSOR_H__	arm_compute/runtime/CL/CLTensor.h	25;"	d
__ARM_COMPUTE_CLTHRESHOLDKERNEL_H__	arm_compute/core/CL/kernels/CLThresholdKernel.h	25;"	d
__ARM_COMPUTE_CLTHRESHOLD_H__	arm_compute/runtime/CL/functions/CLThreshold.h	25;"	d
__ARM_COMPUTE_CLTRANSPOSEKERNEL_H__	arm_compute/core/CL/kernels/CLTransposeKernel.h	25;"	d
__ARM_COMPUTE_CLTRANSPOSE_H__	arm_compute/runtime/CL/functions/CLTranspose.h	25;"	d
__ARM_COMPUTE_CLTUNER_H__	arm_compute/runtime/CL/CLTuner.h	25;"	d
__ARM_COMPUTE_CLWARPAFFINEKERNEL_H__	arm_compute/core/CL/kernels/CLWarpAffineKernel.h	25;"	d
__ARM_COMPUTE_CLWARPAFFINE_H__	arm_compute/runtime/CL/functions/CLWarpAffine.h	25;"	d
__ARM_COMPUTE_CLWARPERSPECTIVEKERNEL_H__	arm_compute/core/CL/kernels/CLWarpPerspectiveKernel.h	25;"	d
__ARM_COMPUTE_CLWARPPERSPECTIVE_H__	arm_compute/runtime/CL/functions/CLWarpPerspective.h	25;"	d
__ARM_COMPUTE_CLWEIGHTSRESHAPEKERNEL_H__	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	25;"	d
__ARM_COMPUTE_CLWIDTHCONCATENATELAYERKERNEL_H__	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	26;"	d
__ARM_COMPUTE_CLWIDTHCONCATENATELAYER_H__	arm_compute/runtime/CL/functions/CLWidthConcatenateLayer.h	25;"	d
__ARM_COMPUTE_CLWINOGRADCONVOLUTIONLAYER_H__	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	25;"	d
__ARM_COMPUTE_CLWINOGRADFILTERTRANSFORMKERNEL_H__	arm_compute/core/CL/kernels/CLWinogradFilterTransformKernel.h	25;"	d
__ARM_COMPUTE_CLWINOGRADINPUTTRANSFORMKERNEL_H__	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	25;"	d
__ARM_COMPUTE_CLWINOGRADINPUTTRANSFORM_H__	arm_compute/runtime/CL/functions/CLWinogradInputTransform.h	25;"	d
__ARM_COMPUTE_CLWINOGRADOUTPUTTRANSFORMKERNEL_H__	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	25;"	d
__ARM_COMPUTE_CL_DEPTHWISE_SEPARABLE_CONVOLUTION_H__	arm_compute/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.h	25;"	d
__ARM_COMPUTE_CL_TYPES_H__	arm_compute/core/CL/CLTypes.h	25;"	d
__ARM_COMPUTE_COLORCONVERTKERNEL_H__	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	25;"	d
__ARM_COMPUTE_COORDINATES_H__	arm_compute/core/Coordinates.h	25;"	d
__ARM_COMPUTE_CPPCORNERCANDIDATESKERNEL_H__	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	25;"	d
__ARM_COMPUTE_CPPDETECTIONWINDOWNONMAXIMASUPPRESSIONKERNEL_H__	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	25;"	d
__ARM_COMPUTE_CPPFUNCTIONS_H__	arm_compute/runtime/CPP/CPPFunctions.h	25;"	d
__ARM_COMPUTE_CPPKERNELS_H__	arm_compute/core/CPP/CPPKernels.h	25;"	d
__ARM_COMPUTE_CPPPERMUTEKERNEL_H__	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	25;"	d
__ARM_COMPUTE_CPPPERMUTE_H__	arm_compute/runtime/CPP/functions/CPPPermute.h	25;"	d
__ARM_COMPUTE_CPPSCHEDULER_H__	arm_compute/runtime/CPP/CPPScheduler.h	25;"	d
__ARM_COMPUTE_CPPSORTEUCLIDEANDISTANCEKERNEL_H__	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	25;"	d
__ARM_COMPUTE_CPPUPSAMPLEKERNEL_H__	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	25;"	d
__ARM_COMPUTE_CPPUPSAMPLE_H__	arm_compute/runtime/CPP/functions/CPPUpsample.h	25;"	d
__ARM_COMPUTE_CPP_TYPES_H__	arm_compute/core/CPP/CPPTypes.h	25;"	d
__ARM_COMPUTE_DEPTHCONVERTKERNEL_H__	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	25;"	d
__ARM_COMPUTE_DETAIL_NEACTIVATION_FUNCTION_DETAIL_H__	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	25;"	d
__ARM_COMPUTE_DIMENSIONS_H__	arm_compute/core/Dimensions.h	25;"	d
__ARM_COMPUTE_DISTRIBUTION1D_H__	arm_compute/runtime/Distribution1D.h	25;"	d
__ARM_COMPUTE_ERROR_H__	arm_compute/core/Error.h	25;"	d
__ARM_COMPUTE_FIXEDPOINT_H__	arm_compute/core/FixedPoint.h	23;"	d
__ARM_COMPUTE_GCABSOLUTEDIFFERENCEKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	25;"	d
__ARM_COMPUTE_GCABSOLUTEDIFFERENCE_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCAbsoluteDifference.h	26;"	d
__ARM_COMPUTE_GCACTIVATIONLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.h	25;"	d
__ARM_COMPUTE_GCACTIVATIONLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCActivationLayer.h	25;"	d
__ARM_COMPUTE_GCARITHMETICADDITIONKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	25;"	d
__ARM_COMPUTE_GCARITHMETICADDITION_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCArithmeticAddition.h	25;"	d
__ARM_COMPUTE_GCBATCHNORMALIZATIONLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	25;"	d
__ARM_COMPUTE_GCBATCHNORMALIZATIONLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.h	25;"	d
__ARM_COMPUTE_GCBUFFERALLOCATOR_H__	arm_compute/runtime/GLES_COMPUTE/GCBufferAllocator.h	25;"	d
__ARM_COMPUTE_GCCOL2IMKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	26;"	d
__ARM_COMPUTE_GCCONVOLUTIONLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	26;"	d
__ARM_COMPUTE_GCDEPTHCONCATENATEKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	26;"	d
__ARM_COMPUTE_GCDEPTHCONCATENATE_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	25;"	d
__ARM_COMPUTE_GCDEPTHWISECONVOLUTIONKERNEL3x3_H__	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	25;"	d
__ARM_COMPUTE_GCDEPTHWISECONVOLUTION_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	25;"	d
__ARM_COMPUTE_GCDIRECTCONVOLUTIONLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	25;"	d
__ARM_COMPUTE_GCDIRECTCONVOLUTIONLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	25;"	d
__ARM_COMPUTE_GCDROPOUTLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	26;"	d
__ARM_COMPUTE_GCDROPOUTLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCDropoutLayer.h	26;"	d
__ARM_COMPUTE_GCFILLBORDERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCFillBorderKernel.h	25;"	d
__ARM_COMPUTE_GCFILLBORDER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCFillBorder.h	26;"	d
__ARM_COMPUTE_GCFULLYCONNECTEDLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	25;"	d
__ARM_COMPUTE_GCFUNCTIONS_H__	arm_compute/runtime/GLES_COMPUTE/GCFunctions.h	25;"	d
__ARM_COMPUTE_GCGEMMINTERLEAVE4X4KERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.h	25;"	d
__ARM_COMPUTE_GCGEMMINTERLEAVE4X4_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMMInterleave4x4.h	25;"	d
__ARM_COMPUTE_GCGEMMMATRIXACCUMULATEBIASESKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	25;"	d
__ARM_COMPUTE_GCGEMMMATRIXADDITIONKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.h	25;"	d
__ARM_COMPUTE_GCGEMMMATRIXMULTIPLYKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_GCGEMMTRANSPOSE1XWKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMTranspose1xWKernel.h	25;"	d
__ARM_COMPUTE_GCGEMMTRANSPOSE1XW_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMMTranspose1xW.h	25;"	d
__ARM_COMPUTE_GCGEMM_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	26;"	d
__ARM_COMPUTE_GCHELPERS_H__	arm_compute/core/GLES_COMPUTE/GCHelpers.h	25;"	d
__ARM_COMPUTE_GCIM2COLKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	26;"	d
__ARM_COMPUTE_GCKERNELLIBRARY_H__	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	25;"	d
__ARM_COMPUTE_GCKERNELS_H__	arm_compute/core/GLES_COMPUTE/GCKernels.h	25;"	d
__ARM_COMPUTE_GCMEMORYGROUP_H__	arm_compute/runtime/GLES_COMPUTE/GCMemoryGroup.h	25;"	d
__ARM_COMPUTE_GCNORMALIZATIONLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	25;"	d
__ARM_COMPUTE_GCNORMALIZATIONLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	25;"	d
__ARM_COMPUTE_GCNORMALIZEPLANARYUVLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	25;"	d
__ARM_COMPUTE_GCNORMALIZEPLANARYUVLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.h	25;"	d
__ARM_COMPUTE_GCPIXELWISEMULTIPLICATIONKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	25;"	d
__ARM_COMPUTE_GCPIXELWISEMULTIPLICATION_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCPixelWiseMultiplication.h	25;"	d
__ARM_COMPUTE_GCPOOLINGLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	25;"	d
__ARM_COMPUTE_GCPOOLINGLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	25;"	d
__ARM_COMPUTE_GCSCALEKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCScaleKernel.h	25;"	d
__ARM_COMPUTE_GCSCALE_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCScale.h	25;"	d
__ARM_COMPUTE_GCSCHEDULER_H__	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	26;"	d
__ARM_COMPUTE_GCSOFTMAXLAYERKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	25;"	d
__ARM_COMPUTE_GCSOFTMAXLAYER_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	25;"	d
__ARM_COMPUTE_GCTENSORALLOCATOR_H__	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	26;"	d
__ARM_COMPUTE_GCTENSORSHIFTKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	25;"	d
__ARM_COMPUTE_GCTENSORSHIFT_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCTensorShift.h	25;"	d
__ARM_COMPUTE_GCTENSOR_H__	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	26;"	d
__ARM_COMPUTE_GCTRANSPOSEKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCTransposeKernel.h	25;"	d
__ARM_COMPUTE_GCTRANSPOSE_H__	arm_compute/runtime/GLES_COMPUTE/functions/GCTranspose.h	25;"	d
__ARM_COMPUTE_GCWEIGHTSRESHAPEKERNEL_H__	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	25;"	d
__ARM_COMPUTE_GPUTARGET_H__	arm_compute/core/GPUTarget.h	25;"	d
__ARM_COMPUTE_GRAPH_ACTIVATION_LAYER_NODE_H__	arm_compute/graph/nodes/ActivationLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_ALGORITHMS_H__	arm_compute/graph/algorithms/Algorithms.h	25;"	d
__ARM_COMPUTE_GRAPH_ALGORITHM_BFS_H__	arm_compute/graph/algorithms/BFS.h	25;"	d
__ARM_COMPUTE_GRAPH_BACKENDS_DETAIL_VALIDATE_HELPERS_H__	arm_compute/graph/backends/ValidateHelpers.h	25;"	d
__ARM_COMPUTE_GRAPH_BACKENDS_UTILS_H__	arm_compute/graph/backends/Utils.h	25;"	d
__ARM_COMPUTE_GRAPH_BACKEND_REGISTRY_H__	arm_compute/graph/backends/BackendRegistry.h	25;"	d
__ARM_COMPUTE_GRAPH_BATCH_NORMALIZATION_LAYER_NODE_H__	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_CLDEVICEBACKEND_H__	arm_compute/graph/backends/CL/CLDeviceBackend.h	25;"	d
__ARM_COMPUTE_GRAPH_CLFUNCTIONFACTORY_H__	arm_compute/graph/backends/CL/CLFunctionFactory.h	25;"	d
__ARM_COMPUTE_GRAPH_CLNODEVALIDATOR_H__	arm_compute/graph/backends/CL/CLNodeValidator.h	25;"	d
__ARM_COMPUTE_GRAPH_CLSUBTENSORHANDLE_H__	arm_compute/graph/backends/CL/CLSubTensorHandle.h	25;"	d
__ARM_COMPUTE_GRAPH_CLTENSORHANDLE_H__	arm_compute/graph/backends/CL/CLTensorHandle.h	25;"	d
__ARM_COMPUTE_GRAPH_CONST_NODE_H__	arm_compute/graph/nodes/ConstNode.h	25;"	d
__ARM_COMPUTE_GRAPH_CONVOLUTION_LAYER_NODE_H__	arm_compute/graph/nodes/ConvolutionLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_DEPTHWISE_CONVOLUTION_LAYER_NODE_H__	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_DEPTH_CONCATENATE_LAYER_NODE_H__	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_DEPTH_CONCAT_SUBTENSOR_MUTATOR_H__	arm_compute/graph/mutators/DepthConcatSubTensorMutator.h	25;"	d
__ARM_COMPUTE_GRAPH_DETAIL_CROSS_LAYER_MEMORY_MANAGER_HELPERS_H__	arm_compute/graph/detail/CrossLayerMemoryManagerHelpers.h	25;"	d
__ARM_COMPUTE_GRAPH_DETAIL_EXECUTION_HELPERS_H__	arm_compute/graph/detail/ExecutionHelpers.h	25;"	d
__ARM_COMPUTE_GRAPH_DOTGRAPHPRINTER_H__	arm_compute/graph/printers/DotGraphPrinter.h	25;"	d
__ARM_COMPUTE_GRAPH_EDGE_H__	arm_compute/graph/Edge.h	25;"	d
__ARM_COMPUTE_GRAPH_ELTWISE_LAYER_NODE_H__	arm_compute/graph/nodes/EltwiseLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_FLATTEN_LAYER_NODE_H__	arm_compute/graph/nodes/FlattenLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_FULLY_CONNECTED_LAYER_NODE_H__	arm_compute/graph/nodes/FullyConnectedLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_GCDEVICEBACKEND_H__	arm_compute/graph/backends/GLES/GCDeviceBackend.h	25;"	d
__ARM_COMPUTE_GRAPH_GCFUNCTIONFACTORY_H__	arm_compute/graph/backends/GLES/GCFunctionFactory.h	25;"	d
__ARM_COMPUTE_GRAPH_GCNODEVALIDATOR_H__	arm_compute/graph/backends/GLES/GCNodeValidator.h	25;"	d
__ARM_COMPUTE_GRAPH_GCTENSORHANDLE_H__	arm_compute/graph/backends/GLES/GCTensorHandle.h	25;"	d
__ARM_COMPUTE_GRAPH_GRAPH_BUILDER_H__	arm_compute/graph/GraphBuilder.h	25;"	d
__ARM_COMPUTE_GRAPH_GRAPH_CONTEXT_H__	arm_compute/graph/GraphContext.h	25;"	d
__ARM_COMPUTE_GRAPH_GRAPH_H__	arm_compute/graph/Graph.h	25;"	d
__ARM_COMPUTE_GRAPH_GRAPH_MANAGER_H__	arm_compute/graph/GraphManager.h	25;"	d
__ARM_COMPUTE_GRAPH_GRAPH_MUTATORS_H__	arm_compute/graph/mutators/GraphMutators.h	25;"	d
__ARM_COMPUTE_GRAPH_H__	arm_compute/graph.h	25;"	d
__ARM_COMPUTE_GRAPH_IDEVICEBACKEND_H__	arm_compute/graph/IDeviceBackend.h	25;"	d
__ARM_COMPUTE_GRAPH_IGRAPHMUTATOR_H__	arm_compute/graph/IGraphMutator.h	25;"	d
__ARM_COMPUTE_GRAPH_IGRAPHPRINTER_H__	arm_compute/graph/IGraphPrinter.h	25;"	d
__ARM_COMPUTE_GRAPH_ILAYER_H__	arm_compute/graph/frontend/ILayer.h	25;"	d
__ARM_COMPUTE_GRAPH_INODEVISITOR_H__	arm_compute/graph/INodeVisitor.h	25;"	d
__ARM_COMPUTE_GRAPH_INODE_H__	arm_compute/graph/INode.h	25;"	d
__ARM_COMPUTE_GRAPH_INPLACE_OPERATION_MUTATOR_H__	arm_compute/graph/mutators/InPlaceOperationMutator.h	25;"	d
__ARM_COMPUTE_GRAPH_INPUT_NODE_H__	arm_compute/graph/nodes/InputNode.h	25;"	d
__ARM_COMPUTE_GRAPH_ISTREAM_H__	arm_compute/graph/frontend/IStream.h	25;"	d
__ARM_COMPUTE_GRAPH_ISTREAM_OPERATORS_H__	arm_compute/graph/frontend/IStreamOperators.h	25;"	d
__ARM_COMPUTE_GRAPH_ITENSORHANDLE_H__	arm_compute/graph/ITensorHandle.h	25;"	d
__ARM_COMPUTE_GRAPH_ITENSOR_ACCESSOR_H__	arm_compute/graph/ITensorAccessor.h	25;"	d
__ARM_COMPUTE_GRAPH_LAYERS_H__	arm_compute/graph/frontend/Layers.h	25;"	d
__ARM_COMPUTE_GRAPH_LOGGER_H__	arm_compute/graph/Logger.h	25;"	d
__ARM_COMPUTE_GRAPH_NEDEVICEBACKEND_H__	arm_compute/graph/backends/NEON/NEDeviceBackend.h	25;"	d
__ARM_COMPUTE_GRAPH_NEFUNCTIONFACTORY_H__	arm_compute/graph/backends/NEON/NEFunctionFactory.h	25;"	d
__ARM_COMPUTE_GRAPH_NENODEVALIDATOR_H__	arm_compute/graph/backends/NEON/NENodeValidator.h	25;"	d
__ARM_COMPUTE_GRAPH_NESUBTENSORHANDLE_H__	arm_compute/graph/backends/NEON/NESubTensorHandle.h	25;"	d
__ARM_COMPUTE_GRAPH_NETENSORHANDLE_H__	arm_compute/graph/backends/NEON/NETensorHandle.h	25;"	d
__ARM_COMPUTE_GRAPH_NODES_FWD_H__	arm_compute/graph/nodes/NodesFwd.h	25;"	d
__ARM_COMPUTE_GRAPH_NODES_H__	arm_compute/graph/nodes/Nodes.h	25;"	d
__ARM_COMPUTE_GRAPH_NODE_FUSION_MUTATOR_H__	arm_compute/graph/mutators/NodeFusionMutator.h	25;"	d
__ARM_COMPUTE_GRAPH_NORMALIZATION_LAYER_NODE_H__	arm_compute/graph/nodes/NormalizationLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_OUTPUT_NODE_H__	arm_compute/graph/nodes/OutputNode.h	25;"	d
__ARM_COMPUTE_GRAPH_PASSMANAGER_H__	arm_compute/graph/PassManager.h	25;"	d
__ARM_COMPUTE_GRAPH_POOLING_LAYER_NODE_H__	arm_compute/graph/nodes/PoolingLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_PRINTERS_H__	arm_compute/graph/printers/Printers.h	25;"	d
__ARM_COMPUTE_GRAPH_RESHAPE_LAYER_NODE_H__	arm_compute/graph/nodes/ReshapeLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_SOFTMAX_LAYER_NODE_H__	arm_compute/graph/nodes/SoftmaxLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_SPLIT_LAYER_NODE_H__	arm_compute/graph/nodes/SplitLayerNode.h	25;"	d
__ARM_COMPUTE_GRAPH_SPLIT_LAYER_SUBTENSOR_MUTATOR_H__	arm_compute/graph/mutators/SplitLayerSubTensorMutator.h	25;"	d
__ARM_COMPUTE_GRAPH_STREAM_H__	arm_compute/graph/frontend/Stream.h	25;"	d
__ARM_COMPUTE_GRAPH_STREAM_TYPES_H__	arm_compute/graph/frontend/Types.h	25;"	d
__ARM_COMPUTE_GRAPH_SUB_STREAM_H__	arm_compute/graph/frontend/SubStream.h	25;"	d
__ARM_COMPUTE_GRAPH_TENSOR_DESCRIPTOR_H__	arm_compute/graph/TensorDescriptor.h	25;"	d
__ARM_COMPUTE_GRAPH_TENSOR_H__	arm_compute/graph/Tensor.h	25;"	d
__ARM_COMPUTE_GRAPH_TYPES_H__	arm_compute/graph/Types.h	25;"	d
__ARM_COMPUTE_GRAPH_TYPE_PRINTER_H__	arm_compute/graph/TypePrinter.h	25;"	d
__ARM_COMPUTE_GRAPH_UTILS_H__	arm_compute/graph/Utils.h	25;"	d
__ARM_COMPUTE_GRAPH_UTILS_H__	utils/GraphUtils.h	25;"	d
__ARM_COMPUTE_GRAPH_WORKLOAD_H__	arm_compute/graph/Workload.h	25;"	d
__ARM_COMPUTE_HALF_H__	support/Half.h	25;"	d
__ARM_COMPUTE_HELPERS_H__	arm_compute/core/Helpers.h	25;"	d
__ARM_COMPUTE_HOGINFO_H__	arm_compute/core/HOGInfo.h	25;"	d
__ARM_COMPUTE_HOG_H__	arm_compute/runtime/HOG.h	25;"	d
__ARM_COMPUTE_IACCESS_WINDOW_H__	arm_compute/core/IAccessWindow.h	25;"	d
__ARM_COMPUTE_IACCESS_WINDOW_STATIC_H__	arm_compute/core/AccessWindowStatic.h	25;"	d
__ARM_COMPUTE_IACCESS_WINDOW_TRANSPOSE_H__	arm_compute/core/AccessWindowTranspose.h	25;"	d
__ARM_COMPUTE_IALLOCATOR_H__	arm_compute/runtime/IAllocator.h	25;"	d
__ARM_COMPUTE_IARRAY_H__	arm_compute/core/IArray.h	25;"	d
__ARM_COMPUTE_ICLARRAY_H__	arm_compute/core/CL/ICLArray.h	25;"	d
__ARM_COMPUTE_ICLDEPTHWISECONVOLUTIONKERNEL3x3_H__	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	25;"	d
__ARM_COMPUTE_ICLDISTRIBUTION1D_H__	arm_compute/core/CL/ICLDistribution1D.h	25;"	d
__ARM_COMPUTE_ICLHOG_H__	arm_compute/core/CL/ICLHOG.h	25;"	d
__ARM_COMPUTE_ICLKERNEL_H__	arm_compute/core/CL/ICLKernel.h	25;"	d
__ARM_COMPUTE_ICLLUT_H__	arm_compute/core/CL/ICLLut.h	25;"	d
__ARM_COMPUTE_ICLMULTIHOG_H__	arm_compute/core/CL/ICLMultiHOG.h	25;"	d
__ARM_COMPUTE_ICLMULTIIMAGE_H__	arm_compute/core/CL/ICLMultiImage.h	25;"	d
__ARM_COMPUTE_ICLSIMPLE2DKERNEL_H__	arm_compute/core/CL/ICLSimple2DKernel.h	25;"	d
__ARM_COMPUTE_ICLSIMPLE3DKERNEL_H__	arm_compute/core/CL/ICLSimple3DKernel.h	25;"	d
__ARM_COMPUTE_ICLSIMPLEFUNCTION_H__	arm_compute/runtime/CL/ICLSimpleFunction.h	25;"	d
__ARM_COMPUTE_ICLSIMPLEKERNEL_H__	arm_compute/core/CL/ICLSimpleKernel.h	25;"	d
__ARM_COMPUTE_ICLTENSOR_H__	arm_compute/core/CL/ICLTensor.h	25;"	d
__ARM_COMPUTE_ICLTUNER_H__	arm_compute/runtime/CL/ICLTuner.h	25;"	d
__ARM_COMPUTE_ICPPKERNEL_H__	arm_compute/core/CPP/ICPPKernel.h	25;"	d
__ARM_COMPUTE_ICPPSIMPLEFUNCTION_H__	arm_compute/runtime/CPP/ICPPSimpleFunction.h	25;"	d
__ARM_COMPUTE_ICPPSIMPLEKERNEL_H__	arm_compute/core/CPP/ICPPSimpleKernel.h	25;"	d
__ARM_COMPUTE_IDISTRIBUTION1D_H__	arm_compute/core/IDistribution1D.h	25;"	d
__ARM_COMPUTE_IDISTRIBUTION_H__	arm_compute/core/IDistribution.h	25;"	d
__ARM_COMPUTE_IFUNCTION_H__	arm_compute/runtime/IFunction.h	25;"	d
__ARM_COMPUTE_IGCKERNEL_H__	arm_compute/core/GLES_COMPUTE/IGCKernel.h	25;"	d
__ARM_COMPUTE_IGCSIMPLE2DKERNEL_H__	arm_compute/core/GLES_COMPUTE/IGCSimple2DKernel.h	25;"	d
__ARM_COMPUTE_IGCSIMPLE3DKERNEL_H__	arm_compute/core/GLES_COMPUTE/IGCSimple3DKernel.h	25;"	d
__ARM_COMPUTE_IGCSIMPLEFUNCTION_H__	arm_compute/runtime/GLES_COMPUTE/IGCSimpleFunction.h	25;"	d
__ARM_COMPUTE_IGCSIMPLEKERNEL_H__	arm_compute/core/GLES_COMPUTE/IGCSimpleKernel.h	25;"	d
__ARM_COMPUTE_IGCTENSOR_H__	arm_compute/core/GLES_COMPUTE/IGCTensor.h	25;"	d
__ARM_COMPUTE_IHOG_H__	arm_compute/core/IHOG.h	25;"	d
__ARM_COMPUTE_IKERNEL_H__	arm_compute/core/IKernel.h	25;"	d
__ARM_COMPUTE_ILIFETIMEMANAGER_H__	arm_compute/runtime/ILifetimeManager.h	25;"	d
__ARM_COMPUTE_ILUTALLOCATOR_H__	arm_compute/runtime/ILutAllocator.h	25;"	d
__ARM_COMPUTE_ILUT_H__	arm_compute/core/ILut.h	25;"	d
__ARM_COMPUTE_IMEMORYGROUP_H__	arm_compute/runtime/IMemoryGroup.h	25;"	d
__ARM_COMPUTE_IMEMORYMANAGER_H__	arm_compute/runtime/IMemoryManager.h	25;"	d
__ARM_COMPUTE_IMEMORYPOOL_H__	arm_compute/runtime/IMemoryPool.h	25;"	d
__ARM_COMPUTE_IMULTIHOG_H__	arm_compute/core/IMultiHOG.h	25;"	d
__ARM_COMPUTE_IMULTIIMAGE_H__	arm_compute/core/IMultiImage.h	25;"	d
__ARM_COMPUTE_INEKERNEL_H__	arm_compute/core/NEON/INEKernel.h	25;"	d
__ARM_COMPUTE_INESIMPLEFUNCTION_H__	arm_compute/runtime/NEON/INESimpleFunction.h	25;"	d
__ARM_COMPUTE_INESIMPLEKERNEL_H__	arm_compute/core/NEON/INESimpleKernel.h	25;"	d
__ARM_COMPUTE_IO_FILE_HANDLER_H__	arm_compute/core/utils/io/FileHandler.h	25;"	d
__ARM_COMPUTE_IPOOLMANAGER_H__	arm_compute/runtime/IPoolManager.h	25;"	d
__ARM_COMPUTE_IPYRAMID_H__	arm_compute/core/IPyramid.h	25;"	d
__ARM_COMPUTE_ISCHEDULER_H__	arm_compute/runtime/IScheduler.h	25;"	d
__ARM_COMPUTE_ISIMPLELIFETIMEMANAGER_H__	arm_compute/runtime/ISimpleLifetimeManager.h	25;"	d
__ARM_COMPUTE_ITENSORALLOCATOR_H__	arm_compute/runtime/ITensorAllocator.h	25;"	d
__ARM_COMPUTE_ITENSORINFO_H__	arm_compute/core/ITensorInfo.h	25;"	d
__ARM_COMPUTE_ITENSOR_H__	arm_compute/core/ITensor.h	25;"	d
__ARM_COMPUTE_LKTRACKERKERNEL_H__	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	25;"	d
__ARM_COMPUTE_LOGGING_FILE_PRINTER_H__	arm_compute/core/utils/logging/FilePrinter.h	25;"	d
__ARM_COMPUTE_LOGGING_HELPERS_H__	arm_compute/core/utils/logging/Helpers.h	25;"	d
__ARM_COMPUTE_LOGGING_LOGGER_H__	arm_compute/core/utils/logging/Logger.h	25;"	d
__ARM_COMPUTE_LOGGING_LOGGER_REGISTRY_H__	arm_compute/core/utils/logging/LoggerRegistry.h	25;"	d
__ARM_COMPUTE_LOGGING_LOG_MSG_DECORATORS_H__	arm_compute/core/utils/logging/LogMsgDecorators.h	25;"	d
__ARM_COMPUTE_LOGGING_MACROS_H__	arm_compute/core/utils/logging/Macros.h	25;"	d
__ARM_COMPUTE_LOGGING_PRINTERS_H__	arm_compute/core/utils/logging/Printers.h	25;"	d
__ARM_COMPUTE_LOGGING_PRINTER_H__	arm_compute/core/utils/logging/IPrinter.h	25;"	d
__ARM_COMPUTE_LOGGING_STD_PRINTER_H__	arm_compute/core/utils/logging/StdPrinter.h	25;"	d
__ARM_COMPUTE_LOGGING_TYPES_H__	arm_compute/core/utils/logging/Types.h	25;"	d
__ARM_COMPUTE_LOG_H__	arm_compute/core/Log.h	25;"	d
__ARM_COMPUTE_LUTALLOCATOR_H__	arm_compute/runtime/LutAllocator.h	25;"	d
__ARM_COMPUTE_LUT_H__	arm_compute/runtime/Lut.h	25;"	d
__ARM_COMPUTE_MEMORYGROUPBASE_H__	arm_compute/runtime/MemoryGroupBase.h	25;"	d
__ARM_COMPUTE_MEMORYGROUP_H__	arm_compute/runtime/MemoryGroup.h	25;"	d
__ARM_COMPUTE_MEMORYMANAGERONDEMAND_H__	arm_compute/runtime/MemoryManagerOnDemand.h	25;"	d
__ARM_COMPUTE_MEMORY_H__	arm_compute/runtime/Memory.h	25;"	d
__ARM_COMPUTE_MISC_CAST_H__	arm_compute/core/utils/misc/Cast.h	25;"	d
__ARM_COMPUTE_MISC_CRTP_H__	arm_compute/core/utils/misc/CRTP.h	25;"	d
__ARM_COMPUTE_MISC_ICLONEABLE_H__	arm_compute/core/utils/misc/ICloneable.h	25;"	d
__ARM_COMPUTE_MISC_ITERABLE_H__	arm_compute/core/utils/misc/Iterable.h	25;"	d
__ARM_COMPUTE_MISC_SHAPE_CALCULATOR_H__	arm_compute/core/utils/misc/ShapeCalculator.h	25;"	d
__ARM_COMPUTE_MISC_SIGNAL_H__	arm_compute/core/utils/misc/Signal.h	25;"	d
__ARM_COMPUTE_MISC_UTILITY_H__	arm_compute/core/utils/misc/Utility.h	25;"	d
__ARM_COMPUTE_MULTIHOG_H__	arm_compute/runtime/MultiHOG.h	25;"	d
__ARM_COMPUTE_MULTIIMAGEINFO_H__	arm_compute/core/MultiImageInfo.h	25;"	d
__ARM_COMPUTE_MULTIIMAGE_H__	arm_compute/runtime/MultiImage.h	25;"	d
__ARM_COMPUTE_MUTEX_H__	support/Mutex.h	25;"	d
__ARM_COMPUTE_NEABSOLUTEDIFFERENCEKERNEL_H__	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	25;"	d
__ARM_COMPUTE_NEABSOLUTEDIFFERENCE_H__	arm_compute/runtime/NEON/functions/NEAbsoluteDifference.h	25;"	d
__ARM_COMPUTE_NEACCUMULATEKERNEL_H__	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	25;"	d
__ARM_COMPUTE_NEACCUMULATE_H__	arm_compute/runtime/NEON/functions/NEAccumulate.h	25;"	d
__ARM_COMPUTE_NEACTIVATIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	25;"	d
__ARM_COMPUTE_NEACTIVATIONLAYER_H__	arm_compute/runtime/NEON/functions/NEActivationLayer.h	25;"	d
__ARM_COMPUTE_NEARITHMETICADDITIONKERNEL_H__	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	25;"	d
__ARM_COMPUTE_NEARITHMETICADDITION_H__	arm_compute/runtime/NEON/functions/NEArithmeticAddition.h	25;"	d
__ARM_COMPUTE_NEARITHMETICSUBTRACTIONKERNEL_H__	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	25;"	d
__ARM_COMPUTE_NEARITHMETICSUBTRACTION_H__	arm_compute/runtime/NEON/functions/NEArithmeticSubtraction.h	25;"	d
__ARM_COMPUTE_NEASYMM_H__	arm_compute/core/NEON/NEAsymm.h	25;"	d
__ARM_COMPUTE_NEBATCHNORMALIZATIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	25;"	d
__ARM_COMPUTE_NEBATCHNORMALIZATIONLAYER_H__	arm_compute/runtime/NEON/functions/NEBatchNormalizationLayer.h	25;"	d
__ARM_COMPUTE_NEBITWISEANDKERNEL_H__	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	25;"	d
__ARM_COMPUTE_NEBITWISEAND_H__	arm_compute/runtime/NEON/functions/NEBitwiseAnd.h	25;"	d
__ARM_COMPUTE_NEBITWISENOTKERNEL_H__	arm_compute/core/NEON/kernels/NEBitwiseNotKernel.h	25;"	d
__ARM_COMPUTE_NEBITWISENOT_H__	arm_compute/runtime/NEON/functions/NEBitwiseNot.h	25;"	d
__ARM_COMPUTE_NEBITWISEORKERNEL_H__	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	25;"	d
__ARM_COMPUTE_NEBITWISEOR_H__	arm_compute/runtime/NEON/functions/NEBitwiseOr.h	25;"	d
__ARM_COMPUTE_NEBITWISEXORKERNEL_H__	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	25;"	d
__ARM_COMPUTE_NEBITWISEXOR_H__	arm_compute/runtime/NEON/functions/NEBitwiseXor.h	25;"	d
__ARM_COMPUTE_NEBOX3x3KERNEL_H__	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	25;"	d
__ARM_COMPUTE_NEBOX3x3_H__	arm_compute/runtime/NEON/functions/NEBox3x3.h	25;"	d
__ARM_COMPUTE_NECANNYEDGEKERNEL_H__	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	25;"	d
__ARM_COMPUTE_NECANNYEDGE_H__	arm_compute/runtime/NEON/functions/NECannyEdge.h	25;"	d
__ARM_COMPUTE_NECHANNELCOMBINEKERNEL_H__	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	25;"	d
__ARM_COMPUTE_NECHANNELCOMBINE_H__	arm_compute/runtime/NEON/functions/NEChannelCombine.h	25;"	d
__ARM_COMPUTE_NECHANNELEXTRACTKERNEL_H__	arm_compute/core/NEON/kernels/NEChannelExtractKernel.h	25;"	d
__ARM_COMPUTE_NECHANNELEXTRACT_H__	arm_compute/runtime/NEON/functions/NEChannelExtract.h	25;"	d
__ARM_COMPUTE_NECOL2IMKERNEL_H__	arm_compute/core/NEON/kernels/NECol2ImKernel.h	25;"	d
__ARM_COMPUTE_NECOL2IM_H__	arm_compute/runtime/NEON/functions/NECol2Im.h	25;"	d
__ARM_COMPUTE_NECOLORCONVERT_H__	arm_compute/runtime/NEON/functions/NEColorConvert.h	25;"	d
__ARM_COMPUTE_NECONVERTFULLYCONNECTEDWEIGHTSKERNEL_H__	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	25;"	d
__ARM_COMPUTE_NECONVERTFULLYCONNECTEDWEIGHTS_H__	arm_compute/runtime/NEON/functions/NEConvertFullyConnectedWeights.h	25;"	d
__ARM_COMPUTE_NECONVOLUTIONKERNEL3x3_H__	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	26;"	d
__ARM_COMPUTE_NECONVOLUTIONKERNEL_H__	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	25;"	d
__ARM_COMPUTE_NECONVOLUTIONLAYER_H__	arm_compute/runtime/NEON/functions/NEConvolutionLayer.h	25;"	d
__ARM_COMPUTE_NECONVOLUTION_H__	arm_compute/runtime/NEON/functions/NEConvolution.h	25;"	d
__ARM_COMPUTE_NECUMULATIVEDISTRIBUTIONKERNEL_H__	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	25;"	d
__ARM_COMPUTE_NEDECONVOLUTIONLAYER_H__	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	25;"	d
__ARM_COMPUTE_NEDEPTHCONCATENATEKERNEL_H__	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	26;"	d
__ARM_COMPUTE_NEDEPTHCONCATENATE_H__	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	25;"	d
__ARM_COMPUTE_NEDEPTHCONVERT_H__	arm_compute/runtime/NEON/functions/NEDepthConvertLayer.h	25;"	d
__ARM_COMPUTE_NEDEPTHWISECONVOLUTIONKERNEL3x3_H__	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	25;"	d
__ARM_COMPUTE_NEDEPTHWISECONVOLUTION_H__	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	25;"	d
__ARM_COMPUTE_NEDEPTHWISEIM2COLKERNEL_H__	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	25;"	d
__ARM_COMPUTE_NEDEPTHWISEVECTORTOTENSORKERNEL_H__	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	25;"	d
__ARM_COMPUTE_NEDEPTHWISEWEIGHTSRESHAPEKERNEL_H__	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	25;"	d
__ARM_COMPUTE_NEDEQUANTIZATIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	25;"	d
__ARM_COMPUTE_NEDEQUANTIZATIONLAYER_H__	arm_compute/runtime/NEON/functions/NEDequantizationLayer.h	25;"	d
__ARM_COMPUTE_NEDERIVATIVEKERNEL_H__	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	25;"	d
__ARM_COMPUTE_NEDERIVATIVE_H__	arm_compute/runtime/NEON/functions/NEDerivative.h	25;"	d
__ARM_COMPUTE_NEDILATEKERNEL_H__	arm_compute/core/NEON/kernels/NEDilateKernel.h	25;"	d
__ARM_COMPUTE_NEDILATE_H__	arm_compute/runtime/NEON/functions/NEDilate.h	25;"	d
__ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H__	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	26;"	d
__ARM_COMPUTE_NEDIRECTCONVOLUTIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	25;"	d
__ARM_COMPUTE_NEDIRECTCONVOLUTIONLAYEROUTPUTSTAGEKERNEL_H__	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	25;"	d
__ARM_COMPUTE_NEDIRECTCONVOLUTIONLAYER_H__	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	25;"	d
__ARM_COMPUTE_NEEQUALIZEHISTOGRAM_H__	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	25;"	d
__ARM_COMPUTE_NEERODEKERNEL_H__	arm_compute/core/NEON/kernels/NEErodeKernel.h	25;"	d
__ARM_COMPUTE_NEERODE_H__	arm_compute/runtime/NEON/functions/NEErode.h	25;"	d
__ARM_COMPUTE_NEFASTCORNERSKERNEL_H__	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	25;"	d
__ARM_COMPUTE_NEFASTCORNERS_H__	arm_compute/runtime/NEON/functions/NEFastCorners.h	25;"	d
__ARM_COMPUTE_NEFILLARRAYKERNEL_H__	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	25;"	d
__ARM_COMPUTE_NEFILLBORDERKERNEL_H__	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	25;"	d
__ARM_COMPUTE_NEFILLBORDER_H__	arm_compute/runtime/NEON/functions/NEFillBorder.h	25;"	d
__ARM_COMPUTE_NEFILLINNERBORDERKERNEL_H__	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	25;"	d
__ARM_COMPUTE_NEFIXEDPOINT_H__	arm_compute/core/NEON/NEFixedPoint.h	25;"	d
__ARM_COMPUTE_NEFLATTENLAYER_H__	arm_compute/runtime/NEON/functions/NEFlattenLayer.h	25;"	d
__ARM_COMPUTE_NEFLOORKERNEL_H__	arm_compute/core/NEON/kernels/NEFloorKernel.h	25;"	d
__ARM_COMPUTE_NEFLOOR_H__	arm_compute/runtime/NEON/functions/NEFloor.h	25;"	d
__ARM_COMPUTE_NEFULLYCONNECTEDLAYER_H__	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	25;"	d
__ARM_COMPUTE_NEFUNCTIONS_H__	arm_compute/runtime/NEON/NEFunctions.h	25;"	d
__ARM_COMPUTE_NEGAUSSIAN3x3KERNEL_H__	arm_compute/core/NEON/kernels/NEGaussian3x3Kernel.h	25;"	d
__ARM_COMPUTE_NEGAUSSIAN3x3_H__	arm_compute/runtime/NEON/functions/NEGaussian3x3.h	25;"	d
__ARM_COMPUTE_NEGAUSSIAN5x5KERNEL_H__	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	25;"	d
__ARM_COMPUTE_NEGAUSSIAN5x5_H__	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	25;"	d
__ARM_COMPUTE_NEGAUSSIANPYRAMIDKERNEL_H__	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	25;"	d
__ARM_COMPUTE_NEGAUSSIANPYRAMID_H__	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	25;"	d
__ARM_COMPUTE_NEGEMMASSEMBLYBASE_H__	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMCONVOLUTIONLAYER_H__	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	25;"	d
__ARM_COMPUTE_NEGEMMINTERLEAVE4X4_H__	arm_compute/runtime/NEON/functions/NEGEMMInterleave4x4.h	25;"	d
__ARM_COMPUTE_NEGEMMINTERLEAVE4x4KERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMInterleave4x4Kernel.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWPASSEMBLYMATRIXMULTIPLYCORE_H__	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	26;"	d
__ARM_COMPUTE_NEGEMMLOWPMATRIXMULTIPLYCORE_H__	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWPMATRIXMULTIPLYKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWPOFFSETCONTRIBUTIONKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWPOUTPUTSTAGE_H__	arm_compute/runtime/NEON/functions/NEGEMMLowpOutputStage.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWPQUANTIZEDOWNINT32TOUINT8SCALEBYFIXEDPOINTKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWPQUANTIZEDOWNINT32TOUINT8SCALEKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMLOWREDUCTIONKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMMATRIXACCUMULATEBIASESKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMMATRIXADDITIONKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMMatrixAdditionKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMMATRIXMULTIPLYKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMMATRIXVECTORMULTIPLYKERNEL_H_	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMTRANSPOSE1XW_H__	arm_compute/runtime/NEON/functions/NEGEMMTranspose1xW.h	25;"	d
__ARM_COMPUTE_NEGEMMTRANSPOSE1xWKERNEL_H__	arm_compute/core/NEON/kernels/NEGEMMTranspose1xWKernel.h	25;"	d
__ARM_COMPUTE_NEGEMMWINOGRADCONVOLUTIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	25;"	d
__ARM_COMPUTE_NEGEMM_H__	arm_compute/runtime/NEON/functions/NEGEMM.h	25;"	d
__ARM_COMPUTE_NEHARRISCORNERSKERNEL_H__	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	25;"	d
__ARM_COMPUTE_NEHARRISCORNERS_H__	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	25;"	d
__ARM_COMPUTE_NEHISTOGRAMKERNEL_H__	arm_compute/core/NEON/kernels/NEHistogramKernel.h	25;"	d
__ARM_COMPUTE_NEHISTOGRAM_H__	arm_compute/runtime/NEON/functions/NEHistogram.h	25;"	d
__ARM_COMPUTE_NEHOGDESCRIPTORKERNEL_H__	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	25;"	d
__ARM_COMPUTE_NEHOGDESCRIPTOR_H__	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	25;"	d
__ARM_COMPUTE_NEHOGDETECTORKERNEL_H__	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	25;"	d
__ARM_COMPUTE_NEHOGDETECTOR_H__	arm_compute/runtime/NEON/functions/NEHOGDetector.h	25;"	d
__ARM_COMPUTE_NEHOGGRADIENT_H__	arm_compute/runtime/NEON/functions/NEHOGGradient.h	25;"	d
__ARM_COMPUTE_NEHOGMULTIDETECTION_H__	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	25;"	d
__ARM_COMPUTE_NEIM2COLKERNEL_H__	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	25;"	d
__ARM_COMPUTE_NEIM2COL_H__	arm_compute/runtime/NEON/functions/NEIm2Col.h	25;"	d
__ARM_COMPUTE_NEINTEGRALIMAGEKERNEL_H__	arm_compute/core/NEON/kernels/NEIntegralImageKernel.h	25;"	d
__ARM_COMPUTE_NEINTEGRALIMAGE_H__	arm_compute/runtime/NEON/functions/NEIntegralImage.h	25;"	d
__ARM_COMPUTE_NEKERNELS_H__	arm_compute/core/NEON/NEKernels.h	25;"	d
__ARM_COMPUTE_NEL2NORMALIZELAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	25;"	d
__ARM_COMPUTE_NEL2NORMALIZELAYER_H__	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	25;"	d
__ARM_COMPUTE_NELAPLACIANPYRAMID_H__	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	25;"	d
__ARM_COMPUTE_NELAPLACIANRECONSTRUCT_H__	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	25;"	d
__ARM_COMPUTE_NELOCALLYCONNECTEDLAYER_H__	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	25;"	d
__ARM_COMPUTE_NELOCALLYCONNECTEDMATRIXMULTIPLYKERNEL_H__	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	25;"	d
__ARM_COMPUTE_NEMAGNITUDEPHASEKERNEL_H__	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	25;"	d
__ARM_COMPUTE_NEMAGNITUDE_H__	arm_compute/runtime/NEON/functions/NEMagnitude.h	25;"	d
__ARM_COMPUTE_NEMATH_H__	arm_compute/core/NEON/NEMath.h	25;"	d
__ARM_COMPUTE_NEMEANSTDDEVKERNEL_H__	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	25;"	d
__ARM_COMPUTE_NEMEANSTDDEV_H__	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	25;"	d
__ARM_COMPUTE_NEMEDIAN3x3KERNEL_H__	arm_compute/core/NEON/kernels/NEMedian3x3Kernel.h	25;"	d
__ARM_COMPUTE_NEMEDIAN3x3_H__	arm_compute/runtime/NEON/functions/NEMedian3x3.h	25;"	d
__ARM_COMPUTE_NEMINMAXLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	26;"	d
__ARM_COMPUTE_NEMINMAXLOCATIONKERNEL_H__	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	25;"	d
__ARM_COMPUTE_NEMINMAXLOCATION_H__	arm_compute/runtime/NEON/functions/NEMinMaxLocation.h	25;"	d
__ARM_COMPUTE_NENONLINEARFILTERKERNEL_H__	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	25;"	d
__ARM_COMPUTE_NENONLINEARFILTER_H__	arm_compute/runtime/NEON/functions/NENonLinearFilter.h	25;"	d
__ARM_COMPUTE_NENONMAXIMASUPPRESSION3X3_H__	arm_compute/runtime/NEON/functions/NENonMaximaSuppression3x3.h	25;"	d
__ARM_COMPUTE_NENONMAXIMASUPPRESSION3x3KERNEL_H__	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	25;"	d
__ARM_COMPUTE_NENORMALIZATIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	25;"	d
__ARM_COMPUTE_NENORMALIZATIONLAYER_H__	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	25;"	d
__ARM_COMPUTE_NEON_DEPTHWISE_SEPARABLE_CONVOLUTION_H__	arm_compute/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.h	25;"	d
__ARM_COMPUTE_NEOPTICALFLOW_H__	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	25;"	d
__ARM_COMPUTE_NEPERMUTEKERNEL_H__	arm_compute/core/NEON/kernels/NEPermuteKernel.h	25;"	d
__ARM_COMPUTE_NEPERMUTE_H__	arm_compute/runtime/NEON/functions/NEPermute.h	25;"	d
__ARM_COMPUTE_NEPHASE_H__	arm_compute/runtime/NEON/functions/NEPhase.h	25;"	d
__ARM_COMPUTE_NEPIXELWISEMULTIPLICATIONKERNEL_H__	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	25;"	d
__ARM_COMPUTE_NEPIXELWISEMULTIPLICATION_H__	arm_compute/runtime/NEON/functions/NEPixelWiseMultiplication.h	25;"	d
__ARM_COMPUTE_NEPOOLINGLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	25;"	d
__ARM_COMPUTE_NEPOOLINGLAYER_H__	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	25;"	d
__ARM_COMPUTE_NEQUANTIZATIONLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	25;"	d
__ARM_COMPUTE_NEQUANTIZATIONLAYER_H__	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	25;"	d
__ARM_COMPUTE_NEREDUCTIONOPERATIONKERNEL_H__	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	25;"	d
__ARM_COMPUTE_NEREDUCTIONOPERATION_H__	arm_compute/runtime/NEON/functions/NEReductionOperation.h	25;"	d
__ARM_COMPUTE_NEREMAPKERNEL_H__	arm_compute/core/NEON/kernels/NERemapKernel.h	25;"	d
__ARM_COMPUTE_NEREMAP_H__	arm_compute/runtime/NEON/functions/NERemap.h	25;"	d
__ARM_COMPUTE_NERESHAPELAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEReshapeLayerKernel.h	25;"	d
__ARM_COMPUTE_NERESHAPELAYER_H__	arm_compute/runtime/NEON/functions/NEReshapeLayer.h	25;"	d
__ARM_COMPUTE_NEROIPOOLINGLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	25;"	d
__ARM_COMPUTE_NEROIPOOLINGLAYER_H__	arm_compute/runtime/NEON/functions/NEROIPoolingLayer.h	25;"	d
__ARM_COMPUTE_NESCALEIMAGE_H__	arm_compute/runtime/NEON/functions/NEScale.h	25;"	d
__ARM_COMPUTE_NESCALEKERNEL_H__	arm_compute/core/NEON/kernels/NEScaleKernel.h	25;"	d
__ARM_COMPUTE_NESCHARR3x3KERNEL_H__	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	25;"	d
__ARM_COMPUTE_NESCHARR3x3_H__	arm_compute/runtime/NEON/functions/NEScharr3x3.h	25;"	d
__ARM_COMPUTE_NESCHEDULER_H__	arm_compute/runtime/NEON/NEScheduler.h	25;"	d
__ARM_COMPUTE_NESOBEL3x3KERNEL_H__	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	25;"	d
__ARM_COMPUTE_NESOBEL3x3_H__	arm_compute/runtime/NEON/functions/NESobel3x3.h	25;"	d
__ARM_COMPUTE_NESOBEL5x5KERNEL_H__	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	25;"	d
__ARM_COMPUTE_NESOBEL5x5_H__	arm_compute/runtime/NEON/functions/NESobel5x5.h	25;"	d
__ARM_COMPUTE_NESOBEL7x7KERNEL_H__	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	25;"	d
__ARM_COMPUTE_NESOBEL7x7_H__	arm_compute/runtime/NEON/functions/NESobel7x7.h	25;"	d
__ARM_COMPUTE_NESOFTMAXLAYERKERNEL_H__	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	25;"	d
__ARM_COMPUTE_NESOFTMAXLAYER_H__	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	25;"	d
__ARM_COMPUTE_NETABLELOOKUPKERNEL_H__	arm_compute/core/NEON/kernels/NETableLookupKernel.h	25;"	d
__ARM_COMPUTE_NETABLELOOKUP_H__	arm_compute/runtime/NEON/functions/NETableLookup.h	25;"	d
__ARM_COMPUTE_NETHRESHOLDKERNEL_H__	arm_compute/core/NEON/kernels/NEThresholdKernel.h	25;"	d
__ARM_COMPUTE_NETHRESHOLD_H__	arm_compute/runtime/NEON/functions/NEThreshold.h	25;"	d
__ARM_COMPUTE_NETRANSPOSEKERNEL_H__	arm_compute/core/NEON/kernels/NETransposeKernel.h	25;"	d
__ARM_COMPUTE_NETRANSPOSE_H__	arm_compute/runtime/NEON/functions/NETranspose.h	25;"	d
__ARM_COMPUTE_NEWARPAFFINE_H__	arm_compute/runtime/NEON/functions/NEWarpAffine.h	25;"	d
__ARM_COMPUTE_NEWARPKERNEL_H__	arm_compute/core/NEON/kernels/NEWarpKernel.h	25;"	d
__ARM_COMPUTE_NEWARPPERSPECTIVE_H__	arm_compute/runtime/NEON/functions/NEWarpPerspective.h	25;"	d
__ARM_COMPUTE_NEWEIGHTSRESHAPEKERNEL_H__	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	25;"	d
__ARM_COMPUTE_NEWINOGRADCONVOLUTIONLAYER_H__	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	25;"	d
__ARM_COMPUTE_OFFSETLIFETIMEMANAGER_H__	arm_compute/runtime/OffsetLifetimeManager.h	25;"	d
__ARM_COMPUTE_OFFSETMEMORYPOOL_H__	arm_compute/runtime/OffsetMemoryPool.h	25;"	d
__ARM_COMPUTE_OMPSCHEDULER_H__	arm_compute/runtime/OMP/OMPScheduler.h	25;"	d
__ARM_COMPUTE_OPENCL_H__	arm_compute/core/CL/OpenCL.h	25;"	d
__ARM_COMPUTE_OPENGLES_H__	arm_compute/core/GLES_COMPUTE/OpenGLES.h	25;"	d
__ARM_COMPUTE_PIXELVALUE_H__	arm_compute/core/PixelValue.h	25;"	d
__ARM_COMPUTE_POOLMANAGER_H__	arm_compute/runtime/PoolManager.h	25;"	d
__ARM_COMPUTE_PYRAMIDINFO_H__	arm_compute/core/PyramidInfo.h	25;"	d
__ARM_COMPUTE_PYRAMID_H__	arm_compute/runtime/Pyramid.h	25;"	d
__ARM_COMPUTE_QASYMM8_H__	arm_compute/core/QAsymm8.h	23;"	d
__ARM_COMPUTE_QUANTIZATION_ASYMM_HELPERS_H__	arm_compute/core/utils/quantization/AsymmHelpers.h	25;"	d
__ARM_COMPUTE_ROUNDING_H__	arm_compute/core/Rounding.h	25;"	d
__ARM_COMPUTE_RUNTIME_CL_CLMEMORY_H__	arm_compute/runtime/CL/CLMemory.h	25;"	d
__ARM_COMPUTE_RUNTIME_CL_CL_MEMORY_REGION_H__	arm_compute/runtime/CL/CLMemoryRegion.h	25;"	d
__ARM_COMPUTE_RUNTIME_CPU_UTILS_H__	arm_compute/runtime/CPUUtils.h	25;"	d
__ARM_COMPUTE_RUNTIME_IMEMORY_REGION_H__	arm_compute/runtime/IMemoryRegion.h	25;"	d
__ARM_COMPUTE_RUNTIME_MEMORY_REGION_H__	arm_compute/runtime/MemoryRegion.h	25;"	d
__ARM_COMPUTE_RUNTIME_TYPES_H__	arm_compute/runtime/Types.h	25;"	d
__ARM_COMPUTE_RUNTIME_UTILS_H__	arm_compute/runtime/Utils.h	25;"	d
__ARM_COMPUTE_SCHEDULER_H__	arm_compute/runtime/Scheduler.h	25;"	d
__ARM_COMPUTE_SINGLETHREADSCHEDULER_H__	arm_compute/runtime/SingleThreadScheduler.h	25;"	d
__ARM_COMPUTE_SIZE2D_H__	arm_compute/core/Size2D.h	25;"	d
__ARM_COMPUTE_STEPS_H__	arm_compute/core/Steps.h	25;"	d
__ARM_COMPUTE_STRIDES_H__	arm_compute/core/Strides.h	25;"	d
__ARM_COMPUTE_STRONG_TYPE_STRONG_TYPE_ATTRIBUTES_H__	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	25;"	d
__ARM_COMPUTE_STRONG_TYPE_STRONG_TYPE_H__	arm_compute/core/utils/strong_type/StrongType.h	25;"	d
__ARM_COMPUTE_SUBTENSORINFO_H__	arm_compute/core/SubTensorInfo.h	25;"	d
__ARM_COMPUTE_SUBTENSOR_H__	arm_compute/runtime/SubTensor.h	25;"	d
__ARM_COMPUTE_TENSORALLOCATOR_H__	arm_compute/runtime/TensorAllocator.h	25;"	d
__ARM_COMPUTE_TENSORINFO_H__	arm_compute/core/TensorInfo.h	25;"	d
__ARM_COMPUTE_TENSORSHAPE_H__	arm_compute/core/TensorShape.h	25;"	d
__ARM_COMPUTE_TENSOR_H__	arm_compute/runtime/Tensor.h	25;"	d
__ARM_COMPUTE_TEST_ABSOLUTE_DIFFERENCE_H__	tests/validation/reference/AbsoluteDifference.h	25;"	d
__ARM_COMPUTE_TEST_ACCESSOR_H__	tests/NEON/Accessor.h	25;"	d
__ARM_COMPUTE_TEST_ACCUMULATE_H__	tests/validation/reference/Accumulate.h	25;"	d
__ARM_COMPUTE_TEST_ACTIVATIONFUNCTIONS_DATASET_H__	tests/datasets/ActivationFunctionsDataset.h	25;"	d
__ARM_COMPUTE_TEST_ACTIVATION_LAYER_H__	tests/validation/reference/ActivationLayer.h	25;"	d
__ARM_COMPUTE_TEST_ARITHMETIC_ADDITION_H__	tests/validation/reference/ArithmeticAddition.h	25;"	d
__ARM_COMPUTE_TEST_ARITHMETIC_SUBTRACTION_H__	tests/validation/reference/ArithmeticSubtraction.h	25;"	d
__ARM_COMPUTE_TEST_ARRAYACCESSOR_H__	tests/NEON/ArrayAccessor.h	25;"	d
__ARM_COMPUTE_TEST_BATCH_NORMALIZATION_LAYER_H__	tests/validation/reference/BatchNormalizationLayer.h	25;"	d
__ARM_COMPUTE_TEST_BITWISE_AND_H__	tests/validation/reference/BitwiseAnd.h	25;"	d
__ARM_COMPUTE_TEST_BITWISE_NOT_H__	tests/validation/reference/BitwiseNot.h	25;"	d
__ARM_COMPUTE_TEST_BITWISE_NOT_H__	tests/validation/reference/NonLinearFilter.h	25;"	d
__ARM_COMPUTE_TEST_BITWISE_OR_H__	tests/validation/reference/BitwiseOr.h	25;"	d
__ARM_COMPUTE_TEST_BITWISE_XOR_H__	tests/validation/reference/BitwiseXor.h	25;"	d
__ARM_COMPUTE_TEST_BORDER_MODE_DATASET_H__	tests/datasets/BorderModeDataset.h	25;"	d
__ARM_COMPUTE_TEST_BOX3X3_H__	tests/validation/reference/Box3x3.h	25;"	d
__ARM_COMPUTE_TEST_CHANNEL_COMBINE_H__	tests/validation/reference/ChannelCombine.h	25;"	d
__ARM_COMPUTE_TEST_CHANNEL_EXTRACT_H__	tests/validation/reference/ChannelExtract.h	25;"	d
__ARM_COMPUTE_TEST_CHANNEL_SHUFFLE_H__	tests/validation/reference/ChannelShuffle.h	25;"	d
__ARM_COMPUTE_TEST_CLACCESSOR_H__	tests/CL/CLAccessor.h	25;"	d
__ARM_COMPUTE_TEST_CLARRAYACCESSOR_H__	tests/CL/CLArrayAccessor.h	25;"	d
__ARM_COMPUTE_TEST_CLHOGACCESSOR_H__	tests/CL/CLHOGAccessor.h	25;"	d
__ARM_COMPUTE_TEST_CL_CLLUTACCESSOR_H__	tests/CL/CLLutAccessor.h	25;"	d
__ARM_COMPUTE_TEST_CL_HELPER_H__	tests/CL/Helper.h	25;"	d
__ARM_COMPUTE_TEST_CONVERT_FULLY_CONNECTED_WEIGHTS_H__	tests/validation/reference/ConvertFullyConnectedWeights.h	25;"	d
__ARM_COMPUTE_TEST_CONVERT_POLICY_DATASETS_H__	tests/datasets/ConvertPolicyDataset.h	25;"	d
__ARM_COMPUTE_TEST_CONVOLUTION_H__	tests/validation/reference/Convolution.h	25;"	d
__ARM_COMPUTE_TEST_CONVOLUTION_LAYER_H__	tests/validation/reference/ConvolutionLayer.h	25;"	d
__ARM_COMPUTE_TEST_COPY_H__	tests/validation/reference/Copy.h	25;"	d
__ARM_COMPUTE_TEST_DECONVOLUTION_LAYER_H__	tests/validation/reference/DeconvolutionLayer.h	25;"	d
__ARM_COMPUTE_TEST_DEPTHCONCATENATE_LAYER_H__	tests/validation/reference/DepthConcatenateLayer.h	25;"	d
__ARM_COMPUTE_TEST_DEPTHWISE_CONVOLUTION_H__	tests/validation/reference/DepthwiseConvolutionLayer.h	25;"	d
__ARM_COMPUTE_TEST_DEPTHWISE_SEPARABLE_CONVOLUTION_LAYER_H__	tests/validation/reference/DepthwiseSeparableConvolutionLayer.h	25;"	d
__ARM_COMPUTE_TEST_DEPTH_CONVERT_H__	tests/validation/reference/DepthConvertLayer.h	25;"	d
__ARM_COMPUTE_TEST_DEQUANTIZATION_LAYER_H__	tests/validation/reference/DequantizationLayer.h	25;"	d
__ARM_COMPUTE_TEST_DERIVATIVE_H__	tests/validation/reference/Derivative.h	25;"	d
__ARM_COMPUTE_TEST_DILATE_H__	tests/validation/reference/Dilate.h	25;"	d
__ARM_COMPUTE_TEST_EQUALIZE_HISTOGRAM_H__	tests/validation/reference/EqualizeHistogram.h	25;"	d
__ARM_COMPUTE_TEST_ERODE_H__	tests/validation/reference/Erode.h	25;"	d
__ARM_COMPUTE_TEST_FAST_CORNERS_H__	tests/validation/reference/FastCorners.h	25;"	d
__ARM_COMPUTE_TEST_FIXED_POINT_OPERATION_H__	tests/validation/reference/FixedPoint.h	25;"	d
__ARM_COMPUTE_TEST_FIXED_POINT_PIXEL_WISE_MULTIPLICATION_H__	tests/validation/reference/FixedPointPixelWiseMultiplication.h	25;"	d
__ARM_COMPUTE_TEST_FLATTEN_LAYER_H__	tests/validation/reference/FlattenLayer.h	25;"	d
__ARM_COMPUTE_TEST_FLOOR_H__	tests/validation/reference/Floor.h	25;"	d
__ARM_COMPUTE_TEST_FULLY_CONNECTED_LAYER_H__	tests/validation/reference/FullyConnectedLayer.h	25;"	d
__ARM_COMPUTE_TEST_GAUSSIAN3X3_H__	tests/validation/reference/Gaussian3x3.h	25;"	d
__ARM_COMPUTE_TEST_GAUSSIAN5X5_H__	tests/validation/reference/Gaussian5x5.h	25;"	d
__ARM_COMPUTE_TEST_GAUSSIAN_PYRAMID_HALF_H__	tests/validation/reference/GaussianPyramidHalf.h	25;"	d
__ARM_COMPUTE_TEST_GCACCESSOR_H__	tests/GLES_COMPUTE/GCAccessor.h	25;"	d
__ARM_COMPUTE_TEST_GC_HELPER_H__	tests/GLES_COMPUTE/Helper.h	25;"	d
__ARM_COMPUTE_TEST_GEMMLOWP_H__	tests/validation/reference/GEMMLowp.h	25;"	d
__ARM_COMPUTE_TEST_GEMM_H__	tests/validation/reference/GEMM.h	25;"	d
__ARM_COMPUTE_TEST_GLOBALS_H__	tests/Globals.h	25;"	d
__ARM_COMPUTE_TEST_GRADIENT_DIMENSION_DATASET_H__	tests/datasets/GradientDimensionDataset.h	25;"	d
__ARM_COMPUTE_TEST_HARRIS_CORNER_DETECTOR_H__	tests/validation/reference/HarrisCornerDetector.h	25;"	d
__ARM_COMPUTE_TEST_HISTOGRAM_H__	tests/validation/reference/Histogram.h	25;"	d
__ARM_COMPUTE_TEST_HOGACCESSOR_H__	tests/NEON/HOGAccessor.h	25;"	d
__ARM_COMPUTE_TEST_HOG_DESCRIPTOR_H__	tests/validation/reference/HOGDescriptor.h	25;"	d
__ARM_COMPUTE_TEST_HOG_DETECTOR_H__	tests/validation/reference/HOGDetector.h	25;"	d
__ARM_COMPUTE_TEST_HOG_MULTI_DETECTION_H__	tests/validation/reference/HOGMultiDetection.h	25;"	d
__ARM_COMPUTE_TEST_IACCESSOR_H__	tests/IAccessor.h	25;"	d
__ARM_COMPUTE_TEST_IARRAYACCESSOR_H__	tests/IArrayAccessor.h	25;"	d
__ARM_COMPUTE_TEST_IHOGACCESSOR_H__	tests/IHOGAccessor.h	25;"	d
__ARM_COMPUTE_TEST_ILUTACCESSOR_H__	tests/ILutAccessor.h	25;"	d
__ARM_COMPUTE_TEST_IM2COL_H__	tests/validation/reference/Im2Col.h	25;"	d
__ARM_COMPUTE_TEST_INTEGRAL_IMAGE_H__	tests/validation/reference/IntegralImage.h	25;"	d
__ARM_COMPUTE_TEST_INTEPOLATIONPOLICY_DATASET_H__	tests/datasets/InterpolationPolicyDataset.h	25;"	d
__ARM_COMPUTE_TEST_L2NORMALIZE_H__	tests/validation/reference/L2NormalizeLayer.h	25;"	d
__ARM_COMPUTE_TEST_LOCALLY_CONNECTED_H__	tests/validation/reference/LocallyConnected.h	25;"	d
__ARM_COMPUTE_TEST_MAGNITUDE_H__	tests/validation/reference/Magnitude.h	25;"	d
__ARM_COMPUTE_TEST_MATRIX_PATTERN_DATASET_H__	tests/datasets/MatrixPatternDataset.h	25;"	d
__ARM_COMPUTE_TEST_MEDIAN3X3_H__	tests/validation/reference/Median3x3.h	25;"	d
__ARM_COMPUTE_TEST_MIN_MAX_LOCATION_H__	tests/validation/reference/MinMaxLocation.h	25;"	d
__ARM_COMPUTE_TEST_MODEL_OBJECTS_ALEXNET_H__	tests/networks/AlexNetNetwork.h	25;"	d
__ARM_COMPUTE_TEST_MODEL_OBJECTS_LENET5_H__	tests/networks/LeNet5Network.h	25;"	d
__ARM_COMPUTE_TEST_MODEL_OBJECTS_MOBILENETV1_H__	tests/networks/MobileNetV1Network.h	25;"	d
__ARM_COMPUTE_TEST_MODEL_OBJECTS_MOBILENET_H__	tests/networks/MobileNetNetwork.h	25;"	d
__ARM_COMPUTE_TEST_NEON_HELPER_H__	tests/NEON/Helper.h	25;"	d
__ARM_COMPUTE_TEST_NEON_LUTACCESSOR_H__	tests/NEON/LutAccessor.h	25;"	d
__ARM_COMPUTE_TEST_NON_LINEAR_FILTER_FUNCTION_DATASET_H__	tests/datasets/NonLinearFilterFunctionDataset.h	25;"	d
__ARM_COMPUTE_TEST_NON_MAXIMA_SUPPRESSION_H__	tests/validation/reference/NonMaximaSuppression.h	25;"	d
__ARM_COMPUTE_TEST_NORMALIZATION_LAYER_H__	tests/validation/reference/NormalizationLayer.h	25;"	d
__ARM_COMPUTE_TEST_NORMALIZATION_TYPES_DATASET_H__	tests/datasets/NormalizationTypesDataset.h	25;"	d
__ARM_COMPUTE_TEST_NORMALIZE_PLANAR_YUV_LAYER_H__	tests/validation/reference/NormalizePlanarYUVLayer.h	25;"	d
__ARM_COMPUTE_TEST_OPTICAL_FLOW_H__	tests/validation/reference/OpticalFlow.h	25;"	d
__ARM_COMPUTE_TEST_PADDING_CALCULATOR_H__	tests/PaddingCalculator.h	25;"	d
__ARM_COMPUTE_TEST_PERMUTE_H__	tests/validation/reference/Permute.h	25;"	d
__ARM_COMPUTE_TEST_PHASE_H__	tests/validation/reference/Phase.h	25;"	d
__ARM_COMPUTE_TEST_PIXEL_WISE_MULTIPLICATION_H__	tests/validation/reference/PixelWiseMultiplication.h	25;"	d
__ARM_COMPUTE_TEST_POOLING_LAYER_H__	tests/validation/reference/PoolingLayer.h	25;"	d
__ARM_COMPUTE_TEST_POOLING_TYPES_DATASET_H__	tests/datasets/PoolingTypesDataset.h	25;"	d
__ARM_COMPUTE_TEST_QUANTIZATION_LAYER_H__	tests/validation/reference/QuantizationLayer.h	25;"	d
__ARM_COMPUTE_TEST_RAWLUTACCESSOR_H__	tests/RawLutAccessor.h	25;"	d
__ARM_COMPUTE_TEST_RAW_TENSOR_H__	tests/RawTensor.h	25;"	d
__ARM_COMPUTE_TEST_REDUCTION_OPERATION_DATASET_H__	tests/datasets/ReductionOperationDataset.h	25;"	d
__ARM_COMPUTE_TEST_REDUCTION_OPERATION_H__	tests/validation/reference/ReductionOperation.h	25;"	d
__ARM_COMPUTE_TEST_REMAP_H__	tests/validation/reference/Remap.h	25;"	d
__ARM_COMPUTE_TEST_RESHAPE_LAYER_H__	tests/validation/reference/ReshapeLayer.h	25;"	d
__ARM_COMPUTE_TEST_SAMPLING_POLICY_DATASET_H__	tests/datasets/SamplingPolicyDataset.h	25;"	d
__ARM_COMPUTE_TEST_SCALE_H__	tests/validation/reference/Scale.h	25;"	d
__ARM_COMPUTE_TEST_SCHARR_H__	tests/validation/reference/Scharr.h	25;"	d
__ARM_COMPUTE_TEST_SHAPE_DATASETS_H__	tests/datasets/ShapeDatasets.h	25;"	d
__ARM_COMPUTE_TEST_SIMPLE_TENSOR_H__	tests/SimpleTensor.h	25;"	d
__ARM_COMPUTE_TEST_SOBEL_H__	tests/validation/reference/Sobel.h	25;"	d
__ARM_COMPUTE_TEST_SOFTMAX_LAYER_H__	tests/validation/reference/SoftmaxLayer.h	25;"	d
__ARM_COMPUTE_TEST_STD_MEAN_DEV_H__	tests/validation/reference/MeanStdDev.h	25;"	d
__ARM_COMPUTE_TEST_TABLE_LOOKUP_H__	tests/validation/reference/TableLookup.h	25;"	d
__ARM_COMPUTE_TEST_TENSOR_CACHE_H__	tests/TensorCache.h	25;"	d
__ARM_COMPUTE_TEST_TENSOR_LIBRARY_H__	tests/AssetsLibrary.h	25;"	d
__ARM_COMPUTE_TEST_THRESHOLD_H__	tests/validation/reference/Threshold.h	25;"	d
__ARM_COMPUTE_TEST_TRANSPOSE_H__	tests/validation/reference/Transpose.h	25;"	d
__ARM_COMPUTE_TEST_TYPES_H__	tests/Types.h	25;"	d
__ARM_COMPUTE_TEST_TYPE_PRINTER_H__	utils/TypePrinter.h	25;"	d
__ARM_COMPUTE_TEST_TYPE_READER_H__	tests/TypeReader.h	25;"	d
__ARM_COMPUTE_TEST_UTILS_H__	tests/Utils.h	25;"	d
__ARM_COMPUTE_TEST_VALIDATION_CONVOLUTION_H__	tests/validation/reference/Convolution3d.h	25;"	d
__ARM_COMPUTE_TEST_VALIDATION_FIXEDPOINT_H__	tests/validation/FixedPoint.h	25;"	d
__ARM_COMPUTE_TEST_VALIDATION_HELPERS_H__	tests/validation/Helpers.h	25;"	d
__ARM_COMPUTE_TEST_VALIDATION_H__	tests/validation/Validation.h	25;"	d
__ARM_COMPUTE_TEST_VALIDATION_UTILS_H__	tests/validation/reference/Utils.h	25;"	d
__ARM_COMPUTE_TEST_VALIDATION_UTILS_QUANTIZED_ASYMM_H__	tests/validation/reference/UtilsQuantizedAsymm.h	25;"	d
__ARM_COMPUTE_TEST_WARP_AFFINE_H__	tests/validation/reference/WarpAffine.h	25;"	d
__ARM_COMPUTE_TEST_WARP_PERSPECTIVE_H__	tests/validation/reference/WarpPerspective.h	25;"	d
__ARM_COMPUTE_TEST_WIDTHCONCATENATE_LAYER_H__	tests/validation/reference/WidthConcatenateLayer.h	25;"	d
__ARM_COMPUTE_TEST_WINOGRAD_H__	tests/validation/reference/Winograd.h	25;"	d
__ARM_COMPUTE_TUNERS_BIFROST_TUNER_H__	arm_compute/runtime/CL/tuners/BifrostTuner.h	25;"	d
__ARM_COMPUTE_TYPES_H__	arm_compute/core/Types.h	25;"	d
__ARM_COMPUTE_UTILS_H__	arm_compute/core/Utils.h	25;"	d
__ARM_COMPUTE_UTILS_SEMAMPHORE_H__	support/Semaphore.h	25;"	d
__ARM_COMPUTE_VALIDATE_H__	arm_compute/core/Validate.h	25;"	d
__ARM_COMPUTE_WINDOW_H__	arm_compute/core/Window.h	25;"	d
__ARM_COMPUTE_WRAPPER_AND_H__	arm_compute/core/NEON/wrapper/intrinsics/and.h	25;"	d
__ARM_COMPUTE_WRAPPER_DUP_N_H__	arm_compute/core/NEON/wrapper/intrinsics/dup_n.h	25;"	d
__ARM_COMPUTE_WRAPPER_H__	arm_compute/core/NEON/wrapper/wrapper.h	25;"	d
__ARM_COMPUTE_WRAPPER_INTRINSICS_H__	arm_compute/core/NEON/wrapper/intrinsics/intrinsics.h	25;"	d
__ARM_COMPUTE_WRAPPER_LOAD_H__	arm_compute/core/NEON/wrapper/intrinsics/load.h	25;"	d
__ARM_COMPUTE_WRAPPER_MAX_H__	arm_compute/core/NEON/wrapper/intrinsics/max.h	25;"	d
__ARM_COMPUTE_WRAPPER_MIN_H__	arm_compute/core/NEON/wrapper/intrinsics/min.h	25;"	d
__ARM_COMPUTE_WRAPPER_STORE_H__	arm_compute/core/NEON/wrapper/intrinsics/store.h	25;"	d
__ARM_COMPUTE_WRAPPER_TRAITS_H__	arm_compute/core/NEON/wrapper/traits.h	25;"	d
__BUILD_PROGRAM_ERR	include/CL/cl.hpp	12399;"	d
__BUILD_PROGRAM_ERR	include/CL/cl.hpp	389;"	d
__BUILD_PROGRAM_ERR	include/CL/cl2.hpp	781;"	d
__BUILD_PROGRAM_ERR	include/CL/cl2.hpp	9482;"	d
__CL_ANON_STRUCT__	include/CL/cl_platform.h	1451;"	d
__CL_ANON_STRUCT__	include/CL/cl_platform.h	555;"	d
__CL_ANON_STRUCT__	include/CL/cl_platform.h	558;"	d
__CL_ANON_STRUCT__	include/CL/cl_platform.h	564;"	d
__CL_ANON_STRUCT__	include/CL/cl_platform.h	572;"	d
__CL_CHAR16__	include/CL/cl_platform.h	441;"	d
__CL_CHAR16__	include/CL/cl_platform.h	491;"	d
__CL_CHAR8__	include/CL/cl_platform.h	525;"	d
__CL_DECLARE_PARAM_TRAITS	include/CL/cl.hpp	1416;"	d
__CL_DOUBLE2__	include/CL/cl_platform.h	498;"	d
__CL_DOUBLE4__	include/CL/cl_platform.h	549;"	d
__CL_EXPLICIT_CONSTRUCTORS	include/CL/cl.hpp	12422;"	d
__CL_EXPLICIT_CONSTRUCTORS	include/CL/cl.hpp	185;"	d
__CL_EXPLICIT_CONSTRUCTORS	include/CL/cl.hpp	187;"	d
__CL_EXT_H	include/CL/cl_ext.h	35;"	d
__CL_EXT_INTEL_H	include/CL/cl_ext_intel.h	53;"	d
__CL_FLOAT2__	include/CL/cl_platform.h	532;"	d
__CL_FLOAT4__	include/CL/cl_platform.h	446;"	d
__CL_FLOAT4__	include/CL/cl_platform.h	460;"	d
__CL_FLOAT8__	include/CL/cl_platform.h	548;"	d
__CL_FUNCTION_TYPE	include/CL/cl.hpp	12427;"	d
__CL_HAS_ANON_STRUCT__	include/CL/cl_platform.h	1450;"	d
__CL_HAS_ANON_STRUCT__	include/CL/cl_platform.h	554;"	d
__CL_HAS_ANON_STRUCT__	include/CL/cl_platform.h	557;"	d
__CL_HAS_ANON_STRUCT__	include/CL/cl_platform.h	563;"	d
__CL_HAS_ANON_STRUCT__	include/CL/cl_platform.h	571;"	d
__CL_INT2__	include/CL/cl_platform.h	528;"	d
__CL_INT4__	include/CL/cl_platform.h	445;"	d
__CL_INT4__	include/CL/cl_platform.h	494;"	d
__CL_LONG1__	include/CL/cl_platform.h	531;"	d
__CL_LONG2__	include/CL/cl_platform.h	497;"	d
__CL_PLATFORM_H	include/CL/cl_platform.h	32;"	d
__CL_SHORT4__	include/CL/cl_platform.h	527;"	d
__CL_SHORT8__	include/CL/cl_platform.h	443;"	d
__CL_SHORT8__	include/CL/cl_platform.h	493;"	d
__CL_STRINGIFY	include/CL/cl_platform.h	1442;"	d
__CL_UCHAR16__	include/CL/cl_platform.h	440;"	d
__CL_UCHAR16__	include/CL/cl_platform.h	490;"	d
__CL_UCHAR8__	include/CL/cl_platform.h	524;"	d
__CL_UINT2__	include/CL/cl_platform.h	529;"	d
__CL_UINT4__	include/CL/cl_platform.h	444;"	d
__CL_UINT4__	include/CL/cl_platform.h	495;"	d
__CL_ULONG1__	include/CL/cl_platform.h	530;"	d
__CL_ULONG2__	include/CL/cl_platform.h	496;"	d
__CL_USHORT4__	include/CL/cl_platform.h	526;"	d
__CL_USHORT8__	include/CL/cl_platform.h	442;"	d
__CL_USHORT8__	include/CL/cl_platform.h	492;"	d
__COMPILE_PROGRAM_ERR	include/CL/cl.hpp	391;"	d
__COMPILE_PROGRAM_ERR	include/CL/cl2.hpp	783;"	d
__COPY_ERR	include/CL/cl.hpp	364;"	d
__COPY_ERR	include/CL/cl2.hpp	757;"	d
__CREATE_BUFFER_ERR	include/CL/cl.hpp	12380;"	d
__CREATE_BUFFER_ERR	include/CL/cl.hpp	363;"	d
__CREATE_BUFFER_ERR	include/CL/cl2.hpp	756;"	d
__CREATE_BUFFER_ERR	include/CL/cl2.hpp	9463;"	d
__CREATE_COMMAND_QUEUE_ERR	include/CL/cl.hpp	12402;"	d
__CREATE_COMMAND_QUEUE_ERR	include/CL/cl.hpp	396;"	d
__CREATE_COMMAND_QUEUE_ERR	include/CL/cl2.hpp	855;"	d
__CREATE_COMMAND_QUEUE_ERR	include/CL/cl2.hpp	9485;"	d
__CREATE_COMMAND_QUEUE_WITH_PROPERTIES_ERR	include/CL/cl2.hpp	789;"	d
__CREATE_CONTEXT_ERR	include/CL/cl.hpp	12376;"	d
__CREATE_CONTEXT_ERR	include/CL/cl.hpp	359;"	d
__CREATE_CONTEXT_ERR	include/CL/cl2.hpp	752;"	d
__CREATE_CONTEXT_ERR	include/CL/cl2.hpp	9459;"	d
__CREATE_CONTEXT_FROM_TYPE_ERR	include/CL/cl.hpp	12377;"	d
__CREATE_CONTEXT_FROM_TYPE_ERR	include/CL/cl.hpp	360;"	d
__CREATE_CONTEXT_FROM_TYPE_ERR	include/CL/cl2.hpp	753;"	d
__CREATE_CONTEXT_FROM_TYPE_ERR	include/CL/cl2.hpp	9460;"	d
__CREATE_GL_BUFFER_ERR	include/CL/cl.hpp	366;"	d
__CREATE_GL_BUFFER_ERR	include/CL/cl2.hpp	759;"	d
__CREATE_GL_RENDER_BUFFER_ERR	include/CL/cl.hpp	367;"	d
__CREATE_GL_RENDER_BUFFER_ERR	include/CL/cl2.hpp	760;"	d
__CREATE_GL_TEXTURE_2D_ERR	include/CL/cl.hpp	448;"	d
__CREATE_GL_TEXTURE_2D_ERR	include/CL/cl2.hpp	845;"	d
__CREATE_GL_TEXTURE_3D_ERR	include/CL/cl.hpp	449;"	d
__CREATE_GL_TEXTURE_3D_ERR	include/CL/cl2.hpp	846;"	d
__CREATE_GL_TEXTURE_ERR	include/CL/cl.hpp	371;"	d
__CREATE_GL_TEXTURE_ERR	include/CL/cl2.hpp	764;"	d
__CREATE_IMAGE2D_ERR	include/CL/cl.hpp	12382;"	d
__CREATE_IMAGE2D_ERR	include/CL/cl.hpp	450;"	d
__CREATE_IMAGE2D_ERR	include/CL/cl2.hpp	847;"	d
__CREATE_IMAGE2D_ERR	include/CL/cl2.hpp	9465;"	d
__CREATE_IMAGE3D_ERR	include/CL/cl.hpp	12383;"	d
__CREATE_IMAGE3D_ERR	include/CL/cl.hpp	451;"	d
__CREATE_IMAGE3D_ERR	include/CL/cl2.hpp	848;"	d
__CREATE_IMAGE3D_ERR	include/CL/cl2.hpp	9466;"	d
__CREATE_IMAGE_ERR	include/CL/cl.hpp	370;"	d
__CREATE_IMAGE_ERR	include/CL/cl2.hpp	763;"	d
__CREATE_KERNELS_IN_PROGRAM_ERR	include/CL/cl.hpp	12400;"	d
__CREATE_KERNELS_IN_PROGRAM_ERR	include/CL/cl.hpp	394;"	d
__CREATE_KERNELS_IN_PROGRAM_ERR	include/CL/cl2.hpp	786;"	d
__CREATE_KERNELS_IN_PROGRAM_ERR	include/CL/cl2.hpp	9483;"	d
__CREATE_KERNEL_ERR	include/CL/cl.hpp	12394;"	d
__CREATE_KERNEL_ERR	include/CL/cl.hpp	382;"	d
__CREATE_KERNEL_ERR	include/CL/cl2.hpp	774;"	d
__CREATE_KERNEL_ERR	include/CL/cl2.hpp	9477;"	d
__CREATE_PIPE_ERR	include/CL/cl2.hpp	818;"	d
__CREATE_PIPE_ERR	include/CL/cl2.hpp	9508;"	d
__CREATE_PROGRAM_WITH_BINARY_ERR	include/CL/cl.hpp	12397;"	d
__CREATE_PROGRAM_WITH_BINARY_ERR	include/CL/cl.hpp	385;"	d
__CREATE_PROGRAM_WITH_BINARY_ERR	include/CL/cl2.hpp	777;"	d
__CREATE_PROGRAM_WITH_BINARY_ERR	include/CL/cl2.hpp	9480;"	d
__CREATE_PROGRAM_WITH_BUILT_IN_KERNELS_ERR	include/CL/cl.hpp	12398;"	d
__CREATE_PROGRAM_WITH_BUILT_IN_KERNELS_ERR	include/CL/cl.hpp	387;"	d
__CREATE_PROGRAM_WITH_BUILT_IN_KERNELS_ERR	include/CL/cl2.hpp	779;"	d
__CREATE_PROGRAM_WITH_BUILT_IN_KERNELS_ERR	include/CL/cl2.hpp	9481;"	d
__CREATE_PROGRAM_WITH_SOURCE_ERR	include/CL/cl.hpp	12396;"	d
__CREATE_PROGRAM_WITH_SOURCE_ERR	include/CL/cl.hpp	384;"	d
__CREATE_PROGRAM_WITH_SOURCE_ERR	include/CL/cl2.hpp	776;"	d
__CREATE_PROGRAM_WITH_SOURCE_ERR	include/CL/cl2.hpp	9479;"	d
__CREATE_SAMPLER_ERR	include/CL/cl.hpp	12384;"	d
__CREATE_SAMPLER_ERR	include/CL/cl.hpp	374;"	d
__CREATE_SAMPLER_ERR	include/CL/cl2.hpp	857;"	d
__CREATE_SAMPLER_ERR	include/CL/cl2.hpp	9467;"	d
__CREATE_SAMPLER_WITH_PROPERTIES_ERR	include/CL/cl2.hpp	790;"	d
__CREATE_SUBBUFFER_ERR	include/CL/cl.hpp	12381;"	d
__CREATE_SUBBUFFER_ERR	include/CL/cl.hpp	365;"	d
__CREATE_SUBBUFFER_ERR	include/CL/cl2.hpp	758;"	d
__CREATE_SUBBUFFER_ERR	include/CL/cl2.hpp	9464;"	d
__CREATE_SUB_DEVICES	include/CL/cl.hpp	12436;"	d
__CREATE_SUB_DEVICES	include/CL/cl.hpp	435;"	d
__CREATE_SUB_DEVICES_ERR	include/CL/cl2.hpp	832;"	d
__CREATE_SUB_DEVICES_ERR	include/CL/cl2.hpp	9506;"	d
__CREATE_USER_EVENT_ERR	include/CL/cl.hpp	12387;"	d
__CREATE_USER_EVENT_ERR	include/CL/cl.hpp	377;"	d
__CREATE_USER_EVENT_ERR	include/CL/cl2.hpp	769;"	d
__CREATE_USER_EVENT_ERR	include/CL/cl2.hpp	9470;"	d
__DEFAULT_BEING_INITIALIZED	include/CL/cl.hpp	1018;"	d
__DEFAULT_BEING_INITIALIZED	include/CL/cl.hpp	12443;"	d
__DEFAULT_INITIALIZED	include/CL/cl.hpp	1019;"	d
__DEFAULT_INITIALIZED	include/CL/cl.hpp	12444;"	d
__DEFAULT_NOT_INITIALIZED	include/CL/cl.hpp	1017;"	d
__DEFAULT_NOT_INITIALIZED	include/CL/cl.hpp	12442;"	d
__ENQEUE_COPY_BUFFER_ERR	include/CL/cl.hpp	12408;"	d
__ENQEUE_COPY_BUFFER_ERR	include/CL/cl.hpp	402;"	d
__ENQEUE_COPY_BUFFER_ERR	include/CL/cl2.hpp	797;"	d
__ENQEUE_COPY_BUFFER_ERR	include/CL/cl2.hpp	9491;"	d
__ENQEUE_COPY_BUFFER_RECT_ERR	include/CL/cl.hpp	12409;"	d
__ENQEUE_COPY_BUFFER_RECT_ERR	include/CL/cl.hpp	403;"	d
__ENQEUE_COPY_BUFFER_RECT_ERR	include/CL/cl2.hpp	798;"	d
__ENQEUE_COPY_BUFFER_RECT_ERR	include/CL/cl2.hpp	9492;"	d
__ENQUEUE_ACQUIRE_GL_ERR	include/CL/cl.hpp	421;"	d
__ENQUEUE_ACQUIRE_GL_ERR	include/CL/cl2.hpp	815;"	d
__ENQUEUE_BARRIER_ERR	include/CL/cl.hpp	446;"	d
__ENQUEUE_BARRIER_ERR	include/CL/cl2.hpp	843;"	d
__ENQUEUE_BARRIER_WAIT_LIST_ERR	include/CL/cl.hpp	462;"	d
__ENQUEUE_BARRIER_WAIT_LIST_ERR	include/CL/cl2.hpp	865;"	d
__ENQUEUE_COPY_BUFFER_TO_IMAGE_ERR	include/CL/cl.hpp	12414;"	d
__ENQUEUE_COPY_BUFFER_TO_IMAGE_ERR	include/CL/cl.hpp	410;"	d
__ENQUEUE_COPY_BUFFER_TO_IMAGE_ERR	include/CL/cl2.hpp	805;"	d
__ENQUEUE_COPY_BUFFER_TO_IMAGE_ERR	include/CL/cl2.hpp	9497;"	d
__ENQUEUE_COPY_IMAGE_ERR	include/CL/cl.hpp	12412;"	d
__ENQUEUE_COPY_IMAGE_ERR	include/CL/cl.hpp	407;"	d
__ENQUEUE_COPY_IMAGE_ERR	include/CL/cl2.hpp	802;"	d
__ENQUEUE_COPY_IMAGE_ERR	include/CL/cl2.hpp	9495;"	d
__ENQUEUE_COPY_IMAGE_TO_BUFFER_ERR	include/CL/cl.hpp	12413;"	d
__ENQUEUE_COPY_IMAGE_TO_BUFFER_ERR	include/CL/cl.hpp	409;"	d
__ENQUEUE_COPY_IMAGE_TO_BUFFER_ERR	include/CL/cl2.hpp	804;"	d
__ENQUEUE_COPY_IMAGE_TO_BUFFER_ERR	include/CL/cl2.hpp	9496;"	d
__ENQUEUE_FILL_BUFFER_ERR	include/CL/cl.hpp	404;"	d
__ENQUEUE_FILL_BUFFER_ERR	include/CL/cl2.hpp	799;"	d
__ENQUEUE_FILL_IMAGE_ERR	include/CL/cl.hpp	408;"	d
__ENQUEUE_FILL_IMAGE_ERR	include/CL/cl2.hpp	803;"	d
__ENQUEUE_MAP_BUFFER_ERR	include/CL/cl.hpp	12415;"	d
__ENQUEUE_MAP_BUFFER_ERR	include/CL/cl.hpp	411;"	d
__ENQUEUE_MAP_BUFFER_ERR	include/CL/cl2.hpp	806;"	d
__ENQUEUE_MAP_BUFFER_ERR	include/CL/cl2.hpp	9498;"	d
__ENQUEUE_MAP_IMAGE_ERR	include/CL/cl.hpp	12416;"	d
__ENQUEUE_MAP_IMAGE_ERR	include/CL/cl.hpp	412;"	d
__ENQUEUE_MAP_IMAGE_ERR	include/CL/cl2.hpp	807;"	d
__ENQUEUE_MAP_IMAGE_ERR	include/CL/cl2.hpp	9499;"	d
__ENQUEUE_MARKER_ERR	include/CL/cl.hpp	444;"	d
__ENQUEUE_MARKER_ERR	include/CL/cl2.hpp	841;"	d
__ENQUEUE_MARKER_WAIT_LIST_ERR	include/CL/cl.hpp	461;"	d
__ENQUEUE_MARKER_WAIT_LIST_ERR	include/CL/cl2.hpp	864;"	d
__ENQUEUE_MIGRATE_MEM_OBJECTS_ERR	include/CL/cl.hpp	418;"	d
__ENQUEUE_MIGRATE_MEM_OBJECTS_ERR	include/CL/cl2.hpp	812;"	d
__ENQUEUE_NATIVE_KERNEL	include/CL/cl.hpp	12420;"	d
__ENQUEUE_NATIVE_KERNEL	include/CL/cl.hpp	416;"	d
__ENQUEUE_NATIVE_KERNEL	include/CL/cl2.hpp	810;"	d
__ENQUEUE_NATIVE_KERNEL	include/CL/cl2.hpp	9503;"	d
__ENQUEUE_NDRANGE_KERNEL_ERR	include/CL/cl.hpp	12418;"	d
__ENQUEUE_NDRANGE_KERNEL_ERR	include/CL/cl.hpp	414;"	d
__ENQUEUE_NDRANGE_KERNEL_ERR	include/CL/cl2.hpp	809;"	d
__ENQUEUE_NDRANGE_KERNEL_ERR	include/CL/cl2.hpp	9501;"	d
__ENQUEUE_READ_BUFFER_ERR	include/CL/cl.hpp	12404;"	d
__ENQUEUE_READ_BUFFER_ERR	include/CL/cl.hpp	398;"	d
__ENQUEUE_READ_BUFFER_ERR	include/CL/cl2.hpp	793;"	d
__ENQUEUE_READ_BUFFER_ERR	include/CL/cl2.hpp	9487;"	d
__ENQUEUE_READ_BUFFER_RECT_ERR	include/CL/cl.hpp	12406;"	d
__ENQUEUE_READ_BUFFER_RECT_ERR	include/CL/cl.hpp	399;"	d
__ENQUEUE_READ_BUFFER_RECT_ERR	include/CL/cl2.hpp	794;"	d
__ENQUEUE_READ_BUFFER_RECT_ERR	include/CL/cl2.hpp	9489;"	d
__ENQUEUE_READ_IMAGE_ERR	include/CL/cl.hpp	12410;"	d
__ENQUEUE_READ_IMAGE_ERR	include/CL/cl.hpp	405;"	d
__ENQUEUE_READ_IMAGE_ERR	include/CL/cl2.hpp	800;"	d
__ENQUEUE_READ_IMAGE_ERR	include/CL/cl2.hpp	9493;"	d
__ENQUEUE_RELEASE_GL_ERR	include/CL/cl.hpp	422;"	d
__ENQUEUE_RELEASE_GL_ERR	include/CL/cl2.hpp	816;"	d
__ENQUEUE_TASK_ERR	include/CL/cl.hpp	12419;"	d
__ENQUEUE_TASK_ERR	include/CL/cl.hpp	415;"	d
__ENQUEUE_TASK_ERR	include/CL/cl2.hpp	856;"	d
__ENQUEUE_TASK_ERR	include/CL/cl2.hpp	9502;"	d
__ENQUEUE_UNMAP_MEM_OBJECT_ERR	include/CL/cl.hpp	12417;"	d
__ENQUEUE_UNMAP_MEM_OBJECT_ERR	include/CL/cl.hpp	413;"	d
__ENQUEUE_UNMAP_MEM_OBJECT_ERR	include/CL/cl2.hpp	808;"	d
__ENQUEUE_UNMAP_MEM_OBJECT_ERR	include/CL/cl2.hpp	9500;"	d
__ENQUEUE_WAIT_FOR_EVENTS_ERR	include/CL/cl.hpp	445;"	d
__ENQUEUE_WAIT_FOR_EVENTS_ERR	include/CL/cl2.hpp	842;"	d
__ENQUEUE_WRITE_BUFFER_ERR	include/CL/cl.hpp	12405;"	d
__ENQUEUE_WRITE_BUFFER_ERR	include/CL/cl.hpp	400;"	d
__ENQUEUE_WRITE_BUFFER_ERR	include/CL/cl2.hpp	795;"	d
__ENQUEUE_WRITE_BUFFER_ERR	include/CL/cl2.hpp	9488;"	d
__ENQUEUE_WRITE_BUFFER_RECT_ERR	include/CL/cl.hpp	12407;"	d
__ENQUEUE_WRITE_BUFFER_RECT_ERR	include/CL/cl.hpp	401;"	d
__ENQUEUE_WRITE_BUFFER_RECT_ERR	include/CL/cl2.hpp	796;"	d
__ENQUEUE_WRITE_BUFFER_RECT_ERR	include/CL/cl2.hpp	9490;"	d
__ENQUEUE_WRITE_IMAGE_ERR	include/CL/cl.hpp	12411;"	d
__ENQUEUE_WRITE_IMAGE_ERR	include/CL/cl.hpp	406;"	d
__ENQUEUE_WRITE_IMAGE_ERR	include/CL/cl2.hpp	801;"	d
__ENQUEUE_WRITE_IMAGE_ERR	include/CL/cl2.hpp	9494;"	d
__ERR_STR	include/CL/cl.hpp	12358;"	d
__ERR_STR	include/CL/cl.hpp	309;"	d
__ERR_STR	include/CL/cl.hpp	311;"	d
__FINISH_ERR	include/CL/cl.hpp	428;"	d
__FINISH_ERR	include/CL/cl2.hpp	825;"	d
__FLUSH_ERR	include/CL/cl.hpp	427;"	d
__FLUSH_ERR	include/CL/cl2.hpp	824;"	d
__GET_COMMAND_QUEUE_INFO_ERR	include/CL/cl.hpp	12374;"	d
__GET_COMMAND_QUEUE_INFO_ERR	include/CL/cl.hpp	357;"	d
__GET_COMMAND_QUEUE_INFO_ERR	include/CL/cl2.hpp	750;"	d
__GET_COMMAND_QUEUE_INFO_ERR	include/CL/cl2.hpp	9457;"	d
__GET_CONTEXT_INFO_ERR	include/CL/cl.hpp	12363;"	d
__GET_CONTEXT_INFO_ERR	include/CL/cl.hpp	344;"	d
__GET_CONTEXT_INFO_ERR	include/CL/cl2.hpp	737;"	d
__GET_CONTEXT_INFO_ERR	include/CL/cl2.hpp	9446;"	d
__GET_DEVICE_IDS_ERR	include/CL/cl.hpp	12362;"	d
__GET_DEVICE_IDS_ERR	include/CL/cl.hpp	342;"	d
__GET_DEVICE_IDS_ERR	include/CL/cl2.hpp	735;"	d
__GET_DEVICE_IDS_ERR	include/CL/cl2.hpp	9445;"	d
__GET_DEVICE_INFO_ERR	include/CL/cl.hpp	12360;"	d
__GET_DEVICE_INFO_ERR	include/CL/cl.hpp	340;"	d
__GET_DEVICE_INFO_ERR	include/CL/cl2.hpp	733;"	d
__GET_DEVICE_INFO_ERR	include/CL/cl2.hpp	9443;"	d
__GET_EVENT_INFO_ERR	include/CL/cl.hpp	12364;"	d
__GET_EVENT_INFO_ERR	include/CL/cl.hpp	345;"	d
__GET_EVENT_INFO_ERR	include/CL/cl2.hpp	738;"	d
__GET_EVENT_INFO_ERR	include/CL/cl2.hpp	9447;"	d
__GET_EVENT_PROFILE_INFO_ERR	include/CL/cl.hpp	12365;"	d
__GET_EVENT_PROFILE_INFO_ERR	include/CL/cl.hpp	346;"	d
__GET_EVENT_PROFILE_INFO_ERR	include/CL/cl2.hpp	739;"	d
__GET_EVENT_PROFILE_INFO_ERR	include/CL/cl2.hpp	9448;"	d
__GET_GL_OBJECT_INFO_ERR	include/CL/cl.hpp	368;"	d
__GET_GL_OBJECT_INFO_ERR	include/CL/cl2.hpp	761;"	d
__GET_IMAGE_INFO_ERR	include/CL/cl.hpp	12367;"	d
__GET_IMAGE_INFO_ERR	include/CL/cl.hpp	348;"	d
__GET_IMAGE_INFO_ERR	include/CL/cl2.hpp	741;"	d
__GET_IMAGE_INFO_ERR	include/CL/cl2.hpp	9450;"	d
__GET_KERNEL_ARG_INFO_ERR	include/CL/cl.hpp	12370;"	d
__GET_KERNEL_ARG_INFO_ERR	include/CL/cl.hpp	352;"	d
__GET_KERNEL_ARG_INFO_ERR	include/CL/cl2.hpp	745;"	d
__GET_KERNEL_ARG_INFO_ERR	include/CL/cl2.hpp	9453;"	d
__GET_KERNEL_INFO_ERR	include/CL/cl.hpp	12369;"	d
__GET_KERNEL_INFO_ERR	include/CL/cl.hpp	350;"	d
__GET_KERNEL_INFO_ERR	include/CL/cl2.hpp	743;"	d
__GET_KERNEL_INFO_ERR	include/CL/cl2.hpp	9452;"	d
__GET_KERNEL_WORK_GROUP_INFO_ERR	include/CL/cl.hpp	12371;"	d
__GET_KERNEL_WORK_GROUP_INFO_ERR	include/CL/cl.hpp	354;"	d
__GET_KERNEL_WORK_GROUP_INFO_ERR	include/CL/cl2.hpp	747;"	d
__GET_KERNEL_WORK_GROUP_INFO_ERR	include/CL/cl2.hpp	9454;"	d
__GET_MEM_OBJECT_INFO_ERR	include/CL/cl.hpp	12366;"	d
__GET_MEM_OBJECT_INFO_ERR	include/CL/cl.hpp	347;"	d
__GET_MEM_OBJECT_INFO_ERR	include/CL/cl2.hpp	740;"	d
__GET_MEM_OBJECT_INFO_ERR	include/CL/cl2.hpp	9449;"	d
__GET_PIPE_INFO_ERR	include/CL/cl2.hpp	819;"	d
__GET_PIPE_INFO_ERR	include/CL/cl2.hpp	9509;"	d
__GET_PLATFORM_IDS_ERR	include/CL/cl.hpp	343;"	d
__GET_PLATFORM_IDS_ERR	include/CL/cl2.hpp	736;"	d
__GET_PLATFORM_INFO_ERR	include/CL/cl.hpp	12361;"	d
__GET_PLATFORM_INFO_ERR	include/CL/cl.hpp	341;"	d
__GET_PLATFORM_INFO_ERR	include/CL/cl2.hpp	734;"	d
__GET_PLATFORM_INFO_ERR	include/CL/cl2.hpp	9444;"	d
__GET_PROGRAM_BUILD_INFO_ERR	include/CL/cl.hpp	12373;"	d
__GET_PROGRAM_BUILD_INFO_ERR	include/CL/cl.hpp	356;"	d
__GET_PROGRAM_BUILD_INFO_ERR	include/CL/cl2.hpp	749;"	d
__GET_PROGRAM_BUILD_INFO_ERR	include/CL/cl2.hpp	9456;"	d
__GET_PROGRAM_INFO_ERR	include/CL/cl.hpp	12372;"	d
__GET_PROGRAM_INFO_ERR	include/CL/cl.hpp	355;"	d
__GET_PROGRAM_INFO_ERR	include/CL/cl2.hpp	748;"	d
__GET_PROGRAM_INFO_ERR	include/CL/cl2.hpp	9455;"	d
__GET_SAMPLER_INFO_ERR	include/CL/cl.hpp	12368;"	d
__GET_SAMPLER_INFO_ERR	include/CL/cl.hpp	349;"	d
__GET_SAMPLER_INFO_ERR	include/CL/cl2.hpp	742;"	d
__GET_SAMPLER_INFO_ERR	include/CL/cl2.hpp	9451;"	d
__GET_SUPPORTED_IMAGE_FORMATS_ERR	include/CL/cl.hpp	12378;"	d
__GET_SUPPORTED_IMAGE_FORMATS_ERR	include/CL/cl.hpp	361;"	d
__GET_SUPPORTED_IMAGE_FORMATS_ERR	include/CL/cl2.hpp	754;"	d
__GET_SUPPORTED_IMAGE_FORMATS_ERR	include/CL/cl2.hpp	9461;"	d
__IMAGE_DIMENSION_ERR	include/CL/cl.hpp	372;"	d
__IMAGE_DIMENSION_ERR	include/CL/cl2.hpp	765;"	d
__INIT_CL_EXT_FCN_PTR	include/CL/cl.hpp	12434;"	d
__INIT_CL_EXT_FCN_PTR	include/CL/cl.hpp	237;"	d
__INIT_CL_EXT_FCN_PTR_PLATFORM	include/CL/cl.hpp	247;"	d
__LINK_PROGRAM_ERR	include/CL/cl2.hpp	784;"	d
__MAX_DEFAULT_VECTOR_SIZE	include/CL/cl.hpp	653;"	d
__OPENCL_CL_D3D10_H	include/CL/cl_d3d10.h	32;"	d
__OPENCL_CL_D3D11_H	include/CL/cl_d3d11.h	32;"	d
__OPENCL_CL_DX9_MEDIA_SHARING_H	include/CL/cl_dx9_media_sharing.h	32;"	d
__OPENCL_CL_DX9_MEDIA_SHARING_INTEL_H	include/CL/cl_dx9_media_sharing_intel.h	53;"	d
__OPENCL_CL_EGL_H	include/CL/cl_egl.h	30;"	d
__OPENCL_CL_GL_EXT_H	include/CL/cl_gl_ext.h	35;"	d
__OPENCL_CL_GL_H	include/CL/cl_gl.h	30;"	d
__OPENCL_CL_H	include/CL/cl.h	30;"	d
__OPENCL_CL_VA_API_MEDIA_SHARING_INTEL_H	include/CL/cl_va_api_media_sharing_intel.h	54;"	d
__OPENCL_H	include/CL/opencl.h	32;"	d
__PARAM_NAME_DEVICE_FISSION	include/CL/cl.hpp	12439;"	d
__PARAM_NAME_DEVICE_FISSION	include/CL/cl.hpp	1405;"	d
__PARAM_NAME_INFO_1_0	include/CL/cl.hpp	1232;"	d
__PARAM_NAME_INFO_1_1	include/CL/cl.hpp	1354;"	d
__PARAM_NAME_INFO_1_2	include/CL/cl.hpp	1380;"	d
__RELEASE_ERR	include/CL/cl.hpp	426;"	d
__RELEASE_ERR	include/CL/cl2.hpp	823;"	d
__RETAIN_ERR	include/CL/cl.hpp	425;"	d
__RETAIN_ERR	include/CL/cl2.hpp	822;"	d
__SET_COMMAND_QUEUE_PROPERTY_ERR	include/CL/cl.hpp	12403;"	d
__SET_COMMAND_QUEUE_PROPERTY_ERR	include/CL/cl.hpp	397;"	d
__SET_COMMAND_QUEUE_PROPERTY_ERR	include/CL/cl2.hpp	792;"	d
__SET_COMMAND_QUEUE_PROPERTY_ERR	include/CL/cl2.hpp	9486;"	d
__SET_EVENT_CALLBACK_ERR	include/CL/cl.hpp	12389;"	d
__SET_EVENT_CALLBACK_ERR	include/CL/cl.hpp	379;"	d
__SET_EVENT_CALLBACK_ERR	include/CL/cl2.hpp	771;"	d
__SET_EVENT_CALLBACK_ERR	include/CL/cl2.hpp	9472;"	d
__SET_KERNEL_ARGS_ERR	include/CL/cl.hpp	12395;"	d
__SET_KERNEL_ARGS_ERR	include/CL/cl.hpp	383;"	d
__SET_KERNEL_ARGS_ERR	include/CL/cl2.hpp	775;"	d
__SET_KERNEL_ARGS_ERR	include/CL/cl2.hpp	9478;"	d
__SET_MEM_OBJECT_DESTRUCTOR_CALLBACK_ERR	include/CL/cl.hpp	12385;"	d
__SET_MEM_OBJECT_DESTRUCTOR_CALLBACK_ERR	include/CL/cl.hpp	375;"	d
__SET_MEM_OBJECT_DESTRUCTOR_CALLBACK_ERR	include/CL/cl2.hpp	767;"	d
__SET_MEM_OBJECT_DESTRUCTOR_CALLBACK_ERR	include/CL/cl2.hpp	9468;"	d
__SET_PRINTF_CALLBACK_ERR	include/CL/cl.hpp	12390;"	d
__SET_PRINTF_CALLBACK_ERR	include/CL/cl2.hpp	9473;"	d
__SET_USER_EVENT_STATUS_ERR	include/CL/cl.hpp	12388;"	d
__SET_USER_EVENT_STATUS_ERR	include/CL/cl.hpp	378;"	d
__SET_USER_EVENT_STATUS_ERR	include/CL/cl2.hpp	770;"	d
__SET_USER_EVENT_STATUS_ERR	include/CL/cl2.hpp	9471;"	d
__UNLOAD_COMPILER_ERR	include/CL/cl.hpp	12424;"	d
__UNLOAD_COMPILER_ERR	include/CL/cl.hpp	447;"	d
__UNLOAD_COMPILER_ERR	include/CL/cl2.hpp	844;"	d
__UNLOAD_COMPILER_ERR	include/CL/cl2.hpp	9505;"	d
__UTILS_UTILS_H__	utils/Utils.h	25;"	d
__VECTOR_CAPACITY_ERR	include/CL/cl.hpp	429;"	d
__VECTOR_CAPACITY_ERR	include/CL/cl2.hpp	826;"	d
__WAIT_FOR_EVENTS_ERR	include/CL/cl.hpp	12392;"	d
__WAIT_FOR_EVENTS_ERR	include/CL/cl.hpp	380;"	d
__WAIT_FOR_EVENTS_ERR	include/CL/cl2.hpp	772;"	d
__WAIT_FOR_EVENTS_ERR	include/CL/cl2.hpp	9475;"	d
__arm_any__	arm_compute/core/NEON/kernels/convolution/common/arm.hpp	30;"	d
__arm_any__	arm_compute/core/NEON/kernels/convolution/common/arm.hpp	34;"	d
__cl_char16	include/CL/cl_platform.h	/^        typedef __m128i __cl_char16;$/;"	t
__cl_char16	include/CL/cl_platform.h	/^        typedef cl_char     __cl_char16     __attribute__((vector_size(16)));$/;"	t
__cl_char16	include/CL/cl_platform.h	/^   typedef vector signed char       __cl_char16;$/;"	t
__cl_char8	include/CL/cl_platform.h	/^        typedef __m64       __cl_char8;$/;"	t
__cl_char8	include/CL/cl_platform.h	/^        typedef cl_char     __cl_char8      __attribute__((vector_size(8)));$/;"	t
__cl_double2	include/CL/cl_platform.h	/^        typedef __m128d __cl_double2;$/;"	t
__cl_double2	include/CL/cl_platform.h	/^        typedef cl_double   __cl_double2    __attribute__((vector_size(16)));$/;"	t
__cl_double4	include/CL/cl_platform.h	/^        typedef __m256d     __cl_double4;$/;"	t
__cl_double4	include/CL/cl_platform.h	/^        typedef cl_double   __cl_double4    __attribute__((vector_size(32)));$/;"	t
__cl_float2	include/CL/cl_platform.h	/^        typedef __m64       __cl_float2;$/;"	t
__cl_float2	include/CL/cl_platform.h	/^        typedef cl_float    __cl_float2     __attribute__((vector_size(8)));$/;"	t
__cl_float4	include/CL/cl_platform.h	/^        typedef __m128 __cl_float4;$/;"	t
__cl_float4	include/CL/cl_platform.h	/^        typedef float __cl_float4   __attribute__((vector_size(16)));$/;"	t
__cl_float4	include/CL/cl_platform.h	/^   typedef vector float             __cl_float4;$/;"	t
__cl_float8	include/CL/cl_platform.h	/^        typedef __m256      __cl_float8;$/;"	t
__cl_float8	include/CL/cl_platform.h	/^        typedef cl_float    __cl_float8     __attribute__((vector_size(32)));$/;"	t
__cl_int2	include/CL/cl_platform.h	/^        typedef __m64       __cl_int2;$/;"	t
__cl_int2	include/CL/cl_platform.h	/^        typedef cl_int      __cl_int2       __attribute__((vector_size(8)));$/;"	t
__cl_int4	include/CL/cl_platform.h	/^        typedef __m128i __cl_int4;$/;"	t
__cl_int4	include/CL/cl_platform.h	/^        typedef cl_int      __cl_int4       __attribute__((vector_size(16)));$/;"	t
__cl_int4	include/CL/cl_platform.h	/^   typedef vector signed int        __cl_int4;$/;"	t
__cl_long1	include/CL/cl_platform.h	/^        typedef __m64       __cl_long1;$/;"	t
__cl_long1	include/CL/cl_platform.h	/^        typedef cl_long     __cl_long1      __attribute__((vector_size(8)));$/;"	t
__cl_long2	include/CL/cl_platform.h	/^        typedef __m128i __cl_long2;$/;"	t
__cl_long2	include/CL/cl_platform.h	/^        typedef cl_long     __cl_long2      __attribute__((vector_size(16)));$/;"	t
__cl_short4	include/CL/cl_platform.h	/^        typedef __m64       __cl_short4;$/;"	t
__cl_short4	include/CL/cl_platform.h	/^        typedef cl_short    __cl_short4     __attribute__((vector_size(8)));$/;"	t
__cl_short8	include/CL/cl_platform.h	/^        typedef __m128i __cl_short8;$/;"	t
__cl_short8	include/CL/cl_platform.h	/^        typedef cl_short    __cl_short8     __attribute__((vector_size(16)));$/;"	t
__cl_short8	include/CL/cl_platform.h	/^   typedef vector signed short      __cl_short8;$/;"	t
__cl_uchar16	include/CL/cl_platform.h	/^        typedef __m128i __cl_uchar16;$/;"	t
__cl_uchar16	include/CL/cl_platform.h	/^        typedef cl_uchar    __cl_uchar16    __attribute__((vector_size(16)));$/;"	t
__cl_uchar16	include/CL/cl_platform.h	/^   typedef vector unsigned char     __cl_uchar16;$/;"	t
__cl_uchar8	include/CL/cl_platform.h	/^        typedef __m64       __cl_uchar8;$/;"	t
__cl_uchar8	include/CL/cl_platform.h	/^        typedef cl_uchar    __cl_uchar8     __attribute__((vector_size(8)));$/;"	t
__cl_uint2	include/CL/cl_platform.h	/^        typedef __m64       __cl_uint2;$/;"	t
__cl_uint2	include/CL/cl_platform.h	/^        typedef cl_uint     __cl_uint2      __attribute__((vector_size(8)));$/;"	t
__cl_uint4	include/CL/cl_platform.h	/^        typedef __m128i __cl_uint4;$/;"	t
__cl_uint4	include/CL/cl_platform.h	/^        typedef cl_uint     __cl_uint4      __attribute__((vector_size(16)));$/;"	t
__cl_uint4	include/CL/cl_platform.h	/^   typedef vector unsigned int      __cl_uint4;$/;"	t
__cl_ulong1	include/CL/cl_platform.h	/^        typedef __m64       __cl_ulong1;$/;"	t
__cl_ulong1	include/CL/cl_platform.h	/^        typedef cl_ulong    __cl_ulong1     __attribute__((vector_size(8)));$/;"	t
__cl_ulong2	include/CL/cl_platform.h	/^        typedef __m128i __cl_ulong2;$/;"	t
__cl_ulong2	include/CL/cl_platform.h	/^        typedef cl_ulong    __cl_ulong2     __attribute__((vector_size(16)));$/;"	t
__cl_ushort4	include/CL/cl_platform.h	/^        typedef __m64       __cl_ushort4;$/;"	t
__cl_ushort4	include/CL/cl_platform.h	/^        typedef cl_ushort   __cl_ushort4    __attribute__((vector_size(8)));$/;"	t
__cl_ushort8	include/CL/cl_platform.h	/^        typedef __m128i __cl_ushort8;$/;"	t
__cl_ushort8	include/CL/cl_platform.h	/^        typedef cl_ushort   __cl_ushort8    __attribute__((vector_size(16)));$/;"	t
__cl_ushort8	include/CL/cl_platform.h	/^   typedef vector unsigned short    __cl_ushort8;$/;"	t
__eglMustCastToProperFunctionPointerType	include/linux/EGL/egl.h	/^typedef void (*__eglMustCastToProperFunctionPointerType)(void);$/;"	t
__egl_h_	include/linux/EGL/egl.h	2;"	d
__eglext_h_	include/linux/EGL/eglext.h	2;"	d
__eglplatform_h_	include/linux/EGL/eglplatform.h	2;"	d
__gl2_h_	include/linux/GLES2/gl2.h	2;"	d
__gl2ext_h_	include/linux/GLES2/gl2ext.h	2;"	d
__gl2platform_h_	include/linux/GLES2/gl2platform.h	2;"	d
__gl31_h_	include/linux/GLES3/gl31.h	2;"	d
__gl3_h_	include/linux/GLES3/gl3.h	2;"	d
__gl3ext_h_	include/linux/GLES3/gl3ext.h	2;"	d
__gl3platform_h_	include/linux/GLES3/gl3platform.h	2;"	d
__gl_h_	include/linux/GLES/gl.h	2;"	d
__glext_h_	include/linux/GLES/glext.h	2;"	d
__glplatform_h_	include/linux/GLES/glplatform.h	2;"	d
__khrplatform_h_	include/linux/KHR/khrplatform.h	2;"	d
__local	include/CL/cl.hpp	/^__local(::size_t size)$/;"	f	namespace:cl
__spacer4	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
__spacer4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
__spacer5	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
__spacer5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
__spacer6	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
__spacer6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
__spacer7	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
__spacer7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
__spacer8	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
__spacer8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
__spacer9	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
__spacer9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
_a	arm_compute/core/Types.h	/^    float              _a       = {};$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo
_a	arm_compute/runtime/NEON/AssemblyHelper.h	/^    const ITensor *_a;$/;"	m	class:arm_compute::final
_a_it	tests/datasets/GEMMDataset.h	/^        std::vector<TensorShape>::const_iterator _a_it;$/;"	m	struct:arm_compute::test::datasets::GEMMDataset::iterator
_a_it	tests/datasets/GEMMLowpDataset.h	/^        std::vector<TensorShape>::const_iterator _a_it;$/;"	m	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
_a_it	tests/datasets/WinogradOutputTransformDataset.h	/^        std::vector<TensorShape>::const_iterator  _a_it;$/;"	m	struct:arm_compute::test::datasets::WinogradOutputTransformDataset::iterator
_a_offset	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    int32_t        _a_offset;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_a_offset	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    int32_t                            _a_offset;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_a_offset	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    int32_t                            _a_offset;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_a_offset_it	tests/datasets/GEMMLowpDataset.h	/^        std::vector<int32_t>::const_iterator     _a_offset_it;$/;"	m	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
_absolute_difference_8h	documentation/_absolute_difference_8h.js	/^var _absolute_difference_8h =$/;"	v
_absolute_difference_8h.xhtml	documentation/navtreeindex0.js	/^"_absolute_difference_8h.xhtml":[6,0,4,6,4,1],$/;"	p	class:NAVTREEINDEX0
_accessor	arm_compute/graph/Tensor.h	/^    std::unique_ptr<ITensorAccessor> _accessor;    \/**< Tensor Accessor *\/$/;"	m	class:arm_compute::graph::final
_accessor	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _accessor;$/;"	m	class:arm_compute::graph::frontend::final
_accum	arm_compute/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.h	/^    ICLTensor       *_accum;$/;"	m	class:arm_compute::CLGEMMMatrixAccumulateBiasesKernel
_accum	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	/^    IGCTensor       *_accum;$/;"	m	class:arm_compute::GCGEMMMatrixAccumulateBiasesKernel
_accum	arm_compute/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.h	/^    ITensor       *_accum;$/;"	m	class:arm_compute::NEGEMMMatrixAccumulateBiasesKernel
_accum_cell_state1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAdditionKernel      _accum_cell_state1;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_cell_state2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAdditionKernel      _accum_cell_state2;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_forget_gate1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAdditionKernel      _accum_forget_gate1;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_forget_gate2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAddition            _accum_forget_gate2;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_input_gate1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAdditionKernel      _accum_input_gate1;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_input_gate2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAddition            _accum_input_gate2;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_output1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAdditionKernel      _accum_output1;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_output2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAddition            _accum_output2;$/;"	m	class:arm_compute::CLLSTMLayer
_accum_output_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticAdditionKernel      _accum_output_state;$/;"	m	class:arm_compute::CLLSTMLayer
_accumulate_8h	documentation/_accumulate_8h.js	/^var _accumulate_8h =$/;"	v
_accumulate_biases	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    bool                                                _accumulate_biases;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_accumulate_biases	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    bool                                _accumulate_biases;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_accumulate_biases	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    bool                                _accumulate_biases;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_accumulate_biases_kernel	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLGEMMMatrixAccumulateBiasesKernel                  _accumulate_biases_kernel;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_accumulate_biases_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCGEMMMatrixAccumulateBiasesKernel  _accumulate_biases_kernel;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_accumulate_biases_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NEGEMMMatrixAccumulateBiasesKernel  _accumulate_biases_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_accumulator	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _accumulator;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_accumulator	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    Tensor                                    _accumulator;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_act	arm_compute/core/Types.h	/^    ActivationFunction _act     = { ActivationLayerInfo::ActivationFunction::LOGISTIC };$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo
_act_info	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^    ActivationLayerInfo           _act_info;$/;"	m	class:arm_compute::NEActivationLayerKernel
_act_info	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    ActivationLayerInfo  _act_info;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_act_info	arm_compute/graph/frontend/Layers.h	/^    ActivationLayerInfo _act_info;$/;"	m	class:arm_compute::graph::frontend::final
_activation_cell_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _activation_cell_state;$/;"	m	class:arm_compute::CLLSTMLayer
_activation_forget_gate	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _activation_forget_gate;$/;"	m	class:arm_compute::CLLSTMLayer
_activation_input_gate	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _activation_input_gate;$/;"	m	class:arm_compute::CLLSTMLayer
_activation_kernel	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLActivationLayerKernel    _activation_kernel;$/;"	m	class:arm_compute::CLRNNLayer
_activation_layer_8h	documentation/_activation_layer_8h.js	/^var _activation_layer_8h =$/;"	v
_activation_output	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _activation_output;$/;"	m	class:arm_compute::CLLSTMLayer
_activation_output_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _activation_output_state;$/;"	m	class:arm_compute::CLLSTMLayer
_activationlayer_function	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^    CLActivationLayer              _activationlayer_function;$/;"	m	class:arm_compute::CLDirectConvolutionLayer
_activationlayer_function	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLActivationLayer                                   _activationlayer_function;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_activationlayer_function	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLActivationLayer               _activationlayer_function;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_activationlayer_function	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCActivationLayer                _activationlayer_function;$/;"	m	class:arm_compute::GCConvolutionLayer
_activationlayer_function	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    NEActivationLayer                         _activationlayer_function;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_activationlayer_function	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEActivationLayer                                   _activationlayer_function;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_activationlayer_function	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    NEActivationLayer          _activationlayer_function;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_active_elements	arm_compute/runtime/ISimpleLifetimeManager.h	/^    std::map<void *, Element> _active_elements;                            \/**< A map that contains the active elements *\/$/;"	m	class:arm_compute::ISimpleLifetimeManager
_active_group	arm_compute/runtime/ISimpleLifetimeManager.h	/^    IMemoryGroup *_active_group;                                           \/**< Active group *\/$/;"	m	class:arm_compute::ISimpleLifetimeManager
_add_bias_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEArithmeticAdditionKernel                          _add_bias_kernel;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_add_kernel	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLArithmeticAdditionKernel _add_kernel;$/;"	m	class:arm_compute::CLRNNLayer
_add_output	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLTensor                   _add_output;$/;"	m	class:arm_compute::CLRNNLayer
_add_w	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _add_w;$/;"	m	class:arm_compute::graph::frontend::final
_addf	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^    std::unique_ptr<CLArithmeticAddition[]> _addf;$/;"	m	class:arm_compute::CLLaplacianReconstruct
_addf	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^    std::unique_ptr<NEArithmeticAddition[]> _addf;$/;"	m	class:arm_compute::NELaplacianReconstruct
_allocations	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::map<cl_mem, Allocation> _allocations;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
_allocator	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    CLBufferAllocator _allocator; \/**< CL buffer affinity allocator *\/$/;"	m	class:arm_compute::graph::backends::final
_allocator	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    GCBufferAllocator _allocator; \/**< GLES buffer affinity allocator *\/$/;"	m	class:arm_compute::graph::backends::final
_allocator	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    Allocator _allocator; \/**< NEON backend allocator *\/$/;"	m	class:arm_compute::graph::backends::final
_allocator	arm_compute/runtime/BlobMemoryPool.h	/^    IAllocator         *_allocator;  \/**< Allocator to use for internal allocation *\/$/;"	m	class:arm_compute::BlobMemoryPool
_allocator	arm_compute/runtime/CL/CLLut.h	/^    CLLutAllocator _allocator; \/**< Instance of the OpenCL lut allocator *\/$/;"	m	class:arm_compute::CLLut
_allocator	arm_compute/runtime/CL/CLTensor.h	/^    mutable CLTensorAllocator _allocator; \/**< Instance of the OpenCL tensor allocator *\/$/;"	m	class:arm_compute::CLTensor
_allocator	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    mutable GCTensorAllocator _allocator; \/**< Instance of the OpenGL ES tensor allocator *\/$/;"	m	class:arm_compute::GCTensor
_allocator	arm_compute/runtime/Lut.h	/^    LutAllocator _allocator; \/**< Instance of the basic CPU allocator.*\/$/;"	m	class:arm_compute::Lut
_allocator	arm_compute/runtime/MemoryManagerOnDemand.h	/^    IAllocator                       *_allocator;    \/**< Allocator used for backend allocations *\/$/;"	m	class:arm_compute::MemoryManagerOnDemand
_allocator	arm_compute/runtime/OffsetMemoryPool.h	/^    IAllocator *_allocator; \/**< Allocator to use for internal allocation *\/$/;"	m	class:arm_compute::OffsetMemoryPool
_allocator	arm_compute/runtime/Tensor.h	/^    mutable TensorAllocator _allocator; \/**< Instance of the basic CPU allocator.*\/$/;"	m	class:arm_compute::Tensor
_alpha	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^    float _alpha;$/;"	m	class:arm_compute::NEAccumulateWeightedKernel
_alpha	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    float          _alpha;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_alpha	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^    float          _alpha;$/;"	m	class:arm_compute::NEGEMMMatrixMultiplyKernel
_alpha	arm_compute/core/Types.h	/^    float    _alpha;$/;"	m	class:arm_compute::HOGNormType::NormalizationLayerInfo
_alpha	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const Tr _alpha;$/;"	m	class:arm_gemm::GemmInterleaved
_alpha_it	tests/datasets/GEMMDataset.h	/^        std::vector<float>::const_iterator       _alpha_it;$/;"	m	struct:arm_compute::test::datasets::GEMMDataset::iterator
_append_bias	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _append_bias;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_are_reshaped	arm_compute/core/Types.h	/^    const bool         _are_reshaped;$/;"	m	class:arm_compute::HOGNormType::WeightsInfo
_are_weights_reshaped	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    bool                                                _are_weights_reshaped;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_are_weights_reshaped	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    bool                                _are_weights_reshaped;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_are_weights_reshaped	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _are_weights_reshaped;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_are_weights_reshaped	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    bool                                _are_weights_reshaped;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_are_weights_reshaped	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _are_weights_reshaped;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_arithmetic_addition_8h	documentation/_arithmetic_addition_8h.js	/^var _arithmetic_addition_8h =$/;"	v
_arithmetic_subtraction_8h	documentation/_arithmetic_subtraction_8h.js	/^var _arithmetic_subtraction_8h =$/;"	v
_arm_gemm	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    std::unique_ptr<arm_gemm::GemmCommon<float, float>> _arm_gemm;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_array	tests/CL/CLArrayAccessor.h	/^    CLArray<T> &_array;$/;"	m	class:arm_compute::test::CLArrayAccessor
_array	tests/NEON/ArrayAccessor.h	/^    Array<T> &_array;$/;"	m	class:arm_compute::test::ArrayAccessor
_array_8h	documentation/_array_8h.js	/^var _array_8h =$/;"	v
_asm_glue	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    AssemblyKernelGlueF32      _asm_glue;$/;"	m	class:arm_compute::NEGEMM
_asm_glue	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    AssemblyKernelGlueF32                               _asm_glue;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_asm_glue_signed	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    AssemblyKernelGlueS8S32    _asm_glue_signed;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_asm_glue_signed	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    AssemblyKernelGlueS8S32            _asm_glue_signed;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_asm_glue_unsigned	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    AssemblyKernelGlueU8U32    _asm_glue_unsigned;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_asm_glue_unsigned	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    AssemblyKernelGlueU8U32            _asm_glue_unsigned;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_assembly_helper_8h	documentation/_assembly_helper_8h.js	/^var _assembly_helper_8h =$/;"	v
_asserts_8h	documentation/_asserts_8h.js	/^var _asserts_8h =$/;"	v
_assigned_target	arm_compute/graph/INode.h	/^    Target                _assigned_target; \/**< Assigned target by the Graph executor *\/$/;"	m	class:arm_compute::graph::INode
_associated_memory_group	arm_compute/runtime/CL/CLTensorAllocator.h	/^    CLMemoryGroup *_associated_memory_group; \/**< Registered memory manager *\/$/;"	m	class:arm_compute::CLTensorAllocator
_associated_memory_group	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    GCMemoryGroup                   *_associated_memory_group; \/**< Registered memory group *\/$/;"	m	class:arm_compute::GCTensorAllocator
_associated_memory_group	arm_compute/runtime/TensorAllocator.h	/^    MemoryGroup *_associated_memory_group; \/**< Registered memory manager *\/$/;"	m	class:arm_compute::TensorAllocator
_asymm_helpers_8h	documentation/_asymm_helpers_8h.js	/^var _asymm_helpers_8h =$/;"	v
_axis	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^    unsigned int     _axis;$/;"	m	class:arm_compute::CLL2NormalizeLayerKernel
_axis	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^    unsigned int   _axis;$/;"	m	class:arm_compute::NEL2NormalizeLayerKernel
_axis	arm_compute/graph/nodes/SplitLayerNode.h	/^    unsigned int _axis;$/;"	m	class:arm_compute::graph::final
_b	arm_compute/core/Types.h	/^    float              _b       = {};$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo
_b	arm_compute/runtime/NEON/AssemblyHelper.h	/^    const ITensor *_b;$/;"	m	class:arm_compute::final
_b_f_s_8h	documentation/_b_f_s_8h.js	/^var _b_f_s_8h =$/;"	v
_b_it	tests/datasets/GEMMDataset.h	/^        std::vector<TensorShape>::const_iterator _b_it;$/;"	m	struct:arm_compute::test::datasets::GEMMDataset::iterator
_b_it	tests/datasets/GEMMLowpDataset.h	/^        std::vector<TensorShape>::const_iterator _b_it;$/;"	m	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
_b_offset	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    int32_t        _b_offset;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_b_offset	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    int32_t                            _b_offset;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_b_offset	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    int32_t                            _b_offset;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_b_offset_it	tests/datasets/GEMMLowpDataset.h	/^        std::vector<int32_t>::const_iterator     _b_offset_it;$/;"	m	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
_batch_normalization_layer_8h	documentation/_batch_normalization_layer_8h.js	/^var _batch_normalization_layer_8h =$/;"	v
_batched_mm	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLGEMM                          _batched_mm;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_batched_mm_output	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLTensor                        _batched_mm_output;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_beta	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    const ICLTensor *_beta;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_beta	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    const IGCTensor *_beta;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_beta	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    const ITensor       *_beta;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_beta	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    float          _beta;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_beta	arm_compute/core/NEON/kernels/NEGEMMMatrixAdditionKernel.h	/^    float                   _beta;$/;"	m	class:arm_compute::NEGEMMMatrixAdditionKernel
_beta	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    float                  _beta;$/;"	m	class:arm_compute::NELogits1DSoftmaxKernel
_beta	arm_compute/core/Types.h	/^    float    _beta;$/;"	m	class:arm_compute::HOGNormType::NormalizationLayerInfo
_beta	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _beta;$/;"	m	class:arm_compute::graph::frontend::final
_beta	arm_compute/graph/frontend/Layers.h	/^    float _beta;$/;"	m	class:arm_compute::graph::frontend::final
_beta	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^    float _beta;$/;"	m	class:arm_compute::graph::final
_beta	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const Tr _beta;$/;"	m	class:arm_gemm::GemmInterleaved
_beta	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    Tr _beta;$/;"	m	class:arm_gemm::GemmNative
_beta	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    const Tr _beta;$/;"	m	class:arm_gemm::GemvNativeTransposed
_beta	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const Tr _beta;$/;"	m	class:arm_gemm::GemvPretransposed
_beta_it	tests/datasets/GEMMDataset.h	/^        std::vector<float>::const_iterator       _beta_it;$/;"	m	struct:arm_compute::test::datasets::GEMMDataset::iterator
_bgr	utils/GraphUtils.h	/^    bool _bgr;$/;"	m	class:arm_compute::graph_utils::CaffePreproccessor
_bgr	utils/GraphUtils.h	/^    const bool                     _bgr;$/;"	m	class:arm_compute::graph_utils::final
_bias	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    const ICLTensor *_bias;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
_bias	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    const ICLTensor *_bias;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_bias	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    const ICLTensor *_bias;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_bias	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	/^    const ICLTensor *_bias;$/;"	m	class:arm_compute::CLWinogradOutputTransformKernel
_bias	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    const IGCTensor *_bias;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_bias	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    const ITensor     *_bias;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_bias	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    const ITensor          *_bias;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_bias	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    const ITensor          *_bias;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_bias	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    float                  _bias;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_bias	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	/^    const ITensor        *_bias;$/;"	m	class:arm_compute::NEWeightsReshapeKernel
_bias	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr    _bias;$/;"	m	class:arm_compute::graph::frontend::final
_bias	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _bias;$/;"	m	class:arm_compute::graph::frontend::final
_biases	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	/^    const ICLTensor *_biases;$/;"	m	class:arm_compute::CLDepthwiseWeightsReshapeKernel
_biases	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    const ICLTensor *_biases;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_biases	arm_compute/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.h	/^    const ICLTensor *_biases;$/;"	m	class:arm_compute::CLGEMMMatrixAccumulateBiasesKernel
_biases	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	/^    const ICLTensor *_biases;$/;"	m	class:arm_compute::CLWeightsReshapeKernel
_biases	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    const ICLTensor *_biases;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_biases	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    const IGCTensor *_biases;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_biases	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	/^    const IGCTensor *_biases;$/;"	m	class:arm_compute::GCGEMMMatrixAccumulateBiasesKernel
_biases	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	/^    const IGCTensor *_biases;$/;"	m	class:arm_compute::GCWeightsReshapeKernel
_biases	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^    const ITensor                   *_biases;$/;"	m	class:arm_compute::NEDepthwiseWeightsReshapeKernel
_biases	arm_compute/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.h	/^    const ITensor *_biases;$/;"	m	class:arm_compute::NEGEMMMatrixAccumulateBiasesKernel
_biases	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    const ITensor *_biases;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_biases	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const T* const _biases;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_biases_it	tests/datasets/ConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _biases_it;$/;"	m	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
_biases_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _biases_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_biases_it	tests/datasets/FullyConnectedLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _biases_it;$/;"	m	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
_biases_it	tests/datasets/RNNLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _biases_it;$/;"	m	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
_binary	arm_compute/core/CL/CLKernelLibrary.h	/^    std::vector<unsigned char> _binary;    \/**< Binary from which to create the program. *\/$/;"	m	class:arm_compute::Program
_bitwise_and_8h	documentation/_bitwise_and_8h.js	/^var _bitwise_and_8h =$/;"	v
_bitwise_not_8h	documentation/_bitwise_not_8h.js	/^var _bitwise_not_8h =$/;"	v
_bitwise_or_8h	documentation/_bitwise_or_8h.js	/^var _bitwise_or_8h =$/;"	v
_bitwise_xor_8h	documentation/_bitwise_xor_8h.js	/^var _bitwise_xor_8h =$/;"	v
_blob	arm_compute/runtime/OffsetLifetimeManager.h	/^    size_t _blob; \/**< Memory blob size *\/$/;"	m	class:arm_compute::OffsetLifetimeManager
_blob	arm_compute/runtime/OffsetMemoryPool.h	/^    void       *_blob;      \/**< Memory blob *\/$/;"	m	class:arm_compute::OffsetMemoryPool
_blob_size	arm_compute/runtime/OffsetMemoryPool.h	/^    size_t      _blob_size; \/**< Sizes of the allocated memory blob *\/$/;"	m	class:arm_compute::OffsetMemoryPool
_blob_sizes	arm_compute/runtime/BlobMemoryPool.h	/^    std::vector<size_t> _blob_sizes; \/**< Sizes of each blob *\/$/;"	m	class:arm_compute::BlobMemoryPool
_blobs	arm_compute/runtime/BlobLifetimeManager.h	/^    std::vector<size_t> _blobs; \/**< Memory blobs' sizes *\/$/;"	m	class:arm_compute::BlobLifetimeManager
_blobs	arm_compute/runtime/BlobMemoryPool.h	/^    std::vector<void *> _blobs;      \/**< Vector holding all the memory blobs *\/$/;"	m	class:arm_compute::BlobMemoryPool
_block_norm	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLHOGBlockNormalizationKernel _block_norm;$/;"	m	class:arm_compute::CLHOGDescriptor
_block_norm	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    NEHOGBlockNormalizationKernel _block_norm;$/;"	m	class:arm_compute::NEHOGDescriptor
_block_norm_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    std::unique_ptr<CLHOGBlockNormalizationKernel[]>              _block_norm_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_block_norm_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    std::unique_ptr<NEHOGBlockNormalizationKernel[]>              _block_norm_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_block_size	arm_compute/core/HOGInfo.h	/^    Size2D      _block_size;$/;"	m	class:arm_compute::HOGInfo
_block_stride	arm_compute/core/HOGInfo.h	/^    Size2D      _block_stride;$/;"	m	class:arm_compute::HOGInfo
_block_stride_height	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _block_stride_height;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_block_stride_width	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _block_stride_width;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_bm	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    BufferManager *_bm            = nullptr;$/;"	m	class:arm_gemm::GemmInterleaved
_border_edge_trace	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    NEFillBorderKernel            _border_edge_trace;   \/**< Fill border before edge trace *\/$/;"	m	class:arm_compute::NECannyEdge
_border_gx	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLFillBorderKernel                  _border_gx;             \/**< Border handler before running harris score *\/$/;"	m	class:arm_compute::CLHarrisCorners
_border_gx	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    NEFillBorderKernel                    _border_gx;             \/**< Border handler before running harris score *\/$/;"	m	class:arm_compute::NEHarrisCorners
_border_gy	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLFillBorderKernel                  _border_gy;             \/**< Border handler before running harris score *\/$/;"	m	class:arm_compute::CLHarrisCorners
_border_gy	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    NEFillBorderKernel                    _border_gy;             \/**< Border handler before running harris score *\/$/;"	m	class:arm_compute::NEHarrisCorners
_border_handler	arm_compute/runtime/CL/ICLSimpleFunction.h	/^    CLFillBorderKernel         _border_handler; \/**< Kernel to handle  borders *\/$/;"	m	class:arm_compute::ICLSimpleFunction
_border_handler	arm_compute/runtime/CL/functions/CLConvolution.h	/^    CLFillBorderKernel                            _border_handler; \/**< kernel for border handling *\/$/;"	m	class:arm_compute::CLConvolutionSquare
_border_handler	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLFillBorderKernel                                     _border_handler;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3
_border_handler	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^    CLFillBorderKernel      _border_handler; \/**< Kernel to handle image borders *\/$/;"	m	class:arm_compute::CLGaussian5x5
_border_handler	arm_compute/runtime/CL/functions/CLNormalizationLayer.h	/^    CLFillBorderKernel         _border_handler; \/**< Kernel to handle  borders *\/$/;"	m	class:arm_compute::CLNormalizationLayer
_border_handler	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    CLFillBorderKernel   _border_handler; \/**< Kernel to handle image borders *\/$/;"	m	class:arm_compute::CLSobel5x5
_border_handler	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    CLFillBorderKernel   _border_handler; \/**< Kernel to handle image borders *\/$/;"	m	class:arm_compute::CLSobel7x7
_border_handler	arm_compute/runtime/GLES_COMPUTE/IGCSimpleFunction.h	/^    GCFillBorderKernel         _border_handler; \/**< Kernel to handle  borders *\/$/;"	m	class:arm_compute::IGCSimpleFunction
_border_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	/^    GCFillBorderKernel         _border_handler;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3
_border_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	/^    GCFillBorderKernel         _border_handler;$/;"	m	class:arm_compute::GCDirectConvolutionLayer
_border_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^    GCFillBorderKernel              _border_handler;  \/**< Kernel to handle  borders *\/$/;"	m	class:arm_compute::GCNormalizationLayer
_border_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	/^    GCFillBorderKernel         _border_handler;$/;"	m	class:arm_compute::GCPoolingLayer
_border_handler	arm_compute/runtime/NEON/INESimpleFunction.h	/^    NEFillBorderKernel         _border_handler; \/**< Kernel to handle image borders *\/$/;"	m	class:arm_compute::INESimpleFunction
_border_handler	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    NEFillBorderKernel                            _border_handler; \/**< kernel for border handling *\/$/;"	m	class:arm_compute::NEConvolutionSquare
_border_handler	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEFillBorderKernel                        _border_handler;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_border_handler	arm_compute/runtime/NEON/functions/NEDerivative.h	/^    NEFillBorderKernel _border_handler; \/**< Kernel to handle tensor borders *\/$/;"	m	class:arm_compute::NEDerivative
_border_handler	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    NEFillBorderKernel              _border_handler;$/;"	m	class:arm_compute::NEFastCorners
_border_handler	arm_compute/runtime/NEON/functions/NEFillBorder.h	/^    NEFillBorderKernel _border_handler; \/**< Kernel to handle image borders *\/$/;"	m	class:arm_compute::NEFillBorder
_border_handler	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^    NEFillBorderKernel      _border_handler; \/**< kernel to handle tensor borders *\/$/;"	m	class:arm_compute::NEGaussian5x5
_border_handler	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^    NEFillBorderKernel              _border_handler;  \/**< Kernel to handle  borders *\/$/;"	m	class:arm_compute::NENormalizationLayer
_border_handler	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^    NEFillBorderKernel   _border_handler;$/;"	m	class:arm_compute::NEPoolingLayer
_border_handler	arm_compute/runtime/NEON/functions/NEScale.h	/^    NEFillBorderKernel _border_handler; \/**< kernel to handle tensor borders *\/$/;"	m	class:arm_compute::NEScale
_border_handler	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    NEFillBorderKernel   _border_handler; \/**< Kernel to handle tensor borders *\/$/;"	m	class:arm_compute::NESobel5x5
_border_handler	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    NEFillBorderKernel   _border_handler; \/**< Kernel to handle tensor borders *\/$/;"	m	class:arm_compute::NESobel7x7
_border_handlers_vector	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^    std::unique_ptr<CLFillBorderKernel[]>            _border_handlers_vector;$/;"	m	class:arm_compute::CLDepthConcatenateLayer
_border_handlers_vector	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	/^    std::unique_ptr<GCFillBorderKernel[]>            _border_handlers_vector;$/;"	m	class:arm_compute::GCDepthConcatenateLayer
_border_handlers_vector	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^    std::unique_ptr<NEFillBorderKernel[]>            _border_handlers_vector;$/;"	m	class:arm_compute::NEDepthConcatenateLayer
_border_histogram_kernel	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    CLHistogramBorderKernel _border_histogram_kernel; \/**< Kernel that calculates the histogram on the borders. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
_border_mag_gradient	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLFillBorderKernel            _border_mag_gradient;                             \/**< Fill border on magnitude tensor kernel *\/$/;"	m	class:arm_compute::CLCannyEdge
_border_mag_gradient	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    NEFillBorderKernel            _border_mag_gradient; \/**< Fill border on magnitude tensor kernel *\/$/;"	m	class:arm_compute::NECannyEdge
_border_mode	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    BorderMode          _border_mode;$/;"	m	class:arm_compute::NEScaleKernel
_border_mode_it	tests/datasets/ScaleLayerDataset.h	/^        std::vector<BorderMode>::const_iterator          _border_mode_it;$/;"	m	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
_border_size	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::CLConvolutionRectangleKernel
_border_size	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    BorderSize _border_size; \/**< Border size *\/$/;"	m	class:arm_compute::CLSeparableConvolutionHorKernel
_border_size	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_border_size	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
_border_size	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    BorderSize      _border_size;     \/**< Border size *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_border_size	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    BorderSize      _border_size;$/;"	m	class:arm_compute::CLMeanStdDevKernel
_border_size	arm_compute/core/CL/kernels/CLNonLinearFilterKernel.h	/^    BorderSize _border_size; \/**< Border size *\/$/;"	m	class:arm_compute::CLNonLinearFilterKernel
_border_size	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::CLNormalizationLayerKernel
_border_size	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::CLPoolingLayerKernel
_border_size	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    BorderSize         _border_size;$/;"	m	class:arm_compute::CLReductionOperationKernel
_border_size	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    BorderSize       _border_size; \/**< Border size *\/$/;"	m	class:arm_compute::CLSobel5x5HorKernel
_border_size	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    BorderSize       _border_size; \/**< Border size *\/$/;"	m	class:arm_compute::CLSobel7x7HorKernel
_border_size	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_border_size	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_border_size	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_border_size	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::GCNormalizationLayerKernel
_border_size	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::GCPoolingLayerKernel
_border_size	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    BorderSize                _border_size; \/**< Calculated border width *\/$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
_border_size	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    BorderSize _border_size;                    \/**< Border size *\/$/;"	m	class:arm_compute::NESeparableConvolutionHorKernel
_border_size	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    BorderSize                                        _border_size;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_border_size	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    BorderSize     _border_size;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_border_size	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^    BorderSize _border_size;$/;"	m	class:arm_compute::NEFillBorderKernel
_border_size	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	/^    BorderSize _border_size;$/;"	m	class:arm_compute::NEFillInnerBorderKernel
_border_size	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    BorderSize                          _border_size;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
_border_size	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^    BorderSize _border_size;$/;"	m	class:arm_compute::NEGaussian5x5HorKernel
_border_size	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    BorderSize    _border_size;     \/**< Border size *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_border_size	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    BorderSize         _border_size;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_border_size	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    BorderSize              _border_size;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_border_size	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    BorderSize             _border_size;$/;"	m	class:arm_compute::NENormalizationLayerKernel
_border_size	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    BorderSize       _border_size;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_border_size	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    BorderSize         _border_size;$/;"	m	class:arm_compute::NEReductionOperationKernel
_border_size	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    BorderSize          _border_size;$/;"	m	class:arm_compute::NEScaleKernel
_border_size	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    BorderSize     _border_size; \/**< Border size *\/$/;"	m	class:arm_compute::NESobel5x5HorKernel
_border_size	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    BorderSize     _border_size; \/**< Border size *\/$/;"	m	class:arm_compute::NESobel7x7HorKernel
_border_size	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    BorderSize           _border_size;$/;"	m	class:arm_compute::NELogits1DMaxKernel
_border_width	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    unsigned int            _border_width;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_bound_edges	arm_compute/graph/Tensor.h	/^    std::set<EdgeID>                 _bound_edges; \/**< Edges bound to this tensor *\/$/;"	m	class:arm_compute::graph::final
_box3x3_8h	documentation/_box3x3_8h.js	/^var _box3x3_8h =$/;"	v
_branch_merge_method	arm_compute/graph/frontend/Layers.h	/^    BranchMergeMethod                       _branch_merge_method;$/;"	m	class:arm_compute::graph::frontend::final
_buffer	arm_compute/runtime/CL/CLArray.h	/^    cl::Buffer _buffer;$/;"	m	class:arm_compute::CLArray
_buffer	arm_compute/runtime/CL/CLHOG.h	/^    cl::Buffer _buffer;$/;"	m	class:arm_compute::CLHOG
_buffer	arm_compute/runtime/CL/CLLutAllocator.h	/^    cl::Buffer _buffer;  \/**< OpenCL buffer containing the LUT data. *\/$/;"	m	class:arm_compute::CLLutAllocator
_buffer	arm_compute/runtime/LutAllocator.h	/^    std::unique_ptr<uint8_t[]> _buffer; \/**< CPU memory allocation. *\/$/;"	m	class:arm_compute::LutAllocator
_buffer_per_multi	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const unsigned int   _buffer_per_multi;$/;"	m	class:arm_gemm::GemvPretransposed
_buffers	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    std::vector<Buffer *> _buffers = {};$/;"	m	class:arm_gemm::BufferManager
_build_opts	arm_compute/core/CL/CLKernelLibrary.h	/^    StringSet _build_opts; \/**< Build options set *\/$/;"	m	class:arm_compute::CLBuildOptions
_built_programs_map	arm_compute/core/CL/CLKernelLibrary.h	/^    mutable std::map<std::string, cl::Program>      _built_programs_map; \/**< Map with all already built program data. *\/$/;"	m	class:arm_compute::CLKernelLibrary
_built_programs_map	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    mutable std::map<std::string, const GCKernel>   _built_programs_map; \/**< Map with all already built program data. *\/$/;"	m	class:arm_compute::GCKernelLibrary
_c_it	tests/datasets/GEMMDataset.h	/^        std::vector<TensorShape>::const_iterator _c_it;$/;"	m	struct:arm_compute::test::datasets::GEMMDataset::iterator
_c_it	tests/datasets/GEMMLowpDataset.h	/^        std::vector<TensorShape>::const_iterator _c_it;$/;"	m	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
_c_l_2_absolute_difference_8cpp	documentation/_c_l_2_absolute_difference_8cpp.js	/^var _c_l_2_absolute_difference_8cpp =$/;"	v
_c_l_2_accumulate_8cpp	documentation/_c_l_2_accumulate_8cpp.js	/^var _c_l_2_accumulate_8cpp =$/;"	v
_c_l_2_arithmetic_addition_8cpp	documentation/_c_l_2_arithmetic_addition_8cpp.js	/^var _c_l_2_arithmetic_addition_8cpp =$/;"	v
_c_l_2_arithmetic_subtraction_8cpp	documentation/_c_l_2_arithmetic_subtraction_8cpp.js	/^var _c_l_2_arithmetic_subtraction_8cpp =$/;"	v
_c_l_2_bitwise_and_8cpp	documentation/_c_l_2_bitwise_and_8cpp.js	/^var _c_l_2_bitwise_and_8cpp =$/;"	v
_c_l_2_bitwise_not_8cpp	documentation/_c_l_2_bitwise_not_8cpp.js	/^var _c_l_2_bitwise_not_8cpp =$/;"	v
_c_l_2_bitwise_or_8cpp	documentation/_c_l_2_bitwise_or_8cpp.js	/^var _c_l_2_bitwise_or_8cpp =$/;"	v
_c_l_2_bitwise_xor_8cpp	documentation/_c_l_2_bitwise_xor_8cpp.js	/^var _c_l_2_bitwise_xor_8cpp =$/;"	v
_c_l_2_box3x3_8cpp	documentation/_c_l_2_box3x3_8cpp.js	/^var _c_l_2_box3x3_8cpp =$/;"	v
_c_l_2_channel_combine_8cpp	documentation/_c_l_2_channel_combine_8cpp.js	/^var _c_l_2_channel_combine_8cpp =$/;"	v
_c_l_2_channel_extract_8cpp	documentation/_c_l_2_channel_extract_8cpp.js	/^var _c_l_2_channel_extract_8cpp =$/;"	v
_c_l_2_channel_shuffle_8cpp	documentation/_c_l_2_channel_shuffle_8cpp.js	/^var _c_l_2_channel_shuffle_8cpp =$/;"	v
_c_l_2_convert_fully_connected_weights_8cpp	documentation/_c_l_2_convert_fully_connected_weights_8cpp.js	/^var _c_l_2_convert_fully_connected_weights_8cpp =$/;"	v
_c_l_2_convert_fully_connected_weights_8cpp.xhtml#a2707daabc31d77ead2c865f2e6ff5033	documentation/navtreeindex1.js	/^"_c_l_2_convert_fully_connected_weights_8cpp.xhtml#a2707daabc31d77ead2c865f2e6ff5033":[6,0,4,6,0,17,0],$/;"	p	class:NAVTREEINDEX1
_c_l_2_convolution_8cpp	documentation/_c_l_2_convolution_8cpp.js	/^var _c_l_2_convolution_8cpp =$/;"	v
_c_l_2_copy_8cpp	documentation/_c_l_2_copy_8cpp.js	/^var _c_l_2_copy_8cpp =$/;"	v
_c_l_2_deconvolution_layer_8cpp	documentation/_c_l_2_deconvolution_layer_8cpp.js	/^var _c_l_2_deconvolution_layer_8cpp =$/;"	v
_c_l_2_depth_convert_layer_8cpp	documentation/_c_l_2_depth_convert_layer_8cpp.js	/^var _c_l_2_depth_convert_layer_8cpp =$/;"	v
_c_l_2_derivative_8cpp	documentation/_c_l_2_derivative_8cpp.js	/^var _c_l_2_derivative_8cpp =$/;"	v
_c_l_2_dilate_8cpp	documentation/_c_l_2_dilate_8cpp.js	/^var _c_l_2_dilate_8cpp =$/;"	v
_c_l_2_dilated_convolution_layer_8cpp	documentation/_c_l_2_dilated_convolution_layer_8cpp.js	/^var _c_l_2_dilated_convolution_layer_8cpp =$/;"	v
_c_l_2_erode_8cpp	documentation/_c_l_2_erode_8cpp.js	/^var _c_l_2_erode_8cpp =$/;"	v
_c_l_2_fast_corners_8cpp	documentation/_c_l_2_fast_corners_8cpp.js	/^var _c_l_2_fast_corners_8cpp =$/;"	v
_c_l_2_fill_border_8cpp	documentation/_c_l_2_fill_border_8cpp.js	/^var _c_l_2_fill_border_8cpp =$/;"	v
_c_l_2_flatten_8cpp	documentation/_c_l_2_flatten_8cpp.js	/^var _c_l_2_flatten_8cpp =$/;"	v
_c_l_2_g_e_m_m_interleave4x4_8cpp	documentation/_c_l_2_g_e_m_m_interleave4x4_8cpp.js	/^var _c_l_2_g_e_m_m_interleave4x4_8cpp =$/;"	v
_c_l_2_gaussian3x3_8cpp	documentation/_c_l_2_gaussian3x3_8cpp.js	/^var _c_l_2_gaussian3x3_8cpp =$/;"	v
_c_l_2_gaussian5x5_8cpp	documentation/_c_l_2_gaussian5x5_8cpp.js	/^var _c_l_2_gaussian5x5_8cpp =$/;"	v
_c_l_2_gaussian_pyramid_8cpp	documentation/_c_l_2_gaussian_pyramid_8cpp.js	/^var _c_l_2_gaussian_pyramid_8cpp =$/;"	v
_c_l_2_global_pooling_layer_8cpp	documentation/_c_l_2_global_pooling_layer_8cpp.js	/^var _c_l_2_global_pooling_layer_8cpp =$/;"	v
_c_l_2_h_o_g_detector_8cpp	documentation/_c_l_2_h_o_g_detector_8cpp.js	/^var _c_l_2_h_o_g_detector_8cpp =$/;"	v
_c_l_2_h_o_g_multi_detection_8cpp	documentation/_c_l_2_h_o_g_multi_detection_8cpp.js	/^var _c_l_2_h_o_g_multi_detection_8cpp =$/;"	v
_c_l_2_locally_connected_8cpp	documentation/_c_l_2_locally_connected_8cpp.js	/^var _c_l_2_locally_connected_8cpp =$/;"	v
_c_l_2_non_linear_filter_8cpp	documentation/_c_l_2_non_linear_filter_8cpp.js	/^var _c_l_2_non_linear_filter_8cpp =$/;"	v
_c_l_2_optical_flow_8cpp	documentation/_c_l_2_optical_flow_8cpp.js	/^var _c_l_2_optical_flow_8cpp =$/;"	v
_c_l_2_permute_8cpp	documentation/_c_l_2_permute_8cpp.js	/^var _c_l_2_permute_8cpp =$/;"	v
_c_l_2_permute_8cpp.xhtml#ab3f4ab4a5c5018ffd9d99cf7b369a61a	documentation/navtreeindex2.js	/^"_c_l_2_permute_8cpp.xhtml#ab3f4ab4a5c5018ffd9d99cf7b369a61a":[6,0,4,6,0,60,3],$/;"	p	class:NAVTREEINDEX2
_c_l_2_pixel_wise_multiplication_8cpp	documentation/_c_l_2_pixel_wise_multiplication_8cpp.js	/^var _c_l_2_pixel_wise_multiplication_8cpp =$/;"	v
_c_l_2_r_o_i_pooling_layer_8cpp	documentation/_c_l_2_r_o_i_pooling_layer_8cpp.js	/^var _c_l_2_r_o_i_pooling_layer_8cpp =$/;"	v
_c_l_2_reduction_operation_8cpp	documentation/_c_l_2_reduction_operation_8cpp.js	/^var _c_l_2_reduction_operation_8cpp =$/;"	v
_c_l_2_remap_8cpp	documentation/_c_l_2_remap_8cpp.js	/^var _c_l_2_remap_8cpp =$/;"	v
_c_l_2_scharr_8cpp	documentation/_c_l_2_scharr_8cpp.js	/^var _c_l_2_scharr_8cpp =$/;"	v
_c_l_2_sobel_8cpp	documentation/_c_l_2_sobel_8cpp.js	/^var _c_l_2_sobel_8cpp =$/;"	v
_c_l_2_table_lookup_8cpp	documentation/_c_l_2_table_lookup_8cpp.js	/^var _c_l_2_table_lookup_8cpp =$/;"	v
_c_l_2_threshold_8cpp	documentation/_c_l_2_threshold_8cpp.js	/^var _c_l_2_threshold_8cpp =$/;"	v
_c_l_2_u_n_i_t_2_memory_manager_8cpp	documentation/_c_l_2_u_n_i_t_2_memory_manager_8cpp.js	/^var _c_l_2_u_n_i_t_2_memory_manager_8cpp =$/;"	v
_c_l_2_u_n_i_t_2_tensor_allocator_8cpp	documentation/_c_l_2_u_n_i_t_2_tensor_allocator_8cpp.js	/^var _c_l_2_u_n_i_t_2_tensor_allocator_8cpp =$/;"	v
_c_l_2_warp_affine_8cpp	documentation/_c_l_2_warp_affine_8cpp.js	/^var _c_l_2_warp_affine_8cpp =$/;"	v
_c_l_2_warp_perspective_8cpp	documentation/_c_l_2_warp_perspective_8cpp.js	/^var _c_l_2_warp_perspective_8cpp =$/;"	v
_c_l_2_width_concatenate_layer_8cpp	documentation/_c_l_2_width_concatenate_layer_8cpp.js	/^var _c_l_2_width_concatenate_layer_8cpp =$/;"	v
_c_l_2_winograd_8cpp	documentation/_c_l_2_winograd_8cpp.js	/^var _c_l_2_winograd_8cpp =$/;"	v
_c_l_array_8h	documentation/_c_l_array_8h.js	/^var _c_l_array_8h =$/;"	v
_c_l_convolution_8h	documentation/_c_l_convolution_8h.js	/^var _c_l_convolution_8h =$/;"	v
_c_l_convolution_kernel_8h	documentation/_c_l_convolution_kernel_8h.js	/^var _c_l_convolution_kernel_8h =$/;"	v
_c_l_convolution_layer_8h_source.xhtml	documentation/navtreeindex3.js	/^"_c_l_convolution_layer_8h_source.xhtml":[6,0,0,2,0,0,18],$/;"	p	class:NAVTREEINDEX3
_c_l_helpers_8h	documentation/_c_l_helpers_8h.js	/^var _c_l_helpers_8h =$/;"	v
_c_l_l_k_tracker_kernel_8h	documentation/_c_l_l_k_tracker_kernel_8h.js	/^var _c_l_l_k_tracker_kernel_8h =$/;"	v
_c_l_memory_group_8h	documentation/_c_l_memory_group_8h.js	/^var _c_l_memory_group_8h =$/;"	v
_c_l_optical_flow_8h	documentation/_c_l_optical_flow_8h.js	/^var _c_l_optical_flow_8h =$/;"	v
_c_l_pixel_wise_multiplication_8h.xhtml	documentation/navtreeindex4.js	/^"_c_l_pixel_wise_multiplication_8h.xhtml":[6,0,0,2,0,0,68],$/;"	p	class:NAVTREEINDEX4
_c_l_tensor_8h	documentation/_c_l_tensor_8h.js	/^var _c_l_tensor_8h =$/;"	v
_c_l_types_8h	documentation/_c_l_types_8h.js	/^var _c_l_types_8h =$/;"	v
_c_p_p_2_permute_8cpp	documentation/_c_p_p_2_permute_8cpp.js	/^var _c_p_p_2_permute_8cpp =$/;"	v
_c_p_p_corner_candidates_kernel_8h	documentation/_c_p_p_corner_candidates_kernel_8h.js	/^var _c_p_p_corner_candidates_kernel_8h =$/;"	v
_c_p_p_types_8h	documentation/_c_p_p_types_8h.js	/^var _c_p_p_types_8h =$/;"	v
_c_p_u_utils_8h	documentation/_c_p_u_utils_8h.js	/^var _c_p_u_utils_8h =$/;"	v
_candidates	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CPPCornerCandidatesKernel           _candidates;            \/**< Sort kernel *\/$/;"	m	class:arm_compute::CLHarrisCorners
_candidates	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    CPPCornerCandidatesKernel             _candidates;            \/**< Sort kernel *\/$/;"	m	class:arm_compute::NEHarrisCorners
_cartesian_product_dataset_8h	documentation/_cartesian_product_dataset_8h.js	/^var _cartesian_product_dataset_8h =$/;"	v
_cast_8h	documentation/_cast_8h.js	/^var _cast_8h =$/;"	v
_cd_histogram_kernel	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    NECumulativeDistributionKernel _cd_histogram_kernel;     \/**< Kernel that calculates the cumulative distribution$/;"	m	class:arm_compute::NEEqualizeHistogram
_cd_lut	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    CLLut                   _cd_lut;                  \/**< Holds the equalization lookuptable. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
_cd_lut	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    Lut                            _cd_lut;                  \/**< Holds the equalization lookuptable. *\/$/;"	m	class:arm_compute::NEEqualizeHistogram
_cell_clip	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _cell_clip;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_height	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    size_t         _cell_height;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_cell_size	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    Size2D           _cell_size;$/;"	m	class:arm_compute::CLHOGOrientationBinningKernel
_cell_size	arm_compute/core/HOGInfo.h	/^    Size2D      _cell_size;$/;"	m	class:arm_compute::HOGInfo
_cell_state_activation	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _cell_state_activation;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_state_out1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _cell_state_out1;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_state_out2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _cell_state_out2;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_state_out3	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _cell_state_out3;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_state_out4	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _cell_state_out4;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_state_out5	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _cell_state_out5;$/;"	m	class:arm_compute::CLLSTMLayer
_cell_threshold_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<float>::const_iterator               _cell_threshold_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_cell_to_forget_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_cell_to_forget_weights;$/;"	m	class:arm_compute::LSTMParams
_cell_to_input_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_cell_to_input_weights;$/;"	m	class:arm_compute::LSTMParams
_cell_to_output_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_cell_to_output_weights;$/;"	m	class:arm_compute::LSTMParams
_cell_width	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    size_t         _cell_width;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_cells_bias_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _cells_bias_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_channel_combine_8h	documentation/_channel_combine_8h.js	/^var _channel_combine_8h =$/;"	v
_channel_extract_8h	documentation/_channel_extract_8h.js	/^var _channel_extract_8h =$/;"	v
_channel_shuffle_8h	documentation/_channel_shuffle_8h.js	/^var _channel_shuffle_8h =$/;"	v
_ci	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const CPUInfo *const _ci;$/;"	m	class:arm_gemm::GemmInterleaved
_ci	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    const CPUInfo *const _ci;$/;"	m	class:arm_gemm::GemmNative
_ci	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    const CPUInfo *const _ci;$/;"	m	class:arm_gemm::GemvNativeTransposed
_ci	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const CPUInfo *const _ci;$/;"	m	class:arm_gemm::GemvPretransposed
_cl_buffer_region	include/CL/cl.h	/^typedef struct _cl_buffer_region {$/;"	s
_cl_dx9_surface_info_khr	include/CL/cl_dx9_media_sharing.h	/^typedef struct _cl_dx9_surface_info_khr$/;"	s
_cl_image_desc	include/CL/cl.h	/^typedef struct _cl_image_desc {$/;"	s
_cl_image_format	include/CL/cl.h	/^typedef struct _cl_image_format {$/;"	s
_cl_mem_ext_host_ptr	include/CL/cl_ext.h	/^typedef struct _cl_mem_ext_host_ptr$/;"	s
_cl_mem_ion_host_ptr	include/CL/cl_ext.h	/^typedef struct _cl_mem_ion_host_ptr$/;"	s
_cl_motion_estimation_desc_intel	include/CL/cl_ext_intel.h	/^typedef struct _cl_motion_estimation_desc_intel {$/;"	s
_cl_tuner	arm_compute/runtime/CL/CLScheduler.h	/^    ICLTuner        *_cl_tuner;$/;"	m	class:arm_compute::CLScheduler
_code	arm_compute/core/Error.h	/^    ErrorCode   _code;$/;"	m	class:arm_compute::Status
_coefficient_table	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLCoefficientTableArray>   _coefficient_table;$/;"	m	class:arm_compute::CLOpticalFlow
_col2_im_8cpp	documentation/_col2_im_8cpp.js	/^var _col2_im_8cpp =$/;"	v
_col2im_kernel	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLCol2ImKernel                                      _col2im_kernel;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_common_params	arm_compute/graph/INode.h	/^    NodeParams            _common_params;   \/**< Node common params *\/$/;"	m	class:arm_compute::graph::INode
_concat_kernels_vector	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^    std::unique_ptr<CLDepthConcatenateLayerKernel[]> _concat_kernels_vector;$/;"	m	class:arm_compute::CLDepthConcatenateLayer
_concat_kernels_vector	arm_compute/runtime/CL/functions/CLWidthConcatenateLayer.h	/^    std::unique_ptr<CLWidthConcatenateLayerKernel[]> _concat_kernels_vector;$/;"	m	class:arm_compute::CLWidthConcatenateLayer
_concat_kernels_vector	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	/^    std::unique_ptr<GCDepthConcatenateLayerKernel[]> _concat_kernels_vector;$/;"	m	class:arm_compute::GCDepthConcatenateLayer
_concat_kernels_vector	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^    std::unique_ptr<NEDepthConcatenateLayerKernel[]> _concat_kernels_vector;$/;"	m	class:arm_compute::NEDepthConcatenateLayer
_concat_scratch_buffer	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLWidthConcatenateLayer         _concat_scratch_buffer;$/;"	m	class:arm_compute::CLLSTMLayer
_config	arm_compute/graph/GraphContext.h	/^    GraphConfig _config;                                     \/**< Graph configuration *\/$/;"	m	class:arm_compute::graph::final
_config_id	arm_compute/core/CL/ICLKernel.h	/^    std::string _config_id;          \/**< Configuration ID *\/$/;"	m	class:arm_compute::ICLKernel
_constant_border_value	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^    PixelValue _constant_border_value;$/;"	m	class:arm_compute::NEFillBorderKernel
_constant_border_value	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	/^    PixelValue _constant_border_value;$/;"	m	class:arm_compute::NEFillInnerBorderKernel
_constant_border_value	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    uint8_t        _constant_border_value; \/**< Constant value used for filling the border. This value is used for those pixels out of the ROI when the border mode is CONSTANT *\/$/;"	m	class:arm_compute::INEWarpKernel
_constant_border_value	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    uint8_t                   _constant_border_value;$/;"	m	class:arm_compute::CLFastCorners
_consumer	arm_compute/graph/Edge.h	/^    INode       *_consumer;$/;"	m	class:arm_compute::graph::final
_consumer_idx	arm_compute/graph/Edge.h	/^    unsigned int _consumer_idx;$/;"	m	class:arm_compute::graph::final
_container	tests/framework/datasets/ContainerDataset.h	/^    T _container;$/;"	m	class:arm_compute::test::framework::dataset::ContainerDataset
_container_dataset_8h	documentation/_container_dataset_8h.js	/^var _container_dataset_8h =$/;"	v
_context	arm_compute/core/CL/CLKernelLibrary.h	/^    cl::Context                _context;   \/**< Underlying CL context. *\/$/;"	m	class:arm_compute::Program
_context	arm_compute/core/CL/CLKernelLibrary.h	/^    cl::Context _context;                                                \/**< Underlying CL context. *\/$/;"	m	class:arm_compute::CLKernelLibrary
_context	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    EGLContext  _context;                                                \/**< Underlying EGL Context. *\/$/;"	m	class:arm_compute::GCKernelLibrary
_context	arm_compute/runtime/CL/CLBufferAllocator.h	/^    cl::Context _context;$/;"	m	class:arm_compute::final
_context	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^    EGLContext _context; \/**< Underlying EGL Context. *\/$/;"	m	class:arm_compute::GCScheduler
_conv_col	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    std::array<int16_t, matrix_size> _conv_col; \/**< Convolution coefficients *\/$/;"	m	class:arm_compute::NESeparableConvolutionVertKernel
_conv_dims	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^    std::pair<size_t, size_t> _conv_dims;$/;"	m	class:arm_compute::NEDepthwiseVectorToTensorKernel
_conv_f	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^    CLConvolutionLayer           _conv_f;$/;"	m	class:arm_compute::CLDeconvolutionLayer
_conv_f	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    NEConvolutionLayer _conv_f;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_conv_height	arm_compute/graph/frontend/Layers.h	/^    unsigned int           _conv_height;$/;"	m	class:arm_compute::graph::frontend::final
_conv_info	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    PadStrideInfo                                     _conv_info;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_conv_info	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    PadStrideInfo              _conv_info;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_conv_info	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    PadStrideInfo  _conv_info;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_conv_info	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    PadStrideInfo _conv_info;$/;"	m	class:arm_compute::NEIm2ColKernel
_conv_info	arm_compute/graph/frontend/Layers.h	/^    const PadStrideInfo    _conv_info;$/;"	m	class:arm_compute::graph::frontend::final
_conv_kernel	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    NEDirectConvolutionLayerKernel            _conv_kernel;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_conv_pad_left	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int     _conv_pad_left;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_conv_pad_left	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int     _conv_pad_left;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_conv_pad_top	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^    unsigned int _conv_pad_top;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NCHWKernel
_conv_pad_top	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int     _conv_pad_top;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_conv_pad_x	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    int              _conv_pad_x;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_conv_pad_y	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    int              _conv_pad_y;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_conv_pyr	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    CLPyramid                                  _conv_pyr;$/;"	m	class:arm_compute::CLLaplacianPyramid
_conv_pyr	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    Pyramid                                    _conv_pyr;$/;"	m	class:arm_compute::NELaplacianPyramid
_conv_row	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    std::array<int16_t, matrix_size> _conv_row; \/**< Convolution coefficients *\/$/;"	m	class:arm_compute::NESeparableConvolutionHorKernel
_conv_stride_x	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^    unsigned int _conv_stride_x;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NCHWKernel
_conv_stride_x	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    int              _conv_stride_x;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_conv_stride_x	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int     _conv_stride_x;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_conv_stride_x	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    int              _conv_stride_x;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_conv_stride_y	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    int              _conv_stride_y;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_conv_stride_y	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int     _conv_stride_y;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_conv_stride_y	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int     _conv_stride_y;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_conv_stride_y	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    int              _conv_stride_y;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_conv_width	arm_compute/graph/frontend/Layers.h	/^    unsigned int           _conv_width;$/;"	m	class:arm_compute::graph::frontend::final
_convert_fully_connected_weights_8h	documentation/_convert_fully_connected_weights_8h.js	/^var _convert_fully_connected_weights_8h =$/;"	v
_convert_policy	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    ConvertPolicy    _convert_policy;$/;"	m	class:arm_compute::graph::final
_convf	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    std::unique_ptr<CLGaussian5x5[]>           _convf;$/;"	m	class:arm_compute::CLLaplacianPyramid
_convf	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    std::unique_ptr<NEGaussian5x5[]>           _convf;$/;"	m	class:arm_compute::NELaplacianPyramid
_convolution	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    std::array<int16_t, matrix_size *matrix_size> _convolution;  \/**< convolution matrix *\/$/;"	m	class:arm_compute::NEConvolutionKernel
_convolution	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    std::vector<int16_t>      _convolution; \/**< Convolution matrix *\/$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
_convolution3d_8h	documentation/_convolution3d_8h.js	/^var _convolution3d_8h =$/;"	v
_convolution_8h	documentation/_convolution_8h.js	/^var _convolution_8h =$/;"	v
_convolution_layer_8h	documentation/_convolution_layer_8h.js	/^var _convolution_layer_8h =$/;"	v
_convolved_dims	arm_compute/core/CL/kernels/CLCol2ImKernel.h	/^    std::pair<unsigned int, unsigned int> _convolved_dims;$/;"	m	class:arm_compute::CLCol2ImKernel
_convolved_dims	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    std::pair<unsigned int, unsigned int> _convolved_dims;$/;"	m	class:arm_compute::CLIm2ColKernel
_convolved_dims	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	/^    std::pair<unsigned int, unsigned int> _convolved_dims;$/;"	m	class:arm_compute::GCCol2ImKernel
_convolved_dims	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    std::pair<unsigned int, unsigned int> _convolved_dims;$/;"	m	class:arm_compute::GCIm2ColKernel
_convolved_dims	arm_compute/core/NEON/kernels/NECol2ImKernel.h	/^    Size2D            _convolved_dims;$/;"	m	class:arm_compute::NECol2ImKernel
_convolved_dims	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    std::pair<unsigned int, unsigned int> _convolved_dims;$/;"	m	class:arm_compute::NEIm2ColKernel
_convolver	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    std::unique_ptr<depthwise::IDepthwiseConvolution> _convolver;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_coords	arm_compute/core/SubTensorInfo.h	/^    Coordinates  _coords;$/;"	m	class:arm_compute::final
_copy_8h	documentation/_copy_8h.js	/^var _copy_8h =$/;"	v
_copy_array_kernel	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    CLCopyToArrayKernel       _copy_array_kernel;$/;"	m	class:arm_compute::CLFastCorners
_copy_cell_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLCopyKernel                    _copy_cell_state;$/;"	m	class:arm_compute::CLLSTMLayer
_copy_kernel	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLCopyKernel               _copy_kernel;$/;"	m	class:arm_compute::CLRNNLayer
_copy_output	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLCopyKernel                    _copy_output;$/;"	m	class:arm_compute::CLLSTMLayer
_corner_candidates_mutex	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^    arm_compute::Mutex _corner_candidates_mutex; \/**< Mutex to preventing race conditions *\/$/;"	m	class:arm_compute::CPPCornerCandidatesKernel
_corners	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    ICLKeyPointArray *_corners;    \/**< destination array *\/$/;"	m	class:arm_compute::CLCopyToArrayKernel
_corners	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    ICLKeyPointArray         *_corners;$/;"	m	class:arm_compute::CLFastCorners
_corners	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    ICLKeyPointArray                   *_corners;               \/**< Output corners array *\/$/;"	m	class:arm_compute::CLHarrisCorners
_corners_list	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    std::unique_ptr<InternalKeypoint[]> _corners_list;          \/**< Array of InternalKeypoint. It stores the potential corner candidates *\/$/;"	m	class:arm_compute::CLHarrisCorners
_corners_list	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    std::unique_ptr<InternalKeypoint[]>   _corners_list;          \/**< Array of InternalKeypoint. It stores the potential corner candidates *\/$/;"	m	class:arm_compute::NEHarrisCorners
_cpu_info	arm_compute/runtime/IScheduler.h	/^    CPUInfo _cpu_info;$/;"	m	class:arm_compute::IScheduler
_cross_layer_memory_manager_helpers_8h	documentation/_cross_layer_memory_manager_helpers_8h.js	/^var _cross_layer_memory_manager_helpers_8h =$/;"	v
_ctx	arm_compute/graph/frontend/Stream.h	/^    GraphContext _ctx;     \/**< Graph context to use *\/$/;"	m	class:arm_compute::graph::frontend::final
_ctx	arm_compute/runtime/CL/CLMemoryRegion.h	/^    cl::Context _ctx;$/;"	m	class:arm_compute::ICLMemoryRegion
_cum_dist	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    CLDistribution1D        _cum_dist;                \/**< Distribution that holds the cummulative distribution of the input histogram. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
_cum_dist	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    Distribution1D                 _cum_dist;                \/**< Distribution that holds the cummulative distribution of the input histogram. *\/$/;"	m	class:arm_compute::NEEqualizeHistogram
_cumulative_sum	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    IDistribution1D       *_cumulative_sum; \/**< The cummulative distribution. *\/$/;"	m	class:arm_compute::NECumulativeDistributionKernel
_current_exception	src/runtime/CPP/CPPScheduler.cpp	/^    std::exception_ptr      _current_exception;$/;"	m	class:arm_compute::Thread	file:
_custom_scheduler	arm_compute/runtime/Scheduler.h	/^    static std::shared_ptr<IScheduler> _custom_scheduler;$/;"	m	class:arm_compute::Scheduler
_custom_scheduler	src/runtime/Scheduler.cpp	/^std::shared_ptr<IScheduler> Scheduler::_custom_scheduler = nullptr;$/;"	m	class:Scheduler	file:
_cv	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    std::condition_variable _cv = {};$/;"	m	class:arm_gemm::Buffer
_cv	src/runtime/CPP/CPPScheduler.cpp	/^    std::condition_variable _cv;$/;"	m	class:arm_compute::Thread	file:
_cv	support/Semaphore.h	/^    std::condition_variable _cv;$/;"	m	class:arm_compute::Semaphore
_d	arm_compute/runtime/NEON/AssemblyHelper.h	/^    ITensor *_d;$/;"	m	class:arm_compute::final
_data	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    T* const _data;$/;"	m	class:final
_data	arm_compute/runtime/Distribution1D.h	/^    std::unique_ptr<uint32_t[]> _data; \/**< The distribution data. *\/$/;"	m	class:arm_compute::Distribution1D
_data	tests/framework/TestCase.h	/^    T _data;$/;"	m	class:arm_compute::test::framework::DataTestCase
_data	tests/framework/TestCaseFactory.h	/^    D _data;$/;"	m	class:arm_compute::test::framework::final
_data	tests/framework/datasets/InitializerListDataset.h	/^    std::vector<T> _data;$/;"	m	class:arm_compute::test::framework::dataset::final
_data_description	tests/framework/TestCaseFactory.h	/^    const std::string _data_description;$/;"	m	class:arm_compute::test::framework::TestCaseFactory
_data_layout	arm_compute/core/TensorInfo.h	/^    DataLayout       _data_layout;$/;"	m	class:arm_compute::final
_data_layout	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    DataLayout _data_layout;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_data_layout	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^    DataLayout           _data_layout;$/;"	m	class:arm_compute::NEPoolingLayer
_data_layout	src/core/TensorInfo.cpp	/^      _is_resizable{ true }, _valid_region{ Coordinates(), _tensor_shape }, _padding{ 0 }, _quantization_info(), _data_layout(DataLayout::NCHW)$/;"	f
_data_type	arm_compute/core/TensorInfo.h	/^    DataType         _data_type;$/;"	m	class:arm_compute::final
_data_type	arm_compute/runtime/ILutAllocator.h	/^    DataType _data_type;    \/**< Data type of LUT elements. *\/$/;"	m	class:arm_compute::ILutAllocator
_data_type_max_min	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    std::array<int, 2> _data_type_max_min; \/**< Maximum and minimum data type value respectively. *\/$/;"	m	class:arm_compute::CLMinMaxKernel
_dataset1	tests/framework/datasets/CartesianProductDataset.h	/^    T _dataset1;$/;"	m	class:arm_compute::test::framework::dataset::CartesianProductDataset
_dataset1	tests/framework/datasets/JoinDataset.h	/^    T _dataset1;$/;"	m	class:arm_compute::test::framework::dataset::JoinDataset
_dataset1	tests/framework/datasets/ZipDataset.h	/^    T _dataset1;$/;"	m	class:arm_compute::test::framework::dataset::ZipDataset
_dataset2	tests/framework/datasets/CartesianProductDataset.h	/^        const U_noref *_dataset2;$/;"	m	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
_dataset2	tests/framework/datasets/CartesianProductDataset.h	/^    U _dataset2;$/;"	m	class:arm_compute::test::framework::dataset::CartesianProductDataset
_dataset2	tests/framework/datasets/JoinDataset.h	/^    U _dataset2;$/;"	m	class:arm_compute::test::framework::dataset::JoinDataset
_dataset2	tests/framework/datasets/ZipDataset.h	/^    U _dataset2;$/;"	m	class:arm_compute::test::framework::dataset::ZipDataset
_dataset_modes_8cpp	documentation/_dataset_modes_8cpp.js	/^var _dataset_modes_8cpp =$/;"	v
_dataset_modes_8h	documentation/_dataset_modes_8h.js	/^var _dataset_modes_8h =$/;"	v
_deconvolution_layer_8h	documentation/_deconvolution_layer_8h.js	/^var _deconvolution_layer_8h =$/;"	v
_decorators	arm_compute/core/utils/logging/Logger.h	/^    std::vector<std::unique_ptr<IDecorator>> _decorators;$/;"	m	class:arm_compute::logging::Logger
_depth_concatenate_layer_8h	documentation/_depth_concatenate_layer_8h.js	/^var _depth_concatenate_layer_8h =$/;"	v
_depth_convert_layer_8h	documentation/_depth_convert_layer_8h.js	/^var _depth_convert_layer_8h =$/;"	v
_depth_convert_layer_8h.xhtml#a742cdbdf3c1db76c9a189f1bcd745579	documentation/navtreeindex5.js	/^"_depth_convert_layer_8h.xhtml#a742cdbdf3c1db76c9a189f1bcd745579":[6,0,4,6,4,42,0],$/;"	p	class:NAVTREEINDEX5
_depth_function	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    CLDepthConvertLayer                        _depth_function;$/;"	m	class:arm_compute::CLLaplacianPyramid
_depth_function	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    NEDepthConvertLayer                        _depth_function;$/;"	m	class:arm_compute::NELaplacianPyramid
_depth_multiplier	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int                                      _depth_multiplier;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_depth_multiplier	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    unsigned int               _depth_multiplier;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_depth_offset	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    unsigned int     _depth_offset;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
_depth_offset	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    int              _depth_offset;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
_depth_offset	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    unsigned int         _depth_offset;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
_depthf	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^    CLDepthConvertLayer                     _depthf;$/;"	m	class:arm_compute::CLLaplacianReconstruct
_depthf	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^    NEDepthConvertLayer                     _depthf;$/;"	m	class:arm_compute::NELaplacianReconstruct
_depthwise_conv	arm_compute/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.h	/^    CLDepthwiseConvolutionLayer _depthwise_conv;$/;"	m	class:arm_compute::CLDepthwiseSeparableConvolutionLayer
_depthwise_conv	arm_compute/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.h	/^    NEDepthwiseConvolutionLayer _depthwise_conv;$/;"	m	class:arm_compute::NEDepthwiseSeparableConvolutionLayer
_depthwise_convolution_layer_8h	documentation/_depthwise_convolution_layer_8h.js	/^var _depthwise_convolution_layer_8h =$/;"	v
_depthwise_infos_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<PadStrideInfo>::const_iterator _depthwise_infos_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_depthwise_out_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _depthwise_out_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_depthwise_separable_convolution_layer_8h	documentation/_depthwise_separable_convolution_layer_8h.js	/^var _depthwise_separable_convolution_layer_8h =$/;"	v
_dequantization_layer_8h	documentation/_dequantization_layer_8h.js	/^var _dequantization_layer_8h =$/;"	v
_dequantize_kernel	arm_compute/runtime/CL/functions/CLDequantizationLayer.h	/^    CLDequantizationLayerKernel _dequantize_kernel;$/;"	m	class:arm_compute::CLDequantizationLayer
_dequantize_kernel	arm_compute/runtime/NEON/functions/NEDequantizationLayer.h	/^    NEDequantizationLayerKernel _dequantize_kernel;$/;"	m	class:arm_compute::NEDequantizationLayer
_derivative	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^    CLDerivative           _derivative;$/;"	m	class:arm_compute::CLHOGGradient
_derivative	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^    NEDerivative               _derivative;$/;"	m	class:arm_compute::NEHOGGradient
_derivative_8h	documentation/_derivative_8h.js	/^var _derivative_8h =$/;"	v
_desc	arm_compute/graph/Tensor.h	/^    TensorDescriptor                 _desc;        \/**< Tensor metadata *\/$/;"	m	class:arm_compute::graph::final
_desc	arm_compute/graph/frontend/Layers.h	/^    TensorDescriptor    _desc;$/;"	m	class:arm_compute::graph::frontend::final
_desc	arm_compute/graph/nodes/ConstNode.h	/^    TensorDescriptor _desc;$/;"	m	class:arm_compute::graph::final
_desc	arm_compute/graph/nodes/InputNode.h	/^    TensorDescriptor _desc;$/;"	m	class:arm_compute::graph::final
_descriptor	arm_compute/runtime/HOG.h	/^    std::unique_ptr<float[]> _descriptor;$/;"	m	class:arm_compute::HOG
_descriptor_size	arm_compute/core/HOGInfo.h	/^    size_t      _descriptor_size;$/;"	m	class:arm_compute::HOGInfo
_detection_window_height	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _detection_window_height;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_detection_window_size	arm_compute/core/HOGInfo.h	/^    Size2D      _detection_window_size;$/;"	m	class:arm_compute::HOGInfo
_detection_window_width	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _detection_window_width;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_detection_windows	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	/^    ICLDetectionWindowArray *_detection_windows;$/;"	m	class:arm_compute::CLHOGDetectorKernel
_detection_windows	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    IDetectionWindowArray *_detection_windows;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_detection_windows	arm_compute/runtime/CL/functions/CLHOGDetector.h	/^    ICLDetectionWindowArray *_detection_windows;$/;"	m	class:arm_compute::CLHOGDetector
_detection_windows	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    ICLDetectionWindowArray                                      *_detection_windows;$/;"	m	class:arm_compute::CLHOGMultiDetection
_detection_windows	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    IDetectionWindowArray                                        *_detection_windows;$/;"	m	class:arm_compute::NEHOGMultiDetection
_device	arm_compute/core/CL/CLKernelLibrary.h	/^    cl::Device                 _device;    \/**< CL device for which the programs are created. *\/$/;"	m	class:arm_compute::Program
_device	arm_compute/core/CL/CLKernelLibrary.h	/^    cl::Device  _device;                                                 \/**< Underlying CL device. *\/$/;"	m	class:arm_compute::CLKernelLibrary
_dilate_8h	documentation/_dilate_8h.js	/^var _dilate_8h =$/;"	v
_dilation	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    Size2D        _dilation;$/;"	m	class:arm_compute::NEIm2ColKernel
_dilation_it	tests/datasets/ConvolutionLayerDataset.h	/^        std::vector<Size2D>::const_iterator        _dilation_it;$/;"	m	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
_dim	arm_compute/core/Validate.h	/^    const Dimensions<T> &_dim;$/;"	m	class:arm_compute::detail::compare_dimension
_dim_split	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    unsigned int                              _dim_split;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_dim_start	arm_compute/core/Helpers.h	/^        int _dim_start;$/;"	m	class:arm_compute::Iterator::Dimension
_dimensions	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    size_t _dimensions;$/;"	m	class:arm_compute::gles::NDRange
_dimensions_8h	documentation/_dimensions_8h.js	/^var _dimensions_8h =$/;"	v
_dims	arm_compute/core/Helpers.h	/^    std::array<Dimension, Coordinates::num_max_dimensions> _dims;$/;"	m	class:arm_compute::Iterator
_dims	arm_compute/core/Window.h	/^    std::array<Dimension, Coordinates::num_max_dimensions> _dims;$/;"	m	class:arm_compute::Window
_direct_conv_kernel	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^    CLDirectConvolutionLayerKernel _direct_conv_kernel;$/;"	m	class:arm_compute::CLDirectConvolutionLayer
_direct_convolution_layer_tensor_shift_8cpp	documentation/_direct_convolution_layer_tensor_shift_8cpp.js	/^var _direct_convolution_layer_tensor_shift_8cpp =$/;"	v
_display	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    EGLDisplay  _display;                                                \/**< Underlying EGL Display. *\/$/;"	m	class:arm_compute::GCKernelLibrary
_display	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^    EGLDisplay _display; \/**< Underlying EGL Display. *\/$/;"	m	class:arm_compute::GCScheduler
_distribution	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    const IDistribution1D *_distribution;   \/**< Input histogram of the input image. *\/$/;"	m	class:arm_compute::NECumulativeDistributionKernel
_done	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        bool         _done      = false;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_dot_node_visitor	arm_compute/graph/printers/DotGraphPrinter.h	/^    DotGraphVisitor _dot_node_visitor = {};$/;"	m	class:arm_compute::graph::final
_dot_product_path	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    bool                               _dot_product_path;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_dotprod	arm_compute/core/CPP/CPPTypes.h	/^    bool                  _dotprod       = false;$/;"	m	class:arm_compute::final
_dropout_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCDropoutLayer.h	/^    GCDropoutLayerKernel _dropout_kernel;$/;"	m	class:arm_compute::GCDropoutLayer
_dst_it	tests/datasets/ConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _dst_it;$/;"	m	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
_dst_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _dst_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_dst_it	tests/datasets/FullyConnectedLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _dst_it;$/;"	m	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
_dst_it	tests/datasets/GEMMDataset.h	/^        std::vector<TensorShape>::const_iterator _dst_it;$/;"	m	struct:arm_compute::test::datasets::GEMMDataset::iterator
_dst_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _dst_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_dst_it	tests/datasets/RNNLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _dst_it;$/;"	m	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
_dwc_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEDepthwiseConvolutionLayer3x3Kernel      _dwc_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_dx	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    const ITensor      *_dx;$/;"	m	class:arm_compute::NEScaleKernel
_dx	arm_compute/runtime/NEON/functions/NEScale.h	/^    Tensor             _dx;             \/**< Element's distance between the X real coordinate and the smallest X following integer *\/$/;"	m	class:arm_compute::NEScale
_dy	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    const ITensor      *_dy;$/;"	m	class:arm_compute::NEScaleKernel
_dy	arm_compute/runtime/NEON/functions/NEScale.h	/^    Tensor             _dy;             \/**< Element's distance between the Y real coordinate and the smallest Y following integer *\/$/;"	m	class:arm_compute::NEScale
_edge_trace	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLEdgeTraceKernel             _edge_trace;                                      \/**< Edge tracing kernel. *\/$/;"	m	class:arm_compute::CLCannyEdge
_edge_trace	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    NEEdgeTraceKernel             _edge_trace;          \/**< Edge tracing kernel *\/$/;"	m	class:arm_compute::NECannyEdge
_edges	arm_compute/graph/Graph.h	/^    std::vector<std::unique_ptr<Edge>>   _edges   = {};         \/**< Graph edges *\/$/;"	m	class:arm_compute::graph::final
_enabled	arm_compute/core/Types.h	/^    bool               _enabled = { false };$/;"	m	class:arm_compute::HOGNormType::ActivationLayerInfo
_end	arm_compute/core/Window.h	/^        int _end;   \/**< End of the dimension *\/$/;"	m	class:arm_compute::Window::Dimension
_end	tests/framework/datasets/RangeDataset.h	/^    T _end;$/;"	m	class:arm_compute::test::framework::dataset::final
_end	tests/framework/instruments/OpenCLMemoryUsage.h	/^    } _start, _end, _now;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage	typeref:struct:arm_compute::test::framework::OpenCLMemoryUsage::Stats
_end_x	arm_compute/core/AccessWindowStatic.h	/^    int          _end_x;$/;"	m	class:arm_compute::AccessWindowStatic
_end_y	arm_compute/core/AccessWindowStatic.h	/^    int          _end_y;$/;"	m	class:arm_compute::AccessWindowStatic
_enum_option_8h	documentation/_enum_option_8h.js	/^var _enum_option_8h =$/;"	v
_epsilon	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    float            _epsilon;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_epsilon	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^    float            _epsilon;$/;"	m	class:arm_compute::CLL2NormalizeLayerKernel
_epsilon	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    float            _epsilon;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_epsilon	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    float                _epsilon;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_epsilon	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^    float          _epsilon;$/;"	m	class:arm_compute::NEL2NormalizeLayerKernel
_epsilon	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    float                       _epsilon;$/;"	m	class:arm_compute::NELKTrackerKernel
_epsilon	arm_compute/graph/frontend/Layers.h	/^    float               _epsilon;$/;"	m	class:arm_compute::graph::frontend::final
_epsilon	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^    float               _epsilon;$/;"	m	class:arm_compute::graph::final
_epsilon_it	tests/datasets/BatchNormalizationLayerDataset.h	/^        std::vector<float>::const_iterator       _epsilon_it;$/;"	m	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
_equalize_histogram_8h	documentation/_equalize_histogram_8h.js	/^var _equalize_histogram_8h =$/;"	v
_erode_8h	documentation/_erode_8h.js	/^var _erode_8h =$/;"	v
_error_8h	documentation/_error_8h.js	/^var _error_8h =$/;"	v
_error_description	arm_compute/core/Error.h	/^    std::string _error_description;$/;"	m	class:arm_compute::Status
_exceptions_8cpp	documentation/_exceptions_8cpp.js	/^var _exceptions_8cpp =$/;"	v
_exceptions_8h	documentation/_exceptions_8h.js	/^var _exceptions_8h =$/;"	v
_exclude_padding	arm_compute/core/Types.h	/^    bool          _exclude_padding;$/;"	m	class:arm_compute::HOGNormType::PoolingLayerInfo
_execution_helpers_8h	documentation/_execution_helpers_8h.js	/^var _execution_helpers_8h =$/;"	v
_extend_parent	arm_compute/core/SubTensorInfo.h	/^    bool         _extend_parent;$/;"	m	class:arm_compute::final
_extend_parent	src/core/SubTensorInfo.cpp	/^    : _parent(nullptr), _tensor_shape(), _coords(), _valid_region{ Coordinates(), _tensor_shape }, _extend_parent(false)$/;"	f
_extend_parent	src/core/SubTensorInfo.cpp	/^    : _parent(parent), _tensor_shape(tensor_shape), _coords(coords), _valid_region{ Coordinates(), _tensor_shape }, _extend_parent(extend_parent)$/;"	f
_factor1	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^    unsigned int   _factor1; \/*  equals to the number of elements per original input plane if @p data_layout == NCHW; its number of channels otherwise *\/$/;"	m	class:arm_compute::NEConvertFullyConnectedWeightsKernel
_factor2	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^    unsigned int   _factor2; \/*  equals to the number of elements per original input plane if @p data_layout == NHWC; its number of channels otherwise *\/$/;"	m	class:arm_compute::NEConvertFullyConnectedWeightsKernel
_false_value	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    uint8_t        _false_value;$/;"	m	class:arm_compute::NEThresholdKernel
_false_value_it	tests/datasets/ThresholdDataset.h	/^        std::vector<uint8_t>::const_iterator       _false_value_it;$/;"	m	struct:arm_compute::test::datasets::ThresholdDataset::iterator
_fast_corners_8h	documentation/_fast_corners_8h.js	/^var _fast_corners_8h =$/;"	v
_fast_corners_kernel	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    CLFastCornersKernel       _fast_corners_kernel;$/;"	m	class:arm_compute::CLFastCorners
_fast_corners_kernel	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    NEFastCornersKernel             _fast_corners_kernel;$/;"	m	class:arm_compute::NEFastCorners
_fast_math_hint	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    FastMathHint      _fast_math_hint;$/;"	m	class:arm_compute::graph::final
_file	arm_compute/core/Validate.h	/^    const char *const    _file;$/;"	m	class:arm_compute::detail::compare_dimension
_file_layout	utils/GraphUtils.h	/^    const DataLayout  _file_layout;$/;"	m	class:arm_compute::graph_utils::final
_filename	arm_compute/core/utils/io/FileHandler.h	/^    std::string             _filename;$/;"	m	class:arm_compute::io::FileHandler
_filename	utils/GraphUtils.h	/^    const std::string _filename;$/;"	m	class:arm_compute::graph_utils::final
_filestream	arm_compute/core/utils/io/FileHandler.h	/^    std::fstream            _filestream;$/;"	m	class:arm_compute::io::FileHandler
_fill_border	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCFillBorderKernel               _fill_border;$/;"	m	class:arm_compute::GCConvolutionLayer
_fill_border_kernel	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^    CLFillBorderKernel _fill_border_kernel; \/**< Kernel that fills the border with zeroes. *\/$/;"	m	class:arm_compute::CLMeanStdDev
_fill_border_kernel	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^    NEFillBorderKernel _fill_border_kernel; \/**< Kernel that fills tensor's borders with zeroes. *\/$/;"	m	class:arm_compute::NEMeanStdDev
_fill_border_kernel	arm_compute/runtime/NEON/functions/NEReductionOperation.h	/^    NEFillBorderKernel         _fill_border_kernel;$/;"	m	class:arm_compute::NEReductionOperation
_fill_border_kernel	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    NEFillBorderKernel      _fill_border_kernel;$/;"	m	class:arm_compute::NESoftmaxLayer
_fill_kernel	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    NEFillArrayKernel               _fill_kernel;$/;"	m	class:arm_compute::NEFastCorners
_filter_biases_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _filter_biases_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_filter_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _filter_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_filter_transform	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLWinogradFilterTransformKernel _filter_transform;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_finalized_groups	arm_compute/runtime/ISimpleLifetimeManager.h	/^    std::map<IMemoryGroup *, std::map<void *, Element>> _finalized_groups; \/**< A map that contains the finalized groups *\/$/;"	m	class:arm_compute::ISimpleLifetimeManager
_first_size	tests/framework/datasets/JoinDataset.h	/^        int        _first_size;$/;"	m	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
_fixed_point_8inl	documentation/_fixed_point_8inl.js	/^var _fixed_point_8inl =$/;"	v
_fixed_point___q_s8_8cpp	documentation/_fixed_point___q_s8_8cpp.js	/^var _fixed_point___q_s8_8cpp =$/;"	v
_fixed_point_pixel_wise_multiplication_8h	documentation/_fixed_point_pixel_wise_multiplication_8h.js	/^var _fixed_point_pixel_wise_multiplication_8h =$/;"	v
_fixed_point_position	arm_compute/core/TensorInfo.h	/^    int              _fixed_point_position;$/;"	m	class:arm_compute::final
_fixed_point_position	tests/validation/FixedPoint.h	/^    uint8_t _fixed_point_position; \/**< Fixed point precision *\/$/;"	m	class:arm_compute::test::fixed_point_arithmetic::fixed_point
_fixed_point_position_input	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    int           _fixed_point_position_input;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
_fixed_point_position_output	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    int           _fixed_point_position_output;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
_flatten_layer_8h	documentation/_flatten_layer_8h.js	/^var _flatten_layer_8h =$/;"	v
_floor_8h	documentation/_floor_8h.js	/^var _floor_8h =$/;"	v
_forget_gate_out1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _forget_gate_out1;$/;"	m	class:arm_compute::CLLSTMLayer
_forget_gate_out2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _forget_gate_out2;$/;"	m	class:arm_compute::CLLSTMLayer
_forget_gate_out3	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _forget_gate_out3;$/;"	m	class:arm_compute::CLLSTMLayer
_forget_gate_out4	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _forget_gate_out4;$/;"	m	class:arm_compute::CLLSTMLayer
_forget_gate_out5	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _forget_gate_out5;$/;"	m	class:arm_compute::CLLSTMLayer
_forget_gate_out6	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _forget_gate_out6;$/;"	m	class:arm_compute::CLLSTMLayer
_format	arm_compute/core/MultiImageInfo.h	/^    Format       _format;$/;"	m	class:arm_compute::MultiImageInfo
_format	arm_compute/core/PyramidInfo.h	/^    Format      _format;$/;"	m	class:arm_compute::PyramidInfo
_format	arm_compute/core/TensorInfo.h	/^    Format           _format;$/;"	m	class:arm_compute::final
_fortran_order	utils/Utils.h	/^    bool                       _fortran_order;$/;"	m	class:arm_compute::utils::NPYLoader
_fp16	arm_compute/core/CPP/CPPTypes.h	/^    bool                  _fp16          = false;$/;"	m	class:arm_compute::final
_frame_buffer	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint      _frame_buffer;                                           \/**< Dummy fbo *\/$/;"	m	class:arm_compute::GCKernelLibrary
_framework_8h	documentation/_framework_8h.js	/^var _framework_8h =$/;"	v
_free_blobs	arm_compute/runtime/ISimpleLifetimeManager.h	/^    std::list<Blob> _free_blobs;                                           \/**< Free blobs *\/$/;"	m	class:arm_compute::ISimpleLifetimeManager
_free_pools	arm_compute/runtime/PoolManager.h	/^    std::list<std::unique_ptr<IMemoryPool>> _free_pools;     \/**< List of free pools *\/$/;"	m	class:arm_compute::PoolManager
_fs	utils/Utils.h	/^    std::ifstream              _fs;$/;"	m	class:arm_compute::utils::NPYLoader
_fs	utils/Utils.h	/^    std::ifstream _fs;$/;"	m	class:arm_compute::utils::PPMLoader
_fully_connected_cell_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLFullyConnectedLayer           _fully_connected_cell_state;$/;"	m	class:arm_compute::CLLSTMLayer
_fully_connected_forget_gate	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLFullyConnectedLayer           _fully_connected_forget_gate;$/;"	m	class:arm_compute::CLLSTMLayer
_fully_connected_input_gate	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLFullyConnectedLayer           _fully_connected_input_gate;$/;"	m	class:arm_compute::CLLSTMLayer
_fully_connected_kernel	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLFullyConnectedLayer      _fully_connected_kernel;$/;"	m	class:arm_compute::CLRNNLayer
_fully_connected_layer_8h	documentation/_fully_connected_layer_8h.js	/^var _fully_connected_layer_8h =$/;"	v
_fully_connected_out	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLTensor                   _fully_connected_out;$/;"	m	class:arm_compute::CLRNNLayer
_fully_connected_output	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLFullyConnectedLayer           _fully_connected_output;$/;"	m	class:arm_compute::CLLSTMLayer
_fully_connected_output_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLFullyConnectedLayer           _fully_connected_output_state;$/;"	m	class:arm_compute::CLLSTMLayer
_func	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^    ActivationFunctionExecutorPtr _func;$/;"	m	class:arm_compute::NEActivationLayerKernel
_func	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    BatchNormFunctionPtr _func;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_func	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	/^    ColorConvertFunction *_func;$/;"	m	class:arm_compute::NEColorConvertKernel
_func	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    DepthConcatFunction *_func;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
_func	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    DepthwiseIm2ColFunctionPtr _func;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_func	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^    DepthwiseVectorToTensorFunctionPtr _func;$/;"	m	class:arm_compute::NEDepthwiseVectorToTensorKernel
_func	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^    DepthwiseWeightsReshapeFunction *_func;$/;"	m	class:arm_compute::NEDepthwiseWeightsReshapeKernel
_func	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    OutputStageKernel *_func;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_func	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    GEMMMatrixVectorMultiplyFunctionPtr _func;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
_func	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    NormalizationFunction  _func;$/;"	m	class:arm_compute::NENormalizationLayerKernel
_func	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    PoolingFunction  _func;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_func	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    void (NERemapKernel::*_func)(const Window &window);$/;"	m	class:arm_compute::NERemapKernel
_func	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    void (NEScaleKernel::*_func)(const Window &window);$/;"	m	class:arm_compute::NEScaleKernel
_func	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    Logits1DMaxFunction *_func;$/;"	m	class:arm_compute::NELogits1DMaxKernel
_func	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    void (NEThresholdKernel::*_func)(const Window &window);$/;"	m	class:arm_compute::NEThresholdKernel
_func	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void (INEWarpKernel::*_func)(const Window &window);$/;"	m	class:arm_compute::INEWarpKernel
_func_idx	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    uint32_t                  _func_idx;    \/**< Index used to specify convolution function to be used *\/$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
_func_idx	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    unsigned int            _func_idx;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_func_int	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    MulFunctionInt   *_func_int;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_func_q_int	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    MulFunctionQInt *_func_q_int;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_func_scharr	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLScharr3x3[]>             _func_scharr;$/;"	m	class:arm_compute::CLOpticalFlow
_func_scharr	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    std::unique_ptr<NEScharr3x3[]>       _func_scharr;$/;"	m	class:arm_compute::NEOpticalFlow
_function	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    NonLinearFilterFunction _function;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_function	arm_compute/core/Validate.h	/^    const char *const    _function;$/;"	m	class:arm_compute::detail::compare_dimension
_function	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	/^    std::unique_ptr<IFunction>      _function;$/;"	m	class:arm_compute::CLConvolutionLayer
_function	arm_compute/runtime/NEON/functions/NEConvolutionLayer.h	/^    std::unique_ptr<IFunction>      _function; \/**< Function to run *\/$/;"	m	class:arm_compute::NEConvolutionLayer
_fused_activation	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^    ActivationLayerInfo _fused_activation;$/;"	m	class:arm_compute::graph::final
_g	arm_compute/graph/frontend/Stream.h	/^    Graph        _g;       \/**< Internal graph representation of the stream *\/$/;"	m	class:arm_compute::graph::frontend::final
_g_c_direct_convolution_layer_kernel_8h	documentation/_g_c_direct_convolution_layer_kernel_8h.js	/^var _g_c_direct_convolution_layer_kernel_8h =$/;"	v
_g_c_g_e_m_m_matrix_multiply_kernel_8h.xhtml	documentation/navtreeindex6.js	/^"_g_c_g_e_m_m_matrix_multiply_kernel_8h.xhtml":[6,0,0,0,2,0,13],$/;"	p	class:NAVTREEINDEX6
_g_c_helpers_8h	documentation/_g_c_helpers_8h.js	/^var _g_c_helpers_8h =$/;"	v
_g_c_memory_group_8h	documentation/_g_c_memory_group_8h.js	/^var _g_c_memory_group_8h =$/;"	v
_g_c_normalize_planar_y_u_v_layer_kernel_8h	documentation/_g_c_normalize_planar_y_u_v_layer_kernel_8h.js	/^var _g_c_normalize_planar_y_u_v_layer_kernel_8h =$/;"	v
_g_c_tensor_8h	documentation/_g_c_tensor_8h.js	/^var _g_c_tensor_8h =$/;"	v
_g_e_m_m_8h	documentation/_g_e_m_m_8h.js	/^var _g_e_m_m_8h =$/;"	v
_g_e_m_m_interleave4x4_8h	documentation/_g_e_m_m_interleave4x4_8h.js	/^var _g_e_m_m_interleave4x4_8h =$/;"	v
_g_e_m_m_interleave_blocked_8h	documentation/_g_e_m_m_interleave_blocked_8h.js	/^var _g_e_m_m_interleave_blocked_8h =$/;"	v
_g_e_m_m_lowp_8h	documentation/_g_e_m_m_lowp_8h.js	/^var _g_e_m_m_lowp_8h =$/;"	v
_g_e_m_m_transpose1x_w_8h	documentation/_g_e_m_m_transpose1x_w_8h.js	/^var _g_e_m_m_transpose1x_w_8h =$/;"	v
_g_l_e_s___c_o_m_p_u_t_e_2_arithmetic_addition_8cpp	documentation/_g_l_e_s___c_o_m_p_u_t_e_2_arithmetic_addition_8cpp.js	/^var _g_l_e_s___c_o_m_p_u_t_e_2_arithmetic_addition_8cpp =$/;"	v
_g_l_e_s___c_o_m_p_u_t_e_2_global_pooling_layer_8cpp	documentation/_g_l_e_s___c_o_m_p_u_t_e_2_global_pooling_layer_8cpp.js	/^var _g_l_e_s___c_o_m_p_u_t_e_2_global_pooling_layer_8cpp =$/;"	v
_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h	documentation/_g_l_e_s___c_o_m_p_u_t_e_2_helper_8h.js	/^var _g_l_e_s___c_o_m_p_u_t_e_2_helper_8h =$/;"	v
_g_l_e_s___c_o_m_p_u_t_e_2_u_n_i_t_2_memory_manager_8cpp	documentation/_g_l_e_s___c_o_m_p_u_t_e_2_u_n_i_t_2_memory_manager_8cpp.js	/^var _g_l_e_s___c_o_m_p_u_t_e_2_u_n_i_t_2_memory_manager_8cpp =$/;"	v
_g_p_u_target_8cpp	documentation/_g_p_u_target_8cpp.js	/^var _g_p_u_target_8cpp =$/;"	v
_g_p_u_target_8h	documentation/_g_p_u_target_8h.js	/^var _g_p_u_target_8h =$/;"	v
_gamma	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    const ICLTensor *_gamma;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_gamma	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    const IGCTensor *_gamma;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_gamma	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    const ITensor       *_gamma;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_gamma	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _gamma;$/;"	m	class:arm_compute::graph::frontend::final
_gaus5x5	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    std::unique_ptr<NEGaussian5x5[]> _gaus5x5;$/;"	m	class:arm_compute::NEGaussianPyramidOrb
_gauss5x5	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    std::unique_ptr<CLGaussian5x5[]> _gauss5x5;$/;"	m	class:arm_compute::CLGaussianPyramidOrb
_gauss_pyr	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    CLPyramid                                  _gauss_pyr;$/;"	m	class:arm_compute::CLLaplacianPyramid
_gauss_pyr	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    Pyramid                                    _gauss_pyr;$/;"	m	class:arm_compute::NELaplacianPyramid
_gaussian3x3_8h	documentation/_gaussian3x3_8h.js	/^var _gaussian3x3_8h =$/;"	v
_gaussian5x5_8h	documentation/_gaussian5x5_8h.js	/^var _gaussian5x5_8h =$/;"	v
_gaussian_pyr_function	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    CLGaussianPyramidHalf                      _gaussian_pyr_function;$/;"	m	class:arm_compute::CLLaplacianPyramid
_gaussian_pyr_function	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    NEGaussianPyramidHalf                      _gaussian_pyr_function;$/;"	m	class:arm_compute::NELaplacianPyramid
_gaussian_pyramid_half_8cpp	documentation/_gaussian_pyramid_half_8cpp.js	/^var _gaussian_pyramid_half_8cpp =$/;"	v
_gaussian_pyramid_half_8h	documentation/_gaussian_pyramid_half_8h.js	/^var _gaussian_pyramid_half_8h =$/;"	v
_gemm_cell_state1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_cell_state1;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_cell_state2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_cell_state2;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_forget_gate1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_forget_gate1;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_forget_gate2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_forget_gate2;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_input_gate1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_input_gate1;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_input_gate2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_input_gate2;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_kernel	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    std::unique_ptr<INEKernel> _gemm_kernel;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_gemm_kernel_asm	arm_compute/runtime/NEON/AssemblyHelper.h	/^    std::unique_ptr<AssemblyGemm> _gemm_kernel_asm;$/;"	m	class:arm_compute::final
_gemm_output	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLTensor _gemm_output;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_gemm_output	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLTensor                               _gemm_output;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_gemm_output	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLTensor                   _gemm_output;$/;"	m	class:arm_compute::CLRNNLayer
_gemm_output	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor _gemm_output;$/;"	m	class:arm_compute::GCConvolutionLayer
_gemm_output	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _gemm_output;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_gemm_output	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    Tensor                                 _gemm_output;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_gemm_output1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_output1;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_output2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_output2;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_output_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLGEMM                          _gemm_output_state;$/;"	m	class:arm_compute::CLLSTMLayer
_gemm_state_f	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLGEMM                     _gemm_state_f;$/;"	m	class:arm_compute::CLRNNLayer
_gemmlowp_output	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLTensor                                            _gemmlowp_output;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_gemmlowp_output_stage	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint _gemmlowp_output_stage;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_gemmlowp_output_stage	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint _gemmlowp_output_stage;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_gemmlowp_output_stage	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint _gemmlowp_output_stage;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_gemms	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    std::unique_ptr<MultiGEMM> _gemms;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
_gl_buffer	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    std::unique_ptr<GLBufferWrapper> _gl_buffer;               \/**< OpenGL ES object containing the tensor data. *\/$/;"	m	class:arm_compute::GCTensorAllocator
_global_sum	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    cl::Buffer     *_global_sum;$/;"	m	class:arm_compute::CLMeanStdDevKernel
_global_sum	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    uint64_t          *_global_sum;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_global_sum	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^    cl::Buffer         _global_sum;         \/**< Variable that holds the global sum among calls in order to ease reduction *\/$/;"	m	class:arm_compute::CLMeanStdDev
_global_sum	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^    uint64_t           _global_sum;         \/**< Variable that holds the global sum among calls in order to ease reduction *\/$/;"	m	class:arm_compute::NEMeanStdDev
_global_sum_squared	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    cl::Buffer     *_global_sum_squared;$/;"	m	class:arm_compute::CLMeanStdDevKernel
_global_sum_squared	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    uint64_t          *_global_sum_squared;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_global_sum_squared	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^    cl::Buffer         _global_sum_squared; \/**< Variable that holds the global sum of squared values among calls in order to ease reduction *\/$/;"	m	class:arm_compute::CLMeanStdDev
_global_sum_squared	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^    uint64_t           _global_sum_squared; \/**< Variable that holds the global sum of squared values among calls in order to ease reduction *\/$/;"	m	class:arm_compute::NEMeanStdDev
_globals_8h	documentation/_globals_8h.js	/^var _globals_8h =$/;"	v
_gradient	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLGradientKernel              _gradient;                                        \/**< Gradient kernel. *\/$/;"	m	class:arm_compute::CLCannyEdge
_gradient	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLHOGGradient                 _gradient;$/;"	m	class:arm_compute::CLHOGDescriptor
_gradient	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    std::unique_ptr<INEKernel>    _gradient;            \/**< Gradient kernel *\/$/;"	m	class:arm_compute::NECannyEdge
_gradient	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    NEHOGGradient                 _gradient;$/;"	m	class:arm_compute::NEHOGDescriptor
_gradient_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    CLHOGGradient                                                 _gradient_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_gradient_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    NEHOGGradient                                                 _gradient_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_graph	arm_compute/graph/INode.h	/^    Graph                *_graph;           \/**< Backward reference to graph owning the node *\/$/;"	m	class:arm_compute::graph::INode
_graph_utils_8h	documentation/_graph_utils_8h.js	/^var _graph_utils_8h =$/;"	v
_grid_size	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    static const unsigned int _grid_size;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_grid_size	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^const unsigned int CLLogits1DMaxShiftExpSumKernel::_grid_size = 64;$/;"	m	class:CLLogits1DMaxShiftExpSumKernel	file:
_gx	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    const ICLTensor *_gx;        \/**< Source tensor - Gx component *\/$/;"	m	class:arm_compute::CLGradientKernel
_gx	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    const ICLTensor *_gx;        \/**< Input gradient X. *\/$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
_gx	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    const ITensor    *_gx;        \/**< Source tensor - Gx component *\/$/;"	m	class:arm_compute::NEGradientKernel
_gx	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    const ITensor            *_gx;        \/**< Input gradient X *\/$/;"	m	class:arm_compute::NEMagnitudePhaseFP16Kernel
_gx	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    const ITensor            *_gx;        \/**< Input gradient X *\/$/;"	m	class:arm_compute::NEMagnitudePhaseKernel
_gx	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _gx;                                              \/**< Source tensor - Gx component. *\/$/;"	m	class:arm_compute::CLCannyEdge
_gx	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^    CLTensor               _gx;$/;"	m	class:arm_compute::CLHOGGradient
_gx	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLImage                             _gx;                    \/**< Source image - Gx component *\/$/;"	m	class:arm_compute::CLHarrisCorners
_gx	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    Tensor                        _gx;                  \/**< Source tensor - Gx component *\/$/;"	m	class:arm_compute::NECannyEdge
_gx	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^    Tensor                     _gx;$/;"	m	class:arm_compute::NEHOGGradient
_gx	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    Image                                 _gx;                    \/**< Source image - Gx component *\/$/;"	m	class:arm_compute::NEHarrisCorners
_gy	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    const ICLTensor *_gy;        \/**< Source tensor - Gy component *\/$/;"	m	class:arm_compute::CLGradientKernel
_gy	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    const ICLTensor *_gy;        \/**< Input gradient Y. *\/$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
_gy	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    const ITensor    *_gy;        \/**< Source tensor - Gy component *\/$/;"	m	class:arm_compute::NEGradientKernel
_gy	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    const ITensor            *_gy;        \/**< Input gradient Y *\/$/;"	m	class:arm_compute::NEMagnitudePhaseFP16Kernel
_gy	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    const ITensor            *_gy;        \/**< Input gradient Y *\/$/;"	m	class:arm_compute::NEMagnitudePhaseKernel
_gy	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _gy;                                              \/**< Source tensor - Gy component. *\/$/;"	m	class:arm_compute::CLCannyEdge
_gy	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^    CLTensor               _gy;$/;"	m	class:arm_compute::CLHOGGradient
_gy	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLImage                             _gy;                    \/**< Source image - Gy component *\/$/;"	m	class:arm_compute::CLHarrisCorners
_gy	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    Tensor                        _gy;                  \/**< Source tensor - Gy component *\/$/;"	m	class:arm_compute::NECannyEdge
_gy	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^    Tensor                     _gy;$/;"	m	class:arm_compute::NEHOGGradient
_gy	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    Image                                 _gy;                    \/**< Source image - Gy component *\/$/;"	m	class:arm_compute::NEHarrisCorners
_h	include/half/half.hpp	/^		inline half operator""_h(long double value) { return half(detail::binary, detail::float2half<half::round_style>(value)); }$/;"	f	namespace:literal
_h_o_g_descriptor_8h	documentation/_h_o_g_descriptor_8h.js	/^var _h_o_g_descriptor_8h =$/;"	v
_h_o_g_detector_8h	documentation/_h_o_g_detector_8h.js	/^var _h_o_g_detector_8h =$/;"	v
_h_o_g_multi_detection_8h	documentation/_h_o_g_multi_detection_8h.js	/^var _h_o_g_multi_detection_8h =$/;"	v
_half_8h	documentation/_half_8h.js	/^var _half_8h =$/;"	v
_handle	arm_compute/graph/Tensor.h	/^    std::unique_ptr<ITensorHandle>   _handle;      \/**< Tensor Handle *\/$/;"	m	class:arm_compute::graph::final
_handler	arm_compute/core/utils/logging/FilePrinter.h	/^    io::FileHandler _handler;$/;"	m	class:arm_compute::logging::final
_harris_corner_detector_8cpp	documentation/_harris_corner_detector_8cpp.js	/^var _harris_corner_detector_8cpp =$/;"	v
_harris_corner_detector_8h	documentation/_harris_corner_detector_8h.js	/^var _harris_corner_detector_8h =$/;"	v
_harris_score	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLHarrisScoreKernel                 _harris_score;          \/**< Harris score kernel *\/$/;"	m	class:arm_compute::CLHarrisCorners
_harris_score	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    std::unique_ptr<INEHarrisScoreKernel> _harris_score;          \/**< Harris score kernel *\/$/;"	m	class:arm_compute::NEHarrisCorners
_has_bias	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    bool                       _has_bias;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_has_bias	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    bool          _has_bias;$/;"	m	class:arm_compute::NEIm2ColKernel
_has_bias	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _has_bias;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_has_bias	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    bool                                      _has_bias;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_has_cifg_opt	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool     _has_cifg_opt;$/;"	m	class:arm_compute::LSTMParams
_has_peephole_opt	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool     _has_peephole_opt;$/;"	m	class:arm_compute::LSTMParams
_has_projection	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool     _has_projection;$/;"	m	class:arm_compute::LSTMParams
_has_projection_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool                            _has_projection_weights;$/;"	m	class:arm_compute::CLLSTMLayer
_height	arm_compute/core/IAccessWindow.h	/^    int          _height;$/;"	m	class:arm_compute::AccessWindowRectangle
_height	arm_compute/core/MultiImageInfo.h	/^    unsigned int _height;$/;"	m	class:arm_compute::MultiImageInfo
_height	utils/Utils.h	/^    unsigned int  _width, _height;$/;"	m	class:arm_compute::utils::PPMLoader
_helpers_8cpp	documentation/_helpers_8cpp.js	/^var _helpers_8cpp =$/;"	v
_helpers_8inl	documentation/_helpers_8inl.js	/^var _helpers_8inl =$/;"	v
_hints	arm_compute/graph/frontend/IStream.h	/^    StreamHints _hints     = {};              \/**< Execution and algorithmic hints *\/$/;"	m	class:arm_compute::graph::frontend::IStream
_hist	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    CLDistribution1D        _hist;                    \/**< Distribution that holds the histogram of the input image. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
_hist	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    Distribution1D                 _hist;                    \/**< Distribution that holds the histogram of the input image. *\/$/;"	m	class:arm_compute::NEEqualizeHistogram
_hist_mtx	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^    arm_compute::Mutex            _hist_mtx;$/;"	m	class:arm_compute::NEHistogramKernel
_histogram_8h	documentation/_histogram_8h.js	/^var _histogram_8h =$/;"	v
_histogram_kernel	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    CLHistogramKernel       _histogram_kernel;        \/**< Kernel that calculates the histogram of input. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
_histogram_kernel	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    NEHistogramKernel              _histogram_kernel;        \/**< Kernel that calculates the histogram of input. *\/$/;"	m	class:arm_compute::NEEqualizeHistogram
_histogram_kernel	arm_compute/runtime/NEON/functions/NEHistogram.h	/^    NEHistogramKernel           _histogram_kernel;$/;"	m	class:arm_compute::NEHistogram
_histogram_size	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    static const uint32_t _histogram_size = 256; \/**< Default histogram size of 256. *\/$/;"	m	class:arm_compute::NECumulativeDistributionKernel
_hog	tests/CL/CLHOGAccessor.h	/^    CLHOG &_hog;$/;"	m	class:arm_compute::test::CLHOGAccessor
_hog	tests/NEON/HOGAccessor.h	/^    HOG &_hog;$/;"	m	class:arm_compute::test::HOGAccessor
_hog_descriptor	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    const float           *_hog_descriptor;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_hog_detect_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    std::unique_ptr<CLHOGDetector[]>                              _hog_detect_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_hog_detect_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    std::unique_ptr<NEHOGDetector[]>                              _hog_detect_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_hog_detector_kernel	arm_compute/runtime/CL/functions/CLHOGDetector.h	/^    CLHOGDetectorKernel      _hog_detector_kernel;$/;"	m	class:arm_compute::CLHOGDetector
_hog_info_it	tests/datasets/HOGDescriptorDataset.h	/^        std::vector<HOGInfo>::const_iterator     _hog_info_it;$/;"	m	struct:arm_compute::test::datasets::HOGDescriptorDataset::iterator
_hog_infos_it	tests/datasets/HOGMultiDetectionDataset.h	/^        std::vector<std::vector<HOGInfo>>::const_iterator _hog_infos_it;$/;"	m	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
_hog_infos_name_it	tests/datasets/HOGMultiDetectionDataset.h	/^        std::vector<std::string>::const_iterator          _hog_infos_name_it;$/;"	m	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
_hog_norm_space	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    std::unique_ptr<CLTensor[]>                                   _hog_norm_space;$/;"	m	class:arm_compute::CLHOGMultiDetection
_hog_norm_space	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    std::unique_ptr<Tensor[]>                                     _hog_norm_space;$/;"	m	class:arm_compute::NEHOGMultiDetection
_hog_space	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLTensor                      _hog_space;$/;"	m	class:arm_compute::CLHOGDescriptor
_hog_space	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    std::unique_ptr<CLTensor[]>                                   _hog_space;$/;"	m	class:arm_compute::CLHOGMultiDetection
_hog_space	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    Tensor                        _hog_space;$/;"	m	class:arm_compute::NEHOGDescriptor
_hog_space	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    std::unique_ptr<Tensor[]>                                     _hog_space;$/;"	m	class:arm_compute::NEHOGMultiDetection
_horizontal_border_handler	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    std::unique_ptr<CLFillBorderKernel[]>          _horizontal_border_handler;$/;"	m	class:arm_compute::CLGaussianPyramidHalf
_horizontal_border_handler	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    std::unique_ptr<NEFillBorderKernel[]>          _horizontal_border_handler;$/;"	m	class:arm_compute::NEGaussianPyramidHalf
_horizontal_reduction	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    std::unique_ptr<CLGaussianPyramidHorKernel[]>  _horizontal_reduction;$/;"	m	class:arm_compute::CLGaussianPyramidHalf
_horizontal_reduction	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    std::unique_ptr<NEGaussianPyramidHorKernel[]>  _horizontal_reduction;$/;"	m	class:arm_compute::NEGaussianPyramidHalf
_i_access_window_8h	documentation/_i_access_window_8h.js	/^var _i_access_window_8h =$/;"	v
_i_array_8h	documentation/_i_array_8h.js	/^var _i_array_8h =$/;"	v
_i_array_8h_source.xhtml	documentation/navtreeindex7.js	/^"_i_array_8h_source.xhtml":[6,0,0,0,18],$/;"	p	class:NAVTREEINDEX7
_i_c_l_array_8h	documentation/_i_c_l_array_8h.js	/^var _i_c_l_array_8h =$/;"	v
_i_c_l_kernel_8h	documentation/_i_c_l_kernel_8h.js	/^var _i_c_l_kernel_8h =$/;"	v
_i_c_l_multi_image_8h	documentation/_i_c_l_multi_image_8h.js	/^var _i_c_l_multi_image_8h =$/;"	v
_i_g_c_kernel_8h	documentation/_i_g_c_kernel_8h.js	/^var _i_g_c_kernel_8h =$/;"	v
_i_g_c_tensor_8h	documentation/_i_g_c_tensor_8h.js	/^var _i_g_c_tensor_8h =$/;"	v
_i_n_e_kernel_8h	documentation/_i_n_e_kernel_8h.js	/^var _i_n_e_kernel_8h =$/;"	v
_i_n_e_simple_kernel_8h	documentation/_i_n_e_simple_kernel_8h.js	/^var _i_n_e_simple_kernel_8h =$/;"	v
_i_stream_operators_8h	documentation/_i_stream_operators_8h.js	/^var _i_stream_operators_8h =$/;"	v
_i_tensor_accessor_8h	documentation/_i_tensor_accessor_8h.js	/^var _i_tensor_accessor_8h =$/;"	v
_id	arm_compute/core/Dimensions.h	/^    std::array<T, num_max_dimensions> _id;$/;"	m	class:arm_compute::Dimensions
_id	arm_compute/graph/Edge.h	/^    EdgeID       _id;$/;"	m	class:arm_compute::graph::final
_id	arm_compute/graph/Graph.h	/^    GraphID                              _id      = GraphID(0); \/**< Graph id *\/$/;"	m	class:arm_compute::graph::final
_id	arm_compute/graph/INode.h	/^    NodeID                _id;              \/**< Node ID *\/$/;"	m	class:arm_compute::graph::INode
_id	arm_compute/graph/Tensor.h	/^    TensorID                         _id;          \/**< Tensor id *\/$/;"	m	class:arm_compute::graph::final
_idx_class	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    uint16_t               _idx_class;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_im2_col_8h	documentation/_im2_col_8h.js	/^var _im2_col_8h =$/;"	v
_im2col_kernel	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLDepthwiseIm2ColKernel                   _im2col_kernel;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_im2col_kernel	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLIm2ColKernel                                      _im2col_kernel;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_im2col_kernel	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLIm2ColKernel                                      _im2col_kernel;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_im2col_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCIm2ColKernel                      _im2col_kernel;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_im2col_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEDepthwiseIm2ColKernel                   _im2col_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_im2col_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NEIm2ColKernel                      _im2col_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_im2col_output	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLTensor                                            _im2col_output;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_im2col_output	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLTensor _im2col_output;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_im2col_output	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCTensor                            _im2col_output;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_im2col_output	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    Tensor                              _im2col_output;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_image_it	tests/datasets/HOGDescriptorDataset.h	/^        std::vector<std::string>::const_iterator _image_it;$/;"	m	struct:arm_compute::test::datasets::HOGDescriptorDataset::iterator
_image_it	tests/datasets/HOGMultiDetectionDataset.h	/^        std::vector<std::string>::const_iterator          _image_it;$/;"	m	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
_in_batch_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _in_col_stride, _in_row_stride, _in_batch_stride;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_in_col_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _in_col_stride, _in_row_stride, _in_batch_stride;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_in_it	tests/datasets/ReshapeLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _in_it;$/;"	m	struct:arm_compute::test::datasets::ReshapeLayerDataset::iterator
_in_it	tests/datasets/WinogradInputTransformDataset.h	/^        std::vector<TensorShape>::const_iterator  _in_it;$/;"	m	struct:arm_compute::test::datasets::WinogradInputTransformDataset::iterator
_in_out	arm_compute/core/CL/kernels/CLIntegralImageKernel.h	/^    ICLTensor *_in_out;$/;"	m	class:arm_compute::CLIntegralImageVertKernel
_in_out	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^    InternalKeypoint *_in_out;                \/**< Source array of InternalKeypoint *\/$/;"	m	class:arm_compute::CPPSortEuclideanDistanceKernel
_in_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _in_col_stride, _in_row_stride, _in_batch_stride;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_index	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    volatile int          _index  = 0;                  \/\/ Which block of data currently resides in the buffer.$/;"	m	class:arm_gemm::Buffer
_index	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int _index     = 0;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_info	arm_compute/core/AccessWindowAutoPadding.h	/^    ITensorInfo *_info;$/;"	m	class:arm_compute::AccessWindowAutoPadding
_info	arm_compute/core/AccessWindowStatic.h	/^    ITensorInfo *_info;$/;"	m	class:arm_compute::AccessWindowStatic
_info	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^    PadStrideInfo    _info;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsampleKernel
_info	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^    PadStrideInfo  _info;$/;"	m	class:arm_compute::CPPUpsampleKernel
_info	arm_compute/core/IAccessWindow.h	/^    ITensorInfo *_info;$/;"	m	class:arm_compute::AccessWindowRectangle
_info	arm_compute/graph/nodes/ActivationLayerNode.h	/^    ActivationLayerInfo _info;$/;"	m	class:arm_compute::graph::final
_info	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    PadStrideInfo     _info;$/;"	m	class:arm_compute::graph::final
_info	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^    PadStrideInfo              _info;$/;"	m	class:arm_compute::graph::final
_info	arm_compute/graph/nodes/NormalizationLayerNode.h	/^    NormalizationLayerInfo _info;$/;"	m	class:arm_compute::graph::final
_info	arm_compute/graph/nodes/PoolingLayerNode.h	/^    PoolingLayerInfo _info;$/;"	m	class:arm_compute::graph::final
_info	arm_compute/runtime/CL/CLHOG.h	/^    HOGInfo    _info;$/;"	m	class:arm_compute::CLHOG
_info	arm_compute/runtime/CL/CLMultiImage.h	/^    MultiImageInfo _info;          \/** Instance of the multi-planar image's meta data *\/$/;"	m	class:arm_compute::CLMultiImage
_info	arm_compute/runtime/CL/CLPyramid.h	/^    PyramidInfo                 _info;$/;"	m	class:arm_compute::CLPyramid
_info	arm_compute/runtime/CL/CLSubTensor.h	/^    mutable SubTensorInfo _info;$/;"	m	class:arm_compute::CLSubTensor
_info	arm_compute/runtime/HOG.h	/^    HOGInfo                  _info;$/;"	m	class:arm_compute::HOG
_info	arm_compute/runtime/ITensorAllocator.h	/^    TensorInfo _info; \/**< Tensor's metadata. *\/$/;"	m	class:arm_compute::ITensorAllocator
_info	arm_compute/runtime/MultiImage.h	/^    MultiImageInfo _info;        \/** Instance of the multi-planar image's meta data *\/$/;"	m	class:arm_compute::MultiImage
_info	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    PadStrideInfo      _info;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_info	arm_compute/runtime/SubTensor.h	/^    mutable SubTensorInfo _info;$/;"	m	class:arm_compute::SubTensor
_info	src/runtime/CPP/CPPScheduler.cpp	/^    ThreadInfo              _info;$/;"	m	class:arm_compute::Thread	file:
_info_it	tests/datasets/WinogradInputTransformDataset.h	/^        std::vector<WinogradInfo>::const_iterator _info_it;$/;"	m	struct:arm_compute::test::datasets::WinogradInputTransformDataset::iterator
_info_it	tests/datasets/WinogradOutputTransformDataset.h	/^        std::vector<WinogradInfo>::const_iterator _info_it;$/;"	m	struct:arm_compute::test::datasets::WinogradOutputTransformDataset::iterator
_infos_it	tests/datasets/ConvolutionLayerDataset.h	/^        std::vector<PadStrideInfo>::const_iterator _infos_it;$/;"	m	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
_infos_it	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        std::vector<PadStrideInfo>::const_iterator _infos_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
_infos_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<ActivationLayerInfo>::const_iterator _infos_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_infos_it	tests/datasets/PoolingLayerDataset.h	/^        std::vector<PoolingLayerInfo>::const_iterator _infos_it;$/;"	m	struct:arm_compute::test::datasets::PoolingLayerDataset::iterator
_infos_it	tests/datasets/RNNLayerDataset.h	/^        std::vector<ActivationLayerInfo>::const_iterator _infos_it;$/;"	m	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
_infos_it	tests/datasets/ROIPoolingLayerDataset.h	/^        std::vector<ROIPoolingLayerInfo>::const_iterator _infos_it;$/;"	m	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
_initialize_symbols	arm_compute/runtime/CL/CLScheduler.h	/^    static std::once_flag _initialize_symbols;$/;"	m	class:arm_compute::CLScheduler
_initialize_symbols	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^    static std::once_flag _initialize_symbols;$/;"	m	class:arm_compute::GCScheduler
_initialized	src/core/GLES_COMPUTE/OpenGLES.cpp	/^    bool _initialized = false;$/;"	m	class:GLESSymbols	file:
_initializer_list_dataset_8h	documentation/_initializer_list_dataset_8h.js	/^var _initializer_list_dataset_8h =$/;"	v
_inner_border	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^    BorderSize       _inner_border;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsampleKernel
_inner_border	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^    std::pair<unsigned int, unsigned int> _inner_border;$/;"	m	class:arm_compute::CPPUpsampleKernel
_inner_border	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    std::pair<unsigned int, unsigned int> _inner_border;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_inptr	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const T* const _inptr;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_input	arm_compute/core/CL/ICLSimpleKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::ICLSimpleKernel
_input	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	/^    ICLTensor *_input;$/;"	m	class:arm_compute::CLActivationLayerKernel
_input	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    ICLTensor       *_input;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_input	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    const ICLTensor *_input;            \/**< Source tensor. *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_input	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLChannelExtractKernel
_input	arm_compute/core/CL/kernels/CLChannelShuffleLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLChannelShuffleLayerKernel
_input	arm_compute/core/CL/kernels/CLCol2ImKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLCol2ImKernel
_input	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^    const ICLTensor     *_input;        \/*pointer to single planar tensor input *\/$/;"	m	class:arm_compute::CLColorConvertKernel
_input	arm_compute/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLConvertFullyConnectedWeightsKernel
_input	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLConvolutionRectangleKernel
_input	arm_compute/core/CL/kernels/CLCopyKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLCopyKernel
_input	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsampleKernel
_input	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
_input	arm_compute/core/CL/kernels/CLDepthwiseIm2ColKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDepthwiseIm2ColKernel
_input	arm_compute/core/CL/kernels/CLDepthwiseVectorToTensorKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDepthwiseVectorToTensorKernel
_input	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDepthwiseWeightsReshapeKernel
_input	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDequantizationLayerKernel
_input	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    const ICLTensor *_input;            \/**< Input tensor *\/$/;"	m	class:arm_compute::CLDerivativeKernel
_input	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_input	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    ICLTensor       *_input;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
_input	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    const ICLImage   *_input;      \/**< source image *\/$/;"	m	class:arm_compute::CLCopyToArrayKernel
_input	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    const ICLImage *_input;$/;"	m	class:arm_compute::CLFastCornersKernel
_input	arm_compute/core/CL/kernels/CLFloorKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLFloorKernel
_input	arm_compute/core/CL/kernels/CLGEMMInterleave4x4Kernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLGEMMInterleave4x4Kernel
_input	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_input	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_input	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::ICLGEMMLowpReductionKernel
_input	arm_compute/core/CL/kernels/CLGEMMMatrixAdditionKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLGEMMMatrixAdditionKernel
_input	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLHOGBlockNormalizationKernel
_input	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	/^    const ICLTensor         *_input;$/;"	m	class:arm_compute::CLHOGDetectorKernel
_input	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^    const ICLImage    *_input;$/;"	m	class:arm_compute::CLHistogramBorderKernel
_input	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^    const ICLImage    *_input;$/;"	m	class:arm_compute::CLHistogramKernel
_input	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLIm2ColKernel
_input	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLL2NormalizeLayerKernel
_input	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    const ICLImage *_input;$/;"	m	class:arm_compute::CLMeanStdDevKernel
_input	arm_compute/core/CL/kernels/CLMinMaxLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLMinMaxLayerKernel
_input	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    const ICLImage *_input;         \/**< Input image. *\/$/;"	m	class:arm_compute::CLMinMaxLocationKernel
_input	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    const ICLTensor *_input;               \/**< Input image. *\/$/;"	m	class:arm_compute::CLMinMaxKernel
_input	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLNormalizationLayerKernel
_input	arm_compute/core/CL/kernels/CLPermuteKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLPermuteKernel
_input	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLPoolingLayerKernel
_input	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLQuantizationLayerKernel
_input	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^    const ICLTensor    *_input;$/;"	m	class:arm_compute::CLROIPoolingLayerKernel
_input	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    const ICLTensor   *_input;$/;"	m	class:arm_compute::CLReductionOperationKernel
_input	arm_compute/core/CL/kernels/CLRemapKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLRemapKernel
_input	arm_compute/core/CL/kernels/CLReshapeLayerKernel.h	/^    const ICLTensor *_input;  \/**< Source tensor *\/$/;"	m	class:arm_compute::CLReshapeLayerKernel
_input	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    const ICLTensor *_input;        \/**< Input image *\/$/;"	m	class:arm_compute::CLScharr3x3Kernel
_input	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    const ICLTensor *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::CLSobel3x3Kernel
_input	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    const ICLTensor *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::CLSobel5x5HorKernel
_input	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    const ICLTensor *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::CLSobel7x7HorKernel
_input	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_input	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLLogits1DNormKernel
_input	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLLogits1DShiftExpSumKernel
_input	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLWeightsReshapeKernel
_input	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLWidthConcatenateLayerKernel
_input	arm_compute/core/CL/kernels/CLWinogradFilterTransformKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLWinogradFilterTransformKernel
_input	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
_input	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::CLWinogradOutputTransformKernel
_input	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    const ICLTensor *_input;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_input	arm_compute/core/CPP/ICPPSimpleKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::ICPPSimpleKernel
_input	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^    const IImage      *_input;                   \/**< Source image - Harris score *\/$/;"	m	class:arm_compute::CPPCornerCandidatesKernel
_input	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	/^    const ITensor     *_input;$/;"	m	class:arm_compute::CPPPermuteKernel
_input	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::CPPUpsampleKernel
_input	arm_compute/core/GLES_COMPUTE/IGCSimpleKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::IGCSimpleKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.h	/^    IGCTensor *_input;$/;"	m	class:arm_compute::GCActivationLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCCol2ImKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCDropoutLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCGEMMInterleave4x4Kernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCGEMMMatrixAdditionKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCIm2ColKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCNormalizationLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCPoolingLayerKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCLogits1DNormKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCLogits1DShiftExpSumKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	/^    IGCTensor    *_input;$/;"	m	class:arm_compute::GCTensorShiftKernel
_input	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	/^    const IGCTensor *_input;$/;"	m	class:arm_compute::GCWeightsReshapeKernel
_input	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^    ITensor                      *_input;$/;"	m	class:arm_compute::NEActivationLayerKernel
_input	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    ITensor             *_input;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_input	arm_compute/core/NEON/kernels/NEBitwiseNotKernel.h	/^    const ITensor *_input;  \/**< Source tensor *\/$/;"	m	class:arm_compute::NEBitwiseNotKernel
_input	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    ITensor *_input;  \/**< Source tensor *\/$/;"	m	class:arm_compute::NEEdgeTraceKernel
_input	arm_compute/core/NEON/kernels/NECol2ImKernel.h	/^    const ITensor    *_input;$/;"	m	class:arm_compute::NECol2ImKernel
_input	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	/^    const void           *_input;$/;"	m	class:arm_compute::NEColorConvertKernel
_input	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEConvertFullyConnectedWeightsKernel
_input	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    const ITensor            *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
_input	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    const IImage          *_input;          \/**< Input image. *\/$/;"	m	class:arm_compute::NECumulativeDistributionKernel
_input	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    const ITensor       *_input;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
_input	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    ITensor      *_input;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
_input	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    const ITensor                                    *_input;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_input	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    const ITensor             *_input;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_input	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^    const ITensor                     *_input;$/;"	m	class:arm_compute::NEDepthwiseVectorToTensorKernel
_input	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^    const ITensor                   *_input;$/;"	m	class:arm_compute::NEDepthwiseWeightsReshapeKernel
_input	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEDequantizationLayerKernel
_input	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^    const ITensor *_input;    \/**< Input tensor *\/$/;"	m	class:arm_compute::NEDerivativeKernel
_input	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_input	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    ITensor           *_input;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_input	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^    const IImage *_input;               \/**< source image *\/$/;"	m	class:arm_compute::NEFastCornersKernel
_input	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^    const IImage   *_input;$/;"	m	class:arm_compute::NEFillArrayKernel
_input	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    const ITensor          *_input;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_input	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    const ITensor          *_input;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_input	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::INEGEMMLowpReductionKernel
_input	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
_input	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    const ITensor         *_input;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_input	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^    const IImage                 *_input;$/;"	m	class:arm_compute::NEHistogramKernel
_input	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    const ITensor    *_input;$/;"	m	class:arm_compute::NEIm2ColKernel
_input	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEL2NormalizeLayerKernel
_input	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    const IImage      *_input;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_input	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEMinMaxLayerKernel
_input	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    const IImage        *_input;     \/**< Input image. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_input	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    const IImage      *_input; \/**< Input image. *\/$/;"	m	class:arm_compute::NEMinMaxKernel
_input	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    const ITensor          *_input;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_input	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^    const ITensor          *_input;  \/**< Source tensor *\/$/;"	m	class:arm_compute::NENonMaximaSuppression3x3Kernel
_input	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    const ITensor         *_input;$/;"	m	class:arm_compute::NENormalizationLayerKernel
_input	arm_compute/core/NEON/kernels/NEPermuteKernel.h	/^    const ITensor     *_input;$/;"	m	class:arm_compute::NEPermuteKernel
_input	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    const ITensor   *_input;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_input	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEQuantizationLayerKernel
_input	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^    const ITensor      *_input;$/;"	m	class:arm_compute::NEROIPoolingLayerKernel
_input	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    const ITensor     *_input;$/;"	m	class:arm_compute::NEReductionOperationKernel
_input	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    const ITensor *_input;  \/**< Input image *\/$/;"	m	class:arm_compute::NERemapKernel
_input	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    const ITensor      *_input;$/;"	m	class:arm_compute::NEScaleKernel
_input	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    const ITensor *_input;        \/**< Input tensor *\/$/;"	m	class:arm_compute::NEScharr3x3Kernel
_input	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    const ITensor *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::NESobel3x3Kernel
_input	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    const ITensor *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::NESobel5x5HorKernel
_input	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    const ITensor *_input;       \/**< Input tensor *\/$/;"	m	class:arm_compute::NESobel7x7HorKernel
_input	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    const ITensor         *_input;$/;"	m	class:arm_compute::NELogits1DSoftmaxKernel
_input	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    const ITensor *_input;  \/**< Input *\/$/;"	m	class:arm_compute::NEThresholdKernel
_input	arm_compute/core/NEON/kernels/NETransposeKernel.h	/^    const ITensor     *_input;$/;"	m	class:arm_compute::NETransposeKernel
_input	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    const ITensor *_input;                 \/**< Input Tensor *\/$/;"	m	class:arm_compute::INEWarpKernel
_input	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	/^    const ITensor        *_input;$/;"	m	class:arm_compute::NEWeightsReshapeKernel
_input	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const TIn* const _input;$/;"	m	class:depthwise::DepthwiseConvolution
_input	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    ICLTensor *_input;$/;"	m	class:arm_compute::CLGaussianPyramid
_input	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    ITensor           *_input;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_input	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEGaussianPyramid
_input	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    const ITensor *_input;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_input0	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	/^    const ICLTensor *_input0;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyKernel
_input0	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^    const ICLTensor *_input0;$/;"	m	class:arm_compute::CLGEMMMatrixMultiplyKernel
_input0	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    const ICLTensor *_input0;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
_input0	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	/^    const ICLTensor *_input0;$/;"	m	class:arm_compute::CLLocallyConnectedMatrixMultiplyKernel
_input0	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	/^    const IGCTensor *_input0;$/;"	m	class:arm_compute::GCGEMMMatrixMultiplyKernel
_input0	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    const ITensor *_input0;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_input0	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^    const ITensor *_input0;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyKernel
_input0	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^    const ITensor *_input0;$/;"	m	class:arm_compute::NEGEMMMatrixMultiplyKernel
_input0	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    const ITensor                      *_input0;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
_input0	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	/^    const ITensor *_input0;$/;"	m	class:arm_compute::NELocallyConnectedMatrixMultiplyKernel
_input0	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLTensor                        _input0;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_input1	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	/^    const ICLTensor *_input1; \/**< Source tensor 1. *\/$/;"	m	class:arm_compute::CLAbsoluteDifferenceKernel
_input1	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^    const ICLTensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::CLArithmeticAdditionKernel
_input1	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	/^    const ICLTensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::CLArithmeticSubtractionKernel
_input1	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	/^    const ICLTensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::CLBitwiseAndKernel
_input1	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	/^    const ICLTensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::CLBitwiseOrKernel
_input1	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	/^    const ICLTensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::CLBitwiseXorKernel
_input1	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	/^    const ICLTensor *_input1;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyKernel
_input1	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^    const ICLTensor *_input1;$/;"	m	class:arm_compute::CLGEMMMatrixMultiplyKernel
_input1	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    const ICLTensor *_input1;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
_input1	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    const ICLImage *_input1;          \/**< Source image - Gx component *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_input1	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	/^    const ICLTensor *_input1;$/;"	m	class:arm_compute::CLLocallyConnectedMatrixMultiplyKernel
_input1	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^    const ICLTensor *_input1;$/;"	m	class:arm_compute::CLPixelWiseMultiplicationKernel
_input1	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	/^    const IGCTensor *_input1; \/**< Source tensor 1. *\/$/;"	m	class:arm_compute::GCAbsoluteDifferenceKernel
_input1	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	/^    const IGCTensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::GCArithmeticAdditionKernel
_input1	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	/^    const IGCTensor *_input1;$/;"	m	class:arm_compute::GCGEMMMatrixMultiplyKernel
_input1	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	/^    const IGCTensor *_input1;$/;"	m	class:arm_compute::GCPixelWiseMultiplicationKernel
_input1	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	/^    const ITensor   *_input1;$/;"	m	class:arm_compute::NEAbsoluteDifferenceKernel
_input1	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NEArithmeticAdditionKernel
_input1	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NEArithmeticSubtractionKernel
_input1	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	/^    const ITensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::NEBitwiseAndKernel
_input1	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	/^    const ITensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::NEBitwiseOrKernel
_input1	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	/^    const ITensor *_input1; \/**< Source tensor 1 *\/$/;"	m	class:arm_compute::NEBitwiseXorKernel
_input1	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_input1	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyKernel
_input1	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NEGEMMMatrixMultiplyKernel
_input1	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    const ITensor                      *_input1;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
_input1	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    const IImage *_input1;          \/**< Source image - Gx component *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_input1	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NELocallyConnectedMatrixMultiplyKernel
_input1	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    const ITensor *_input1;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_input1	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLTensor                        _input1;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_input2	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	/^    const ICLTensor *_input2; \/**< Source tensor 2. *\/$/;"	m	class:arm_compute::CLAbsoluteDifferenceKernel
_input2	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^    const ICLTensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::CLArithmeticAdditionKernel
_input2	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	/^    const ICLTensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::CLArithmeticSubtractionKernel
_input2	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	/^    const ICLTensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::CLBitwiseAndKernel
_input2	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	/^    const ICLTensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::CLBitwiseOrKernel
_input2	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	/^    const ICLTensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::CLBitwiseXorKernel
_input2	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    const ICLImage *_input2;          \/**< Source image - Gy component *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_input2	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^    const ICLTensor *_input2;$/;"	m	class:arm_compute::CLPixelWiseMultiplicationKernel
_input2	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	/^    const IGCTensor *_input2; \/**< Source tensor 2. *\/$/;"	m	class:arm_compute::GCAbsoluteDifferenceKernel
_input2	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	/^    const IGCTensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::GCArithmeticAdditionKernel
_input2	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	/^    const IGCTensor *_input2;$/;"	m	class:arm_compute::GCPixelWiseMultiplicationKernel
_input2	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	/^    const ITensor   *_input2;$/;"	m	class:arm_compute::NEAbsoluteDifferenceKernel
_input2	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^    const ITensor *_input2;$/;"	m	class:arm_compute::NEArithmeticAdditionKernel
_input2	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	/^    const ITensor *_input2;$/;"	m	class:arm_compute::NEArithmeticSubtractionKernel
_input2	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	/^    const ITensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::NEBitwiseAndKernel
_input2	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	/^    const ITensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::NEBitwiseOrKernel
_input2	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	/^    const ITensor *_input2; \/**< Source tensor 2 *\/$/;"	m	class:arm_compute::NEBitwiseXorKernel
_input2	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    const IImage *_input2;          \/**< Source image - Gy component *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_input2	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    const ITensor *_input2;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_input_batch_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _input_col_stride, _input_row_stride, _input_batch_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_input_border_handler	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^    CLFillBorderKernel             _input_border_handler;$/;"	m	class:arm_compute::CLDirectConvolutionLayer
_input_border_handler	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    NEFillBorderKernel                        _input_border_handler;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_input_col_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _input_col_stride, _input_row_stride, _input_batch_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_input_edges	arm_compute/graph/INode.h	/^    std::vector<EdgeID>   _input_edges;     \/**< Inputs edge set *\/$/;"	m	class:arm_compute::graph::INode
_input_gate_bias	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_input_gate_bias;$/;"	m	class:arm_compute::LSTMParams
_input_gate_out1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _input_gate_out1;$/;"	m	class:arm_compute::CLLSTMLayer
_input_gate_out2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _input_gate_out2;$/;"	m	class:arm_compute::CLLSTMLayer
_input_gate_out3	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _input_gate_out3;$/;"	m	class:arm_compute::CLLSTMLayer
_input_gate_out4	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _input_gate_out4;$/;"	m	class:arm_compute::CLLSTMLayer
_input_gate_out5	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _input_gate_out5;$/;"	m	class:arm_compute::CLLSTMLayer
_input_gate_out6	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _input_gate_out6;$/;"	m	class:arm_compute::CLLSTMLayer
_input_im2col_kernel	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLIm2ColKernel                         _input_im2col_kernel;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_input_im2col_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCIm2ColKernel                   _input_im2col_kernel;$/;"	m	class:arm_compute::GCConvolutionLayer
_input_im2col_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEIm2ColKernel                                      _input_im2col_kernel;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_input_im2col_kernel	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    NEIm2ColKernel                         _input_im2col_kernel;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_input_im2col_reshaped	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLTensor                               _input_im2col_reshaped;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_input_im2col_reshaped	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor _input_im2col_reshaped;$/;"	m	class:arm_compute::GCConvolutionLayer
_input_im2col_reshaped	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _input_im2col_reshaped;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_input_im2col_reshaped	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    Tensor                                 _input_im2col_reshaped;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_input_interleave_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEGEMMInterleave4x4Kernel                           _input_interleave_kernel;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_input_interleaved_reshaped	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor _input_interleaved_reshaped;$/;"	m	class:arm_compute::GCConvolutionLayer
_input_interleaved_reshaped	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _input_interleaved_reshaped;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_input_magnitude	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    const ICLTensor *_input_magnitude;$/;"	m	class:arm_compute::CLHOGOrientationBinningKernel
_input_magnitude	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    const ITensor *_input_magnitude;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_input_new	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    const ITensor              *_input_new;$/;"	m	class:arm_compute::NELKTrackerKernel
_input_nhwc	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _input_nhwc;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_input_nhwc	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _input_nhwc;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_input_old	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    const ITensor              *_input_old;$/;"	m	class:arm_compute::NELKTrackerKernel
_input_output	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	/^    IDetectionWindowArray *_input_output;$/;"	m	class:arm_compute::CPPDetectionWindowNonMaximaSuppressionKernel
_input_phase	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    const ICLTensor *_input_phase;$/;"	m	class:arm_compute::CLHOGOrientationBinningKernel
_input_phase	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    const ITensor *_input_phase;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_input_reshaped	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLTensor                                  _input_reshaped;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_input_reshaped	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _input_reshaped;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_input_row_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _input_col_stride, _input_row_stride, _input_batch_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_input_squared	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    const ITensor         *_input_squared;$/;"	m	class:arm_compute::NENormalizationLayerKernel
_input_squared	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^    Tensor                          _input_squared;   \/**< The intermediate buffer which stores results of squaring input *\/$/;"	m	class:arm_compute::NENormalizationLayer
_input_to_input_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_input_to_input_weights;$/;"	m	class:arm_compute::LSTMParams
_input_transform	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLWinogradInputTransform        _input_transform;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_input_weights_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _input_weights_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_input_workspace	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _input_workspace;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_input_x	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    const ICLTensor *_input_x;     \/**< X input (X output of the horizontal pass) *\/$/;"	m	class:arm_compute::CLSobel5x5VertKernel
_input_x	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    const ICLTensor *_input_x;     \/**< X input (X output of the horizontal pass) *\/$/;"	m	class:arm_compute::CLSobel7x7VertKernel
_input_x	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    ITensor *_input_x;     \/**< X input (X output of the hor pass) *\/$/;"	m	class:arm_compute::NESobel5x5VertKernel
_input_x	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    const ITensor *_input_x;     \/**< X input (X output of the hor pass) *\/$/;"	m	class:arm_compute::NESobel7x7VertKernel
_input_y	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    const ICLTensor *_input_y;     \/**< Y input (Y output of the horizontal pass) *\/$/;"	m	class:arm_compute::CLSobel5x5VertKernel
_input_y	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    const ICLTensor *_input_y;     \/**< Y input (Y output of the horizontal pass) *\/$/;"	m	class:arm_compute::CLSobel7x7VertKernel
_input_y	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    ITensor *_input_y;     \/**< Y input (Y output of the hor pass) *\/$/;"	m	class:arm_compute::NESobel5x5VertKernel
_input_y	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    const ITensor *_input_y;     \/**< Y input (Y output of the hor pass) *\/$/;"	m	class:arm_compute::NESobel7x7VertKernel
_inputs_vector	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^    std::vector<ICLTensor *>                         _inputs_vector;$/;"	m	class:arm_compute::CLDepthConcatenateLayer
_inputs_vector	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^    std::vector<ITensor *>                           _inputs_vector;$/;"	m	class:arm_compute::NEDepthConcatenateLayer
_instrument_8h	documentation/_instrument_8h.js	/^var _instrument_8h =$/;"	v
_instruments_8cpp	documentation/_instruments_8cpp.js	/^var _instruments_8cpp =$/;"	v
_instruments_8h	documentation/_instruments_8h.js	/^var _instruments_8h =$/;"	v
_integral_hor	arm_compute/runtime/CL/functions/CLIntegralImage.h	/^    CLIntegralImageHorKernel  _integral_hor;  \/**< Integral Image Horizontal kernel *\/$/;"	m	class:arm_compute::CLIntegralImage
_integral_image_8h	documentation/_integral_image_8h.js	/^var _integral_image_8h =$/;"	v
_integral_vert	arm_compute/runtime/CL/functions/CLIntegralImage.h	/^    CLIntegralImageVertKernel _integral_vert; \/**< Integral Image Vertical kernel *\/$/;"	m	class:arm_compute::CLIntegralImage
_interceptor	tests/framework/instruments/SchedulerTimer.h	/^    std::shared_ptr<IScheduler>                  _interceptor;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
_interleave4x4_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NEGEMMInterleave4x4Kernel           _interleave4x4_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_interleave4x4_output	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    Tensor                              _interleave4x4_output;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_interleave_kernel	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLGEMMInterleave4x4Kernel  _interleave_kernel;$/;"	m	class:arm_compute::CLGEMM
_interleave_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCGEMMInterleave4x4Kernel  _interleave_kernel;$/;"	m	class:arm_compute::GCGEMM
_interleave_kernel	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    NEGEMMInterleave4x4Kernel  _interleave_kernel;$/;"	m	class:arm_compute::NEGEMM
_is_a_reshaped	arm_compute/core/Types.h	/^    const bool      _is_a_reshaped;$/;"	m	class:arm_compute::HOGNormType::GEMMInfo
_is_activationlayer_enabled	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^    bool _is_activationlayer_enabled;$/;"	m	class:arm_compute::CLDirectConvolutionLayer
_is_activationlayer_enabled	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    bool _is_activationlayer_enabled;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_is_activationlayer_enabled	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    bool                            _is_activationlayer_enabled;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_is_activationlayer_enabled	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    bool _is_activationlayer_enabled;$/;"	m	class:arm_compute::GCConvolutionLayer
_is_activationlayer_enabled	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    bool                                      _is_activationlayer_enabled;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_is_activationlayer_enabled	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _is_activationlayer_enabled;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_is_activationlayer_enabled	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    bool           _is_activationlayer_enabled;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_is_b_reshaped	arm_compute/core/Types.h	/^    const bool      _is_b_reshaped;$/;"	m	class:arm_compute::HOGNormType::GEMMInfo
_is_batched_fc_layer	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    bool                                _is_batched_fc_layer;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_is_batched_fc_layer	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    bool                     _is_batched_fc_layer;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
_is_binary	arm_compute/core/CL/CLKernelLibrary.h	/^    bool                       _is_binary; \/**< Create program from binary? *\/$/;"	m	class:arm_compute::Program
_is_enabled	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^    bool         _is_enabled;$/;"	m	class:arm_compute::graph::final
_is_fc_after_conv	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    bool                                                _is_fc_after_conv;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_is_fc_after_conv	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    bool                                _is_fc_after_conv;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_is_finalized	arm_compute/runtime/MemoryManagerOnDemand.h	/^    bool                              _is_finalized; \/**< Flag that notes if the memory manager has been finalized *\/$/;"	m	class:arm_compute::MemoryManagerOnDemand
_is_first_run	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    bool                                      _is_first_run;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_is_first_run	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    bool                               _is_first_run;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_is_first_run	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    bool                                   _is_first_run;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_is_first_run	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    bool _is_first_run;$/;"	m	class:arm_compute::GCConvolutionLayer
_is_first_run	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    bool                       _is_first_run;$/;"	m	class:arm_compute::GCGEMM
_is_first_run	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _is_first_run;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_is_first_run	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _is_first_run;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_is_first_run	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    bool                       _is_first_run;$/;"	m	class:arm_compute::NEGEMM
_is_first_run	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    bool                               _is_first_run;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_is_first_run	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    bool                                   _is_first_run;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_is_fixed_point	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    bool                                      _is_fixed_point;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_is_fully_connected_convolution	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _is_fully_connected_convolution;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_is_global_pooling	arm_compute/core/Types.h	/^    bool          _is_global_pooling;$/;"	m	class:arm_compute::HOGNormType::PoolingLayerInfo
_is_global_pooling_layer	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^    bool                 _is_global_pooling_layer;$/;"	m	class:arm_compute::NEPoolingLayer
_is_in_map	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^    bool             _is_in_map;$/;"	m	class:arm_compute::CLNormalizationLayerKernel
_is_initialised	arm_compute/runtime/CL/CLScheduler.h	/^    bool             _is_initialised;$/;"	m	class:arm_compute::CLScheduler
_is_interleaved	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _is_interleaved;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_is_interleaved_transposed	arm_compute/runtime/CL/functions/CLGEMM.h	/^    bool                       _is_interleaved_transposed;$/;"	m	class:arm_compute::CLGEMM
_is_interleaved_transposed	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    bool                               _is_interleaved_transposed;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_is_interleaved_transposed	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    bool                       _is_interleaved_transposed;$/;"	m	class:arm_compute::GCGEMM
_is_nchw	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _is_nchw;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_is_optimized	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _is_optimized;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_is_parallelizable	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    bool         _is_parallelizable;$/;"	m	class:arm_compute::NEChannelCombineKernel
_is_parallelizable	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^_is_parallelizable(true)$/;"	f
_is_prepared	arm_compute/runtime/CL/functions/CLGEMM.h	/^    bool                       _is_prepared;$/;"	m	class:arm_compute::CLGEMM
_is_prepared	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    bool _is_prepared;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_is_prepared	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    bool                            _is_prepared;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_is_quantized	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    bool                                      _is_quantized;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_is_quantized	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    bool                                                _is_quantized;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_is_quantized	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    bool _is_quantized;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_is_quantized	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _is_quantized;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_is_quantized	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    bool                                      _is_quantized;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_is_quantized	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _is_quantized;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_is_quantized	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    bool             _is_quantized = false;$/;"	m	class:arm_compute::test::validation::ConvolutionValidationGenericFixture
_is_reshaped	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    bool           _is_reshaped;$/;"	m	class:arm_compute::INEGEMMLowpReductionKernel
_is_resizable	arm_compute/core/TensorInfo.h	/^    bool             _is_resizable;$/;"	m	class:arm_compute::final
_is_scaled	arm_compute/core/Types.h	/^    bool     _is_scaled;$/;"	m	class:arm_compute::HOGNormType::NormalizationLayerInfo
_is_separable	arm_compute/runtime/CL/functions/CLConvolution.h	/^    bool                                          _is_separable;   \/**< true if the convolution can be separated *\/$/;"	m	class:arm_compute::CLConvolutionSquare
_is_separable	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    bool                                          _is_separable;   \/**< true if the convolution can be separated *\/$/;"	m	class:arm_compute::NEConvolutionSquare
_is_square	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    bool             _is_square;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_is_transposed_0	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    bool           _is_transposed_0;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_is_transposed_1	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    bool           _is_transposed_1;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_is_used	arm_compute/core/ITensor.h	/^    mutable bool _is_used = { true }; \/**< Flag that marks if the tensor is used or not *\/$/;"	m	class:arm_compute::ITensor
_it	arm_compute/core/utils/misc/Iterable.h	/^    T &_it;$/;"	m	class:arm_compute::utils::iterable::reverse_iterable
_iter1	tests/framework/datasets/CartesianProductDataset.h	/^        iter1_type     _iter1;$/;"	m	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
_iter1	tests/framework/datasets/JoinDataset.h	/^        iter1_type _iter1;$/;"	m	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
_iter1	tests/framework/datasets/ZipDataset.h	/^        iter1_type _iter1;$/;"	m	struct:arm_compute::test::framework::dataset::ZipDataset::iterator
_iter2	tests/framework/datasets/CartesianProductDataset.h	/^        iter2_type     _iter2;$/;"	m	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
_iter2	tests/framework/datasets/JoinDataset.h	/^        iter2_type _iter2;$/;"	m	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
_iter2	tests/framework/datasets/ZipDataset.h	/^        iter2_type _iter2;$/;"	m	struct:arm_compute::test::framework::dataset::ZipDataset::iterator
_iterable_8h	documentation/_iterable_8h.js	/^var _iterable_8h =$/;"	v
_iterator	tests/framework/datasets/ContainerDataset.h	/^        container_const_iterator _iterator;$/;"	m	struct:arm_compute::test::framework::dataset::ContainerDataset::iterator
_iterator	tests/framework/datasets/InitializerListDataset.h	/^        data_const_iterator _iterator;$/;"	m	struct:arm_compute::test::framework::dataset::final::iterator
_iterator	utils/GraphUtils.h	/^    unsigned int      _iterator;$/;"	m	class:arm_compute::graph_utils::PPMWriter
_iterator	utils/GraphUtils.h	/^    unsigned int _iterator;$/;"	m	class:arm_compute::graph_utils::final
_join_dataset_8h	documentation/_join_dataset_8h.js	/^var _join_dataset_8h =$/;"	v
_k	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    int32_t        _k;$/;"	m	class:arm_compute::INEGEMMLowpReductionKernel
_k	arm_compute/core/Types.h	/^    const int _k;$/;"	m	class:arm_compute::HOGNormType::final
_k0	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int _k0 = 0, _x0 = 0, _multi = 0;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_k_block	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    unsigned int _k_block = 0;$/;"	m	class:arm_gemm::GemmInterleaved
_k_offset	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    int32_t        _k_offset;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_kappa	arm_compute/core/Types.h	/^    float    _kappa;$/;"	m	class:arm_compute::HOGNormType::NormalizationLayerInfo
_kernel	arm_compute/core/CL/CLKernelLibrary.h	/^    cl::Kernel  _kernel; \/**< OpenCL Kernel *\/$/;"	m	class:arm_compute::Kernel
_kernel	arm_compute/core/CL/ICLKernel.h	/^    cl::Kernel  _kernel;             \/**< OpenCL kernel to run *\/$/;"	m	class:arm_compute::ICLKernel
_kernel	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^    GCKernel      _kernel;   \/**< GLES kernel to run *\/$/;"	m	class:arm_compute::IGCKernel
_kernel	arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h	/^    T* _kernel;$/;"	m	class:arm_compute::final
_kernel	arm_compute/runtime/CL/ICLSimpleFunction.h	/^    std::unique_ptr<ICLKernel> _kernel;         \/**< Kernel to run *\/$/;"	m	class:arm_compute::ICLSimpleFunction
_kernel	arm_compute/runtime/CL/functions/CLConvolution.h	/^    CLConvolutionKernel<matrix_size>              _kernel;         \/**< kernel for non-separated convolution **\/$/;"	m	class:arm_compute::CLConvolutionSquare
_kernel	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    std::unique_ptr<ICLDepthwiseConvolutionLayer3x3Kernel> _kernel;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3
_kernel	arm_compute/runtime/CL/functions/CLHistogram.h	/^    CLHistogramKernel       _kernel;        \/**< kernel to run *\/$/;"	m	class:arm_compute::CLHistogram
_kernel	arm_compute/runtime/CPP/ICPPSimpleFunction.h	/^    std::unique_ptr<ICPPKernel> _kernel; \/**< Kernel to run *\/$/;"	m	class:arm_compute::ICPPSimpleFunction
_kernel	arm_compute/runtime/GLES_COMPUTE/IGCSimpleFunction.h	/^    std::unique_ptr<IGCKernel> _kernel;         \/**< Kernel to run *\/$/;"	m	class:arm_compute::IGCSimpleFunction
_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	/^    std::unique_ptr<IGCKernel> _kernel;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3
_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	/^    std::unique_ptr<IGCKernel> _kernel;$/;"	m	class:arm_compute::GCDirectConvolutionLayer
_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	/^    std::unique_ptr<IGCKernel> _kernel;$/;"	m	class:arm_compute::GCPoolingLayer
_kernel	arm_compute/runtime/NEON/INESimpleFunction.h	/^    std::unique_ptr<INEKernel> _kernel;         \/**< Kernel to run *\/$/;"	m	class:arm_compute::INESimpleFunction
_kernel	arm_compute/runtime/NEON/functions/NEConvertFullyConnectedWeights.h	/^    NEConvertFullyConnectedWeightsKernel _kernel;$/;"	m	class:arm_compute::NEConvertFullyConnectedWeights
_kernel	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    NEConvolutionKernel<matrix_size>              _kernel;         \/**< kernel for non-separated convolution **\/$/;"	m	class:arm_compute::NEConvolutionSquare
_kernel	arm_compute/runtime/NEON/functions/NEDerivative.h	/^    NEDerivativeKernel _kernel;         \/**< Derivative kernel *\/$/;"	m	class:arm_compute::NEDerivative
_kernel	arm_compute/runtime/NEON/functions/NEIm2Col.h	/^    NEIm2ColKernel _kernel;$/;"	m	class:arm_compute::NEIm2Col
_kernel_border	arm_compute/runtime/CL/functions/CLHistogram.h	/^    CLHistogramBorderKernel _kernel_border; \/**< Border kernel to run *\/$/;"	m	class:arm_compute::CLHistogram
_kernel_dims	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    Size2D         _kernel_dims;$/;"	m	class:arm_compute::CLIm2ColKernel
_kernel_dims	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    std::pair<unsigned int, unsigned int> _kernel_dims;$/;"	m	class:arm_compute::GCIm2ColKernel
_kernel_dims	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    Size2D                     _kernel_dims;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_kernel_event	arm_compute/runtime/CL/CLTuner.h	/^    cl::Event        _kernel_event;$/;"	m	class:arm_compute::CLTuner
_kernel_height	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    unsigned int  _kernel_height;$/;"	m	class:arm_compute::NEIm2ColKernel
_kernel_height	arm_compute/core/Types.h	/^    const unsigned int _kernel_height;$/;"	m	class:arm_compute::HOGNormType::WeightsInfo
_kernel_hor	arm_compute/runtime/CL/functions/CLConvolution.h	/^    CLSeparableConvolutionHorKernel<matrix_size>  _kernel_hor;     \/**< kernel for horizontal pass of separated convolution *\/$/;"	m	class:arm_compute::CLConvolutionSquare
_kernel_hor	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^    CLGaussian5x5HorKernel  _kernel_hor;     \/**< Horizontal pass kernel *\/$/;"	m	class:arm_compute::CLGaussian5x5
_kernel_hor	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    NESeparableConvolutionHorKernel<matrix_size>  _kernel_hor;     \/**< kernel for horizontal pass of separated convolution *\/$/;"	m	class:arm_compute::NEConvolutionSquare
_kernel_hor	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^    NEGaussian5x5HorKernel  _kernel_hor;     \/**< kernel for horizontal pass *\/$/;"	m	class:arm_compute::NEGaussian5x5
_kernel_path	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string _kernel_path;                                            \/**< Path to the kernels folder. *\/$/;"	m	class:arm_compute::CLKernelLibrary
_kernel_program_map	arm_compute/core/CL/CLKernelLibrary.h	/^    static const std::map<std::string, std::string> _kernel_program_map; \/**< Map that associates kernel names with programs. *\/$/;"	m	class:arm_compute::CLKernelLibrary
_kernel_program_map	src/core/CL/CLKernelLibrary.cpp	/^const std::map<std::string, std::string> CLKernelLibrary::_kernel_program_map =$/;"	m	class:CLKernelLibrary	file:
_kernel_size	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    unsigned int   _kernel_size;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_kernel_storage	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _kernel_storage;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_kernel_tracker	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    std::unique_ptr<NELKTrackerKernel[]> _kernel_tracker;$/;"	m	class:arm_compute::NEOpticalFlow
_kernel_vert	arm_compute/runtime/CL/functions/CLConvolution.h	/^    CLSeparableConvolutionVertKernel<matrix_size> _kernel_vert;    \/**< kernel for vertical pass of separated convolution *\/$/;"	m	class:arm_compute::CLConvolutionSquare
_kernel_vert	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^    CLGaussian5x5VertKernel _kernel_vert;    \/**< Vertical pass kernel *\/$/;"	m	class:arm_compute::CLGaussian5x5
_kernel_vert	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    NESeparableConvolutionVertKernel<matrix_size> _kernel_vert;    \/**< kernel for vertical pass of separated convolution *\/$/;"	m	class:arm_compute::NEConvolutionSquare
_kernel_vert	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^    NEGaussian5x5VertKernel _kernel_vert;    \/**< kernel for vertical pass *\/$/;"	m	class:arm_compute::NEGaussian5x5
_kernel_width	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    unsigned int  _kernel_width;$/;"	m	class:arm_compute::NEIm2ColKernel
_kernel_width	arm_compute/core/Types.h	/^    const unsigned int _kernel_width;$/;"	m	class:arm_compute::HOGNormType::WeightsInfo
_kernels	tests/framework/instruments/OpenCLTimer.h	/^    std::list<kernel_info>                          _kernels;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
_kernels	tests/framework/instruments/SchedulerTimer.cpp	/^    std::list<SchedulerTimer::kernel_info> &_kernels;$/;"	m	class:arm_compute::test::framework::final	file:
_kernels	tests/framework/instruments/SchedulerTimer.h	/^    std::list<kernel_info>                       _kernels;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
_l1_list_counter	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _visited, _recorded, _l1_list_counter, _l1_stack; \/**< Temporary tensors *\/$/;"	m	class:arm_compute::CLCannyEdge
_l1_stack	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_l1_stack;         \/**< L1 hysteris stack *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_l1_stack	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _visited, _recorded, _l1_list_counter, _l1_stack; \/**< Temporary tensors *\/$/;"	m	class:arm_compute::CLCannyEdge
_l1_stack_counter	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_l1_stack_counter; \/**< L1 hysteris stack counter *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_l2_hyst_threshold	arm_compute/core/HOGInfo.h	/^    float       _l2_hyst_threshold;$/;"	m	class:arm_compute::HOGInfo
_l2_hyst_threshold	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    float          _l2_hyst_threshold;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
_l2_load_offset	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^    int _l2_load_offset;$/;"	m	class:arm_compute::CLGaussianPyramidHorKernel
_l2_load_offset	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^    int _l2_load_offset;$/;"	m	class:arm_compute::NEGaussianPyramidHorKernel
_l2_normalize_layer_8h	documentation/_l2_normalize_layer_8h.js	/^var _l2_normalize_layer_8h =$/;"	v
_l_s_t_m_layer_8cpp	documentation/_l_s_t_m_layer_8cpp.js	/^var _l_s_t_m_layer_8cpp =$/;"	v
_labels	utils/GraphUtils.h	/^    std::vector<std::string> _labels;$/;"	m	class:arm_compute::graph_utils::final
_lda	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _lda=0;$/;"	m	class:arm_gemm::GemmCommon
_ldb	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _ldb=0;$/;"	m	class:arm_gemm::GemmCommon
_ldc	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    int _ldc=0;$/;"	m	class:arm_gemm::GemmCommon
_left_padding	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	/^    int           _left_padding;$/;"	m	class:arm_compute::GCTensorShiftKernel
_left_right	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    int              _left_right;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
_left_right	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    int              _left_right;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
_left_right	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    int                  _left_right;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
_level	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    unsigned int                _level;$/;"	m	class:arm_compute::NELKTrackerKernel
_library_path	tests/AssetsLibrary.h	/^    const std::string               _library_path;$/;"	m	class:arm_compute::test::final
_lifetime_mgr	arm_compute/runtime/MemoryManagerOnDemand.h	/^    std::shared_ptr<ILifetimeManager> _lifetime_mgr; \/**< Lifetime manager *\/$/;"	m	class:arm_compute::MemoryManagerOnDemand
_line	arm_compute/core/Validate.h	/^    const int            _line;$/;"	m	class:arm_compute::detail::compare_dimension
_linearize_input	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    bool                                _linearize_input;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_local_hist	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^    uint32_t                     *_local_hist;$/;"	m	class:arm_compute::NEHistogramKernel
_local_hist	arm_compute/runtime/NEON/functions/NEHistogram.h	/^    std::unique_ptr<uint32_t[]> _local_hist;$/;"	m	class:arm_compute::NEHistogram
_local_hist_size	arm_compute/runtime/NEON/functions/NEHistogram.h	/^    size_t                      _local_hist_size;$/;"	m	class:arm_compute::NEHistogram
_locally_connected_8h	documentation/_locally_connected_8h.js	/^var _locally_connected_8h =$/;"	v
_lock	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    std::mutex _lock = {};$/;"	m	class:arm_gemm::Buffer
_log_8h	documentation/_log_8h.js	/^var _log_8h =$/;"	v
_log_level	arm_compute/core/utils/logging/Logger.h	/^    LogLevel                                 _log_level;$/;"	m	class:arm_compute::logging::Logger
_loggers	arm_compute/core/utils/logging/LoggerRegistry.h	/^    std::unordered_map<std::string, std::shared_ptr<Logger>> _loggers;$/;"	m	class:arm_compute::logging::final
_lower	utils/GraphUtils.h	/^    PixelValue                      _lower;$/;"	m	class:arm_compute::graph_utils::final
_lower_thr	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    int32_t          _lower_thr;        \/**< Lower threshold used for the hysteresis. *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_lower_thr	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    int32_t                  _lower_thr; \/**< Lower threshold used for the hysteresis *\/$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
_lut	arm_compute/core/NEON/kernels/NETableLookupKernel.h	/^    const ILut         *_lut;$/;"	m	class:arm_compute::NETableLookupKernel
_lut	tests/CL/CLLutAccessor.h	/^    CLLut &_lut;$/;"	m	class:arm_compute::test::CLLutAccessor
_lut	tests/NEON/LutAccessor.h	/^    ILut &_lut;$/;"	m	class:arm_compute::test::LutAccessor
_lut	tests/RawLutAccessor.h	/^    std::map<T, T> &_lut;$/;"	m	class:arm_compute::test::RawLutAccessor
_lut_index	arm_compute/core/NEON/kernels/NEChannelExtractKernel.h	/^    unsigned int           _lut_index;$/;"	m	class:arm_compute::NEChannelExtractKernel
_lws	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    gles::NDRange    _lws;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_lws	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    gles::NDRange    _lws;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_lws	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	/^    gles::NDRange    _lws;$/;"	m	class:arm_compute::GCGEMMMatrixAccumulateBiasesKernel
_lws	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	/^    gles::NDRange _lws;$/;"	m	class:arm_compute::GCTensorShiftKernel
_lws_hint	arm_compute/core/CL/ICLKernel.h	/^    cl::NDRange _lws_hint;           \/**< Local workgroup size hint for the OpenCL kernel *\/$/;"	m	class:arm_compute::ICLKernel
_lws_hint	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^    gles::NDRange _lws_hint; \/**< Local workgroup size hint for the GLES kernel *\/$/;"	m	class:arm_compute::IGCKernel
_lws_table	arm_compute/runtime/CL/CLTuner.h	/^    std::unordered_map<std::string, cl::NDRange> _lws_table;$/;"	m	class:arm_compute::CLTuner
_m	arm_compute/core/Types.h	/^    const int _m;$/;"	m	class:arm_compute::HOGNormType::final
_m	src/runtime/CPP/CPPScheduler.cpp	/^    std::mutex              _m;$/;"	m	class:arm_compute::Thread	file:
_m	support/Semaphore.h	/^    arm_compute::Mutex      _m;$/;"	m	class:arm_compute::Semaphore
_ma_kernel	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLGEMMMatrixAdditionKernel _ma_kernel;$/;"	m	class:arm_compute::CLGEMM
_ma_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCGEMMMatrixAdditionKernel _ma_kernel;$/;"	m	class:arm_compute::GCGEMM
_ma_kernel	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    NEGEMMMatrixAdditionKernel _ma_kernel;$/;"	m	class:arm_compute::NEGEMM
_mag	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _mag;                                             \/**< Source tensor - Magnitude. *\/$/;"	m	class:arm_compute::CLCannyEdge
_mag	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLTensor                      _mag;$/;"	m	class:arm_compute::CLHOGDescriptor
_mag	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    CLTensor                                                      _mag;$/;"	m	class:arm_compute::CLHOGMultiDetection
_mag	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    Tensor                        _mag;$/;"	m	class:arm_compute::NEHOGDescriptor
_mag	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    Tensor                                                        _mag;$/;"	m	class:arm_compute::NEHOGMultiDetection
_mag_phase	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^    CLMagnitudePhaseKernel _mag_phase;$/;"	m	class:arm_compute::CLHOGGradient
_mag_phase	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^    std::unique_ptr<INEKernel> _mag_phase;$/;"	m	class:arm_compute::NEHOGGradient
_magnitude	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_magnitude; \/**< Destination tensor - Magnitude *\/$/;"	m	class:arm_compute::CLGradientKernel
_magnitude	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    const ICLTensor *_magnitude; \/**< Source tensor - Magnitude. *\/$/;"	m	class:arm_compute::CLEdgeNonMaxSuppressionKernel
_magnitude	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    ICLTensor       *_magnitude; \/**< Output - Magnitude. *\/$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
_magnitude	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    ITensor          *_magnitude; \/**< Destination tensor - Magnitude *\/$/;"	m	class:arm_compute::NEGradientKernel
_magnitude	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    const ITensor           *_magnitude; \/**< Source tensor - Magnitude *\/$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
_magnitude	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    ITensor                  *_magnitude; \/**< Output - Magnitude *\/$/;"	m	class:arm_compute::NEMagnitudePhaseFP16Kernel
_magnitude	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    ITensor                  *_magnitude; \/**< Output - Magnitude *\/$/;"	m	class:arm_compute::NEMagnitudePhaseKernel
_magnitude	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    Tensor                        _magnitude;           \/**< Source tensor - Magnitude *\/$/;"	m	class:arm_compute::NECannyEdge
_magnitude_8h	documentation/_magnitude_8h.js	/^var _magnitude_8h =$/;"	v
_mali_counter_8cpp	documentation/_mali_counter_8cpp.js	/^var _mali_counter_8cpp =$/;"	v
_mali_counter_8cpp.xhtml#a736088bbd41fd7407ac9fc811864db68	documentation/navtreeindex8.js	/^"_mali_counter_8cpp.xhtml#a736088bbd41fd7407ac9fc811864db68":[6,0,4,2,2,7,4],$/;"	p	class:NAVTREEINDEX8
_manager	arm_compute/graph/frontend/Stream.h	/^    GraphManager _manager; \/**< Graph manager *\/$/;"	m	class:arm_compute::graph::frontend::final
_map_histogram_kernel	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    CLTableLookupKernel     _map_histogram_kernel;    \/**< Kernel that maps the input to output using the lut. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
_map_histogram_kernel	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    NETableLookupKernel            _map_histogram_kernel;    \/**< Kernel that maps the input to output using the lut. *\/$/;"	m	class:arm_compute::NEEqualizeHistogram
_map_x	arm_compute/core/CL/kernels/CLRemapKernel.h	/^    const ICLTensor *_map_x;$/;"	m	class:arm_compute::CLRemapKernel
_map_x	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    const ITensor *_map_x;  \/**< Input remap x coordinates *\/$/;"	m	class:arm_compute::NERemapKernel
_map_y	arm_compute/core/CL/kernels/CLRemapKernel.h	/^    const ICLTensor *_map_y;$/;"	m	class:arm_compute::CLRemapKernel
_map_y	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    const ITensor *_map_y;  \/**< Input remap y coordinates *\/$/;"	m	class:arm_compute::NERemapKernel
_mapping	arm_compute/core/CL/ICLArray.h	/^    uint8_t *_mapping;$/;"	m	class:arm_compute::ICLArray
_mapping	arm_compute/core/CL/ICLDistribution1D.h	/^    uint32_t *_mapping; \/**< The distribution data. *\/$/;"	m	class:arm_compute::ICLDistribution1D
_mapping	arm_compute/core/CL/ICLHOG.h	/^    uint8_t *_mapping;$/;"	m	class:arm_compute::ICLHOG
_mapping	arm_compute/core/CL/ICLLut.h	/^    uint8_t *_mapping;$/;"	m	class:arm_compute::ICLLut
_mapping	arm_compute/core/CL/ICLTensor.h	/^    uint8_t *_mapping;$/;"	m	class:arm_compute::ICLTensor
_mapping	arm_compute/core/GLES_COMPUTE/IGCTensor.h	/^    uint8_t *_mapping;$/;"	m	class:arm_compute::IGCTensor
_mapping	arm_compute/runtime/CL/CLLutAllocator.h	/^    uint8_t   *_mapping; \/**< Pointer to the CPU mapping of the OpenCL buffer. *\/$/;"	m	class:arm_compute::CLLutAllocator
_mapping	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void       *_mapping;$/;"	m	class:arm_compute::ICLMemoryRegion
_mapping	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    uint8_t                         *_mapping;                 \/**< Pointer to the CPU mapping of the OpenGL ES buffer. *\/$/;"	m	class:arm_compute::GCTensorAllocator
_mappings	arm_compute/runtime/MemoryGroupBase.h	/^    MemoryMappings                  _mappings;       \/**< Memory mappings of the group *\/$/;"	m	class:arm_compute::MemoryGroupBase
_mask	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^    IGCTensor       *_mask;$/;"	m	class:arm_compute::GCDropoutLayerKernel
_mask	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    const uint8_t          *_mask;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_matrix	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    const float   *_matrix;                \/**< The affine or perspective matrix. Must be 2x3 for warp affine or 3x3 for warp perspective of type float. *\/$/;"	m	class:arm_compute::INEWarpKernel
_matrix_base	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const T* const _matrix_base;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_matrix_row_stride	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int            _matrix_row_stride;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_matrix_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^                  _matrix_row_stride, _tiles_M, _tiles_N;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_matrix_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _matrix_stride, _matrix_row_stride;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_matrix_stride	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int            _matrix_stride;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_matrix_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _matrix_stride, _matrix_row_stride;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_matrix_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _matrix_stride,$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_max	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    ICLTensor       *_max;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_max	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    const ICLTensor *_max;$/;"	m	class:arm_compute::CLLogits1DShiftExpSumKernel
_max	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    const IGCTensor *_max;$/;"	m	class:arm_compute::GCLogits1DShiftExpSumKernel
_max	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    int                     _max;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_max	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    int                     _max;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_max	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    void                *_max;       \/**< Maximum value. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_max	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    void              *_max;   \/**< Maximum value. *\/$/;"	m	class:arm_compute::NEMinMaxKernel
_max	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    const ITensor         *_max;$/;"	m	class:arm_compute::NELogits1DSoftmaxKernel
_max	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    void                  *_max;                \/**< Maximum value. *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_max	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    CLTensor                       _max;$/;"	m	class:arm_compute::CLSoftmaxLayer
_max	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCTensor                    _max;$/;"	m	class:arm_compute::GCSoftmaxLayer
_max	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    Tensor                  _max;$/;"	m	class:arm_compute::NESoftmaxLayer
_max	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement *_max;$/;"	m	class:arm_compute::test::framework::InstrumentsStats
_max_count	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    uint32_t            *_max_count; \/**< Count of maximum value encounters. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_max_count	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    uint32_t              *_max_count;          \/**< Maximum value occurrences. *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_max_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCLogits1DMaxKernel         _max_kernel;$/;"	m	class:arm_compute::GCSoftmaxLayer
_max_kernel	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    NELogits1DMaxKernel     _max_kernel;$/;"	m	class:arm_compute::NESoftmaxLayer
_max_loc	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    ICoordinates2DArray *_max_loc;   \/**< Locations of maximum values. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_max_loc	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    CLCoordinates2DArray *_max_loc;             \/**< Maximum value occurrences  coordinates. *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_max_num_detection_windows	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _max_num_detection_windows;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_max_shift_exp_sum_kernel	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    CLLogits1DMaxShiftExpSumKernel _max_shift_exp_sum_kernel;$/;"	m	class:arm_compute::CLSoftmaxLayer
_max_size	arm_compute/core/IArray.h	/^    size_t _max_size;$/;"	m	class:arm_compute::IArray
_max_workgroup_size	arm_compute/core/CL/ICLKernel.h	/^    size_t      _max_workgroup_size; \/**< The maximum workgroup size for this kernel *\/$/;"	m	class:arm_compute::ICLKernel
_maximum	utils/GraphUtils.h	/^    unsigned int      _maximum;$/;"	m	class:arm_compute::graph_utils::PPMWriter
_maximum	utils/GraphUtils.h	/^    unsigned int _maximum;$/;"	m	class:arm_compute::graph_utils::final
_maxthreads	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    const int             _maxthreads;$/;"	m	class:arm_gemm::BufferManager
_maxthreads	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const unsigned int _maxthreads;$/;"	m	class:arm_gemm::GemmInterleaved
_maxusers	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    const int   _maxusers; \/\/ Maximum permissible threads.$/;"	m	class:arm_gemm::Buffer
_mean	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    const ICLTensor *_mean;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_mean	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    float          *_mean;$/;"	m	class:arm_compute::CLMeanStdDevKernel
_mean	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    const IGCTensor *_mean;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_mean	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^    const IGCTensor *_mean;$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayerKernel
_mean	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    const ITensor       *_mean;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_mean	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    float             *_mean;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_mean	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _mean;$/;"	m	class:arm_compute::graph::frontend::final
_mean	tests/framework/instruments/InstrumentsStats.h	/^    Measurement::Value _mean;$/;"	m	class:arm_compute::test::framework::InstrumentsStats
_mean	utils/GraphUtils.h	/^    std::array<float, 3> _mean;$/;"	m	class:arm_compute::graph_utils::CaffePreproccessor
_mean_std_dev_8h	documentation/_mean_std_dev_8h.js	/^var _mean_std_dev_8h =$/;"	v
_mean_stddev_kernel	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^    CLMeanStdDevKernel _mean_stddev_kernel; \/**< Kernel that standard deviation calculation. *\/$/;"	m	class:arm_compute::CLMeanStdDev
_mean_stddev_kernel	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^    NEMeanStdDevKernel _mean_stddev_kernel; \/**< Kernel that standard deviation calculation. *\/$/;"	m	class:arm_compute::NEMeanStdDev
_median	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement *_median;$/;"	m	class:arm_compute::test::framework::InstrumentsStats
_median3x3_8h	documentation/_median3x3_8h.js	/^var _median3x3_8h =$/;"	v
_mem	arm_compute/runtime/CL/CLDistribution1D.h	/^    cl::Buffer _mem;$/;"	m	class:arm_compute::CLDistribution1D
_mem	arm_compute/runtime/CL/CLMemoryRegion.h	/^    cl::Buffer  _mem;$/;"	m	class:arm_compute::ICLMemoryRegion
_mem	arm_compute/runtime/MemoryRegion.h	/^    std::shared_ptr<uint8_t> _mem;$/;"	m	class:arm_compute::final
_memory	arm_compute/runtime/CL/CLTensorAllocator.h	/^    CLMemory       _memory;                  \/**< OpenCL memory *\/$/;"	m	class:arm_compute::CLTensorAllocator
_memory	arm_compute/runtime/TensorAllocator.h	/^    Memory       _memory;                  \/**< CPU memory *\/$/;"	m	class:arm_compute::TensorAllocator
_memory_group	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLMemoryGroup                 _memory_group;                                    \/**< Function's memory group *\/$/;"	m	class:arm_compute::CLCannyEdge
_memory_group	arm_compute/runtime/CL/functions/CLConvolution.h	/^    CLMemoryGroup                                 _memory_group;   \/**< Function's memory group *\/$/;"	m	class:arm_compute::CLConvolutionSquare
_memory_group	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^    CLMemoryGroup                _memory_group;$/;"	m	class:arm_compute::CLDeconvolutionLayer
_memory_group	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    CLMemoryGroup             _memory_group;$/;"	m	class:arm_compute::CLFastCorners
_memory_group	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLMemoryGroup                                       _memory_group;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_memory_group	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLMemoryGroup              _memory_group;$/;"	m	class:arm_compute::CLGEMM
_memory_group	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLMemoryGroup                                       _memory_group;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_memory_group	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLMemoryGroup                      _memory_group;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_memory_group	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^    CLMemoryGroup           _memory_group;   \/**< Function's memory group *\/$/;"	m	class:arm_compute::CLGaussian5x5
_memory_group	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLMemoryGroup                 _memory_group;$/;"	m	class:arm_compute::CLHOGDescriptor
_memory_group	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^    CLMemoryGroup          _memory_group;$/;"	m	class:arm_compute::CLHOGGradient
_memory_group	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    CLMemoryGroup                                                 _memory_group;$/;"	m	class:arm_compute::CLHOGMultiDetection
_memory_group	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLMemoryGroup                       _memory_group;          \/**< Function's memory group *\/$/;"	m	class:arm_compute::CLHarrisCorners
_memory_group	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^    CLMemoryGroup            _memory_group;$/;"	m	class:arm_compute::CLL2NormalizeLayer
_memory_group	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLMemoryGroup                   _memory_group;$/;"	m	class:arm_compute::CLLSTMLayer
_memory_group	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLMemoryGroup                          _memory_group;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_memory_group	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    CLMemoryGroup                              _memory_group;$/;"	m	class:arm_compute::CLOpticalFlow
_memory_group	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    CLMemoryGroup              _memory_group;$/;"	m	class:arm_compute::CLRNNLayer
_memory_group	arm_compute/runtime/CL/functions/CLReductionOperation.h	/^    CLMemoryGroup                                 _memory_group;$/;"	m	class:arm_compute::CLReductionOperation
_memory_group	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    CLMemoryGroup        _memory_group;   \/**< Function's memory group *\/$/;"	m	class:arm_compute::CLSobel5x5
_memory_group	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    CLMemoryGroup        _memory_group;   \/**< Function's memory group *\/$/;"	m	class:arm_compute::CLSobel7x7
_memory_group	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    CLMemoryGroup                  _memory_group;$/;"	m	class:arm_compute::CLSoftmaxLayer
_memory_group	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLMemoryGroup                   _memory_group;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_memory_group	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCMemoryGroup                    _memory_group;$/;"	m	class:arm_compute::GCConvolutionLayer
_memory_group	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCMemoryGroup                       _memory_group;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_memory_group	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCMemoryGroup              _memory_group;$/;"	m	class:arm_compute::GCGEMM
_memory_group	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^    GCMemoryGroup                   _memory_group;$/;"	m	class:arm_compute::GCNormalizationLayer
_memory_group	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCMemoryGroup               _memory_group;$/;"	m	class:arm_compute::GCSoftmaxLayer
_memory_group	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    MemoryGroup                   _memory_group;        \/**< Function's memory group *\/$/;"	m	class:arm_compute::NECannyEdge
_memory_group	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    MemoryGroup                                   _memory_group;   \/**< Function memory group *\/$/;"	m	class:arm_compute::NEConvolutionSquare
_memory_group	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    MemoryGroup        _memory_group;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_memory_group	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    MemoryGroup                               _memory_group;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_memory_group	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    MemoryGroup                     _memory_group;$/;"	m	class:arm_compute::NEFastCorners
_memory_group	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    MemoryGroup                         _memory_group;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_memory_group	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    MemoryGroup              _memory_group;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
_memory_group	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    MemoryGroup                _memory_group;$/;"	m	class:arm_compute::NEGEMM
_memory_group	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    MemoryGroup                                         _memory_group;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_memory_group	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    MemoryGroup              _memory_group;$/;"	m	class:arm_compute::NEConvolutionLayerReshapeWeights
_memory_group	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    MemoryGroup                _memory_group;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_memory_group	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    MemoryGroup                        _memory_group;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_memory_group	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^    MemoryGroup             _memory_group;   \/**< Function memory group *\/$/;"	m	class:arm_compute::NEGaussian5x5
_memory_group	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    MemoryGroup                   _memory_group;$/;"	m	class:arm_compute::NEHOGDescriptor
_memory_group	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^    MemoryGroup                _memory_group;$/;"	m	class:arm_compute::NEHOGGradient
_memory_group	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    MemoryGroup                                                   _memory_group;$/;"	m	class:arm_compute::NEHOGMultiDetection
_memory_group	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    MemoryGroup                           _memory_group;          \/**< Function's memory group *\/$/;"	m	class:arm_compute::NEHarrisCorners
_memory_group	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^    MemoryGroup              _memory_group;$/;"	m	class:arm_compute::NEL2NormalizeLayer
_memory_group	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    MemoryGroup                            _memory_group;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_memory_group	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^    MemoryGroup                     _memory_group;    \/**< Function memory group *\/$/;"	m	class:arm_compute::NENormalizationLayer
_memory_group	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    MemoryGroup                          _memory_group;$/;"	m	class:arm_compute::NEOpticalFlow
_memory_group	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    MemoryGroup          _memory_group;   \/**< Function memory group *\/$/;"	m	class:arm_compute::NESobel5x5
_memory_group	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    MemoryGroup          _memory_group;   \/**< Function memory group *\/$/;"	m	class:arm_compute::NESobel7x7
_memory_group	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    MemoryGroup             _memory_group;$/;"	m	class:arm_compute::NESoftmaxLayer
_memory_group	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    MemoryGroup _memory_group;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_memory_group_8h	documentation/_memory_group_8h.js	/^var _memory_group_8h =$/;"	v
_memory_manager	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	/^    std::shared_ptr<IMemoryManager> _memory_manager;$/;"	m	class:arm_compute::CLConvolutionLayer
_memory_manager	arm_compute/runtime/MemoryGroupBase.h	/^    std::shared_ptr<IMemoryManager> _memory_manager; \/**< Memory manager to be used by the group *\/$/;"	m	class:arm_compute::MemoryGroupBase
_memory_manager	arm_compute/runtime/NEON/functions/NEConvolutionLayer.h	/^    std::shared_ptr<IMemoryManager> _memory_manager;$/;"	m	class:arm_compute::NEConvolutionLayer
_memory_managers	arm_compute/graph/GraphContext.h	/^    std::map<Target, MemoryManagerContext> _memory_managers; \/**< Memory managers for each target *\/$/;"	m	class:arm_compute::graph::final
_method	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    ConvolutionMethod _method;$/;"	m	class:arm_compute::graph::final
_method	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^    DepthwiseConvolutionMethod _method;$/;"	m	class:arm_compute::graph::final
_min	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    int                     _min;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_min	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    int                     _min;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_min	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    void                *_min;       \/**< Minimum value. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_min	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    void              *_min;   \/**< Minimum value. *\/$/;"	m	class:arm_compute::NEMinMaxKernel
_min	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    void                  *_min;                \/**< Minimum value. *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_min	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement *_min;$/;"	m	class:arm_compute::test::framework::InstrumentsStats
_min_count	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    uint32_t            *_min_count; \/**< Count of minimum value encounters. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_min_count	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    uint32_t              *_min_count;          \/**< Minimum value occurrences. *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_min_distance	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	/^    float                  _min_distance;$/;"	m	class:arm_compute::CPPDetectionWindowNonMaximaSuppressionKernel
_min_distance	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^    float             _min_distance;          \/**< Radial Euclidean distance *\/$/;"	m	class:arm_compute::CPPSortEuclideanDistanceKernel
_min_loc	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    ICoordinates2DArray *_min_loc;   \/**< Locations of minimum values. *\/$/;"	m	class:arm_compute::NEMinMaxLocationKernel
_min_loc	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    CLCoordinates2DArray *_min_loc;             \/**< Minimum value occurrences coordinates. *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_min_max	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	/^    const ICLTensor *_min_max;$/;"	m	class:arm_compute::CLDequantizationLayerKernel
_min_max	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    cl::Buffer      *_min_max;             \/**< Minimum\/maximum value. *\/$/;"	m	class:arm_compute::CLMinMaxKernel
_min_max	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	/^    const ICLTensor *_min_max;$/;"	m	class:arm_compute::CLQuantizationLayerKernel
_min_max	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	/^    const ITensor *_min_max;$/;"	m	class:arm_compute::NEDequantizationLayerKernel
_min_max	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	/^    const ITensor *_min_max;$/;"	m	class:arm_compute::NEQuantizationLayerKernel
_min_max	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	/^    CLTensor                  _min_max;$/;"	m	class:arm_compute::CLQuantizationLayer
_min_max	arm_compute/runtime/NEON/functions/NEMinMaxLocation.h	/^    NEMinMaxKernel         _min_max;     \/**< Kernel that performs min\/max *\/$/;"	m	class:arm_compute::NEMinMaxLocation
_min_max	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	/^    Tensor                    _min_max;$/;"	m	class:arm_compute::NEQuantizationLayer
_min_max_count	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    cl::Buffer     *_min_max_count; \/**< Minimum\/maximum value occurrences. *\/$/;"	m	class:arm_compute::CLMinMaxLocationKernel
_min_max_count_vals	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    cl::Buffer             _min_max_count_vals; \/**< Buffer to collect min, max values *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_min_max_kernel	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    CLMinMaxKernel         _min_max_kernel;     \/**< Kernel that performs min\/max *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_min_max_kernel	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	/^    CLMinMaxLayerKernel       _min_max_kernel;$/;"	m	class:arm_compute::CLQuantizationLayer
_min_max_kernel	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	/^    NEMinMaxLayerKernel       _min_max_kernel;$/;"	m	class:arm_compute::NEQuantizationLayer
_min_max_loc	arm_compute/runtime/NEON/functions/NEMinMaxLocation.h	/^    NEMinMaxLocationKernel _min_max_loc; \/**< Kernel that extracts min\/max locations *\/$/;"	m	class:arm_compute::NEMinMaxLocation
_min_max_loc_kernel	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    CLMinMaxLocationKernel _min_max_loc_kernel; \/**< Kernel that counts min\/max occurrences and identifies their positions *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_min_max_location_8h	documentation/_min_max_location_8h.js	/^var _min_max_location_8h =$/;"	v
_min_max_vals	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    cl::Buffer             _min_max_vals;       \/**< Buffer to collect min, max values *\/$/;"	m	class:arm_compute::CLMinMaxLocation
_mm_gemm	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLGEMM                                              _mm_gemm;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_mm_gemm	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLGEMM                                              _mm_gemm;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_mm_gemm	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCGEMM                           _mm_gemm;$/;"	m	class:arm_compute::GCConvolutionLayer
_mm_gemmlowp	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLGEMMLowpMatrixMultiplyCore                        _mm_gemmlowp;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_mm_gemmlowp	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLGEMMLowpMatrixMultiplyCore                        _mm_gemmlowp;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_mm_gemmlowp	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEGEMMLowpMatrixMultiplyCore                        _mm_gemmlowp;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_mm_kernel	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLGEMMMatrixMultiplyKernel _mm_kernel;$/;"	m	class:arm_compute::CLGEMM
_mm_kernel	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLGEMMLowpMatrixMultiplyKernel     _mm_kernel;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_mm_kernel	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLLocallyConnectedMatrixMultiplyKernel _mm_kernel;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_mm_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCGEMMMatrixMultiplyKernel          _mm_kernel;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_mm_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCGEMMMatrixMultiplyKernel _mm_kernel;$/;"	m	class:arm_compute::GCGEMM
_mm_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NEGEMMMatrixMultiplyKernel          _mm_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_mm_kernel	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    NEGEMMMatrixMultiplyKernel _mm_kernel;$/;"	m	class:arm_compute::NEGEMM
_mm_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEGEMMMatrixMultiplyKernel                          _mm_kernel;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_mm_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    std::unique_ptr<INEKernel> _mm_kernel;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_mm_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    std::unique_ptr<INEKernel>         _mm_kernel;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_mm_kernel	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    NELocallyConnectedMatrixMultiplyKernel _mm_kernel;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_mm_result	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	/^    ICLTensor       *_mm_result;$/;"	m	class:arm_compute::CLGEMMLowpOffsetContributionKernel
_mm_result	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    ITensor       *_mm_result;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_mobile_net_8cpp	documentation/_mobile_net_8cpp.js	/^var _mobile_net_8cpp =$/;"	v
_mobile_net_v1_8cpp	documentation/_mobile_net_v1_8cpp.js	/^var _mobile_net_v1_8cpp =$/;"	v
_mode	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^    BorderMode _mode;$/;"	m	class:arm_compute::NEFillBorderKernel
_mode	arm_compute/core/utils/io/FileHandler.h	/^    std::ios_base::openmode _mode;$/;"	m	class:arm_compute::io::FileHandler
_model	arm_compute/runtime/CL/CLMultiHOG.h	/^    std::unique_ptr<CLHOG[]> _model;$/;"	m	class:arm_compute::CLMultiHOG
_model	arm_compute/runtime/MultiHOG.h	/^    std::unique_ptr<HOG[]> _model;$/;"	m	class:arm_compute::MultiHOG
_mtx	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    arm_compute::Mutex _mtx;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_mtx	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	/^    Mutex          _mtx;$/;"	m	class:arm_compute::NEMinMaxLayerKernel
_mtx	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    arm_compute::Mutex _mtx;   \/**< Mutex used for result reduction. *\/$/;"	m	class:arm_compute::NEMinMaxKernel
_mtx	arm_compute/core/utils/logging/IPrinter.h	/^    arm_compute::Mutex _mtx;$/;"	m	class:arm_compute::logging::Printer
_mtx	arm_compute/core/utils/logging/LoggerRegistry.h	/^    arm_compute::Mutex _mtx;$/;"	m	class:arm_compute::logging::final
_mtx	arm_compute/graph/Graph.h	/^    arm_compute::Mutex _mtx = {};                               \/**< Mutex used for graph construction *\/$/;"	m	class:arm_compute::graph::final
_mtx	arm_compute/runtime/PoolManager.h	/^    mutable arm_compute::Mutex              _mtx;            \/**< Mutex to control access to the queues *\/$/;"	m	class:arm_compute::PoolManager
_mtx_a_reduction_kernel	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLGEMMLowpMatrixAReductionKernel   _mtx_a_reduction_kernel;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_mtx_a_reduction_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    NEGEMMLowpMatrixAReductionKernel   _mtx_a_reduction_kernel;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_mtx_a_reshape_kernel	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLGEMMInterleave4x4Kernel          _mtx_a_reshape_kernel;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_mtx_a_reshape_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    std::unique_ptr<INEKernel> _mtx_a_reshape_kernel;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_mtx_a_reshape_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    std::unique_ptr<INEKernel>         _mtx_a_reshape_kernel;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_mtx_b_reduction_kernel	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLGEMMLowpMatrixBReductionKernel   _mtx_b_reduction_kernel;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_mtx_b_reduction_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    NEGEMMLowpMatrixBReductionKernel   _mtx_b_reduction_kernel;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_mtx_b_reshape_kernel	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLGEMMTranspose1xWKernel           _mtx_b_reshape_kernel;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_mtx_b_reshape_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    std::unique_ptr<INEKernel> _mtx_b_reshape_kernel;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_mtx_b_reshape_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    std::unique_ptr<INEKernel>         _mtx_b_reshape_kernel;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_mul_w	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _mul_w;$/;"	m	class:arm_compute::graph::frontend::final
_mult_interleave4x4_height	arm_compute/core/Types.h	/^    const int _mult_interleave4x4_height;$/;"	m	class:arm_compute::HOGNormType::final
_mult_transpose1xW_width	arm_compute/core/Types.h	/^    const int _mult_transpose1xW_width;$/;"	m	class:arm_compute::HOGNormType::final
_multi	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int _k0 = 0, _x0 = 0, _multi = 0;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_multi_input	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^    const ICLMultiImage *_multi_input;  \/*pointer to multi-planar input *\/$/;"	m	class:arm_compute::CLColorConvertKernel
_multi_output	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^    ICLMultiImage       *_multi_output; \/*pointer to multi-planar output *\/$/;"	m	class:arm_compute::CLColorConvertKernel
_multiply_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^    GCPixelWiseMultiplicationKernel _multiply_kernel; \/**< Pixel multiplication kernel to run *\/$/;"	m	class:arm_compute::GCNormalizationLayer
_multiply_kernel	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^    NEPixelWiseMultiplicationKernel _multiply_kernel; \/**< Pixel multiplication kernel *\/$/;"	m	class:arm_compute::NENormalizationLayer
_mutex	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    arm_compute::Mutex     _mutex;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_mutex_8h	documentation/_mutex_8h.js	/^var _mutex_8h =$/;"	v
_n	arm_compute/core/Types.h	/^    const int _n;$/;"	m	class:arm_compute::HOGNormType::final
_n_batches	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int            _n_batches;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_n_batches	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _n_batches, _n_input_rows, _n_input_cols, _n_channels,$/;"	m	class:depthwise::DepthwiseConvolution
_n_batches	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _matrix_stride,$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_n_batches	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _tile_M, _tile_N;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_n_channels	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int            _n_channels;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_n_channels	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _n_batches, _n_input_rows, _n_input_cols, _n_channels,$/;"	m	class:depthwise::DepthwiseConvolution
_n_channels	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _matrix_stride,$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_n_channels	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _tile_M, _tile_N;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_n_cols	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int            _n_cols;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_n_cols	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _matrix_stride,$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_n_cols	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _tile_M, _tile_N;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_n_e_accumulate_kernel_8h	documentation/_n_e_accumulate_kernel_8h.js	/^var _n_e_accumulate_kernel_8h =$/;"	v
_n_e_asymm_8h	documentation/_n_e_asymm_8h.js	/^var _n_e_asymm_8h =$/;"	v
_n_e_asymm_8inl	documentation/_n_e_asymm_8inl.js	/^var _n_e_asymm_8inl =$/;"	v
_n_e_box3x3_kernel_8h	documentation/_n_e_box3x3_kernel_8h.js	/^var _n_e_box3x3_kernel_8h =$/;"	v
_n_e_canny_edge_kernel_8h	documentation/_n_e_canny_edge_kernel_8h.js	/^var _n_e_canny_edge_kernel_8h =$/;"	v
_n_e_color_convert_helper_8inl	documentation/_n_e_color_convert_helper_8inl.js	/^var _n_e_color_convert_helper_8inl =$/;"	v
_n_e_convolution_8h	documentation/_n_e_convolution_8h.js	/^var _n_e_convolution_8h =$/;"	v
_n_e_convolution_kernel_8h	documentation/_n_e_convolution_kernel_8h.js	/^var _n_e_convolution_kernel_8h =$/;"	v
_n_e_direct_convolution3x3_8h	documentation/_n_e_direct_convolution3x3_8h.js	/^var _n_e_direct_convolution3x3_8h =$/;"	v
_n_e_direct_convolution_detail_8h	documentation/_n_e_direct_convolution_detail_8h.js	/^var _n_e_direct_convolution_detail_8h =$/;"	v
_n_e_direct_convolution_detail_8h.xhtml#abd70ac1509d341ca206da7d421a0b7a9	documentation/navtreeindex9.js	/^"_n_e_direct_convolution_detail_8h.xhtml#abd70ac1509d341ca206da7d421a0b7a9":[6,0,0,0,3,0,0,2,30],$/;"	p	class:NAVTREEINDEX9
_n_e_fixed_point_8h	documentation/_n_e_fixed_point_8h.js	/^var _n_e_fixed_point_8h =$/;"	v
_n_e_h_o_g_descriptor_kernel_8h_source.xhtml	documentation/navtreeindex10.js	/^"_n_e_h_o_g_descriptor_kernel_8h_source.xhtml":[6,0,0,0,3,0,54],$/;"	p	class:NAVTREEINDEX10
_n_e_harris_corners_kernel_8h	documentation/_n_e_harris_corners_kernel_8h.js	/^var _n_e_harris_corners_kernel_8h =$/;"	v
_n_e_l_k_tracker_kernel_8h	documentation/_n_e_l_k_tracker_kernel_8h.js	/^var _n_e_l_k_tracker_kernel_8h =$/;"	v
_n_e_magnitude_phase_kernel_8h	documentation/_n_e_magnitude_phase_kernel_8h.js	/^var _n_e_magnitude_phase_kernel_8h =$/;"	v
_n_e_math_8h	documentation/_n_e_math_8h.js	/^var _n_e_math_8h =$/;"	v
_n_e_math_8inl	documentation/_n_e_math_8inl.js	/^var _n_e_math_8inl =$/;"	v
_n_e_non_maxima_suppression3x3_kernel_8h	documentation/_n_e_non_maxima_suppression3x3_kernel_8h.js	/^var _n_e_non_maxima_suppression3x3_kernel_8h =$/;"	v
_n_e_o_n_2_absolute_difference_8cpp	documentation/_n_e_o_n_2_absolute_difference_8cpp.js	/^var _n_e_o_n_2_absolute_difference_8cpp =$/;"	v
_n_e_o_n_2_accumulate_8cpp	documentation/_n_e_o_n_2_accumulate_8cpp.js	/^var _n_e_o_n_2_accumulate_8cpp =$/;"	v
_n_e_o_n_2_arithmetic_addition_8cpp	documentation/_n_e_o_n_2_arithmetic_addition_8cpp.js	/^var _n_e_o_n_2_arithmetic_addition_8cpp =$/;"	v
_n_e_o_n_2_arithmetic_subtraction_8cpp	documentation/_n_e_o_n_2_arithmetic_subtraction_8cpp.js	/^var _n_e_o_n_2_arithmetic_subtraction_8cpp =$/;"	v
_n_e_o_n_2_bitwise_and_8cpp	documentation/_n_e_o_n_2_bitwise_and_8cpp.js	/^var _n_e_o_n_2_bitwise_and_8cpp =$/;"	v
_n_e_o_n_2_bitwise_not_8cpp	documentation/_n_e_o_n_2_bitwise_not_8cpp.js	/^var _n_e_o_n_2_bitwise_not_8cpp =$/;"	v
_n_e_o_n_2_bitwise_or_8cpp	documentation/_n_e_o_n_2_bitwise_or_8cpp.js	/^var _n_e_o_n_2_bitwise_or_8cpp =$/;"	v
_n_e_o_n_2_bitwise_xor_8cpp	documentation/_n_e_o_n_2_bitwise_xor_8cpp.js	/^var _n_e_o_n_2_bitwise_xor_8cpp =$/;"	v
_n_e_o_n_2_box3x3_8cpp	documentation/_n_e_o_n_2_box3x3_8cpp.js	/^var _n_e_o_n_2_box3x3_8cpp =$/;"	v
_n_e_o_n_2_channel_combine_8cpp	documentation/_n_e_o_n_2_channel_combine_8cpp.js	/^var _n_e_o_n_2_channel_combine_8cpp =$/;"	v
_n_e_o_n_2_channel_extract_8cpp	documentation/_n_e_o_n_2_channel_extract_8cpp.js	/^var _n_e_o_n_2_channel_extract_8cpp =$/;"	v
_n_e_o_n_2_convert_fully_connected_weights_8cpp	documentation/_n_e_o_n_2_convert_fully_connected_weights_8cpp.js	/^var _n_e_o_n_2_convert_fully_connected_weights_8cpp =$/;"	v
_n_e_o_n_2_convolution_8cpp	documentation/_n_e_o_n_2_convolution_8cpp.js	/^var _n_e_o_n_2_convolution_8cpp =$/;"	v
_n_e_o_n_2_convolution_8cpp.xhtml#a97f70c1390d9c076f79253311bc1c929	documentation/navtreeindex11.js	/^"_n_e_o_n_2_convolution_8cpp.xhtml#a97f70c1390d9c076f79253311bc1c929":[6,0,4,6,3,18,34],$/;"	p	class:NAVTREEINDEX11
_n_e_o_n_2_deconvolution_layer_8cpp	documentation/_n_e_o_n_2_deconvolution_layer_8cpp.js	/^var _n_e_o_n_2_deconvolution_layer_8cpp =$/;"	v
_n_e_o_n_2_depth_convert_layer_8cpp	documentation/_n_e_o_n_2_depth_convert_layer_8cpp.js	/^var _n_e_o_n_2_depth_convert_layer_8cpp =$/;"	v
_n_e_o_n_2_derivative_8cpp	documentation/_n_e_o_n_2_derivative_8cpp.js	/^var _n_e_o_n_2_derivative_8cpp =$/;"	v
_n_e_o_n_2_dilate_8cpp	documentation/_n_e_o_n_2_dilate_8cpp.js	/^var _n_e_o_n_2_dilate_8cpp =$/;"	v
_n_e_o_n_2_dilated_convolution_layer_8cpp	documentation/_n_e_o_n_2_dilated_convolution_layer_8cpp.js	/^var _n_e_o_n_2_dilated_convolution_layer_8cpp =$/;"	v
_n_e_o_n_2_erode_8cpp	documentation/_n_e_o_n_2_erode_8cpp.js	/^var _n_e_o_n_2_erode_8cpp =$/;"	v
_n_e_o_n_2_fast_corners_8cpp	documentation/_n_e_o_n_2_fast_corners_8cpp.js	/^var _n_e_o_n_2_fast_corners_8cpp =$/;"	v
_n_e_o_n_2_fill_border_8cpp	documentation/_n_e_o_n_2_fill_border_8cpp.js	/^var _n_e_o_n_2_fill_border_8cpp =$/;"	v
_n_e_o_n_2_fixed_point_2_fixed_point_8cpp	documentation/_n_e_o_n_2_fixed_point_2_fixed_point_8cpp.js	/^var _n_e_o_n_2_fixed_point_2_fixed_point_8cpp =$/;"	v
_n_e_o_n_2_fixed_point_pixel_wise_multiplication_8cpp	documentation/_n_e_o_n_2_fixed_point_pixel_wise_multiplication_8cpp.js	/^var _n_e_o_n_2_fixed_point_pixel_wise_multiplication_8cpp =$/;"	v
_n_e_o_n_2_flatten_8cpp	documentation/_n_e_o_n_2_flatten_8cpp.js	/^var _n_e_o_n_2_flatten_8cpp =$/;"	v
_n_e_o_n_2_g_e_m_m_interleave4x4_8cpp	documentation/_n_e_o_n_2_g_e_m_m_interleave4x4_8cpp.js	/^var _n_e_o_n_2_g_e_m_m_interleave4x4_8cpp =$/;"	v
_n_e_o_n_2_gaussian3x3_8cpp	documentation/_n_e_o_n_2_gaussian3x3_8cpp.js	/^var _n_e_o_n_2_gaussian3x3_8cpp =$/;"	v
_n_e_o_n_2_gaussian5x5_8cpp	documentation/_n_e_o_n_2_gaussian5x5_8cpp.js	/^var _n_e_o_n_2_gaussian5x5_8cpp =$/;"	v
_n_e_o_n_2_gaussian_pyramid_8cpp	documentation/_n_e_o_n_2_gaussian_pyramid_8cpp.js	/^var _n_e_o_n_2_gaussian_pyramid_8cpp =$/;"	v
_n_e_o_n_2_global_pooling_layer_8cpp	documentation/_n_e_o_n_2_global_pooling_layer_8cpp.js	/^var _n_e_o_n_2_global_pooling_layer_8cpp =$/;"	v
_n_e_o_n_2_h_o_g_detector_8cpp	documentation/_n_e_o_n_2_h_o_g_detector_8cpp.js	/^var _n_e_o_n_2_h_o_g_detector_8cpp =$/;"	v
_n_e_o_n_2_h_o_g_multi_detection_8cpp	documentation/_n_e_o_n_2_h_o_g_multi_detection_8cpp.js	/^var _n_e_o_n_2_h_o_g_multi_detection_8cpp =$/;"	v
_n_e_o_n_2_helper_8h	documentation/_n_e_o_n_2_helper_8h.js	/^var _n_e_o_n_2_helper_8h =$/;"	v
_n_e_o_n_2_im2_col_8cpp	documentation/_n_e_o_n_2_im2_col_8cpp.js	/^var _n_e_o_n_2_im2_col_8cpp =$/;"	v
_n_e_o_n_2_locally_connected_8cpp	documentation/_n_e_o_n_2_locally_connected_8cpp.js	/^var _n_e_o_n_2_locally_connected_8cpp =$/;"	v
_n_e_o_n_2_non_linear_filter_8cpp	documentation/_n_e_o_n_2_non_linear_filter_8cpp.js	/^var _n_e_o_n_2_non_linear_filter_8cpp =$/;"	v
_n_e_o_n_2_optical_flow_8cpp	documentation/_n_e_o_n_2_optical_flow_8cpp.js	/^var _n_e_o_n_2_optical_flow_8cpp =$/;"	v
_n_e_o_n_2_permute_8cpp	documentation/_n_e_o_n_2_permute_8cpp.js	/^var _n_e_o_n_2_permute_8cpp =$/;"	v
_n_e_o_n_2_pixel_wise_multiplication_8cpp	documentation/_n_e_o_n_2_pixel_wise_multiplication_8cpp.js	/^var _n_e_o_n_2_pixel_wise_multiplication_8cpp =$/;"	v
_n_e_o_n_2_pixel_wise_multiplication_8cpp.xhtml#a2e7e44aefaae0abe0312a137133917c4	documentation/navtreeindex12.js	/^"_n_e_o_n_2_pixel_wise_multiplication_8cpp.xhtml#a2e7e44aefaae0abe0312a137133917c4":[6,0,4,6,3,62,54],$/;"	p	class:NAVTREEINDEX12
_n_e_o_n_2_r_o_i_pooling_layer_8cpp	documentation/_n_e_o_n_2_r_o_i_pooling_layer_8cpp.js	/^var _n_e_o_n_2_r_o_i_pooling_layer_8cpp =$/;"	v
_n_e_o_n_2_reduction_operation_8cpp	documentation/_n_e_o_n_2_reduction_operation_8cpp.js	/^var _n_e_o_n_2_reduction_operation_8cpp =$/;"	v
_n_e_o_n_2_remap_8cpp	documentation/_n_e_o_n_2_remap_8cpp.js	/^var _n_e_o_n_2_remap_8cpp =$/;"	v
_n_e_o_n_2_sobel_8cpp	documentation/_n_e_o_n_2_sobel_8cpp.js	/^var _n_e_o_n_2_sobel_8cpp =$/;"	v
_n_e_o_n_2_table_lookup_8cpp	documentation/_n_e_o_n_2_table_lookup_8cpp.js	/^var _n_e_o_n_2_table_lookup_8cpp =$/;"	v
_n_e_o_n_2_threshold_8cpp	documentation/_n_e_o_n_2_threshold_8cpp.js	/^var _n_e_o_n_2_threshold_8cpp =$/;"	v
_n_e_o_n_2_u_n_i_t_2_memory_manager_8cpp	documentation/_n_e_o_n_2_u_n_i_t_2_memory_manager_8cpp.js	/^var _n_e_o_n_2_u_n_i_t_2_memory_manager_8cpp =$/;"	v
_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp	documentation/_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp.js	/^var _n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp =$/;"	v
_n_e_o_n_2_warp_affine_8cpp	documentation/_n_e_o_n_2_warp_affine_8cpp.js	/^var _n_e_o_n_2_warp_affine_8cpp =$/;"	v
_n_e_o_n_2_warp_perspective_8cpp	documentation/_n_e_o_n_2_warp_perspective_8cpp.js	/^var _n_e_o_n_2_warp_perspective_8cpp =$/;"	v
_n_e_optical_flow_8h	documentation/_n_e_optical_flow_8h.js	/^var _n_e_optical_flow_8h =$/;"	v
_n_e_scheduler_8h	documentation/_n_e_scheduler_8h.js	/^var _n_e_scheduler_8h =$/;"	v
_n_input_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _n_batches, _n_input_rows, _n_input_cols, _n_channels,$/;"	m	class:depthwise::DepthwiseConvolution
_n_input_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _n_batches, _n_input_rows, _n_input_cols, _n_channels,$/;"	m	class:depthwise::DepthwiseConvolution
_n_output_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^              _n_output_rows, _n_output_cols, _n_tile_rows, _n_tile_cols;$/;"	m	class:depthwise::DepthwiseConvolution
_n_output_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^              _n_output_rows, _n_output_cols, _n_tile_rows, _n_tile_cols;$/;"	m	class:depthwise::DepthwiseConvolution
_n_rows	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int            _n_rows;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_n_rows	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _matrix_stride,$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_n_rows	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _tile_M, _tile_N;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_n_tile_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^              _n_output_rows, _n_output_cols, _n_tile_rows, _n_tile_cols;$/;"	m	class:depthwise::DepthwiseConvolution
_n_tile_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^              _n_output_rows, _n_output_cols, _n_tile_rows, _n_tile_cols;$/;"	m	class:depthwise::DepthwiseConvolution
_name	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string                _name;      \/**< Program name. *\/$/;"	m	class:arm_compute::Program
_name	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string _name;   \/**< Kernel name *\/$/;"	m	class:arm_compute::Kernel
_name	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::string                  _name;                                 \/**< Kernel name *\/$/;"	m	class:arm_compute::GCKernel
_name	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::string _name;   \/**< Program name. *\/$/;"	m	class:arm_compute::GCProgram
_name	arm_compute/core/utils/logging/Logger.h	/^    std::string                              _name;$/;"	m	class:arm_compute::logging::Logger
_name	arm_compute/graph/Graph.h	/^    std::string                          _name    = {};         \/**< Graph name *\/$/;"	m	class:arm_compute::graph::final
_name	arm_compute/graph/frontend/ILayer.h	/^    std::string _name = {};$/;"	m	class:arm_compute::graph::frontend::ILayer
_name	tests/framework/command_line/Option.h	/^    std::string _name;$/;"	m	class:arm_compute::test::framework::Option
_name	tests/framework/datasets/ContainerDataset.h	/^        std::string              _name;$/;"	m	struct:arm_compute::test::framework::dataset::ContainerDataset::iterator
_name	tests/framework/datasets/Dataset.h	/^    const std::string _name;$/;"	m	class:arm_compute::test::framework::dataset::NamedDataset
_name	tests/framework/datasets/InitializerListDataset.h	/^        std::string         _name;$/;"	m	struct:arm_compute::test::framework::dataset::final::iterator
_name	tests/framework/datasets/RangeDataset.h	/^        std::string _name;$/;"	m	struct:arm_compute::test::framework::dataset::final::iterator
_name	tests/framework/datasets/SingletonDataset.h	/^        std::string _name;$/;"	m	struct:arm_compute::test::framework::dataset::SingletonDataset::iterator
_name	utils/GraphUtils.h	/^    const std::string _name;$/;"	m	class:arm_compute::graph_utils::PPMWriter
_name_it	tests/datasets/ImageFileDatasets.h	/^        std::vector<std::string>::const_iterator _name_it;$/;"	m	struct:arm_compute::test::datasets::ImageFileDataset::iterator
_nbatches	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const unsigned int _nbatches;$/;"	m	class:arm_gemm::GemmInterleaved
_nbatches	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    const unsigned int _nbatches;$/;"	m	class:arm_gemm::GemmNative
_needs_shifting	arm_compute/core/GLES_COMPUTE/IGCTensor.h	/^    bool     _needs_shifting;$/;"	m	class:arm_compute::IGCTensor
_new_image_it	tests/datasets/OpticalFlowDataset.h	/^        std::vector<std::string>::const_iterator           _new_image_it;$/;"	m	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
_new_input	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    const ICLTensor *_new_input;$/;"	m	class:arm_compute::CLLKTrackerStage1Kernel
_new_points	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    IKeyPointArray             *_new_points;$/;"	m	class:arm_compute::NELKTrackerKernel
_new_points	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    ICLKeyPointArray                          *_new_points;$/;"	m	class:arm_compute::CLOpticalFlow
_new_points	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    IKeyPointArray                      *_new_points;$/;"	m	class:arm_compute::NEOpticalFlow
_new_points_estimates	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    const IKeyPointArray       *_new_points_estimates;$/;"	m	class:arm_compute::NELKTrackerKernel
_new_points_estimates	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    const ICLKeyPointArray                    *_new_points_estimates;$/;"	m	class:arm_compute::CLOpticalFlow
_new_points_estimates	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    const IKeyPointArray                *_new_points_estimates;$/;"	m	class:arm_compute::NEOpticalFlow
_new_points_internal	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    INELKInternalKeypointArray *_new_points_internal;$/;"	m	class:arm_compute::NELKTrackerKernel
_new_points_internal	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLLKInternalKeypointArray> _new_points_internal;$/;"	m	class:arm_compute::CLOpticalFlow
_new_points_internal	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    LKInternalKeypointArray              _new_points_internal;$/;"	m	class:arm_compute::NEOpticalFlow
_newkblock	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        bool         _newkblock = true;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_newmulti	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        bool         _newmulti  = true;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_nmulti	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const unsigned int _nmulti;$/;"	m	class:arm_gemm::GemmInterleaved
_nmultis	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    const unsigned int _nmultis;$/;"	m	class:arm_gemm::GemmNative
_nmultis	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    const unsigned int _nmultis;$/;"	m	class:arm_gemm::GemvNativeTransposed
_nmultis	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const unsigned int _nmultis;$/;"	m	class:arm_gemm::GemvPretransposed
_node_fusion_mutator_8h	documentation/_node_fusion_mutator_8h.js	/^var _node_fusion_mutator_8h =$/;"	v
_nodes	arm_compute/graph/Graph.h	/^    std::vector<std::unique_ptr<INode>>  _nodes   = {};         \/**< Graph nodes *\/$/;"	m	class:arm_compute::graph::final
_non_linear_filter_8h	documentation/_non_linear_filter_8h.js	/^var _non_linear_filter_8h =$/;"	v
_non_max	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    bool                      _non_max;$/;"	m	class:arm_compute::CLFastCorners
_non_max	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    bool                            _non_max;$/;"	m	class:arm_compute::NEFastCorners
_non_max_suppr	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLEdgeNonMaxSuppressionKernel _non_max_suppr;                                   \/**< Non-Maxima suppression kernel. *\/$/;"	m	class:arm_compute::CLCannyEdge
_non_max_suppr	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLNonMaximaSuppression3x3           _non_max_suppr;         \/**< Non-maxima suppression function *\/$/;"	m	class:arm_compute::CLHarrisCorners
_non_max_suppr	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    NEEdgeNonMaxSuppressionKernel _non_max_suppr;       \/**< Non-Maxima suppression kernel *\/$/;"	m	class:arm_compute::NECannyEdge
_non_max_suppr	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    NENonMaximaSuppression3x3             _non_max_suppr;         \/**< Non-maxima suppression function *\/$/;"	m	class:arm_compute::NEHarrisCorners
_non_max_suppression	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^    bool          _non_max_suppression; \/** true if non-maxima suppression is applied in the next stage *\/$/;"	m	class:arm_compute::NEFastCornersKernel
_non_maxima_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    std::unique_ptr<CPPDetectionWindowNonMaximaSuppressionKernel> _non_maxima_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_non_maxima_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    std::unique_ptr<CPPDetectionWindowNonMaximaSuppressionKernel> _non_maxima_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_non_maxima_suppression	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    bool                                                          _non_maxima_suppression;$/;"	m	class:arm_compute::CLHOGMultiDetection
_non_maxima_suppression	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    bool                                                          _non_maxima_suppression;$/;"	m	class:arm_compute::NEHOGMultiDetection
_non_maxima_suppression_8cpp	documentation/_non_maxima_suppression_8cpp.js	/^var _non_maxima_suppression_8cpp =$/;"	v
_non_maxima_suppression_8h	documentation/_non_maxima_suppression_8h.js	/^var _non_maxima_suppression_8h =$/;"	v
_nonmax	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _nonmax;                                          \/**< Source tensor - Non-Maxima suppressed. *\/$/;"	m	class:arm_compute::CLCannyEdge
_nonmax	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLImage                             _nonmax;                \/**< Source image - Non-Maxima suppressed image *\/$/;"	m	class:arm_compute::CLHarrisCorners
_nonmax	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    Tensor                        _nonmax;              \/**< Source tensor - Non-Maxima suppressed *\/$/;"	m	class:arm_compute::NECannyEdge
_nonmax	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    Image                                 _nonmax;                \/**< Source image - Non-Maxima suppressed image *\/$/;"	m	class:arm_compute::NEHarrisCorners
_nonmax_kernel	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    NENonMaximaSuppression3x3Kernel _nonmax_kernel;$/;"	m	class:arm_compute::NEFastCorners
_norm_factor	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    float           _norm_factor;     \/**< Normalization factor *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_norm_factor	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    float         _norm_factor;     \/**< Normalization factor *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_norm_info	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    NormalizationLayerInfo _norm_info;$/;"	m	class:arm_compute::NENormalizationLayerKernel
_norm_info	arm_compute/graph/frontend/Layers.h	/^    NormalizationLayerInfo _norm_info;$/;"	m	class:arm_compute::graph::frontend::final
_norm_kernel	arm_compute/runtime/CL/functions/CLBatchNormalizationLayer.h	/^    CLBatchNormalizationLayerKernel _norm_kernel; \/**< BatchNormalization layer kernel to run *\/$/;"	m	class:arm_compute::CLBatchNormalizationLayer
_norm_kernel	arm_compute/runtime/CL/functions/CLNormalizationLayer.h	/^    CLNormalizationLayerKernel _norm_kernel;    \/**< Normalization layer kernel to run *\/$/;"	m	class:arm_compute::CLNormalizationLayer
_norm_kernel	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    CLLogits1DNormKernel           _norm_kernel;$/;"	m	class:arm_compute::CLSoftmaxLayer
_norm_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.h	/^    GCBatchNormalizationLayerKernel _norm_kernel; \/**< BatchNormalization layer kernel to run *\/$/;"	m	class:arm_compute::GCBatchNormalizationLayer
_norm_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^    GCNormalizationLayerKernel      _norm_kernel;     \/**< Normalization layer kernel to run *\/$/;"	m	class:arm_compute::GCNormalizationLayer
_norm_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.h	/^    GCNormalizePlanarYUVLayerKernel _norm_kernel; \/**< NormalizePlanarYUV layer kernel to run *\/$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayer
_norm_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCLogits1DNormKernel        _norm_kernel;$/;"	m	class:arm_compute::GCSoftmaxLayer
_norm_kernel	arm_compute/runtime/NEON/functions/NEBatchNormalizationLayer.h	/^    NEBatchNormalizationLayerKernel _norm_kernel; \/**< Batch normalization layer kernel *\/$/;"	m	class:arm_compute::NEBatchNormalizationLayer
_norm_kernel	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^    NENormalizationLayerKernel      _norm_kernel;     \/**< Normalization layer kernel *\/$/;"	m	class:arm_compute::NENormalizationLayer
_norm_size	arm_compute/core/Types.h	/^    uint32_t _norm_size;$/;"	m	class:arm_compute::HOGNormType::NormalizationLayerInfo
_normalization_layer_8h	documentation/_normalization_layer_8h.js	/^var _normalization_layer_8h =$/;"	v
_normalization_type	arm_compute/core/HOGInfo.h	/^    HOGNormType _normalization_type;$/;"	m	class:arm_compute::HOGInfo
_normalize_kernel	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^    CLL2NormalizeLayerKernel _normalize_kernel;$/;"	m	class:arm_compute::CLL2NormalizeLayer
_normalize_kernel	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^    NEL2NormalizeLayerKernel _normalize_kernel;$/;"	m	class:arm_compute::NEL2NormalizeLayer
_normalize_planar_y_u_v_layer_8h	documentation/_normalize_planar_y_u_v_layer_8h.js	/^var _normalize_planar_y_u_v_layer_8h =$/;"	v
_now	tests/framework/instruments/OpenCLMemoryUsage.h	/^    } _start, _end, _now;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage	typeref:struct:arm_compute::test::framework::OpenCLMemoryUsage::Stats
_npy_tensor	utils/GraphUtils.h	/^    Tensor            _npy_tensor;$/;"	m	class:arm_compute::graph_utils::final
_num_accessed_elements	tests/PaddingCalculator.h	/^    int        _num_accessed_elements;$/;"	m	class:arm_compute::test::final
_num_bins	arm_compute/core/HOGInfo.h	/^    size_t      _num_bins;$/;"	m	class:arm_compute::HOGInfo
_num_bins	arm_compute/core/IDistribution1D.h	/^    size_t   _num_bins; \/**< Number of bins. *\/$/;"	m	class:arm_compute::IDistribution1D
_num_bins	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    size_t         _num_bins;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
_num_bins	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    size_t         _num_bins;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_num_bins_per_descriptor_x	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _num_bins_per_descriptor_x;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_num_block_norm_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    size_t                                                        _num_block_norm_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_num_block_norm_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    size_t                                                        _num_block_norm_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_num_blocks_per_descriptor_y	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    size_t                 _num_blocks_per_descriptor_y;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_num_buffer	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    cl::Buffer       *_num_buffer; \/**< CL memory to record number of key points in the array *\/$/;"	m	class:arm_compute::CLCopyToArrayKernel
_num_buffer	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    cl::Buffer                _num_buffer;$/;"	m	class:arm_compute::CLFastCorners
_num_cells_per_block	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    Size2D         _num_cells_per_block;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
_num_cells_per_block_stride	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    Size2D           _num_cells_per_block_stride;$/;"	m	class:arm_compute::CLHOGBlockNormalizationKernel
_num_cells_per_block_stride	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    Size2D         _num_cells_per_block_stride;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
_num_channels	arm_compute/core/TensorInfo.h	/^    size_t           _num_channels;$/;"	m	class:arm_compute::final
_num_corner_candidates	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^    int32_t           *_num_corner_candidates;   \/**< Number of corner candidates *\/$/;"	m	class:arm_compute::CPPCornerCandidatesKernel
_num_corner_candidates	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^    const int32_t    *_num_corner_candidates; \/**< Number of corner candidates *\/$/;"	m	class:arm_compute::CPPSortEuclideanDistanceKernel
_num_corner_candidates	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    int32_t                             _num_corner_candidates; \/**< Number of potential corner candidates *\/$/;"	m	class:arm_compute::CLHarrisCorners
_num_corner_candidates	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    int32_t                               _num_corner_candidates; \/**< Number of potential corner candidates *\/$/;"	m	class:arm_compute::NEHarrisCorners
_num_corners	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    unsigned int             *_num_corners;$/;"	m	class:arm_compute::CLFastCorners
_num_detection_windows	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	/^    cl::Buffer              *_num_detection_windows;$/;"	m	class:arm_compute::CLHOGDetectorKernel
_num_detection_windows	arm_compute/runtime/CL/functions/CLHOGDetector.h	/^    cl::Buffer               _num_detection_windows;$/;"	m	class:arm_compute::CLHOGDetector
_num_elements	arm_compute/runtime/ILutAllocator.h	/^    size_t   _num_elements; \/**< Number of elements allocated *\/$/;"	m	class:arm_compute::ILutAllocator
_num_elems_processed_per_iteration	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^    uint32_t         _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::CLChannelExtractKernel
_num_elems_processed_per_iteration	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    unsigned int   _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::CLIm2ColKernel
_num_elems_processed_per_iteration	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    unsigned int     _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::CLPoolingLayerKernel
_num_elems_processed_per_iteration	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^    unsigned int     _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::GCDropoutLayerKernel
_num_elems_processed_per_iteration	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    unsigned int   _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::GCIm2ColKernel
_num_elems_processed_per_iteration	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    unsigned int     _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::GCPoolingLayerKernel
_num_elems_processed_per_iteration	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    unsigned int _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::NEChannelCombineKernel
_num_elems_processed_per_iteration	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    unsigned int     _num_elems_processed_per_iteration;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_num_elems_read_per_iteration	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    unsigned int   _num_elems_read_per_iteration;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_num_elems_written_per_iteration	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    unsigned int                                      _num_elems_written_per_iteration;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_num_elems_written_per_iteration	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    unsigned int   _num_elems_written_per_iteration;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_num_groups	arm_compute/graph/frontend/Layers.h	/^    unsigned int           _num_groups;$/;"	m	class:arm_compute::graph::frontend::final
_num_groups_it	tests/datasets/ChannelShuffleLayerDataset.h	/^        std::vector<int>::const_iterator         _num_groups_it;$/;"	m	struct:arm_compute::test::datasets::ChannelShuffleLayerDataset::iterator
_num_hog_detect_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    size_t                                                        _num_hog_detect_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_num_hog_detect_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    size_t                                                        _num_hog_detect_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_num_inputs	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^    unsigned int                                     _num_inputs;$/;"	m	class:arm_compute::CLDepthConcatenateLayer
_num_inputs	arm_compute/runtime/CL/functions/CLWidthConcatenateLayer.h	/^    unsigned int                                     _num_inputs;$/;"	m	class:arm_compute::CLWidthConcatenateLayer
_num_inputs	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	/^    unsigned int                                     _num_inputs;$/;"	m	class:arm_compute::GCDepthConcatenateLayer
_num_inputs	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^    unsigned int                                     _num_inputs;$/;"	m	class:arm_compute::NEDepthConcatenateLayer
_num_iterations	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    unsigned int                _num_iterations;$/;"	m	class:arm_compute::NELKTrackerKernel
_num_kernels	arm_compute/core/Types.h	/^    const unsigned int _num_kernels;$/;"	m	class:arm_compute::HOGNormType::WeightsInfo
_num_keypoints_it	tests/datasets/OpticalFlowDataset.h	/^        std::vector<size_t>::const_iterator                _num_keypoints_it;$/;"	m	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
_num_levels	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    unsigned int                _num_levels;$/;"	m	class:arm_compute::NELKTrackerKernel
_num_levels	arm_compute/core/PyramidInfo.h	/^    size_t      _num_levels;$/;"	m	class:arm_compute::PyramidInfo
_num_levels	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    size_t                                     _num_levels;$/;"	m	class:arm_compute::CLLaplacianPyramid
_num_levels	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    size_t                                     _num_levels;$/;"	m	class:arm_compute::CLOpticalFlow
_num_levels	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    size_t                                     _num_levels;$/;"	m	class:arm_compute::NELaplacianPyramid
_num_levels	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    unsigned int                         _num_levels;$/;"	m	class:arm_compute::NEOpticalFlow
_num_levels_it	tests/datasets/OpticalFlowDataset.h	/^        std::vector<size_t>::const_iterator                _num_levels_it;$/;"	m	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
_num_models	arm_compute/runtime/CL/CLMultiHOG.h	/^    size_t                   _num_models;$/;"	m	class:arm_compute::CLMultiHOG
_num_models	arm_compute/runtime/MultiHOG.h	/^    size_t                 _num_models;$/;"	m	class:arm_compute::MultiHOG
_num_of_stages	arm_compute/runtime/CL/functions/CLReductionOperation.h	/^    unsigned int                                  _num_of_stages;$/;"	m	class:arm_compute::CLReductionOperation
_num_orient_bin_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    size_t                                                        _num_orient_bin_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_num_orient_bin_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    size_t                                                        _num_orient_bin_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_num_outputs	arm_compute/graph/frontend/Layers.h	/^    unsigned int        _num_outputs;$/;"	m	class:arm_compute::graph::frontend::final
_num_outputs	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^    unsigned int _num_outputs;$/;"	m	class:arm_compute::graph::final
_num_pools	arm_compute/runtime/MemoryManagerOnDemand.h	/^    unsigned int                      _num_pools;    \/**< Number of pools to create *\/$/;"	m	class:arm_compute::MemoryManagerOnDemand
_num_processed_elements	tests/PaddingCalculator.h	/^    int        _num_processed_elements;$/;"	m	class:arm_compute::test::final
_num_rois_it	tests/datasets/ROIPoolingLayerDataset.h	/^        std::vector<unsigned int>::const_iterator        _num_rois_it;$/;"	m	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
_num_rows_processed_per_iteration	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	/^    unsigned int _num_rows_processed_per_iteration;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NHWCKernel
_num_rows_read_per_iteration	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    int              _num_rows_read_per_iteration;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
_num_splits	arm_compute/graph/nodes/SplitLayerNode.h	/^    unsigned int _num_splits;$/;"	m	class:arm_compute::graph::final
_num_threads	arm_compute/runtime/CPP/CPPScheduler.h	/^    unsigned int      _num_threads;$/;"	m	class:arm_compute::CPPScheduler
_num_threads	arm_compute/runtime/OMP/OMPScheduler.h	/^    unsigned int _num_threads;$/;"	m	class:arm_compute::OMPScheduler
_num_threads_hint	arm_compute/runtime/IScheduler.h	/^    unsigned int _num_threads_hint = {};$/;"	m	class:arm_compute::IScheduler
_num_tiles_x	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    int              _num_tiles_x;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
_num_tiles_y	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    int              _num_tiles_y;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
_num_values	arm_compute/core/IArray.h	/^    size_t _num_values;$/;"	m	class:arm_compute::IArray
_num_weight_elems_read_per_row	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    unsigned int   _num_weight_elems_read_per_row;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_numusers	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    int _numusers; \/\/ Actual number of threads (might be lower).$/;"	m	class:arm_gemm::Buffer
_occupied_blobs	arm_compute/runtime/ISimpleLifetimeManager.h	/^    std::list<Blob> _occupied_blobs;                                       \/**< Occupied blobs *\/$/;"	m	class:arm_compute::ISimpleLifetimeManager
_occupied_pools	arm_compute/runtime/PoolManager.h	/^    std::list<std::unique_ptr<IMemoryPool>> _occupied_pools; \/**< List of occupied pools *\/$/;"	m	class:arm_compute::PoolManager
_offset	arm_compute/core/IDistribution1D.h	/^    int32_t  _offset;   \/**< Offset, which indicate the start of the usable values. *\/$/;"	m	class:arm_compute::IDistribution1D
_offset_contribution_kernel	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLGEMMLowpOffsetContributionKernel _offset_contribution_kernel;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_offset_contribution_kernel	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    NEGEMMLowpOffsetContributionKernel _offset_contribution_kernel;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_offset_first_element_in_bytes	arm_compute/core/TensorInfo.h	/^    size_t           _offset_first_element_in_bytes;$/;"	m	class:arm_compute::final
_offsets	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    const ITensor      *_offsets;$/;"	m	class:arm_compute::NEScaleKernel
_offsets	arm_compute/runtime/NEON/functions/NEScale.h	/^    Tensor             _offsets;        \/**< Offset to access the element with NEAREST interpolation or the top-left element with BILINEAR interpolation in the input tensor *\/$/;"	m	class:arm_compute::NEScale
_ofm	arm_compute/graph/frontend/Layers.h	/^    unsigned int           _ofm;$/;"	m	class:arm_compute::graph::frontend::final
_old_image_it	tests/datasets/OpticalFlowDataset.h	/^        std::vector<std::string>::const_iterator           _old_image_it;$/;"	m	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
_old_input	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    const ICLTensor *_old_input;$/;"	m	class:arm_compute::CLLKTrackerStage0Kernel
_old_points	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    const IKeyPointArray       *_old_points;$/;"	m	class:arm_compute::NELKTrackerKernel
_old_points	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    const ICLKeyPointArray                    *_old_points;$/;"	m	class:arm_compute::CLOpticalFlow
_old_points	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    const IKeyPointArray                *_old_points;$/;"	m	class:arm_compute::NEOpticalFlow
_old_points_internal	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    INELKInternalKeypointArray *_old_points_internal;$/;"	m	class:arm_compute::NELKTrackerKernel
_old_points_internal	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLLKInternalKeypointArray> _old_points_internal;$/;"	m	class:arm_compute::CLOpticalFlow
_old_points_internal	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    LKInternalKeypointArray              _old_points_internal;$/;"	m	class:arm_compute::NEOpticalFlow
_old_scharr_gx	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    const ICLTensor *_old_scharr_gx;$/;"	m	class:arm_compute::CLLKTrackerStage0Kernel
_old_scharr_gx	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    const ITensor              *_old_scharr_gx;$/;"	m	class:arm_compute::NELKTrackerKernel
_old_scharr_gy	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    const ICLTensor *_old_scharr_gy;$/;"	m	class:arm_compute::CLLKTrackerStage0Kernel
_old_scharr_gy	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    const ITensor              *_old_scharr_gy;$/;"	m	class:arm_compute::NELKTrackerKernel
_old_values	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLOldValueArray>           _old_values;$/;"	m	class:arm_compute::CLOpticalFlow
_ones	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _ones;$/;"	m	class:arm_compute::CLLSTMLayer
_op	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    ReductionOperation _op;$/;"	m	class:arm_compute::CLReductionOperationKernel
_op	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    ReductionOperation _op;$/;"	m	class:arm_compute::NEReductionOperationKernel
_op	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    EltwiseOperation _op;$/;"	m	class:arm_compute::graph::final
_open_c_l_8h	documentation/_open_c_l_8h.js	/^var _open_c_l_8h =$/;"	v
_open_c_l_timer_8cpp.xhtml	documentation/navtreeindex13.js	/^"_open_c_l_timer_8cpp.xhtml":[6,0,4,2,2,12],$/;"	p	class:NAVTREEINDEX13
_open_g_l_e_s_8h	documentation/_open_g_l_e_s_8h.js	/^var _open_g_l_e_s_8h =$/;"	v
_optical_flow_8h	documentation/_optical_flow_8h.js	/^var _optical_flow_8h =$/;"	v
_optimised_kernel	arm_compute/runtime/NEON/AssemblyHelper.h	/^    std::unique_ptr<INEKernel> _optimised_kernel;$/;"	m	class:arm_compute::final
_orient_bin	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLHOGOrientationBinningKernel _orient_bin;$/;"	m	class:arm_compute::CLHOGDescriptor
_orient_bin	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    NEHOGOrientationBinningKernel _orient_bin;$/;"	m	class:arm_compute::NEHOGDescriptor
_orient_bin_kernel	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    std::unique_ptr<CLHOGOrientationBinningKernel[]>              _orient_bin_kernel;$/;"	m	class:arm_compute::CLHOGMultiDetection
_orient_bin_kernel	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    std::unique_ptr<NEHOGOrientationBinningKernel[]>              _orient_bin_kernel;$/;"	m	class:arm_compute::NEHOGMultiDetection
_original_b	arm_compute/runtime/CL/functions/CLGEMM.h	/^    const ICLTensor           *_original_b;$/;"	m	class:arm_compute::CLGEMM
_original_weights	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    const ICLTensor                          *_original_weights;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_original_weights	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    const ICLTensor                                    *_original_weights;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_original_weights	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    const ICLTensor *_original_weights;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_original_weights	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    const ICLTensor                       *_original_weights;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_original_weights	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    const ICLTensor                *_original_weights;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_original_weights	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    const IGCTensor *_original_weights;$/;"	m	class:arm_compute::GCConvolutionLayer
_original_weights	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    const ITensor                            *_original_weights;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_original_weights	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    const ITensor                      *_original_weights;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_original_weights	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    const ITensor *_original_weights;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_original_weights	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    const ITensor                         *_original_weights;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_out_batch_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _out_col_stride, _out_row_stride, _out_batch_stride;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_out_col_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _out_col_stride, _out_row_stride, _out_batch_stride;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_out_it	tests/datasets/ReshapeLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _out_it;$/;"	m	struct:arm_compute::test::datasets::ReshapeLayerDataset::iterator
_out_quant_info	arm_compute/graph/frontend/Layers.h	/^    const QuantizationInfo _out_quant_info;$/;"	m	class:arm_compute::graph::frontend::final
_out_quant_info	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    QuantizationInfo  _out_quant_info;$/;"	m	class:arm_compute::graph::final
_out_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _out_col_stride, _out_row_stride, _out_batch_stride;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_outptr	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        T* const _outptr;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_outptr	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        T* const _outptr;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_output	arm_compute/core/CL/ICLSimpleKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::ICLSimpleKernel
_output	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor. *\/$/;"	m	class:arm_compute::CLAbsoluteDifferenceKernel
_output	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	/^    ICLTensor *_output;$/;"	m	class:arm_compute::CLActivationLayerKernel
_output	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::CLArithmeticAdditionKernel
_output	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::CLArithmeticSubtractionKernel
_output	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_output	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::CLBitwiseAndKernel
_output	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::CLBitwiseOrKernel
_output	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::CLBitwiseXorKernel
_output	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_output;           \/**< Destination tensor. *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_output	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_output;    \/**< Destination tensor. *\/$/;"	m	class:arm_compute::CLEdgeNonMaxSuppressionKernel
_output	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^    ICLTensor     *_output;$/;"	m	class:arm_compute::CLChannelCombineKernel
_output	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLChannelExtractKernel
_output	arm_compute/core/CL/kernels/CLChannelShuffleLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLChannelShuffleLayerKernel
_output	arm_compute/core/CL/kernels/CLCol2ImKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLCol2ImKernel
_output	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^    ICLTensor           *_output;       \/*pointer to single planar tensor output *\/$/;"	m	class:arm_compute::CLColorConvertKernel
_output	arm_compute/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLConvertFullyConnectedWeightsKernel
_output	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLConvolutionRectangleKernel
_output	arm_compute/core/CL/kernels/CLCopyKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLCopyKernel
_output	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsampleKernel
_output	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
_output	arm_compute/core/CL/kernels/CLDepthwiseIm2ColKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDepthwiseIm2ColKernel
_output	arm_compute/core/CL/kernels/CLDepthwiseVectorToTensorKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDepthwiseVectorToTensorKernel
_output	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDepthwiseWeightsReshapeKernel
_output	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDequantizationLayerKernel
_output	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_output	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
_output	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    ICLImage       *_output;$/;"	m	class:arm_compute::CLFastCornersKernel
_output	arm_compute/core/CL/kernels/CLFloorKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLFloorKernel
_output	arm_compute/core/CL/kernels/CLGEMMInterleave4x4Kernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMInterleave4x4Kernel
_output	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyKernel
_output	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_output	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_output	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::ICLGEMMLowpReductionKernel
_output	arm_compute/core/CL/kernels/CLGEMMMatrixAdditionKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMMatrixAdditionKernel
_output	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMMatrixMultiplyKernel
_output	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
_output	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLHOGBlockNormalizationKernel
_output	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLHOGOrientationBinningKernel
_output	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    ICLImage       *_output;          \/**< Source image - Harris score *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_output	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^    ICLDistribution1D *_output;$/;"	m	class:arm_compute::CLHistogramBorderKernel
_output	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^    ICLDistribution1D *_output;$/;"	m	class:arm_compute::CLHistogramKernel
_output	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLIm2ColKernel
_output	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLL2NormalizeLayerKernel
_output	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLLocallyConnectedMatrixMultiplyKernel
_output	arm_compute/core/CL/kernels/CLMinMaxLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLMinMaxLayerKernel
_output	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLNormalizationLayerKernel
_output	arm_compute/core/CL/kernels/CLPermuteKernel.h	/^    ICLTensor        *_output;$/;"	m	class:arm_compute::CLPermuteKernel
_output	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLPixelWiseMultiplicationKernel
_output	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLPoolingLayerKernel
_output	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLQuantizationLayerKernel
_output	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^    ICLTensor          *_output;$/;"	m	class:arm_compute::CLROIPoolingLayerKernel
_output	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    ICLTensor         *_output;$/;"	m	class:arm_compute::CLReductionOperationKernel
_output	arm_compute/core/CL/kernels/CLRemapKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLRemapKernel
_output	arm_compute/core/CL/kernels/CLReshapeLayerKernel.h	/^    ICLTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::CLReshapeLayerKernel
_output	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_output	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLLogits1DNormKernel
_output	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLLogits1DShiftExpSumKernel
_output	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLWeightsReshapeKernel
_output	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLWidthConcatenateLayerKernel
_output	arm_compute/core/CL/kernels/CLWinogradFilterTransformKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLWinogradFilterTransformKernel
_output	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
_output	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::CLWinogradOutputTransformKernel
_output	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    ICLTensor       *_output;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_output	arm_compute/core/CPP/ICPPSimpleKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::ICPPSimpleKernel
_output	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^    InternalKeypoint *_output;                   \/**< Array of NEInternalKeypoint *\/$/;"	m	class:arm_compute::CPPCornerCandidatesKernel
_output	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	/^    ITensor           *_output;$/;"	m	class:arm_compute::CPPPermuteKernel
_output	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^    IKeyPointArray   *_output;                \/**< Destination array of IKeyPointArray *\/$/;"	m	class:arm_compute::CPPSortEuclideanDistanceKernel
_output	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::CPPUpsampleKernel
_output	arm_compute/core/GLES_COMPUTE/IGCSimpleKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::IGCSimpleKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	/^    IGCTensor       *_output; \/**< Destination tensor. *\/$/;"	m	class:arm_compute::GCAbsoluteDifferenceKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.h	/^    IGCTensor *_output;$/;"	m	class:arm_compute::GCActivationLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	/^    IGCTensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::GCArithmeticAdditionKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCCol2ImKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCDropoutLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCGEMMInterleave4x4Kernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCGEMMMatrixAdditionKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCGEMMMatrixMultiplyKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCIm2ColKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCNormalizationLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCPixelWiseMultiplicationKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCPoolingLayerKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCLogits1DNormKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCLogits1DShiftExpSumKernel
_output	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	/^    IGCTensor       *_output;$/;"	m	class:arm_compute::GCWeightsReshapeKernel
_output	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	/^    ITensor         *_output;$/;"	m	class:arm_compute::NEAbsoluteDifferenceKernel
_output	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^    ITensor                      *_output;$/;"	m	class:arm_compute::NEActivationLayerKernel
_output	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEArithmeticAdditionKernel
_output	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEArithmeticSubtractionKernel
_output	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    ITensor             *_output;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_output	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	/^    ITensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::NEBitwiseAndKernel
_output	arm_compute/core/NEON/kernels/NEBitwiseNotKernel.h	/^    ITensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::NEBitwiseNotKernel
_output	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	/^    ITensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::NEBitwiseOrKernel
_output	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	/^    ITensor       *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::NEBitwiseXorKernel
_output	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    ITensor                 *_output;    \/**< Destination tensor *\/$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
_output	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    ITensor *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::NEEdgeTraceKernel
_output	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    ITensor     *_output;$/;"	m	class:arm_compute::NEChannelCombineKernel
_output	arm_compute/core/NEON/kernels/NECol2ImKernel.h	/^    ITensor          *_output;$/;"	m	class:arm_compute::NECol2ImKernel
_output	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	/^    void                 *_output;$/;"	m	class:arm_compute::NEColorConvertKernel
_output	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEConvertFullyConnectedWeightsKernel
_output	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    ITensor                  *_output;      \/**< Output tensor *\/$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
_output	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    ILut                  *_output;         \/**< Output with the equalization lookup table. *\/$/;"	m	class:arm_compute::NECumulativeDistributionKernel
_output	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    ITensor             *_output;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
_output	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    ITensor      *_output;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
_output	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    ITensor                                          *_output;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_output	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    ITensor                   *_output;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
_output	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^    ITensor                           *_output;$/;"	m	class:arm_compute::NEDepthwiseVectorToTensorKernel
_output	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^    ITensor                         *_output;$/;"	m	class:arm_compute::NEDepthwiseWeightsReshapeKernel
_output	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEDequantizationLayerKernel
_output	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_output	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    ITensor           *_output;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_output	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^    IImage       *_output;              \/**< inermediate results *\/$/;"	m	class:arm_compute::NEFastCornersKernel
_output	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^    IKeyPointArray *_output;$/;"	m	class:arm_compute::NEFillArrayKernel
_output	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_output	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyKernel
_output	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    ITensor                *_output;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_output	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    ITensor                *_output;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_output	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::INEGEMMLowpReductionKernel
_output	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEGEMMMatrixMultiplyKernel
_output	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    ITensor                            *_output;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
_output	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
_output	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_output	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    IImage       *_output;          \/**< Source image - Harris score *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_output	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^    IDistribution1D              *_output;$/;"	m	class:arm_compute::NEHistogramKernel
_output	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    ITensor          *_output;$/;"	m	class:arm_compute::NEIm2ColKernel
_output	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEL2NormalizeLayerKernel
_output	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NELocallyConnectedMatrixMultiplyKernel
_output	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEMinMaxLayerKernel
_output	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    ITensor                *_output;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_output	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^    ITensor                *_output; \/**< Destination tensor *\/$/;"	m	class:arm_compute::NENonMaximaSuppression3x3Kernel
_output	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    ITensor               *_output;$/;"	m	class:arm_compute::NENormalizationLayerKernel
_output	arm_compute/core/NEON/kernels/NEPermuteKernel.h	/^    ITensor           *_output;$/;"	m	class:arm_compute::NEPermuteKernel
_output	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_output	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    ITensor         *_output;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_output	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEQuantizationLayerKernel
_output	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^    ITensor            *_output;$/;"	m	class:arm_compute::NEROIPoolingLayerKernel
_output	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    ITensor           *_output;$/;"	m	class:arm_compute::NEReductionOperationKernel
_output	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    ITensor       *_output; \/**< Output image *\/$/;"	m	class:arm_compute::NERemapKernel
_output	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    ITensor            *_output;$/;"	m	class:arm_compute::NEScaleKernel
_output	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    ITensor               *_output;$/;"	m	class:arm_compute::NELogits1DSoftmaxKernel
_output	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    ITensor       *_output; \/**< Output *\/$/;"	m	class:arm_compute::NEThresholdKernel
_output	arm_compute/core/NEON/kernels/NETransposeKernel.h	/^    ITensor           *_output;$/;"	m	class:arm_compute::NETransposeKernel
_output	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    ITensor       *_output;                \/**< Output Tensor *\/$/;"	m	class:arm_compute::INEWarpKernel
_output	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	/^    ITensor              *_output;$/;"	m	class:arm_compute::NEWeightsReshapeKernel
_output	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    T             *_output;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_output	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    TOut* const _output;$/;"	m	class:depthwise::DepthwiseConvolution
_output	arm_compute/runtime/CL/functions/CLDeconvolutionLayerUpsample.h	/^    ICLTensor                         *_output;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsample
_output	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    CLImage                   _output;$/;"	m	class:arm_compute::CLFastCorners
_output	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    ITensor                      *_output;              \/**< Output tensor provided by the user. *\/$/;"	m	class:arm_compute::NECannyEdge
_output	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    Image                           _output;$/;"	m	class:arm_compute::NEFastCorners
_output	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    ITensor       *_output;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_output1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output1;$/;"	m	class:arm_compute::CLLSTMLayer
_output2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output2;$/;"	m	class:arm_compute::CLLSTMLayer
_output3	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output3;$/;"	m	class:arm_compute::CLLSTMLayer
_output4	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output4;$/;"	m	class:arm_compute::CLLSTMLayer
_output5	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output5;$/;"	m	class:arm_compute::CLLSTMLayer
_output6	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output6;$/;"	m	class:arm_compute::CLLSTMLayer
_output_batch_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _output_col_stride, _output_row_stride, _output_batch_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_output_cell_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _output_cell_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_output_col2im_kernel	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLCol2ImKernel                         _output_col2im_kernel;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_output_col2im_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCCol2ImKernel                   _output_col2im_kernel;$/;"	m	class:arm_compute::GCConvolutionLayer
_output_col2im_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NECol2ImKernel                                      _output_col2im_kernel;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_output_col2im_kernel	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    NECol2ImKernel                         _output_col2im_kernel;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_output_col_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _output_col_stride, _output_row_stride, _output_batch_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_output_edges	arm_compute/graph/INode.h	/^    std::set<EdgeID>      _output_edges;    \/**< Output edge set *\/$/;"	m	class:arm_compute::graph::INode
_output_multi	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^    ICLMultiImage *_output_multi;$/;"	m	class:arm_compute::CLChannelCombineKernel
_output_multi	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    IMultiImage *_output_multi;$/;"	m	class:arm_compute::NEChannelCombineKernel
_output_nhwc	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _output_nhwc;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_output_nhwc	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _output_nhwc;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_output_projection1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTensor                        _output_projection1;$/;"	m	class:arm_compute::CLLSTMLayer
_output_reshaped	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLTensor                                  _output_reshaped;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_output_reshaped	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _output_reshaped;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_output_row_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _output_col_stride, _output_row_stride, _output_batch_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_output_stage_kernel	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLDirectConvolutionLayerOutputStageKernel _output_stage_kernel;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_output_stage_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEDirectConvolutionLayerOutputStageKernel _output_stage_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_output_stage_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEDirectConvolutionLayerOutputStageKernel _output_stage_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_output_stage_kernel	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    NEDirectConvolutionLayerOutputStageKernel _output_stage_kernel;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
_output_stream	utils/GraphUtils.h	/^    std::ostream            &_output_stream;$/;"	m	class:arm_compute::graph_utils::final
_output_stream	utils/GraphUtils.h	/^    std::ostream     &_output_stream;$/;"	m	class:arm_compute::graph_utils::final
_output_tile_cols	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    static const int           _output_tile_cols = OutputTileCols;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
_output_tile_rows	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    static const int           _output_tile_rows = OutputTileRows;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
_output_transform	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    CLWinogradOutputTransformKernel _output_transform;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
_output_workspace	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    const T       *_output_workspace;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
_output_workspace	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _output_workspace;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_output_x	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    ICLTensor       *_output_x;         \/**< Output tensor - Derivate along the X direction *\/$/;"	m	class:arm_compute::CLDerivativeKernel
_output_x	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    ICLTensor       *_output_x;     \/**< Output image for scharr X *\/$/;"	m	class:arm_compute::CLScharr3x3Kernel
_output_x	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    ICLTensor       *_output_x;    \/**< Output tensor for Sobel X *\/$/;"	m	class:arm_compute::CLSobel3x3Kernel
_output_x	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    ICLTensor       *_output_x;    \/**< X output of horizontal pass *\/$/;"	m	class:arm_compute::CLSobel5x5HorKernel
_output_x	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    ICLTensor       *_output_x;    \/**< X output of sobel *\/$/;"	m	class:arm_compute::CLSobel5x5VertKernel
_output_x	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    ICLTensor       *_output_x;    \/**< X output of horizontal pass *\/$/;"	m	class:arm_compute::CLSobel7x7HorKernel
_output_x	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    ICLTensor       *_output_x;    \/**< X output of sobel *\/$/;"	m	class:arm_compute::CLSobel7x7VertKernel
_output_x	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^    ITensor       *_output_x; \/**< Output tensor - Derivate along the X direction *\/$/;"	m	class:arm_compute::NEDerivativeKernel
_output_x	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    ITensor       *_output_x;     \/**< Output tensor for scharr X *\/$/;"	m	class:arm_compute::NEScharr3x3Kernel
_output_x	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    ITensor       *_output_x;    \/**< Output tensor for sobel X *\/$/;"	m	class:arm_compute::NESobel3x3Kernel
_output_x	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    ITensor       *_output_x;    \/**< X output of horizontal pass *\/$/;"	m	class:arm_compute::NESobel5x5HorKernel
_output_x	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    ITensor *_output_x;    \/**< X output of sobel *\/$/;"	m	class:arm_compute::NESobel5x5VertKernel
_output_x	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    ITensor       *_output_x;    \/**< X output of horizontal pass *\/$/;"	m	class:arm_compute::NESobel7x7HorKernel
_output_x	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    ITensor       *_output_x;    \/**< X output of sobel *\/$/;"	m	class:arm_compute::NESobel7x7VertKernel
_output_y	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    ICLTensor       *_output_y;         \/**< Output tensor - Derivate along the Y direction *\/$/;"	m	class:arm_compute::CLDerivativeKernel
_output_y	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    ICLTensor       *_output_y;     \/**< Output image for scharr Y *\/$/;"	m	class:arm_compute::CLScharr3x3Kernel
_output_y	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    ICLTensor       *_output_y;    \/**< Output tensor for Sobel Y *\/$/;"	m	class:arm_compute::CLSobel3x3Kernel
_output_y	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    ICLTensor       *_output_y;    \/**< Y output of horizontal pass *\/$/;"	m	class:arm_compute::CLSobel5x5HorKernel
_output_y	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    ICLTensor       *_output_y;    \/**< Y output of sobel *\/$/;"	m	class:arm_compute::CLSobel5x5VertKernel
_output_y	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    ICLTensor       *_output_y;    \/**< Y output of horizontal pass *\/$/;"	m	class:arm_compute::CLSobel7x7HorKernel
_output_y	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    ICLTensor       *_output_y;    \/**< Y output of sobel *\/$/;"	m	class:arm_compute::CLSobel7x7VertKernel
_output_y	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^    ITensor       *_output_y; \/**< Output tensor - Derivate along the Y direction *\/$/;"	m	class:arm_compute::NEDerivativeKernel
_output_y	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    ITensor       *_output_y;     \/**< Output tensor for scharr Y *\/$/;"	m	class:arm_compute::NEScharr3x3Kernel
_output_y	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    ITensor       *_output_y;    \/**< Output tensor for sobel Y *\/$/;"	m	class:arm_compute::NESobel3x3Kernel
_output_y	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    ITensor       *_output_y;    \/**< Y output of horizontal pass *\/$/;"	m	class:arm_compute::NESobel5x5HorKernel
_output_y	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    ITensor *_output_y;    \/**< Y output of sobel *\/$/;"	m	class:arm_compute::NESobel5x5VertKernel
_output_y	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    ITensor       *_output_y;    \/**< Y output of horizontal pass *\/$/;"	m	class:arm_compute::NESobel7x7HorKernel
_output_y	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    ITensor       *_output_y;    \/**< Y output of sobel *\/$/;"	m	class:arm_compute::NESobel7x7VertKernel
_outputs	arm_compute/graph/INode.h	/^    std::vector<TensorID> _outputs;         \/**< Output of the node *\/$/;"	m	class:arm_compute::graph::INode
_owner	arm_compute/runtime/CL/CLTensorAllocator.h	/^    CLTensor      *_owner;                   \/**< Owner of the allocator *\/$/;"	m	class:arm_compute::CLTensorAllocator
_owner	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    GCTensor                        *_owner;                   \/**< Owner of the allocator *\/$/;"	m	class:arm_compute::GCTensorAllocator
_owner	arm_compute/runtime/TensorAllocator.h	/^    Tensor      *_owner;                   \/**< Owner of the allocator *\/$/;"	m	class:arm_compute::TensorAllocator
_owner	src/runtime/TensorAllocator.cpp	/^      _owner(o._owner)$/;"	f
_pad_bottom	arm_compute/core/Types.h	/^    unsigned int _pad_bottom;$/;"	m	class:arm_compute::HOGNormType::PadStrideInfo
_pad_left	arm_compute/core/Types.h	/^    unsigned int _pad_left;$/;"	m	class:arm_compute::HOGNormType::PadStrideInfo
_pad_right	arm_compute/core/Types.h	/^    unsigned int _pad_right;$/;"	m	class:arm_compute::HOGNormType::PadStrideInfo
_pad_stride_info	arm_compute/core/Types.h	/^    PadStrideInfo _pad_stride_info;$/;"	m	class:arm_compute::HOGNormType::PoolingLayerInfo
_pad_top	arm_compute/core/Types.h	/^    unsigned int _pad_top;$/;"	m	class:arm_compute::HOGNormType::PadStrideInfo
_padding	arm_compute/core/TensorInfo.h	/^    PaddingSize      _padding;$/;"	m	class:arm_compute::final
_padding_same	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const bool _padding_same;$/;"	m	class:depthwise::DepthwiseConvolution
_padding_type	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const PaddingType _padding_type;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_parallel_vector_size	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    static const unsigned int _parallel_vector_size;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_parallel_vector_size	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^const unsigned int CLLogits1DMaxShiftExpSumKernel::_parallel_vector_size = 4;$/;"	m	class:CLLogits1DMaxShiftExpSumKernel	file:
_param_it	tests/datasets/BatchNormalizationLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _param_it;$/;"	m	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
_param_it	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _param_it;$/;"	m	struct:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset::iterator
_params_it	tests/datasets/OpticalFlowDataset.h	/^        std::vector<OpticalFlowParameters>::const_iterator _params_it;$/;"	m	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
_parent	arm_compute/core/SubTensorInfo.h	/^    ITensorInfo *_parent;$/;"	m	class:arm_compute::final
_parent	arm_compute/runtime/CL/CLSubTensor.h	/^    ICLTensor            *_parent;$/;"	m	class:arm_compute::CLSubTensor
_parent	arm_compute/runtime/SubTensor.h	/^    ITensor              *_parent;$/;"	m	class:arm_compute::SubTensor
_parent	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        const GemmInterleaved<strategy, To, Tr> &_parent;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_parent	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^        profiler &_parent;$/;"	m	class:arm_gemm::profiler::ScopedProfilerClass
_parent_handle	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    ITensorHandle           *_parent_handle; \/**< Parent handle *\/$/;"	m	class:arm_compute::graph::backends::final
_parent_handle	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    ITensorHandle         *_parent_handle; \/**< Parent handle *\/$/;"	m	class:arm_compute::graph::backends::final
_passes	arm_compute/graph/PassManager.h	/^    std::vector<std::unique_ptr<IGraphMutator>> _passes; \/**< Vector of graph passes *\/$/;"	m	class:arm_compute::graph::final
_pattern	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    MatrixPattern           _pattern;$/;"	m	class:arm_compute::NENonLinearFilterKernel
_percpu	arm_compute/core/CPP/CPPTypes.h	/^    std::vector<CPUModel> _percpu        = {};$/;"	m	class:arm_compute::final
_perf_config	tests/framework/instruments/PMU.h	/^    perf_event_attr _perf_config;$/;"	m	class:arm_compute::test::framework::PMU
_perform_cell_clipping	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool                            _perform_cell_clipping;$/;"	m	class:arm_compute::CLLSTMLayer
_perform_projection_clipping	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool                            _perform_projection_clipping;$/;"	m	class:arm_compute::CLLSTMLayer
_perm	arm_compute/core/CL/kernels/CLPermuteKernel.h	/^    PermutationVector _perm;$/;"	m	class:arm_compute::CLPermuteKernel
_perm	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	/^    PermutationVector  _perm;$/;"	m	class:arm_compute::CPPPermuteKernel
_perm	arm_compute/core/NEON/kernels/NEPermuteKernel.h	/^    PermutationVector  _perm;$/;"	m	class:arm_compute::NEPermuteKernel
_permute_8h	documentation/_permute_8h.js	/^var _permute_8h =$/;"	v
_permute_input	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEPermute                                 _permute_input;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_permute_input	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    CPPPermute     _permute_input;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_permute_output	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEPermute                                 _permute_output;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_permute_output	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    CPPPermute     _permute_output;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_permute_weights	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEPermute                                 _permute_weights;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_permute_weights	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    CPPPermute     _permute_weights;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_phase	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_phase;     \/**< Destination tensor - Quantized phase *\/$/;"	m	class:arm_compute::CLGradientKernel
_phase	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    const ICLTensor *_phase;     \/**< Source tensor - Quantized phase. *\/$/;"	m	class:arm_compute::CLEdgeNonMaxSuppressionKernel
_phase	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    ICLTensor       *_phase;     \/**< Output - Phase. *\/$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
_phase	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    ITensor          *_phase;     \/**< Destination tensor - Quantized phase *\/$/;"	m	class:arm_compute::NEGradientKernel
_phase	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    const ITensor           *_phase;     \/**< Source tensor - Quantized phase *\/$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
_phase	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    ITensor                  *_phase;     \/**< Output - Phase *\/$/;"	m	class:arm_compute::NEMagnitudePhaseFP16Kernel
_phase	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    ITensor                  *_phase;     \/**< Output - Phase *\/$/;"	m	class:arm_compute::NEMagnitudePhaseKernel
_phase	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _phase;                                           \/**< Source tensor - Phase. *\/$/;"	m	class:arm_compute::CLCannyEdge
_phase	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    CLTensor                      _phase;$/;"	m	class:arm_compute::CLHOGDescriptor
_phase	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    CLTensor                                                      _phase;$/;"	m	class:arm_compute::CLHOGMultiDetection
_phase	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    Tensor                        _phase;               \/**< Source tensor - Phase *\/$/;"	m	class:arm_compute::NECannyEdge
_phase	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    Tensor                        _phase;$/;"	m	class:arm_compute::NEHOGDescriptor
_phase	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    Tensor                                                        _phase;$/;"	m	class:arm_compute::NEHOGMultiDetection
_phase_8h	documentation/_phase_8h.js	/^var _phase_8h =$/;"	v
_phase_scale	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    float          _phase_scale;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
_phase_type	arm_compute/core/HOGInfo.h	/^    PhaseType   _phase_type;$/;"	m	class:arm_compute::HOGInfo
_pixel_wise_multiplication_8h	documentation/_pixel_wise_multiplication_8h.js	/^var _pixel_wise_multiplication_8h =$/;"	v
_pixelwise_mul_cell_state1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLPixelWiseMultiplicationKernel _pixelwise_mul_cell_state1;$/;"	m	class:arm_compute::CLLSTMLayer
_pixelwise_mul_cell_state2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLPixelWiseMultiplicationKernel _pixelwise_mul_cell_state2;$/;"	m	class:arm_compute::CLLSTMLayer
_pixelwise_mul_output_state	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLPixelWiseMultiplicationKernel _pixelwise_mul_output_state;$/;"	m	class:arm_compute::CLLSTMLayer
_plane	arm_compute/runtime/CL/CLMultiImage.h	/^    std::array<CLImage, 3> _plane; \/* Instance CLImage to hold the planar's information *\/$/;"	m	class:arm_compute::CLMultiImage
_plane	arm_compute/runtime/MultiImage.h	/^    std::array<Image, 3> _plane; \/* Instance Image to hold the planar's information *\/$/;"	m	class:arm_compute::MultiImage
_planes	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^    std::array<const ICLTensor *, 4> _planes;$/;"	m	class:arm_compute::CLChannelCombineKernel
_planes	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    std::array<const ITensor *, 4> _planes;$/;"	m	class:arm_compute::NEChannelCombineKernel
_pointwise_conv	arm_compute/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.h	/^    CLDirectConvolutionLayer    _pointwise_conv;$/;"	m	class:arm_compute::CLDepthwiseSeparableConvolutionLayer
_pointwise_conv	arm_compute/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.h	/^    NEDirectConvolutionLayer    _pointwise_conv;$/;"	m	class:arm_compute::NEDepthwiseSeparableConvolutionLayer
_pointwise_infos_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<PadStrideInfo>::const_iterator _pointwise_infos_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_policy	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    ConvertPolicy _policy;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
_policy	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    InterpolationPolicy _policy;$/;"	m	class:arm_compute::NEScaleKernel
_policy_it	tests/datasets/ScaleLayerDataset.h	/^        std::vector<InterpolationPolicy>::const_iterator _policy_it;$/;"	m	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
_pool	arm_compute/runtime/MemoryGroupBase.h	/^    IMemoryPool                    *_pool;           \/**< Memory pool that the group is scheduled with *\/$/;"	m	class:arm_compute::MemoryGroupBase
_pool_info	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    PoolingLayerInfo _pool_info;$/;"	m	class:arm_compute::CLPoolingLayerKernel
_pool_info	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^    ROIPoolingLayerInfo _pool_info;$/;"	m	class:arm_compute::CLROIPoolingLayerKernel
_pool_info	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    PoolingLayerInfo _pool_info;$/;"	m	class:arm_compute::GCPoolingLayerKernel
_pool_info	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    PoolingLayerInfo _pool_info;$/;"	m	class:arm_compute::NEPoolingLayerKernel
_pool_info	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^    ROIPoolingLayerInfo _pool_info;$/;"	m	class:arm_compute::NEROIPoolingLayerKernel
_pool_info	arm_compute/graph/frontend/Layers.h	/^    PoolingLayerInfo _pool_info;$/;"	m	class:arm_compute::graph::frontend::final
_pool_mgr	arm_compute/runtime/MemoryManagerOnDemand.h	/^    std::shared_ptr<IPoolManager>     _pool_mgr;     \/**< Memory pool manager *\/$/;"	m	class:arm_compute::MemoryManagerOnDemand
_pool_size	arm_compute/core/Types.h	/^    Size2D        _pool_size;$/;"	m	class:arm_compute::HOGNormType::PoolingLayerInfo
_pool_type	arm_compute/core/Types.h	/^    PoolingType   _pool_type;$/;"	m	class:arm_compute::HOGNormType::PoolingLayerInfo
_pooled_height	arm_compute/core/Types.h	/^    unsigned int _pooled_height;$/;"	m	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
_pooled_width	arm_compute/core/Types.h	/^    unsigned int _pooled_width;$/;"	m	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
_pooling_layer_8h	documentation/_pooling_layer_8h.js	/^var _pooling_layer_8h =$/;"	v
_pooling_layer_kernel	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^    NEPoolingLayerKernel _pooling_layer_kernel;$/;"	m	class:arm_compute::NEPoolingLayer
_ppm_path	utils/GraphUtils.h	/^    const std::string              _ppm_path;$/;"	m	class:arm_compute::graph_utils::final
_prefix	tests/framework/instruments/OpenCLTimer.h	/^    std::string                                     _prefix;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
_prefix	tests/framework/instruments/SchedulerTimer.cpp	/^    std::string                             _prefix;$/;"	m	class:arm_compute::test::framework::final	file:
_preprocessor	utils/GraphUtils.h	/^    std::unique_ptr<IPreprocessor> _preprocessor;$/;"	m	class:arm_compute::graph_utils::final
_pretranspose	arm_compute/runtime/NEON/AssemblyHelper.h	/^    ITensor *_pretranspose;$/;"	m	class:arm_compute::final
_pretransposed	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const bool         _pretransposed;$/;"	m	class:arm_gemm::GemmInterleaved
_preventDefault	documentation/resize.js	/^  var _preventDefault = function(evt) { evt.preventDefault(); };$/;"	f
_printers	arm_compute/core/utils/logging/Logger.h	/^    std::vector<std::shared_ptr<Printer>>    _printers;$/;"	m	class:arm_compute::logging::Logger
_printers_8cpp	documentation/_printers_8cpp.js	/^var _printers_8cpp =$/;"	v
_producer	arm_compute/graph/Edge.h	/^    INode       *_producer;$/;"	m	class:arm_compute::graph::final
_producer_idx	arm_compute/graph/Edge.h	/^    unsigned int _producer_idx;$/;"	m	class:arm_compute::graph::final
_program	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint                       _program;                              \/**< Linked program id *\/$/;"	m	class:arm_compute::GCKernel
_program_source_map	arm_compute/core/CL/CLKernelLibrary.h	/^    static const std::map<std::string, std::string> _program_source_map; \/**< Contains sources for all programs.$/;"	m	class:arm_compute::CLKernelLibrary
_program_source_map	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    static const std::map<std::string, std::string> _program_source_map; \/**< Contains sources for all programs.$/;"	m	class:arm_compute::GCKernelLibrary
_program_source_map	src/core/CL/CLKernelLibrary.cpp	/^const std::map<std::string, std::string> CLKernelLibrary::_program_source_map =$/;"	m	class:CLKernelLibrary	file:
_program_source_map	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^const std::map<std::string, std::string> GCKernelLibrary::_program_source_map =$/;"	m	class:GCKernelLibrary	file:
_programs_map	arm_compute/core/CL/CLKernelLibrary.h	/^    mutable std::map<std::string, const Program>    _programs_map;       \/**< Map with all already loaded program data. *\/$/;"	m	class:arm_compute::CLKernelLibrary
_programs_map	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    mutable std::map<std::string, const GCProgram>  _programs_map;       \/**< Map with all already loaded program data. *\/$/;"	m	class:arm_compute::GCKernelLibrary
_projection_bias	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_projection_bias;$/;"	m	class:arm_compute::LSTMParams
_projection_clip	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLActivationLayerKernel         _projection_clip;$/;"	m	class:arm_compute::CLLSTMLayer
_projection_threshold_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<float>::const_iterator               _projection_threshold_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_projection_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_projection_weights;$/;"	m	class:arm_compute::LSTMParams
_ptr	arm_compute/core/Helpers.h	/^    uint8_t *_ptr;$/;"	m	class:arm_compute::Iterator
_ptr	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void *_ptr;$/;"	m	class:arm_compute::ICLSVMMemoryRegion
_ptr	arm_compute/runtime/MemoryRegion.h	/^    uint8_t                 *_ptr;$/;"	m	class:arm_compute::final
_pyramid	arm_compute/runtime/CL/CLPyramid.h	/^    std::unique_ptr<CLTensor[]> _pyramid;$/;"	m	class:arm_compute::CLPyramid
_pyramid	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    CLPyramid *_pyramid;$/;"	m	class:arm_compute::CLGaussianPyramid
_pyramid	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    IPyramid      *_pyramid;$/;"	m	class:arm_compute::NEGaussianPyramid
_pyramid_scale	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    float                       _pyramid_scale;$/;"	m	class:arm_compute::NELKTrackerKernel
_q_asymm8_8h	documentation/_q_asymm8_8h.js	/^var _q_asymm8_8h =$/;"	v
_quant_info	arm_compute/graph/frontend/Layers.h	/^    const QuantizationInfo _quant_info;$/;"	m	class:arm_compute::graph::frontend::final
_quantization_info	arm_compute/core/TensorInfo.h	/^    QuantizationInfo _quantization_info;$/;"	m	class:arm_compute::final
_quantization_layer_8h	documentation/_quantization_layer_8h.js	/^var _quantization_layer_8h =$/;"	v
_quantize_kernel	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	/^    CLQuantizationLayerKernel _quantize_kernel;$/;"	m	class:arm_compute::CLQuantizationLayer
_quantize_kernel	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	/^    NEQuantizationLayerKernel _quantize_kernel;$/;"	m	class:arm_compute::NEQuantizationLayer
_queue	arm_compute/runtime/CL/CLScheduler.h	/^    cl::CommandQueue _queue;$/;"	m	class:arm_compute::CLScheduler
_queue	arm_compute/runtime/CL/CLTuner.h	/^    cl::CommandQueue _queue;$/;"	m	class:arm_compute::CLTuner
_queue_profiler	arm_compute/runtime/CL/CLTuner.h	/^    cl::CommandQueue _queue_profiler;$/;"	m	class:arm_compute::CLTuner
_r_n_n_layer_8cpp	documentation/_r_n_n_layer_8cpp.js	/^var _r_n_n_layer_8cpp =$/;"	v
_range	arm_compute/core/IDistribution1D.h	/^    uint32_t _range;    \/**< The total number of consecutive values of the distribution interval *\/$/;"	m	class:arm_compute::IDistribution1D
_range_dataset_8h	documentation/_range_dataset_8h.js	/^var _range_dataset_8h =$/;"	v
_raw_data	tests/framework/instruments/Measurement.h	/^    std::list<std::string> _raw_data;$/;"	m	struct:arm_compute::test::framework::Measurement
_real_function	tests/framework/instruments/OpenCLTimer.h	/^    std::function<decltype(clEnqueueNDRangeKernel)> _real_function;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
_real_graph_function	tests/framework/instruments/OpenCLTimer.h	/^    std::function<decltype(graph::execute_task)>    _real_graph_function;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
_real_graph_function	tests/framework/instruments/SchedulerTimer.h	/^    std::function<decltype(graph::execute_task)> _real_graph_function;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
_real_scheduler	tests/framework/instruments/SchedulerTimer.cpp	/^    IScheduler                             &_real_scheduler;$/;"	m	class:arm_compute::test::framework::final	file:
_real_scheduler	tests/framework/instruments/SchedulerTimer.h	/^    IScheduler                                  *_real_scheduler;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
_real_scheduler_type	tests/framework/instruments/SchedulerTimer.h	/^    Scheduler::Type                              _real_scheduler_type;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
_recorded	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_recorded;         \/**< Marks recorded elements *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_recorded	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _visited, _recorded, _l1_list_counter, _l1_stack; \/**< Temporary tensors *\/$/;"	m	class:arm_compute::CLCannyEdge
_recurrent_to_input_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *_recurrent_to_input_weights;$/;"	m	class:arm_compute::LSTMParams
_recurrent_weights_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _recurrent_weights_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_recurrent_weights_it	tests/datasets/RNNLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _recurrent_weights_it;$/;"	m	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
_reduce_func	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^    CLReductionOperation     _reduce_func;$/;"	m	class:arm_compute::CLL2NormalizeLayer
_reduce_func	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^    NEReductionOperation     _reduce_func;$/;"	m	class:arm_compute::NEL2NormalizeLayer
_reduction_axis	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    unsigned int       _reduction_axis;$/;"	m	class:arm_compute::CLReductionOperationKernel
_reduction_axis	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    unsigned int       _reduction_axis;$/;"	m	class:arm_compute::NEReductionOperationKernel
_reduction_kernel	arm_compute/runtime/NEON/functions/NEReductionOperation.h	/^    NEReductionOperationKernel _reduction_kernel;$/;"	m	class:arm_compute::NEReductionOperation
_reduction_operation_8h	documentation/_reduction_operation_8h.js	/^var _reduction_operation_8h =$/;"	v
_region	arm_compute/runtime/CL/CLMemory.h	/^    ICLMemoryRegion                 *_region;$/;"	m	class:arm_compute::CLMemory
_region	arm_compute/runtime/Memory.h	/^    IMemoryRegion                 *_region;$/;"	m	class:arm_compute::Memory
_region_owned	arm_compute/runtime/CL/CLMemory.h	/^    std::shared_ptr<ICLMemoryRegion> _region_owned;$/;"	m	class:arm_compute::CLMemory
_region_owned	arm_compute/runtime/Memory.h	/^    std::shared_ptr<IMemoryRegion> _region_owned;$/;"	m	class:arm_compute::Memory
_registered_backends	arm_compute/graph/backends/BackendRegistry.h	/^    std::map<Target, std::unique_ptr<IDeviceBackend>> _registered_backends;$/;"	m	class:arm_compute::graph::backends::final
_remap_8h	documentation/_remap_8h.js	/^var _remap_8h =$/;"	v
_reserved_loggers	arm_compute/core/utils/logging/LoggerRegistry.h	/^    static std::set<std::string> _reserved_loggers;$/;"	m	class:arm_compute::logging::final
_reshape_b_only_on_first_run	arm_compute/core/Types.h	/^    const bool      _reshape_b_only_on_first_run;$/;"	m	class:arm_compute::HOGNormType::GEMMInfo
_reshape_b_only_on_first_run	arm_compute/runtime/CL/functions/CLGEMM.h	/^    bool                       _reshape_b_only_on_first_run;$/;"	m	class:arm_compute::CLGEMM
_reshape_b_only_on_first_run	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    bool                               _reshape_b_only_on_first_run;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_reshape_b_only_on_first_run	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    bool                       _reshape_b_only_on_first_run;$/;"	m	class:arm_compute::GCGEMM
_reshape_b_only_on_first_run	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    bool                       _reshape_b_only_on_first_run;$/;"	m	class:arm_compute::NEGEMM
_reshape_b_only_on_first_run	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    bool                               _reshape_b_only_on_first_run;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_reshape_info	arm_compute/core/Types.h	/^    GEMMReshapeInfo _reshape_info;$/;"	m	class:arm_compute::HOGNormType::GEMMInfo
_reshape_layer_8h	documentation/_reshape_layer_8h.js	/^var _reshape_layer_8h =$/;"	v
_reshape_weights	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLConvolutionLayerReshapeWeights                    _reshape_weights;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_reshape_weights	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCConvolutionLayerReshapeWeights _reshape_weights;$/;"	m	class:arm_compute::GCConvolutionLayer
_reshape_weights	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEConvolutionLayerReshapeWeights                    _reshape_weights;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_reshape_weights_kernel	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLFullyConnectedLayerReshapeWeights                 _reshape_weights_kernel;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_reshape_weights_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCFullyConnectedLayerReshapeWeights _reshape_weights_kernel;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_reshape_weights_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NEFullyConnectedLayerReshapeWeights _reshape_weights_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_reshape_weights_output	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    CLTensor                                            _reshape_weights_output;$/;"	m	class:arm_compute::CLFullyConnectedLayer
_reshape_weights_output	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    GCTensor                            _reshape_weights_output;$/;"	m	class:arm_compute::GCFullyConnectedLayer
_reshape_weights_output	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    Tensor                              _reshape_weights_output;$/;"	m	class:arm_compute::NEFullyConnectedLayer
_reshaped_kernel	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    bool           _reshaped_kernel;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_result_fixedpoint_multiplier	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    int              _result_fixedpoint_multiplier;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
_result_fixedpoint_multiplier	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    int                _result_fixedpoint_multiplier;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_result_fixedpoint_multiplier	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    int                     _result_fixedpoint_multiplier;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_result_mult_int	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    int                     _result_mult_int;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_result_offset	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    int                     _result_offset;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_result_offset_after_shift	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    int              _result_offset_after_shift;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
_result_offset_after_shift	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    int                _result_offset_after_shift;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_result_offset_after_shift	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    int                     _result_offset_after_shift;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_result_shift	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    int              _result_shift;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
_result_shift	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    int                _result_shift;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
_result_shift	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    int                     _result_shift;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
_result_shift	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    int                     _result_shift;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
_roi_kernel	arm_compute/runtime/NEON/functions/NEROIPoolingLayer.h	/^    NEROIPoolingLayerKernel _roi_kernel;$/;"	m	class:arm_compute::NEROIPoolingLayer
_rois	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^    const ICLROIArray *_rois;$/;"	m	class:arm_compute::CLROIPoolingLayerKernel
_rois	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^    const IROIArray    *_rois;$/;"	m	class:arm_compute::NEROIPoolingLayerKernel
_round_type	arm_compute/core/Types.h	/^    DimensionRoundingType _round_type;$/;"	m	class:arm_compute::HOGNormType::PadStrideInfo
_rounding_8h	documentation/_rounding_8h.js	/^var _rounding_8h =$/;"	v
_rounding_policy	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    RoundingPolicy   _rounding_policy;$/;"	m	class:arm_compute::graph::final
_run_addition	arm_compute/runtime/CL/functions/CLGEMM.h	/^    bool                       _run_addition;$/;"	m	class:arm_compute::CLGEMM
_run_addition	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    bool                       _run_addition;$/;"	m	class:arm_compute::GCGEMM
_run_addition	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    bool                       _run_addition;$/;"	m	class:arm_compute::NEGEMM
_run_cifg_opt	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool                            _run_cifg_opt;$/;"	m	class:arm_compute::CLLSTMLayer
_run_derivative_x	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    bool             _run_derivative_x; \/**< Do we need to run Derivative X ? *\/$/;"	m	class:arm_compute::CLDerivativeKernel
_run_derivative_y	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    bool             _run_derivative_y; \/**< Do we need to run Derivative Y ? *\/$/;"	m	class:arm_compute::CLDerivativeKernel
_run_func	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    Im2ColFunction _run_func;$/;"	m	class:arm_compute::CLIm2ColKernel
_run_func	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    Im2ColFunction _run_func;$/;"	m	class:arm_compute::GCIm2ColKernel
_run_in_place	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	/^    bool       _run_in_place;$/;"	m	class:arm_compute::CLActivationLayerKernel
_run_in_place	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    bool             _run_in_place;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_run_mag	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    bool             _run_mag;   \/**< Calculate magnitude ? *\/$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
_run_optimized	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    bool                                              _run_optimized;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_run_peephole_opt	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool                            _run_peephole_opt;$/;"	m	class:arm_compute::CLLSTMLayer
_run_phase	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    bool             _run_phase; \/**< Calculate phase ? *\/$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
_run_scharr_x	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    bool             _run_scharr_x; \/**< Do we need to run Scharr X ? *\/$/;"	m	class:arm_compute::CLScharr3x3Kernel
_run_scharr_x	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    bool           _run_scharr_x; \/**< Do we need to run Scharr X ? *\/$/;"	m	class:arm_compute::NEScharr3x3Kernel
_run_scharr_y	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    bool             _run_scharr_y; \/**< Do we need to run Scharr Y ? *\/$/;"	m	class:arm_compute::CLScharr3x3Kernel
_run_scharr_y	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    bool           _run_scharr_y; \/**< Do we need to run Scharr Y ? *\/$/;"	m	class:arm_compute::NEScharr3x3Kernel
_run_sobel_x	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    bool             _run_sobel_x; \/**< Do we need to run Sobel X ? *\/$/;"	m	class:arm_compute::CLSobel3x3Kernel
_run_sobel_x	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    bool             _run_sobel_x; \/**< Do we need to run Sobel X ? *\/$/;"	m	class:arm_compute::CLSobel5x5HorKernel
_run_sobel_x	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    bool             _run_sobel_x; \/**< Do we need to run sobel X? *\/$/;"	m	class:arm_compute::CLSobel5x5VertKernel
_run_sobel_x	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    bool             _run_sobel_x; \/**< Do we need to run Sobel X ? *\/$/;"	m	class:arm_compute::CLSobel7x7HorKernel
_run_sobel_x	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    bool             _run_sobel_x; \/**< Do we need to run sobel X? *\/$/;"	m	class:arm_compute::CLSobel7x7VertKernel
_run_sobel_x	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    bool           _run_sobel_x; \/**< Do we need to run Sobel X ? *\/$/;"	m	class:arm_compute::NESobel3x3Kernel
_run_sobel_x	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    bool           _run_sobel_x; \/**< Do we need to run Sobel X? *\/$/;"	m	class:arm_compute::NESobel5x5HorKernel
_run_sobel_x	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    bool     _run_sobel_x; \/**< Do we need to run sobel X? *\/$/;"	m	class:arm_compute::NESobel5x5VertKernel
_run_sobel_x	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    bool           _run_sobel_x; \/**< Do we need to run Sobel X? *\/$/;"	m	class:arm_compute::NESobel7x7HorKernel
_run_sobel_x	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    bool           _run_sobel_x; \/**< Do we need to run sobel X? *\/$/;"	m	class:arm_compute::NESobel7x7VertKernel
_run_sobel_y	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    bool             _run_sobel_y; \/**< Do we need to run Sobel Y ? *\/$/;"	m	class:arm_compute::CLSobel3x3Kernel
_run_sobel_y	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    bool             _run_sobel_y; \/**< Do we need to run Sobel Y ? *\/$/;"	m	class:arm_compute::CLSobel5x5HorKernel
_run_sobel_y	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    bool             _run_sobel_y; \/**< Do we need to run sobel Y? *\/$/;"	m	class:arm_compute::CLSobel5x5VertKernel
_run_sobel_y	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    bool             _run_sobel_y; \/**< Do we need to run Sobel Y ? *\/$/;"	m	class:arm_compute::CLSobel7x7HorKernel
_run_sobel_y	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    bool             _run_sobel_y; \/**< Do we need to run sobel Y? *\/$/;"	m	class:arm_compute::CLSobel7x7VertKernel
_run_sobel_y	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    bool           _run_sobel_y; \/**< Do we need to run Sobel Y ? *\/$/;"	m	class:arm_compute::NESobel3x3Kernel
_run_sobel_y	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    bool           _run_sobel_y; \/**< Do we need to run Sobel Y? *\/$/;"	m	class:arm_compute::NESobel5x5HorKernel
_run_sobel_y	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    bool     _run_sobel_y; \/**< Do we need to run sobel Y? *\/$/;"	m	class:arm_compute::NESobel5x5VertKernel
_run_sobel_y	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    bool           _run_sobel_y; \/**< Do we need to run Sobel Y? *\/$/;"	m	class:arm_compute::NESobel7x7HorKernel
_run_sobel_y	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    bool           _run_sobel_y; \/**< Do we need to run sobel Y? *\/$/;"	m	class:arm_compute::NESobel7x7VertKernel
_run_vector_matrix_multiplication	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    bool                       _run_vector_matrix_multiplication;$/;"	m	class:arm_compute::NEGEMM
_run_vector_matrix_multiplication	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    bool                               _run_vector_matrix_multiplication;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_s	arm_compute/graph/frontend/SubStream.h	/^    IStream &_s; \/**< Parent stream (assume that the lifetime of the parent is longer) *\/$/;"	m	class:arm_compute::graph::frontend::final
_sampling_policy_it	tests/datasets/ScaleLayerDataset.h	/^        std::vector<SamplingPolicy>::const_iterator      _sampling_policy_it;$/;"	m	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
_scale	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    uint32_t                  _scale;       \/**< Scale of the convolution *\/$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
_scale	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    uint32_t _scale;                                             \/**< scale of the convolution *\/$/;"	m	class:arm_compute::NEConvolutionKernel
_scale	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    uint32_t _scale;                            \/**< Convolution's scale *\/$/;"	m	class:arm_compute::NESeparableConvolutionVertKernel
_scale	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    float          _scale;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_scale	arm_compute/core/PyramidInfo.h	/^    float       _scale;$/;"	m	class:arm_compute::PyramidInfo
_scale_8h	documentation/_scale_8h.js	/^var _scale_8h =$/;"	v
_scale_exponent	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    int            _scale_exponent;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
_scale_f	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^    CLDeconvolutionLayerUpsample _scale_f;$/;"	m	class:arm_compute::CLDeconvolutionLayer
_scale_factor	tests/framework/instruments/SchedulerTimer.h	/^    ScaleFactor                                  _scale_factor;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
_scale_kernel	arm_compute/runtime/NEON/functions/NEScale.h	/^    NEScaleKernel      _scale_kernel;   \/**< Kernel to perform the scaling *\/$/;"	m	class:arm_compute::NEScale
_scale_nearest	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    std::unique_ptr<CLScaleKernel[]> _scale_nearest;$/;"	m	class:arm_compute::CLGaussianPyramidOrb
_scale_nearest	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    std::unique_ptr<NEScale[]>       _scale_nearest;$/;"	m	class:arm_compute::NEGaussianPyramidOrb
_scale_x	arm_compute/core/IAccessWindow.h	/^    float        _scale_x;$/;"	m	class:arm_compute::AccessWindowRectangle
_scale_x_it	tests/datasets/ScaleLayerDataset.h	/^        std::vector<float>::const_iterator               _scale_x_it;$/;"	m	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
_scale_y	arm_compute/core/IAccessWindow.h	/^    float        _scale_y;$/;"	m	class:arm_compute::AccessWindowRectangle
_scale_y_it	tests/datasets/ScaleLayerDataset.h	/^        std::vector<float>::const_iterator               _scale_y_it;$/;"	m	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
_scaled_output	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^    CLTensor                     _scaled_output;$/;"	m	class:arm_compute::CLDeconvolutionLayer
_scaled_output	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    Tensor             _scaled_output;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_scalef	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^    std::unique_ptr<CLScale[]>              _scalef;$/;"	m	class:arm_compute::CLLaplacianReconstruct
_scalef	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^    std::unique_ptr<NEScale[]>              _scalef;$/;"	m	class:arm_compute::NELaplacianReconstruct
_schaar_8cpp	documentation/_schaar_8cpp.js	/^var _schaar_8cpp =$/;"	v
_scharr_8h	documentation/_scharr_8h.js	/^var _scharr_8h =$/;"	v
_scharr_gx	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLTensor[]>                _scharr_gx;$/;"	m	class:arm_compute::CLOpticalFlow
_scharr_gx	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    std::unique_ptr<Tensor[]>            _scharr_gx;$/;"	m	class:arm_compute::NEOpticalFlow
_scharr_gy	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLTensor[]>                _scharr_gy;$/;"	m	class:arm_compute::CLOpticalFlow
_scharr_gy	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    std::unique_ptr<Tensor[]>            _scharr_gy;$/;"	m	class:arm_compute::NEOpticalFlow
_scheduler_type	arm_compute/runtime/Scheduler.h	/^    static Type                        _scheduler_type;$/;"	m	class:arm_compute::Scheduler
_score	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CLImage                             _score;                 \/**< Source image - Harris score *\/$/;"	m	class:arm_compute::CLHarrisCorners
_score	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    Image                                 _score;                 \/**< Source image - Harris score *\/$/;"	m	class:arm_compute::NEHarrisCorners
_scratch_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _scratch_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_sd	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^    const IGCTensor *_sd;$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayerKernel
_seed	tests/AssetsLibrary.h	/^    std::random_device::result_type _seed;$/;"	m	class:arm_compute::test::final
_seed	utils/GraphUtils.h	/^    std::random_device::result_type _seed;$/;"	m	class:arm_compute::graph_utils::final
_sem	arm_compute/runtime/PoolManager.h	/^    std::unique_ptr<arm_compute::Semaphore> _sem;            \/**< Semaphore to control the queues *\/$/;"	m	class:arm_compute::PoolManager
_sensitivity	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    float           _sensitivity;     \/**< Sensitivity value *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_sensitivity	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    float         _sensitivity;     \/**< Sensitivity value *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_serial_vector_size	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    static const unsigned int _serial_vector_size;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_serial_vector_size	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^const unsigned int CLLogits1DMaxShiftExpSumKernel::_serial_vector_size = 8;$/;"	m	class:CLLogits1DMaxShiftExpSumKernel	file:
_shader_arguments	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::vector<unsigned int>    _shader_arguments;                     \/**< Store all the values of the shader arguments *\/$/;"	m	class:arm_compute::GCKernel
_shader_params_binding_point	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint                       _shader_params_binding_point;          \/**< The binding point of the uniform block for shader parameters *\/$/;"	m	class:arm_compute::GCKernel
_shader_params_index	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint                       _shader_params_index;                  \/**< The index of the uniform block *\/$/;"	m	class:arm_compute::GCKernel
_shader_params_name	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    static constexpr const char *_shader_params_name = "shader_params"; \/**< The uniform block name in the shader *\/$/;"	m	class:arm_compute::GCKernel
_shader_params_size	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLint                        _shader_params_size;                   \/**< The uniform block data size in the shader *\/$/;"	m	class:arm_compute::GCKernel
_shader_params_ubo_name	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint                       _shader_params_ubo_name;               \/**< Uniform buffer object name for shader parameters *\/$/;"	m	class:arm_compute::GCKernel
_shader_path	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::string _shader_path;                                            \/**< Path to the shaders folder. *\/$/;"	m	class:arm_compute::GCKernelLibrary
_shader_program_map	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    static const std::map<std::string, std::string> _shader_program_map; \/**< Map that associates kernel names with programs. *\/$/;"	m	class:arm_compute::GCKernelLibrary
_shader_program_map	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^const std::map<std::string, std::string> GCKernelLibrary::_shader_program_map =$/;"	m	class:GCKernelLibrary	file:
_shape	arm_compute/graph/frontend/Layers.h	/^    TensorShape _shape;$/;"	m	class:arm_compute::graph::frontend::final
_shape	arm_compute/graph/nodes/ReshapeLayerNode.h	/^    TensorShape _shape;$/;"	m	class:arm_compute::graph::final
_shape	utils/Utils.h	/^    std::vector<unsigned long> _shape;$/;"	m	class:arm_compute::utils::NPYLoader
_shape_calculator_8h	documentation/_shape_calculator_8h.js	/^var _shape_calculator_8h =$/;"	v
_shift	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^    uint32_t _shift;$/;"	m	class:arm_compute::NEAccumulateSquaredKernel
_shift	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    uint32_t      _shift;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
_shift_exp_sum_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCLogits1DShiftExpSumKernel _shift_exp_sum_kernel;$/;"	m	class:arm_compute::GCSoftmaxLayer
_shift_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	/^    GCTensorShiftKernel        _shift_handler;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3
_shift_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	/^    GCTensorShiftKernel        _shift_handler;$/;"	m	class:arm_compute::GCDirectConvolutionLayer
_shift_handler	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	/^    GCTensorShiftKernel        _shift_handler;$/;"	m	class:arm_compute::GCPoolingLayer
_signal_8h	documentation/_signal_8h.js	/^var _signal_8h =$/;"	v
_simple_tensor_8h	documentation/_simple_tensor_8h.js	/^var _simple_tensor_8h =$/;"	v
_singleton_dataset_8h	documentation/_singleton_dataset_8h.js	/^var _singleton_dataset_8h =$/;"	v
_size	arm_compute/runtime/IMemoryRegion.h	/^    size_t _size;$/;"	m	class:arm_compute::IMemoryRegion
_size	tests/PaddingCalculator.h	/^    int        _size;$/;"	m	class:arm_compute::test::final
_sizes	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    size_t _sizes[3];$/;"	m	class:arm_compute::gles::NDRange
_skip_im2col	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool       _skip_im2col;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_slide_matrix_b	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^    bool             _slide_matrix_b;$/;"	m	class:arm_compute::CLGEMMMatrixMultiplyKernel
_slide_matrix_b	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^    bool           _slide_matrix_b;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyKernel
_slide_vector_sum_col	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    bool           _slide_vector_sum_col;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_sobel	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    std::unique_ptr<IFunction>    _sobel;                                           \/**< Pointer to Sobel kernel. *\/$/;"	m	class:arm_compute::CLCannyEdge
_sobel	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    std::unique_ptr<IFunction>          _sobel;                 \/**< Sobel function *\/$/;"	m	class:arm_compute::CLHarrisCorners
_sobel	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    std::unique_ptr<IFunction>    _sobel;               \/**< Pointer to Sobel kernel *\/$/;"	m	class:arm_compute::NECannyEdge
_sobel	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    std::unique_ptr<IFunction>            _sobel;                 \/**< Sobel function *\/$/;"	m	class:arm_compute::NEHarrisCorners
_sobel_8h	documentation/_sobel_8h.js	/^var _sobel_8h =$/;"	v
_sobel_hor	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    CLSobel5x5HorKernel  _sobel_hor;      \/**< Sobel Horizontal 5x5 kernel *\/$/;"	m	class:arm_compute::CLSobel5x5
_sobel_hor	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    CLSobel7x7HorKernel  _sobel_hor;      \/**< Sobel Horizontal 7x7 kernel *\/$/;"	m	class:arm_compute::CLSobel7x7
_sobel_hor	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    NESobel5x5HorKernel  _sobel_hor;      \/**< Sobel Horizontal 5x5 kernel *\/$/;"	m	class:arm_compute::NESobel5x5
_sobel_hor	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    NESobel7x7HorKernel  _sobel_hor;      \/**< Sobel Horizontal 7x7 kernel *\/$/;"	m	class:arm_compute::NESobel7x7
_sobel_vert	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    CLSobel5x5VertKernel _sobel_vert;     \/**< Sobel Vertical 5x5 kernel *\/$/;"	m	class:arm_compute::CLSobel5x5
_sobel_vert	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    CLSobel7x7VertKernel _sobel_vert;     \/**< Sobel Vertical 7x7 kernel *\/$/;"	m	class:arm_compute::CLSobel7x7
_sobel_vert	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    NESobel5x5VertKernel _sobel_vert;     \/**< Sobel Vertical 5x5 kernel *\/$/;"	m	class:arm_compute::NESobel5x5
_sobel_vert	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    NESobel7x7VertKernel _sobel_vert;     \/**< Sobel Vertical 7x7 kernel *\/$/;"	m	class:arm_compute::NESobel7x7
_softmax_kernel	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    NELogits1DSoftmaxKernel _softmax_kernel;$/;"	m	class:arm_compute::NESoftmaxLayer
_softmax_layer_8h	documentation/_softmax_layer_8h.js	/^var _softmax_layer_8h =$/;"	v
_sort_euclidean	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    CPPSortEuclideanDistanceKernel      _sort_euclidean;        \/**< Euclidean distance kernel *\/$/;"	m	class:arm_compute::CLHarrisCorners
_sort_euclidean	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    CPPSortEuclideanDistanceKernel        _sort_euclidean;        \/**< Euclidean distance kernel *\/$/;"	m	class:arm_compute::NEHarrisCorners
_source	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string                _source;    \/**< Source code for the program. *\/$/;"	m	class:arm_compute::Program
_source	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::string _source; \/**< Source code for the program. *\/$/;"	m	class:arm_compute::GCProgram
_spatial_scale	arm_compute/core/Types.h	/^    float        _spatial_scale;$/;"	m	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
_squared_input	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^    const IGCTensor *_squared_input;$/;"	m	class:arm_compute::GCNormalizationLayerKernel
_squared_input	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^    GCTensor                        _squared_input;   \/**< The intermediate buffer which stores results of squaring input*\/$/;"	m	class:arm_compute::GCNormalizationLayer
_src_it	tests/datasets/ConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _src_it;$/;"	m	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
_src_it	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _src_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
_src_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _src_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_src_it	tests/datasets/FullyConnectedLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _src_it;$/;"	m	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
_src_it	tests/datasets/LSTMLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _src_it;$/;"	m	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
_src_it	tests/datasets/PoolingLayerDataset.h	/^        std::vector<TensorShape>::const_iterator      _src_it;$/;"	m	struct:arm_compute::test::datasets::PoolingLayerDataset::iterator
_src_it	tests/datasets/RNNLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _src_it;$/;"	m	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
_src_it	tests/datasets/ScaleLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _src_it;$/;"	m	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
_ssbo_name	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    GLuint _ssbo_name;$/;"	m	class:arm_compute::GLBufferWrapper
_start	arm_compute/core/Window.h	/^        int _start; \/**< Start of the dimension *\/$/;"	m	class:arm_compute::Window::Dimension
_start	tests/framework/datasets/RangeDataset.h	/^    T _start;$/;"	m	class:arm_compute::test::framework::dataset::final
_start	tests/framework/instruments/OpenCLMemoryUsage.h	/^    } _start, _end, _now;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage	typeref:struct:arm_compute::test::framework::OpenCLMemoryUsage::Stats
_start_x	arm_compute/core/AccessWindowStatic.h	/^    int          _start_x;$/;"	m	class:arm_compute::AccessWindowStatic
_start_y	arm_compute/core/AccessWindowStatic.h	/^    int          _start_y;$/;"	m	class:arm_compute::AccessWindowStatic
_status	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    volatile BufferStatus _status = BufferStatus::IDLE; \/\/ Status$/;"	m	class:arm_gemm::Buffer
_stddev	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    float          *_stddev;$/;"	m	class:arm_compute::CLMeanStdDevKernel
_stddev	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    float             *_stddev;$/;"	m	class:arm_compute::NEMeanStdDevKernel
_stddev	tests/framework/instruments/InstrumentsStats.h	/^    double             _stddev;$/;"	m	class:arm_compute::test::framework::InstrumentsStats
_step	arm_compute/core/Window.h	/^        int _step;$/;"	m	class:arm_compute::Window::Dimension
_step	tests/framework/datasets/RangeDataset.h	/^        T           _step;$/;"	m	struct:arm_compute::test::framework::dataset::final::iterator
_step	tests/framework/datasets/RangeDataset.h	/^    T _step;$/;"	m	class:arm_compute::test::framework::dataset::final
_step_z	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    unsigned int     _step_z;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
_storage	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void *const           _storage;$/;"	m	class:arm_gemm::BufferManager
_storage	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void *const _storage;  \/\/ Storage for buffer content.$/;"	m	class:arm_gemm::Buffer
_str	arm_compute/core/utils/logging/LogMsgDecorators.h	/^    std::string _str;$/;"	m	class:arm_compute::logging::StringDecorator
_strength_thresh	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    float           _strength_thresh; \/**< Threshold value *\/$/;"	m	class:arm_compute::CLHarrisScoreKernel
_strength_thresh	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    float         _strength_thresh; \/**< Threshold value *\/$/;"	m	class:arm_compute::INEHarrisScoreKernel
_stride	arm_compute/core/Helpers.h	/^        int _stride;$/;"	m	class:arm_compute::Iterator::Dimension
_stride	arm_compute/core/Types.h	/^    std::pair<unsigned int, unsigned int> _stride;$/;"	m	class:arm_compute::HOGNormType::PadStrideInfo
_strides_in_bytes	arm_compute/core/TensorInfo.h	/^    Strides          _strides_in_bytes;$/;"	m	class:arm_compute::final
_sub_streams	arm_compute/graph/frontend/Layers.h	/^    std::vector<std::unique_ptr<SubStream>> _sub_streams;$/;"	m	class:arm_compute::graph::frontend::final
_sub_tensor	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    arm_compute::CLSubTensor _sub_tensor;    \/**< Backend Sub-Tensor *\/$/;"	m	class:arm_compute::graph::backends::final
_sub_tensor	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    arm_compute::SubTensor _sub_tensor;    \/**< Backend Sub-Tensor *\/$/;"	m	class:arm_compute::graph::backends::final
_subf	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    std::unique_ptr<CLArithmeticSubtraction[]> _subf;$/;"	m	class:arm_compute::CLLaplacianPyramid
_subf	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    std::unique_ptr<NEArithmeticSubtraction[]> _subf;$/;"	m	class:arm_compute::NELaplacianPyramid
_subgemm	src/core/NEON/kernels/arm_gemm/gemm_batched.hpp	/^    UniqueGemmCommon<To, Tr> _subgemm = nullptr;$/;"	m	class:arm_gemm::GemmBatched
_subsampling	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^    uint32_t         _subsampling;$/;"	m	class:arm_compute::CLChannelExtractKernel
_subtract_input_gate	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLArithmeticSubtractionKernel   _subtract_input_gate;$/;"	m	class:arm_compute::CLLSTMLayer
_suite_name	tests/framework/TestCaseFactory.h	/^    const std::string _suite_name;$/;"	m	class:arm_compute::test::framework::TestCaseFactory
_sum	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^    const ICLTensor *_sum;$/;"	m	class:arm_compute::CLL2NormalizeLayerKernel
_sum	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    ICLTensor       *_sum;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
_sum	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    ICLTensor       *_sum;$/;"	m	class:arm_compute::CLLogits1DShiftExpSumKernel
_sum	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    const ICLTensor *_sum;$/;"	m	class:arm_compute::CLLogits1DNormKernel
_sum	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    IGCTensor       *_sum;$/;"	m	class:arm_compute::GCLogits1DShiftExpSumKernel
_sum	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    const IGCTensor *_sum;$/;"	m	class:arm_compute::GCLogits1DNormKernel
_sum	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^    const ITensor *_sum;$/;"	m	class:arm_compute::NEL2NormalizeLayerKernel
_sum	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    CLTensor                       _sum;$/;"	m	class:arm_compute::CLSoftmaxLayer
_sum	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCTensor                    _sum;$/;"	m	class:arm_compute::GCSoftmaxLayer
_sumsq	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^    CLTensor                 _sumsq;$/;"	m	class:arm_compute::CLL2NormalizeLayer
_sumsq	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^    Tensor                   _sumsq;$/;"	m	class:arm_compute::NEL2NormalizeLayer
_suppr	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    CLImage                   _suppr;$/;"	m	class:arm_compute::CLFastCorners
_suppr_func	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    CLNonMaximaSuppression3x3 _suppr_func;$/;"	m	class:arm_compute::CLFastCorners
_suppressed	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    Image                           _suppressed;$/;"	m	class:arm_compute::NEFastCorners
_svm_allocations	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::map<void *, size_t>     _svm_allocations;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
_t2_load_offset	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^    int _t2_load_offset;$/;"	m	class:arm_compute::CLGaussianPyramidVertKernel
_t2_load_offset	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^    int _t2_load_offset;$/;"	m	class:arm_compute::NEGaussianPyramidVertKernel
_table_lookup_8h	documentation/_table_lookup_8h.js	/^var _table_lookup_8h =$/;"	v
_tagged_nodes	arm_compute/graph/Graph.h	/^    std::map<NodeType, std::vector<NodeID>> _tagged_nodes = {}; \/**< Graph nodes map with the node type as key *\/$/;"	m	class:arm_compute::graph::final
_tail_node	arm_compute/graph/frontend/IStream.h	/^    NodeID      _tail_node = { EmptyNodeID }; \/**< NodeID pointing to the last(tail) node of the graph *\/$/;"	m	class:arm_compute::graph::frontend::IStream
_target	arm_compute/core/CL/ICLKernel.h	/^    GPUTarget   _target;             \/**< The targeted GPU *\/$/;"	m	class:arm_compute::ICLKernel
_target	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^    GPUTarget     _target;   \/**< The targeted GPU *\/$/;"	m	class:arm_compute::IGCKernel
_target	arm_compute/runtime/CL/CLScheduler.h	/^    GPUTarget        _target;$/;"	m	class:arm_compute::CLScheduler
_target	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^    GPUTarget _target;$/;"	m	class:arm_compute::GCScheduler
_tensor	arm_compute/core/CL/kernels/CLFillBorderKernel.h	/^    ICLTensor *_tensor;$/;"	m	class:arm_compute::CLFillBorderKernel
_tensor	arm_compute/core/GLES_COMPUTE/kernels/GCFillBorderKernel.h	/^    const IGCTensor *_tensor;$/;"	m	class:arm_compute::GCFillBorderKernel
_tensor	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^    ITensor   *_tensor;$/;"	m	class:arm_compute::NEFillBorderKernel
_tensor	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	/^    ITensor   *_tensor;$/;"	m	class:arm_compute::NEFillInnerBorderKernel
_tensor	arm_compute/graph/Edge.h	/^    Tensor      *_tensor;$/;"	m	class:arm_compute::graph::final
_tensor	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    arm_compute::CLTensor _tensor; \/**< Backend Tensor *\/$/;"	m	class:arm_compute::graph::backends::final
_tensor	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    arm_compute::GCTensor _tensor; \/**< Backend Tensor *\/$/;"	m	class:arm_compute::graph::backends::final
_tensor	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    arm_compute::Tensor _tensor; \/**< Backend Tensor *\/$/;"	m	class:arm_compute::graph::backends::final
_tensor	tests/CL/CLAccessor.h	/^    CLTensor &_tensor;$/;"	m	class:arm_compute::test::CLAccessor
_tensor	tests/GLES_COMPUTE/GCAccessor.h	/^    GCTensor &_tensor;$/;"	m	class:arm_compute::test::GCAccessor
_tensor	tests/NEON/Accessor.h	/^    Tensor &_tensor;$/;"	m	class:arm_compute::test::Accessor
_tensor_info_8cpp	documentation/_tensor_info_8cpp.js	/^var _tensor_info_8cpp =$/;"	v
_tensor_it	tests/datasets/BatchNormalizationLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _tensor_it;$/;"	m	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
_tensor_it	tests/datasets/ChannelShuffleLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _tensor_it;$/;"	m	struct:arm_compute::test::datasets::ChannelShuffleLayerDataset::iterator
_tensor_it	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _tensor_it;$/;"	m	struct:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset::iterator
_tensor_shape	arm_compute/core/PyramidInfo.h	/^    TensorShape _tensor_shape;$/;"	m	class:arm_compute::PyramidInfo
_tensor_shape	arm_compute/core/SubTensorInfo.h	/^    TensorShape  _tensor_shape;$/;"	m	class:arm_compute::final
_tensor_shape	arm_compute/core/TensorInfo.h	/^    TensorShape      _tensor_shape;$/;"	m	class:arm_compute::final
_tensor_shape_8cpp	documentation/_tensor_shape_8cpp.js	/^var _tensor_shape_8cpp =$/;"	v
_tensor_shape_it	tests/datasets/ROIPoolingLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _tensor_shape_it;$/;"	m	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
_tensors	arm_compute/graph/Graph.h	/^    std::vector<std::unique_ptr<Tensor>> _tensors = {};         \/**< Graph tensors *\/$/;"	m	class:arm_compute::graph::final
_termination	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    Termination                 _termination;$/;"	m	class:arm_compute::NELKTrackerKernel
_test_case_factory_8h	documentation/_test_case_factory_8h.js	/^var _test_case_factory_8h =$/;"	v
_test_name	tests/framework/TestCaseFactory.h	/^    const std::string _test_name;$/;"	m	class:arm_compute::test::framework::TestCaseFactory
_tex_rt	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint      _tex_rt;                                                 \/**< Dummy texture for render target *\/$/;"	m	class:arm_compute::GCKernelLibrary
_thread	src/runtime/CPP/CPPScheduler.cpp	/^    std::thread             _thread;$/;"	m	class:arm_compute::Thread	file:
_threads	arm_compute/runtime/CPP/CPPScheduler.h	/^    std::list<Thread> _threads;$/;"	m	class:arm_compute::CPPScheduler
_threshold	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^    uint8_t       _threshold;           \/**< threshold on difference between intensity *\/$/;"	m	class:arm_compute::NEFastCornersKernel
_threshold	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^    uint8_t         _threshold;$/;"	m	class:arm_compute::NEFillArrayKernel
_threshold	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    float                  _threshold;$/;"	m	class:arm_compute::NEHOGDetectorKernel
_threshold	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    uint8_t        _threshold;$/;"	m	class:arm_compute::NEThresholdKernel
_threshold_8h	documentation/_threshold_8h.js	/^var _threshold_8h =$/;"	v
_threshold_it	tests/datasets/ThresholdDataset.h	/^        std::vector<uint8_t>::const_iterator       _threshold_it;$/;"	m	struct:arm_compute::test::datasets::ThresholdDataset::iterator
_tile_M	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _tile_M, _tile_N;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_tile_N	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int _n_batches, _n_rows, _n_cols, _n_channels, _tile_M, _tile_N;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
_tiles_M	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^                  _matrix_row_stride, _tiles_M, _tiles_N;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_tiles_N	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^                  _matrix_row_stride, _tiles_M, _tiles_N;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
_timer	tests/framework/instruments/SchedulerTimer.cpp	/^    WallClockTimer                          _timer;$/;"	m	class:arm_compute::test::framework::final	file:
_timer_enabled	tests/framework/instruments/OpenCLTimer.h	/^    bool                                            _timer_enabled;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
_tmp	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    ITensor               *_tmp; \/\/Temporary. Used internally$/;"	m	class:arm_compute::NELogits1DSoftmaxKernel
_tmp	arm_compute/runtime/CL/functions/CLConvolution.h	/^    CLTensor                                      _tmp;            \/**< temporary buffer for output of horizontal pass *\/$/;"	m	class:arm_compute::CLConvolutionSquare
_tmp	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^    CLImage                 _tmp;            \/**< Temporary buffer *\/$/;"	m	class:arm_compute::CLGaussian5x5
_tmp	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    CLPyramid  _tmp;$/;"	m	class:arm_compute::CLGaussianPyramid
_tmp	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    CLTensor                       _tmp;$/;"	m	class:arm_compute::CLSoftmaxLayer
_tmp	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    GCTensor                    _tmp;$/;"	m	class:arm_compute::GCSoftmaxLayer
_tmp	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    Tensor                                        _tmp;            \/**< temporary buffer for output of horizontal pass *\/$/;"	m	class:arm_compute::NEConvolutionSquare
_tmp	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^    Tensor                  _tmp;            \/**< temporary buffer for output of horizontal pass *\/$/;"	m	class:arm_compute::NEGaussian5x5
_tmp	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    Pyramid        _tmp;$/;"	m	class:arm_compute::NEGaussianPyramid
_tmp	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    Tensor                  _tmp;$/;"	m	class:arm_compute::NESoftmaxLayer
_tmp_a	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLTensor                   _tmp_a;$/;"	m	class:arm_compute::CLGEMM
_tmp_a	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLTensor                           _tmp_a;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_tmp_a	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCTensor                   _tmp_a;$/;"	m	class:arm_compute::GCGEMM
_tmp_a	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    Tensor                     _tmp_a;$/;"	m	class:arm_compute::NEGEMM
_tmp_a	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    Tensor                     _tmp_a;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_tmp_a	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    Tensor                             _tmp_a;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_tmp_b	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLTensor                   _tmp_b;$/;"	m	class:arm_compute::CLGEMM
_tmp_b	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLTensor                           _tmp_b;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_tmp_b	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCTensor                   _tmp_b;$/;"	m	class:arm_compute::GCGEMM
_tmp_b	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    Tensor                     _tmp_b;$/;"	m	class:arm_compute::NEGEMM
_tmp_b	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    Tensor                     _tmp_b;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_tmp_b	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    Tensor                             _tmp_b;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_tmp_output	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLTensor _tmp_output;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_tmp_output	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor _tmp_output;$/;"	m	class:arm_compute::GCConvolutionLayer
_tmp_output	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _tmp_output;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_tmp_pyr	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^    CLPyramid                               _tmp_pyr;$/;"	m	class:arm_compute::CLLaplacianReconstruct
_tmp_pyr	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^    Pyramid                                 _tmp_pyr;$/;"	m	class:arm_compute::NELaplacianReconstruct
_tmp_x	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    CLImage              _tmp_x;          \/**< Temporary buffer for Sobel X *\/$/;"	m	class:arm_compute::CLSobel5x5
_tmp_x	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    CLImage              _tmp_x;          \/**< Temporary buffer for Sobel X *\/$/;"	m	class:arm_compute::CLSobel7x7
_tmp_x	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    Tensor               _tmp_x;          \/**< Temporary buffer for Sobel X *\/$/;"	m	class:arm_compute::NESobel5x5
_tmp_x	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    Tensor               _tmp_x;          \/**< Temporary buffer for Sobel X *\/$/;"	m	class:arm_compute::NESobel7x7
_tmp_y	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    CLImage              _tmp_y;          \/**< Temporary buffer for Sobel Y *\/$/;"	m	class:arm_compute::CLSobel5x5
_tmp_y	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    CLImage              _tmp_y;          \/**< Temporary buffer for Sobel Y *\/$/;"	m	class:arm_compute::CLSobel7x7
_tmp_y	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    Tensor               _tmp_y;          \/**< Temporary buffer for Sobel Y *\/$/;"	m	class:arm_compute::NESobel5x5
_tmp_y	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    Tensor               _tmp_y;          \/**< Temporary buffer for Sobel Y *\/$/;"	m	class:arm_compute::NESobel7x7
_toolchain_support_8h	documentation/_toolchain_support_8h.js	/^var _toolchain_support_8h =$/;"	v
_toolchain_support_8h.xhtml#a3c9ee94e1de3032f244cf041310868b4	documentation/navtreeindex14.js	/^"_toolchain_support_8h.xhtml#a3c9ee94e1de3032f244cf041310868b4":[6,0,3,3,14],$/;"	p	class:NAVTREEINDEX14
_top_bottom	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    int              _top_bottom;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
_top_bottom	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    int              _top_bottom;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
_top_bottom	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    int                  _top_bottom;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
_top_n	utils/GraphUtils.h	/^    size_t                   _top_n;$/;"	m	class:arm_compute::graph_utils::final
_total_nodes	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^    unsigned int _total_nodes;$/;"	m	class:arm_compute::graph::final
_total_size	arm_compute/core/TensorInfo.h	/^    size_t           _total_size;$/;"	m	class:arm_compute::final
_trA	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const bool _trA;$/;"	m	class:arm_gemm::GemmInterleaved
_trB	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    const bool _trB;$/;"	m	class:arm_gemm::GemmInterleaved
_trB	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    const bool _trB;$/;"	m	class:arm_gemm::GemvPretransposed
_tracker_finalize_kernel	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    CLLKTrackerFinalizeKernel                  _tracker_finalize_kernel;$/;"	m	class:arm_compute::CLOpticalFlow
_tracker_init_kernel	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLLKTrackerInitKernel[]>   _tracker_init_kernel;$/;"	m	class:arm_compute::CLOpticalFlow
_tracker_stage0_kernel	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLLKTrackerStage0Kernel[]> _tracker_stage0_kernel;$/;"	m	class:arm_compute::CLOpticalFlow
_tracker_stage1_kernel	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    std::unique_ptr<CLLKTrackerStage1Kernel[]> _tracker_stage1_kernel;$/;"	m	class:arm_compute::CLOpticalFlow
_transform_input_kernel	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    std::unique_ptr<INEKernel> _transform_input_kernel;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_transform_output_kernel	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    std::unique_ptr<INEKernel> _transform_output_kernel;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_transform_weights_kernel	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    std::unique_ptr<INEKernel> _transform_weights_kernel;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_transpose1xW	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    bool                     _transpose1xW;$/;"	m	class:arm_compute::NEConvolutionLayerReshapeWeights
_transpose1xW_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NEGEMMTranspose1xWKernel _transpose1xW_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
_transpose_8h	documentation/_transpose_8h.js	/^var _transpose_8h =$/;"	v
_transpose_cell_state1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_cell_state1;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_forget_gate1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_forget_gate1;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_forget_gate2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_forget_gate2;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_input_gate1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_input_gate1;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_input_gate2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_input_gate2;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_kernel	arm_compute/runtime/CL/functions/CLGEMM.h	/^    CLGEMMTranspose1xWKernel   _transpose_kernel;$/;"	m	class:arm_compute::CLGEMM
_transpose_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    GCGEMMTranspose1xWKernel   _transpose_kernel;$/;"	m	class:arm_compute::GCGEMM
_transpose_kernel	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    NETransposeKernel        _transpose_kernel;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
_transpose_kernel	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    NEGEMMTranspose1xWKernel   _transpose_kernel;$/;"	m	class:arm_compute::NEGEMM
_transpose_output	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    Tensor                   _transpose_output;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
_transpose_output1	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_output1;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_output2	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    CLTransposeKernel               _transpose_output2;$/;"	m	class:arm_compute::CLLSTMLayer
_transpose_weights	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    bool                     _transpose_weights;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
_true_value	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    uint8_t        _true_value;$/;"	m	class:arm_compute::NEThresholdKernel
_true_value_it	tests/datasets/ThresholdDataset.h	/^        std::vector<uint8_t>::const_iterator       _true_value_it;$/;"	m	struct:arm_compute::test::datasets::ThresholdDataset::iterator
_tune_new_kernels	arm_compute/runtime/CL/CLTuner.h	/^    bool             _tune_new_kernels;$/;"	m	class:arm_compute::CLTuner
_tuner	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    CLTuner           _tuner;     \/**< CL kernel tuner *\/$/;"	m	class:arm_compute::graph::backends::final
_tuner_8cpp	documentation/_tuner_8cpp.js	/^var _tuner_8cpp =$/;"	v
_type	arm_compute/core/Types.h	/^    NormType _type;$/;"	m	class:arm_compute::HOGNormType::NormalizationLayerInfo
_type_it	tests/datasets/ThresholdDataset.h	/^        std::vector<ThresholdType>::const_iterator _type_it;$/;"	m	struct:arm_compute::test::datasets::ThresholdDataset::iterator
_type_reader_8h	documentation/_type_reader_8h.js	/^var _type_reader_8h =$/;"	v
_typestring	utils/Utils.h	/^    std::string                _typestring;$/;"	m	class:arm_compute::utils::NPYLoader
_u_n_i_t_2_fixed_point_8cpp	documentation/_u_n_i_t_2_fixed_point_8cpp.js	/^var _u_n_i_t_2_fixed_point_8cpp =$/;"	v
_unit	tests/framework/instruments/Measurement.h	/^    std::string            _unit;$/;"	m	struct:arm_compute::test::framework::Measurement
_upper	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    uint8_t        _upper;$/;"	m	class:arm_compute::NEThresholdKernel
_upper	utils/GraphUtils.h	/^    PixelValue                      _upper;$/;"	m	class:arm_compute::graph_utils::final
_upper_it	tests/datasets/ThresholdDataset.h	/^        std::vector<uint8_t>::const_iterator       _upper_it;$/;"	m	struct:arm_compute::test::datasets::ThresholdDataset::iterator
_upper_thr	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    int32_t          _upper_thr;        \/**< Upper threshold used for the hysteresis. *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_upper_thr	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    int32_t                  _upper_thr; \/**< Upper threshold used for the hysteresis *\/$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
_upsample	arm_compute/runtime/CL/functions/CLDeconvolutionLayerUpsample.h	/^    CLDeconvolutionLayerUpsampleKernel _upsample;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsample
_upsample_f	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    CPPUpsample        _upsample_f;$/;"	m	class:arm_compute::NEDeconvolutionLayer
_use_initial_estimate	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    bool                        _use_initial_estimate;$/;"	m	class:arm_compute::NELKTrackerKernel
_users	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    std::atomic_int       _users  = {};                 \/\/ How many users are still using the buffer.$/;"	m	class:arm_gemm::Buffer
_utility_8h	documentation/_utility_8h.js	/^var _utility_8h =$/;"	v
_utils_quantized_asymm_8h	documentation/_utils_quantized_asymm_8h.js	/^var _utils_quantized_asymm_8h =$/;"	v
_v2mm_input_fill_border	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLFillBorderKernel                        _v2mm_input_fill_border;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_v2mm_input_fill_border	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEFillBorderKernel                        _v2mm_input_fill_border;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_v2mm_kernel	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLGEMMMatrixVectorMultiplyKernel          _v2mm_kernel;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_v2mm_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEGEMMMatrixVectorMultiplyKernel          _v2mm_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_v2mm_output	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLTensor                                  _v2mm_output;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_v2mm_output	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _v2mm_output;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_v2mm_weights_fill_border	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLFillBorderKernel                        _v2mm_weights_fill_border;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_v2mm_weights_fill_border	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEFillBorderKernel                        _v2mm_weights_fill_border;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_val	arm_compute/core/utils/strong_type/StrongType.h	/^    T _val = {};$/;"	m	class:arm_compute::strong_type::StrongType
_valid_region	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    ValidRegion                 _valid_region;$/;"	m	class:arm_compute::NELKTrackerKernel
_valid_region	arm_compute/core/SubTensorInfo.h	/^    ValidRegion  _valid_region;$/;"	m	class:arm_compute::final
_valid_region	arm_compute/core/TensorInfo.h	/^    ValidRegion      _valid_region;$/;"	m	class:arm_compute::final
_validate_8h	documentation/_validate_8h.js	/^var _validate_8h =$/;"	v
_validate_helpers_8h	documentation/_validate_helpers_8h.js	/^var _validate_helpers_8h =$/;"	v
_validation_8cpp	documentation/_validation_8cpp.js	/^var _validation_8cpp =$/;"	v
_validation_8h	documentation/_validation_8h.js	/^var _validation_8h =$/;"	v
_value	support/Semaphore.h	/^    int                     _value;$/;"	m	class:arm_compute::Semaphore
_value	tests/framework/datasets/RangeDataset.h	/^        T           _value;$/;"	m	struct:arm_compute::test::framework::dataset::final::iterator
_value	tests/framework/datasets/SingletonDataset.h	/^        const T    *_value;$/;"	m	struct:arm_compute::test::framework::dataset::SingletonDataset::iterator
_value	tests/framework/datasets/SingletonDataset.h	/^    T _value;$/;"	m	class:arm_compute::test::framework::dataset::SingletonDataset
_value	tests/framework/instruments/Measurement.h	/^    Value                  _value;$/;"	m	struct:arm_compute::test::framework::Measurement
_value	tests/validation/FixedPoint.h	/^    T       _value;                \/**< Fixed point raw value *\/$/;"	m	class:arm_compute::test::fixed_point_arithmetic::fixed_point
_values	arm_compute/runtime/Array.h	/^    std::unique_ptr<T[]> _values;$/;"	m	class:arm_compute::Array
_var	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    const ICLTensor *_var;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
_var	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    const IGCTensor *_var;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
_var	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    const ITensor       *_var;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
_var	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _var;$/;"	m	class:arm_compute::graph::frontend::final
_vector_sum_col	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	/^    const ICLTensor *_vector_sum_col;$/;"	m	class:arm_compute::CLGEMMLowpOffsetContributionKernel
_vector_sum_col	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    const ITensor *_vector_sum_col;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_vector_sum_col	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLTensor                           _vector_sum_col;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_vector_sum_col	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    Tensor                             _vector_sum_col;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_vector_sum_row	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	/^    const ICLTensor *_vector_sum_row;$/;"	m	class:arm_compute::CLGEMMLowpOffsetContributionKernel
_vector_sum_row	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    const ITensor *_vector_sum_row;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
_vector_sum_row	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    CLTensor                           _vector_sum_row;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
_vector_sum_row	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    Tensor                             _vector_sum_row;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_vector_to_tensor_kernel	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLDepthwiseVectorToTensorKernel           _vector_to_tensor_kernel;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_vector_to_tensor_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEDepthwiseVectorToTensorKernel           _vector_to_tensor_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_vertical_border_handler	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    std::unique_ptr<CLFillBorderKernel[]>          _vertical_border_handler;$/;"	m	class:arm_compute::CLGaussianPyramidHalf
_vertical_border_handler	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    std::unique_ptr<NEFillBorderKernel[]>          _vertical_border_handler;$/;"	m	class:arm_compute::NEGaussianPyramidHalf
_vertical_reduction	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    std::unique_ptr<CLGaussianPyramidVertKernel[]> _vertical_reduction;$/;"	m	class:arm_compute::CLGaussianPyramidHalf
_vertical_reduction	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    std::unique_ptr<NEGaussianPyramidVertKernel[]> _vertical_reduction;$/;"	m	class:arm_compute::NEGaussianPyramidHalf
_visited	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    ICLTensor       *_visited;          \/**< Marks visited elements *\/$/;"	m	class:arm_compute::CLEdgeTraceKernel
_visited	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    CLImage                       _visited, _recorded, _l1_list_counter, _l1_stack; \/**< Temporary tensors *\/$/;"	m	class:arm_compute::CLCannyEdge
_warp_affine_8h	documentation/_warp_affine_8h.js	/^var _warp_affine_8h =$/;"	v
_warp_perspective_8h	documentation/_warp_perspective_8h.js	/^var _warp_perspective_8h =$/;"	v
_weight_col_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _weight_col_stride, _weight_row_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_weight_row_stride	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const int _weight_col_stride, _weight_row_stride;$/;"	m	class:depthwise::DepthwiseConvolution
_weights	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    const ICLTensor *_weights;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
_weights	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^    const ICLTensor *_weights;$/;"	m	class:arm_compute::ICLDepthwiseConvolutionLayer3x3Kernel
_weights	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    const IGCTensor *_weights;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
_weights	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    const IGCTensor *_weights;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
_weights	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    const ITensor                                    *_weights;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
_weights	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    const ITensor *_weights;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
_weights	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    const TIn* const _weights;$/;"	m	class:depthwise::DepthwiseConvolution
_weights	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr    _weights;$/;"	m	class:arm_compute::graph::frontend::final
_weights	arm_compute/graph/frontend/Layers.h	/^    ITensorAccessorUPtr _weights;$/;"	m	class:arm_compute::graph::frontend::final
_weights	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    const ITensor *_weights;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_weights_hwio	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _weights_hwio;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
_weights_hwio	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _weights_hwio;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_weights_it	tests/datasets/ConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _weights_it;$/;"	m	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
_weights_it	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        std::vector<Size2D>::const_iterator        _weights_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
_weights_it	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::vector<TensorShape>::const_iterator   _weights_it;$/;"	m	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
_weights_it	tests/datasets/FullyConnectedLayerDataset.h	/^        std::vector<TensorShape>::const_iterator _weights_it;$/;"	m	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
_weights_it	tests/datasets/RNNLayerDataset.h	/^        std::vector<TensorShape>::const_iterator         _weights_it;$/;"	m	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
_weights_quant_info	arm_compute/graph/frontend/Layers.h	/^    const QuantizationInfo _weights_quant_info;$/;"	m	class:arm_compute::graph::frontend::final
_weights_reshape_kernel	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLDepthwiseWeightsReshapeKernel           _weights_reshape_kernel;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_weights_reshape_kernel	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLWeightsReshapeKernel _weights_reshape_kernel;$/;"	m	class:arm_compute::CLConvolutionLayerReshapeWeights
_weights_reshape_kernel	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLWeightsReshapeKernel                 _weights_reshape_kernel;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_weights_reshape_kernel	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCWeightsReshapeKernel _weights_reshape_kernel;$/;"	m	class:arm_compute::GCConvolutionLayerReshapeWeights
_weights_reshape_kernel	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    NEDepthwiseWeightsReshapeKernel           _weights_reshape_kernel;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_weights_reshape_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEWeightsReshapeKernel   _weights_reshape_kernel;$/;"	m	class:arm_compute::NEConvolutionLayerReshapeWeights
_weights_reshape_kernel	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    NEWeightsReshapeKernel                 _weights_reshape_kernel;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_weights_reshaped	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    CLTensor                                  _weights_reshaped;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
_weights_reshaped	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    CLTensor _weights_reshaped;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
_weights_reshaped	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    CLTensor                               _weights_reshaped;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
_weights_reshaped	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor               _weights_reshaped;$/;"	m	class:arm_compute::GCConvolutionLayerReshapeWeights
_weights_reshaped	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor _weights_reshaped;$/;"	m	class:arm_compute::GCConvolutionLayer
_weights_reshaped	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    Tensor                                    _weights_reshaped;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
_weights_reshaped	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor                   _weights_reshaped;$/;"	m	class:arm_compute::NEConvolutionLayerReshapeWeights
_weights_reshaped	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _weights_reshaped;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_weights_reshaped	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    Tensor                                 _weights_reshaped;$/;"	m	class:arm_compute::NELocallyConnectedLayer
_weights_transposed	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    GCTensor _weights_transposed;$/;"	m	class:arm_compute::GCConvolutionLayer
_weights_transposed_kernel	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    NEGEMMTranspose1xWKernel _weights_transposed_kernel;$/;"	m	class:arm_compute::NEConvolutionLayerReshapeWeights
_width	arm_compute/core/IAccessWindow.h	/^    int          _width;$/;"	m	class:arm_compute::AccessWindowRectangle
_width	arm_compute/core/MultiImageInfo.h	/^    unsigned int _width;$/;"	m	class:arm_compute::MultiImageInfo
_width	utils/Utils.h	/^    unsigned int  _width, _height;$/;"	m	class:arm_compute::utils::PPMLoader
_width_concatenate_layer_8h	documentation/_width_concatenate_layer_8h.js	/^var _width_concatenate_layer_8h =$/;"	v
_width_offset	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	/^    unsigned int     _width_offset;$/;"	m	class:arm_compute::CLWidthConcatenateLayerKernel
_win	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    Window                    _win;$/;"	m	class:arm_compute::CLFastCorners
_window	arm_compute/core/IKernel.h	/^    Window _window;$/;"	m	class:arm_compute::IKernel
_window	src/runtime/CPP/CPPScheduler.cpp	/^    Window                  _window;$/;"	m	class:arm_compute::Thread	file:
_window_dimension	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    int                         _window_dimension;$/;"	m	class:arm_compute::NELKTrackerKernel
_window_lut	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^    uint32_t                     *_window_lut;$/;"	m	class:arm_compute::NEHistogramKernel
_window_lut	arm_compute/runtime/NEON/functions/NEHistogram.h	/^    std::unique_ptr<uint32_t[]> _window_lut;$/;"	m	class:arm_compute::NEHistogram
_window_split	arm_compute/runtime/NEON/functions/NEReductionOperation.h	/^    size_t                     _window_split;$/;"	m	class:arm_compute::NEReductionOperation
_winograd_8h	documentation/_winograd_8h.js	/^var _winograd_8h =$/;"	v
_working_space	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    void          *_working_space = nullptr;$/;"	m	class:arm_gemm::GemmInterleaved
_workload_8h	documentation/_workload_8h.js	/^var _workload_8h =$/;"	v
_workloads	arm_compute/graph/GraphManager.h	/^    std::map<GraphID, ExecutionWorkload> _workloads = {}; \/**< Graph workloads *\/$/;"	m	class:arm_compute::graph::final
_workspace	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    ITensor       *_workspace;$/;"	m	class:arm_compute::NEGEMMAssemblyBaseKernel
_workspace	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    Tensor                     _workspace;$/;"	m	class:arm_compute::NEGEMM
_workspace	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    Tensor _workspace;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
_workspace	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    Tensor                     _workspace;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
_workspace	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    Tensor                             _workspace;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
_workspace	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    Tensor         _workspace;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
_x	arm_compute/core/IAccessWindow.h	/^    int          _x;$/;"	m	class:arm_compute::AccessWindowRectangle
_x0	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int _k0 = 0, _x0 = 0, _multi = 0;$/;"	m	class:arm_gemm::GemmInterleaved::blockwalker
_x_block	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    unsigned int _x_block = 0;$/;"	m	class:arm_gemm::GemmInterleaved
_x_subsampling	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^    std::array<uint32_t, 3> _x_subsampling;$/;"	m	class:arm_compute::CLChannelCombineKernel
_x_subsampling	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    std::array<uint32_t, 3> _x_subsampling;$/;"	m	class:arm_compute::NEChannelCombineKernel
_y	arm_compute/core/IAccessWindow.h	/^    int          _y;$/;"	m	class:arm_compute::AccessWindowRectangle
_y_dim	arm_compute/runtime/NEON/functions/NEIm2Col.h	/^    unsigned int   _y_dim;$/;"	m	class:arm_compute::NEIm2Col
_y_subsampling	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^    std::array<uint32_t, 3> _y_subsampling;$/;"	m	class:arm_compute::CLChannelCombineKernel
_y_subsampling	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    std::array<uint32_t, 3> _y_subsampling;$/;"	m	class:arm_compute::NEChannelCombineKernel
_zip_dataset_8h	documentation/_zip_dataset_8h.js	/^var _zip_dataset_8h =$/;"	v
a	arm_compute/core/Types.h	/^    float a() const$/;"	f	class:arm_compute::HOGNormType::ActivationLayerInfo
a.onclick	documentation/navtree.js	/^      a.onclick = function(){$/;"	f
a32_sgemm_8x6	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/generic.cpp	/^void a32_sgemm_8x6(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a32_sgemm_8x6_a53	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a53.cpp	/^void a32_sgemm_8x6_a53(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a32_sgemm_8x6_a55r1	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a55r1.cpp	/^void a32_sgemm_8x6_a55r1(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_gemm_s16_asimd_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8/generic.cpp	/^void a64_gemm_s16_asimd_12x8(const int16_t *Apanel, const int16_t *Bpanel, int32_t *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_gemm_s8_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8/generic.cpp	/^void a64_gemm_s8_12x8(const int8_t *Apanel, const int8_t *Bpanel, int32_t *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_gemm_s8_12x8_a55r1	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8/a55r1.cpp	/^void a64_gemm_s8_12x8_a55r1(const int8_t *Apanel, const int8_t *Bpanel, int32_t *Cpanel, const int ablocks, const int bblocks, const int K)$/;"	f	namespace:arm_gemm
a64_gemm_s8_4x4	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4/generic.cpp	/^void a64_gemm_s8_4x4(const int8_t *Apanel, const int8_t *Bpanel, int32_t *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_gemm_u16_asimd_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8/generic.cpp	/^void a64_gemm_u16_asimd_12x8(const uint16_t *Apanel, const uint16_t *Bpanel, uint32_t *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_gemm_u8_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8/generic.cpp	/^void a64_gemm_u8_12x8(const uint8_t *Apanel, const uint8_t *Bpanel, uint32_t *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_gemm_u8_12x8_a55r1	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8/a55r1.cpp	/^void a64_gemm_u8_12x8_a55r1(const uint8_t *Apanel, const uint8_t *Bpanel, uint32_t *Cpanel, const int ablocks, const int bblocks, const int K)$/;"	f	namespace:arm_gemm
a64_gemm_u8_4x4	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4/generic.cpp	/^void a64_gemm_u8_4x4(const uint8_t *Apanel, const uint8_t *Bpanel, uint32_t *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_hgemm_asimd_24x8	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8/generic.cpp	/^void a64_hgemm_asimd_24x8(const __fp16 *Apanel, const __fp16 *Bpanel, __fp16 *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_hgemm_asimd_24x8_a55r1	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8/a55r1.cpp	/^void a64_hgemm_asimd_24x8_a55r1(const __fp16 *Apanel, const __fp16 *Bpanel, __fp16 *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_sgemm_asimd_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/generic.cpp	/^void a64_sgemm_asimd_12x8(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_sgemm_asimd_12x8_a53	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/a53.cpp	/^void a64_sgemm_asimd_12x8_a53(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_sgemm_asimd_12x8_a55	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/a55.cpp	/^void a64_sgemm_asimd_12x8_a55(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K)$/;"	f	namespace:arm_gemm
a64_sgemm_asimd_12x8_a55r1	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/a55r1.cpp	/^void a64_sgemm_asimd_12x8_a55r1(const float *Apanel, const float *Bpanel, float *Cpanel, const int ablocks, const int bblocks, const int K)$/;"	f	namespace:arm_gemm
a64_sgemm_asimd_12x8_jumps	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/generic.cpp	/^void a64_sgemm_asimd_12x8_jumps(const float *Apanel, const float *Bpanel, float *Cpanel, int ablocks, int bblocks, int K, long int row_jump = 0, long int block_jump = 0)$/;"	f	namespace:arm_gemm
a64_sgemm_native_16x4	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4/generic.cpp	/^void a64_sgemm_native_16x4(const float *A, int lda, const float *B, int ldb, float *C, int ldc, float beta, int M, int N, int K)$/;"	f	namespace:arm_gemm
a64_sgemv_pretransposed	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed/generic.cpp	/^void a64_sgemv_pretransposed(const float *A, int lda, const float *X, float *Y, float beta, int M, int N)$/;"	f	namespace:arm_gemm
a64_sgemv_trans	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans/generic.cpp	/^void a64_sgemv_trans(const float *Astart, const float *Xstart, float *Ystart, float beta, int lda, int M, int N)$/;"	f	namespace:arm_gemm
a_matrix_stride	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int a_matrix_stride, a_row_stride;$/;"	m	class:winograd::BatchedBlockedGemm
a_ptr	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const TIn* const a_ptr;$/;"	m	class:winograd::BatchedBlockedGemm
a_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int a_matrix_stride, a_row_stride;$/;"	m	class:winograd::BatchedBlockedGemm
abs	include/half/half.hpp	/^		inline expr abs(expr arg) { return unary_specialized<expr>::fabs(arg); }$/;"	f	namespace:detail
abs	include/half/half.hpp	/^		inline half abs(half arg) { return unary_specialized<half>::fabs(arg); }$/;"	f	namespace:detail
abs	tests/validation/FixedPoint.h	/^    static fixed_point<T> abs(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
abs	tests/validation/FixedPoint.h	/^inline fixed_point<T> abs(fixed_point<T> x)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
abs_diff_S16_S16_S16	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^void abs_diff_S16_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon238
abs_diff_S16_U8_S16	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^void abs_diff_S16_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon238
abs_diff_U8_S16_S16	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^void abs_diff_U8_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon238
abs_diff_U8_U8_U8	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^void abs_diff_U8_U8_U8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon238
abs_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float abs_op(float x)$/;"	f
absdiff_8cl	documentation/absdiff_8cl.js	/^var absdiff_8cl =$/;"	v
absolute_difference	tests/validation/reference/AbsoluteDifference.cpp	/^SimpleTensor<T> absolute_difference(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2, DataType dst_data_type)$/;"	f	namespace:arm_compute::test::validation::reference
acc_sq_v16_u8	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void acc_sq_v16_u8(const void *__restrict input, uint32_t shift, void *__restrict accum)$/;"	f	namespace:__anon239
acc_v16_u8	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline void acc_v16_u8(const void *__restrict input, void *__restrict accum)$/;"	f	namespace:__anon239
acc_we_v16_u8	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline void acc_we_v16_u8(const void *__restrict input, void *__restrict accum, const float32x4_t scale_val, const float32x4_t scale_val2)$/;"	f	namespace:__anon239
acc_we_v16_u8	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void acc_we_v16_u8(const void *__restrict input, void *__restrict accum, float16x8_t scale_val, float16x8_t scale_val2)$/;"	f	namespace:fp16
accept	src/graph/nodes/ActivationLayerNode.cpp	/^void ActivationLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::ActivationLayerNode
accept	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^void BatchNormalizationLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
accept	src/graph/nodes/ConstNode.cpp	/^void ConstNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::ConstNode
accept	src/graph/nodes/ConvolutionLayerNode.cpp	/^void ConvolutionLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
accept	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^void DepthConcatenateLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
accept	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^void DepthwiseConvolutionLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
accept	src/graph/nodes/EltwiseLayerNode.cpp	/^void EltwiseLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::EltwiseLayerNode
accept	src/graph/nodes/FlattenLayerNode.cpp	/^void FlattenLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::FlattenLayerNode
accept	src/graph/nodes/FullyConnectedLayer.cpp	/^void FullyConnectedLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
accept	src/graph/nodes/InputNode.cpp	/^void InputNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::InputNode
accept	src/graph/nodes/NormalizationLayerNode.cpp	/^void NormalizationLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::NormalizationLayerNode
accept	src/graph/nodes/OutputNode.cpp	/^void OutputNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::OutputNode
accept	src/graph/nodes/PoolingLayerNode.cpp	/^void PoolingLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::PoolingLayerNode
accept	src/graph/nodes/ReshapeLayer.cpp	/^void ReshapeLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::ReshapeLayerNode
accept	src/graph/nodes/SoftmaxLayerNode.cpp	/^void SoftmaxLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::SoftmaxLayerNode
accept	src/graph/nodes/SplitLayerNode.cpp	/^void SplitLayerNode::accept(INodeVisitor &v)$/;"	f	class:arm_compute::graph::SplitLayerNode
access_numpy_tensor	utils/GraphUtils.cpp	/^void NumPyAccessor::access_numpy_tensor(ITensor &tensor)$/;"	f	class:NumPyAccessor
access_predictions_tensor	utils/GraphUtils.cpp	/^void TopNPredictionsAccessor::access_predictions_tensor(ITensor &tensor)$/;"	f	class:TopNPredictionsAccessor
access_tensor	utils/GraphUtils.cpp	/^bool DummyAccessor::access_tensor(ITensor &tensor)$/;"	f	class:DummyAccessor
access_tensor	utils/GraphUtils.cpp	/^bool NumPyAccessor::access_tensor(ITensor &tensor)$/;"	f	class:NumPyAccessor
access_tensor	utils/GraphUtils.cpp	/^bool NumPyBinLoader::access_tensor(ITensor &tensor)$/;"	f	class:NumPyBinLoader
access_tensor	utils/GraphUtils.cpp	/^bool PPMAccessor::access_tensor(ITensor &tensor)$/;"	f	class:PPMAccessor
access_tensor	utils/GraphUtils.cpp	/^bool PPMWriter::access_tensor(ITensor &tensor)$/;"	f	class:PPMWriter
access_tensor	utils/GraphUtils.cpp	/^bool RandomAccessor::access_tensor(ITensor &tensor)$/;"	f	class:RandomAccessor
access_tensor	utils/GraphUtils.cpp	/^bool TopNPredictionsAccessor::access_tensor(ITensor &tensor)$/;"	f	class:TopNPredictionsAccessor
accessor	src/graph/Tensor.cpp	/^ITensorAccessor *Tensor::accessor()$/;"	f	class:arm_compute::graph::Tensor
accumulate	src/core/NEON/kernels/NEMeanStdDevKernel.cpp	/^std::pair<uint64x1_t, uint64x1_t> accumulate(const Window &window, Iterator &iterator)$/;"	f	namespace:__anon279
accumulate	tests/validation/reference/Accumulate.cpp	/^SimpleTensor<T2> accumulate(const SimpleTensor<T1> &src, DataType output_data_type)$/;"	f	namespace:arm_compute::test::validation::reference
accumulate_8cl	documentation/accumulate_8cl.js	/^var accumulate_8cl =$/;"	v
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<1>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<1>(float16_t *buffer, const float16x8x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<1>(qint16_t *buffer, const qint16x8x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<2>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<2>(float16_t *buffer, const float16x8x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<2>(qint16_t *buffer, const qint16x8x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<3>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<3>(float16_t *buffer, const float16x8x2_t &values)$/;"	f	namespace:__anon256
accumulate_results	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void accumulate_results<3>(qint16_t *buffer, const qint16x8x2_t &values)$/;"	f	namespace:__anon256
accumulate_squared	tests/validation/reference/Accumulate.cpp	/^SimpleTensor<T2> accumulate_squared(const SimpleTensor<T1> &src, uint32_t shift, DataType output_data_type)$/;"	f	namespace:arm_compute::test::validation::reference
accumulate_weighted	tests/validation/reference/Accumulate.cpp	/^SimpleTensor<T2> accumulate_weighted(const SimpleTensor<T1> &src, float alpha, DataType output_data_type)$/;"	f	namespace:arm_compute::test::validation::reference
acos	include/half/half.hpp	/^			static expr acos(float arg) { return expr(std::acos(arg)); }$/;"	f	struct:detail::functions
acos	include/half/half.hpp	/^		inline expr acos(expr arg) { return functions::acos(arg); }$/;"	f	namespace:detail
acos	include/half/half.hpp	/^		inline expr acos(half arg) { return functions::acos(arg); }$/;"	f	namespace:detail
acosh	include/half/half.hpp	/^			static expr acosh(float arg)$/;"	f	struct:detail::functions
acosh	include/half/half.hpp	/^		inline expr acosh(expr arg) { return functions::acosh(arg); }$/;"	f	namespace:detail
acosh	include/half/half.hpp	/^		inline expr acosh(half arg) { return functions::acosh(arg); }$/;"	f	namespace:detail
acquire	arm_compute/runtime/MemoryGroupBase.h	/^inline void MemoryGroupBase<TensorType>::acquire()$/;"	f	class:arm_compute::MemoryGroupBase
acquire	src/runtime/BlobMemoryPool.cpp	/^void BlobMemoryPool::acquire(MemoryMappings &handles)$/;"	f	class:BlobMemoryPool
acquire	src/runtime/OffsetMemoryPool.cpp	/^void OffsetMemoryPool::acquire(MemoryMappings &handles)$/;"	f	class:OffsetMemoryPool
act_infos	tests/validation/CL/BatchNormalizationLayer.cpp	/^const auto                         act_infos = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon402	file:
act_infos	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^const auto                         act_infos = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon456	file:
act_infos	tests/validation/NEON/BatchNormalizationLayer.cpp	/^const auto                         act_infos = framework::dataset::make("ActivationInfo",$/;"	m	namespace:arm_compute::test::validation::__anon475	file:
activation	arm_compute/core/Types.h	/^    ActivationFunction activation() const$/;"	f	class:arm_compute::HOGNormType::ActivationLayerInfo
activation	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^typename std::enable_if<std::is_same<T, float16_t>::value, void>::type NEActivationLayerKernel::activation(const Window &window)$/;"	f	class:NEActivationLayerKernel
activation	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^typename std::enable_if<std::is_same<T, float>::value, void>::type NEActivationLayerKernel::activation(const Window &window)$/;"	f	class:NEActivationLayerKernel
activation	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^typename std::enable_if<std::is_same<T, int8_t>::value, void>::type NEActivationLayerKernel::activation(const Window &window)$/;"	f	class:NEActivationLayerKernel
activation	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^typename std::enable_if<std::is_same<T, qasymm8_t>::value, void>::type NEActivationLayerKernel::activation(const Window &window)$/;"	f	class:NEActivationLayerKernel
activation	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^typename std::enable_if<std::is_same<T, qint16_t>::value, void>::type NEActivationLayerKernel::activation(const Window &window)$/;"	f	class:NEActivationLayerKernel
activation__layer_8cl	documentation/activation__layer_8cl.js	/^var activation__layer_8cl =$/;"	v
activation__layer__qa8_8cl	documentation/activation__layer__qa8_8cl.js	/^var activation__layer__qa8_8cl =$/;"	v
activation_info	src/graph/nodes/ActivationLayerNode.cpp	/^ActivationLayerInfo ActivationLayerNode::activation_info() const$/;"	f	class:arm_compute::graph::ActivationLayerNode
activation_layer	tests/validation/reference/ActivationLayer.cpp	/^SimpleTensor<T> activation_layer(const SimpleTensor<T> &src, ActivationLayerInfo info)$/;"	f	namespace:arm_compute::test::validation::reference
activation_layer	tests/validation/reference/ActivationLayer.cpp	/^SimpleTensor<uint8_t> activation_layer<uint8_t>(const SimpleTensor<uint8_t> &src, ActivationLayerInfo info)$/;"	f	namespace:arm_compute::test::validation::reference
add	tests/TensorCache.h	/^inline RawTensor &TensorCache::add(std::tuple<const std::string &, Format, Channel> key, RawTensor raw)$/;"	f	class:arm_compute::test::TensorCache
add	tests/TensorCache.h	/^inline RawTensor &TensorCache::add(std::tuple<const std::string &, Format> key, RawTensor raw)$/;"	f	class:arm_compute::test::TensorCache
add	tests/framework/Profiler.cpp	/^void Profiler::add(std::unique_ptr<Instrument> instrument)$/;"	f	class:arm_compute::test::framework::Profiler
add	tests/validation/FixedPoint.h	/^    static fixed_point<T> add(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
add	tests/validation/FixedPoint.h	/^inline fixed_point<T> add(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
add	tests/validation/reference/ArithmeticAddition.cpp	/^T add(T src1, T src2, ConvertPolicy convert_policy)$/;"	f	namespace:arm_compute::test::validation::reference::__anon531
add_1D_array_argument	arm_compute/core/CL/ICLKernel.h	/^    void add_1D_array_argument(unsigned int &idx, const ICLArray<T> *array, const Strides &strides, unsigned int num_dimensions, const Window &window)$/;"	f	class:arm_compute::ICLKernel
add_1D_tensor_argument	arm_compute/core/CL/ICLKernel.h	/^    void add_1D_tensor_argument(unsigned int &idx, const ICLTensor *tensor, const Window &window)$/;"	f	class:arm_compute::ICLKernel
add_1D_tensor_argument	src/core/GLES_COMPUTE/IGCKernel.cpp	/^void IGCKernel::add_1D_tensor_argument(unsigned int &idx, const IGCTensor *tensor, const unsigned int binding_point, const Window &window)$/;"	f	class:IGCKernel
add_2D_tensor_argument	arm_compute/core/CL/ICLKernel.h	/^    void add_2D_tensor_argument(unsigned int &idx, const ICLTensor *tensor, const Window &window)$/;"	f	class:arm_compute::ICLKernel
add_2D_tensor_argument	src/core/GLES_COMPUTE/IGCKernel.cpp	/^void IGCKernel::add_2D_tensor_argument(unsigned int &idx, const IGCTensor *tensor, const unsigned int binding_point, const Window &window)$/;"	f	class:IGCKernel
add_3D_tensor_argument	arm_compute/core/CL/ICLKernel.h	/^    void add_3D_tensor_argument(unsigned int &idx, const ICLTensor *tensor, const Window &window)$/;"	f	class:arm_compute::ICLKernel
add_3D_tensor_argument	src/core/GLES_COMPUTE/IGCKernel.cpp	/^void IGCKernel::add_3D_tensor_argument(unsigned int &idx, const IGCTensor *tensor, const unsigned int binding_point, const Window &window)$/;"	f	class:IGCKernel
add_4D_tensor_argument	arm_compute/core/CL/ICLKernel.h	/^    void add_4D_tensor_argument(unsigned int &idx, const ICLTensor *tensor, const Window &window)$/;"	f	class:arm_compute::ICLKernel
add_F16_F16_F16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_F16_F16_F16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_F32_F32_F32	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_F32_F32_F32(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_activation_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_activation_node(Graph &g, NodeParams params, NodeIdxPair input, ActivationLayerInfo act_info)$/;"	f	class:arm_compute::graph::GraphBuilder
add_argument	arm_compute/core/CL/ICLKernel.h	/^    void add_argument(unsigned int &idx, T value)$/;"	f	class:arm_compute::ICLKernel
add_array_argument	arm_compute/core/CL/ICLKernel.h	/^void ICLKernel::add_array_argument(unsigned &idx, const ICLArray<T> *array, const Strides &strides, unsigned int num_dimensions, const Window &window)$/;"	f	class:arm_compute::ICLKernel
add_backend	arm_compute/graph/backends/BackendRegistry.h	/^inline void BackendRegistry::add_backend(Target target)$/;"	f	class:arm_compute::graph::backends::BackendRegistry
add_batch_normalization_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_batch_normalization_node(Graph &g, NodeParams params, NodeIdxPair input, float epsilon,$/;"	f	class:arm_compute::graph::GraphBuilder
add_built_program	src/core/CL/CLKernelLibrary.cpp	/^void CLKernelLibrary::add_built_program(const std::string &built_program_name, cl::Program program)$/;"	f	class:CLKernelLibrary
add_config	tests/datasets/BatchNormalizationLayerDataset.h	/^    void add_config(TensorShape tensor, TensorShape param, float epsilon)$/;"	f	class:arm_compute::test::datasets::BatchNormalizationLayerDataset
add_config	tests/datasets/ChannelShuffleLayerDataset.h	/^    void add_config(TensorShape tensor, int num_groups)$/;"	f	class:arm_compute::test::datasets::ChannelShuffleLayerDataset
add_config	tests/datasets/ConvolutionLayerDataset.h	/^    void add_config(TensorShape src, TensorShape weights, TensorShape biases, TensorShape dst, PadStrideInfo info, Size2D dilation = Size2D(1U, 1U))$/;"	f	class:arm_compute::test::datasets::ConvolutionLayerDataset
add_config	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    void add_config(TensorShape src, Size2D weights, PadStrideInfo info)$/;"	f	class:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset
add_config	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^    void add_config(TensorShape src, TensorShape filter, TensorShape filter_bias, TensorShape depthwise_out, TensorShape weights, TensorShape biases, TensorShape dst, PadStrideInfo depthwise_info,$/;"	f	class:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset
add_config	tests/datasets/FullyConnectedLayerDataset.h	/^    void add_config(TensorShape src, TensorShape weights, TensorShape biases, TensorShape dst)$/;"	f	class:arm_compute::test::datasets::FullyConnectedLayerDataset
add_config	tests/datasets/GEMMDataset.h	/^    void add_config(TensorShape a, TensorShape b, TensorShape c, TensorShape dst, float alpha, float beta)$/;"	f	class:arm_compute::test::datasets::GEMMDataset
add_config	tests/datasets/GEMMLowpDataset.h	/^    void add_config(TensorShape a, TensorShape b, TensorShape c, int32_t a_offset, int32_t b_offset)$/;"	f	class:arm_compute::test::datasets::GEMMLowpDataset
add_config	tests/datasets/HOGDescriptorDataset.h	/^    void add_config(std::string image,$/;"	f	class:arm_compute::test::datasets::HOGDescriptorDataset
add_config	tests/datasets/HOGMultiDetectionDataset.h	/^    void add_config(std::string          image,$/;"	f	class:arm_compute::test::datasets::HOGMultiDetectionDataset
add_config	tests/datasets/LSTMLayerDataset.h	/^    void add_config(TensorShape src, TensorShape input_weights, TensorShape recurrent_weights, TensorShape cell_bias_weights, TensorShape output_cell_state, TensorShape dst, TensorShape scratch,$/;"	f	class:arm_compute::test::datasets::LSTMLayerDataset
add_config	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^    void add_config(TensorShape tensor, TensorShape param)$/;"	f	class:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset
add_config	tests/datasets/OpticalFlowDataset.h	/^    void add_config(std::string old_image, std::string new_image, OpticalFlowParameters params, size_t num_levels, size_t num_keypoints)$/;"	f	class:arm_compute::test::datasets::OpticalFlowDataset
add_config	tests/datasets/PoolingLayerDataset.h	/^    void add_config(TensorShape src, PoolingLayerInfo info)$/;"	f	class:arm_compute::test::datasets::PoolingLayerDataset
add_config	tests/datasets/RNNLayerDataset.h	/^    void add_config(TensorShape src, TensorShape weights, TensorShape recurrent_weights, TensorShape biases, TensorShape dst, ActivationLayerInfo info)$/;"	f	class:arm_compute::test::datasets::RNNLayerDataset
add_config	tests/datasets/ROIPoolingLayerDataset.h	/^    void add_config(TensorShape tensor_shape, ROIPoolingLayerInfo info, unsigned int num_rois)$/;"	f	class:arm_compute::test::datasets::ROIPoolingLayerDataset
add_config	tests/datasets/ReshapeLayerDataset.h	/^    void add_config(TensorShape in, TensorShape out)$/;"	f	class:arm_compute::test::datasets::ReshapeLayerDataset
add_config	tests/datasets/ScaleLayerDataset.h	/^    void add_config(TensorShape src, InterpolationPolicy policy, BorderMode border_mode, SamplingPolicy sampling_policy, float scale_x, float scale_y)$/;"	f	class:arm_compute::test::datasets::ScaleLayerDataset
add_config	tests/datasets/ThresholdDataset.h	/^    void add_config(uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType threshold_type, uint8_t upper)$/;"	f	class:arm_compute::test::datasets::ThresholdDataset
add_config	tests/datasets/WinogradInputTransformDataset.h	/^    void add_config(TensorShape in, WinogradInfo info)$/;"	f	class:arm_compute::test::datasets::WinogradInputTransformDataset
add_config	tests/datasets/WinogradOutputTransformDataset.h	/^    void add_config(TensorShape a, WinogradInfo b)$/;"	f	class:arm_compute::test::datasets::WinogradOutputTransformDataset
add_connection	src/graph/Graph.cpp	/^EdgeID Graph::add_connection(NodeID source, size_t source_idx, NodeID sink, size_t sink_idx)$/;"	f	class:arm_compute::graph::Graph
add_const_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_const_node(Graph &g, NodeParams params, TensorDescriptor desc, ITensorAccessorUPtr accessor)$/;"	f	class:arm_compute::graph::GraphBuilder
add_const_node_with_name	src/graph/GraphBuilder.cpp	/^NodeID add_const_node_with_name(Graph &g, NodeParams params, const std::string &name, TensorDescriptor desc, ITensorAccessorUPtr accessor)$/;"	f	namespace:arm_compute::graph::__anon303
add_convolution_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_convolution_node(Graph &g, NodeParams params, NodeIdxPair input,$/;"	f	class:arm_compute::graph::GraphBuilder
add_data_test_case	tests/framework/Framework.h	/^inline void Framework::add_data_test_case(std::string test_name, DatasetMode mode, TestCaseFactory::Status status, std::string description, D &&data)$/;"	f	class:arm_compute::test::framework::Framework
add_decorator	src/core/utils/logging/Logger.cpp	/^void Logger::add_decorator(std::unique_ptr<IDecorator> decorator)$/;"	f	class:Logger
add_depth_concatenate_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_depth_concatenate_node(Graph &g, NodeParams params, std::vector<NodeIdxPair> inputs)$/;"	f	class:arm_compute::graph::GraphBuilder
add_depthwise_convolution_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_depthwise_convolution_node(Graph &g, NodeParams params, NodeIdxPair input, Size2D kernel_spatial_extend, PadStrideInfo conv_info,$/;"	f	class:arm_compute::graph::GraphBuilder
add_elementwise_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_elementwise_node(Graph &g, NodeParams params, NodeIdxPair input0, NodeIdxPair input1, EltwiseOperation operation)$/;"	f	class:arm_compute::graph::GraphBuilder
add_flatten_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_flatten_node(Graph &g, NodeParams params, NodeIdxPair input)$/;"	f	class:arm_compute::graph::GraphBuilder
add_fully_connected_layer	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_fully_connected_layer(Graph &g, NodeParams params, NodeIdxPair input, unsigned int num_outputs,$/;"	f	class:arm_compute::graph::GraphBuilder
add_image_file	tests/datasets/ImageFileDatasets.h	/^    void add_image_file(std::string name)$/;"	f	class:arm_compute::test::datasets::ImageFileDataset
add_input_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_input_node(Graph &g, NodeParams params, TensorDescriptor desc, ITensorAccessorUPtr accessor)$/;"	f	class:arm_compute::graph::GraphBuilder
add_layer	src/graph/frontend/Stream.cpp	/^void Stream::add_layer(ILayer &layer)$/;"	f	class:arm_compute::graph::frontend::Stream
add_layer	src/graph/frontend/SubStream.cpp	/^void SubStream::add_layer(ILayer &layer)$/;"	f	class:arm_compute::graph::frontend::SubStream
add_lws_to_table	src/runtime/CL/CLTuner.cpp	/^void CLTuner::add_lws_to_table(const std::string &kernel_id, cl::NDRange optimal_lws)$/;"	f	class:CLTuner
add_node	arm_compute/graph/Graph.h	/^inline NodeID Graph::add_node(Ts &&... args)$/;"	f	class:arm_compute::graph::Graph
add_normalization_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_normalization_node(Graph &g, NodeParams params, NodeIdxPair input, NormalizationLayerInfo norm_info)$/;"	f	class:arm_compute::graph::GraphBuilder
add_option	src/core/CL/CLKernelLibrary.cpp	/^void CLBuildOptions::add_option(std::string option)$/;"	f	class:CLBuildOptions
add_option	tests/framework/command_line/CommandLineParser.h	/^inline T *CommandLineParser::add_option(const std::string &name, As &&... args)$/;"	f	class:arm_compute::test::framework::CommandLineParser
add_option_if	src/core/CL/CLKernelLibrary.cpp	/^void CLBuildOptions::add_option_if(bool cond, std::string option)$/;"	f	class:CLBuildOptions
add_option_if_else	src/core/CL/CLKernelLibrary.cpp	/^void CLBuildOptions::add_option_if_else(bool cond, std::string option_true, std::string option_false)$/;"	f	class:CLBuildOptions
add_options	src/core/CL/CLKernelLibrary.cpp	/^void CLBuildOptions::add_options(const StringSet &options)$/;"	f	class:CLBuildOptions
add_options_if	src/core/CL/CLKernelLibrary.cpp	/^void CLBuildOptions::add_options_if(bool cond, const StringSet &options)$/;"	f	class:CLBuildOptions
add_output_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_output_node(Graph &g, NodeParams params, NodeIdxPair input, ITensorAccessorUPtr accessor)$/;"	f	class:arm_compute::graph::GraphBuilder
add_pooling_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_pooling_node(Graph &g, NodeParams params, NodeIdxPair input, PoolingLayerInfo pool_info)$/;"	f	class:arm_compute::graph::GraphBuilder
add_positional_option	tests/framework/command_line/CommandLineParser.h	/^inline T *CommandLineParser::add_positional_option(As &&... args)$/;"	f	class:arm_compute::test::framework::CommandLineParser
add_printer	src/core/utils/logging/Logger.cpp	/^void Logger::add_printer(std::shared_ptr<Printer> printer)$/;"	f	class:Logger
add_printer	tests/framework/Framework.cpp	/^void Framework::add_printer(Printer *printer)$/;"	f	class:arm_compute::test::framework::Framework
add_reshape_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_reshape_node(Graph &g, NodeParams params, NodeIdxPair input, TensorShape shape)$/;"	f	class:arm_compute::graph::GraphBuilder
add_residual_block	examples/graph_resnet50.cpp	/^    void add_residual_block(const std::string &data_path, const std::string &name, unsigned int base_depth, unsigned int num_units, unsigned int stride)$/;"	f	class:GraphResNet50Example	file:
add_residual_block	examples/graph_resnext50.cpp	/^    void add_residual_block(const std::string &data_path, unsigned int base_depth, unsigned int stage, unsigned int num_units, unsigned int stride_conv_unit1)$/;"	f	class:GraphResNeXt50Example	file:
add_residual_block	examples_mod/graph_resnet50.cpp	/^    void add_residual_block(const std::string &data_path, const std::string &name, unsigned int base_depth, unsigned int num_units, unsigned int stride)$/;"	f	class:GraphResNet50Example	file:
add_saturate_QS8_QS8_QS8	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_saturate_QS8_QS8_QS8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_saturate_S16_S16_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_saturate_S16_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_saturate_S16_U8_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_saturate_S16_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_saturate_U8_S16_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^inline void add_saturate_U8_S16_S16(const ITensor *input1, const ITensor *input2, ITensor *output, const Window &window)$/;"	f	namespace:__anon241
add_saturate_U8_U8_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_saturate_U8_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_saturate_U8_U8_U8	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_saturate_U8_U8_U8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_scale_layer	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_scale_layer(Graph &g, const NodeParams &params, NodeIdxPair input, ITensorAccessorUPtr mul_accessor, ITensorAccessorUPtr add_accessor)$/;"	f	class:arm_compute::graph::GraphBuilder
add_softmax_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_softmax_node(Graph &g, NodeParams params, NodeIdxPair input, float beta)$/;"	f	class:arm_compute::graph::GraphBuilder
add_split_node	src/graph/GraphBuilder.cpp	/^NodeID GraphBuilder::add_split_node(Graph &g, NodeParams params, NodeIdxPair input, unsigned int num_splits, unsigned int axis)$/;"	f	class:arm_compute::graph::GraphBuilder
add_tensor_argument	src/core/CL/ICLKernel.cpp	/^void ICLKernel::add_tensor_argument(unsigned &idx, const ICLTensor *tensor, const Window &window)$/;"	f	class:ICLKernel
add_tensor_argument	src/core/GLES_COMPUTE/IGCKernel.cpp	/^void IGCKernel::add_tensor_argument(unsigned int &idx, const IGCTensor *tensor, const unsigned int binding_point, const Window &window)$/;"	f	class:IGCKernel
add_test_case	tests/framework/Framework.h	/^inline void Framework::add_test_case(std::string test_name, DatasetMode mode, TestCaseFactory::Status status)$/;"	f	class:arm_compute::test::framework::Framework
add_test_info	tests/framework/Framework.cpp	/^void Framework::add_test_info(std::string info)$/;"	f	class:arm_compute::test::framework::Framework
add_wrap_QS8_QS8_QS8	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_wrap_QS8_QS8_QS8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_wrap_S16_S16_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_wrap_S16_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_wrap_S16_U8_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_wrap_S16_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_wrap_U8_S16_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^inline void add_wrap_U8_S16_S16(const ITensor *input1, const ITensor *input2, ITensor *output, const Window &window)$/;"	f	namespace:__anon241
add_wrap_U8_U8_S16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_wrap_U8_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
add_wrap_U8_U8_U8	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void add_wrap_U8_U8_U8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon241
adjust_down	arm_compute/core/IAccessWindow.h	/^inline int adjust_down(int required, int available, int step)$/;"	f	namespace:arm_compute
adjust_odd_shape	arm_compute/core/Utils.h	/^inline TensorShape adjust_odd_shape(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute
adjust_up	arm_compute/core/IAccessWindow.h	/^inline int adjust_up(int required, int available, int step)$/;"	f	namespace:arm_compute
advance	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        bool advance(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
alex_net_data_types	tests/benchmark/NEON/SYSTEM/AlexNet.cpp	/^const auto alex_net_data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon383	file:
align	support/ToolchainSupport.h	/^inline void *align(std::size_t alignment, std::size_t size, void *&ptr, std::size_t &space)$/;"	f	namespace:arm_compute::support::cpp11
align_columns	arm_compute/core/Types.h	/^    bool align_columns;$/;"	m	struct:arm_compute::HOGNormType::IOFormatInfo
all_inputs_are_visited	arm_compute/graph/algorithms/BFS.h	/^inline bool all_inputs_are_visited(const INode *node, const std::vector<bool> &visited)$/;"	f	namespace:arm_compute::graph::detail
alloc_	include/CL/cl2.hpp	/^        Alloc alloc_;$/;"	m	class:cl::detail::Deleter
allocate	include/CL/cl2.hpp	/^    pointer allocate($/;"	f	class:cl::SVMAllocator
allocate	src/graph/backends/CL/CLSubTensorHandle.cpp	/^void CLSubTensorHandle::allocate()$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
allocate	src/graph/backends/CL/CLTensorHandle.cpp	/^void CLTensorHandle::allocate()$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
allocate	src/graph/backends/GLES/GCTensorHandle.cpp	/^void GCTensorHandle::allocate()$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
allocate	src/graph/backends/NEON/NESubTensorHandle.cpp	/^void NESubTensorHandle::allocate()$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
allocate	src/graph/backends/NEON/NETensorHandle.cpp	/^void NETensorHandle::allocate()$/;"	f	class:arm_compute::graph::backends::NETensorHandle
allocate	src/runtime/Allocator.cpp	/^void *Allocator::allocate(size_t size, size_t alignment)$/;"	f	class:Allocator
allocate	src/runtime/CL/CLBufferAllocator.cpp	/^void *CLBufferAllocator::allocate(size_t size, size_t alignment)$/;"	f	class:CLBufferAllocator
allocate	src/runtime/CL/CLLutAllocator.cpp	/^void CLLutAllocator::allocate()$/;"	f	class:CLLutAllocator
allocate	src/runtime/CL/CLMultiImage.cpp	/^void CLMultiImage::allocate()$/;"	f	class:CLMultiImage
allocate	src/runtime/CL/CLPyramid.cpp	/^void CLPyramid::allocate()$/;"	f	class:CLPyramid
allocate	src/runtime/CL/CLTensorAllocator.cpp	/^void CLTensorAllocator::allocate()$/;"	f	class:CLTensorAllocator
allocate	src/runtime/GLES_COMPUTE/GCBufferAllocator.cpp	/^void *GCBufferAllocator::allocate(size_t size, size_t alignment)$/;"	f	class:arm_compute::GCBufferAllocator
allocate	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^void GCTensorAllocator::allocate()$/;"	f	class:GCTensorAllocator
allocate	src/runtime/LutAllocator.cpp	/^void LutAllocator::allocate()$/;"	f	class:LutAllocator
allocate	src/runtime/MultiImage.cpp	/^void MultiImage::allocate()$/;"	f	class:MultiImage
allocate	src/runtime/Pyramid.cpp	/^void Pyramid::allocate()$/;"	f	class:Pyramid
allocate	src/runtime/TensorAllocator.cpp	/^void TensorAllocator::allocate()$/;"	f	class:TensorAllocator
allocate	tests/networks/AlexNetNetwork.h	/^    void allocate()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
allocate	tests/networks/LeNet5Network.h	/^    void allocate()$/;"	f	class:arm_compute::test::networks::LeNet5Network
allocate	tests/networks/MobileNetNetwork.h	/^    void allocate()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
allocate	tests/networks/MobileNetV1Network.h	/^    void allocate()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
allocate_all_input_tensors	src/graph/detail/ExecutionHelpers.cpp	/^void allocate_all_input_tensors(INode &node)$/;"	f	namespace:arm_compute::graph::detail
allocate_all_output_tensors	src/graph/detail/ExecutionHelpers.cpp	/^void allocate_all_output_tensors(INode &node)$/;"	f	namespace:arm_compute::graph::detail
allocate_all_tensors	src/graph/detail/ExecutionHelpers.cpp	/^void allocate_all_tensors(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
allocate_blobs	src/runtime/BlobMemoryPool.cpp	/^void BlobMemoryPool::allocate_blobs(const std::vector<size_t> &sizes)$/;"	f	class:BlobMemoryPool
allocate_const_tensors	src/graph/detail/ExecutionHelpers.cpp	/^void allocate_const_tensors(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
allocate_pointer	include/CL/cl2.hpp	/^cl::pointer<T, detail::Deleter<Alloc>> allocate_pointer(const Alloc &alloc_, Args&&... args)$/;"	f	namespace:cl
allocate_region	src/runtime/CL/CLTensorAllocator.cpp	/^std::shared_ptr<arm_compute::ICLMemoryRegion> allocate_region(cl::Context context, size_t size, cl_uint alignment)$/;"	f	namespace:__anon310
allocate_svm	include/CL/cl2.hpp	/^cl::pointer<T, detail::Deleter<SVMAllocator<T, SVMTrait>>> allocate_svm(Args... args)$/;"	f	namespace:cl
allocate_svm	include/CL/cl2.hpp	/^cl::pointer<T, detail::Deleter<SVMAllocator<T, SVMTrait>>> allocate_svm(const cl::Context &c, Args... args)$/;"	f	namespace:cl
allocate_workspace	arm_compute/runtime/NEON/AssemblyHelper.h	/^inline void allocate_workspace(size_t workspace_size, Tensor &workspace, MemoryGroup *memory_group, size_t alignment, unsigned int num_threads)$/;"	f	namespace:arm_compute
allocation_type	include/CL/cl_ext.h	/^    cl_uint  allocation_type;$/;"	m	struct:_cl_mem_ext_host_ptr
allocator	src/runtime/CL/CLLut.cpp	/^ILutAllocator *CLLut::allocator()$/;"	f	class:CLLut
allocator	src/runtime/CL/CLTensor.cpp	/^CLTensorAllocator *CLTensor::allocator()$/;"	f	class:CLTensor
allocator	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^ITensorAllocator *GCTensor::allocator()$/;"	f	class:GCTensor
allocator	src/runtime/Lut.cpp	/^ILutAllocator *Lut::allocator()$/;"	f	class:Lut
allocator	src/runtime/Tensor.cpp	/^TensorAllocator *Tensor::allocator()$/;"	f	class:Tensor
allowed_mismatch_percentage	tests/validation/NEON/HarrisCorners.cpp	/^const float allowed_mismatch_percentage = 10.f;$/;"	m	namespace:arm_compute::test::validation::__anon505	file:
allowed_missing_percentage	tests/validation/NEON/HarrisCorners.cpp	/^const float allowed_missing_percentage = 10.f;$/;"	m	namespace:arm_compute::test::validation::__anon505	file:
alpha	arm_compute/core/Types.h	/^    float alpha() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
alpha_size	include/linux/EGL/fbdev_window.h	/^	unsigned char alpha_size;$/;"	m	struct:fbdev_pixmap
anchor	arm_compute/core/Types.h	/^    Coordinates anchor; \/**< Anchor for the start of the valid region. *\/$/;"	m	struct:arm_compute::ValidRegion
and_8h	documentation/and_8h.js	/^var and_8h =$/;"	v
and_8h.xhtml#a1f5ad185828729587ebd0356cd0ca275	documentation/navtreeindex15.js	/^"and_8h.xhtml#a1f5ad185828729587ebd0356cd0ca275":[6,0,0,0,3,1,0,0,14],$/;"	p	class:NAVTREEINDEX15
angle_wrap_value	arm_compute/core/utils/logging/Helpers.h	/^inline std::string angle_wrap_value(const T &val)$/;"	f	namespace:arm_compute::logging
animationInProgress	documentation/navtree.js	/^var animationInProgress = false;$/;"	v
annotated_dup	documentation/annotated_dup.js	/^var annotated_dup =$/;"	v
append	src/graph/PassManager.cpp	/^void PassManager::append(std::unique_ptr<IGraphMutator> pass)$/;"	f	class:arm_compute::graph::PassManager
apply	tests/framework/Utils.h	/^void apply(O *obj, F &&func, const std::tuple<As...> &args)$/;"	f	namespace:arm_compute::test::framework
apply_2d_spatial_filter	tests/validation/reference/Utils.h	/^void apply_2d_spatial_filter(Coordinates coord, const SimpleTensor<T> &src, SimpleTensor<U> &dst, const TensorShape &filter_shape, const V *filter_itr, double scale, BorderMode border_mode,$/;"	f	namespace:arm_compute::test::validation
apply_dimension_correction	arm_compute/core/TensorShape.h	/^    void apply_dimension_correction()$/;"	f	class:arm_compute::TensorShape
apply_impl	tests/framework/Utils.h	/^void apply_impl(O *obj, F &&func, const std::tuple<As...> &args, detail::sequence<S...>)$/;"	f	namespace:arm_compute::test::framework::detail
are_all_finalized	src/runtime/ISimpleLifetimeManager.cpp	/^bool ISimpleLifetimeManager::are_all_finalized() const$/;"	f	class:ISimpleLifetimeManager
are_reshaped	arm_compute/core/Types.h	/^    bool are_reshaped() const$/;"	f	class:arm_compute::HOGNormType::WeightsInfo
area	arm_compute/core/Size2D.h	/^    size_t area() const$/;"	f	class:arm_compute::Size2D
arg0_	include/CL/cl.hpp	/^    Func f_; const Arg0& arg0_; const Arg1& arg1_;$/;"	m	struct:cl::detail::GetInfoFunctor1
arg0_	include/CL/cl.hpp	/^    Func f_; const Arg0& arg0_;$/;"	m	struct:cl::detail::GetInfoFunctor0
arg0_	include/CL/cl2.hpp	/^    Func f_; const Arg0& arg0_; const Arg1& arg1_;$/;"	m	struct:cl::detail::GetInfoFunctor1
arg0_	include/CL/cl2.hpp	/^    Func f_; const Arg0& arg0_;$/;"	m	struct:cl::detail::GetInfoFunctor0
arg1_	include/CL/cl.hpp	/^    Func f_; const Arg0& arg0_; const Arg1& arg1_;$/;"	m	struct:cl::detail::GetInfoFunctor1
arg1_	include/CL/cl2.hpp	/^    Func f_; const Arg0& arg0_; const Arg1& arg1_;$/;"	m	struct:cl::detail::GetInfoFunctor1
args	scripts/caffe_data_extractor.py	/^    args = parser.parse_args()$/;"	v
args	scripts/tensorflow_data_extractor.py	/^    args = parser.parse_args()$/;"	v
arithmetic__op_8cl	documentation/arithmetic__op_8cl.js	/^var arithmetic__op_8cl =$/;"	v
arithmetic_addition	tests/validation/reference/ArithmeticAddition.cpp	/^SimpleTensor<T> arithmetic_addition(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2, DataType dst_data_type, ConvertPolicy convert_policy)$/;"	f	namespace:arm_compute::test::validation::reference
arithmetic_subtraction	tests/validation/reference/ArithmeticSubtraction.cpp	/^SimpleTensor<T3> arithmetic_subtraction(const SimpleTensor<T1> &src1, const SimpleTensor<T2> &src2, DataType dst_data_type, ConvertPolicy convert_policy)$/;"	f	namespace:arm_compute::test::validation::reference
arithmetic_to_string	tests/framework/Utils.h	/^inline std::string arithmetic_to_string(T val, int decimal_places = 0)$/;"	f	namespace:arm_compute::test::framework
arm__compute_2core_2_fixed_point_8h	documentation/arm__compute_2core_2_fixed_point_8h.js	/^var arm__compute_2core_2_fixed_point_8h =$/;"	v
arm__compute_2core_2_helpers_8h	documentation/arm__compute_2core_2_helpers_8h.js	/^var arm__compute_2core_2_helpers_8h =$/;"	v
arm__compute_2core_2_types_8h	documentation/arm__compute_2core_2_types_8h.js	/^var arm__compute_2core_2_types_8h =$/;"	v
arm__compute_2core_2_types_8h.xhtml#afdda916edc7502967bbec17ea3c06c02a290d4b81f4e2b47d86fd1b0170e9aab7	documentation/navtreeindex16.js	/^"arm__compute_2core_2_types_8h.xhtml#afdda916edc7502967bbec17ea3c06c02a290d4b81f4e2b47d86fd1b0170e9aab7":[6,0,0,0,42,36,2],$/;"	p	class:NAVTREEINDEX16
arm__compute_2core_2_utils_8h	documentation/arm__compute_2core_2_utils_8h.js	/^var arm__compute_2core_2_utils_8h =$/;"	v
arm__compute_2core_2utils_2logging_2_helpers_8h	documentation/arm__compute_2core_2utils_2logging_2_helpers_8h.js	/^var arm__compute_2core_2utils_2logging_2_helpers_8h =$/;"	v
arm__compute_2core_2utils_2logging_2_macros_8h	documentation/arm__compute_2core_2utils_2logging_2_macros_8h.js	/^var arm__compute_2core_2utils_2logging_2_macros_8h =$/;"	v
arm__compute_2core_2utils_2logging_2_types_8h	documentation/arm__compute_2core_2utils_2logging_2_types_8h.js	/^var arm__compute_2core_2utils_2logging_2_types_8h =$/;"	v
arm__compute_2graph_2_type_printer_8h	documentation/arm__compute_2graph_2_type_printer_8h.js	/^var arm__compute_2graph_2_type_printer_8h =$/;"	v
arm__compute_2graph_2_types_8h	documentation/arm__compute_2graph_2_types_8h.js	/^var arm__compute_2graph_2_types_8h =$/;"	v
arm__compute_2graph_2_utils_8h	documentation/arm__compute_2graph_2_utils_8h.js	/^var arm__compute_2graph_2_utils_8h =$/;"	v
arm__compute_2graph_2backends_2_utils_8h	documentation/arm__compute_2graph_2backends_2_utils_8h.js	/^var arm__compute_2graph_2backends_2_utils_8h =$/;"	v
arm__compute_2graph_2frontend_2_types_8h	documentation/arm__compute_2graph_2frontend_2_types_8h.js	/^var arm__compute_2graph_2frontend_2_types_8h =$/;"	v
arm__compute_2runtime_2_types_8h	documentation/arm__compute_2runtime_2_types_8h.js	/^var arm__compute_2runtime_2_types_8h =$/;"	v
arm__compute_2runtime_2_utils_8h	documentation/arm__compute_2runtime_2_utils_8h.js	/^var arm__compute_2runtime_2_utils_8h =$/;"	v
arm_compute	arm_compute/core/AccessWindowAutoPadding.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/AccessWindowStatic.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/AccessWindowTranspose.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/CLHelpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/CLKernelLibrary.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/CLTypes.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLArray.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLDistribution1D.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLLut.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLMultiHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLMultiImage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLSimple2DKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLSimple3DKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLSimpleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/ICLTensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/OpenCL.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLAccumulateKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLBitwiseNotKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLBox3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLChannelShuffleLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLCol2ImKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLCopyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthConvertLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthwiseIm2ColKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthwiseVectorToTensorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDilateKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLErodeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLFillBorderKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLFloorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMInterleave4x4Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMMatrixAdditionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGEMMTranspose1xWKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGaussian3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGaussian5x5Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLIntegralImageKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLMedian3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLMinMaxLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLNonLinearFilterKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLNonMaximaSuppression3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLPermuteKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLRemapKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLReshapeLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLScaleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLTableLookupKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLThresholdKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLTransposeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWarpAffineKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWarpPerspectiveKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWinogradFilterTransformKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CL/kernels/ICLDepthwiseConvolutionLayer3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/CPPTypes.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/ICPPKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/ICPPSimpleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Coordinates.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Dimensions.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Error.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/FixedPoint.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/GCHelpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/IGCSimple2DKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/IGCSimple3DKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/IGCSimpleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/IGCTensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCFillBorderKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMTranspose1xWKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCScaleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCTransposeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/GPUTarget.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/HOGInfo.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Helpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IAccessWindow.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IArray.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IDistribution.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IDistribution1D.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/ILut.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IMultiHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IMultiImage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/IPyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/ITensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/ITensorInfo.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/MultiImageInfo.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/INEKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/INESimpleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/NEAsymm.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/NEFixedPoint.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/NEMath.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEBitwiseNotKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEChannelExtractKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NECol2ImKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDilateKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEErodeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEFloorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMInterleave4x4Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMMatrixAdditionKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGEMMTranspose1xWKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGaussian3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEIntegralImageKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEMedian3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEPermuteKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NERemapKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEReshapeLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NETableLookupKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NETransposeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/intrinsics/and.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/intrinsics/dup_n.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/intrinsics/load.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/intrinsics/max.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/intrinsics/min.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/intrinsics/store.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/NEON/wrapper/traits.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/PixelValue.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/PyramidInfo.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/QAsymm8.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Rounding.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Size2D.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Steps.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Strides.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/SubTensorInfo.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/TensorInfo.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/TensorShape.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Types.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Validate.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/Window.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/io/FileHandler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/FilePrinter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/Helpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/IPrinter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/LogMsgDecorators.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/Logger.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/LoggerRegistry.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/StdPrinter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/logging/Types.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/CRTP.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/Cast.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/ICloneable.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/Iterable.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/ShapeCalculator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/Signal.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/misc/Utility.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/quantization/AsymmHelpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/strong_type/StrongType.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/Edge.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/Graph.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/GraphBuilder.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/GraphContext.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/GraphManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/IDeviceBackend.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/IGraphMutator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/IGraphPrinter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/INode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/INodeVisitor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/ITensorAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/ITensorHandle.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/PassManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/Tensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/TensorDescriptor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/TypePrinter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/Types.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/Workload.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/algorithms/BFS.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/BackendRegistrar.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/BackendRegistry.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/CL/CLFunctionFactory.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/CL/CLNodeValidator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/CL/CLTensorHandle.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/GLES/GCFunctionFactory.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/GLES/GCNodeValidator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/NEON/NEFunctionFactory.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/NEON/NENodeValidator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/NEON/NETensorHandle.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/backends/ValidateHelpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/detail/CrossLayerMemoryManagerHelpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/detail/ExecutionHelpers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/ILayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/IStream.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/IStreamOperators.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/Layers.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/Stream.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/SubStream.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/frontend/Types.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/mutators/DepthConcatSubTensorMutator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/mutators/InPlaceOperationMutator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/mutators/NodeFusionMutator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/mutators/SplitLayerSubTensorMutator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/ActivationLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/ConstNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/EltwiseLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/FlattenLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/InputNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/NodesFwd.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/NormalizationLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/OutputNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/PoolingLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/ReshapeLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/nodes/SplitLayerNode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/graph/printers/DotGraphPrinter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Allocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Array.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/BlobLifetimeManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/BlobMemoryPool.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLArray.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLBufferAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLDistribution1D.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLLut.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLLutAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLMemory.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLMemoryGroup.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLMemoryRegion.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLMultiHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLMultiImage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLPyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLSubTensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLTensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLTensorAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/CLTuner.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/ICLSimpleFunction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/ICLTuner.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLAbsoluteDifference.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLAccumulate.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLActivationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLArithmeticAddition.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLArithmeticSubtraction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLBatchNormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLBitwiseAnd.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLBitwiseNot.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLBitwiseOr.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLBitwiseXor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLBox3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLChannelCombine.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLChannelExtract.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLChannelShuffleLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLColorConvert.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLConvertFullyConnectedWeights.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLConvolution.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLCopy.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDeconvolutionLayerUpsample.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDepthConvertLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDequantizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDerivative.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDilate.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLErode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLFastCorners.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLFillBorder.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLFlattenLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLFloor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGEMM.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGEMMInterleave4x4.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGEMMLowpOutputStage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGEMMTranspose1xW.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGaussian3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLHOGDetector.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLHistogram.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLIntegralImage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLMagnitude.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLMedian3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLNonLinearFilter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLNonMaximaSuppression3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLNormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLPermute.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLPhase.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLPixelWiseMultiplication.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLPoolingLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLROIPoolingLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLReductionOperation.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLRemap.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLReshapeLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLScale.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLScharr3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLSobel3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLTableLookup.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLThreshold.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLTranspose.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLWarpAffine.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLWarpPerspective.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLWidthConcatenateLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/functions/CLWinogradInputTransform.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CL/tuners/BifrostTuner.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CPP/CPPScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CPP/ICPPSimpleFunction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CPP/functions/CPPPermute.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CPP/functions/CPPUpsample.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/CPUUtils.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Distribution1D.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/GCBufferAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/GCMemoryGroup.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/IGCSimpleFunction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCAbsoluteDifference.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCActivationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCArithmeticAddition.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCDropoutLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCFillBorder.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMMInterleave4x4.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMMTranspose1xW.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCPixelWiseMultiplication.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCScale.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCTensorShift.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/GLES_COMPUTE/functions/GCTranspose.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/HOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IFunction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/ILifetimeManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/ILutAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IMemoryGroup.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IMemoryManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IMemoryPool.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IMemoryRegion.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IPoolManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/IScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/ISimpleLifetimeManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/ITensorAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Lut.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/LutAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Memory.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/MemoryGroup.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/MemoryGroupBase.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/MemoryManagerOnDemand.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/MemoryRegion.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/MultiHOG.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/MultiImage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/AssemblyHelper.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/INESimpleFunction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/NEScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEAbsoluteDifference.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEAccumulate.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEActivationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEArithmeticAddition.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEArithmeticSubtraction.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEBatchNormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEBitwiseAnd.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEBitwiseNot.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEBitwiseOr.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEBitwiseXor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEBox3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEChannelCombine.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEChannelExtract.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NECol2Im.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEColorConvert.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEConvertFullyConnectedWeights.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEConvolution.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDepthConvertLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDequantizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDerivative.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDilate.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEErode.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEFillBorder.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEFlattenLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEFloor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMM.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMMInterleave4x4.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMMLowpOutputStage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGEMMTranspose1xW.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGaussian3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEHOGDetector.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEHistogram.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEIm2Col.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEIntegralImage.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEMagnitude.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEMedian3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEMinMaxLocation.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NENonLinearFilter.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NENonMaximaSuppression3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEPermute.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEPhase.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEPixelWiseMultiplication.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEROIPoolingLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEReductionOperation.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NERemap.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEReshapeLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEScale.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEScharr3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NESobel3x3.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NETableLookup.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEThreshold.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NETranspose.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEWarpAffine.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEWarpPerspective.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/OMP/OMPScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/OffsetLifetimeManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/OffsetMemoryPool.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/PoolManager.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Pyramid.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Scheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/SingleThreadScheduler.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/SubTensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Tensor.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/TensorAllocator.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Types.h	/^namespace arm_compute$/;"	n
arm_compute	arm_compute/runtime/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	src/core/CL/CLHelpers.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/OpenCL.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/GLES_COMPUTE/GCHelpers.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/GPUTarget.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEBitwiseAndKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEBitwiseNotKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEBitwiseOrKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEBitwiseXorKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEDepthConvertLayerKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEDilateKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEErodeKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEFillInnerBorderKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEHistogramKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEMeanStdDevKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NERemapKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEScaleKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NETableLookupKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEThresholdKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NETransposeKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/Graph.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/GraphBuilder.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/GraphContext.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/GraphManager.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/INode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/PassManager.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/Tensor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/Utils.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/Workload.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/BackendRegistry.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/CL/CLDeviceBackend.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/CL/CLFunctionsFactory.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/CL/CLNodeValidator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/CL/CLSubTensorHandle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/CL/CLTensorHandle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/GLES/GCDeviceBackend.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/GLES/GCNodeValidator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/GLES/GCTensorHandle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/NEON/NEDeviceBackend.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/NEON/NEFunctionFactory.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/NEON/NENodeValidator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/NEON/NESubTensorHandle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/backends/NEON/NETensorHandle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/detail/ExecutionHelpers.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/frontend/Stream.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/frontend/SubStream.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/mutators/DepthConcatSubTensorMutator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/mutators/InPlaceOperationMutator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/mutators/NodeFusionMutator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/mutators/SplitLayerSubTensorMutator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/ActivationLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/ConstNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/ConvolutionLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/EltwiseLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/FlattenLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/InputNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/NormalizationLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/OutputNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/PoolingLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/ReshapeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/SoftmaxLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/nodes/SplitLayerNode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/graph/printers/DotGraphPrinter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CL/CLMemory.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CL/CLMemoryRegion.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CL/functions/CLChannelShuffleLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CL/functions/CLMinMaxLocation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CL/tuners/BifrostTuner.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CPP/CPPScheduler.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CPP/SingleThreadScheduler.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/CPUUtils.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/GLES_COMPUTE/GCBufferAllocator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/IScheduler.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/Memory.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/NEON/functions/NEConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/NEON/functions/NEGEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	support/Mutex.h	/^namespace arm_compute$/;"	n
arm_compute	support/Semaphore.h	/^namespace arm_compute$/;"	n
arm_compute	support/ToolchainSupport.h	/^namespace arm_compute$/;"	n
arm_compute	tests/AssetsLibrary.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/AssetsLibrary.h	/^namespace arm_compute$/;"	n
arm_compute	tests/CL/CLAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/CL/CLArrayAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/CL/CLHOGAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/CL/CLLutAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/CL/Helper.h	/^namespace arm_compute$/;"	n
arm_compute	tests/GLES_COMPUTE/GCAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/GLES_COMPUTE/Helper.h	/^namespace arm_compute$/;"	n
arm_compute	tests/Globals.h	/^namespace arm_compute$/;"	n
arm_compute	tests/IAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/IArrayAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/IHOGAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/ILutAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/NEON/Accessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/NEON/ArrayAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/NEON/HOGAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/NEON/Helper.h	/^namespace arm_compute$/;"	n
arm_compute	tests/NEON/LutAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/PaddingCalculator.h	/^namespace arm_compute$/;"	n
arm_compute	tests/RawLutAccessor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/RawTensor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/RawTensor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/SimpleTensor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/TensorCache.h	/^namespace arm_compute$/;"	n
arm_compute	tests/TypeReader.h	/^namespace arm_compute$/;"	n
arm_compute	tests/Types.h	/^namespace arm_compute$/;"	n
arm_compute	tests/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/CL/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/DepthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/DepthwiseConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/DepthwiseSeparableConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/DequantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/DirectConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/EqualizeHistogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/FlattenLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Floor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/GEMMInterleave4x4.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/GEMMLowp.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/HOGDescriptor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/HarrisCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Histogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/IntegralImage.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/L2NormalizeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Magnitude.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/MeanStdDev.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Median3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/MinMaxLocation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/NormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Phase.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/QuantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/ROIPoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/ReshapeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/SYSTEM/AlexNet.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/SYSTEM/LeNet5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/SYSTEM/MobileNet.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/SYSTEM/MobileNetV1.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/CL/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/GLES_COMPUTE/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/DepthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/DequantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/DirectConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/EqualizeHistogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/FlattenLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Floor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/GEMMInterleave4x4.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/GEMMLowp.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/HOGDescriptor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/HarrisCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Histogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/IntegralImage.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/L2NormalizeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Magnitude.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/MeanStdDev.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Median3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/MinMaxLocation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/NormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Phase.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/QuantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/ROIPoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/ReshapeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/SYSTEM/AlexNet.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/SYSTEM/LeNet5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/NEON/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/benchmark/fixtures/ActivationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/AlexNetFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/FlattenLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/FloorFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/GEMMFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/GEMMLowpFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/HarrisCornersFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/HistogramFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/IntegralImageFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/LeNet5Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/MagnitudeFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/MeanStdDevFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/Median3x3Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/MobileNetFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/PhaseFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/PoolingLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/ScaleFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/ScaleLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/TransposeFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ActivationFunctionsDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/AlexNetGEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/BatchNormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/BorderModeDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ChannelShuffleLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ConvertPolicyDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/DilatedConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/DirectConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/FullyConnectedLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/GEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/GEMMLowpDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/GoogleNetGEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/GradientDimensionDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/HOGDescriptorDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/HOGMultiDetectionDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ImageFileDatasets.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/InterpolationPolicyDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/LSTMLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/LargeConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/LargeGEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/LargeGEMMLowpDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/LocallyConnectedDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/MatrixMultiplyGEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/MatrixPatternDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/NonLinearFilterFunctionDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/NormalizationTypesDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/OpticalFlowDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/PoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/PoolingTypesDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/RNNLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ROIPoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/RandomBatchNormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/RandomNormalizePlanarYUVLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ReductionOperationDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ReshapeLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/SamplingPolicyDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ScaleLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ShapeDatasets.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/SmallConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/SmallGEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/SmallGEMMLowpDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/ThresholdDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/TinyConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/TinyGEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/WinogradInputTransformDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/WinogradOutputTransformDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/alexnet/AlexNetActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/alexnet/AlexNetFullyConnectedLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/alexnet/AlexNetNormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/alexnet/AlexNetPoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1FullyConnectedLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1GEMMDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1NormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1PoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4BatchNormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4FullyConnectedLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4PoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/lenet5/LeNet5ActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/lenet5/LeNet5ConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/lenet5/LeNet5FullyConnectedLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/lenet5/LeNet5PoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/mobilenet/MobileNetActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/mobilenet/MobileNetBatchNormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/mobilenet/MobileNetConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseSeparableConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/squeezenet/SqueezeNetActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/squeezenet/SqueezeNetPoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/vgg/vgg16/VGG16ActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/vgg/vgg16/VGG16FullyConnectedLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/vgg/vgg16/VGG16PoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/yolo/v2/YOLOV2BatchNormalizationLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/yolo/v2/YOLOV2ConvolutionLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/datasets/system_tests/yolo/v2/YOLOV2PoolingLayerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Asserts.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/DatasetModes.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/DatasetModes.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Exceptions.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/Exceptions.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Framework.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/Framework.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Profiler.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/Profiler.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Registrars.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/TestCase.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/TestCaseFactory.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/TestFilter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/TestFilter.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/TestResult.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/CommandLineParser.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/command_line/CommandLineParser.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/CommonOptions.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/command_line/CommonOptions.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/EnumListOption.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/EnumOption.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/ListOption.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/Option.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/command_line/Option.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/SimpleOption.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/command_line/ToggleOption.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/command_line/ToggleOption.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/CartesianProductDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/ContainerDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/Dataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/InitializerListDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/JoinDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/RangeDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/SingletonDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/datasets/ZipDataset.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/Instrument.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/Instruments.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/Instruments.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/InstrumentsStats.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/InstrumentsStats.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/MaliCounter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/MaliCounter.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/Measurement.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/OpenCLMemoryUsage.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/OpenCLTimer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/OpenCLTimer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/PMU.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/PMU.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/PMUCounter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/PMUCounter.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/SchedulerTimer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/SchedulerTimer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/instruments/WallClockTimer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/instruments/WallClockTimer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/printers/JSONPrinter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/printers/JSONPrinter.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/printers/PrettyPrinter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/printers/PrettyPrinter.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/printers/Printer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/printers/Printer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/framework/printers/Printers.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/framework/printers/Printers.h	/^namespace arm_compute$/;"	n
arm_compute	tests/main.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/networks/AlexNetNetwork.h	/^namespace arm_compute$/;"	n
arm_compute	tests/networks/LeNet5Network.h	/^namespace arm_compute$/;"	n
arm_compute	tests/networks/MobileNetNetwork.h	/^namespace arm_compute$/;"	n
arm_compute	tests/networks/MobileNetV1Network.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/CL/AbsoluteDifference.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Accumulate.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ArithmeticAddition.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ArithmeticSubtraction.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/BitwiseAnd.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/BitwiseNot.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/BitwiseOr.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/BitwiseXor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Box3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ChannelCombine.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ChannelExtract.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ChannelShuffle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Convolution.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Copy.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DeconvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DepthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DepthConvertLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DepthwiseSeparableConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DequantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Derivative.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Dilate.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DilatedConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/DirectConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/EqualizeHistogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Erode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/FastCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/FillBorder.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/FixedPoint/FixedPointTarget.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/CL/FixedPoint/FixedPoint_QS8.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Flatten.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Floor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/GEMMLowp.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Gaussian3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Gaussian5x5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/GaussianPyramid.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/GlobalPoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/HOGDescriptor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/HOGDetector.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/HOGMultiDetection.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/HarrisCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Histogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/IntegralImage.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/L2NormalizeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/LSTMLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/LocallyConnected.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Magnitude.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/MeanStdDev.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Median3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/MinMaxLocation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/NonLinearFilter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/NormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/OpticalFlow.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Permute.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Phase.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/PixelWiseMultiplication.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/QuantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/RNNLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ReductionOperation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Remap.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/ReshapeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/SYSTEM/AlexNet.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/SYSTEM/LeNet5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Scharr.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Sobel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/TableLookup.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Threshold.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/UNIT/MemoryManager.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/UNIT/TensorAllocator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/UNIT/Tuner.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/WarpAffine.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/WarpPerspective.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/WidthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CL/Winograd.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/CPP/Permute.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/FixedPoint.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/ArithmeticAddition.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/GlobalPoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/NormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/GLES_COMPUTE/UNIT/MemoryManager.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/Helpers.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/Helpers.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/NEON/AbsoluteDifference.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Accumulate.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ArithmeticAddition.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ArithmeticSubtraction.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/BitwiseAnd.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/BitwiseNot.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/BitwiseOr.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/BitwiseXor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Box3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ChannelCombine.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ChannelExtract.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Col2Im.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Convolution.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DeconvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DepthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DepthConvertLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DepthwiseSeparableConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DequantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Derivative.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Dilate.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/DirectConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/EqualizeHistogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Erode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/FastCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/FillBorder.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/FixedPoint/FixedPoint.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/FixedPoint/FixedPointTarget.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Flatten.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Floor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/GEMMLowp.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Gaussian3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Gaussian5x5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/GaussianPyramid.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/GlobalPoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/HOGDescriptor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/HOGDetector.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/HOGMultiDetection.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/HarrisCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Histogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Im2Col.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/IntegralImage.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/L2NormalizeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/LocallyConnected.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Magnitude.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/MeanStdDev.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Median3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/MinMaxLocation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/NonLinearFilter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/NormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/OpticalFlow.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Permute.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Phase.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/PixelWiseMultiplication.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/QuantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ReductionOperation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Remap.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/ReshapeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/SYSTEM/AlexNet.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/SYSTEM/LeNet5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Schaar.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Sobel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/TableLookup.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Threshold.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/UNIT/MemoryManager.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/UNIT/TensorAllocator.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/WarpAffine.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/NEON/WarpPerspective.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/UNIT/FixedPoint.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/UNIT/GPUTarget.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/UNIT/TensorInfo.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/UNIT/TensorShape.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/Validation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/Validation.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/AccumulateFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ActivationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/BitwiseAndFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/BitwiseNotFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/BitwiseOrFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/BitwiseXorFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/Box3x3Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ChannelCombineFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ChannelExtractFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ConvolutionFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/CopyFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DepthConvertLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DequantizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DerivativeFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DilateFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/DropoutLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/EqualizeHistogramFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ErodeFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/FastCornersFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/FixedPointFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/FlattenLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/FloorFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/GEMMFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/GEMMLowpFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/Gaussian3x3Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/Gaussian5x5Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/HOGDescriptorFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/HOGDetectorFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/HarrisCornersFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/HistogramFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/Im2ColFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/IntegralImageFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/LSTMLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/LocallyConnectedFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/MagnitudeFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/MeanStdDevFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/Median3x3Fixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/MinMaxLocationFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/NonLinearFilterFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/NormalizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/OpticalFlowFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/PermuteFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/PhaseFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/PoolingLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/QuantizationLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/RNNLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ReductionOperationFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/RemapFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ReshapeLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ScaleFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ScharrFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/SobelFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/SoftmaxLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/TableLookupFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/ThresholdFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/TransposeFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/WarpAffineFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/WarpPerspectiveFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/AbsoluteDifference.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/AbsoluteDifference.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Accumulate.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Accumulate.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ActivationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ActivationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ArithmeticAddition.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ArithmeticAddition.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ArithmeticSubtraction.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ArithmeticSubtraction.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/BatchNormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/BatchNormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/BitwiseAnd.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/BitwiseAnd.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/BitwiseNot.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/BitwiseNot.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/BitwiseOr.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/BitwiseOr.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/BitwiseXor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/BitwiseXor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Box3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Box3x3.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ChannelCombine.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ChannelCombine.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ChannelExtract.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ChannelExtract.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ChannelShuffle.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ChannelShuffle.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ConvertFullyConnectedWeights.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ConvertFullyConnectedWeights.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Convolution.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Convolution.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Convolution3d.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Copy.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Copy.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/DeconvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/DeconvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/DepthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/DepthConcatenateLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/DepthConvertLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/DepthConvertLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/DepthwiseConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/DepthwiseConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/DepthwiseSeparableConvolutionLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/DepthwiseSeparableConvolutionLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/DequantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/DequantizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Derivative.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Derivative.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Dilate.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Dilate.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/EqualizeHistogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/EqualizeHistogram.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Erode.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Erode.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/FastCorners.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/FastCorners.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/FixedPoint.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/FixedPoint.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/FixedPointPixelWiseMultiplication.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/FixedPointPixelWiseMultiplication.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/FlattenLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/FlattenLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Floor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Floor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/FullyConnectedLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/FullyConnectedLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/GEMM.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/GEMM.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/GEMMInterleave4x4.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/GEMMInterleaveBlocked.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/GEMMLowp.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/GEMMLowp.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/GEMMTranspose1xW.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Gaussian3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Gaussian3x3.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Gaussian5x5.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Gaussian5x5.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/GaussianPyramidHalf.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/GaussianPyramidHalf.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/HOGDescriptor.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/HOGDescriptor.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/HOGDetector.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/HOGDetector.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/HOGMultiDetection.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/HOGMultiDetection.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/HarrisCornerDetector.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/HarrisCornerDetector.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Histogram.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Histogram.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Im2Col.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Im2Col.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/IntegralImage.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/IntegralImage.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/L2NormalizeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/L2NormalizeLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/LocallyConnected.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/LocallyConnected.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Magnitude.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Magnitude.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/MeanStdDev.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/MeanStdDev.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Median3x3.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Median3x3.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/MinMaxLocation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/MinMaxLocation.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/NonLinearFilter.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/NonLinearFilter.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/NonMaximaSuppression.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/NonMaximaSuppression.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/NormalizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/NormalizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/NormalizePlanarYUVLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/NormalizePlanarYUVLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/OpticalFlow.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/OpticalFlow.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Permute.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Permute.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Phase.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Phase.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/PixelWiseMultiplication.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/PixelWiseMultiplication.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/PoolingLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/PoolingLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/QuantizationLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/QuantizationLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ReductionOperation.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ReductionOperation.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Remap.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Remap.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/ReshapeLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/ReshapeLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Scale.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Scale.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Scharr.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Scharr.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Sobel.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Sobel.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/SoftmaxLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/SoftmaxLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/TableLookup.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/TableLookup.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Threshold.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Threshold.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Transpose.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Transpose.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Utils.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Utils.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/UtilsQuantizedAsymm.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/WarpAffine.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/WarpAffine.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/WarpPerspective.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/WarpPerspective.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/WidthConcatenateLayer.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/WidthConcatenateLayer.h	/^namespace arm_compute$/;"	n
arm_compute	tests/validation/reference/Winograd.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	tests/validation/reference/Winograd.h	/^namespace arm_compute$/;"	n
arm_compute	utils/GraphUtils.h	/^namespace arm_compute$/;"	n
arm_compute	utils/TypePrinter.h	/^namespace arm_compute$/;"	n
arm_compute	utils/Utils.cpp	/^namespace arm_compute$/;"	n	file:
arm_compute	utils/Utils.h	/^namespace arm_compute$/;"	n
arm_gemm	arm_compute/core/NEON/kernels/assembly/arm_gemm.hpp	/^namespace arm_gemm {$/;"	n
arm_gemm	arm_compute/core/NEON/kernels/assembly/arm_gemm_local.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^namespace arm_gemm {$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_batched.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_fp16.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_int16.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_int8.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_uint16.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a53.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/a55r1.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8/a55r1.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8/a55r1.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8/a55r1.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/a53.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/a55.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/a55r1.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans/generic.cpp	/^namespace arm_gemm$/;"	n	file:
arm_gemm	src/core/NEON/kernels/arm_gemm/mergeresults.hpp	/^namespace arm_gemm$/;"	n
arm_gemm	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^namespace arm_gemm$/;"	n
arm_non_uniform_workgroup_supported	src/core/CL/CLHelpers.cpp	/^bool arm_non_uniform_workgroup_supported(const cl::Device &device)$/;"	f	namespace:arm_compute
as_present	tests/framework/instruments/hwc.hpp	/^    uint32_t as_present;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
asin	include/half/half.hpp	/^			static expr asin(float arg) { return expr(std::asin(arg)); }$/;"	f	struct:detail::functions
asin	include/half/half.hpp	/^		inline expr asin(expr arg) { return functions::asin(arg); }$/;"	f	namespace:detail
asin	include/half/half.hpp	/^		inline expr asin(half arg) { return functions::asin(arg); }$/;"	f	namespace:detail
asinh	include/half/half.hpp	/^			static expr asinh(float arg)$/;"	f	struct:detail::functions
asinh	include/half/half.hpp	/^		inline expr asinh(expr arg) { return functions::asinh(arg); }$/;"	f	namespace:detail
asinh	include/half/half.hpp	/^		inline expr asinh(half arg) { return functions::asinh(arg); }$/;"	f	namespace:detail
assign	include/CL/cl.hpp	/^    void assign(I start, I end)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
assigned_target	src/graph/INode.cpp	/^Target INode::assigned_target() const$/;"	f	class:arm_compute::graph::INode
associate_memory_group	arm_compute/runtime/CL/CLMemoryGroup.h	/^inline void MemoryGroupBase<CLTensor>::associate_memory_group(CLTensor *obj)$/;"	f	class:arm_compute::MemoryGroupBase
associate_memory_group	arm_compute/runtime/GLES_COMPUTE/GCMemoryGroup.h	/^inline void MemoryGroupBase<GCTensor>::associate_memory_group(GCTensor *obj)$/;"	f	class:arm_compute::MemoryGroupBase
associate_memory_group	arm_compute/runtime/MemoryGroup.h	/^inline void MemoryGroupBase<Tensor>::associate_memory_group(Tensor *obj)$/;"	f	class:arm_compute::MemoryGroupBase
associate_memory_group	arm_compute/runtime/MemoryGroupBase.h	/^inline void MemoryGroupBase<TensorType>::associate_memory_group(TensorType *)$/;"	f	class:arm_compute::MemoryGroupBase
asymm_int_mult	tests/validation/reference/UtilsQuantizedAsymm.h	/^inline int32_t asymm_int_mult(int32_t a, int32_t b)$/;"	f	namespace:arm_compute::test::validation
asymm_rounding_divide_by_pow2	tests/validation/reference/UtilsQuantizedAsymm.h	/^inline int32_t asymm_rounding_divide_by_pow2(int32_t x, int exponent)$/;"	f	namespace:arm_compute::test::validation
at	arm_compute/core/IArray.h	/^    virtual T &at(size_t index) const$/;"	f	class:arm_compute::IArray
atan	include/half/half.hpp	/^			static expr atan(float arg) { return expr(std::atan(arg)); }$/;"	f	struct:detail::functions
atan	include/half/half.hpp	/^		inline expr atan(expr arg) { return functions::atan(arg); }$/;"	f	namespace:detail
atan	include/half/half.hpp	/^		inline expr atan(half arg) { return functions::atan(arg); }$/;"	f	namespace:detail
atan2	include/half/half.hpp	/^			static expr atan2(float x, float y) { return expr(std::atan2(x, y)); }$/;"	f	struct:detail::functions
atan2	include/half/half.hpp	/^		inline expr atan2(expr x, expr y) { return functions::atan2(x, y); }$/;"	f	namespace:detail
atan2	include/half/half.hpp	/^		inline expr atan2(expr x, half y) { return functions::atan2(x, y); }$/;"	f	namespace:detail
atan2	include/half/half.hpp	/^		inline expr atan2(half x, expr y) { return functions::atan2(x, y); }$/;"	f	namespace:detail
atan2	include/half/half.hpp	/^		inline expr atan2(half x, half y) { return functions::atan2(x, y); }$/;"	f	namespace:detail
atan2_0_180	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float16x8_t atan2_0_180(float16x8_t gx, float16x8_t gy)$/;"	f	namespace:fp16
atan2_0_180	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t atan2_0_180(float32x4_t gx, float32x4_t gy)$/;"	f	namespace:__anon278
atan2_0_360	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float16x8_t atan2_0_360(float16x8_t gx, float16x8_t gy)$/;"	f	namespace:fp16
atan2_0_360	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t atan2_0_360(float32x4_t gx, float32x4_t gy)$/;"	f	namespace:__anon278
atan2_fast	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float16x8_t atan2_fast(float16x8_t gx, float16x8_t gy, float16x8_t scale)$/;"	f	namespace:fp16
atanh	include/half/half.hpp	/^			static expr atanh(float arg)$/;"	f	struct:detail::functions
atanh	include/half/half.hpp	/^		inline expr atanh(expr arg) { return functions::atanh(arg); }$/;"	f	namespace:detail
atanh	include/half/half.hpp	/^		inline expr atanh(half arg) { return functions::atanh(arg); }$/;"	f	namespace:detail
auto_init	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^void auto_init(const ITensorInfo *input, ITensorInfo *output, PoolingLayerInfo pool_info)$/;"	f	namespace:__anon216
auto_init	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^void auto_init(const ITensorInfo *input, ITensorInfo *output, unsigned int pooled_w, unsigned int pooled_h)$/;"	f	namespace:__anon236
auto_init	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void auto_init(const ITensorInfo *input, ITensorInfo *output, unsigned int pooled_w, unsigned int pooled_h)$/;"	f	namespace:__anon288
auto_padding	src/core/TensorInfo.cpp	/^bool TensorInfo::auto_padding()$/;"	f	class:TensorInfo
available_instruments	tests/framework/Framework.cpp	/^std::set<InstrumentsDescription> Framework::available_instruments() const$/;"	f	class:arm_compute::test::framework::Framework
axis	src/graph/nodes/SplitLayerNode.cpp	/^unsigned int SplitLayerNode::axis() const$/;"	f	class:arm_compute::graph::SplitLayerNode
b	arm_compute/core/Types.h	/^    float b() const$/;"	f	class:arm_compute::HOGNormType::ActivationLayerInfo
b_matrix_stride	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int b_matrix_stride, b_row_stride;$/;"	m	class:winograd::BatchedBlockedGemm
b_ptr	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const TIn* const b_ptr;$/;"	m	class:winograd::BatchedBlockedGemm
b_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int b_matrix_stride, b_row_stride;$/;"	m	class:winograd::BatchedBlockedGemm
back	include/CL/cl.hpp	/^    T& back(void)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
back	include/CL/cl.hpp	/^    const T& back(void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
backend_allocator	src/graph/backends/CL/CLDeviceBackend.cpp	/^IAllocator *CLDeviceBackend::backend_allocator()$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
backend_allocator	src/graph/backends/GLES/GCDeviceBackend.cpp	/^IAllocator *GCDeviceBackend::backend_allocator()$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
backend_allocator	src/graph/backends/NEON/NEDeviceBackend.cpp	/^IAllocator *NEDeviceBackend::backend_allocator()$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
backends	arm_compute/graph/IDeviceBackend.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/BackendRegistrar.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/BackendRegistry.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/CL/CLFunctionFactory.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/CL/CLNodeValidator.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/CL/CLTensorHandle.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/GLES/GCFunctionFactory.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/GLES/GCNodeValidator.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/NEON/NEFunctionFactory.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/NEON/NENodeValidator.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/NEON/NETensorHandle.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/Utils.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	arm_compute/graph/backends/ValidateHelpers.h	/^namespace backends$/;"	n	namespace:arm_compute::graph
backends	src/graph/backends/BackendRegistry.cpp	/^const std::map<Target, std::unique_ptr<IDeviceBackend>> &BackendRegistry::backends() const$/;"	f	class:arm_compute::graph::backends::BackendRegistry
backends	src/graph/backends/BackendRegistry.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/CL/CLDeviceBackend.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/CL/CLFunctionsFactory.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/CL/CLNodeValidator.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/CL/CLSubTensorHandle.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/CL/CLTensorHandle.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/GLES/GCDeviceBackend.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/GLES/GCNodeValidator.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/GLES/GCTensorHandle.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/NEON/NEDeviceBackend.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/NEON/NEFunctionFactory.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/NEON/NENodeValidator.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/NEON/NESubTensorHandle.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
backends	src/graph/backends/NEON/NETensorHandle.cpp	/^namespace backends$/;"	n	namespace:arm_compute::graph	file:
batch_idx	arm_compute/core/Types.h	/^    uint16_t  batch_idx; \/**< The batch index of the region of interest *\/$/;"	m	struct:arm_compute::ROI
batch_normalization_fp16_nchw	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::batch_normalization_fp16_nchw(const Window &window)$/;"	f	class:NEBatchNormalizationLayerKernel
batch_normalization_fp16_nhwc	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::batch_normalization_fp16_nhwc(const Window &window)$/;"	f	class:NEBatchNormalizationLayerKernel
batch_normalization_fp32_nchw	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::batch_normalization_fp32_nchw(const Window &window)$/;"	f	class:NEBatchNormalizationLayerKernel
batch_normalization_fp32_nhwc	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::batch_normalization_fp32_nhwc(const Window &window)$/;"	f	class:NEBatchNormalizationLayerKernel
batch_normalization_layer	tests/validation/reference/BatchNormalizationLayer.cpp	/^SimpleTensor<T> batch_normalization_layer(const SimpleTensor<T> &src, const SimpleTensor<T> &mean, const SimpleTensor<T> &var, const SimpleTensor<T> &beta, const SimpleTensor<T> &gamma, float epsilon,$/;"	f	namespace:arm_compute::test::validation::reference
batch_normalization_qs16	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::batch_normalization_qs16(const Window &window)$/;"	f	class:NEBatchNormalizationLayerKernel
batch_normalization_qs8	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::batch_normalization_qs8(const Window &window)$/;"	f	class:NEBatchNormalizationLayerKernel
begin	arm_compute/core/Dimensions.h	/^    typename std::array<T, num_max_dimensions>::const_iterator begin() const$/;"	f	class:arm_compute::Dimensions
begin	arm_compute/core/Dimensions.h	/^    typename std::array<T, num_max_dimensions>::iterator begin()$/;"	f	class:arm_compute::Dimensions
begin	arm_compute/core/utils/misc/Iterable.h	/^    typename T::reverse_iterator begin()$/;"	f	class:arm_compute::utils::iterable::reverse_iterable
begin	include/CL/cl.hpp	/^        static iterator begin(const cl::vector<T,N> &vec)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
begin	include/CL/cl.hpp	/^    iterator begin(void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
begin	include/CL/cl.hpp	/^    iterator begin(void)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
begin	tests/datasets/BatchNormalizationLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::BatchNormalizationLayerDataset
begin	tests/datasets/ChannelShuffleLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ChannelShuffleLayerDataset
begin	tests/datasets/ConvolutionLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ConvolutionLayerDataset
begin	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset
begin	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset
begin	tests/datasets/FullyConnectedLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::FullyConnectedLayerDataset
begin	tests/datasets/GEMMDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::GEMMDataset
begin	tests/datasets/GEMMLowpDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::GEMMLowpDataset
begin	tests/datasets/HOGDescriptorDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::HOGDescriptorDataset
begin	tests/datasets/HOGMultiDetectionDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::HOGMultiDetectionDataset
begin	tests/datasets/ImageFileDatasets.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ImageFileDataset
begin	tests/datasets/LSTMLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::LSTMLayerDataset
begin	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset
begin	tests/datasets/OpticalFlowDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::OpticalFlowDataset
begin	tests/datasets/PoolingLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::PoolingLayerDataset
begin	tests/datasets/RNNLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::RNNLayerDataset
begin	tests/datasets/ROIPoolingLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ROIPoolingLayerDataset
begin	tests/datasets/ReshapeLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ReshapeLayerDataset
begin	tests/datasets/ScaleLayerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ScaleLayerDataset
begin	tests/datasets/ThresholdDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::ThresholdDataset
begin	tests/datasets/WinogradInputTransformDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::WinogradInputTransformDataset
begin	tests/datasets/WinogradOutputTransformDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::datasets::WinogradOutputTransformDataset
begin	tests/framework/datasets/CartesianProductDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::CartesianProductDataset
begin	tests/framework/datasets/ContainerDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::ContainerDataset
begin	tests/framework/datasets/InitializerListDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::final
begin	tests/framework/datasets/JoinDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::JoinDataset
begin	tests/framework/datasets/RangeDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::final
begin	tests/framework/datasets/SingletonDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::SingletonDataset
begin	tests/framework/datasets/ZipDataset.h	/^    iterator begin() const$/;"	f	class:arm_compute::test::framework::dataset::ZipDataset
begin_color	tests/framework/printers/PrettyPrinter.cpp	/^std::string PrettyPrinter::begin_color(const std::string &color) const$/;"	f	class:arm_compute::test::framework::PrettyPrinter
benchmark	tests/benchmark/CL/ActivationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/BatchNormalizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/ConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/DepthConcatenateLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/DepthwiseConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/DepthwiseSeparableConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/DequantizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/DirectConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/EqualizeHistogram.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/FlattenLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Floor.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/FullyConnectedLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/GEMM.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/GEMMInterleave4x4.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/GEMMLowp.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/HOGDescriptor.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/HarrisCorners.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Histogram.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/IntegralImage.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/L2NormalizeLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Magnitude.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/MeanStdDev.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Median3x3.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/MinMaxLocation.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/NormalizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Phase.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/PoolingLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/QuantizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/ROIPoolingLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/ReshapeLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/SYSTEM/AlexNet.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/SYSTEM/LeNet5.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/SYSTEM/MobileNet.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/SYSTEM/MobileNetV1.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Scale.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/SoftmaxLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/CL/Transpose.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/ActivationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/ConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/FullyConnectedLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/GEMM.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/PoolingLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/Scale.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/SoftmaxLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/GLES_COMPUTE/Transpose.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/ActivationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/BatchNormalizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/ConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/DepthConcatenateLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/DequantizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/DirectConvolutionLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/EqualizeHistogram.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/FlattenLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Floor.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/FullyConnectedLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/GEMM.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/GEMMInterleave4x4.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/GEMMLowp.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/HOGDescriptor.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/HarrisCorners.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Histogram.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/IntegralImage.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/L2NormalizeLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Magnitude.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/MeanStdDev.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Median3x3.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/MinMaxLocation.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/NormalizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Phase.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/PoolingLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/QuantizationLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/ROIPoolingLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/ReshapeLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/SYSTEM/AlexNet.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/SYSTEM/LeNet5.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Scale.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/SoftmaxLayer.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/NEON/Transpose.cpp	/^namespace benchmark$/;"	n	namespace:arm_compute::test	file:
benchmark	tests/benchmark/fixtures/ActivationLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/AlexNetFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/FlattenLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/FloorFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/GEMMFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/GEMMLowpFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/HarrisCornersFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/HistogramFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/IntegralImageFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/LeNet5Fixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/MagnitudeFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/MeanStdDevFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/Median3x3Fixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/MobileNetFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/PhaseFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/PoolingLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/ScaleFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/TransposeFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^namespace benchmark$/;"	n	namespace:arm_compute::test
benchmark_2_c_l_2_activation_layer_8cpp	documentation/benchmark_2_c_l_2_activation_layer_8cpp.js	/^var benchmark_2_c_l_2_activation_layer_8cpp =$/;"	v
benchmark_2_c_l_2_batch_normalization_layer_8cpp	documentation/benchmark_2_c_l_2_batch_normalization_layer_8cpp.js	/^var benchmark_2_c_l_2_batch_normalization_layer_8cpp =$/;"	v
benchmark_2_c_l_2_convolution_layer_8cpp	documentation/benchmark_2_c_l_2_convolution_layer_8cpp.js	/^var benchmark_2_c_l_2_convolution_layer_8cpp =$/;"	v
benchmark_2_c_l_2_depth_concatenate_layer_8cpp	documentation/benchmark_2_c_l_2_depth_concatenate_layer_8cpp.js	/^var benchmark_2_c_l_2_depth_concatenate_layer_8cpp =$/;"	v
benchmark_2_c_l_2_depthwise_convolution_layer_8cpp	documentation/benchmark_2_c_l_2_depthwise_convolution_layer_8cpp.js	/^var benchmark_2_c_l_2_depthwise_convolution_layer_8cpp =$/;"	v
benchmark_2_c_l_2_depthwise_separable_convolution_layer_8cpp	documentation/benchmark_2_c_l_2_depthwise_separable_convolution_layer_8cpp.js	/^var benchmark_2_c_l_2_depthwise_separable_convolution_layer_8cpp =$/;"	v
benchmark_2_c_l_2_dequantization_layer_8cpp	documentation/benchmark_2_c_l_2_dequantization_layer_8cpp.js	/^var benchmark_2_c_l_2_dequantization_layer_8cpp =$/;"	v
benchmark_2_c_l_2_direct_convolution_layer_8cpp	documentation/benchmark_2_c_l_2_direct_convolution_layer_8cpp.js	/^var benchmark_2_c_l_2_direct_convolution_layer_8cpp =$/;"	v
benchmark_2_c_l_2_equalize_histogram_8cpp	documentation/benchmark_2_c_l_2_equalize_histogram_8cpp.js	/^var benchmark_2_c_l_2_equalize_histogram_8cpp =$/;"	v
benchmark_2_c_l_2_equalize_histogram_8cpp_source.xhtml	documentation/navtreeindex17.js	/^"benchmark_2_c_l_2_equalize_histogram_8cpp_source.xhtml":[6,0,4,0,0,9],$/;"	p	class:NAVTREEINDEX17
benchmark_2_c_l_2_flatten_layer_8cpp	documentation/benchmark_2_c_l_2_flatten_layer_8cpp.js	/^var benchmark_2_c_l_2_flatten_layer_8cpp =$/;"	v
benchmark_2_c_l_2_floor_8cpp	documentation/benchmark_2_c_l_2_floor_8cpp.js	/^var benchmark_2_c_l_2_floor_8cpp =$/;"	v
benchmark_2_c_l_2_fully_connected_layer_8cpp	documentation/benchmark_2_c_l_2_fully_connected_layer_8cpp.js	/^var benchmark_2_c_l_2_fully_connected_layer_8cpp =$/;"	v
benchmark_2_c_l_2_g_e_m_m_8cpp	documentation/benchmark_2_c_l_2_g_e_m_m_8cpp.js	/^var benchmark_2_c_l_2_g_e_m_m_8cpp =$/;"	v
benchmark_2_c_l_2_g_e_m_m_lowp_8cpp	documentation/benchmark_2_c_l_2_g_e_m_m_lowp_8cpp.js	/^var benchmark_2_c_l_2_g_e_m_m_lowp_8cpp =$/;"	v
benchmark_2_c_l_2_h_o_g_descriptor_8cpp	documentation/benchmark_2_c_l_2_h_o_g_descriptor_8cpp.js	/^var benchmark_2_c_l_2_h_o_g_descriptor_8cpp =$/;"	v
benchmark_2_c_l_2_harris_corners_8cpp	documentation/benchmark_2_c_l_2_harris_corners_8cpp.js	/^var benchmark_2_c_l_2_harris_corners_8cpp =$/;"	v
benchmark_2_c_l_2_histogram_8cpp	documentation/benchmark_2_c_l_2_histogram_8cpp.js	/^var benchmark_2_c_l_2_histogram_8cpp =$/;"	v
benchmark_2_c_l_2_integral_image_8cpp	documentation/benchmark_2_c_l_2_integral_image_8cpp.js	/^var benchmark_2_c_l_2_integral_image_8cpp =$/;"	v
benchmark_2_c_l_2_l2_normalize_layer_8cpp	documentation/benchmark_2_c_l_2_l2_normalize_layer_8cpp.js	/^var benchmark_2_c_l_2_l2_normalize_layer_8cpp =$/;"	v
benchmark_2_c_l_2_magnitude_8cpp	documentation/benchmark_2_c_l_2_magnitude_8cpp.js	/^var benchmark_2_c_l_2_magnitude_8cpp =$/;"	v
benchmark_2_c_l_2_mean_std_dev_8cpp	documentation/benchmark_2_c_l_2_mean_std_dev_8cpp.js	/^var benchmark_2_c_l_2_mean_std_dev_8cpp =$/;"	v
benchmark_2_c_l_2_median3x3_8cpp	documentation/benchmark_2_c_l_2_median3x3_8cpp.js	/^var benchmark_2_c_l_2_median3x3_8cpp =$/;"	v
benchmark_2_c_l_2_min_max_location_8cpp	documentation/benchmark_2_c_l_2_min_max_location_8cpp.js	/^var benchmark_2_c_l_2_min_max_location_8cpp =$/;"	v
benchmark_2_c_l_2_normalization_layer_8cpp	documentation/benchmark_2_c_l_2_normalization_layer_8cpp.js	/^var benchmark_2_c_l_2_normalization_layer_8cpp =$/;"	v
benchmark_2_c_l_2_phase_8cpp	documentation/benchmark_2_c_l_2_phase_8cpp.js	/^var benchmark_2_c_l_2_phase_8cpp =$/;"	v
benchmark_2_c_l_2_pooling_layer_8cpp	documentation/benchmark_2_c_l_2_pooling_layer_8cpp.js	/^var benchmark_2_c_l_2_pooling_layer_8cpp =$/;"	v
benchmark_2_c_l_2_quantization_layer_8cpp	documentation/benchmark_2_c_l_2_quantization_layer_8cpp.js	/^var benchmark_2_c_l_2_quantization_layer_8cpp =$/;"	v
benchmark_2_c_l_2_reshape_layer_8cpp	documentation/benchmark_2_c_l_2_reshape_layer_8cpp.js	/^var benchmark_2_c_l_2_reshape_layer_8cpp =$/;"	v
benchmark_2_c_l_2_s_y_s_t_e_m_2_alex_net_8cpp	documentation/benchmark_2_c_l_2_s_y_s_t_e_m_2_alex_net_8cpp.js	/^var benchmark_2_c_l_2_s_y_s_t_e_m_2_alex_net_8cpp =$/;"	v
benchmark_2_c_l_2_s_y_s_t_e_m_2_le_net5_8cpp	documentation/benchmark_2_c_l_2_s_y_s_t_e_m_2_le_net5_8cpp.js	/^var benchmark_2_c_l_2_s_y_s_t_e_m_2_le_net5_8cpp =$/;"	v
benchmark_2_c_l_2_scale_8cpp	documentation/benchmark_2_c_l_2_scale_8cpp.js	/^var benchmark_2_c_l_2_scale_8cpp =$/;"	v
benchmark_2_c_l_2_softmax_layer_8cpp	documentation/benchmark_2_c_l_2_softmax_layer_8cpp.js	/^var benchmark_2_c_l_2_softmax_layer_8cpp =$/;"	v
benchmark_2_c_l_2_transpose_8cpp	documentation/benchmark_2_c_l_2_transpose_8cpp.js	/^var benchmark_2_c_l_2_transpose_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_activation_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_activation_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_activation_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_batch_normalization_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_batch_normalization_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_batch_normalization_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_convolution_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_convolution_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_convolution_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_depthwise_convolution_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_depthwise_convolution_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_depthwise_convolution_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_direct_convolution_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_direct_convolution_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_direct_convolution_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_fully_connected_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_fully_connected_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_fully_connected_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_g_e_m_m_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_g_e_m_m_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_g_e_m_m_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_normalize_planar_y_u_v_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_normalize_planar_y_u_v_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_normalize_planar_y_u_v_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_pooling_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_pooling_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_pooling_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_scale_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_scale_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_scale_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp =$/;"	v
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp_source.xhtml	documentation/navtreeindex18.js	/^"benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp_source.xhtml":[6,0,4,0,1,10],$/;"	p	class:NAVTREEINDEX18
benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_transpose_8cpp	documentation/benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_transpose_8cpp.js	/^var benchmark_2_g_l_e_s___c_o_m_p_u_t_e_2_transpose_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_activation_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_activation_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_activation_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_batch_normalization_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_batch_normalization_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_batch_normalization_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_convolution_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_convolution_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_convolution_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_depth_concatenate_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_depth_concatenate_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_depth_concatenate_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_dequantization_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_dequantization_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_dequantization_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_direct_convolution_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_direct_convolution_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_direct_convolution_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_equalize_histogram_8cpp	documentation/benchmark_2_n_e_o_n_2_equalize_histogram_8cpp.js	/^var benchmark_2_n_e_o_n_2_equalize_histogram_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_flatten_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_flatten_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_flatten_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_floor_8cpp	documentation/benchmark_2_n_e_o_n_2_floor_8cpp.js	/^var benchmark_2_n_e_o_n_2_floor_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_fully_connected_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_fully_connected_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_fully_connected_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_g_e_m_m_8cpp	documentation/benchmark_2_n_e_o_n_2_g_e_m_m_8cpp.js	/^var benchmark_2_n_e_o_n_2_g_e_m_m_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_g_e_m_m_lowp_8cpp	documentation/benchmark_2_n_e_o_n_2_g_e_m_m_lowp_8cpp.js	/^var benchmark_2_n_e_o_n_2_g_e_m_m_lowp_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_h_o_g_descriptor_8cpp	documentation/benchmark_2_n_e_o_n_2_h_o_g_descriptor_8cpp.js	/^var benchmark_2_n_e_o_n_2_h_o_g_descriptor_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_harris_corners_8cpp	documentation/benchmark_2_n_e_o_n_2_harris_corners_8cpp.js	/^var benchmark_2_n_e_o_n_2_harris_corners_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_histogram_8cpp	documentation/benchmark_2_n_e_o_n_2_histogram_8cpp.js	/^var benchmark_2_n_e_o_n_2_histogram_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_integral_image_8cpp	documentation/benchmark_2_n_e_o_n_2_integral_image_8cpp.js	/^var benchmark_2_n_e_o_n_2_integral_image_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_l2_normalize_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_l2_normalize_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_l2_normalize_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_magnitude_8cpp	documentation/benchmark_2_n_e_o_n_2_magnitude_8cpp.js	/^var benchmark_2_n_e_o_n_2_magnitude_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_mean_std_dev_8cpp	documentation/benchmark_2_n_e_o_n_2_mean_std_dev_8cpp.js	/^var benchmark_2_n_e_o_n_2_mean_std_dev_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_median3x3_8cpp	documentation/benchmark_2_n_e_o_n_2_median3x3_8cpp.js	/^var benchmark_2_n_e_o_n_2_median3x3_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_min_max_location_8cpp	documentation/benchmark_2_n_e_o_n_2_min_max_location_8cpp.js	/^var benchmark_2_n_e_o_n_2_min_max_location_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_normalization_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_normalization_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_normalization_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_phase_8cpp	documentation/benchmark_2_n_e_o_n_2_phase_8cpp.js	/^var benchmark_2_n_e_o_n_2_phase_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_pooling_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_pooling_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_pooling_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_quantization_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_quantization_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_quantization_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_reshape_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_reshape_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_reshape_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_s_y_s_t_e_m_2_alex_net_8cpp	documentation/benchmark_2_n_e_o_n_2_s_y_s_t_e_m_2_alex_net_8cpp.js	/^var benchmark_2_n_e_o_n_2_s_y_s_t_e_m_2_alex_net_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_s_y_s_t_e_m_2_le_net5_8cpp	documentation/benchmark_2_n_e_o_n_2_s_y_s_t_e_m_2_le_net5_8cpp.js	/^var benchmark_2_n_e_o_n_2_s_y_s_t_e_m_2_le_net5_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_scale_8cpp	documentation/benchmark_2_n_e_o_n_2_scale_8cpp.js	/^var benchmark_2_n_e_o_n_2_scale_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_softmax_layer_8cpp	documentation/benchmark_2_n_e_o_n_2_softmax_layer_8cpp.js	/^var benchmark_2_n_e_o_n_2_softmax_layer_8cpp =$/;"	v
benchmark_2_n_e_o_n_2_transpose_8cpp	documentation/benchmark_2_n_e_o_n_2_transpose_8cpp.js	/^var benchmark_2_n_e_o_n_2_transpose_8cpp =$/;"	v
beta	arm_compute/core/Types.h	/^    float beta() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
beta	src/graph/nodes/SoftmaxLayerNode.cpp	/^float SoftmaxLayerNode::beta() const$/;"	f	class:arm_compute::graph::SoftmaxLayerNode
bfs	arm_compute/graph/algorithms/BFS.h	/^inline std::vector<NodeID> bfs(Graph &g)$/;"	f	namespace:arm_compute::graph
big_endian	include/libnpy/npy.hpp	/^const bool big_endian = true;$/;"	m	namespace:npy
big_endian_char	include/libnpy/npy.hpp	/^const char big_endian_char = '>';$/;"	m	namespace:npy
bilinear_interpolate	src/core/CL/cl_kernels/warp_helpers.h	/^inline const VEC_DATA_TYPE(DATA_TYPE, 4) bilinear_interpolate(const Image *in, const float8 coords, const float width, const float height)$/;"	f
bilinear_interpolate	tests/validation/reference/OpticalFlow.cpp	/^int bilinear_interpolate(const SimpleTensor<T> &in, Coordinates id, float wx, float wy, BorderMode border_mode, T constant_border_value, int scale)$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
bilinear_interpolate_with_border	src/core/CL/cl_kernels/warp_helpers.h	/^inline const VEC_DATA_TYPE(DATA_TYPE, 4) bilinear_interpolate_with_border(const Image *in, const float8 coords, const float width, const float height, const float border_size)$/;"	f
bilinear_policy	tests/validation/reference/Utils.cpp	/^T bilinear_policy(const SimpleTensor<T> &in, Coordinates id, float xn, float yn, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation
bin_size_bytes	tests/framework/instruments/hwc.hpp	/^    uint32_t bin_size_bytes;$/;"	m	struct:mali_userspace::mali_base_gpu_tiler_props
binary	include/half/half.hpp	/^		HALF_CONSTEXPR_CONST binary_t binary = binary_t();$/;"	m	namespace:half_float::detail
binary_specialized	include/half/half.hpp	/^		template<> struct binary_specialized<half,half>$/;"	s	namespace:detail
binary_specialized	include/half/half.hpp	/^		template<typename T,typename U> struct binary_specialized$/;"	s	namespace:detail
binary_t	include/half/half.hpp	/^		struct binary_t {};$/;"	s	namespace:half_float::detail
bind_edge	src/graph/Tensor.cpp	/^void Tensor::bind_edge(EdgeID eid)$/;"	f	class:arm_compute::graph::Tensor
bits	include/half/half.hpp	/^			template<> struct bits<double> : conditional<std::numeric_limits<unsigned long>::digits>=64,unsigned long,unsigned long long> {};$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^			template<> struct bits<double> { typedef unsigned long type; };$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<> struct bits<double> { typedef std::uint_least64_t type; };$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<> struct bits<float> : conditional<std::numeric_limits<unsigned int>::digits>=32,unsigned int,unsigned long> {};$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<> struct bits<float> { typedef std::uint_least32_t type; };$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<typename T> struct bits { typedef unsigned char type; };$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<typename T> struct bits<const T> : bits<T> {};$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<typename T> struct bits<const volatile T> : bits<T> {};$/;"	s	namespace:half_float::detail
bits	include/half/half.hpp	/^		template<typename T> struct bits<volatile T> : bits<T> {};$/;"	s	namespace:half_float::detail
bitwise__op_8cl	documentation/bitwise__op_8cl.js	/^var bitwise__op_8cl =$/;"	v
bitwise_and	src/core/NEON/kernels/NEBitwiseAndKernel.cpp	/^inline void bitwise_and(const T *__restrict input1, const T *__restrict input2, T *__restrict output)$/;"	f	namespace:__anon244
bitwise_and	tests/validation/reference/BitwiseAnd.cpp	/^SimpleTensor<T> bitwise_and(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2)$/;"	f	namespace:arm_compute::test::validation::reference
bitwise_not	tests/validation/reference/BitwiseNot.cpp	/^SimpleTensor<T> bitwise_not(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
bitwise_not_U8_U8	src/core/NEON/kernels/NEBitwiseNotKernel.cpp	/^inline void bitwise_not_U8_U8(const uint8_t *__restrict input, uint8_t *__restrict output)$/;"	f	namespace:__anon245
bitwise_or	tests/validation/reference/BitwiseOr.cpp	/^SimpleTensor<T> bitwise_or(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2)$/;"	f	namespace:arm_compute::test::validation::reference
bitwise_or_U8_U8_U8	src/core/NEON/kernels/NEBitwiseOrKernel.cpp	/^inline void bitwise_or_U8_U8_U8(const uint8_t *__restrict input1, const uint8_t *__restrict input2, uint8_t *__restrict output)$/;"	f	namespace:__anon246
bitwise_xor	tests/validation/reference/BitwiseXor.cpp	/^SimpleTensor<T> bitwise_xor(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2)$/;"	f	namespace:arm_compute::test::validation::reference
bitwise_xor_U8_U8_U8	src/core/NEON/kernels/NEBitwiseXorKernel.cpp	/^inline void bitwise_xor_U8_U8_U8(const uint8_t *__restrict input1, const uint8_t *__restrict input2, uint8_t *__restrict output)$/;"	f	namespace:__anon247
block_size	src/core/HOGInfo.cpp	/^const Size2D &HOGInfo::block_size() const$/;"	f	class:HOGInfo
block_size	tests/benchmark/CL/HarrisCorners.cpp	/^const auto block_size    = framework::dataset::make("BlockSize", { 3, 5, 7 });$/;"	m	namespace:arm_compute::test::benchmark::__anon340	file:
block_size	tests/benchmark/NEON/HarrisCorners.cpp	/^const auto block_size    = framework::dataset::make("BlockSize", { 3, 5, 7 });$/;"	m	namespace:arm_compute::test::benchmark::__anon374	file:
block_stride	src/core/HOGInfo.cpp	/^const Size2D &HOGInfo::block_stride() const$/;"	f	class:HOGInfo
blockwalker	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        blockwalker(const GemmInterleaved<strategy, To, Tr> &parent)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
blockwalker	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    class blockwalker$/;"	c	class:arm_gemm::GemmInterleaved
blue_size	include/linux/EGL/fbdev_window.h	/^	unsigned char blue_size;$/;"	m	struct:fbdev_pixmap
bool_type	include/half/half.hpp	/^		template<bool B> struct bool_type : std::integral_constant<bool,B> {};$/;"	s	namespace:half_float::detail
border_mode	tests/benchmark/CL/HarrisCorners.cpp	/^const auto border_mode   = framework::dataset::make("BorderMode", { BorderMode::UNDEFINED, BorderMode::CONSTANT, BorderMode::REPLICATE });$/;"	m	namespace:arm_compute::test::benchmark::__anon340	file:
border_mode	tests/benchmark/NEON/HarrisCorners.cpp	/^const auto border_mode   = framework::dataset::make("BorderMode", { BorderMode::UNDEFINED, BorderMode::CONSTANT, BorderMode::REPLICATE });$/;"	m	namespace:arm_compute::test::benchmark::__anon374	file:
border_size	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^BorderSize CLArithmeticAdditionKernel::border_size() const$/;"	f	class:CLArithmeticAdditionKernel
border_size	src/core/CL/kernels/CLBox3x3Kernel.cpp	/^BorderSize CLBox3x3Kernel::border_size() const$/;"	f	class:CLBox3x3Kernel
border_size	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^BorderSize CLEdgeNonMaxSuppressionKernel::border_size() const$/;"	f	class:CLEdgeNonMaxSuppressionKernel
border_size	src/core/CL/kernels/CLConvolutionKernel.cpp	/^BorderSize             CLConvolutionKernel<matrix_size>::border_size() const$/;"	f	class:CLConvolutionKernel
border_size	src/core/CL/kernels/CLConvolutionKernel.cpp	/^BorderSize             CLSeparableConvolutionHorKernel<matrix_size>::border_size() const$/;"	f	class:CLSeparableConvolutionHorKernel
border_size	src/core/CL/kernels/CLConvolutionKernel.cpp	/^BorderSize             CLSeparableConvolutionVertKernel<matrix_size>::border_size() const$/;"	f	class:CLSeparableConvolutionVertKernel
border_size	src/core/CL/kernels/CLConvolutionKernel.cpp	/^BorderSize CLConvolutionRectangleKernel::border_size() const$/;"	f	class:CLConvolutionRectangleKernel
border_size	src/core/CL/kernels/CLDepthConcatenateLayerKernel.cpp	/^BorderSize CLDepthConcatenateLayerKernel::border_size() const$/;"	f	class:CLDepthConcatenateLayerKernel
border_size	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^BorderSize CLDepthwiseConvolutionLayer3x3NCHWKernel::border_size() const$/;"	f	class:CLDepthwiseConvolutionLayer3x3NCHWKernel
border_size	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^BorderSize CLDepthwiseConvolutionLayer3x3NHWCKernel::border_size() const$/;"	f	class:CLDepthwiseConvolutionLayer3x3NHWCKernel
border_size	src/core/CL/kernels/CLDerivativeKernel.cpp	/^BorderSize CLDerivativeKernel::border_size() const$/;"	f	class:CLDerivativeKernel
border_size	src/core/CL/kernels/CLDilateKernel.cpp	/^BorderSize CLDilateKernel::border_size() const$/;"	f	class:CLDilateKernel
border_size	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^BorderSize CLDirectConvolutionLayerKernel::border_size() const$/;"	f	class:CLDirectConvolutionLayerKernel
border_size	src/core/CL/kernels/CLErodeKernel.cpp	/^BorderSize CLErodeKernel::border_size() const$/;"	f	class:CLErodeKernel
border_size	src/core/CL/kernels/CLFastCornersKernel.cpp	/^BorderSize CLFastCornersKernel::border_size() const$/;"	f	class:CLFastCornersKernel
border_size	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^BorderSize CLGEMMMatrixVectorMultiplyKernel::border_size() const$/;"	f	class:CLGEMMMatrixVectorMultiplyKernel
border_size	src/core/CL/kernels/CLGaussian3x3Kernel.cpp	/^BorderSize CLGaussian3x3Kernel::border_size() const$/;"	f	class:CLGaussian3x3Kernel
border_size	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^BorderSize CLGaussianPyramidHorKernel::border_size() const$/;"	f	class:CLGaussianPyramidHorKernel
border_size	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^BorderSize CLGaussianPyramidVertKernel::border_size() const$/;"	f	class:CLGaussianPyramidVertKernel
border_size	src/core/CL/kernels/CLHarrisCornersKernel.cpp	/^BorderSize CLHarrisScoreKernel::border_size() const$/;"	f	class:CLHarrisScoreKernel
border_size	src/core/CL/kernels/CLMeanStdDevKernel.cpp	/^BorderSize CLMeanStdDevKernel::border_size() const$/;"	f	class:CLMeanStdDevKernel
border_size	src/core/CL/kernels/CLMedian3x3Kernel.cpp	/^BorderSize CLMedian3x3Kernel::border_size() const$/;"	f	class:CLMedian3x3Kernel
border_size	src/core/CL/kernels/CLNonLinearFilterKernel.cpp	/^BorderSize CLNonLinearFilterKernel::border_size() const$/;"	f	class:CLNonLinearFilterKernel
border_size	src/core/CL/kernels/CLNonMaximaSuppression3x3Kernel.cpp	/^BorderSize CLNonMaximaSuppression3x3Kernel::border_size() const$/;"	f	class:CLNonMaximaSuppression3x3Kernel
border_size	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^BorderSize CLNormalizationLayerKernel::border_size() const$/;"	f	class:CLNormalizationLayerKernel
border_size	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^BorderSize CLPixelWiseMultiplicationKernel::border_size() const$/;"	f	class:CLPixelWiseMultiplicationKernel
border_size	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^BorderSize CLPoolingLayerKernel::border_size() const$/;"	f	class:CLPoolingLayerKernel
border_size	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^BorderSize CLReductionOperationKernel::border_size() const$/;"	f	class:CLReductionOperationKernel
border_size	src/core/CL/kernels/CLRemapKernel.cpp	/^BorderSize CLRemapKernel::border_size() const$/;"	f	class:CLRemapKernel
border_size	src/core/CL/kernels/CLScaleKernel.cpp	/^BorderSize CLScaleKernel::border_size() const$/;"	f	class:CLScaleKernel
border_size	src/core/CL/kernels/CLScharr3x3Kernel.cpp	/^BorderSize CLScharr3x3Kernel::border_size() const$/;"	f	class:CLScharr3x3Kernel
border_size	src/core/CL/kernels/CLSobel3x3Kernel.cpp	/^BorderSize CLSobel3x3Kernel::border_size() const$/;"	f	class:CLSobel3x3Kernel
border_size	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^BorderSize CLSobel5x5HorKernel::border_size() const$/;"	f	class:CLSobel5x5HorKernel
border_size	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^BorderSize CLSobel5x5VertKernel::border_size() const$/;"	f	class:CLSobel5x5VertKernel
border_size	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^BorderSize CLSobel7x7HorKernel::border_size() const$/;"	f	class:CLSobel7x7HorKernel
border_size	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^BorderSize CLSobel7x7VertKernel::border_size() const$/;"	f	class:CLSobel7x7VertKernel
border_size	src/core/CL/kernels/CLWarpAffineKernel.cpp	/^BorderSize CLWarpAffineKernel::border_size() const$/;"	f	class:CLWarpAffineKernel
border_size	src/core/CL/kernels/CLWarpPerspectiveKernel.cpp	/^BorderSize CLWarpPerspectiveKernel::border_size() const$/;"	f	class:CLWarpPerspectiveKernel
border_size	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^BorderSize CLWinogradInputTransformKernel::border_size() const$/;"	f	class:CLWinogradInputTransformKernel
border_size	src/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.cpp	/^BorderSize GCDepthConcatenateLayerKernel::border_size() const$/;"	f	class:GCDepthConcatenateLayerKernel
border_size	src/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.cpp	/^BorderSize GCDepthwiseConvolutionLayer3x3Kernel::border_size() const$/;"	f	class:GCDepthwiseConvolutionLayer3x3Kernel
border_size	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^BorderSize             GCDirectConvolutionLayerKernel<kernel_size>::border_size() const$/;"	f	class:GCDirectConvolutionLayerKernel
border_size	src/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.cpp	/^BorderSize GCNormalizationLayerKernel::border_size() const$/;"	f	class:GCNormalizationLayerKernel
border_size	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^BorderSize GCPoolingLayerKernel::border_size() const$/;"	f	class:GCPoolingLayerKernel
border_size	src/core/GLES_COMPUTE/kernels/GCScaleKernel.cpp	/^BorderSize GCScaleKernel::border_size() const$/;"	f	class:GCScaleKernel
border_size	src/core/IKernel.cpp	/^BorderSize IKernel::border_size() const$/;"	f	class:IKernel
border_size	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^BorderSize NEArithmeticAdditionKernel::border_size() const$/;"	f	class:NEArithmeticAdditionKernel
border_size	src/core/NEON/kernels/NEBox3x3Kernel.cpp	/^BorderSize NEBox3x3Kernel::border_size() const$/;"	f	class:NEBox3x3Kernel
border_size	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^BorderSize NEEdgeNonMaxSuppressionKernel::border_size() const$/;"	f	class:NEEdgeNonMaxSuppressionKernel
border_size	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^BorderSize NEEdgeTraceKernel::border_size() const$/;"	f	class:NEEdgeTraceKernel
border_size	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^BorderSize             NEConvolutionKernel<matrix_size>::border_size() const$/;"	f	class:arm_compute::NEConvolutionKernel
border_size	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^BorderSize             NESeparableConvolutionHorKernel<matrix_size>::border_size() const$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
border_size	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^BorderSize             NESeparableConvolutionVertKernel<matrix_size>::border_size() const$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
border_size	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^BorderSize NEConvolutionRectangleKernel::border_size() const$/;"	f	class:arm_compute::NEConvolutionRectangleKernel
border_size	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^BorderSize NEDepthConcatenateLayerKernel::border_size() const$/;"	f	class:NEDepthConcatenateLayerKernel
border_size	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^BorderSize NEDepthwiseConvolutionLayer3x3Kernel::border_size() const$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
border_size	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^BorderSize NEDerivativeKernel::border_size() const$/;"	f	class:NEDerivativeKernel
border_size	src/core/NEON/kernels/NEDilateKernel.cpp	/^BorderSize NEDilateKernel::border_size() const$/;"	f	class:NEDilateKernel
border_size	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^BorderSize NEDirectConvolutionLayerKernel::border_size() const$/;"	f	class:NEDirectConvolutionLayerKernel
border_size	src/core/NEON/kernels/NEErodeKernel.cpp	/^BorderSize NEErodeKernel::border_size() const$/;"	f	class:NEErodeKernel
border_size	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^BorderSize NEFastCornersKernel::border_size() const$/;"	f	class:NEFastCornersKernel
border_size	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^BorderSize NEGEMMMatrixVectorMultiplyKernel::border_size() const$/;"	f	class:NEGEMMMatrixVectorMultiplyKernel
border_size	src/core/NEON/kernels/NEGaussian3x3Kernel.cpp	/^BorderSize NEGaussian3x3Kernel::border_size() const$/;"	f	class:NEGaussian3x3Kernel
border_size	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^BorderSize NEGaussian5x5HorKernel::border_size() const$/;"	f	class:NEGaussian5x5HorKernel
border_size	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^BorderSize NEGaussian5x5VertKernel::border_size() const$/;"	f	class:NEGaussian5x5VertKernel
border_size	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^BorderSize NEGaussianPyramidHorKernel::border_size() const$/;"	f	class:NEGaussianPyramidHorKernel
border_size	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^BorderSize NEGaussianPyramidVertKernel::border_size() const$/;"	f	class:NEGaussianPyramidVertKernel
border_size	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^BorderSize        NEHarrisScoreFP16Kernel<block_size>::border_size() const$/;"	f	class:NEHarrisScoreFP16Kernel
border_size	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^BorderSize        NEHarrisScoreKernel<block_size>::border_size() const$/;"	f	class:NEHarrisScoreKernel
border_size	src/core/NEON/kernels/NEIntegralImageKernel.cpp	/^BorderSize NEIntegralImageKernel::border_size() const$/;"	f	class:NEIntegralImageKernel
border_size	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^BorderSize NELKTrackerKernel::border_size() const$/;"	f	class:NELKTrackerKernel
border_size	src/core/NEON/kernels/NEMeanStdDevKernel.cpp	/^BorderSize NEMeanStdDevKernel::border_size() const$/;"	f	class:NEMeanStdDevKernel
border_size	src/core/NEON/kernels/NEMedian3x3Kernel.cpp	/^BorderSize NEMedian3x3Kernel::border_size() const$/;"	f	class:NEMedian3x3Kernel
border_size	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^BorderSize NENonLinearFilterKernel::border_size() const$/;"	f	class:arm_compute::NENonLinearFilterKernel
border_size	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^BorderSize NENonMaximaSuppression3x3Kernel::border_size() const$/;"	f	class:NENonMaximaSuppression3x3Kernel
border_size	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^BorderSize NENormalizationLayerKernel::border_size() const$/;"	f	class:NENormalizationLayerKernel
border_size	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^BorderSize NEPixelWiseMultiplicationKernel::border_size() const$/;"	f	class:NEPixelWiseMultiplicationKernel
border_size	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^BorderSize NEPoolingLayerKernel::border_size() const$/;"	f	class:NEPoolingLayerKernel
border_size	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^BorderSize NEReductionOperationKernel::border_size() const$/;"	f	class:NEReductionOperationKernel
border_size	src/core/NEON/kernels/NERemapKernel.cpp	/^BorderSize NERemapKernel::border_size() const$/;"	f	class:NERemapKernel
border_size	src/core/NEON/kernels/NEScaleKernel.cpp	/^BorderSize NEScaleKernel::border_size() const$/;"	f	class:arm_compute::NEScaleKernel
border_size	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^BorderSize NEScharr3x3Kernel::border_size() const$/;"	f	class:NEScharr3x3Kernel
border_size	src/core/NEON/kernels/NESobel3x3Kernel.cpp	/^BorderSize NESobel3x3Kernel::border_size() const$/;"	f	class:NESobel3x3Kernel
border_size	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^BorderSize NESobel5x5HorKernel::border_size() const$/;"	f	class:NESobel5x5HorKernel
border_size	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^BorderSize NESobel5x5VertKernel::border_size() const$/;"	f	class:NESobel5x5VertKernel
border_size	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^BorderSize NESobel7x7HorKernel::border_size() const$/;"	f	class:NESobel7x7HorKernel
border_size	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^BorderSize NESobel7x7VertKernel::border_size() const$/;"	f	class:NESobel7x7VertKernel
border_size	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^BorderSize NELogits1DMaxKernel::border_size() const$/;"	f	class:arm_compute::NELogits1DMaxKernel
border_size	src/core/NEON/kernels/NEWarpKernel.cpp	/^BorderSize INEWarpKernel::border_size() const$/;"	f	class:INEWarpKernel
bottom	arm_compute/core/Types.h	/^    unsigned int bottom; \/**< bottom of the border *\/$/;"	m	struct:arm_compute::BorderSize
bound_edges	src/graph/Tensor.cpp	/^const std::set<EdgeID> Tensor::bound_edges() const$/;"	f	class:arm_compute::graph::Tensor
bound_elements	arm_compute/runtime/ISimpleLifetimeManager.h	/^        std::set<void *> bound_elements;$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Blob
box3x3	tests/validation/reference/Box3x3.cpp	/^SimpleTensor<T> box3x3(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
brelu	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    explicit brelu(ActivationLayerInfo act_info)$/;"	f	struct:arm_compute::detail::brelu
brelu	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^struct brelu$/;"	s	namespace:arm_compute::detail
brelu_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float brelu_op(float x)$/;"	f
bresenham_count	tests/validation/reference/FastCorners.cpp	/^constexpr unsigned int bresenham_count  = 16;$/;"	m	namespace:arm_compute::test::validation::reference::__anon535	file:
bresenham_radius	tests/validation/CL/FastCorners.cpp	/^const unsigned int bresenham_radius = 3;$/;"	m	namespace:arm_compute::test::validation::__anon417	file:
bresenham_radius	tests/validation/NEON/FastCorners.cpp	/^const unsigned int bresenham_radius = 3;$/;"	m	namespace:arm_compute::test::validation::__anon491	file:
bresenham_radius	tests/validation/reference/FastCorners.cpp	/^constexpr unsigned int bresenham_radius = 3;$/;"	m	namespace:arm_compute::test::validation::reference::__anon535	file:
broadcast_if_dimension_le_one	arm_compute/core/Window.h	/^    Window broadcast_if_dimension_le_one(const ITensorInfo &info) const$/;"	f	class:arm_compute::Window
broadcast_shape	arm_compute/core/TensorShape.h	/^    static TensorShape broadcast_shape(const Shapes &... shapes)$/;"	f	class:arm_compute::TensorShape
broadcast_shape_and_valid_region	arm_compute/core/ITensorInfo.h	/^    static std::pair<TensorShape, ValidRegion> broadcast_shape_and_valid_region(const Infos &... infos)$/;"	f	class:arm_compute::ITensorInfo
buffer	include/CL/cl.h	/^      cl_mem                  buffer;$/;"	m	union:_cl_image_desc::__anon4
buffer	src/core/CL/ICLDistribution1D.cpp	/^uint32_t *ICLDistribution1D::buffer() const$/;"	f	class:ICLDistribution1D
buffer	src/core/CL/ICLLut.cpp	/^uint8_t *ICLLut::buffer() const$/;"	f	class:ICLLut
buffer	src/core/CL/ICLTensor.cpp	/^uint8_t *ICLTensor::buffer() const$/;"	f	class:ICLTensor
buffer	src/core/GLES_COMPUTE/IGCTensor.cpp	/^uint8_t *IGCTensor::buffer() const$/;"	f	class:IGCTensor
buffer	src/runtime/CL/CLMemoryRegion.cpp	/^void *ICLMemoryRegion::buffer() const$/;"	f	class:arm_compute::ICLMemoryRegion
buffer	src/runtime/CL/CLMemoryRegion.cpp	/^void *ICLMemoryRegion::buffer()$/;"	f	class:arm_compute::ICLMemoryRegion
buffer	src/runtime/Distribution1D.cpp	/^uint32_t *Distribution1D::buffer() const$/;"	f	class:Distribution1D
buffer	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^uint8_t *GCTensor::buffer() const$/;"	f	class:GCTensor
buffer	src/runtime/Lut.cpp	/^uint8_t *Lut::buffer() const$/;"	f	class:Lut
buffer	src/runtime/SubTensor.cpp	/^uint8_t *SubTensor::buffer() const$/;"	f	class:SubTensor
buffer	src/runtime/Tensor.cpp	/^uint8_t *Tensor::buffer() const$/;"	f	class:Tensor
buffer	tests/framework/instruments/hwc.hpp	/^    kbase_pointer buffer;$/;"	m	struct:mali_userspace::__anon390::kbase_ioctl_get_gpuprops
buffer_count	tests/framework/instruments/hwc.hpp	/^    uint32_t buffer_count;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup
buffer_idx	tests/framework/instruments/hwc.hpp	/^    uint32_t buffer_idx = 0;$/;"	m	struct:mali_userspace::kbase_hwcnt_reader_metadata
buffer_size	include/linux/EGL/fbdev_window.h	/^	unsigned char buffer_size;$/;"	m	struct:fbdev_pixmap
build	include/CL/cl.hpp	/^    cl_int build($/;"	f	class:cl::Program
build	include/CL/cl2.hpp	/^    cl_int build($/;"	f	class:cl::Program
build	src/core/CL/CLKernelLibrary.cpp	/^bool Program::build(const cl::Program &program, const std::string &build_options)$/;"	f	class:Program
build	src/core/CL/CLKernelLibrary.cpp	/^cl::Program Program::build(const std::string &build_options) const$/;"	f	class:Program
build	tests/networks/AlexNetNetwork.h	/^    void build()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
build	tests/networks/LeNet5Network.h	/^    void build()$/;"	f	class:arm_compute::test::networks::LeNet5Network
build	tests/networks/MobileNetNetwork.h	/^    void build()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
build	tests/networks/MobileNetV1Network.h	/^    void build()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
buildErrHandler	include/CL/cl2.hpp	/^    static inline cl_int buildErrHandler($/;"	f	namespace:cl::detail
buildLogs	include/CL/cl2.hpp	/^    BuildLogType buildLogs;$/;"	m	class:cl::BuildError
build_information	src/core/Utils.cpp	/^std::string arm_compute::build_information()$/;"	f	class:arm_compute
builtin_isinf	include/half/half.hpp	/^		template<typename T> bool builtin_isinf(T arg)$/;"	f	namespace:half_float
builtin_isnan	include/half/half.hpp	/^		template<typename T> bool builtin_isnan(T arg)$/;"	f	namespace:half_float
builtin_signbit	include/half/half.hpp	/^		template<typename T> bool builtin_signbit(T arg)$/;"	f	namespace:half_float
bytes_per_pixel	include/linux/EGL/fbdev_window.h	/^	unsigned int bytes_per_pixel;$/;"	m	struct:fbdev_pixmap
bytes_read	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  size_t WinogradGEMM<output_tile_rows, output_tile_cols, kr, kc>::OutputTransform<T>::bytes_read(const Tensor4DShape &shape)$/;"	f	class:winograd::WinogradGEMM::OutputTransform
bytes_read	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^      static inline size_t bytes_read(const KernelShape &shape)$/;"	f	struct:winograd::WinogradGEMM::WeightsTransform
bytes_read	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^      static size_t bytes_read(const Tensor4DShape &shape)$/;"	f	struct:winograd::WinogradGEMM::InputTransform
bytes_written	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  size_t WinogradGEMM<otr, otc, kr, kc>::OutputTransform<T>::bytes_written(const Tensor4DShape &shape)$/;"	f	class:winograd::WinogradGEMM::OutputTransform
bytes_written	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^      static inline size_t bytes_written(const KernelShape &shape)$/;"	f	struct:winograd::WinogradGEMM::WeightsTransform
bytes_written	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^      static size_t bytes_written(const Tensor4DShape &shape)$/;"	f	struct:winograd::WinogradGEMM::InputTransform
c_endian	include/libnpy/npy.hpp	/^    char c_endian;$/;"	m	struct:npy::Typestring
c_matrix_stride	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int c_matrix_stride, c_row_stride;$/;"	m	class:winograd::BatchedBlockedGemm
c_ptr	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    TOut* const c_ptr;$/;"	m	class:winograd::BatchedBlockedGemm
c_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const int c_matrix_stride, c_row_stride;$/;"	m	class:winograd::BatchedBlockedGemm
c_type	include/libnpy/npy.hpp	/^    char c_type;$/;"	m	struct:npy::Typestring
cache_size	arm_compute/core/CL/CLTypes.h	/^    size_t      cache_size;  \/**< Cache size *\/$/;"	m	struct:arm_compute::CLDeviceOptions
cachedLink	documentation/navtree.js	/^function cachedLink()$/;"	f
calculate_avg	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^float calculate_avg(const int pool_size, Tensor3DIterator src_iter, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)$/;"	m
calculate_avg	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^float calculate_avg(const int, Tensor3DIterator, const int, const int, const int, const int, const int, const int);$/;"	m
calculate_avg	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^vec2 calculate_avg(const int pool_size, Tensor3DIterator src_iter, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)$/;"	m
calculate_avg	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^vec2 calculate_avg(const int, Tensor3DIterator, const int, const int, const int, const int, const int, const int);$/;"	m
calculate_avg_scale	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^inline float calculate_avg_scale(const Coordinates &id, const int pool_size_x, const int pool_size_y, const int upper_bound_w, const int upper_bound_h,$/;"	f	namespace:__anon288
calculate_avg_scale_q16	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^inline qint16_t calculate_avg_scale_q16(const Coordinates &id, int pool_size, int upper_bound_w, int upper_bound_h,$/;"	f	namespace:__anon288
calculate_avg_scale_q8	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^inline qint8_t calculate_avg_scale_q8(const Coordinates &id, int pool_size, int upper_bound_w, int upper_bound_h,$/;"	f	namespace:__anon288
calculate_cum_dist_and_lut	src/runtime/CL/functions/CLEqualizeHistogram.cpp	/^void calculate_cum_dist_and_lut(CLDistribution1D &dist, CLDistribution1D &cum_dist, CLLut &lut)$/;"	f	namespace:__anon311
calculate_depth_concatenate_shape	arm_compute/core/Utils.h	/^TensorShape calculate_depth_concatenate_shape(const std::vector<T *> &inputs_vector)$/;"	f	namespace:arm_compute
calculate_depth_concatenate_shape	tests/validation/Helpers.cpp	/^TensorShape calculate_depth_concatenate_shape(const std::vector<TensorShape> &input_shapes)$/;"	f	namespace:arm_compute::test::validation
calculate_matrix_scale	arm_compute/core/Utils.h	/^inline uint32_t calculate_matrix_scale(const int16_t *matrix, unsigned int matrix_size)$/;"	f	namespace:arm_compute
calculate_max	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^float calculate_max(const int pool_size, Tensor3DIterator src_iter, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)$/;"	m
calculate_max	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^float calculate_max(const int, Tensor3DIterator, const int, const int, const int, const int, const int, const int);$/;"	m
calculate_max	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^vec2 calculate_max(const int pool_size, Tensor3DIterator src_iter, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)$/;"	m
calculate_max	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^vec2 calculate_max(const int, Tensor3DIterator, const int, const int, const int, const int, const int, const int);$/;"	m
calculate_max_enlarged_window	arm_compute/core/Helpers.h	/^inline Window calculate_max_enlarged_window(const ITensorInfo &info, const Steps &steps = Steps(), BorderSize border_size = BorderSize())$/;"	f	namespace:arm_compute
calculate_max_enlarged_window	src/core/Helpers.cpp	/^Window arm_compute::calculate_max_enlarged_window(const ValidRegion &valid_region, const Steps &steps, BorderSize border_size)$/;"	f	class:arm_compute
calculate_max_window	arm_compute/core/Helpers.h	/^inline Window calculate_max_window(const ITensorInfo &info, const Steps &steps = Steps(), bool skip_border = false, BorderSize border_size = BorderSize())$/;"	f	namespace:arm_compute
calculate_max_window	src/core/Helpers.cpp	/^Window arm_compute::calculate_max_window(const ValidRegion &valid_region, const Steps &steps, bool skip_border, BorderSize border_size)$/;"	f	class:arm_compute
calculate_max_window_horizontal	arm_compute/core/Helpers.h	/^inline Window calculate_max_window_horizontal(const ITensorInfo &info, const Steps &steps = Steps(), bool skip_border = false, BorderSize border_size = BorderSize())$/;"	f	namespace:arm_compute
calculate_max_window_horizontal	src/core/Helpers.cpp	/^Window arm_compute::calculate_max_window_horizontal(const ValidRegion &valid_region, const Steps &steps, bool skip_border, BorderSize border_size)$/;"	f	class:arm_compute
calculate_number_of_stages	src/runtime/CL/functions/CLReductionOperation.cpp	/^unsigned int calculate_number_of_stages(const ITensorInfo *input)$/;"	f	namespace:__anon316
calculate_output_shape	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^TensorShape calculate_output_shape(const TensorShape &input_shape, unsigned int axis)$/;"	f	namespace:__anon290
calculate_padding_requirements	src/core/TensorInfo.cpp	/^std::tuple<Strides, size_t, size_t> TensorInfo::calculate_padding_requirements(const PaddingSize &padding)$/;"	f	class:TensorInfo
calculate_quantized_multiplier_greater_than_one	src/core/utils/quantization/AsymmHelpers.cpp	/^arm_compute::Status arm_compute::quantization::calculate_quantized_multiplier_greater_than_one(double multiplier,$/;"	f	class:arm_compute::quantization
calculate_quantized_multiplier_less_than_one	src/core/utils/quantization/AsymmHelpers.cpp	/^arm_compute::Status arm_compute::quantization::calculate_quantized_multiplier_less_than_one(double multiplier,$/;"	f	class:arm_compute::quantization
calculate_same_pad	src/core/Utils.cpp	/^PadStrideInfo arm_compute::calculate_same_pad(TensorShape input_shape, TensorShape weights_shape, PadStrideInfo conv_info)$/;"	f	class:arm_compute
calculate_shapes	src/runtime/CL/functions/CLLocallyConnectedLayer.cpp	/^void calculate_shapes(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	namespace:__anon315
calculate_shapes	src/runtime/NEON/functions/NELocallyConnectedLayer.cpp	/^void calculate_shapes(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	namespace:__anon323
calculate_subsampled_shape	arm_compute/core/Utils.h	/^inline TensorShape calculate_subsampled_shape(const TensorShape &shape, Format format, Channel channel = Channel::UNKNOWN)$/;"	f	namespace:arm_compute
calculate_valid_region_scale	src/core/Helpers.cpp	/^ValidRegion arm_compute::calculate_valid_region_scale(const ITensorInfo &src_info, const TensorShape &dst_shape,$/;"	f	class:arm_compute
calculate_width_concatenate_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape calculate_width_concatenate_shape(const std::vector<T *> &inputs_vector)$/;"	f	namespace:arm_compute::misc::shape_calculator
calculate_width_concatenate_shape	tests/validation/Helpers.cpp	/^TensorShape calculate_width_concatenate_shape(const std::vector<TensorShape> &input_shapes)$/;"	f	namespace:arm_compute::test::validation
calculate_window_lut	src/core/NEON/kernels/NEHistogramKernel.cpp	/^void NEHistogramKernel::calculate_window_lut() const$/;"	f	class:NEHistogramKernel
call_accessor	src/graph/Tensor.cpp	/^bool Tensor::call_accessor()$/;"	f	class:arm_compute::graph::Tensor
call_all_const_node_accessors	src/graph/detail/ExecutionHelpers.cpp	/^void call_all_const_node_accessors(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
call_all_input_node_accessors	src/graph/detail/ExecutionHelpers.cpp	/^void call_all_input_node_accessors(ExecutionWorkload &workload)$/;"	f	namespace:arm_compute::graph::detail
call_all_output_node_accessors	src/graph/detail/ExecutionHelpers.cpp	/^void call_all_output_node_accessors(ExecutionWorkload &workload)$/;"	f	namespace:arm_compute::graph::detail
call_all_tasks	src/graph/detail/ExecutionHelpers.cpp	/^void call_all_tasks(ExecutionWorkload &workload)$/;"	f	namespace:arm_compute::graph::detail
call_tensor_accessor	src/graph/detail/ExecutionHelpers.cpp	/^void call_tensor_accessor(Tensor *tensor)$/;"	f	namespace:arm_compute::graph::detail
canny_8cl	documentation/canny_8cl.js	/^var canny_8cl =$/;"	v
capacity	include/CL/cl.hpp	/^    unsigned int capacity () const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
cast	arm_compute/core/utils/misc/Cast.h	/^namespace cast$/;"	n	namespace:arm_compute::utils
cast	include/half/half.hpp	/^			static T cast(expr arg) { return cast_impl(arg, is_float<T>()); }$/;"	f	struct:detail::half_caster
cast	include/half/half.hpp	/^			static T cast(half arg) { return cast_impl(arg, is_float<T>()); }$/;"	f	struct:detail::half_caster
cast	include/half/half.hpp	/^			static half cast(U arg) { return cast_impl(arg, is_float<U>()); };$/;"	f	struct:detail::half_caster
cast	include/half/half.hpp	/^			static half cast(half arg) { return arg; }$/;"	f	struct:detail::half_caster
cast_impl	include/half/half.hpp	/^			static T cast_impl(float arg, true_type) { return static_cast<T>(arg); }$/;"	f	struct:detail::half_caster
cast_impl	include/half/half.hpp	/^			static T cast_impl(half arg, false_type) { return half2int<R,T>(arg.data_); }$/;"	f	struct:detail::half_caster
cast_impl	include/half/half.hpp	/^			static T cast_impl(half arg, true_type) { return half2float<T>(arg.data_); }$/;"	f	struct:detail::half_caster
cast_impl	include/half/half.hpp	/^			static half cast_impl(U arg, false_type) { return half(binary, int2half<R>(arg)); }$/;"	f	struct:detail::half_caster
cast_impl	include/half/half.hpp	/^			static half cast_impl(U arg, true_type) { return half(binary, float2half<R>(arg)); }$/;"	f	struct:detail::half_caster
cbegin	arm_compute/core/Dimensions.h	/^    typename std::array<T, num_max_dimensions>::const_iterator cbegin() const$/;"	f	class:arm_compute::Dimensions
cbegin	arm_compute/core/utils/misc/Iterable.h	/^    typename T::const_reverse_iterator cbegin()$/;"	f	class:arm_compute::utils::iterable::reverse_iterable
cbrt	include/half/half.hpp	/^			static expr cbrt(float arg)$/;"	f	struct:detail::functions
cbrt	include/half/half.hpp	/^		inline expr cbrt(expr arg) { return functions::cbrt(arg); }$/;"	f	namespace:detail
cbrt	include/half/half.hpp	/^		inline expr cbrt(half arg) { return functions::cbrt(arg); }$/;"	f	namespace:detail
ceil	include/half/half.hpp	/^			static half ceil(half arg) { return half(binary, round_half<std::round_toward_infinity>(arg.data_)); }$/;"	f	struct:detail::functions
ceil	include/half/half.hpp	/^		inline half ceil(expr arg) { return functions::ceil(arg); }$/;"	f	namespace:detail
ceil	include/half/half.hpp	/^		inline half ceil(half arg) { return functions::ceil(arg); }$/;"	f	namespace:detail
cell_size	src/core/HOGInfo.cpp	/^const Size2D &HOGInfo::cell_size() const$/;"	f	class:HOGInfo
cell_to_forget_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *cell_to_forget_weights() const$/;"	f	class:arm_compute::LSTMParams
cell_to_input_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *cell_to_input_weights() const$/;"	f	class:arm_compute::LSTMParams
cell_to_output_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *cell_to_output_weights() const$/;"	f	class:arm_compute::LSTMParams
cell_width_ge8	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void cell_width_ge8(const int16_t *__restrict mag_row_ptr, const uint8_t *__restrict phase_row_ptr, float *__restrict output_ptr, size_t mag_stride, size_t phase_stride, size_t cell_width,$/;"	f	namespace:__anon271
cell_width_lt8	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void cell_width_lt8(const int16_t *__restrict mag_row_ptr, const uint8_t *__restrict phase_row_ptr, float *__restrict output_ptr,$/;"	f	namespace:__anon271
cend	arm_compute/core/Dimensions.h	/^    typename std::array<T, num_max_dimensions>::const_iterator cend() const$/;"	f	class:arm_compute::Dimensions
cend	arm_compute/core/utils/misc/Iterable.h	/^    typename T::const_reverse_iterator cend()$/;"	f	class:arm_compute::utils::iterable::reverse_iterable
channel__combine_8cl	documentation/channel__combine_8cl.js	/^var channel__combine_8cl =$/;"	v
channel__extract_8cl	documentation/channel__extract_8cl.js	/^var channel__extract_8cl =$/;"	v
channel__shuffle_8cl_source.xhtml	documentation/navtreeindex19.js	/^"channel__shuffle_8cl_source.xhtml":[6,0,2,0,0,0,10],$/;"	p	class:NAVTREEINDEX19
channel_combine	tests/validation/reference/ChannelCombine.cpp	/^std::vector<SimpleTensor<T>> channel_combine(const TensorShape &shape, const std::vector<SimpleTensor<T>> &image_planes, Format format)$/;"	f	namespace:arm_compute::test::validation::reference
channel_extract	tests/validation/reference/ChannelExtract.cpp	/^SimpleTensor<uint8_t> channel_extract(const TensorShape &shape, const std::vector<SimpleTensor<T>> &tensor_planes, Format format, Channel channel)$/;"	f	namespace:arm_compute::test::validation::reference
channel_idx_from_format	arm_compute/core/Utils.h	/^inline int channel_idx_from_format(Format format, Channel channel)$/;"	f	namespace:arm_compute
channel_shuffle	tests/validation/reference/ChannelShuffle.cpp	/^SimpleTensor<T> channel_shuffle(const SimpleTensor<T> &src, int num_groups)$/;"	f	namespace:arm_compute::test::validation::reference
check_border_element	tests/validation/Validation.cpp	/^void check_border_element(const IAccessor &tensor, const Coordinates &id,$/;"	f	namespace:arm_compute::test::validation::__anon527
check_corner	src/core/CPP/kernels/CPPCornerCandidatesKernel.cpp	/^inline void check_corner(float x, float y, float strength, InternalKeypoint *output, int32_t *num_corner_candidates, arm_compute::Mutex *corner_candidates_mutex)$/;"	f	namespace:__anon228
check_image_size	tests/AssetsLibrary.cpp	/^void check_image_size(std::ifstream &fs, size_t raw_size)$/;"	f	namespace:arm_compute::test::__anon328
check_support_fast_math	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^bool check_support_fast_math(const Size2D &output_tile, const Size2D &kernel_size)$/;"	f	namespace:__anon317
check_support_fast_math	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^bool check_support_fast_math(const Size2D &output_tile, const Size2D &kernel_size)$/;"	f	namespace:arm_compute::__anon326
circle_offsets	tests/validation/reference/FastCorners.cpp	/^const std::array<std::array<int, 2>, 16> circle_offsets =$/;"	m	namespace:arm_compute::test::validation::reference::__anon535	file:
cl	arm_compute/core/CL/ICLDistribution1D.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/ICLHOG.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/ICLLut.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/ICLTensor.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/OpenCL.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/kernels/CLHOGDetectorKernel.h	/^namespace cl$/;"	n
cl	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^namespace cl$/;"	n
cl	include/CL/cl.hpp	/^namespace cl {$/;"	n
cl	include/CL/cl2.hpp	/^namespace cl {$/;"	n
clBuildProgram	opencl-1.2-stubs/opencl_stubs.c	/^clBuildProgram(cl_program           program,$/;"	f
clBuildProgram	src/core/CL/OpenCL.cpp	/^cl_int clBuildProgram($/;"	f
clCompileProgram	opencl-1.2-stubs/opencl_stubs.c	/^clCompileProgram(cl_program           program,$/;"	f
clCreateBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clCreateBuffer(cl_context   context,$/;"	f
clCreateBuffer	src/core/CL/OpenCL.cpp	/^cl_mem clCreateBuffer($/;"	f
clCreateCommandQueue	opencl-1.2-stubs/opencl_stubs.c	/^clCreateCommandQueue(cl_context                     context,$/;"	f
clCreateCommandQueue	src/core/CL/OpenCL.cpp	/^cl_command_queue clCreateCommandQueue(cl_context                  context,$/;"	f
clCreateContext	opencl-1.2-stubs/opencl_stubs.c	/^clCreateContext(const cl_context_properties * properties,$/;"	f
clCreateContextFromType	opencl-1.2-stubs/opencl_stubs.c	/^clCreateContextFromType(const cl_context_properties * properties,$/;"	f
clCreateContextFromType	src/core/CL/OpenCL.cpp	/^cl_context clCreateContextFromType(const cl_context_properties *properties,$/;"	f
clCreateEventFromEGLSyncKHR_fn	include/CL/cl_egl.h	/^typedef CL_API_ENTRY cl_event (CL_API_CALL *clCreateEventFromEGLSyncKHR_fn)($/;"	t
clCreateFromEGLImageKHR_fn	include/CL/cl_egl.h	/^typedef CL_API_ENTRY cl_mem (CL_API_CALL *clCreateFromEGLImageKHR_fn)($/;"	t
clCreateImage	opencl-1.2-stubs/opencl_stubs.c	/^clCreateImage(cl_context              context,$/;"	f
clCreateImage2D	opencl-1.2-stubs/opencl_stubs.c	/^clCreateImage2D(cl_context              context,$/;"	f
clCreateImage3D	opencl-1.2-stubs/opencl_stubs.c	/^clCreateImage3D(cl_context              context,$/;"	f
clCreateKernel	opencl-1.2-stubs/opencl_stubs.c	/^clCreateKernel(cl_program      program,$/;"	f
clCreateKernel	src/core/CL/OpenCL.cpp	/^cl_kernel clCreateKernel($/;"	f
clCreateKernelsInProgram	opencl-1.2-stubs/opencl_stubs.c	/^clCreateKernelsInProgram(cl_program     program,$/;"	f
clCreateProgramWithBinary	opencl-1.2-stubs/opencl_stubs.c	/^clCreateProgramWithBinary(cl_context                     context,$/;"	f
clCreateProgramWithBinary	src/core/CL/OpenCL.cpp	/^cl_program clCreateProgramWithBinary($/;"	f
clCreateProgramWithBuiltInKernels	opencl-1.2-stubs/opencl_stubs.c	/^clCreateProgramWithBuiltInKernels(cl_context            context,$/;"	f
clCreateProgramWithSource	opencl-1.2-stubs/opencl_stubs.c	/^clCreateProgramWithSource(cl_context        context,$/;"	f
clCreateProgramWithSource	src/core/CL/OpenCL.cpp	/^cl_program clCreateProgramWithSource($/;"	f
clCreateSampler	opencl-1.2-stubs/opencl_stubs.c	/^clCreateSampler(cl_context          context,$/;"	f
clCreateSubBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clCreateSubBuffer(cl_mem                   buffer,$/;"	f
clCreateSubDevices	opencl-1.2-stubs/opencl_stubs.c	/^clCreateSubDevices(cl_device_id                         in_device,$/;"	f
clCreateUserEvent	opencl-1.2-stubs/opencl_stubs.c	/^clCreateUserEvent(cl_context    context,$/;"	f
clEnqueueAcquireEGLObjectsKHR_fn	include/CL/cl_egl.h	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *clEnqueueAcquireEGLObjectsKHR_fn)($/;"	t
clEnqueueBarrier	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueBarrier(cl_command_queue command_queue)$/;"	f
clEnqueueBarrierWithWaitList	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueBarrierWithWaitList(cl_command_queue command_queue,$/;"	f
clEnqueueCopyBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueCopyBuffer(cl_command_queue    command_queue,$/;"	f
clEnqueueCopyBufferRect	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueCopyBufferRect(cl_command_queue    command_queue,$/;"	f
clEnqueueCopyBufferToImage	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueCopyBufferToImage(cl_command_queue command_queue,$/;"	f
clEnqueueCopyImage	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueCopyImage(cl_command_queue     command_queue,$/;"	f
clEnqueueCopyImageToBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueCopyImageToBuffer(cl_command_queue command_queue,$/;"	f
clEnqueueFillBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueFillBuffer(cl_command_queue   command_queue,$/;"	f
clEnqueueFillImage	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueFillImage(cl_command_queue   command_queue,$/;"	f
clEnqueueMapBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueMapBuffer(cl_command_queue command_queue,$/;"	f
clEnqueueMapBuffer	src/core/CL/OpenCL.cpp	/^void *clEnqueueMapBuffer($/;"	f
clEnqueueMapImage	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueMapImage(cl_command_queue  command_queue,$/;"	f
clEnqueueMarker	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueMarker(cl_command_queue    command_queue,$/;"	f
clEnqueueMarker	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueMarker(cl_command_queue command_queue,$/;"	f
clEnqueueMarkerWithWaitList	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueMarkerWithWaitList(cl_command_queue command_queue,$/;"	f
clEnqueueMigrateMemObjects	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueMigrateMemObjects(cl_command_queue       command_queue,$/;"	f
clEnqueueNDRangeKernel	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueNDRangeKernel(cl_command_queue command_queue,$/;"	f
clEnqueueNDRangeKernel	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueNDRangeKernel($/;"	f
clEnqueueNativeKernel	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueNativeKernel(cl_command_queue    command_queue,$/;"	f
clEnqueueReadBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueReadBuffer(cl_command_queue    command_queue,$/;"	f
clEnqueueReadBuffer	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueReadBuffer($/;"	f
clEnqueueReadBufferRect	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueReadBufferRect(cl_command_queue    command_queue,$/;"	f
clEnqueueReadImage	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueReadImage(cl_command_queue     command_queue,$/;"	f
clEnqueueReleaseEGLObjectsKHR_fn	include/CL/cl_egl.h	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *clEnqueueReleaseEGLObjectsKHR_fn)($/;"	t
clEnqueueSVMMap	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueSVMMap(cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void *svm_ptr,$/;"	f
clEnqueueSVMUnmap	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueSVMUnmap(cl_command_queue command_queue, void *svm_ptr, cl_uint num_events_in_wait_list,$/;"	f
clEnqueueTask	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueTask(cl_command_queue  command_queue,$/;"	f
clEnqueueUnmapMemObject	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueUnmapMemObject(cl_command_queue command_queue,$/;"	f
clEnqueueUnmapMemObject	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueUnmapMemObject($/;"	f
clEnqueueWaitForEvents	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueWaitForEvents(cl_command_queue command_queue,$/;"	f
clEnqueueWriteBuffer	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueWriteBuffer(cl_command_queue   command_queue,$/;"	f
clEnqueueWriteBuffer	src/core/CL/OpenCL.cpp	/^cl_int clEnqueueWriteBuffer($/;"	f
clEnqueueWriteBufferRect	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueWriteBufferRect(cl_command_queue    command_queue,$/;"	f
clEnqueueWriteImage	opencl-1.2-stubs/opencl_stubs.c	/^clEnqueueWriteImage(cl_command_queue    command_queue,$/;"	f
clFinish	opencl-1.2-stubs/opencl_stubs.c	/^clFinish(cl_command_queue command_queue)$/;"	f
clFinish	src/core/CL/OpenCL.cpp	/^cl_int clFinish(cl_command_queue command_queue)$/;"	f
clFlush	opencl-1.2-stubs/opencl_stubs.c	/^clFlush(cl_command_queue command_queue)$/;"	f
clFlush	src/core/CL/OpenCL.cpp	/^cl_int clFlush(cl_command_queue command_queue)$/;"	f
clGetCommandQueueInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetCommandQueueInfo(cl_command_queue      command_queue,$/;"	f
clGetCommandQueueInfo	src/core/CL/OpenCL.cpp	/^clGetCommandQueueInfo(cl_command_queue      command_queue,$/;"	f
clGetContextInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetContextInfo(cl_context         context,$/;"	f
clGetContextInfo	src/core/CL/OpenCL.cpp	/^cl_int clGetContextInfo(cl_context      context,$/;"	f
clGetDeviceIDs	opencl-1.2-stubs/opencl_stubs.c	/^clGetDeviceIDs(cl_platform_id   platform,$/;"	f
clGetDeviceIDs	src/core/CL/OpenCL.cpp	/^cl_int clGetDeviceIDs(cl_platform_id platform,$/;"	f
clGetDeviceInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetDeviceInfo(cl_device_id    device,$/;"	f
clGetDeviceInfo	src/core/CL/OpenCL.cpp	/^cl_int clGetDeviceInfo(cl_device_id   device,$/;"	f
clGetEventInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetEventInfo(cl_event         event,$/;"	f
clGetEventProfilingInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetEventProfilingInfo(cl_event            event,$/;"	f
clGetEventProfilingInfo	src/core/CL/OpenCL.cpp	/^clGetEventProfilingInfo(cl_event          event,$/;"	f
clGetExtensionFunctionAddress	opencl-1.2-stubs/opencl_stubs.c	/^clGetExtensionFunctionAddress(const char * func_name)$/;"	f
clGetExtensionFunctionAddressForPlatform	opencl-1.2-stubs/opencl_stubs.c	/^clGetExtensionFunctionAddressForPlatform(cl_platform_id platform,$/;"	f
clGetGLContextInfoKHR_fn	include/CL/cl_gl.h	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *clGetGLContextInfoKHR_fn)($/;"	t
clGetImageInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetImageInfo(cl_mem           image,$/;"	f
clGetKernelArgInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetKernelArgInfo(cl_kernel           kernel,$/;"	f
clGetKernelInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetKernelInfo(cl_kernel       kernel,$/;"	f
clGetKernelInfo	src/core/CL/OpenCL.cpp	/^clGetKernelInfo(cl_kernel      kernel,$/;"	f
clGetKernelWorkGroupInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetKernelWorkGroupInfo(cl_kernel                  kernel,$/;"	f
clGetKernelWorkGroupInfo	src/core/CL/OpenCL.cpp	/^clGetKernelWorkGroupInfo(cl_kernel                 kernel,$/;"	f
clGetMemObjectInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetMemObjectInfo(cl_mem           memobj,$/;"	f
clGetPlatformIDs	opencl-1.2-stubs/opencl_stubs.c	/^clGetPlatformIDs(cl_uint          num_entries,$/;"	f
clGetPlatformIDs	src/core/CL/OpenCL.cpp	/^cl_int clGetPlatformIDs(cl_uint num_entries, cl_platform_id *platforms, cl_uint *num_platforms)$/;"	f
clGetPlatformInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetPlatformInfo(cl_platform_id   platform,$/;"	f
clGetProgramBuildInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetProgramBuildInfo(cl_program            program,$/;"	f
clGetProgramBuildInfo	src/core/CL/OpenCL.cpp	/^cl_int clGetProgramBuildInfo($/;"	f
clGetProgramInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetProgramInfo(cl_program         program,$/;"	f
clGetProgramInfo	src/core/CL/OpenCL.cpp	/^cl_int clGetProgramInfo($/;"	f
clGetSamplerInfo	opencl-1.2-stubs/opencl_stubs.c	/^clGetSamplerInfo(cl_sampler         sampler,$/;"	f
clGetSupportedImageFormats	opencl-1.2-stubs/opencl_stubs.c	/^clGetSupportedImageFormats(cl_context           context,$/;"	f
clIcdGetPlatformIDsKHR_fn	include/CL/cl_ext.h	/^typedef CL_API_ENTRY cl_int (CL_API_CALL *clIcdGetPlatformIDsKHR_fn)($/;"	t
clLinkProgram	opencl-1.2-stubs/opencl_stubs.c	/^clLinkProgram(cl_context           context,$/;"	f
clReleaseCommandQueue	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseCommandQueue(cl_command_queue command_queue)$/;"	f
clReleaseCommandQueue	src/core/CL/OpenCL.cpp	/^cl_int clReleaseCommandQueue(cl_command_queue command_queue)$/;"	f
clReleaseContext	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseContext(cl_context context)$/;"	f
clReleaseContext	src/core/CL/OpenCL.cpp	/^cl_int clReleaseContext(cl_context context)$/;"	f
clReleaseDevice	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseDevice(cl_device_id device)$/;"	f
clReleaseEvent	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseEvent(cl_event event)$/;"	f
clReleaseEvent	src/core/CL/OpenCL.cpp	/^cl_int clReleaseEvent(cl_event event)$/;"	f
clReleaseKernel	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseKernel(cl_kernel   kernel)$/;"	f
clReleaseKernel	src/core/CL/OpenCL.cpp	/^cl_int clReleaseKernel(cl_kernel kernel)$/;"	f
clReleaseMemObject	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseMemObject(cl_mem memobj)$/;"	f
clReleaseMemObject	src/core/CL/OpenCL.cpp	/^cl_int clReleaseMemObject(cl_mem memobj)$/;"	f
clReleaseProgram	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseProgram(cl_program program)$/;"	f
clReleaseProgram	src/core/CL/OpenCL.cpp	/^cl_int clReleaseProgram(cl_program program)$/;"	f
clReleaseSampler	opencl-1.2-stubs/opencl_stubs.c	/^clReleaseSampler(cl_sampler sampler)$/;"	f
clRetainCommandQueue	opencl-1.2-stubs/opencl_stubs.c	/^clRetainCommandQueue(cl_command_queue command_queue)$/;"	f
clRetainCommandQueue	src/core/CL/OpenCL.cpp	/^cl_int clRetainCommandQueue(cl_command_queue command_queue)$/;"	f
clRetainContext	opencl-1.2-stubs/opencl_stubs.c	/^clRetainContext(cl_context context)$/;"	f
clRetainContext	src/core/CL/OpenCL.cpp	/^cl_int clRetainContext(cl_context context)$/;"	f
clRetainDevice	opencl-1.2-stubs/opencl_stubs.c	/^clRetainDevice(cl_device_id device)$/;"	f
clRetainEvent	opencl-1.2-stubs/opencl_stubs.c	/^clRetainEvent(cl_event event)$/;"	f
clRetainEvent	src/core/CL/OpenCL.cpp	/^cl_int clRetainEvent(cl_event event)$/;"	f
clRetainKernel	opencl-1.2-stubs/opencl_stubs.c	/^clRetainKernel(cl_kernel    kernel)$/;"	f
clRetainKernel	src/core/CL/OpenCL.cpp	/^cl_int clRetainKernel(cl_kernel kernel)$/;"	f
clRetainMemObject	opencl-1.2-stubs/opencl_stubs.c	/^clRetainMemObject(cl_mem memobj)$/;"	f
clRetainMemObject	src/core/CL/OpenCL.cpp	/^cl_int clRetainMemObject(cl_mem memobj)$/;"	f
clRetainProgram	opencl-1.2-stubs/opencl_stubs.c	/^clRetainProgram(cl_program program)$/;"	f
clRetainProgram	src/core/CL/OpenCL.cpp	/^cl_int clRetainProgram(cl_program program)$/;"	f
clRetainSampler	opencl-1.2-stubs/opencl_stubs.c	/^clRetainSampler(cl_sampler sampler)$/;"	f
clSVMAlloc	src/core/CL/OpenCL.cpp	/^void *clSVMAlloc(cl_context context, cl_svm_mem_flags_arm flags, size_t size, cl_uint alignment)$/;"	f
clSVMFree	src/core/CL/OpenCL.cpp	/^void clSVMFree(cl_context context, void *svm_pointer)$/;"	f
clSetCommandQueueProperty	opencl-1.2-stubs/opencl_stubs.c	/^clSetCommandQueueProperty(cl_command_queue              command_queue,$/;"	f
clSetEventCallback	opencl-1.2-stubs/opencl_stubs.c	/^clSetEventCallback( cl_event            event,$/;"	f
clSetKernelArg	opencl-1.2-stubs/opencl_stubs.c	/^clSetKernelArg(cl_kernel    kernel,$/;"	f
clSetKernelArg	src/core/CL/OpenCL.cpp	/^cl_int clSetKernelArg($/;"	f
clSetMemObjectDestructorCallback	opencl-1.2-stubs/opencl_stubs.c	/^clSetMemObjectDestructorCallback(  cl_mem memobj,$/;"	f
clSetUserEventStatus	opencl-1.2-stubs/opencl_stubs.c	/^clSetUserEventStatus(cl_event   event,$/;"	f
clUnloadCompiler	opencl-1.2-stubs/opencl_stubs.c	/^clUnloadCompiler(void)$/;"	f
clUnloadPlatformCompiler	opencl-1.2-stubs/opencl_stubs.c	/^clUnloadPlatformCompiler(cl_platform_id platform)$/;"	f
clWaitForEvents	opencl-1.2-stubs/opencl_stubs.c	/^clWaitForEvents(cl_uint             num_events,$/;"	f
clWaitForEvents	src/core/CL/OpenCL.cpp	/^cl_int clWaitForEvents(cl_uint         num_events,$/;"	f
cl_APPLE_ContextLoggingFunctions	include/CL/cl_ext.h	82;"	d
cl_APPLE_SetMemObjectDestructor	include/CL/cl_ext.h	68;"	d
cl_GLenum	include/CL/cl_platform.h	/^typedef unsigned int cl_GLenum;$/;"	t
cl_GLint	include/CL/cl_platform.h	/^typedef int          cl_GLint;$/;"	t
cl_GLsync	include/CL/cl_gl.h	/^typedef struct __GLsync *cl_GLsync;$/;"	t	typeref:struct:__GLsync
cl_GLuint	include/CL/cl_platform.h	/^typedef unsigned int cl_GLuint;$/;"	t
cl__convolution_8cpp	documentation/cl__convolution_8cpp.js	/^var cl__convolution_8cpp =$/;"	v
cl__events_8cpp	documentation/cl__events_8cpp.js	/^var cl__events_8cpp =$/;"	v
cl__sgemm_8cpp	documentation/cl__sgemm_8cpp.js	/^var cl__sgemm_8cpp =$/;"	v
cl_accelerator_info_intel	include/CL/cl_ext_intel.h	/^typedef cl_uint cl_accelerator_info_intel;$/;"	t
cl_accelerator_intel	include/CL/cl_ext_intel.h	/^typedef struct _cl_accelerator_intel* cl_accelerator_intel;$/;"	t	typeref:struct:_cl_accelerator_intel
cl_accelerator_type_intel	include/CL/cl_ext_intel.h	/^typedef cl_uint cl_accelerator_type_intel;$/;"	t
cl_addressing_mode	include/CL/cl.h	/^typedef cl_uint             cl_addressing_mode;$/;"	t
cl_bitfield	include/CL/cl.h	/^typedef cl_ulong            cl_bitfield;$/;"	t
cl_bool	include/CL/cl.h	/^typedef cl_uint             cl_bool;                     \/* WARNING!  Unlike cl_ types in cl_platform.h, cl_bool is not guaranteed to be the same size as the bool in kernels. *\/ $/;"	t
cl_buffer	src/runtime/CL/CLDistribution1D.cpp	/^cl::Buffer &CLDistribution1D::cl_buffer()$/;"	f	class:CLDistribution1D
cl_buffer	src/runtime/CL/CLHOG.cpp	/^const cl::Buffer &CLHOG::cl_buffer() const$/;"	f	class:CLHOG
cl_buffer	src/runtime/CL/CLLut.cpp	/^const cl::Buffer &CLLut::cl_buffer() const$/;"	f	class:CLLut
cl_buffer	src/runtime/CL/CLSubTensor.cpp	/^const cl::Buffer &CLSubTensor::cl_buffer() const$/;"	f	class:CLSubTensor
cl_buffer	src/runtime/CL/CLTensor.cpp	/^const cl::Buffer &CLTensor::cl_buffer() const$/;"	f	class:CLTensor
cl_buffer_create_type	include/CL/cl.h	/^typedef cl_uint             cl_buffer_create_type;$/;"	t
cl_buffer_region	include/CL/cl.h	/^} cl_buffer_region;$/;"	t	typeref:struct:_cl_buffer_region
cl_build_status	include/CL/cl.h	/^typedef cl_int              cl_build_status;$/;"	t
cl_channel_order	include/CL/cl.h	/^typedef cl_uint             cl_channel_order;$/;"	t
cl_channel_type	include/CL/cl.h	/^typedef cl_uint             cl_channel_type;$/;"	t
cl_char	include/CL/cl_platform.h	/^typedef int8_t          cl_char;$/;"	t
cl_char	include/CL/cl_platform.h	/^typedef signed   __int8         cl_char;$/;"	t
cl_char16	include/CL/cl_platform.h	/^}cl_char16;$/;"	t	typeref:union:__anon17
cl_char2	include/CL/cl_platform.h	/^}cl_char2;$/;"	t	typeref:union:__anon5
cl_char3	include/CL/cl_platform.h	/^typedef  cl_char4  cl_char3;$/;"	t
cl_char4	include/CL/cl_platform.h	/^}cl_char4;$/;"	t	typeref:union:__anon9
cl_char8	include/CL/cl_platform.h	/^}cl_char8;$/;"	t	typeref:union:__anon13
cl_command_queue	include/CL/cl.h	/^typedef struct _cl_command_queue *  cl_command_queue;$/;"	t	typeref:struct:_cl_command_queue
cl_command_queue_info	include/CL/cl.h	/^typedef cl_uint             cl_command_queue_info;$/;"	t
cl_command_queue_properties	include/CL/cl.h	/^typedef cl_bitfield         cl_command_queue_properties;$/;"	t
cl_command_type	include/CL/cl.h	/^typedef cl_uint             cl_command_type;$/;"	t
cl_context	include/CL/cl.h	/^typedef struct _cl_context *        cl_context;$/;"	t	typeref:struct:_cl_context
cl_context_info	include/CL/cl.h	/^typedef cl_uint             cl_context_info;$/;"	t
cl_context_properties	include/CL/cl.h	/^typedef intptr_t            cl_context_properties;$/;"	t
cl_d3d10_device_set_khr	include/CL/cl_d3d10.h	/^typedef cl_uint cl_d3d10_device_set_khr;$/;"	t
cl_d3d10_device_source_khr	include/CL/cl_d3d10.h	/^typedef cl_uint cl_d3d10_device_source_khr;$/;"	t
cl_d3d11_device_set_khr	include/CL/cl_d3d11.h	/^typedef cl_uint cl_d3d11_device_set_khr;$/;"	t
cl_d3d11_device_source_khr	include/CL/cl_d3d11.h	/^typedef cl_uint cl_d3d11_device_source_khr;$/;"	t
cl_data	src/runtime/CL/CLLutAllocator.cpp	/^const cl::Buffer &CLLutAllocator::cl_data() const$/;"	f	class:CLLutAllocator
cl_data	src/runtime/CL/CLMemoryRegion.cpp	/^const cl::Buffer &ICLMemoryRegion::cl_data() const$/;"	f	class:arm_compute::ICLMemoryRegion
cl_data	src/runtime/CL/CLTensorAllocator.cpp	/^const cl::Buffer &CLTensorAllocator::cl_data() const$/;"	f	class:CLTensorAllocator
cl_device_affinity_domain	include/CL/cl.h	/^typedef cl_bitfield         cl_device_affinity_domain;$/;"	t
cl_device_exec_capabilities	include/CL/cl.h	/^typedef cl_bitfield         cl_device_exec_capabilities;$/;"	t
cl_device_fp_config	include/CL/cl.h	/^typedef cl_bitfield         cl_device_fp_config;$/;"	t
cl_device_id	include/CL/cl.h	/^typedef struct _cl_device_id *      cl_device_id;$/;"	t	typeref:struct:_cl_device_id
cl_device_info	include/CL/cl.h	/^typedef cl_uint             cl_device_info;$/;"	t
cl_device_local_mem_type	include/CL/cl.h	/^typedef cl_uint             cl_device_local_mem_type;$/;"	t
cl_device_mem_cache_type	include/CL/cl.h	/^typedef cl_uint             cl_device_mem_cache_type;$/;"	t
cl_device_partition_property	include/CL/cl.h	/^typedef intptr_t            cl_device_partition_property;$/;"	t
cl_device_partition_property_ext	include/CL/cl_ext.h	/^    typedef cl_ulong  cl_device_partition_property_ext;$/;"	t
cl_device_svm_capabilities	include/CL/cl.h	/^typedef cl_bitfield         cl_device_svm_capabilities;$/;"	t
cl_device_svm_capabilities_arm	include/CL/cl_ext.h	/^typedef cl_bitfield cl_device_svm_capabilities_arm;$/;"	t
cl_device_type	include/CL/cl.h	/^typedef cl_bitfield         cl_device_type;$/;"	t
cl_diagnostics_verbose_level	include/CL/cl_ext_intel.h	/^typedef cl_uint cl_diagnostics_verbose_level;$/;"	t
cl_double	include/CL/cl_platform.h	/^typedef double                  cl_double;$/;"	t
cl_double	include/CL/cl_platform.h	/^typedef double          cl_double   __attribute__((aligned(8)));$/;"	t
cl_double16	include/CL/cl_platform.h	/^}cl_double16;$/;"	t	typeref:union:__anon177
cl_double2	include/CL/cl_platform.h	/^}cl_double2;$/;"	t	typeref:union:__anon165
cl_double3	include/CL/cl_platform.h	/^typedef  cl_double4  cl_double3;$/;"	t
cl_double4	include/CL/cl_platform.h	/^}cl_double4;$/;"	t	typeref:union:__anon169
cl_double8	include/CL/cl_platform.h	/^}cl_double8;$/;"	t	typeref:union:__anon173
cl_dx9_device_set_intel	include/CL/cl_dx9_media_sharing_intel.h	/^typedef cl_uint cl_dx9_device_set_intel;$/;"	t
cl_dx9_device_source_intel	include/CL/cl_dx9_media_sharing_intel.h	/^typedef cl_uint cl_dx9_device_source_intel;$/;"	t
cl_dx9_media_adapter_set_khr	include/CL/cl_dx9_media_sharing.h	/^typedef cl_uint             cl_dx9_media_adapter_set_khr;$/;"	t
cl_dx9_media_adapter_type_khr	include/CL/cl_dx9_media_sharing.h	/^typedef cl_uint             cl_dx9_media_adapter_type_khr;$/;"	t
cl_dx9_surface_info_khr	include/CL/cl_dx9_media_sharing.h	/^} cl_dx9_surface_info_khr;$/;"	t	typeref:struct:_cl_dx9_surface_info_khr
cl_egl_image_properties_khr	include/CL/cl_egl.h	/^typedef intptr_t cl_egl_image_properties_khr;$/;"	t
cl_event	include/CL/cl.h	/^typedef struct _cl_event *          cl_event;$/;"	t	typeref:struct:_cl_event
cl_event_info	include/CL/cl.h	/^typedef cl_uint             cl_event_info;$/;"	t
cl_ext_device_fission	include/CL/cl_ext.h	196;"	d
cl_filter_mode	include/CL/cl.h	/^typedef cl_uint             cl_filter_mode;$/;"	t
cl_float	include/CL/cl_platform.h	/^typedef float                   cl_float;$/;"	t
cl_float	include/CL/cl_platform.h	/^typedef float           cl_float    __attribute__((aligned(4)));$/;"	t
cl_float16	include/CL/cl_platform.h	/^}cl_float16;$/;"	t	typeref:union:__anon161
cl_float2	include/CL/cl_platform.h	/^}cl_float2;$/;"	t	typeref:union:__anon149
cl_float3	include/CL/cl_platform.h	/^typedef  cl_float4  cl_float3;$/;"	t
cl_float4	include/CL/cl_platform.h	/^}cl_float4;$/;"	t	typeref:union:__anon153
cl_float8	include/CL/cl_platform.h	/^}cl_float8;$/;"	t	typeref:union:__anon157
cl_gl_context_info	include/CL/cl_gl.h	/^typedef cl_uint     cl_gl_context_info;$/;"	t
cl_gl_object_type	include/CL/cl_gl.h	/^typedef cl_uint     cl_gl_object_type;$/;"	t
cl_gl_platform_info	include/CL/cl_gl.h	/^typedef cl_uint     cl_gl_platform_info;$/;"	t
cl_gl_texture_info	include/CL/cl_gl.h	/^typedef cl_uint     cl_gl_texture_info;$/;"	t
cl_half	include/CL/cl_platform.h	/^typedef uint16_t        cl_half     __attribute__((aligned(2)));$/;"	t
cl_half	include/CL/cl_platform.h	/^typedef unsigned __int16        cl_half;$/;"	t
cl_half16	include/CL/cl_platform.h	/^}cl_half16;$/;"	t	typeref:union:__anon81
cl_half2	include/CL/cl_platform.h	/^}cl_half2;$/;"	t	typeref:union:__anon69
cl_half3	include/CL/cl_platform.h	/^typedef  cl_half4  cl_half3;$/;"	t
cl_half4	include/CL/cl_platform.h	/^}cl_half4;$/;"	t	typeref:union:__anon73
cl_half8	include/CL/cl_platform.h	/^}cl_half8;$/;"	t	typeref:union:__anon77
cl_image_desc	include/CL/cl.h	/^} cl_image_desc;$/;"	t	typeref:struct:_cl_image_desc
cl_image_format	include/CL/cl.h	/^} cl_image_format;$/;"	t	typeref:struct:_cl_image_format
cl_image_info	include/CL/cl.h	/^typedef cl_uint             cl_image_info;$/;"	t
cl_image_pitch_info_qcom	include/CL/cl_ext.h	/^typedef cl_uint                                   cl_image_pitch_info_qcom;$/;"	t
cl_import_properties_arm	include/CL/cl_ext.h	/^typedef intptr_t cl_import_properties_arm;$/;"	t
cl_int	include/CL/cl_platform.h	/^typedef int32_t         cl_int      __attribute__((aligned(4)));$/;"	t
cl_int	include/CL/cl_platform.h	/^typedef signed   __int32        cl_int;$/;"	t
cl_int16	include/CL/cl_platform.h	/^}cl_int16;$/;"	t	typeref:union:__anon97
cl_int2	include/CL/cl_platform.h	/^}cl_int2;$/;"	t	typeref:union:__anon85
cl_int3	include/CL/cl_platform.h	/^typedef  cl_int4  cl_int3;$/;"	t
cl_int4	include/CL/cl_platform.h	/^}cl_int4;$/;"	t	typeref:union:__anon89
cl_int8	include/CL/cl_platform.h	/^}cl_int8;$/;"	t	typeref:union:__anon93
cl_intel_accelerator	include/CL/cl_ext_intel.h	90;"	d
cl_intel_advanced_motion_estimation	include/CL/cl_ext_intel.h	92;"	d
cl_intel_device_partition_by_names	include/CL/cl_ext_intel.h	79;"	d
cl_intel_driver_diagnostics	include/CL/cl_ext_intel.h	271;"	d
cl_intel_dx9_media_sharing	include/CL/cl_dx9_media_sharing_intel.h	70;"	d
cl_intel_egl_image_yuv	include/CL/cl_ext_intel.h	242;"	d
cl_intel_motion_estimation	include/CL/cl_ext_intel.h	91;"	d
cl_intel_packed_yuv	include/CL/cl_ext_intel.h	250;"	d
cl_intel_required_subgroup_size	include/CL/cl_ext_intel.h	261;"	d
cl_intel_simultaneous_sharing	include/CL/cl_ext_intel.h	233;"	d
cl_intel_thread_local_exec	include/CL/cl_ext_intel.h	71;"	d
cl_intel_va_api_media_sharing	include/CL/cl_va_api_media_sharing_intel.h	68;"	d
cl_kernel	include/CL/cl.h	/^typedef struct _cl_kernel *         cl_kernel;$/;"	t	typeref:struct:_cl_kernel
cl_kernel_arg_access_qualifier	include/CL/cl.h	/^typedef cl_uint             cl_kernel_arg_access_qualifier;$/;"	t
cl_kernel_arg_address_qualifier	include/CL/cl.h	/^typedef cl_uint             cl_kernel_arg_address_qualifier;$/;"	t
cl_kernel_arg_info	include/CL/cl.h	/^typedef cl_uint             cl_kernel_arg_info;$/;"	t
cl_kernel_arg_type_qualifier	include/CL/cl.h	/^typedef cl_bitfield         cl_kernel_arg_type_qualifier;$/;"	t
cl_kernel_exec_info	include/CL/cl.h	/^typedef cl_uint             cl_kernel_exec_info;$/;"	t
cl_kernel_exec_info_arm	include/CL/cl_ext.h	/^typedef cl_uint     cl_kernel_exec_info_arm;$/;"	t
cl_kernel_info	include/CL/cl.h	/^typedef cl_uint             cl_kernel_info;$/;"	t
cl_kernel_sub_group_info	include/CL/cl.h	/^typedef cl_uint             cl_kernel_sub_group_info;$/;"	t
cl_kernel_work_group_info	include/CL/cl.h	/^typedef cl_uint             cl_kernel_work_group_info;$/;"	t
cl_khr_d3d10_sharing	include/CL/cl_d3d10.h	44;"	d
cl_khr_d3d11_sharing	include/CL/cl_d3d11.h	44;"	d
cl_khr_dx9_media_sharing	include/CL/cl_dx9_media_sharing.h	43;"	d
cl_khr_egl_event	include/CL/cl_egl.h	118;"	d
cl_khr_egl_image	include/CL/cl_egl.h	65;"	d
cl_khr_gl_sharing	include/CL/cl_gl.h	131;"	d
cl_khr_icd	include/CL/cl_ext.h	104;"	d
cl_khr_priority_hints	include/CL/cl_ext.h	403;"	d
cl_khr_subgroup_named_barrier	include/CL/cl_ext.h	439;"	d
cl_khr_subgroups	include/CL/cl_ext.h	370;"	d
cl_khr_terminate_context	include/CL/cl_ext.h	152;"	d
cl_khr_throttle_hints	include/CL/cl_ext.h	421;"	d
cl_long	include/CL/cl_platform.h	/^typedef int64_t         cl_long     __attribute__((aligned(8)));$/;"	t
cl_long	include/CL/cl_platform.h	/^typedef signed   __int64        cl_long;$/;"	t
cl_long16	include/CL/cl_platform.h	/^}cl_long16;$/;"	t	typeref:union:__anon129
cl_long2	include/CL/cl_platform.h	/^}cl_long2;$/;"	t	typeref:union:__anon117
cl_long3	include/CL/cl_platform.h	/^typedef  cl_long4  cl_long3;$/;"	t
cl_long4	include/CL/cl_platform.h	/^}cl_long4;$/;"	t	typeref:union:__anon121
cl_long8	include/CL/cl_platform.h	/^}cl_long8;$/;"	t	typeref:union:__anon125
cl_map_flags	include/CL/cl.h	/^typedef cl_bitfield         cl_map_flags;$/;"	t
cl_mem	include/CL/cl.h	/^typedef struct _cl_mem *            cl_mem;$/;"	t	typeref:struct:_cl_mem
cl_mem_ext_host_ptr	include/CL/cl_ext.h	/^} cl_mem_ext_host_ptr;$/;"	t	typeref:struct:_cl_mem_ext_host_ptr
cl_mem_flags	include/CL/cl.h	/^typedef cl_bitfield         cl_mem_flags;$/;"	t
cl_mem_info	include/CL/cl.h	/^typedef cl_uint             cl_mem_info;$/;"	t
cl_mem_ion_host_ptr	include/CL/cl_ext.h	/^} cl_mem_ion_host_ptr;$/;"	t	typeref:struct:_cl_mem_ion_host_ptr
cl_mem_migration_flags	include/CL/cl.h	/^typedef cl_bitfield         cl_mem_migration_flags;$/;"	t
cl_mem_object_type	include/CL/cl.h	/^typedef cl_uint             cl_mem_object_type;$/;"	t
cl_model	src/runtime/CL/CLMultiHOG.cpp	/^ICLHOG *CLMultiHOG::cl_model(size_t index)$/;"	f	class:CLMultiHOG
cl_model	src/runtime/CL/CLMultiHOG.cpp	/^const ICLHOG *CLMultiHOG::cl_model(size_t index) const$/;"	f	class:CLMultiHOG
cl_motion_estimation_desc_intel	include/CL/cl_ext_intel.h	/^} cl_motion_estimation_desc_intel;$/;"	t	typeref:struct:_cl_motion_estimation_desc_intel
cl_pipe_info	include/CL/cl.h	/^typedef cl_uint             cl_pipe_info;$/;"	t
cl_pipe_properties	include/CL/cl.h	/^typedef intptr_t            cl_pipe_properties;$/;"	t
cl_plane	src/runtime/CL/CLMultiImage.cpp	/^CLImage *CLMultiImage::cl_plane(unsigned int index)$/;"	f	class:CLMultiImage
cl_plane	src/runtime/CL/CLMultiImage.cpp	/^const CLImage *CLMultiImage::cl_plane(unsigned int index) const$/;"	f	class:CLMultiImage
cl_platform_id	include/CL/cl.h	/^typedef struct _cl_platform_id *    cl_platform_id;$/;"	t	typeref:struct:_cl_platform_id
cl_platform_info	include/CL/cl.h	/^typedef cl_uint             cl_platform_info;$/;"	t
cl_profiling_info	include/CL/cl.h	/^typedef cl_uint             cl_profiling_info;$/;"	t
cl_program	include/CL/cl.h	/^typedef struct _cl_program *        cl_program;$/;"	t	typeref:struct:_cl_program
cl_program_binary_type	include/CL/cl.h	/^typedef cl_uint             cl_program_binary_type;$/;"	t
cl_program_build_info	include/CL/cl.h	/^typedef cl_uint             cl_program_build_info;$/;"	t
cl_program_info	include/CL/cl.h	/^typedef cl_uint             cl_program_info;$/;"	t
cl_queue_priority_khr	include/CL/cl_ext.h	/^typedef cl_uint  cl_queue_priority_khr;$/;"	t
cl_queue_properties	include/CL/cl.h	/^typedef cl_bitfield         cl_queue_properties;$/;"	t
cl_queue_throttle_khr	include/CL/cl_ext.h	/^typedef cl_uint  cl_queue_throttle_khr;$/;"	t
cl_sampler	include/CL/cl.h	/^typedef struct _cl_sampler *        cl_sampler;$/;"	t	typeref:struct:_cl_sampler
cl_sampler_info	include/CL/cl.h	/^typedef cl_uint             cl_sampler_info;$/;"	t
cl_sampler_properties	include/CL/cl.h	/^typedef cl_bitfield         cl_sampler_properties;$/;"	t
cl_short	include/CL/cl_platform.h	/^typedef int16_t         cl_short    __attribute__((aligned(2)));$/;"	t
cl_short	include/CL/cl_platform.h	/^typedef signed   __int16        cl_short;$/;"	t
cl_short16	include/CL/cl_platform.h	/^}cl_short16;$/;"	t	typeref:union:__anon49
cl_short2	include/CL/cl_platform.h	/^}cl_short2;$/;"	t	typeref:union:__anon37
cl_short3	include/CL/cl_platform.h	/^typedef  cl_short4  cl_short3;$/;"	t
cl_short4	include/CL/cl_platform.h	/^}cl_short4;$/;"	t	typeref:union:__anon41
cl_short8	include/CL/cl_platform.h	/^}cl_short8;$/;"	t	typeref:union:__anon45
cl_svm_mem_flags	include/CL/cl.h	/^typedef cl_bitfield         cl_svm_mem_flags;$/;"	t
cl_svm_mem_flags_arm	include/CL/cl_ext.h	/^typedef cl_bitfield cl_svm_mem_flags_arm;$/;"	t
cl_type	include/CL/cl.hpp	/^    typedef T cl_type;$/;"	t	class:cl::detail::Wrapper
cl_type	include/CL/cl.hpp	/^    typedef cl_device_id cl_type;$/;"	t	class:cl::detail::Wrapper
cl_type	include/CL/cl2.hpp	/^    typedef T cl_type;$/;"	t	class:cl::detail::Wrapper
cl_type	include/CL/cl2.hpp	/^    typedef cl_device_id cl_type;$/;"	t	class:cl::detail::Wrapper
cl_uchar	include/CL/cl_platform.h	/^typedef uint8_t         cl_uchar;$/;"	t
cl_uchar	include/CL/cl_platform.h	/^typedef unsigned __int8         cl_uchar;$/;"	t
cl_uchar16	include/CL/cl_platform.h	/^}cl_uchar16;$/;"	t	typeref:union:__anon33
cl_uchar2	include/CL/cl_platform.h	/^}cl_uchar2;$/;"	t	typeref:union:__anon21
cl_uchar3	include/CL/cl_platform.h	/^typedef  cl_uchar4  cl_uchar3;$/;"	t
cl_uchar4	include/CL/cl_platform.h	/^}cl_uchar4;$/;"	t	typeref:union:__anon25
cl_uchar8	include/CL/cl_platform.h	/^}cl_uchar8;$/;"	t	typeref:union:__anon29
cl_uint	include/CL/cl_platform.h	/^typedef uint32_t        cl_uint     __attribute__((aligned(4)));$/;"	t
cl_uint	include/CL/cl_platform.h	/^typedef unsigned __int32        cl_uint;$/;"	t
cl_uint16	include/CL/cl_platform.h	/^}cl_uint16;$/;"	t	typeref:union:__anon113
cl_uint2	include/CL/cl_platform.h	/^}cl_uint2;$/;"	t	typeref:union:__anon101
cl_uint3	include/CL/cl_platform.h	/^typedef  cl_uint4  cl_uint3;$/;"	t
cl_uint4	include/CL/cl_platform.h	/^}cl_uint4;$/;"	t	typeref:union:__anon105
cl_uint8	include/CL/cl_platform.h	/^}cl_uint8;$/;"	t	typeref:union:__anon109
cl_ulong	include/CL/cl_platform.h	/^typedef uint64_t        cl_ulong    __attribute__((aligned(8)));$/;"	t
cl_ulong	include/CL/cl_platform.h	/^typedef unsigned __int64        cl_ulong;$/;"	t
cl_ulong16	include/CL/cl_platform.h	/^}cl_ulong16;$/;"	t	typeref:union:__anon145
cl_ulong2	include/CL/cl_platform.h	/^}cl_ulong2;$/;"	t	typeref:union:__anon133
cl_ulong3	include/CL/cl_platform.h	/^typedef  cl_ulong4  cl_ulong3;$/;"	t
cl_ulong4	include/CL/cl_platform.h	/^}cl_ulong4;$/;"	t	typeref:union:__anon137
cl_ulong8	include/CL/cl_platform.h	/^}cl_ulong8;$/;"	t	typeref:union:__anon141
cl_ushort	include/CL/cl_platform.h	/^typedef uint16_t        cl_ushort   __attribute__((aligned(2)));$/;"	t
cl_ushort	include/CL/cl_platform.h	/^typedef unsigned __int16        cl_ushort;$/;"	t
cl_ushort16	include/CL/cl_platform.h	/^}cl_ushort16;$/;"	t	typeref:union:__anon65
cl_ushort2	include/CL/cl_platform.h	/^}cl_ushort2;$/;"	t	typeref:union:__anon53
cl_ushort3	include/CL/cl_platform.h	/^typedef  cl_ushort4  cl_ushort3;$/;"	t
cl_ushort4	include/CL/cl_platform.h	/^}cl_ushort4;$/;"	t	typeref:union:__anon57
cl_ushort8	include/CL/cl_platform.h	/^}cl_ushort8;$/;"	t	typeref:union:__anon61
cl_va_api_device_set_intel	include/CL/cl_va_api_media_sharing_intel.h	/^typedef cl_uint cl_va_api_device_set_intel;$/;"	t
cl_va_api_device_source_intel	include/CL/cl_va_api_media_sharing_intel.h	/^typedef cl_uint cl_va_api_device_source_intel;$/;"	t
clamp	arm_compute/core/utils/misc/Utility.h	/^inline T clamp(const T &n, const T &lower, const T &upper)$/;"	f	namespace:arm_compute::utility
clamp	tests/validation/FixedPoint.h	/^    static constexpr T clamp(T val, T min, T max)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
clamp	tests/validation/FixedPoint.h	/^    static fixed_point<T> clamp(fixed_point<T> x, T min, T max)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
clamp	tests/validation/FixedPoint.h	/^inline fixed_point<T> clamp(fixed_point<T> x, T min, T max)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
clamp_to_border	src/core/CL/cl_kernels/warp_helpers.h	/^inline const float8 clamp_to_border(float8 coords, const float width, const float height)$/;"	f
clamp_to_border_with_size	src/core/CL/cl_kernels/warp_helpers.h	/^inline const float8 clamp_to_border_with_size(float8 coords, const float width, const float height, const float border_size)$/;"	f
clamp_to_border_with_size	src/core/GLES_COMPUTE/cs_shaders/scale.cs	/^vec4[2] clamp_to_border_with_size(vec4[2] coords, float width, float height, float border_size)$/;"	m
classarm__compute_1_1_access_window_auto_padding	documentation/classarm__compute_1_1_access_window_auto_padding.js	/^var classarm__compute_1_1_access_window_auto_padding =$/;"	v
classarm__compute_1_1_access_window_horizontal	documentation/classarm__compute_1_1_access_window_horizontal.js	/^var classarm__compute_1_1_access_window_horizontal =$/;"	v
classarm__compute_1_1_access_window_rectangle	documentation/classarm__compute_1_1_access_window_rectangle.js	/^var classarm__compute_1_1_access_window_rectangle =$/;"	v
classarm__compute_1_1_access_window_static	documentation/classarm__compute_1_1_access_window_static.js	/^var classarm__compute_1_1_access_window_static =$/;"	v
classarm__compute_1_1_access_window_transpose	documentation/classarm__compute_1_1_access_window_transpose.js	/^var classarm__compute_1_1_access_window_transpose =$/;"	v
classarm__compute_1_1_access_window_vertical	documentation/classarm__compute_1_1_access_window_vertical.js	/^var classarm__compute_1_1_access_window_vertical =$/;"	v
classarm__compute_1_1_activation_layer_info	documentation/classarm__compute_1_1_activation_layer_info.js	/^var classarm__compute_1_1_activation_layer_info =$/;"	v
classarm__compute_1_1_allocator	documentation/classarm__compute_1_1_allocator.js	/^var classarm__compute_1_1_allocator =$/;"	v
classarm__compute_1_1_array	documentation/classarm__compute_1_1_array.js	/^var classarm__compute_1_1_array =$/;"	v
classarm__compute_1_1_assembly_kernel_glue	documentation/classarm__compute_1_1_assembly_kernel_glue.js	/^var classarm__compute_1_1_assembly_kernel_glue =$/;"	v
classarm__compute_1_1_blob_lifetime_manager	documentation/classarm__compute_1_1_blob_lifetime_manager.js	/^var classarm__compute_1_1_blob_lifetime_manager =$/;"	v
classarm__compute_1_1_blob_memory_pool	documentation/classarm__compute_1_1_blob_memory_pool.js	/^var classarm__compute_1_1_blob_memory_pool =$/;"	v
classarm__compute_1_1_c_l_absolute_difference	documentation/classarm__compute_1_1_c_l_absolute_difference.js	/^var classarm__compute_1_1_c_l_absolute_difference =$/;"	v
classarm__compute_1_1_c_l_absolute_difference_kernel	documentation/classarm__compute_1_1_c_l_absolute_difference_kernel.js	/^var classarm__compute_1_1_c_l_absolute_difference_kernel =$/;"	v
classarm__compute_1_1_c_l_accumulate	documentation/classarm__compute_1_1_c_l_accumulate.js	/^var classarm__compute_1_1_c_l_accumulate =$/;"	v
classarm__compute_1_1_c_l_accumulate_kernel	documentation/classarm__compute_1_1_c_l_accumulate_kernel.js	/^var classarm__compute_1_1_c_l_accumulate_kernel =$/;"	v
classarm__compute_1_1_c_l_accumulate_squared	documentation/classarm__compute_1_1_c_l_accumulate_squared.js	/^var classarm__compute_1_1_c_l_accumulate_squared =$/;"	v
classarm__compute_1_1_c_l_accumulate_squared_kernel	documentation/classarm__compute_1_1_c_l_accumulate_squared_kernel.js	/^var classarm__compute_1_1_c_l_accumulate_squared_kernel =$/;"	v
classarm__compute_1_1_c_l_accumulate_weighted	documentation/classarm__compute_1_1_c_l_accumulate_weighted.js	/^var classarm__compute_1_1_c_l_accumulate_weighted =$/;"	v
classarm__compute_1_1_c_l_accumulate_weighted_kernel	documentation/classarm__compute_1_1_c_l_accumulate_weighted_kernel.js	/^var classarm__compute_1_1_c_l_accumulate_weighted_kernel =$/;"	v
classarm__compute_1_1_c_l_activation_layer	documentation/classarm__compute_1_1_c_l_activation_layer.js	/^var classarm__compute_1_1_c_l_activation_layer =$/;"	v
classarm__compute_1_1_c_l_activation_layer_kernel	documentation/classarm__compute_1_1_c_l_activation_layer_kernel.js	/^var classarm__compute_1_1_c_l_activation_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_arithmetic_addition	documentation/classarm__compute_1_1_c_l_arithmetic_addition.js	/^var classarm__compute_1_1_c_l_arithmetic_addition =$/;"	v
classarm__compute_1_1_c_l_arithmetic_addition_kernel	documentation/classarm__compute_1_1_c_l_arithmetic_addition_kernel.js	/^var classarm__compute_1_1_c_l_arithmetic_addition_kernel =$/;"	v
classarm__compute_1_1_c_l_arithmetic_subtraction	documentation/classarm__compute_1_1_c_l_arithmetic_subtraction.js	/^var classarm__compute_1_1_c_l_arithmetic_subtraction =$/;"	v
classarm__compute_1_1_c_l_arithmetic_subtraction_kernel	documentation/classarm__compute_1_1_c_l_arithmetic_subtraction_kernel.js	/^var classarm__compute_1_1_c_l_arithmetic_subtraction_kernel =$/;"	v
classarm__compute_1_1_c_l_array	documentation/classarm__compute_1_1_c_l_array.js	/^var classarm__compute_1_1_c_l_array =$/;"	v
classarm__compute_1_1_c_l_batch_normalization_layer	documentation/classarm__compute_1_1_c_l_batch_normalization_layer.js	/^var classarm__compute_1_1_c_l_batch_normalization_layer =$/;"	v
classarm__compute_1_1_c_l_batch_normalization_layer_kernel	documentation/classarm__compute_1_1_c_l_batch_normalization_layer_kernel.js	/^var classarm__compute_1_1_c_l_batch_normalization_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_bitwise_and	documentation/classarm__compute_1_1_c_l_bitwise_and.js	/^var classarm__compute_1_1_c_l_bitwise_and =$/;"	v
classarm__compute_1_1_c_l_bitwise_and_kernel	documentation/classarm__compute_1_1_c_l_bitwise_and_kernel.js	/^var classarm__compute_1_1_c_l_bitwise_and_kernel =$/;"	v
classarm__compute_1_1_c_l_bitwise_not	documentation/classarm__compute_1_1_c_l_bitwise_not.js	/^var classarm__compute_1_1_c_l_bitwise_not =$/;"	v
classarm__compute_1_1_c_l_bitwise_not_kernel	documentation/classarm__compute_1_1_c_l_bitwise_not_kernel.js	/^var classarm__compute_1_1_c_l_bitwise_not_kernel =$/;"	v
classarm__compute_1_1_c_l_bitwise_or	documentation/classarm__compute_1_1_c_l_bitwise_or.js	/^var classarm__compute_1_1_c_l_bitwise_or =$/;"	v
classarm__compute_1_1_c_l_bitwise_or_kernel	documentation/classarm__compute_1_1_c_l_bitwise_or_kernel.js	/^var classarm__compute_1_1_c_l_bitwise_or_kernel =$/;"	v
classarm__compute_1_1_c_l_bitwise_xor	documentation/classarm__compute_1_1_c_l_bitwise_xor.js	/^var classarm__compute_1_1_c_l_bitwise_xor =$/;"	v
classarm__compute_1_1_c_l_bitwise_xor_kernel	documentation/classarm__compute_1_1_c_l_bitwise_xor_kernel.js	/^var classarm__compute_1_1_c_l_bitwise_xor_kernel =$/;"	v
classarm__compute_1_1_c_l_box3x3	documentation/classarm__compute_1_1_c_l_box3x3.js	/^var classarm__compute_1_1_c_l_box3x3 =$/;"	v
classarm__compute_1_1_c_l_box3x3_kernel	documentation/classarm__compute_1_1_c_l_box3x3_kernel.js	/^var classarm__compute_1_1_c_l_box3x3_kernel =$/;"	v
classarm__compute_1_1_c_l_buffer_allocator	documentation/classarm__compute_1_1_c_l_buffer_allocator.js	/^var classarm__compute_1_1_c_l_buffer_allocator =$/;"	v
classarm__compute_1_1_c_l_buffer_memory_region	documentation/classarm__compute_1_1_c_l_buffer_memory_region.js	/^var classarm__compute_1_1_c_l_buffer_memory_region =$/;"	v
classarm__compute_1_1_c_l_build_options	documentation/classarm__compute_1_1_c_l_build_options.js	/^var classarm__compute_1_1_c_l_build_options =$/;"	v
classarm__compute_1_1_c_l_build_options.xhtml#a58abf0792821f6f1d6271570aa27dd84	documentation/navtreeindex20.js	/^"classarm__compute_1_1_c_l_build_options.xhtml#a58abf0792821f6f1d6271570aa27dd84":[5,0,0,57,4],$/;"	p	class:NAVTREEINDEX20
classarm__compute_1_1_c_l_canny_edge	documentation/classarm__compute_1_1_c_l_canny_edge.js	/^var classarm__compute_1_1_c_l_canny_edge =$/;"	v
classarm__compute_1_1_c_l_channel_combine	documentation/classarm__compute_1_1_c_l_channel_combine.js	/^var classarm__compute_1_1_c_l_channel_combine =$/;"	v
classarm__compute_1_1_c_l_channel_combine_kernel	documentation/classarm__compute_1_1_c_l_channel_combine_kernel.js	/^var classarm__compute_1_1_c_l_channel_combine_kernel =$/;"	v
classarm__compute_1_1_c_l_channel_extract	documentation/classarm__compute_1_1_c_l_channel_extract.js	/^var classarm__compute_1_1_c_l_channel_extract =$/;"	v
classarm__compute_1_1_c_l_channel_extract_kernel	documentation/classarm__compute_1_1_c_l_channel_extract_kernel.js	/^var classarm__compute_1_1_c_l_channel_extract_kernel =$/;"	v
classarm__compute_1_1_c_l_channel_shuffle_layer	documentation/classarm__compute_1_1_c_l_channel_shuffle_layer.js	/^var classarm__compute_1_1_c_l_channel_shuffle_layer =$/;"	v
classarm__compute_1_1_c_l_channel_shuffle_layer_kernel	documentation/classarm__compute_1_1_c_l_channel_shuffle_layer_kernel.js	/^var classarm__compute_1_1_c_l_channel_shuffle_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_coarse_s_v_m_memory_region	documentation/classarm__compute_1_1_c_l_coarse_s_v_m_memory_region.js	/^var classarm__compute_1_1_c_l_coarse_s_v_m_memory_region =$/;"	v
classarm__compute_1_1_c_l_col2_im_kernel	documentation/classarm__compute_1_1_c_l_col2_im_kernel.js	/^var classarm__compute_1_1_c_l_col2_im_kernel =$/;"	v
classarm__compute_1_1_c_l_color_convert	documentation/classarm__compute_1_1_c_l_color_convert.js	/^var classarm__compute_1_1_c_l_color_convert =$/;"	v
classarm__compute_1_1_c_l_color_convert_kernel	documentation/classarm__compute_1_1_c_l_color_convert_kernel.js	/^var classarm__compute_1_1_c_l_color_convert_kernel =$/;"	v
classarm__compute_1_1_c_l_convert_fully_connected_weights	documentation/classarm__compute_1_1_c_l_convert_fully_connected_weights.js	/^var classarm__compute_1_1_c_l_convert_fully_connected_weights =$/;"	v
classarm__compute_1_1_c_l_convert_fully_connected_weights_kernel	documentation/classarm__compute_1_1_c_l_convert_fully_connected_weights_kernel.js	/^var classarm__compute_1_1_c_l_convert_fully_connected_weights_kernel =$/;"	v
classarm__compute_1_1_c_l_convolution3x3	documentation/classarm__compute_1_1_c_l_convolution3x3.js	/^var classarm__compute_1_1_c_l_convolution3x3 =$/;"	v
classarm__compute_1_1_c_l_convolution_kernel	documentation/classarm__compute_1_1_c_l_convolution_kernel.js	/^var classarm__compute_1_1_c_l_convolution_kernel =$/;"	v
classarm__compute_1_1_c_l_convolution_layer	documentation/classarm__compute_1_1_c_l_convolution_layer.js	/^var classarm__compute_1_1_c_l_convolution_layer =$/;"	v
classarm__compute_1_1_c_l_convolution_layer_reshape_weights	documentation/classarm__compute_1_1_c_l_convolution_layer_reshape_weights.js	/^var classarm__compute_1_1_c_l_convolution_layer_reshape_weights =$/;"	v
classarm__compute_1_1_c_l_convolution_rectangle	documentation/classarm__compute_1_1_c_l_convolution_rectangle.js	/^var classarm__compute_1_1_c_l_convolution_rectangle =$/;"	v
classarm__compute_1_1_c_l_convolution_rectangle_kernel	documentation/classarm__compute_1_1_c_l_convolution_rectangle_kernel.js	/^var classarm__compute_1_1_c_l_convolution_rectangle_kernel =$/;"	v
classarm__compute_1_1_c_l_convolution_square	documentation/classarm__compute_1_1_c_l_convolution_square.js	/^var classarm__compute_1_1_c_l_convolution_square =$/;"	v
classarm__compute_1_1_c_l_copy	documentation/classarm__compute_1_1_c_l_copy.js	/^var classarm__compute_1_1_c_l_copy =$/;"	v
classarm__compute_1_1_c_l_copy_kernel	documentation/classarm__compute_1_1_c_l_copy_kernel.js	/^var classarm__compute_1_1_c_l_copy_kernel =$/;"	v
classarm__compute_1_1_c_l_copy_to_array_kernel	documentation/classarm__compute_1_1_c_l_copy_to_array_kernel.js	/^var classarm__compute_1_1_c_l_copy_to_array_kernel =$/;"	v
classarm__compute_1_1_c_l_deconvolution_layer	documentation/classarm__compute_1_1_c_l_deconvolution_layer.js	/^var classarm__compute_1_1_c_l_deconvolution_layer =$/;"	v
classarm__compute_1_1_c_l_deconvolution_layer_upsample	documentation/classarm__compute_1_1_c_l_deconvolution_layer_upsample.js	/^var classarm__compute_1_1_c_l_deconvolution_layer_upsample =$/;"	v
classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel	documentation/classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel.js	/^var classarm__compute_1_1_c_l_deconvolution_layer_upsample_kernel =$/;"	v
classarm__compute_1_1_c_l_depth_concatenate_layer	documentation/classarm__compute_1_1_c_l_depth_concatenate_layer.js	/^var classarm__compute_1_1_c_l_depth_concatenate_layer =$/;"	v
classarm__compute_1_1_c_l_depth_concatenate_layer_kernel	documentation/classarm__compute_1_1_c_l_depth_concatenate_layer_kernel.js	/^var classarm__compute_1_1_c_l_depth_concatenate_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_depth_convert_layer	documentation/classarm__compute_1_1_c_l_depth_convert_layer.js	/^var classarm__compute_1_1_c_l_depth_convert_layer =$/;"	v
classarm__compute_1_1_c_l_depth_convert_layer_kernel	documentation/classarm__compute_1_1_c_l_depth_convert_layer_kernel.js	/^var classarm__compute_1_1_c_l_depth_convert_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_depthwise_convolution_layer	documentation/classarm__compute_1_1_c_l_depthwise_convolution_layer.js	/^var classarm__compute_1_1_c_l_depthwise_convolution_layer =$/;"	v
classarm__compute_1_1_c_l_depthwise_convolution_layer3x3	documentation/classarm__compute_1_1_c_l_depthwise_convolution_layer3x3.js	/^var classarm__compute_1_1_c_l_depthwise_convolution_layer3x3 =$/;"	v
classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel	documentation/classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel.js	/^var classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_c_h_w_kernel =$/;"	v
classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel	documentation/classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel.js	/^var classarm__compute_1_1_c_l_depthwise_convolution_layer3x3_n_h_w_c_kernel =$/;"	v
classarm__compute_1_1_c_l_depthwise_im2_col_kernel	documentation/classarm__compute_1_1_c_l_depthwise_im2_col_kernel.js	/^var classarm__compute_1_1_c_l_depthwise_im2_col_kernel =$/;"	v
classarm__compute_1_1_c_l_depthwise_separable_convolution_layer	documentation/classarm__compute_1_1_c_l_depthwise_separable_convolution_layer.js	/^var classarm__compute_1_1_c_l_depthwise_separable_convolution_layer =$/;"	v
classarm__compute_1_1_c_l_depthwise_vector_to_tensor_kernel	documentation/classarm__compute_1_1_c_l_depthwise_vector_to_tensor_kernel.js	/^var classarm__compute_1_1_c_l_depthwise_vector_to_tensor_kernel =$/;"	v
classarm__compute_1_1_c_l_depthwise_weights_reshape_kernel	documentation/classarm__compute_1_1_c_l_depthwise_weights_reshape_kernel.js	/^var classarm__compute_1_1_c_l_depthwise_weights_reshape_kernel =$/;"	v
classarm__compute_1_1_c_l_dequantization_layer	documentation/classarm__compute_1_1_c_l_dequantization_layer.js	/^var classarm__compute_1_1_c_l_dequantization_layer =$/;"	v
classarm__compute_1_1_c_l_dequantization_layer_kernel	documentation/classarm__compute_1_1_c_l_dequantization_layer_kernel.js	/^var classarm__compute_1_1_c_l_dequantization_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_derivative	documentation/classarm__compute_1_1_c_l_derivative.js	/^var classarm__compute_1_1_c_l_derivative =$/;"	v
classarm__compute_1_1_c_l_derivative_kernel	documentation/classarm__compute_1_1_c_l_derivative_kernel.js	/^var classarm__compute_1_1_c_l_derivative_kernel =$/;"	v
classarm__compute_1_1_c_l_derivative_kernel.xhtml#ac3a2c95536dfbe4ea71e3c1441cd2960	documentation/navtreeindex21.js	/^"classarm__compute_1_1_c_l_derivative_kernel.xhtml#ac3a2c95536dfbe4ea71e3c1441cd2960":[5,0,0,100,2],$/;"	p	class:NAVTREEINDEX21
classarm__compute_1_1_c_l_dilate	documentation/classarm__compute_1_1_c_l_dilate.js	/^var classarm__compute_1_1_c_l_dilate =$/;"	v
classarm__compute_1_1_c_l_dilate_kernel	documentation/classarm__compute_1_1_c_l_dilate_kernel.js	/^var classarm__compute_1_1_c_l_dilate_kernel =$/;"	v
classarm__compute_1_1_c_l_direct_convolution_layer	documentation/classarm__compute_1_1_c_l_direct_convolution_layer.js	/^var classarm__compute_1_1_c_l_direct_convolution_layer =$/;"	v
classarm__compute_1_1_c_l_direct_convolution_layer_kernel	documentation/classarm__compute_1_1_c_l_direct_convolution_layer_kernel.js	/^var classarm__compute_1_1_c_l_direct_convolution_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_direct_convolution_layer_output_stage_kernel	documentation/classarm__compute_1_1_c_l_direct_convolution_layer_output_stage_kernel.js	/^var classarm__compute_1_1_c_l_direct_convolution_layer_output_stage_kernel =$/;"	v
classarm__compute_1_1_c_l_distribution1_d	documentation/classarm__compute_1_1_c_l_distribution1_d.js	/^var classarm__compute_1_1_c_l_distribution1_d =$/;"	v
classarm__compute_1_1_c_l_edge_non_max_suppression_kernel	documentation/classarm__compute_1_1_c_l_edge_non_max_suppression_kernel.js	/^var classarm__compute_1_1_c_l_edge_non_max_suppression_kernel =$/;"	v
classarm__compute_1_1_c_l_edge_trace_kernel	documentation/classarm__compute_1_1_c_l_edge_trace_kernel.js	/^var classarm__compute_1_1_c_l_edge_trace_kernel =$/;"	v
classarm__compute_1_1_c_l_equalize_histogram	documentation/classarm__compute_1_1_c_l_equalize_histogram.js	/^var classarm__compute_1_1_c_l_equalize_histogram =$/;"	v
classarm__compute_1_1_c_l_erode	documentation/classarm__compute_1_1_c_l_erode.js	/^var classarm__compute_1_1_c_l_erode =$/;"	v
classarm__compute_1_1_c_l_erode_kernel	documentation/classarm__compute_1_1_c_l_erode_kernel.js	/^var classarm__compute_1_1_c_l_erode_kernel =$/;"	v
classarm__compute_1_1_c_l_fast_corners	documentation/classarm__compute_1_1_c_l_fast_corners.js	/^var classarm__compute_1_1_c_l_fast_corners =$/;"	v
classarm__compute_1_1_c_l_fast_corners_kernel	documentation/classarm__compute_1_1_c_l_fast_corners_kernel.js	/^var classarm__compute_1_1_c_l_fast_corners_kernel =$/;"	v
classarm__compute_1_1_c_l_fill_border	documentation/classarm__compute_1_1_c_l_fill_border.js	/^var classarm__compute_1_1_c_l_fill_border =$/;"	v
classarm__compute_1_1_c_l_fill_border_kernel	documentation/classarm__compute_1_1_c_l_fill_border_kernel.js	/^var classarm__compute_1_1_c_l_fill_border_kernel =$/;"	v
classarm__compute_1_1_c_l_fine_s_v_m_memory_region	documentation/classarm__compute_1_1_c_l_fine_s_v_m_memory_region.js	/^var classarm__compute_1_1_c_l_fine_s_v_m_memory_region =$/;"	v
classarm__compute_1_1_c_l_flatten_layer	documentation/classarm__compute_1_1_c_l_flatten_layer.js	/^var classarm__compute_1_1_c_l_flatten_layer =$/;"	v
classarm__compute_1_1_c_l_floor	documentation/classarm__compute_1_1_c_l_floor.js	/^var classarm__compute_1_1_c_l_floor =$/;"	v
classarm__compute_1_1_c_l_floor_kernel	documentation/classarm__compute_1_1_c_l_floor_kernel.js	/^var classarm__compute_1_1_c_l_floor_kernel =$/;"	v
classarm__compute_1_1_c_l_fully_connected_layer	documentation/classarm__compute_1_1_c_l_fully_connected_layer.js	/^var classarm__compute_1_1_c_l_fully_connected_layer =$/;"	v
classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights	documentation/classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights.js	/^var classarm__compute_1_1_c_l_fully_connected_layer_reshape_weights =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m	documentation/classarm__compute_1_1_c_l_g_e_m_m.js	/^var classarm__compute_1_1_c_l_g_e_m_m =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_convolution_layer	documentation/classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.js	/^var classarm__compute_1_1_c_l_g_e_m_m_convolution_layer =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_interleave4x4	documentation/classarm__compute_1_1_c_l_g_e_m_m_interleave4x4.js	/^var classarm__compute_1_1_c_l_g_e_m_m_interleave4x4 =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_interleave4x4_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_interleave4x4_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_interleave4x4_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_a_reduction_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_b_reduction_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_b_reduction_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_b_reduction_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_offset_contribution_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_offset_contribution_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_offset_contribution_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_matrix_accumulate_biases_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_matrix_accumulate_biases_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_matrix_accumulate_biases_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_matrix_vector_multiply_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_matrix_vector_multiply_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_matrix_vector_multiply_kernel =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w	documentation/classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w.js	/^var classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w =$/;"	v
classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w_kernel	documentation/classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w_kernel.js	/^var classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w_kernel =$/;"	v
classarm__compute_1_1_c_l_gaussian3x3	documentation/classarm__compute_1_1_c_l_gaussian3x3.js	/^var classarm__compute_1_1_c_l_gaussian3x3 =$/;"	v
classarm__compute_1_1_c_l_gaussian3x3_kernel	documentation/classarm__compute_1_1_c_l_gaussian3x3_kernel.js	/^var classarm__compute_1_1_c_l_gaussian3x3_kernel =$/;"	v
classarm__compute_1_1_c_l_gaussian5x5	documentation/classarm__compute_1_1_c_l_gaussian5x5.js	/^var classarm__compute_1_1_c_l_gaussian5x5 =$/;"	v
classarm__compute_1_1_c_l_gaussian5x5_hor_kernel	documentation/classarm__compute_1_1_c_l_gaussian5x5_hor_kernel.js	/^var classarm__compute_1_1_c_l_gaussian5x5_hor_kernel =$/;"	v
classarm__compute_1_1_c_l_gaussian5x5_vert_kernel	documentation/classarm__compute_1_1_c_l_gaussian5x5_vert_kernel.js	/^var classarm__compute_1_1_c_l_gaussian5x5_vert_kernel =$/;"	v
classarm__compute_1_1_c_l_gaussian_pyramid	documentation/classarm__compute_1_1_c_l_gaussian_pyramid.js	/^var classarm__compute_1_1_c_l_gaussian_pyramid =$/;"	v
classarm__compute_1_1_c_l_gaussian_pyramid.xhtml#a8c57d617c3dd6f7c04c77231dc5928f0	documentation/navtreeindex22.js	/^"classarm__compute_1_1_c_l_gaussian_pyramid.xhtml#a8c57d617c3dd6f7c04c77231dc5928f0":[5,0,0,128,2],$/;"	p	class:NAVTREEINDEX22
classarm__compute_1_1_c_l_gaussian_pyramid_half	documentation/classarm__compute_1_1_c_l_gaussian_pyramid_half.js	/^var classarm__compute_1_1_c_l_gaussian_pyramid_half =$/;"	v
classarm__compute_1_1_c_l_gaussian_pyramid_hor_kernel	documentation/classarm__compute_1_1_c_l_gaussian_pyramid_hor_kernel.js	/^var classarm__compute_1_1_c_l_gaussian_pyramid_hor_kernel =$/;"	v
classarm__compute_1_1_c_l_gaussian_pyramid_orb	documentation/classarm__compute_1_1_c_l_gaussian_pyramid_orb.js	/^var classarm__compute_1_1_c_l_gaussian_pyramid_orb =$/;"	v
classarm__compute_1_1_c_l_gaussian_pyramid_vert_kernel	documentation/classarm__compute_1_1_c_l_gaussian_pyramid_vert_kernel.js	/^var classarm__compute_1_1_c_l_gaussian_pyramid_vert_kernel =$/;"	v
classarm__compute_1_1_c_l_gradient_kernel	documentation/classarm__compute_1_1_c_l_gradient_kernel.js	/^var classarm__compute_1_1_c_l_gradient_kernel =$/;"	v
classarm__compute_1_1_c_l_h_o_g	documentation/classarm__compute_1_1_c_l_h_o_g.js	/^var classarm__compute_1_1_c_l_h_o_g =$/;"	v
classarm__compute_1_1_c_l_h_o_g_block_normalization_kernel	documentation/classarm__compute_1_1_c_l_h_o_g_block_normalization_kernel.js	/^var classarm__compute_1_1_c_l_h_o_g_block_normalization_kernel =$/;"	v
classarm__compute_1_1_c_l_h_o_g_descriptor	documentation/classarm__compute_1_1_c_l_h_o_g_descriptor.js	/^var classarm__compute_1_1_c_l_h_o_g_descriptor =$/;"	v
classarm__compute_1_1_c_l_h_o_g_detector	documentation/classarm__compute_1_1_c_l_h_o_g_detector.js	/^var classarm__compute_1_1_c_l_h_o_g_detector =$/;"	v
classarm__compute_1_1_c_l_h_o_g_detector_kernel	documentation/classarm__compute_1_1_c_l_h_o_g_detector_kernel.js	/^var classarm__compute_1_1_c_l_h_o_g_detector_kernel =$/;"	v
classarm__compute_1_1_c_l_h_o_g_gradient	documentation/classarm__compute_1_1_c_l_h_o_g_gradient.js	/^var classarm__compute_1_1_c_l_h_o_g_gradient =$/;"	v
classarm__compute_1_1_c_l_h_o_g_multi_detection	documentation/classarm__compute_1_1_c_l_h_o_g_multi_detection.js	/^var classarm__compute_1_1_c_l_h_o_g_multi_detection =$/;"	v
classarm__compute_1_1_c_l_h_o_g_orientation_binning_kernel	documentation/classarm__compute_1_1_c_l_h_o_g_orientation_binning_kernel.js	/^var classarm__compute_1_1_c_l_h_o_g_orientation_binning_kernel =$/;"	v
classarm__compute_1_1_c_l_harris_corners	documentation/classarm__compute_1_1_c_l_harris_corners.js	/^var classarm__compute_1_1_c_l_harris_corners =$/;"	v
classarm__compute_1_1_c_l_harris_score_kernel	documentation/classarm__compute_1_1_c_l_harris_score_kernel.js	/^var classarm__compute_1_1_c_l_harris_score_kernel =$/;"	v
classarm__compute_1_1_c_l_histogram	documentation/classarm__compute_1_1_c_l_histogram.js	/^var classarm__compute_1_1_c_l_histogram =$/;"	v
classarm__compute_1_1_c_l_histogram_border_kernel	documentation/classarm__compute_1_1_c_l_histogram_border_kernel.js	/^var classarm__compute_1_1_c_l_histogram_border_kernel =$/;"	v
classarm__compute_1_1_c_l_histogram_kernel	documentation/classarm__compute_1_1_c_l_histogram_kernel.js	/^var classarm__compute_1_1_c_l_histogram_kernel =$/;"	v
classarm__compute_1_1_c_l_im2_col_kernel	documentation/classarm__compute_1_1_c_l_im2_col_kernel.js	/^var classarm__compute_1_1_c_l_im2_col_kernel =$/;"	v
classarm__compute_1_1_c_l_integral_image	documentation/classarm__compute_1_1_c_l_integral_image.js	/^var classarm__compute_1_1_c_l_integral_image =$/;"	v
classarm__compute_1_1_c_l_integral_image_hor_kernel	documentation/classarm__compute_1_1_c_l_integral_image_hor_kernel.js	/^var classarm__compute_1_1_c_l_integral_image_hor_kernel =$/;"	v
classarm__compute_1_1_c_l_integral_image_vert_kernel	documentation/classarm__compute_1_1_c_l_integral_image_vert_kernel.js	/^var classarm__compute_1_1_c_l_integral_image_vert_kernel =$/;"	v
classarm__compute_1_1_c_l_kernel_library	documentation/classarm__compute_1_1_c_l_kernel_library.js	/^var classarm__compute_1_1_c_l_kernel_library =$/;"	v
classarm__compute_1_1_c_l_l2_normalize_layer	documentation/classarm__compute_1_1_c_l_l2_normalize_layer.js	/^var classarm__compute_1_1_c_l_l2_normalize_layer =$/;"	v
classarm__compute_1_1_c_l_l2_normalize_layer_kernel	documentation/classarm__compute_1_1_c_l_l2_normalize_layer_kernel.js	/^var classarm__compute_1_1_c_l_l2_normalize_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_l_k_tracker_finalize_kernel	documentation/classarm__compute_1_1_c_l_l_k_tracker_finalize_kernel.js	/^var classarm__compute_1_1_c_l_l_k_tracker_finalize_kernel =$/;"	v
classarm__compute_1_1_c_l_l_k_tracker_init_kernel	documentation/classarm__compute_1_1_c_l_l_k_tracker_init_kernel.js	/^var classarm__compute_1_1_c_l_l_k_tracker_init_kernel =$/;"	v
classarm__compute_1_1_c_l_l_k_tracker_stage0_kernel	documentation/classarm__compute_1_1_c_l_l_k_tracker_stage0_kernel.js	/^var classarm__compute_1_1_c_l_l_k_tracker_stage0_kernel =$/;"	v
classarm__compute_1_1_c_l_l_k_tracker_stage1_kernel	documentation/classarm__compute_1_1_c_l_l_k_tracker_stage1_kernel.js	/^var classarm__compute_1_1_c_l_l_k_tracker_stage1_kernel =$/;"	v
classarm__compute_1_1_c_l_l_s_t_m_layer	documentation/classarm__compute_1_1_c_l_l_s_t_m_layer.js	/^var classarm__compute_1_1_c_l_l_s_t_m_layer =$/;"	v
classarm__compute_1_1_c_l_laplacian_pyramid	documentation/classarm__compute_1_1_c_l_laplacian_pyramid.js	/^var classarm__compute_1_1_c_l_laplacian_pyramid =$/;"	v
classarm__compute_1_1_c_l_laplacian_reconstruct	documentation/classarm__compute_1_1_c_l_laplacian_reconstruct.js	/^var classarm__compute_1_1_c_l_laplacian_reconstruct =$/;"	v
classarm__compute_1_1_c_l_locally_connected_layer	documentation/classarm__compute_1_1_c_l_locally_connected_layer.js	/^var classarm__compute_1_1_c_l_locally_connected_layer =$/;"	v
classarm__compute_1_1_c_l_locally_connected_matrix_multiply_kernel	documentation/classarm__compute_1_1_c_l_locally_connected_matrix_multiply_kernel.js	/^var classarm__compute_1_1_c_l_locally_connected_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_c_l_logits1_d_max_kernel	documentation/classarm__compute_1_1_c_l_logits1_d_max_kernel.js	/^var classarm__compute_1_1_c_l_logits1_d_max_kernel =$/;"	v
classarm__compute_1_1_c_l_logits1_d_max_shift_exp_sum_kernel	documentation/classarm__compute_1_1_c_l_logits1_d_max_shift_exp_sum_kernel.js	/^var classarm__compute_1_1_c_l_logits1_d_max_shift_exp_sum_kernel =$/;"	v
classarm__compute_1_1_c_l_logits1_d_norm_kernel	documentation/classarm__compute_1_1_c_l_logits1_d_norm_kernel.js	/^var classarm__compute_1_1_c_l_logits1_d_norm_kernel =$/;"	v
classarm__compute_1_1_c_l_logits1_d_norm_kernel.xhtml#a19373a3162839643484511cec353d34b	documentation/navtreeindex23.js	/^"classarm__compute_1_1_c_l_logits1_d_norm_kernel.xhtml#a19373a3162839643484511cec353d34b":[5,0,0,184,2],$/;"	p	class:NAVTREEINDEX23
classarm__compute_1_1_c_l_logits1_d_shift_exp_sum_kernel	documentation/classarm__compute_1_1_c_l_logits1_d_shift_exp_sum_kernel.js	/^var classarm__compute_1_1_c_l_logits1_d_shift_exp_sum_kernel =$/;"	v
classarm__compute_1_1_c_l_lut	documentation/classarm__compute_1_1_c_l_lut.js	/^var classarm__compute_1_1_c_l_lut =$/;"	v
classarm__compute_1_1_c_l_lut_allocator	documentation/classarm__compute_1_1_c_l_lut_allocator.js	/^var classarm__compute_1_1_c_l_lut_allocator =$/;"	v
classarm__compute_1_1_c_l_magnitude	documentation/classarm__compute_1_1_c_l_magnitude.js	/^var classarm__compute_1_1_c_l_magnitude =$/;"	v
classarm__compute_1_1_c_l_magnitude_phase_kernel	documentation/classarm__compute_1_1_c_l_magnitude_phase_kernel.js	/^var classarm__compute_1_1_c_l_magnitude_phase_kernel =$/;"	v
classarm__compute_1_1_c_l_mean_std_dev	documentation/classarm__compute_1_1_c_l_mean_std_dev.js	/^var classarm__compute_1_1_c_l_mean_std_dev =$/;"	v
classarm__compute_1_1_c_l_mean_std_dev_kernel	documentation/classarm__compute_1_1_c_l_mean_std_dev_kernel.js	/^var classarm__compute_1_1_c_l_mean_std_dev_kernel =$/;"	v
classarm__compute_1_1_c_l_median3x3	documentation/classarm__compute_1_1_c_l_median3x3.js	/^var classarm__compute_1_1_c_l_median3x3 =$/;"	v
classarm__compute_1_1_c_l_median3x3_kernel	documentation/classarm__compute_1_1_c_l_median3x3_kernel.js	/^var classarm__compute_1_1_c_l_median3x3_kernel =$/;"	v
classarm__compute_1_1_c_l_memory	documentation/classarm__compute_1_1_c_l_memory.js	/^var classarm__compute_1_1_c_l_memory =$/;"	v
classarm__compute_1_1_c_l_min_max_kernel	documentation/classarm__compute_1_1_c_l_min_max_kernel.js	/^var classarm__compute_1_1_c_l_min_max_kernel =$/;"	v
classarm__compute_1_1_c_l_min_max_layer_kernel	documentation/classarm__compute_1_1_c_l_min_max_layer_kernel.js	/^var classarm__compute_1_1_c_l_min_max_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_min_max_location	documentation/classarm__compute_1_1_c_l_min_max_location.js	/^var classarm__compute_1_1_c_l_min_max_location =$/;"	v
classarm__compute_1_1_c_l_min_max_location_kernel	documentation/classarm__compute_1_1_c_l_min_max_location_kernel.js	/^var classarm__compute_1_1_c_l_min_max_location_kernel =$/;"	v
classarm__compute_1_1_c_l_multi_h_o_g	documentation/classarm__compute_1_1_c_l_multi_h_o_g.js	/^var classarm__compute_1_1_c_l_multi_h_o_g =$/;"	v
classarm__compute_1_1_c_l_multi_image	documentation/classarm__compute_1_1_c_l_multi_image.js	/^var classarm__compute_1_1_c_l_multi_image =$/;"	v
classarm__compute_1_1_c_l_non_linear_filter	documentation/classarm__compute_1_1_c_l_non_linear_filter.js	/^var classarm__compute_1_1_c_l_non_linear_filter =$/;"	v
classarm__compute_1_1_c_l_non_linear_filter_kernel	documentation/classarm__compute_1_1_c_l_non_linear_filter_kernel.js	/^var classarm__compute_1_1_c_l_non_linear_filter_kernel =$/;"	v
classarm__compute_1_1_c_l_non_maxima_suppression3x3	documentation/classarm__compute_1_1_c_l_non_maxima_suppression3x3.js	/^var classarm__compute_1_1_c_l_non_maxima_suppression3x3 =$/;"	v
classarm__compute_1_1_c_l_non_maxima_suppression3x3_kernel	documentation/classarm__compute_1_1_c_l_non_maxima_suppression3x3_kernel.js	/^var classarm__compute_1_1_c_l_non_maxima_suppression3x3_kernel =$/;"	v
classarm__compute_1_1_c_l_normalization_layer	documentation/classarm__compute_1_1_c_l_normalization_layer.js	/^var classarm__compute_1_1_c_l_normalization_layer =$/;"	v
classarm__compute_1_1_c_l_normalization_layer_kernel	documentation/classarm__compute_1_1_c_l_normalization_layer_kernel.js	/^var classarm__compute_1_1_c_l_normalization_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_optical_flow	documentation/classarm__compute_1_1_c_l_optical_flow.js	/^var classarm__compute_1_1_c_l_optical_flow =$/;"	v
classarm__compute_1_1_c_l_permute	documentation/classarm__compute_1_1_c_l_permute.js	/^var classarm__compute_1_1_c_l_permute =$/;"	v
classarm__compute_1_1_c_l_permute_kernel	documentation/classarm__compute_1_1_c_l_permute_kernel.js	/^var classarm__compute_1_1_c_l_permute_kernel =$/;"	v
classarm__compute_1_1_c_l_phase	documentation/classarm__compute_1_1_c_l_phase.js	/^var classarm__compute_1_1_c_l_phase =$/;"	v
classarm__compute_1_1_c_l_pixel_wise_multiplication	documentation/classarm__compute_1_1_c_l_pixel_wise_multiplication.js	/^var classarm__compute_1_1_c_l_pixel_wise_multiplication =$/;"	v
classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel	documentation/classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.js	/^var classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel =$/;"	v
classarm__compute_1_1_c_l_pooling_layer	documentation/classarm__compute_1_1_c_l_pooling_layer.js	/^var classarm__compute_1_1_c_l_pooling_layer =$/;"	v
classarm__compute_1_1_c_l_pooling_layer_kernel	documentation/classarm__compute_1_1_c_l_pooling_layer_kernel.js	/^var classarm__compute_1_1_c_l_pooling_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_pyramid	documentation/classarm__compute_1_1_c_l_pyramid.js	/^var classarm__compute_1_1_c_l_pyramid =$/;"	v
classarm__compute_1_1_c_l_quantization_layer	documentation/classarm__compute_1_1_c_l_quantization_layer.js	/^var classarm__compute_1_1_c_l_quantization_layer =$/;"	v
classarm__compute_1_1_c_l_quantization_layer_kernel	documentation/classarm__compute_1_1_c_l_quantization_layer_kernel.js	/^var classarm__compute_1_1_c_l_quantization_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_r_n_n_layer	documentation/classarm__compute_1_1_c_l_r_n_n_layer.js	/^var classarm__compute_1_1_c_l_r_n_n_layer =$/;"	v
classarm__compute_1_1_c_l_r_o_i_pooling_layer	documentation/classarm__compute_1_1_c_l_r_o_i_pooling_layer.js	/^var classarm__compute_1_1_c_l_r_o_i_pooling_layer =$/;"	v
classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel	documentation/classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel.js	/^var classarm__compute_1_1_c_l_r_o_i_pooling_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_reduction_operation	documentation/classarm__compute_1_1_c_l_reduction_operation.js	/^var classarm__compute_1_1_c_l_reduction_operation =$/;"	v
classarm__compute_1_1_c_l_reduction_operation_kernel	documentation/classarm__compute_1_1_c_l_reduction_operation_kernel.js	/^var classarm__compute_1_1_c_l_reduction_operation_kernel =$/;"	v
classarm__compute_1_1_c_l_remap	documentation/classarm__compute_1_1_c_l_remap.js	/^var classarm__compute_1_1_c_l_remap =$/;"	v
classarm__compute_1_1_c_l_remap_kernel	documentation/classarm__compute_1_1_c_l_remap_kernel.js	/^var classarm__compute_1_1_c_l_remap_kernel =$/;"	v
classarm__compute_1_1_c_l_reshape_layer	documentation/classarm__compute_1_1_c_l_reshape_layer.js	/^var classarm__compute_1_1_c_l_reshape_layer =$/;"	v
classarm__compute_1_1_c_l_reshape_layer_kernel	documentation/classarm__compute_1_1_c_l_reshape_layer_kernel.js	/^var classarm__compute_1_1_c_l_reshape_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_reshape_layer_kernel.xhtml#a074e10cfb217e657b9e81adeca2abc68	documentation/navtreeindex24.js	/^"classarm__compute_1_1_c_l_reshape_layer_kernel.xhtml#a074e10cfb217e657b9e81adeca2abc68":[5,0,0,225,4],$/;"	p	class:NAVTREEINDEX24
classarm__compute_1_1_c_l_scale	documentation/classarm__compute_1_1_c_l_scale.js	/^var classarm__compute_1_1_c_l_scale =$/;"	v
classarm__compute_1_1_c_l_scale_kernel	documentation/classarm__compute_1_1_c_l_scale_kernel.js	/^var classarm__compute_1_1_c_l_scale_kernel =$/;"	v
classarm__compute_1_1_c_l_scharr3x3	documentation/classarm__compute_1_1_c_l_scharr3x3.js	/^var classarm__compute_1_1_c_l_scharr3x3 =$/;"	v
classarm__compute_1_1_c_l_scharr3x3_kernel	documentation/classarm__compute_1_1_c_l_scharr3x3_kernel.js	/^var classarm__compute_1_1_c_l_scharr3x3_kernel =$/;"	v
classarm__compute_1_1_c_l_scheduler	documentation/classarm__compute_1_1_c_l_scheduler.js	/^var classarm__compute_1_1_c_l_scheduler =$/;"	v
classarm__compute_1_1_c_l_separable_convolution_hor_kernel	documentation/classarm__compute_1_1_c_l_separable_convolution_hor_kernel.js	/^var classarm__compute_1_1_c_l_separable_convolution_hor_kernel =$/;"	v
classarm__compute_1_1_c_l_separable_convolution_vert_kernel	documentation/classarm__compute_1_1_c_l_separable_convolution_vert_kernel.js	/^var classarm__compute_1_1_c_l_separable_convolution_vert_kernel =$/;"	v
classarm__compute_1_1_c_l_sobel3x3	documentation/classarm__compute_1_1_c_l_sobel3x3.js	/^var classarm__compute_1_1_c_l_sobel3x3 =$/;"	v
classarm__compute_1_1_c_l_sobel3x3_kernel	documentation/classarm__compute_1_1_c_l_sobel3x3_kernel.js	/^var classarm__compute_1_1_c_l_sobel3x3_kernel =$/;"	v
classarm__compute_1_1_c_l_sobel5x5	documentation/classarm__compute_1_1_c_l_sobel5x5.js	/^var classarm__compute_1_1_c_l_sobel5x5 =$/;"	v
classarm__compute_1_1_c_l_sobel5x5_hor_kernel	documentation/classarm__compute_1_1_c_l_sobel5x5_hor_kernel.js	/^var classarm__compute_1_1_c_l_sobel5x5_hor_kernel =$/;"	v
classarm__compute_1_1_c_l_sobel5x5_vert_kernel	documentation/classarm__compute_1_1_c_l_sobel5x5_vert_kernel.js	/^var classarm__compute_1_1_c_l_sobel5x5_vert_kernel =$/;"	v
classarm__compute_1_1_c_l_sobel7x7	documentation/classarm__compute_1_1_c_l_sobel7x7.js	/^var classarm__compute_1_1_c_l_sobel7x7 =$/;"	v
classarm__compute_1_1_c_l_sobel7x7_hor_kernel	documentation/classarm__compute_1_1_c_l_sobel7x7_hor_kernel.js	/^var classarm__compute_1_1_c_l_sobel7x7_hor_kernel =$/;"	v
classarm__compute_1_1_c_l_sobel7x7_vert_kernel	documentation/classarm__compute_1_1_c_l_sobel7x7_vert_kernel.js	/^var classarm__compute_1_1_c_l_sobel7x7_vert_kernel =$/;"	v
classarm__compute_1_1_c_l_softmax_layer	documentation/classarm__compute_1_1_c_l_softmax_layer.js	/^var classarm__compute_1_1_c_l_softmax_layer =$/;"	v
classarm__compute_1_1_c_l_sub_tensor	documentation/classarm__compute_1_1_c_l_sub_tensor.js	/^var classarm__compute_1_1_c_l_sub_tensor =$/;"	v
classarm__compute_1_1_c_l_symbols	documentation/classarm__compute_1_1_c_l_symbols.js	/^var classarm__compute_1_1_c_l_symbols =$/;"	v
classarm__compute_1_1_c_l_table_lookup	documentation/classarm__compute_1_1_c_l_table_lookup.js	/^var classarm__compute_1_1_c_l_table_lookup =$/;"	v
classarm__compute_1_1_c_l_table_lookup_kernel	documentation/classarm__compute_1_1_c_l_table_lookup_kernel.js	/^var classarm__compute_1_1_c_l_table_lookup_kernel =$/;"	v
classarm__compute_1_1_c_l_tensor	documentation/classarm__compute_1_1_c_l_tensor.js	/^var classarm__compute_1_1_c_l_tensor =$/;"	v
classarm__compute_1_1_c_l_tensor_allocator	documentation/classarm__compute_1_1_c_l_tensor_allocator.js	/^var classarm__compute_1_1_c_l_tensor_allocator =$/;"	v
classarm__compute_1_1_c_l_threshold	documentation/classarm__compute_1_1_c_l_threshold.js	/^var classarm__compute_1_1_c_l_threshold =$/;"	v
classarm__compute_1_1_c_l_threshold_kernel	documentation/classarm__compute_1_1_c_l_threshold_kernel.js	/^var classarm__compute_1_1_c_l_threshold_kernel =$/;"	v
classarm__compute_1_1_c_l_transpose	documentation/classarm__compute_1_1_c_l_transpose.js	/^var classarm__compute_1_1_c_l_transpose =$/;"	v
classarm__compute_1_1_c_l_transpose_kernel	documentation/classarm__compute_1_1_c_l_transpose_kernel.js	/^var classarm__compute_1_1_c_l_transpose_kernel =$/;"	v
classarm__compute_1_1_c_l_tuner	documentation/classarm__compute_1_1_c_l_tuner.js	/^var classarm__compute_1_1_c_l_tuner =$/;"	v
classarm__compute_1_1_c_l_warp_affine	documentation/classarm__compute_1_1_c_l_warp_affine.js	/^var classarm__compute_1_1_c_l_warp_affine =$/;"	v
classarm__compute_1_1_c_l_warp_affine_kernel	documentation/classarm__compute_1_1_c_l_warp_affine_kernel.js	/^var classarm__compute_1_1_c_l_warp_affine_kernel =$/;"	v
classarm__compute_1_1_c_l_warp_perspective	documentation/classarm__compute_1_1_c_l_warp_perspective.js	/^var classarm__compute_1_1_c_l_warp_perspective =$/;"	v
classarm__compute_1_1_c_l_warp_perspective_kernel	documentation/classarm__compute_1_1_c_l_warp_perspective_kernel.js	/^var classarm__compute_1_1_c_l_warp_perspective_kernel =$/;"	v
classarm__compute_1_1_c_l_weights_reshape_kernel	documentation/classarm__compute_1_1_c_l_weights_reshape_kernel.js	/^var classarm__compute_1_1_c_l_weights_reshape_kernel =$/;"	v
classarm__compute_1_1_c_l_width_concatenate_layer	documentation/classarm__compute_1_1_c_l_width_concatenate_layer.js	/^var classarm__compute_1_1_c_l_width_concatenate_layer =$/;"	v
classarm__compute_1_1_c_l_width_concatenate_layer_kernel	documentation/classarm__compute_1_1_c_l_width_concatenate_layer_kernel.js	/^var classarm__compute_1_1_c_l_width_concatenate_layer_kernel =$/;"	v
classarm__compute_1_1_c_l_winograd_convolution_layer	documentation/classarm__compute_1_1_c_l_winograd_convolution_layer.js	/^var classarm__compute_1_1_c_l_winograd_convolution_layer =$/;"	v
classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml	documentation/navtreeindex25.js	/^"classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml":[5,0,0,263],$/;"	p	class:NAVTREEINDEX25
classarm__compute_1_1_c_l_winograd_filter_transform_kernel	documentation/classarm__compute_1_1_c_l_winograd_filter_transform_kernel.js	/^var classarm__compute_1_1_c_l_winograd_filter_transform_kernel =$/;"	v
classarm__compute_1_1_c_l_winograd_input_transform	documentation/classarm__compute_1_1_c_l_winograd_input_transform.js	/^var classarm__compute_1_1_c_l_winograd_input_transform =$/;"	v
classarm__compute_1_1_c_l_winograd_input_transform_kernel	documentation/classarm__compute_1_1_c_l_winograd_input_transform_kernel.js	/^var classarm__compute_1_1_c_l_winograd_input_transform_kernel =$/;"	v
classarm__compute_1_1_c_l_winograd_output_transform_kernel	documentation/classarm__compute_1_1_c_l_winograd_output_transform_kernel.js	/^var classarm__compute_1_1_c_l_winograd_output_transform_kernel =$/;"	v
classarm__compute_1_1_c_p_p_corner_candidates_kernel	documentation/classarm__compute_1_1_c_p_p_corner_candidates_kernel.js	/^var classarm__compute_1_1_c_p_p_corner_candidates_kernel =$/;"	v
classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel	documentation/classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel.js	/^var classarm__compute_1_1_c_p_p_detection_window_non_maxima_suppression_kernel =$/;"	v
classarm__compute_1_1_c_p_p_permute	documentation/classarm__compute_1_1_c_p_p_permute.js	/^var classarm__compute_1_1_c_p_p_permute =$/;"	v
classarm__compute_1_1_c_p_p_permute_kernel	documentation/classarm__compute_1_1_c_p_p_permute_kernel.js	/^var classarm__compute_1_1_c_p_p_permute_kernel =$/;"	v
classarm__compute_1_1_c_p_p_scheduler	documentation/classarm__compute_1_1_c_p_p_scheduler.js	/^var classarm__compute_1_1_c_p_p_scheduler =$/;"	v
classarm__compute_1_1_c_p_p_sort_euclidean_distance_kernel	documentation/classarm__compute_1_1_c_p_p_sort_euclidean_distance_kernel.js	/^var classarm__compute_1_1_c_p_p_sort_euclidean_distance_kernel =$/;"	v
classarm__compute_1_1_c_p_p_upsample	documentation/classarm__compute_1_1_c_p_p_upsample.js	/^var classarm__compute_1_1_c_p_p_upsample =$/;"	v
classarm__compute_1_1_c_p_p_upsample_kernel	documentation/classarm__compute_1_1_c_p_p_upsample_kernel.js	/^var classarm__compute_1_1_c_p_p_upsample_kernel =$/;"	v
classarm__compute_1_1_c_p_u_info	documentation/classarm__compute_1_1_c_p_u_info.js	/^var classarm__compute_1_1_c_p_u_info =$/;"	v
classarm__compute_1_1_coordinates	documentation/classarm__compute_1_1_coordinates.js	/^var classarm__compute_1_1_coordinates =$/;"	v
classarm__compute_1_1_dimensions	documentation/classarm__compute_1_1_dimensions.js	/^var classarm__compute_1_1_dimensions =$/;"	v
classarm__compute_1_1_distribution1_d	documentation/classarm__compute_1_1_distribution1_d.js	/^var classarm__compute_1_1_distribution1_d =$/;"	v
classarm__compute_1_1_g_c_absolute_difference	documentation/classarm__compute_1_1_g_c_absolute_difference.js	/^var classarm__compute_1_1_g_c_absolute_difference =$/;"	v
classarm__compute_1_1_g_c_absolute_difference_kernel	documentation/classarm__compute_1_1_g_c_absolute_difference_kernel.js	/^var classarm__compute_1_1_g_c_absolute_difference_kernel =$/;"	v
classarm__compute_1_1_g_c_activation_layer	documentation/classarm__compute_1_1_g_c_activation_layer.js	/^var classarm__compute_1_1_g_c_activation_layer =$/;"	v
classarm__compute_1_1_g_c_activation_layer_kernel	documentation/classarm__compute_1_1_g_c_activation_layer_kernel.js	/^var classarm__compute_1_1_g_c_activation_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_arithmetic_addition	documentation/classarm__compute_1_1_g_c_arithmetic_addition.js	/^var classarm__compute_1_1_g_c_arithmetic_addition =$/;"	v
classarm__compute_1_1_g_c_arithmetic_addition_kernel	documentation/classarm__compute_1_1_g_c_arithmetic_addition_kernel.js	/^var classarm__compute_1_1_g_c_arithmetic_addition_kernel =$/;"	v
classarm__compute_1_1_g_c_batch_normalization_layer	documentation/classarm__compute_1_1_g_c_batch_normalization_layer.js	/^var classarm__compute_1_1_g_c_batch_normalization_layer =$/;"	v
classarm__compute_1_1_g_c_batch_normalization_layer_kernel	documentation/classarm__compute_1_1_g_c_batch_normalization_layer_kernel.js	/^var classarm__compute_1_1_g_c_batch_normalization_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_buffer_allocator	documentation/classarm__compute_1_1_g_c_buffer_allocator.js	/^var classarm__compute_1_1_g_c_buffer_allocator =$/;"	v
classarm__compute_1_1_g_c_col2_im_kernel	documentation/classarm__compute_1_1_g_c_col2_im_kernel.js	/^var classarm__compute_1_1_g_c_col2_im_kernel =$/;"	v
classarm__compute_1_1_g_c_convolution_layer	documentation/classarm__compute_1_1_g_c_convolution_layer.js	/^var classarm__compute_1_1_g_c_convolution_layer =$/;"	v
classarm__compute_1_1_g_c_convolution_layer_reshape_weights	documentation/classarm__compute_1_1_g_c_convolution_layer_reshape_weights.js	/^var classarm__compute_1_1_g_c_convolution_layer_reshape_weights =$/;"	v
classarm__compute_1_1_g_c_depth_concatenate_layer	documentation/classarm__compute_1_1_g_c_depth_concatenate_layer.js	/^var classarm__compute_1_1_g_c_depth_concatenate_layer =$/;"	v
classarm__compute_1_1_g_c_depth_concatenate_layer_kernel	documentation/classarm__compute_1_1_g_c_depth_concatenate_layer_kernel.js	/^var classarm__compute_1_1_g_c_depth_concatenate_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_depthwise_convolution_layer3x3	documentation/classarm__compute_1_1_g_c_depthwise_convolution_layer3x3.js	/^var classarm__compute_1_1_g_c_depthwise_convolution_layer3x3 =$/;"	v
classarm__compute_1_1_g_c_depthwise_convolution_layer3x3_kernel	documentation/classarm__compute_1_1_g_c_depthwise_convolution_layer3x3_kernel.js	/^var classarm__compute_1_1_g_c_depthwise_convolution_layer3x3_kernel =$/;"	v
classarm__compute_1_1_g_c_direct_convolution_layer	documentation/classarm__compute_1_1_g_c_direct_convolution_layer.js	/^var classarm__compute_1_1_g_c_direct_convolution_layer =$/;"	v
classarm__compute_1_1_g_c_direct_convolution_layer_kernel	documentation/classarm__compute_1_1_g_c_direct_convolution_layer_kernel.js	/^var classarm__compute_1_1_g_c_direct_convolution_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_direct_convolution_layer_kernel.xhtml	documentation/navtreeindex26.js	/^"classarm__compute_1_1_g_c_direct_convolution_layer_kernel.xhtml":[5,0,0,302],$/;"	p	class:NAVTREEINDEX26
classarm__compute_1_1_g_c_dropout_layer	documentation/classarm__compute_1_1_g_c_dropout_layer.js	/^var classarm__compute_1_1_g_c_dropout_layer =$/;"	v
classarm__compute_1_1_g_c_dropout_layer_kernel	documentation/classarm__compute_1_1_g_c_dropout_layer_kernel.js	/^var classarm__compute_1_1_g_c_dropout_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_fill_border	documentation/classarm__compute_1_1_g_c_fill_border.js	/^var classarm__compute_1_1_g_c_fill_border =$/;"	v
classarm__compute_1_1_g_c_fill_border_kernel	documentation/classarm__compute_1_1_g_c_fill_border_kernel.js	/^var classarm__compute_1_1_g_c_fill_border_kernel =$/;"	v
classarm__compute_1_1_g_c_fully_connected_layer	documentation/classarm__compute_1_1_g_c_fully_connected_layer.js	/^var classarm__compute_1_1_g_c_fully_connected_layer =$/;"	v
classarm__compute_1_1_g_c_fully_connected_layer_reshape_weights	documentation/classarm__compute_1_1_g_c_fully_connected_layer_reshape_weights.js	/^var classarm__compute_1_1_g_c_fully_connected_layer_reshape_weights =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m	documentation/classarm__compute_1_1_g_c_g_e_m_m.js	/^var classarm__compute_1_1_g_c_g_e_m_m =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_interleave4x4	documentation/classarm__compute_1_1_g_c_g_e_m_m_interleave4x4.js	/^var classarm__compute_1_1_g_c_g_e_m_m_interleave4x4 =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_interleave4x4_kernel	documentation/classarm__compute_1_1_g_c_g_e_m_m_interleave4x4_kernel.js	/^var classarm__compute_1_1_g_c_g_e_m_m_interleave4x4_kernel =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_matrix_accumulate_biases_kernel	documentation/classarm__compute_1_1_g_c_g_e_m_m_matrix_accumulate_biases_kernel.js	/^var classarm__compute_1_1_g_c_g_e_m_m_matrix_accumulate_biases_kernel =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_matrix_addition_kernel	documentation/classarm__compute_1_1_g_c_g_e_m_m_matrix_addition_kernel.js	/^var classarm__compute_1_1_g_c_g_e_m_m_matrix_addition_kernel =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_matrix_multiply_kernel	documentation/classarm__compute_1_1_g_c_g_e_m_m_matrix_multiply_kernel.js	/^var classarm__compute_1_1_g_c_g_e_m_m_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w	documentation/classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w.js	/^var classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w =$/;"	v
classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w_kernel	documentation/classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w_kernel.js	/^var classarm__compute_1_1_g_c_g_e_m_m_transpose1x_w_kernel =$/;"	v
classarm__compute_1_1_g_c_im2_col_kernel	documentation/classarm__compute_1_1_g_c_im2_col_kernel.js	/^var classarm__compute_1_1_g_c_im2_col_kernel =$/;"	v
classarm__compute_1_1_g_c_kernel	documentation/classarm__compute_1_1_g_c_kernel.js	/^var classarm__compute_1_1_g_c_kernel =$/;"	v
classarm__compute_1_1_g_c_kernel_library	documentation/classarm__compute_1_1_g_c_kernel_library.js	/^var classarm__compute_1_1_g_c_kernel_library =$/;"	v
classarm__compute_1_1_g_c_logits1_d_max_kernel	documentation/classarm__compute_1_1_g_c_logits1_d_max_kernel.js	/^var classarm__compute_1_1_g_c_logits1_d_max_kernel =$/;"	v
classarm__compute_1_1_g_c_logits1_d_norm_kernel	documentation/classarm__compute_1_1_g_c_logits1_d_norm_kernel.js	/^var classarm__compute_1_1_g_c_logits1_d_norm_kernel =$/;"	v
classarm__compute_1_1_g_c_logits1_d_shift_exp_sum_kernel	documentation/classarm__compute_1_1_g_c_logits1_d_shift_exp_sum_kernel.js	/^var classarm__compute_1_1_g_c_logits1_d_shift_exp_sum_kernel =$/;"	v
classarm__compute_1_1_g_c_normalization_layer	documentation/classarm__compute_1_1_g_c_normalization_layer.js	/^var classarm__compute_1_1_g_c_normalization_layer =$/;"	v
classarm__compute_1_1_g_c_normalization_layer_kernel	documentation/classarm__compute_1_1_g_c_normalization_layer_kernel.js	/^var classarm__compute_1_1_g_c_normalization_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer	documentation/classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer.js	/^var classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer =$/;"	v
classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer_kernel	documentation/classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer_kernel.js	/^var classarm__compute_1_1_g_c_normalize_planar_y_u_v_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_pixel_wise_multiplication	documentation/classarm__compute_1_1_g_c_pixel_wise_multiplication.js	/^var classarm__compute_1_1_g_c_pixel_wise_multiplication =$/;"	v
classarm__compute_1_1_g_c_pixel_wise_multiplication_kernel	documentation/classarm__compute_1_1_g_c_pixel_wise_multiplication_kernel.js	/^var classarm__compute_1_1_g_c_pixel_wise_multiplication_kernel =$/;"	v
classarm__compute_1_1_g_c_pooling_layer	documentation/classarm__compute_1_1_g_c_pooling_layer.js	/^var classarm__compute_1_1_g_c_pooling_layer =$/;"	v
classarm__compute_1_1_g_c_pooling_layer_kernel	documentation/classarm__compute_1_1_g_c_pooling_layer_kernel.js	/^var classarm__compute_1_1_g_c_pooling_layer_kernel =$/;"	v
classarm__compute_1_1_g_c_program	documentation/classarm__compute_1_1_g_c_program.js	/^var classarm__compute_1_1_g_c_program =$/;"	v
classarm__compute_1_1_g_c_scale	documentation/classarm__compute_1_1_g_c_scale.js	/^var classarm__compute_1_1_g_c_scale =$/;"	v
classarm__compute_1_1_g_c_scale_kernel	documentation/classarm__compute_1_1_g_c_scale_kernel.js	/^var classarm__compute_1_1_g_c_scale_kernel =$/;"	v
classarm__compute_1_1_g_c_scheduler	documentation/classarm__compute_1_1_g_c_scheduler.js	/^var classarm__compute_1_1_g_c_scheduler =$/;"	v
classarm__compute_1_1_g_c_softmax_layer	documentation/classarm__compute_1_1_g_c_softmax_layer.js	/^var classarm__compute_1_1_g_c_softmax_layer =$/;"	v
classarm__compute_1_1_g_c_tensor	documentation/classarm__compute_1_1_g_c_tensor.js	/^var classarm__compute_1_1_g_c_tensor =$/;"	v
classarm__compute_1_1_g_c_tensor_allocator	documentation/classarm__compute_1_1_g_c_tensor_allocator.js	/^var classarm__compute_1_1_g_c_tensor_allocator =$/;"	v
classarm__compute_1_1_g_c_tensor_shift	documentation/classarm__compute_1_1_g_c_tensor_shift.js	/^var classarm__compute_1_1_g_c_tensor_shift =$/;"	v
classarm__compute_1_1_g_c_tensor_shift_kernel	documentation/classarm__compute_1_1_g_c_tensor_shift_kernel.js	/^var classarm__compute_1_1_g_c_tensor_shift_kernel =$/;"	v
classarm__compute_1_1_g_c_tensor_shift_kernel.xhtml#a8fd12b95bdde3f93db96bc9b1598db69	documentation/navtreeindex27.js	/^"classarm__compute_1_1_g_c_tensor_shift_kernel.xhtml#a8fd12b95bdde3f93db96bc9b1598db69":[5,0,0,339,7],$/;"	p	class:NAVTREEINDEX27
classarm__compute_1_1_g_c_transpose	documentation/classarm__compute_1_1_g_c_transpose.js	/^var classarm__compute_1_1_g_c_transpose =$/;"	v
classarm__compute_1_1_g_c_transpose_kernel	documentation/classarm__compute_1_1_g_c_transpose_kernel.js	/^var classarm__compute_1_1_g_c_transpose_kernel =$/;"	v
classarm__compute_1_1_g_c_weights_reshape_kernel	documentation/classarm__compute_1_1_g_c_weights_reshape_kernel.js	/^var classarm__compute_1_1_g_c_weights_reshape_kernel =$/;"	v
classarm__compute_1_1_g_e_m_m_info	documentation/classarm__compute_1_1_g_e_m_m_info.js	/^var classarm__compute_1_1_g_e_m_m_info =$/;"	v
classarm__compute_1_1_g_e_m_m_reshape_info	documentation/classarm__compute_1_1_g_e_m_m_reshape_info.js	/^var classarm__compute_1_1_g_e_m_m_reshape_info =$/;"	v
classarm__compute_1_1_g_l_buffer_wrapper	documentation/classarm__compute_1_1_g_l_buffer_wrapper.js	/^var classarm__compute_1_1_g_l_buffer_wrapper =$/;"	v
classarm__compute_1_1_h_o_g	documentation/classarm__compute_1_1_h_o_g.js	/^var classarm__compute_1_1_h_o_g =$/;"	v
classarm__compute_1_1_h_o_g_info	documentation/classarm__compute_1_1_h_o_g_info.js	/^var classarm__compute_1_1_h_o_g_info =$/;"	v
classarm__compute_1_1_i_access_window	documentation/classarm__compute_1_1_i_access_window.js	/^var classarm__compute_1_1_i_access_window =$/;"	v
classarm__compute_1_1_i_allocator	documentation/classarm__compute_1_1_i_allocator.js	/^var classarm__compute_1_1_i_allocator =$/;"	v
classarm__compute_1_1_i_array	documentation/classarm__compute_1_1_i_array.js	/^var classarm__compute_1_1_i_array =$/;"	v
classarm__compute_1_1_i_c_l_array	documentation/classarm__compute_1_1_i_c_l_array.js	/^var classarm__compute_1_1_i_c_l_array =$/;"	v
classarm__compute_1_1_i_c_l_depthwise_convolution_layer3x3_kernel	documentation/classarm__compute_1_1_i_c_l_depthwise_convolution_layer3x3_kernel.js	/^var classarm__compute_1_1_i_c_l_depthwise_convolution_layer3x3_kernel =$/;"	v
classarm__compute_1_1_i_c_l_distribution1_d	documentation/classarm__compute_1_1_i_c_l_distribution1_d.js	/^var classarm__compute_1_1_i_c_l_distribution1_d =$/;"	v
classarm__compute_1_1_i_c_l_g_e_m_m_lowp_reduction_kernel	documentation/classarm__compute_1_1_i_c_l_g_e_m_m_lowp_reduction_kernel.js	/^var classarm__compute_1_1_i_c_l_g_e_m_m_lowp_reduction_kernel =$/;"	v
classarm__compute_1_1_i_c_l_h_o_g	documentation/classarm__compute_1_1_i_c_l_h_o_g.js	/^var classarm__compute_1_1_i_c_l_h_o_g =$/;"	v
classarm__compute_1_1_i_c_l_kernel	documentation/classarm__compute_1_1_i_c_l_kernel.js	/^var classarm__compute_1_1_i_c_l_kernel =$/;"	v
classarm__compute_1_1_i_c_l_lut	documentation/classarm__compute_1_1_i_c_l_lut.js	/^var classarm__compute_1_1_i_c_l_lut =$/;"	v
classarm__compute_1_1_i_c_l_memory_region	documentation/classarm__compute_1_1_i_c_l_memory_region.js	/^var classarm__compute_1_1_i_c_l_memory_region =$/;"	v
classarm__compute_1_1_i_c_l_multi_h_o_g	documentation/classarm__compute_1_1_i_c_l_multi_h_o_g.js	/^var classarm__compute_1_1_i_c_l_multi_h_o_g =$/;"	v
classarm__compute_1_1_i_c_l_multi_image	documentation/classarm__compute_1_1_i_c_l_multi_image.js	/^var classarm__compute_1_1_i_c_l_multi_image =$/;"	v
classarm__compute_1_1_i_c_l_simple2_d_kernel	documentation/classarm__compute_1_1_i_c_l_simple2_d_kernel.js	/^var classarm__compute_1_1_i_c_l_simple2_d_kernel =$/;"	v
classarm__compute_1_1_i_c_l_simple3_d_kernel	documentation/classarm__compute_1_1_i_c_l_simple3_d_kernel.js	/^var classarm__compute_1_1_i_c_l_simple3_d_kernel =$/;"	v
classarm__compute_1_1_i_c_l_simple_function	documentation/classarm__compute_1_1_i_c_l_simple_function.js	/^var classarm__compute_1_1_i_c_l_simple_function =$/;"	v
classarm__compute_1_1_i_c_l_simple_kernel	documentation/classarm__compute_1_1_i_c_l_simple_kernel.js	/^var classarm__compute_1_1_i_c_l_simple_kernel =$/;"	v
classarm__compute_1_1_i_c_l_tensor	documentation/classarm__compute_1_1_i_c_l_tensor.js	/^var classarm__compute_1_1_i_c_l_tensor =$/;"	v
classarm__compute_1_1_i_c_l_tuner	documentation/classarm__compute_1_1_i_c_l_tuner.js	/^var classarm__compute_1_1_i_c_l_tuner =$/;"	v
classarm__compute_1_1_i_c_p_p_kernel	documentation/classarm__compute_1_1_i_c_p_p_kernel.js	/^var classarm__compute_1_1_i_c_p_p_kernel =$/;"	v
classarm__compute_1_1_i_c_p_p_simple_function	documentation/classarm__compute_1_1_i_c_p_p_simple_function.js	/^var classarm__compute_1_1_i_c_p_p_simple_function =$/;"	v
classarm__compute_1_1_i_c_p_p_simple_kernel	documentation/classarm__compute_1_1_i_c_p_p_simple_kernel.js	/^var classarm__compute_1_1_i_c_p_p_simple_kernel =$/;"	v
classarm__compute_1_1_i_distribution	documentation/classarm__compute_1_1_i_distribution.js	/^var classarm__compute_1_1_i_distribution =$/;"	v
classarm__compute_1_1_i_distribution1_d	documentation/classarm__compute_1_1_i_distribution1_d.js	/^var classarm__compute_1_1_i_distribution1_d =$/;"	v
classarm__compute_1_1_i_function	documentation/classarm__compute_1_1_i_function.js	/^var classarm__compute_1_1_i_function =$/;"	v
classarm__compute_1_1_i_g_c_kernel	documentation/classarm__compute_1_1_i_g_c_kernel.js	/^var classarm__compute_1_1_i_g_c_kernel =$/;"	v
classarm__compute_1_1_i_g_c_kernel.xhtml#a6f56c8bb44166634652b877d6eb7a9a2	documentation/navtreeindex28.js	/^"classarm__compute_1_1_i_g_c_kernel.xhtml#a6f56c8bb44166634652b877d6eb7a9a2":[5,0,0,374,9],$/;"	p	class:NAVTREEINDEX28
classarm__compute_1_1_i_g_c_simple2_d_kernel	documentation/classarm__compute_1_1_i_g_c_simple2_d_kernel.js	/^var classarm__compute_1_1_i_g_c_simple2_d_kernel =$/;"	v
classarm__compute_1_1_i_g_c_simple3_d_kernel	documentation/classarm__compute_1_1_i_g_c_simple3_d_kernel.js	/^var classarm__compute_1_1_i_g_c_simple3_d_kernel =$/;"	v
classarm__compute_1_1_i_g_c_simple_function	documentation/classarm__compute_1_1_i_g_c_simple_function.js	/^var classarm__compute_1_1_i_g_c_simple_function =$/;"	v
classarm__compute_1_1_i_g_c_simple_kernel	documentation/classarm__compute_1_1_i_g_c_simple_kernel.js	/^var classarm__compute_1_1_i_g_c_simple_kernel =$/;"	v
classarm__compute_1_1_i_g_c_tensor	documentation/classarm__compute_1_1_i_g_c_tensor.js	/^var classarm__compute_1_1_i_g_c_tensor =$/;"	v
classarm__compute_1_1_i_h_o_g	documentation/classarm__compute_1_1_i_h_o_g.js	/^var classarm__compute_1_1_i_h_o_g =$/;"	v
classarm__compute_1_1_i_kernel	documentation/classarm__compute_1_1_i_kernel.js	/^var classarm__compute_1_1_i_kernel =$/;"	v
classarm__compute_1_1_i_lifetime_manager	documentation/classarm__compute_1_1_i_lifetime_manager.js	/^var classarm__compute_1_1_i_lifetime_manager =$/;"	v
classarm__compute_1_1_i_lut	documentation/classarm__compute_1_1_i_lut.js	/^var classarm__compute_1_1_i_lut =$/;"	v
classarm__compute_1_1_i_lut_allocator	documentation/classarm__compute_1_1_i_lut_allocator.js	/^var classarm__compute_1_1_i_lut_allocator =$/;"	v
classarm__compute_1_1_i_memory_group	documentation/classarm__compute_1_1_i_memory_group.js	/^var classarm__compute_1_1_i_memory_group =$/;"	v
classarm__compute_1_1_i_memory_manager	documentation/classarm__compute_1_1_i_memory_manager.js	/^var classarm__compute_1_1_i_memory_manager =$/;"	v
classarm__compute_1_1_i_memory_pool	documentation/classarm__compute_1_1_i_memory_pool.js	/^var classarm__compute_1_1_i_memory_pool =$/;"	v
classarm__compute_1_1_i_memory_region	documentation/classarm__compute_1_1_i_memory_region.js	/^var classarm__compute_1_1_i_memory_region =$/;"	v
classarm__compute_1_1_i_multi_h_o_g	documentation/classarm__compute_1_1_i_multi_h_o_g.js	/^var classarm__compute_1_1_i_multi_h_o_g =$/;"	v
classarm__compute_1_1_i_multi_image	documentation/classarm__compute_1_1_i_multi_image.js	/^var classarm__compute_1_1_i_multi_image =$/;"	v
classarm__compute_1_1_i_n_e_g_e_m_m_lowp_reduction_kernel	documentation/classarm__compute_1_1_i_n_e_g_e_m_m_lowp_reduction_kernel.js	/^var classarm__compute_1_1_i_n_e_g_e_m_m_lowp_reduction_kernel =$/;"	v
classarm__compute_1_1_i_n_e_harris_score_kernel	documentation/classarm__compute_1_1_i_n_e_harris_score_kernel.js	/^var classarm__compute_1_1_i_n_e_harris_score_kernel =$/;"	v
classarm__compute_1_1_i_n_e_simple_function	documentation/classarm__compute_1_1_i_n_e_simple_function.js	/^var classarm__compute_1_1_i_n_e_simple_function =$/;"	v
classarm__compute_1_1_i_n_e_warp_kernel	documentation/classarm__compute_1_1_i_n_e_warp_kernel.js	/^var classarm__compute_1_1_i_n_e_warp_kernel =$/;"	v
classarm__compute_1_1_i_n_e_winograd_layer_batched_g_e_m_m_kernel	documentation/classarm__compute_1_1_i_n_e_winograd_layer_batched_g_e_m_m_kernel.js	/^var classarm__compute_1_1_i_n_e_winograd_layer_batched_g_e_m_m_kernel =$/;"	v
classarm__compute_1_1_i_n_e_winograd_layer_transform_input_kernel	documentation/classarm__compute_1_1_i_n_e_winograd_layer_transform_input_kernel.js	/^var classarm__compute_1_1_i_n_e_winograd_layer_transform_input_kernel =$/;"	v
classarm__compute_1_1_i_n_e_winograd_layer_transform_output_kernel	documentation/classarm__compute_1_1_i_n_e_winograd_layer_transform_output_kernel.js	/^var classarm__compute_1_1_i_n_e_winograd_layer_transform_output_kernel =$/;"	v
classarm__compute_1_1_i_n_e_winograd_layer_transform_weights_kernel	documentation/classarm__compute_1_1_i_n_e_winograd_layer_transform_weights_kernel.js	/^var classarm__compute_1_1_i_n_e_winograd_layer_transform_weights_kernel =$/;"	v
classarm__compute_1_1_i_pool_manager	documentation/classarm__compute_1_1_i_pool_manager.js	/^var classarm__compute_1_1_i_pool_manager =$/;"	v
classarm__compute_1_1_i_pyramid	documentation/classarm__compute_1_1_i_pyramid.js	/^var classarm__compute_1_1_i_pyramid =$/;"	v
classarm__compute_1_1_i_scheduler	documentation/classarm__compute_1_1_i_scheduler.js	/^var classarm__compute_1_1_i_scheduler =$/;"	v
classarm__compute_1_1_i_simple_lifetime_manager	documentation/classarm__compute_1_1_i_simple_lifetime_manager.js	/^var classarm__compute_1_1_i_simple_lifetime_manager =$/;"	v
classarm__compute_1_1_i_tensor	documentation/classarm__compute_1_1_i_tensor.js	/^var classarm__compute_1_1_i_tensor =$/;"	v
classarm__compute_1_1_i_tensor_allocator	documentation/classarm__compute_1_1_i_tensor_allocator.js	/^var classarm__compute_1_1_i_tensor_allocator =$/;"	v
classarm__compute_1_1_i_tensor_info	documentation/classarm__compute_1_1_i_tensor_info.js	/^var classarm__compute_1_1_i_tensor_info =$/;"	v
classarm__compute_1_1_iterator	documentation/classarm__compute_1_1_iterator.js	/^var classarm__compute_1_1_iterator =$/;"	v
classarm__compute_1_1_kernel	documentation/classarm__compute_1_1_kernel.js	/^var classarm__compute_1_1_kernel =$/;"	v
classarm__compute_1_1_kernel.xhtml#a83af2718294984c1053223a928164a7b	documentation/navtreeindex29.js	/^"classarm__compute_1_1_kernel.xhtml#a83af2718294984c1053223a928164a7b":[5,0,0,409,1],$/;"	p	class:NAVTREEINDEX29
classarm__compute_1_1_l_s_t_m_params	documentation/classarm__compute_1_1_l_s_t_m_params.js	/^var classarm__compute_1_1_l_s_t_m_params =$/;"	v
classarm__compute_1_1_lut	documentation/classarm__compute_1_1_lut.js	/^var classarm__compute_1_1_lut =$/;"	v
classarm__compute_1_1_lut_allocator	documentation/classarm__compute_1_1_lut_allocator.js	/^var classarm__compute_1_1_lut_allocator =$/;"	v
classarm__compute_1_1_memory	documentation/classarm__compute_1_1_memory.js	/^var classarm__compute_1_1_memory =$/;"	v
classarm__compute_1_1_memory_group_base	documentation/classarm__compute_1_1_memory_group_base.js	/^var classarm__compute_1_1_memory_group_base =$/;"	v
classarm__compute_1_1_memory_manager_on_demand	documentation/classarm__compute_1_1_memory_manager_on_demand.js	/^var classarm__compute_1_1_memory_manager_on_demand =$/;"	v
classarm__compute_1_1_memory_region	documentation/classarm__compute_1_1_memory_region.js	/^var classarm__compute_1_1_memory_region =$/;"	v
classarm__compute_1_1_multi_h_o_g	documentation/classarm__compute_1_1_multi_h_o_g.js	/^var classarm__compute_1_1_multi_h_o_g =$/;"	v
classarm__compute_1_1_multi_image	documentation/classarm__compute_1_1_multi_image.js	/^var classarm__compute_1_1_multi_image =$/;"	v
classarm__compute_1_1_multi_image_info	documentation/classarm__compute_1_1_multi_image_info.js	/^var classarm__compute_1_1_multi_image_info =$/;"	v
classarm__compute_1_1_n_e_absolute_difference	documentation/classarm__compute_1_1_n_e_absolute_difference.js	/^var classarm__compute_1_1_n_e_absolute_difference =$/;"	v
classarm__compute_1_1_n_e_absolute_difference_kernel	documentation/classarm__compute_1_1_n_e_absolute_difference_kernel.js	/^var classarm__compute_1_1_n_e_absolute_difference_kernel =$/;"	v
classarm__compute_1_1_n_e_accumulate	documentation/classarm__compute_1_1_n_e_accumulate.js	/^var classarm__compute_1_1_n_e_accumulate =$/;"	v
classarm__compute_1_1_n_e_accumulate_kernel	documentation/classarm__compute_1_1_n_e_accumulate_kernel.js	/^var classarm__compute_1_1_n_e_accumulate_kernel =$/;"	v
classarm__compute_1_1_n_e_accumulate_squared	documentation/classarm__compute_1_1_n_e_accumulate_squared.js	/^var classarm__compute_1_1_n_e_accumulate_squared =$/;"	v
classarm__compute_1_1_n_e_accumulate_squared_kernel	documentation/classarm__compute_1_1_n_e_accumulate_squared_kernel.js	/^var classarm__compute_1_1_n_e_accumulate_squared_kernel =$/;"	v
classarm__compute_1_1_n_e_accumulate_weighted	documentation/classarm__compute_1_1_n_e_accumulate_weighted.js	/^var classarm__compute_1_1_n_e_accumulate_weighted =$/;"	v
classarm__compute_1_1_n_e_accumulate_weighted_kernel	documentation/classarm__compute_1_1_n_e_accumulate_weighted_kernel.js	/^var classarm__compute_1_1_n_e_accumulate_weighted_kernel =$/;"	v
classarm__compute_1_1_n_e_activation_layer	documentation/classarm__compute_1_1_n_e_activation_layer.js	/^var classarm__compute_1_1_n_e_activation_layer =$/;"	v
classarm__compute_1_1_n_e_activation_layer_kernel	documentation/classarm__compute_1_1_n_e_activation_layer_kernel.js	/^var classarm__compute_1_1_n_e_activation_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_arithmetic_addition	documentation/classarm__compute_1_1_n_e_arithmetic_addition.js	/^var classarm__compute_1_1_n_e_arithmetic_addition =$/;"	v
classarm__compute_1_1_n_e_arithmetic_addition_kernel	documentation/classarm__compute_1_1_n_e_arithmetic_addition_kernel.js	/^var classarm__compute_1_1_n_e_arithmetic_addition_kernel =$/;"	v
classarm__compute_1_1_n_e_arithmetic_subtraction	documentation/classarm__compute_1_1_n_e_arithmetic_subtraction.js	/^var classarm__compute_1_1_n_e_arithmetic_subtraction =$/;"	v
classarm__compute_1_1_n_e_arithmetic_subtraction_kernel	documentation/classarm__compute_1_1_n_e_arithmetic_subtraction_kernel.js	/^var classarm__compute_1_1_n_e_arithmetic_subtraction_kernel =$/;"	v
classarm__compute_1_1_n_e_batch_normalization_layer	documentation/classarm__compute_1_1_n_e_batch_normalization_layer.js	/^var classarm__compute_1_1_n_e_batch_normalization_layer =$/;"	v
classarm__compute_1_1_n_e_batch_normalization_layer_kernel	documentation/classarm__compute_1_1_n_e_batch_normalization_layer_kernel.js	/^var classarm__compute_1_1_n_e_batch_normalization_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_bitwise_and	documentation/classarm__compute_1_1_n_e_bitwise_and.js	/^var classarm__compute_1_1_n_e_bitwise_and =$/;"	v
classarm__compute_1_1_n_e_bitwise_and_kernel	documentation/classarm__compute_1_1_n_e_bitwise_and_kernel.js	/^var classarm__compute_1_1_n_e_bitwise_and_kernel =$/;"	v
classarm__compute_1_1_n_e_bitwise_not	documentation/classarm__compute_1_1_n_e_bitwise_not.js	/^var classarm__compute_1_1_n_e_bitwise_not =$/;"	v
classarm__compute_1_1_n_e_bitwise_not_kernel	documentation/classarm__compute_1_1_n_e_bitwise_not_kernel.js	/^var classarm__compute_1_1_n_e_bitwise_not_kernel =$/;"	v
classarm__compute_1_1_n_e_bitwise_or	documentation/classarm__compute_1_1_n_e_bitwise_or.js	/^var classarm__compute_1_1_n_e_bitwise_or =$/;"	v
classarm__compute_1_1_n_e_bitwise_or_kernel	documentation/classarm__compute_1_1_n_e_bitwise_or_kernel.js	/^var classarm__compute_1_1_n_e_bitwise_or_kernel =$/;"	v
classarm__compute_1_1_n_e_bitwise_xor	documentation/classarm__compute_1_1_n_e_bitwise_xor.js	/^var classarm__compute_1_1_n_e_bitwise_xor =$/;"	v
classarm__compute_1_1_n_e_bitwise_xor_kernel	documentation/classarm__compute_1_1_n_e_bitwise_xor_kernel.js	/^var classarm__compute_1_1_n_e_bitwise_xor_kernel =$/;"	v
classarm__compute_1_1_n_e_box3x3	documentation/classarm__compute_1_1_n_e_box3x3.js	/^var classarm__compute_1_1_n_e_box3x3 =$/;"	v
classarm__compute_1_1_n_e_box3x3_kernel	documentation/classarm__compute_1_1_n_e_box3x3_kernel.js	/^var classarm__compute_1_1_n_e_box3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_canny_edge	documentation/classarm__compute_1_1_n_e_canny_edge.js	/^var classarm__compute_1_1_n_e_canny_edge =$/;"	v
classarm__compute_1_1_n_e_channel_combine	documentation/classarm__compute_1_1_n_e_channel_combine.js	/^var classarm__compute_1_1_n_e_channel_combine =$/;"	v
classarm__compute_1_1_n_e_channel_combine_kernel	documentation/classarm__compute_1_1_n_e_channel_combine_kernel.js	/^var classarm__compute_1_1_n_e_channel_combine_kernel =$/;"	v
classarm__compute_1_1_n_e_channel_combine_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828	documentation/navtreeindex30.js	/^"classarm__compute_1_1_n_e_channel_combine_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828":[5,0,0,450,7],$/;"	p	class:NAVTREEINDEX30
classarm__compute_1_1_n_e_channel_extract	documentation/classarm__compute_1_1_n_e_channel_extract.js	/^var classarm__compute_1_1_n_e_channel_extract =$/;"	v
classarm__compute_1_1_n_e_channel_extract_kernel	documentation/classarm__compute_1_1_n_e_channel_extract_kernel.js	/^var classarm__compute_1_1_n_e_channel_extract_kernel =$/;"	v
classarm__compute_1_1_n_e_col2_im	documentation/classarm__compute_1_1_n_e_col2_im.js	/^var classarm__compute_1_1_n_e_col2_im =$/;"	v
classarm__compute_1_1_n_e_col2_im_kernel	documentation/classarm__compute_1_1_n_e_col2_im_kernel.js	/^var classarm__compute_1_1_n_e_col2_im_kernel =$/;"	v
classarm__compute_1_1_n_e_color_convert	documentation/classarm__compute_1_1_n_e_color_convert.js	/^var classarm__compute_1_1_n_e_color_convert =$/;"	v
classarm__compute_1_1_n_e_color_convert_kernel	documentation/classarm__compute_1_1_n_e_color_convert_kernel.js	/^var classarm__compute_1_1_n_e_color_convert_kernel =$/;"	v
classarm__compute_1_1_n_e_convert_fully_connected_weights	documentation/classarm__compute_1_1_n_e_convert_fully_connected_weights.js	/^var classarm__compute_1_1_n_e_convert_fully_connected_weights =$/;"	v
classarm__compute_1_1_n_e_convert_fully_connected_weights_kernel	documentation/classarm__compute_1_1_n_e_convert_fully_connected_weights_kernel.js	/^var classarm__compute_1_1_n_e_convert_fully_connected_weights_kernel =$/;"	v
classarm__compute_1_1_n_e_convolution3x3	documentation/classarm__compute_1_1_n_e_convolution3x3.js	/^var classarm__compute_1_1_n_e_convolution3x3 =$/;"	v
classarm__compute_1_1_n_e_convolution_kernel	documentation/classarm__compute_1_1_n_e_convolution_kernel.js	/^var classarm__compute_1_1_n_e_convolution_kernel =$/;"	v
classarm__compute_1_1_n_e_convolution_layer	documentation/classarm__compute_1_1_n_e_convolution_layer.js	/^var classarm__compute_1_1_n_e_convolution_layer =$/;"	v
classarm__compute_1_1_n_e_convolution_layer_reshape_weights	documentation/classarm__compute_1_1_n_e_convolution_layer_reshape_weights.js	/^var classarm__compute_1_1_n_e_convolution_layer_reshape_weights =$/;"	v
classarm__compute_1_1_n_e_convolution_rectangle	documentation/classarm__compute_1_1_n_e_convolution_rectangle.js	/^var classarm__compute_1_1_n_e_convolution_rectangle =$/;"	v
classarm__compute_1_1_n_e_convolution_rectangle_kernel	documentation/classarm__compute_1_1_n_e_convolution_rectangle_kernel.js	/^var classarm__compute_1_1_n_e_convolution_rectangle_kernel =$/;"	v
classarm__compute_1_1_n_e_convolution_square	documentation/classarm__compute_1_1_n_e_convolution_square.js	/^var classarm__compute_1_1_n_e_convolution_square =$/;"	v
classarm__compute_1_1_n_e_cumulative_distribution_kernel	documentation/classarm__compute_1_1_n_e_cumulative_distribution_kernel.js	/^var classarm__compute_1_1_n_e_cumulative_distribution_kernel =$/;"	v
classarm__compute_1_1_n_e_deconvolution_layer	documentation/classarm__compute_1_1_n_e_deconvolution_layer.js	/^var classarm__compute_1_1_n_e_deconvolution_layer =$/;"	v
classarm__compute_1_1_n_e_depth_concatenate_layer	documentation/classarm__compute_1_1_n_e_depth_concatenate_layer.js	/^var classarm__compute_1_1_n_e_depth_concatenate_layer =$/;"	v
classarm__compute_1_1_n_e_depth_concatenate_layer_kernel	documentation/classarm__compute_1_1_n_e_depth_concatenate_layer_kernel.js	/^var classarm__compute_1_1_n_e_depth_concatenate_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_depth_convert_layer	documentation/classarm__compute_1_1_n_e_depth_convert_layer.js	/^var classarm__compute_1_1_n_e_depth_convert_layer =$/;"	v
classarm__compute_1_1_n_e_depth_convert_layer_kernel	documentation/classarm__compute_1_1_n_e_depth_convert_layer_kernel.js	/^var classarm__compute_1_1_n_e_depth_convert_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_depthwise_convolution_layer	documentation/classarm__compute_1_1_n_e_depthwise_convolution_layer.js	/^var classarm__compute_1_1_n_e_depthwise_convolution_layer =$/;"	v
classarm__compute_1_1_n_e_depthwise_convolution_layer3x3	documentation/classarm__compute_1_1_n_e_depthwise_convolution_layer3x3.js	/^var classarm__compute_1_1_n_e_depthwise_convolution_layer3x3 =$/;"	v
classarm__compute_1_1_n_e_depthwise_convolution_layer3x3_kernel	documentation/classarm__compute_1_1_n_e_depthwise_convolution_layer3x3_kernel.js	/^var classarm__compute_1_1_n_e_depthwise_convolution_layer3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_depthwise_im2_col_kernel	documentation/classarm__compute_1_1_n_e_depthwise_im2_col_kernel.js	/^var classarm__compute_1_1_n_e_depthwise_im2_col_kernel =$/;"	v
classarm__compute_1_1_n_e_depthwise_separable_convolution_layer	documentation/classarm__compute_1_1_n_e_depthwise_separable_convolution_layer.js	/^var classarm__compute_1_1_n_e_depthwise_separable_convolution_layer =$/;"	v
classarm__compute_1_1_n_e_depthwise_vector_to_tensor_kernel	documentation/classarm__compute_1_1_n_e_depthwise_vector_to_tensor_kernel.js	/^var classarm__compute_1_1_n_e_depthwise_vector_to_tensor_kernel =$/;"	v
classarm__compute_1_1_n_e_depthwise_weights_reshape_kernel	documentation/classarm__compute_1_1_n_e_depthwise_weights_reshape_kernel.js	/^var classarm__compute_1_1_n_e_depthwise_weights_reshape_kernel =$/;"	v
classarm__compute_1_1_n_e_dequantization_layer	documentation/classarm__compute_1_1_n_e_dequantization_layer.js	/^var classarm__compute_1_1_n_e_dequantization_layer =$/;"	v
classarm__compute_1_1_n_e_dequantization_layer_kernel	documentation/classarm__compute_1_1_n_e_dequantization_layer_kernel.js	/^var classarm__compute_1_1_n_e_dequantization_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_derivative	documentation/classarm__compute_1_1_n_e_derivative.js	/^var classarm__compute_1_1_n_e_derivative =$/;"	v
classarm__compute_1_1_n_e_derivative_kernel	documentation/classarm__compute_1_1_n_e_derivative_kernel.js	/^var classarm__compute_1_1_n_e_derivative_kernel =$/;"	v
classarm__compute_1_1_n_e_dilate	documentation/classarm__compute_1_1_n_e_dilate.js	/^var classarm__compute_1_1_n_e_dilate =$/;"	v
classarm__compute_1_1_n_e_dilate_kernel	documentation/classarm__compute_1_1_n_e_dilate_kernel.js	/^var classarm__compute_1_1_n_e_dilate_kernel =$/;"	v
classarm__compute_1_1_n_e_direct_convolution_layer	documentation/classarm__compute_1_1_n_e_direct_convolution_layer.js	/^var classarm__compute_1_1_n_e_direct_convolution_layer =$/;"	v
classarm__compute_1_1_n_e_direct_convolution_layer_kernel	documentation/classarm__compute_1_1_n_e_direct_convolution_layer_kernel.js	/^var classarm__compute_1_1_n_e_direct_convolution_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_direct_convolution_layer_output_stage_kernel	documentation/classarm__compute_1_1_n_e_direct_convolution_layer_output_stage_kernel.js	/^var classarm__compute_1_1_n_e_direct_convolution_layer_output_stage_kernel =$/;"	v
classarm__compute_1_1_n_e_direct_convolution_layer_output_stage_kernel.xhtml#ab02c33a0e6c13a21c8b8ceed03fd8b6d	documentation/navtreeindex31.js	/^"classarm__compute_1_1_n_e_direct_convolution_layer_output_stage_kernel.xhtml#ab02c33a0e6c13a21c8b8ceed03fd8b6d":[5,0,0,487,6],$/;"	p	class:NAVTREEINDEX31
classarm__compute_1_1_n_e_edge_non_max_suppression_kernel	documentation/classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.js	/^var classarm__compute_1_1_n_e_edge_non_max_suppression_kernel =$/;"	v
classarm__compute_1_1_n_e_edge_trace_kernel	documentation/classarm__compute_1_1_n_e_edge_trace_kernel.js	/^var classarm__compute_1_1_n_e_edge_trace_kernel =$/;"	v
classarm__compute_1_1_n_e_equalize_histogram	documentation/classarm__compute_1_1_n_e_equalize_histogram.js	/^var classarm__compute_1_1_n_e_equalize_histogram =$/;"	v
classarm__compute_1_1_n_e_erode	documentation/classarm__compute_1_1_n_e_erode.js	/^var classarm__compute_1_1_n_e_erode =$/;"	v
classarm__compute_1_1_n_e_erode_kernel	documentation/classarm__compute_1_1_n_e_erode_kernel.js	/^var classarm__compute_1_1_n_e_erode_kernel =$/;"	v
classarm__compute_1_1_n_e_fast_corners	documentation/classarm__compute_1_1_n_e_fast_corners.js	/^var classarm__compute_1_1_n_e_fast_corners =$/;"	v
classarm__compute_1_1_n_e_fast_corners_kernel	documentation/classarm__compute_1_1_n_e_fast_corners_kernel.js	/^var classarm__compute_1_1_n_e_fast_corners_kernel =$/;"	v
classarm__compute_1_1_n_e_fill_array_kernel	documentation/classarm__compute_1_1_n_e_fill_array_kernel.js	/^var classarm__compute_1_1_n_e_fill_array_kernel =$/;"	v
classarm__compute_1_1_n_e_fill_border	documentation/classarm__compute_1_1_n_e_fill_border.js	/^var classarm__compute_1_1_n_e_fill_border =$/;"	v
classarm__compute_1_1_n_e_fill_border_kernel	documentation/classarm__compute_1_1_n_e_fill_border_kernel.js	/^var classarm__compute_1_1_n_e_fill_border_kernel =$/;"	v
classarm__compute_1_1_n_e_fill_inner_border_kernel	documentation/classarm__compute_1_1_n_e_fill_inner_border_kernel.js	/^var classarm__compute_1_1_n_e_fill_inner_border_kernel =$/;"	v
classarm__compute_1_1_n_e_flatten_layer	documentation/classarm__compute_1_1_n_e_flatten_layer.js	/^var classarm__compute_1_1_n_e_flatten_layer =$/;"	v
classarm__compute_1_1_n_e_floor	documentation/classarm__compute_1_1_n_e_floor.js	/^var classarm__compute_1_1_n_e_floor =$/;"	v
classarm__compute_1_1_n_e_floor_kernel	documentation/classarm__compute_1_1_n_e_floor_kernel.js	/^var classarm__compute_1_1_n_e_floor_kernel =$/;"	v
classarm__compute_1_1_n_e_fully_connected_layer	documentation/classarm__compute_1_1_n_e_fully_connected_layer.js	/^var classarm__compute_1_1_n_e_fully_connected_layer =$/;"	v
classarm__compute_1_1_n_e_fully_connected_layer_reshape_weights	documentation/classarm__compute_1_1_n_e_fully_connected_layer_reshape_weights.js	/^var classarm__compute_1_1_n_e_fully_connected_layer_reshape_weights =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m	documentation/classarm__compute_1_1_n_e_g_e_m_m.js	/^var classarm__compute_1_1_n_e_g_e_m_m =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_assembly_base_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_assembly_base_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_assembly_base_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_convolution_layer	documentation/classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.js	/^var classarm__compute_1_1_n_e_g_e_m_m_convolution_layer =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_interleave4x4	documentation/classarm__compute_1_1_n_e_g_e_m_m_interleave4x4.js	/^var classarm__compute_1_1_n_e_g_e_m_m_interleave4x4 =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_assembly_matrix_multiply_core =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_a_reduction_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_a_reduction_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_a_reduction_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_b_reduction_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_b_reduction_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_b_reduction_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_offset_contribution_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_offset_contribution_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_offset_contribution_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_lowp_quantize_down_int32_to_uint8_scale_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_matrix_accumulate_biases_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_matrix_accumulate_biases_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_matrix_accumulate_biases_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_matrix_addition_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_matrix_addition_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_matrix_addition_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_matrix_multiply_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_matrix_multiply_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_matrix_vector_multiply_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_matrix_vector_multiply_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_matrix_vector_multiply_kernel =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w	documentation/classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w.js	/^var classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w =$/;"	v
classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel	documentation/classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel.js	/^var classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel =$/;"	v
classarm__compute_1_1_n_e_gaussian3x3	documentation/classarm__compute_1_1_n_e_gaussian3x3.js	/^var classarm__compute_1_1_n_e_gaussian3x3 =$/;"	v
classarm__compute_1_1_n_e_gaussian3x3_kernel	documentation/classarm__compute_1_1_n_e_gaussian3x3_kernel.js	/^var classarm__compute_1_1_n_e_gaussian3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_gaussian5x5	documentation/classarm__compute_1_1_n_e_gaussian5x5.js	/^var classarm__compute_1_1_n_e_gaussian5x5 =$/;"	v
classarm__compute_1_1_n_e_gaussian5x5_hor_kernel	documentation/classarm__compute_1_1_n_e_gaussian5x5_hor_kernel.js	/^var classarm__compute_1_1_n_e_gaussian5x5_hor_kernel =$/;"	v
classarm__compute_1_1_n_e_gaussian5x5_hor_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828	documentation/navtreeindex32.js	/^"classarm__compute_1_1_n_e_gaussian5x5_hor_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828":[5,0,0,507,3],$/;"	p	class:NAVTREEINDEX32
classarm__compute_1_1_n_e_gaussian5x5_vert_kernel	documentation/classarm__compute_1_1_n_e_gaussian5x5_vert_kernel.js	/^var classarm__compute_1_1_n_e_gaussian5x5_vert_kernel =$/;"	v
classarm__compute_1_1_n_e_gaussian_pyramid	documentation/classarm__compute_1_1_n_e_gaussian_pyramid.js	/^var classarm__compute_1_1_n_e_gaussian_pyramid =$/;"	v
classarm__compute_1_1_n_e_gaussian_pyramid_half	documentation/classarm__compute_1_1_n_e_gaussian_pyramid_half.js	/^var classarm__compute_1_1_n_e_gaussian_pyramid_half =$/;"	v
classarm__compute_1_1_n_e_gaussian_pyramid_hor_kernel	documentation/classarm__compute_1_1_n_e_gaussian_pyramid_hor_kernel.js	/^var classarm__compute_1_1_n_e_gaussian_pyramid_hor_kernel =$/;"	v
classarm__compute_1_1_n_e_gaussian_pyramid_orb	documentation/classarm__compute_1_1_n_e_gaussian_pyramid_orb.js	/^var classarm__compute_1_1_n_e_gaussian_pyramid_orb =$/;"	v
classarm__compute_1_1_n_e_gaussian_pyramid_vert_kernel	documentation/classarm__compute_1_1_n_e_gaussian_pyramid_vert_kernel.js	/^var classarm__compute_1_1_n_e_gaussian_pyramid_vert_kernel =$/;"	v
classarm__compute_1_1_n_e_gradient_kernel	documentation/classarm__compute_1_1_n_e_gradient_kernel.js	/^var classarm__compute_1_1_n_e_gradient_kernel =$/;"	v
classarm__compute_1_1_n_e_h_o_g_block_normalization_kernel	documentation/classarm__compute_1_1_n_e_h_o_g_block_normalization_kernel.js	/^var classarm__compute_1_1_n_e_h_o_g_block_normalization_kernel =$/;"	v
classarm__compute_1_1_n_e_h_o_g_descriptor	documentation/classarm__compute_1_1_n_e_h_o_g_descriptor.js	/^var classarm__compute_1_1_n_e_h_o_g_descriptor =$/;"	v
classarm__compute_1_1_n_e_h_o_g_detector	documentation/classarm__compute_1_1_n_e_h_o_g_detector.js	/^var classarm__compute_1_1_n_e_h_o_g_detector =$/;"	v
classarm__compute_1_1_n_e_h_o_g_detector_kernel	documentation/classarm__compute_1_1_n_e_h_o_g_detector_kernel.js	/^var classarm__compute_1_1_n_e_h_o_g_detector_kernel =$/;"	v
classarm__compute_1_1_n_e_h_o_g_gradient	documentation/classarm__compute_1_1_n_e_h_o_g_gradient.js	/^var classarm__compute_1_1_n_e_h_o_g_gradient =$/;"	v
classarm__compute_1_1_n_e_h_o_g_multi_detection	documentation/classarm__compute_1_1_n_e_h_o_g_multi_detection.js	/^var classarm__compute_1_1_n_e_h_o_g_multi_detection =$/;"	v
classarm__compute_1_1_n_e_h_o_g_orientation_binning_kernel	documentation/classarm__compute_1_1_n_e_h_o_g_orientation_binning_kernel.js	/^var classarm__compute_1_1_n_e_h_o_g_orientation_binning_kernel =$/;"	v
classarm__compute_1_1_n_e_harris_corners	documentation/classarm__compute_1_1_n_e_harris_corners.js	/^var classarm__compute_1_1_n_e_harris_corners =$/;"	v
classarm__compute_1_1_n_e_harris_score_kernel	documentation/classarm__compute_1_1_n_e_harris_score_kernel.js	/^var classarm__compute_1_1_n_e_harris_score_kernel =$/;"	v
classarm__compute_1_1_n_e_histogram	documentation/classarm__compute_1_1_n_e_histogram.js	/^var classarm__compute_1_1_n_e_histogram =$/;"	v
classarm__compute_1_1_n_e_histogram_kernel	documentation/classarm__compute_1_1_n_e_histogram_kernel.js	/^var classarm__compute_1_1_n_e_histogram_kernel =$/;"	v
classarm__compute_1_1_n_e_im2_col	documentation/classarm__compute_1_1_n_e_im2_col.js	/^var classarm__compute_1_1_n_e_im2_col =$/;"	v
classarm__compute_1_1_n_e_im2_col_kernel	documentation/classarm__compute_1_1_n_e_im2_col_kernel.js	/^var classarm__compute_1_1_n_e_im2_col_kernel =$/;"	v
classarm__compute_1_1_n_e_integral_image	documentation/classarm__compute_1_1_n_e_integral_image.js	/^var classarm__compute_1_1_n_e_integral_image =$/;"	v
classarm__compute_1_1_n_e_integral_image_kernel	documentation/classarm__compute_1_1_n_e_integral_image_kernel.js	/^var classarm__compute_1_1_n_e_integral_image_kernel =$/;"	v
classarm__compute_1_1_n_e_l2_normalize_layer	documentation/classarm__compute_1_1_n_e_l2_normalize_layer.js	/^var classarm__compute_1_1_n_e_l2_normalize_layer =$/;"	v
classarm__compute_1_1_n_e_l2_normalize_layer_kernel	documentation/classarm__compute_1_1_n_e_l2_normalize_layer_kernel.js	/^var classarm__compute_1_1_n_e_l2_normalize_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_l_k_tracker_kernel	documentation/classarm__compute_1_1_n_e_l_k_tracker_kernel.js	/^var classarm__compute_1_1_n_e_l_k_tracker_kernel =$/;"	v
classarm__compute_1_1_n_e_laplacian_pyramid	documentation/classarm__compute_1_1_n_e_laplacian_pyramid.js	/^var classarm__compute_1_1_n_e_laplacian_pyramid =$/;"	v
classarm__compute_1_1_n_e_laplacian_reconstruct	documentation/classarm__compute_1_1_n_e_laplacian_reconstruct.js	/^var classarm__compute_1_1_n_e_laplacian_reconstruct =$/;"	v
classarm__compute_1_1_n_e_locally_connected_layer	documentation/classarm__compute_1_1_n_e_locally_connected_layer.js	/^var classarm__compute_1_1_n_e_locally_connected_layer =$/;"	v
classarm__compute_1_1_n_e_locally_connected_matrix_multiply_kernel	documentation/classarm__compute_1_1_n_e_locally_connected_matrix_multiply_kernel.js	/^var classarm__compute_1_1_n_e_locally_connected_matrix_multiply_kernel =$/;"	v
classarm__compute_1_1_n_e_logits1_d_max_kernel	documentation/classarm__compute_1_1_n_e_logits1_d_max_kernel.js	/^var classarm__compute_1_1_n_e_logits1_d_max_kernel =$/;"	v
classarm__compute_1_1_n_e_logits1_d_softmax_kernel	documentation/classarm__compute_1_1_n_e_logits1_d_softmax_kernel.js	/^var classarm__compute_1_1_n_e_logits1_d_softmax_kernel =$/;"	v
classarm__compute_1_1_n_e_magnitude	documentation/classarm__compute_1_1_n_e_magnitude.js	/^var classarm__compute_1_1_n_e_magnitude =$/;"	v
classarm__compute_1_1_n_e_magnitude_phase_kernel	documentation/classarm__compute_1_1_n_e_magnitude_phase_kernel.js	/^var classarm__compute_1_1_n_e_magnitude_phase_kernel =$/;"	v
classarm__compute_1_1_n_e_mean_std_dev	documentation/classarm__compute_1_1_n_e_mean_std_dev.js	/^var classarm__compute_1_1_n_e_mean_std_dev =$/;"	v
classarm__compute_1_1_n_e_mean_std_dev_kernel	documentation/classarm__compute_1_1_n_e_mean_std_dev_kernel.js	/^var classarm__compute_1_1_n_e_mean_std_dev_kernel =$/;"	v
classarm__compute_1_1_n_e_median3x3	documentation/classarm__compute_1_1_n_e_median3x3.js	/^var classarm__compute_1_1_n_e_median3x3 =$/;"	v
classarm__compute_1_1_n_e_median3x3_kernel	documentation/classarm__compute_1_1_n_e_median3x3_kernel.js	/^var classarm__compute_1_1_n_e_median3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_min_max_kernel	documentation/classarm__compute_1_1_n_e_min_max_kernel.js	/^var classarm__compute_1_1_n_e_min_max_kernel =$/;"	v
classarm__compute_1_1_n_e_min_max_kernel.xhtml#a14c484d0c1759b7163e3691ea1bb8bb5	documentation/navtreeindex33.js	/^"classarm__compute_1_1_n_e_min_max_kernel.xhtml#a14c484d0c1759b7163e3691ea1bb8bb5":[5,0,0,567,0],$/;"	p	class:NAVTREEINDEX33
classarm__compute_1_1_n_e_min_max_layer_kernel	documentation/classarm__compute_1_1_n_e_min_max_layer_kernel.js	/^var classarm__compute_1_1_n_e_min_max_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_min_max_location	documentation/classarm__compute_1_1_n_e_min_max_location.js	/^var classarm__compute_1_1_n_e_min_max_location =$/;"	v
classarm__compute_1_1_n_e_min_max_location_kernel	documentation/classarm__compute_1_1_n_e_min_max_location_kernel.js	/^var classarm__compute_1_1_n_e_min_max_location_kernel =$/;"	v
classarm__compute_1_1_n_e_non_linear_filter	documentation/classarm__compute_1_1_n_e_non_linear_filter.js	/^var classarm__compute_1_1_n_e_non_linear_filter =$/;"	v
classarm__compute_1_1_n_e_non_linear_filter_kernel	documentation/classarm__compute_1_1_n_e_non_linear_filter_kernel.js	/^var classarm__compute_1_1_n_e_non_linear_filter_kernel =$/;"	v
classarm__compute_1_1_n_e_non_maxima_suppression3x3	documentation/classarm__compute_1_1_n_e_non_maxima_suppression3x3.js	/^var classarm__compute_1_1_n_e_non_maxima_suppression3x3 =$/;"	v
classarm__compute_1_1_n_e_non_maxima_suppression3x3_kernel	documentation/classarm__compute_1_1_n_e_non_maxima_suppression3x3_kernel.js	/^var classarm__compute_1_1_n_e_non_maxima_suppression3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_normalization_layer	documentation/classarm__compute_1_1_n_e_normalization_layer.js	/^var classarm__compute_1_1_n_e_normalization_layer =$/;"	v
classarm__compute_1_1_n_e_normalization_layer_kernel	documentation/classarm__compute_1_1_n_e_normalization_layer_kernel.js	/^var classarm__compute_1_1_n_e_normalization_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_optical_flow	documentation/classarm__compute_1_1_n_e_optical_flow.js	/^var classarm__compute_1_1_n_e_optical_flow =$/;"	v
classarm__compute_1_1_n_e_permute	documentation/classarm__compute_1_1_n_e_permute.js	/^var classarm__compute_1_1_n_e_permute =$/;"	v
classarm__compute_1_1_n_e_permute_kernel	documentation/classarm__compute_1_1_n_e_permute_kernel.js	/^var classarm__compute_1_1_n_e_permute_kernel =$/;"	v
classarm__compute_1_1_n_e_phase	documentation/classarm__compute_1_1_n_e_phase.js	/^var classarm__compute_1_1_n_e_phase =$/;"	v
classarm__compute_1_1_n_e_pixel_wise_multiplication	documentation/classarm__compute_1_1_n_e_pixel_wise_multiplication.js	/^var classarm__compute_1_1_n_e_pixel_wise_multiplication =$/;"	v
classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel	documentation/classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.js	/^var classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel =$/;"	v
classarm__compute_1_1_n_e_pooling_layer	documentation/classarm__compute_1_1_n_e_pooling_layer.js	/^var classarm__compute_1_1_n_e_pooling_layer =$/;"	v
classarm__compute_1_1_n_e_pooling_layer_kernel	documentation/classarm__compute_1_1_n_e_pooling_layer_kernel.js	/^var classarm__compute_1_1_n_e_pooling_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_quantization_layer	documentation/classarm__compute_1_1_n_e_quantization_layer.js	/^var classarm__compute_1_1_n_e_quantization_layer =$/;"	v
classarm__compute_1_1_n_e_quantization_layer_kernel	documentation/classarm__compute_1_1_n_e_quantization_layer_kernel.js	/^var classarm__compute_1_1_n_e_quantization_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_r_o_i_pooling_layer	documentation/classarm__compute_1_1_n_e_r_o_i_pooling_layer.js	/^var classarm__compute_1_1_n_e_r_o_i_pooling_layer =$/;"	v
classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel	documentation/classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.js	/^var classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_reduction_operation	documentation/classarm__compute_1_1_n_e_reduction_operation.js	/^var classarm__compute_1_1_n_e_reduction_operation =$/;"	v
classarm__compute_1_1_n_e_reduction_operation_kernel	documentation/classarm__compute_1_1_n_e_reduction_operation_kernel.js	/^var classarm__compute_1_1_n_e_reduction_operation_kernel =$/;"	v
classarm__compute_1_1_n_e_remap	documentation/classarm__compute_1_1_n_e_remap.js	/^var classarm__compute_1_1_n_e_remap =$/;"	v
classarm__compute_1_1_n_e_remap_kernel	documentation/classarm__compute_1_1_n_e_remap_kernel.js	/^var classarm__compute_1_1_n_e_remap_kernel =$/;"	v
classarm__compute_1_1_n_e_reshape_layer	documentation/classarm__compute_1_1_n_e_reshape_layer.js	/^var classarm__compute_1_1_n_e_reshape_layer =$/;"	v
classarm__compute_1_1_n_e_reshape_layer_kernel	documentation/classarm__compute_1_1_n_e_reshape_layer_kernel.js	/^var classarm__compute_1_1_n_e_reshape_layer_kernel =$/;"	v
classarm__compute_1_1_n_e_scale	documentation/classarm__compute_1_1_n_e_scale.js	/^var classarm__compute_1_1_n_e_scale =$/;"	v
classarm__compute_1_1_n_e_scale_kernel	documentation/classarm__compute_1_1_n_e_scale_kernel.js	/^var classarm__compute_1_1_n_e_scale_kernel =$/;"	v
classarm__compute_1_1_n_e_scharr3x3	documentation/classarm__compute_1_1_n_e_scharr3x3.js	/^var classarm__compute_1_1_n_e_scharr3x3 =$/;"	v
classarm__compute_1_1_n_e_scharr3x3_kernel	documentation/classarm__compute_1_1_n_e_scharr3x3_kernel.js	/^var classarm__compute_1_1_n_e_scharr3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_separable_convolution_hor_kernel	documentation/classarm__compute_1_1_n_e_separable_convolution_hor_kernel.js	/^var classarm__compute_1_1_n_e_separable_convolution_hor_kernel =$/;"	v
classarm__compute_1_1_n_e_separable_convolution_vert_kernel	documentation/classarm__compute_1_1_n_e_separable_convolution_vert_kernel.js	/^var classarm__compute_1_1_n_e_separable_convolution_vert_kernel =$/;"	v
classarm__compute_1_1_n_e_sobel3x3	documentation/classarm__compute_1_1_n_e_sobel3x3.js	/^var classarm__compute_1_1_n_e_sobel3x3 =$/;"	v
classarm__compute_1_1_n_e_sobel3x3_kernel	documentation/classarm__compute_1_1_n_e_sobel3x3_kernel.js	/^var classarm__compute_1_1_n_e_sobel3x3_kernel =$/;"	v
classarm__compute_1_1_n_e_sobel5x5	documentation/classarm__compute_1_1_n_e_sobel5x5.js	/^var classarm__compute_1_1_n_e_sobel5x5 =$/;"	v
classarm__compute_1_1_n_e_sobel5x5_hor_kernel	documentation/classarm__compute_1_1_n_e_sobel5x5_hor_kernel.js	/^var classarm__compute_1_1_n_e_sobel5x5_hor_kernel =$/;"	v
classarm__compute_1_1_n_e_sobel5x5_hor_kernel.xhtml#ab3fe9be760d9e2faa8cb36872889fc98	documentation/navtreeindex34.js	/^"classarm__compute_1_1_n_e_sobel5x5_hor_kernel.xhtml#ab3fe9be760d9e2faa8cb36872889fc98":[5,0,0,604,2],$/;"	p	class:NAVTREEINDEX34
classarm__compute_1_1_n_e_sobel5x5_vert_kernel	documentation/classarm__compute_1_1_n_e_sobel5x5_vert_kernel.js	/^var classarm__compute_1_1_n_e_sobel5x5_vert_kernel =$/;"	v
classarm__compute_1_1_n_e_sobel7x7	documentation/classarm__compute_1_1_n_e_sobel7x7.js	/^var classarm__compute_1_1_n_e_sobel7x7 =$/;"	v
classarm__compute_1_1_n_e_sobel7x7_hor_kernel	documentation/classarm__compute_1_1_n_e_sobel7x7_hor_kernel.js	/^var classarm__compute_1_1_n_e_sobel7x7_hor_kernel =$/;"	v
classarm__compute_1_1_n_e_sobel7x7_vert_kernel	documentation/classarm__compute_1_1_n_e_sobel7x7_vert_kernel.js	/^var classarm__compute_1_1_n_e_sobel7x7_vert_kernel =$/;"	v
classarm__compute_1_1_n_e_softmax_layer	documentation/classarm__compute_1_1_n_e_softmax_layer.js	/^var classarm__compute_1_1_n_e_softmax_layer =$/;"	v
classarm__compute_1_1_n_e_table_lookup	documentation/classarm__compute_1_1_n_e_table_lookup.js	/^var classarm__compute_1_1_n_e_table_lookup =$/;"	v
classarm__compute_1_1_n_e_table_lookup_kernel	documentation/classarm__compute_1_1_n_e_table_lookup_kernel.js	/^var classarm__compute_1_1_n_e_table_lookup_kernel =$/;"	v
classarm__compute_1_1_n_e_threshold	documentation/classarm__compute_1_1_n_e_threshold.js	/^var classarm__compute_1_1_n_e_threshold =$/;"	v
classarm__compute_1_1_n_e_threshold_kernel	documentation/classarm__compute_1_1_n_e_threshold_kernel.js	/^var classarm__compute_1_1_n_e_threshold_kernel =$/;"	v
classarm__compute_1_1_n_e_transpose	documentation/classarm__compute_1_1_n_e_transpose.js	/^var classarm__compute_1_1_n_e_transpose =$/;"	v
classarm__compute_1_1_n_e_transpose_kernel	documentation/classarm__compute_1_1_n_e_transpose_kernel.js	/^var classarm__compute_1_1_n_e_transpose_kernel =$/;"	v
classarm__compute_1_1_n_e_warp_affine	documentation/classarm__compute_1_1_n_e_warp_affine.js	/^var classarm__compute_1_1_n_e_warp_affine =$/;"	v
classarm__compute_1_1_n_e_warp_perspective	documentation/classarm__compute_1_1_n_e_warp_perspective.js	/^var classarm__compute_1_1_n_e_warp_perspective =$/;"	v
classarm__compute_1_1_n_e_weights_reshape_kernel	documentation/classarm__compute_1_1_n_e_weights_reshape_kernel.js	/^var classarm__compute_1_1_n_e_weights_reshape_kernel =$/;"	v
classarm__compute_1_1_n_e_winograd_convolution_layer	documentation/classarm__compute_1_1_n_e_winograd_convolution_layer.js	/^var classarm__compute_1_1_n_e_winograd_convolution_layer =$/;"	v
classarm__compute_1_1_n_e_winograd_layer_batched_g_e_m_m_kernel	documentation/classarm__compute_1_1_n_e_winograd_layer_batched_g_e_m_m_kernel.js	/^var classarm__compute_1_1_n_e_winograd_layer_batched_g_e_m_m_kernel =$/;"	v
classarm__compute_1_1_n_e_winograd_layer_transform_input_kernel	documentation/classarm__compute_1_1_n_e_winograd_layer_transform_input_kernel.js	/^var classarm__compute_1_1_n_e_winograd_layer_transform_input_kernel =$/;"	v
classarm__compute_1_1_n_e_winograd_layer_transform_output_kernel	documentation/classarm__compute_1_1_n_e_winograd_layer_transform_output_kernel.js	/^var classarm__compute_1_1_n_e_winograd_layer_transform_output_kernel =$/;"	v
classarm__compute_1_1_n_e_winograd_layer_transform_weights_kernel	documentation/classarm__compute_1_1_n_e_winograd_layer_transform_weights_kernel.js	/^var classarm__compute_1_1_n_e_winograd_layer_transform_weights_kernel =$/;"	v
classarm__compute_1_1_normalization_layer_info	documentation/classarm__compute_1_1_normalization_layer_info.js	/^var classarm__compute_1_1_normalization_layer_info =$/;"	v
classarm__compute_1_1_o_m_p_scheduler	documentation/classarm__compute_1_1_o_m_p_scheduler.js	/^var classarm__compute_1_1_o_m_p_scheduler =$/;"	v
classarm__compute_1_1_offset_lifetime_manager	documentation/classarm__compute_1_1_offset_lifetime_manager.js	/^var classarm__compute_1_1_offset_lifetime_manager =$/;"	v
classarm__compute_1_1_offset_memory_pool	documentation/classarm__compute_1_1_offset_memory_pool.js	/^var classarm__compute_1_1_offset_memory_pool =$/;"	v
classarm__compute_1_1_pad_stride_info	documentation/classarm__compute_1_1_pad_stride_info.js	/^var classarm__compute_1_1_pad_stride_info =$/;"	v
classarm__compute_1_1_pixel_value	documentation/classarm__compute_1_1_pixel_value.js	/^var classarm__compute_1_1_pixel_value =$/;"	v
classarm__compute_1_1_pool_manager	documentation/classarm__compute_1_1_pool_manager.js	/^var classarm__compute_1_1_pool_manager =$/;"	v
classarm__compute_1_1_pooling_layer_info	documentation/classarm__compute_1_1_pooling_layer_info.js	/^var classarm__compute_1_1_pooling_layer_info =$/;"	v
classarm__compute_1_1_program	documentation/classarm__compute_1_1_program.js	/^var classarm__compute_1_1_program =$/;"	v
classarm__compute_1_1_program.xhtml#a1615f70129362da8c0c0cd82ef6c1b44	documentation/navtreeindex35.js	/^"classarm__compute_1_1_program.xhtml#a1615f70129362da8c0c0cd82ef6c1b44":[5,0,0,635,2],$/;"	p	class:NAVTREEINDEX35
classarm__compute_1_1_pyramid	documentation/classarm__compute_1_1_pyramid.js	/^var classarm__compute_1_1_pyramid =$/;"	v
classarm__compute_1_1_pyramid_info	documentation/classarm__compute_1_1_pyramid_info.js	/^var classarm__compute_1_1_pyramid_info =$/;"	v
classarm__compute_1_1_r_o_i_pooling_layer_info	documentation/classarm__compute_1_1_r_o_i_pooling_layer_info.js	/^var classarm__compute_1_1_r_o_i_pooling_layer_info =$/;"	v
classarm__compute_1_1_scheduler	documentation/classarm__compute_1_1_scheduler.js	/^var classarm__compute_1_1_scheduler =$/;"	v
classarm__compute_1_1_semaphore	documentation/classarm__compute_1_1_semaphore.js	/^var classarm__compute_1_1_semaphore =$/;"	v
classarm__compute_1_1_single_thread_scheduler	documentation/classarm__compute_1_1_single_thread_scheduler.js	/^var classarm__compute_1_1_single_thread_scheduler =$/;"	v
classarm__compute_1_1_size2_d	documentation/classarm__compute_1_1_size2_d.js	/^var classarm__compute_1_1_size2_d =$/;"	v
classarm__compute_1_1_status	documentation/classarm__compute_1_1_status.js	/^var classarm__compute_1_1_status =$/;"	v
classarm__compute_1_1_steps	documentation/classarm__compute_1_1_steps.js	/^var classarm__compute_1_1_steps =$/;"	v
classarm__compute_1_1_strides	documentation/classarm__compute_1_1_strides.js	/^var classarm__compute_1_1_strides =$/;"	v
classarm__compute_1_1_sub_tensor	documentation/classarm__compute_1_1_sub_tensor.js	/^var classarm__compute_1_1_sub_tensor =$/;"	v
classarm__compute_1_1_sub_tensor_info	documentation/classarm__compute_1_1_sub_tensor_info.js	/^var classarm__compute_1_1_sub_tensor_info =$/;"	v
classarm__compute_1_1_tensor	documentation/classarm__compute_1_1_tensor.js	/^var classarm__compute_1_1_tensor =$/;"	v
classarm__compute_1_1_tensor_allocator	documentation/classarm__compute_1_1_tensor_allocator.js	/^var classarm__compute_1_1_tensor_allocator =$/;"	v
classarm__compute_1_1_tensor_info	documentation/classarm__compute_1_1_tensor_info.js	/^var classarm__compute_1_1_tensor_info =$/;"	v
classarm__compute_1_1_tensor_shape	documentation/classarm__compute_1_1_tensor_shape.js	/^var classarm__compute_1_1_tensor_shape =$/;"	v
classarm__compute_1_1_weights_info	documentation/classarm__compute_1_1_weights_info.js	/^var classarm__compute_1_1_weights_info =$/;"	v
classarm__compute_1_1_window	documentation/classarm__compute_1_1_window.js	/^var classarm__compute_1_1_window =$/;"	v
classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d	documentation/navtreeindex36.js	/^"classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d":[5,0,0,658,15],$/;"	p	class:NAVTREEINDEX36
classarm__compute_1_1_window_1_1_dimension	documentation/classarm__compute_1_1_window_1_1_dimension.js	/^var classarm__compute_1_1_window_1_1_dimension =$/;"	v
classarm__compute_1_1detail_1_1compare__dimension	documentation/classarm__compute_1_1detail_1_1compare__dimension.js	/^var classarm__compute_1_1detail_1_1compare__dimension =$/;"	v
classarm__compute_1_1gles_1_1_n_d_range	documentation/classarm__compute_1_1gles_1_1_n_d_range.js	/^var classarm__compute_1_1gles_1_1_n_d_range =$/;"	v
classarm__compute_1_1graph_1_1_activation_layer_node	documentation/classarm__compute_1_1graph_1_1_activation_layer_node.js	/^var classarm__compute_1_1graph_1_1_activation_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_batch_normalization_layer_node	documentation/classarm__compute_1_1graph_1_1_batch_normalization_layer_node.js	/^var classarm__compute_1_1graph_1_1_batch_normalization_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_const_node	documentation/classarm__compute_1_1graph_1_1_const_node.js	/^var classarm__compute_1_1graph_1_1_const_node =$/;"	v
classarm__compute_1_1graph_1_1_convolution_layer_node	documentation/classarm__compute_1_1graph_1_1_convolution_layer_node.js	/^var classarm__compute_1_1graph_1_1_convolution_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_default_node_visitor	documentation/classarm__compute_1_1graph_1_1_default_node_visitor.js	/^var classarm__compute_1_1graph_1_1_default_node_visitor =$/;"	v
classarm__compute_1_1graph_1_1_depth_concat_sub_tensor_mutator	documentation/classarm__compute_1_1graph_1_1_depth_concat_sub_tensor_mutator.js	/^var classarm__compute_1_1graph_1_1_depth_concat_sub_tensor_mutator =$/;"	v
classarm__compute_1_1graph_1_1_depth_concatenate_layer_node	documentation/classarm__compute_1_1graph_1_1_depth_concatenate_layer_node.js	/^var classarm__compute_1_1graph_1_1_depth_concatenate_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node	documentation/classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node.js	/^var classarm__compute_1_1graph_1_1_depthwise_convolution_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_dot_graph_printer	documentation/classarm__compute_1_1graph_1_1_dot_graph_printer.js	/^var classarm__compute_1_1graph_1_1_dot_graph_printer =$/;"	v
classarm__compute_1_1graph_1_1_dot_graph_visitor	documentation/classarm__compute_1_1graph_1_1_dot_graph_visitor.js	/^var classarm__compute_1_1graph_1_1_dot_graph_visitor =$/;"	v
classarm__compute_1_1graph_1_1_edge	documentation/classarm__compute_1_1graph_1_1_edge.js	/^var classarm__compute_1_1graph_1_1_edge =$/;"	v
classarm__compute_1_1graph_1_1_eltwise_layer_node	documentation/classarm__compute_1_1graph_1_1_eltwise_layer_node.js	/^var classarm__compute_1_1graph_1_1_eltwise_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_flatten_layer_node	documentation/classarm__compute_1_1graph_1_1_flatten_layer_node.js	/^var classarm__compute_1_1graph_1_1_flatten_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_fully_connected_layer_node	documentation/classarm__compute_1_1graph_1_1_fully_connected_layer_node.js	/^var classarm__compute_1_1graph_1_1_fully_connected_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_graph	documentation/classarm__compute_1_1graph_1_1_graph.js	/^var classarm__compute_1_1graph_1_1_graph =$/;"	v
classarm__compute_1_1graph_1_1_graph_context	documentation/classarm__compute_1_1graph_1_1_graph_context.js	/^var classarm__compute_1_1graph_1_1_graph_context =$/;"	v
classarm__compute_1_1graph_1_1_graph_manager	documentation/classarm__compute_1_1graph_1_1_graph_manager.js	/^var classarm__compute_1_1graph_1_1_graph_manager =$/;"	v
classarm__compute_1_1graph_1_1_i_graph_mutator	documentation/classarm__compute_1_1graph_1_1_i_graph_mutator.js	/^var classarm__compute_1_1graph_1_1_i_graph_mutator =$/;"	v
classarm__compute_1_1graph_1_1_i_graph_printer	documentation/classarm__compute_1_1graph_1_1_i_graph_printer.js	/^var classarm__compute_1_1graph_1_1_i_graph_printer =$/;"	v
classarm__compute_1_1graph_1_1_i_node	documentation/classarm__compute_1_1graph_1_1_i_node.js	/^var classarm__compute_1_1graph_1_1_i_node =$/;"	v
classarm__compute_1_1graph_1_1_i_node_visitor	documentation/classarm__compute_1_1graph_1_1_i_node_visitor.js	/^var classarm__compute_1_1graph_1_1_i_node_visitor =$/;"	v
classarm__compute_1_1graph_1_1_i_node_visitor.xhtml#ad1265b49ac3e299a4025cd29987476d3	documentation/navtreeindex37.js	/^"classarm__compute_1_1graph_1_1_i_node_visitor.xhtml#ad1265b49ac3e299a4025cd29987476d3":[5,0,0,2,26,11],$/;"	p	class:NAVTREEINDEX37
classarm__compute_1_1graph_1_1_i_tensor_accessor	documentation/classarm__compute_1_1graph_1_1_i_tensor_accessor.js	/^var classarm__compute_1_1graph_1_1_i_tensor_accessor =$/;"	v
classarm__compute_1_1graph_1_1_i_tensor_handle	documentation/classarm__compute_1_1graph_1_1_i_tensor_handle.js	/^var classarm__compute_1_1graph_1_1_i_tensor_handle =$/;"	v
classarm__compute_1_1graph_1_1_in_place_operation_mutator	documentation/classarm__compute_1_1graph_1_1_in_place_operation_mutator.js	/^var classarm__compute_1_1graph_1_1_in_place_operation_mutator =$/;"	v
classarm__compute_1_1graph_1_1_input_node	documentation/classarm__compute_1_1graph_1_1_input_node.js	/^var classarm__compute_1_1graph_1_1_input_node =$/;"	v
classarm__compute_1_1graph_1_1_node_fusion_mutator	documentation/classarm__compute_1_1graph_1_1_node_fusion_mutator.js	/^var classarm__compute_1_1graph_1_1_node_fusion_mutator =$/;"	v
classarm__compute_1_1graph_1_1_normalization_layer_node	documentation/classarm__compute_1_1graph_1_1_normalization_layer_node.js	/^var classarm__compute_1_1graph_1_1_normalization_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_output_node	documentation/classarm__compute_1_1graph_1_1_output_node.js	/^var classarm__compute_1_1graph_1_1_output_node =$/;"	v
classarm__compute_1_1graph_1_1_pass_manager	documentation/classarm__compute_1_1graph_1_1_pass_manager.js	/^var classarm__compute_1_1graph_1_1_pass_manager =$/;"	v
classarm__compute_1_1graph_1_1_pooling_layer_node	documentation/classarm__compute_1_1graph_1_1_pooling_layer_node.js	/^var classarm__compute_1_1graph_1_1_pooling_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_reshape_layer_node	documentation/classarm__compute_1_1graph_1_1_reshape_layer_node.js	/^var classarm__compute_1_1graph_1_1_reshape_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_softmax_layer_node	documentation/classarm__compute_1_1graph_1_1_softmax_layer_node.js	/^var classarm__compute_1_1graph_1_1_softmax_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_split_layer_node	documentation/classarm__compute_1_1graph_1_1_split_layer_node.js	/^var classarm__compute_1_1graph_1_1_split_layer_node =$/;"	v
classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator	documentation/classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator.js	/^var classarm__compute_1_1graph_1_1_split_layer_sub_tensor_mutator =$/;"	v
classarm__compute_1_1graph_1_1_task_executor	documentation/classarm__compute_1_1graph_1_1_task_executor.js	/^var classarm__compute_1_1graph_1_1_task_executor =$/;"	v
classarm__compute_1_1graph_1_1_tensor	documentation/classarm__compute_1_1graph_1_1_tensor.js	/^var classarm__compute_1_1graph_1_1_tensor =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_backend_registry	documentation/classarm__compute_1_1graph_1_1backends_1_1_backend_registry.js	/^var classarm__compute_1_1graph_1_1backends_1_1_backend_registry =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_c_l_device_backend	documentation/classarm__compute_1_1graph_1_1backends_1_1_c_l_device_backend.js	/^var classarm__compute_1_1graph_1_1backends_1_1_c_l_device_backend =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_c_l_sub_tensor_handle	documentation/classarm__compute_1_1graph_1_1backends_1_1_c_l_sub_tensor_handle.js	/^var classarm__compute_1_1graph_1_1backends_1_1_c_l_sub_tensor_handle =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_c_l_tensor_handle	documentation/classarm__compute_1_1graph_1_1backends_1_1_c_l_tensor_handle.js	/^var classarm__compute_1_1graph_1_1backends_1_1_c_l_tensor_handle =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_g_c_device_backend	documentation/classarm__compute_1_1graph_1_1backends_1_1_g_c_device_backend.js	/^var classarm__compute_1_1graph_1_1backends_1_1_g_c_device_backend =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_g_c_tensor_handle	documentation/classarm__compute_1_1graph_1_1backends_1_1_g_c_tensor_handle.js	/^var classarm__compute_1_1graph_1_1backends_1_1_g_c_tensor_handle =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_i_device_backend	documentation/classarm__compute_1_1graph_1_1backends_1_1_i_device_backend.js	/^var classarm__compute_1_1graph_1_1backends_1_1_i_device_backend =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_n_e_device_backend	documentation/classarm__compute_1_1graph_1_1backends_1_1_n_e_device_backend.js	/^var classarm__compute_1_1graph_1_1backends_1_1_n_e_device_backend =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_n_e_sub_tensor_handle	documentation/classarm__compute_1_1graph_1_1backends_1_1_n_e_sub_tensor_handle.js	/^var classarm__compute_1_1graph_1_1backends_1_1_n_e_sub_tensor_handle =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1_n_e_tensor_handle	documentation/classarm__compute_1_1graph_1_1backends_1_1_n_e_tensor_handle.js	/^var classarm__compute_1_1graph_1_1backends_1_1_n_e_tensor_handle =$/;"	v
classarm__compute_1_1graph_1_1backends_1_1detail_1_1_backend_registrar	documentation/classarm__compute_1_1graph_1_1backends_1_1detail_1_1_backend_registrar.js	/^var classarm__compute_1_1graph_1_1backends_1_1detail_1_1_backend_registrar =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_activation_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_activation_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#ae538c5265a9f26cac7d41eeca26a60a0	documentation/navtreeindex38.js	/^"classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#ae538c5265a9f26cac7d41eeca26a60a0":[5,0,0,2,1,0,0],$/;"	p	class:NAVTREEINDEX38
classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_branch_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_branch_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_branch_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_i_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_i_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_i_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_i_stream	documentation/classarm__compute_1_1graph_1_1frontend_1_1_i_stream.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_i_stream =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_input_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_input_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_input_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_output_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_output_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_output_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_scale_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_scale_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer	documentation/classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_stream	documentation/classarm__compute_1_1graph_1_1frontend_1_1_stream.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_stream =$/;"	v
classarm__compute_1_1graph_1_1frontend_1_1_sub_stream	documentation/classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.js	/^var classarm__compute_1_1graph_1_1frontend_1_1_sub_stream =$/;"	v
classarm__compute_1_1graph__utils_1_1_caffe_preproccessor	documentation/classarm__compute_1_1graph__utils_1_1_caffe_preproccessor.js	/^var classarm__compute_1_1graph__utils_1_1_caffe_preproccessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_dummy_accessor	documentation/classarm__compute_1_1graph__utils_1_1_dummy_accessor.js	/^var classarm__compute_1_1graph__utils_1_1_dummy_accessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_i_preprocessor	documentation/classarm__compute_1_1graph__utils_1_1_i_preprocessor.js	/^var classarm__compute_1_1graph__utils_1_1_i_preprocessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_num_py_accessor	documentation/classarm__compute_1_1graph__utils_1_1_num_py_accessor.js	/^var classarm__compute_1_1graph__utils_1_1_num_py_accessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_num_py_bin_loader	documentation/classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.js	/^var classarm__compute_1_1graph__utils_1_1_num_py_bin_loader =$/;"	v
classarm__compute_1_1graph__utils_1_1_p_p_m_accessor	documentation/classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.js	/^var classarm__compute_1_1graph__utils_1_1_p_p_m_accessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_p_p_m_writer	documentation/classarm__compute_1_1graph__utils_1_1_p_p_m_writer.js	/^var classarm__compute_1_1graph__utils_1_1_p_p_m_writer =$/;"	v
classarm__compute_1_1graph__utils_1_1_random_accessor	documentation/classarm__compute_1_1graph__utils_1_1_random_accessor.js	/^var classarm__compute_1_1graph__utils_1_1_random_accessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_t_f_preproccessor	documentation/classarm__compute_1_1graph__utils_1_1_t_f_preproccessor.js	/^var classarm__compute_1_1graph__utils_1_1_t_f_preproccessor =$/;"	v
classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor	documentation/classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.js	/^var classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor =$/;"	v
classarm__compute_1_1io_1_1_file_handler	documentation/classarm__compute_1_1io_1_1_file_handler.js	/^var classarm__compute_1_1io_1_1_file_handler =$/;"	v
classarm__compute_1_1logging_1_1_date_decorator	documentation/classarm__compute_1_1logging_1_1_date_decorator.js	/^var classarm__compute_1_1logging_1_1_date_decorator =$/;"	v
classarm__compute_1_1logging_1_1_file_printer	documentation/classarm__compute_1_1logging_1_1_file_printer.js	/^var classarm__compute_1_1logging_1_1_file_printer =$/;"	v
classarm__compute_1_1logging_1_1_i_decorator	documentation/classarm__compute_1_1logging_1_1_i_decorator.js	/^var classarm__compute_1_1logging_1_1_i_decorator =$/;"	v
classarm__compute_1_1logging_1_1_log_level_decorator	documentation/classarm__compute_1_1logging_1_1_log_level_decorator.js	/^var classarm__compute_1_1logging_1_1_log_level_decorator =$/;"	v
classarm__compute_1_1logging_1_1_logger	documentation/classarm__compute_1_1logging_1_1_logger.js	/^var classarm__compute_1_1logging_1_1_logger =$/;"	v
classarm__compute_1_1logging_1_1_logger_registry	documentation/classarm__compute_1_1logging_1_1_logger_registry.js	/^var classarm__compute_1_1logging_1_1_logger_registry =$/;"	v
classarm__compute_1_1logging_1_1_printer	documentation/classarm__compute_1_1logging_1_1_printer.js	/^var classarm__compute_1_1logging_1_1_printer =$/;"	v
classarm__compute_1_1logging_1_1_string_decorator	documentation/classarm__compute_1_1logging_1_1_string_decorator.js	/^var classarm__compute_1_1logging_1_1_string_decorator =$/;"	v
classarm__compute_1_1logging_1_1_thread_id_decorator	documentation/classarm__compute_1_1logging_1_1_thread_id_decorator.js	/^var classarm__compute_1_1logging_1_1_thread_id_decorator =$/;"	v
classarm__compute_1_1misc_1_1_i_cloneable	documentation/classarm__compute_1_1misc_1_1_i_cloneable.js	/^var classarm__compute_1_1misc_1_1_i_cloneable =$/;"	v
classarm__compute_1_1strong__type_1_1_strong_type	documentation/classarm__compute_1_1strong__type_1_1_strong_type.js	/^var classarm__compute_1_1strong__type_1_1_strong_type =$/;"	v
classarm__compute_1_1test_1_1_accessor	documentation/classarm__compute_1_1test_1_1_accessor.js	/^var classarm__compute_1_1test_1_1_accessor =$/;"	v
classarm__compute_1_1test_1_1_array_accessor	documentation/classarm__compute_1_1test_1_1_array_accessor.js	/^var classarm__compute_1_1test_1_1_array_accessor =$/;"	v
classarm__compute_1_1test_1_1_assets_library	documentation/classarm__compute_1_1test_1_1_assets_library.js	/^var classarm__compute_1_1test_1_1_assets_library =$/;"	v
classarm__compute_1_1test_1_1_c_l_accessor	documentation/classarm__compute_1_1test_1_1_c_l_accessor.js	/^var classarm__compute_1_1test_1_1_c_l_accessor =$/;"	v
classarm__compute_1_1test_1_1_c_l_accessor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb	documentation/navtreeindex39.js	/^"classarm__compute_1_1test_1_1_c_l_accessor.xhtml#abdd3637f2bbde9d7d0cc0b7bbd8400bb":[5,0,0,9,10,11],$/;"	p	class:NAVTREEINDEX39
classarm__compute_1_1test_1_1_c_l_array_accessor	documentation/classarm__compute_1_1test_1_1_c_l_array_accessor.js	/^var classarm__compute_1_1test_1_1_c_l_array_accessor =$/;"	v
classarm__compute_1_1test_1_1_c_l_h_o_g_accessor	documentation/classarm__compute_1_1test_1_1_c_l_h_o_g_accessor.js	/^var classarm__compute_1_1test_1_1_c_l_h_o_g_accessor =$/;"	v
classarm__compute_1_1test_1_1_c_l_lut_accessor	documentation/classarm__compute_1_1test_1_1_c_l_lut_accessor.js	/^var classarm__compute_1_1test_1_1_c_l_lut_accessor =$/;"	v
classarm__compute_1_1test_1_1_c_l_synthetize_function	documentation/classarm__compute_1_1test_1_1_c_l_synthetize_function.js	/^var classarm__compute_1_1test_1_1_c_l_synthetize_function =$/;"	v
classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border	documentation/classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.js	/^var classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border =$/;"	v
classarm__compute_1_1test_1_1_g_c_accessor	documentation/classarm__compute_1_1test_1_1_g_c_accessor.js	/^var classarm__compute_1_1test_1_1_g_c_accessor =$/;"	v
classarm__compute_1_1test_1_1_h_o_g_accessor	documentation/classarm__compute_1_1test_1_1_h_o_g_accessor.js	/^var classarm__compute_1_1test_1_1_h_o_g_accessor =$/;"	v
classarm__compute_1_1test_1_1_i_accessor	documentation/classarm__compute_1_1test_1_1_i_accessor.js	/^var classarm__compute_1_1test_1_1_i_accessor =$/;"	v
classarm__compute_1_1test_1_1_i_array_accessor	documentation/classarm__compute_1_1test_1_1_i_array_accessor.js	/^var classarm__compute_1_1test_1_1_i_array_accessor =$/;"	v
classarm__compute_1_1test_1_1_i_h_o_g_accessor	documentation/classarm__compute_1_1test_1_1_i_h_o_g_accessor.js	/^var classarm__compute_1_1test_1_1_i_h_o_g_accessor =$/;"	v
classarm__compute_1_1test_1_1_i_lut_accessor	documentation/classarm__compute_1_1test_1_1_i_lut_accessor.js	/^var classarm__compute_1_1test_1_1_i_lut_accessor =$/;"	v
classarm__compute_1_1test_1_1_lut_accessor	documentation/classarm__compute_1_1test_1_1_lut_accessor.js	/^var classarm__compute_1_1test_1_1_lut_accessor =$/;"	v
classarm__compute_1_1test_1_1_n_e_synthetize_function	documentation/classarm__compute_1_1test_1_1_n_e_synthetize_function.js	/^var classarm__compute_1_1test_1_1_n_e_synthetize_function =$/;"	v
classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border	documentation/classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.js	/^var classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border =$/;"	v
classarm__compute_1_1test_1_1_padding_calculator	documentation/classarm__compute_1_1test_1_1_padding_calculator.js	/^var classarm__compute_1_1test_1_1_padding_calculator =$/;"	v
classarm__compute_1_1test_1_1_raw_lut_accessor	documentation/classarm__compute_1_1test_1_1_raw_lut_accessor.js	/^var classarm__compute_1_1test_1_1_raw_lut_accessor =$/;"	v
classarm__compute_1_1test_1_1_raw_tensor	documentation/classarm__compute_1_1test_1_1_raw_tensor.js	/^var classarm__compute_1_1test_1_1_raw_tensor =$/;"	v
classarm__compute_1_1test_1_1_simple_tensor	documentation/classarm__compute_1_1test_1_1_simple_tensor.js	/^var classarm__compute_1_1test_1_1_simple_tensor =$/;"	v
classarm__compute_1_1test_1_1_tensor_cache	documentation/classarm__compute_1_1test_1_1_tensor_cache.js	/^var classarm__compute_1_1test_1_1_tensor_cache =$/;"	v
classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point	documentation/classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point.js	/^var classarm__compute_1_1test_1_1fixed__point__arithmetic_1_1fixed__point =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_command_line_parser	documentation/classarm__compute_1_1test_1_1framework_1_1_command_line_parser.js	/^var classarm__compute_1_1test_1_1framework_1_1_command_line_parser =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_common_options	documentation/classarm__compute_1_1test_1_1framework_1_1_common_options.js	/^var classarm__compute_1_1test_1_1framework_1_1_common_options =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory	documentation/classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.js	/^var classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_enum_list_option	documentation/classarm__compute_1_1test_1_1framework_1_1_enum_list_option.js	/^var classarm__compute_1_1test_1_1framework_1_1_enum_list_option =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_enum_option	documentation/classarm__compute_1_1test_1_1framework_1_1_enum_option.js	/^var classarm__compute_1_1test_1_1framework_1_1_enum_option =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_file_not_found	documentation/classarm__compute_1_1test_1_1framework_1_1_file_not_found.js	/^var classarm__compute_1_1test_1_1framework_1_1_file_not_found =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_fixture	documentation/classarm__compute_1_1test_1_1framework_1_1_fixture.js	/^var classarm__compute_1_1test_1_1framework_1_1_fixture =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_framework	documentation/classarm__compute_1_1test_1_1framework_1_1_framework.js	/^var classarm__compute_1_1test_1_1framework_1_1_framework =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a47fbbce86aea0ba4a9d539c069f840c9	documentation/navtreeindex40.js	/^"classarm__compute_1_1test_1_1framework_1_1_framework.xhtml#a47fbbce86aea0ba4a9d539c069f840c9":[5,0,0,9,3,10,9],$/;"	p	class:NAVTREEINDEX40
classarm__compute_1_1test_1_1framework_1_1_instrument	documentation/classarm__compute_1_1test_1_1framework_1_1_instrument.js	/^var classarm__compute_1_1test_1_1framework_1_1_instrument =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_instruments_stats	documentation/classarm__compute_1_1test_1_1framework_1_1_instruments_stats.js	/^var classarm__compute_1_1test_1_1framework_1_1_instruments_stats =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_j_s_o_n_printer	documentation/classarm__compute_1_1test_1_1framework_1_1_j_s_o_n_printer.js	/^var classarm__compute_1_1test_1_1framework_1_1_j_s_o_n_printer =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_list_option	documentation/classarm__compute_1_1test_1_1framework_1_1_list_option.js	/^var classarm__compute_1_1test_1_1framework_1_1_list_option =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_mali_counter	documentation/classarm__compute_1_1test_1_1framework_1_1_mali_counter.js	/^var classarm__compute_1_1test_1_1framework_1_1_mali_counter =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage	documentation/classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.js	/^var classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_open_c_l_timer	documentation/classarm__compute_1_1test_1_1framework_1_1_open_c_l_timer.js	/^var classarm__compute_1_1test_1_1framework_1_1_open_c_l_timer =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_option	documentation/classarm__compute_1_1test_1_1framework_1_1_option.js	/^var classarm__compute_1_1test_1_1framework_1_1_option =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_p_m_u	documentation/classarm__compute_1_1test_1_1framework_1_1_p_m_u.js	/^var classarm__compute_1_1test_1_1framework_1_1_p_m_u =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_p_m_u_counter	documentation/classarm__compute_1_1test_1_1framework_1_1_p_m_u_counter.js	/^var classarm__compute_1_1test_1_1framework_1_1_p_m_u_counter =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_pretty_printer	documentation/classarm__compute_1_1test_1_1framework_1_1_pretty_printer.js	/^var classarm__compute_1_1test_1_1framework_1_1_pretty_printer =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_printer	documentation/classarm__compute_1_1test_1_1framework_1_1_printer.js	/^var classarm__compute_1_1test_1_1framework_1_1_printer =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_profiler	documentation/classarm__compute_1_1test_1_1framework_1_1_profiler.js	/^var classarm__compute_1_1test_1_1framework_1_1_profiler =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_scheduler_timer	documentation/classarm__compute_1_1test_1_1framework_1_1_scheduler_timer.js	/^var classarm__compute_1_1test_1_1framework_1_1_scheduler_timer =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_simple_option	documentation/classarm__compute_1_1test_1_1framework_1_1_simple_option.js	/^var classarm__compute_1_1test_1_1framework_1_1_simple_option =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory	documentation/classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.js	/^var classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_test_case	documentation/classarm__compute_1_1test_1_1framework_1_1_test_case.js	/^var classarm__compute_1_1test_1_1framework_1_1_test_case =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_test_case_factory	documentation/classarm__compute_1_1test_1_1framework_1_1_test_case_factory.js	/^var classarm__compute_1_1test_1_1framework_1_1_test_case_factory =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_test_error	documentation/classarm__compute_1_1test_1_1framework_1_1_test_error.js	/^var classarm__compute_1_1test_1_1framework_1_1_test_error =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_test_filter	documentation/classarm__compute_1_1test_1_1framework_1_1_test_filter.js	/^var classarm__compute_1_1test_1_1framework_1_1_test_filter =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_toggle_option	documentation/classarm__compute_1_1test_1_1framework_1_1_toggle_option.js	/^var classarm__compute_1_1test_1_1framework_1_1_toggle_option =$/;"	v
classarm__compute_1_1test_1_1framework_1_1_wall_clock_timer	documentation/classarm__compute_1_1test_1_1framework_1_1_wall_clock_timer.js	/^var classarm__compute_1_1test_1_1framework_1_1_wall_clock_timer =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_named_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_named_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_named_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset.xhtml#a18b86dafc894ede9c2b71030a731a106	documentation/navtreeindex41.js	/^"classarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset.xhtml#a18b86dafc894ede9c2b71030a731a106":[5,0,0,9,3,0,9,1],$/;"	p	class:NAVTREEINDEX41
classarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset	documentation/classarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset.js	/^var classarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset =$/;"	v
classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_case_registrar	documentation/classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_case_registrar.js	/^var classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_case_registrar =$/;"	v
classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar	documentation/classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar.js	/^var classarm__compute_1_1test_1_1framework_1_1detail_1_1_test_suite_registrar =$/;"	v
classarm__compute_1_1test_1_1networks_1_1_alex_net_network	documentation/classarm__compute_1_1test_1_1networks_1_1_alex_net_network.js	/^var classarm__compute_1_1test_1_1networks_1_1_alex_net_network =$/;"	v
classarm__compute_1_1test_1_1networks_1_1_le_net5_network	documentation/classarm__compute_1_1test_1_1networks_1_1_le_net5_network.js	/^var classarm__compute_1_1test_1_1networks_1_1_le_net5_network =$/;"	v
classarm__compute_1_1test_1_1networks_1_1_mobile_net_network	documentation/classarm__compute_1_1test_1_1networks_1_1_mobile_net_network.js	/^var classarm__compute_1_1test_1_1networks_1_1_mobile_net_network =$/;"	v
classarm__compute_1_1test_1_1networks_1_1_mobile_net_v1_network	documentation/classarm__compute_1_1test_1_1networks_1_1_mobile_net_v1_network.js	/^var classarm__compute_1_1test_1_1networks_1_1_mobile_net_v1_network =$/;"	v
classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance	documentation/classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance.js	/^var classarm__compute_1_1test_1_1validation_1_1_absolute_tolerance =$/;"	v
classarm__compute_1_1test_1_1validation_1_1_relative_tolerance	documentation/classarm__compute_1_1test_1_1validation_1_1_relative_tolerance.js	/^var classarm__compute_1_1test_1_1validation_1_1_relative_tolerance =$/;"	v
classarm__compute_1_1tuners_1_1_bifrost_tuner	documentation/classarm__compute_1_1tuners_1_1_bifrost_tuner.js	/^var classarm__compute_1_1tuners_1_1_bifrost_tuner =$/;"	v
classarm__compute_1_1utils_1_1_example	documentation/classarm__compute_1_1utils_1_1_example.js	/^var classarm__compute_1_1utils_1_1_example =$/;"	v
classarm__compute_1_1utils_1_1_n_p_y_loader	documentation/classarm__compute_1_1utils_1_1_n_p_y_loader.js	/^var classarm__compute_1_1utils_1_1_n_p_y_loader =$/;"	v
classarm__compute_1_1utils_1_1_p_p_m_loader	documentation/classarm__compute_1_1utils_1_1_p_p_m_loader.js	/^var classarm__compute_1_1utils_1_1_p_p_m_loader =$/;"	v
classarm__compute_1_1utils_1_1iterable_1_1reverse__iterable	documentation/classarm__compute_1_1utils_1_1iterable_1_1reverse__iterable.js	/^var classarm__compute_1_1utils_1_1iterable_1_1reverse__iterable =$/;"	v
classarm__compute_1_1utils_1_1signal_1_1detail_1_1_signal_impl_3_01_return_type_07_args_8_8_8_08_4	documentation/classarm__compute_1_1utils_1_1signal_1_1detail_1_1_signal_impl_3_01_return_type_07_args_8_8_8_08_4.js	/^var classarm__compute_1_1utils_1_1signal_1_1detail_1_1_signal_impl_3_01_return_type_07_args_8_8_8_08_4 =$/;"	v
cleanup	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^void GCKernel::cleanup()$/;"	f	class:GCKernel
clear	arm_compute/core/IArray.h	/^    void clear()$/;"	f	class:arm_compute::IArray
clear	include/CL/cl.hpp	/^    void clear()$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
clear	src/core/CL/ICLTensor.cpp	/^void ICLTensor::clear(cl::CommandQueue &q)$/;"	f	class:ICLTensor
clear	src/core/GLES_COMPUTE/IGCTensor.cpp	/^void IGCTensor::clear()$/;"	f	class:IGCTensor
clear	src/core/IDistribution.cpp	/^void IDistribution::clear() const$/;"	f	class:IDistribution
clear	src/graph/PassManager.cpp	/^void PassManager::clear()$/;"	f	class:arm_compute::graph::PassManager
clear	src/runtime/CL/CLLut.cpp	/^void CLLut::clear()$/;"	f	class:CLLut
clear	src/runtime/Lut.cpp	/^void Lut::clear()$/;"	f	class:Lut
clear	tests/networks/AlexNetNetwork.h	/^    void clear()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
clear	tests/networks/LeNet5Network.h	/^    void clear()$/;"	f	class:arm_compute::test::networks::LeNet5Network
clear	tests/networks/MobileNetNetwork.h	/^    void clear()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
clear	tests/networks/MobileNetV1Network.h	/^    void clear()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
clear_arguments	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    void clear_arguments()$/;"	f	class:arm_compute::GCKernel
clear_programs_cache	arm_compute/core/CL/CLKernelLibrary.h	/^    void clear_programs_cache()$/;"	f	class:arm_compute::CLKernelLibrary
clear_test_info	tests/framework/Framework.cpp	/^void Framework::clear_test_info()$/;"	f	class:arm_compute::test::framework::Framework
clone	src/core/SubTensorInfo.cpp	/^std::unique_ptr<ITensorInfo> SubTensorInfo::clone() const$/;"	f	class:SubTensorInfo
clone	src/core/TensorInfo.cpp	/^std::unique_ptr<ITensorInfo> TensorInfo::clone() const$/;"	f	class:TensorInfo
close	src/core/utils/io/FileHandler.cpp	/^void FileHandler::close()$/;"	f	class:FileHandler
close	tests/framework/instruments/PMU.cpp	/^void PMU::close()$/;"	f	class:arm_compute::test::framework::PMU
clz	tests/validation/FixedPoint.h	/^constexpr int clz(T value)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
coherency	tests/framework/instruments/hwc.hpp	/^    uint32_t                     coherency;$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group_info
coherency_info	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_coherent_group_info coherency_info;$/;"	m	struct:mali_userspace::mali_base_gpu_props
coherency_mode	tests/framework/instruments/hwc.hpp	/^    uint32_t coherency_mode;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
collapse	arm_compute/core/Dimensions.h	/^    void collapse(const size_t n, const size_t first = 0)$/;"	f	class:arm_compute::Dimensions
collapse	arm_compute/core/TensorShape.h	/^    void collapse(size_t n, size_t first = 0)$/;"	f	class:arm_compute::TensorShape
collapse_from	arm_compute/core/Dimensions.h	/^    void collapse_from(size_t start)$/;"	f	class:arm_compute::Dimensions
collapse_if_possible	arm_compute/core/Window.h	/^    Window collapse_if_possible(const Window &full_window, size_t first, bool *has_collapsed = nullptr) const$/;"	f	class:arm_compute::Window
collapsed_from	arm_compute/core/TensorShape.h	/^    TensorShape collapsed_from(size_t start) const$/;"	f	class:arm_compute::TensorShape
color__convert_8cl	documentation/color__convert_8cl.js	/^var color__convert_8cl =$/;"	v
color_output	tests/framework/command_line/CommonOptions.h	/^    ToggleOption                               *color_output;   \/**< Color output option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
combine	tests/framework/datasets/CartesianProductDataset.h	/^CartesianProductDataset<T, U> combine(T &&dataset1, U &&dataset2)$/;"	f	namespace:arm_compute::test::framework::dataset
combine_3C	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::combine_3C(const Window &win)$/;"	f	class:NEChannelCombineKernel
combine_4C	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::combine_4C(const Window &win)$/;"	f	class:NEChannelCombineKernel
combine_YUV_1p	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::combine_YUV_1p(const Window &win)$/;"	f	class:NEChannelCombineKernel
combine_YUV_2p	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::combine_YUV_2p(const Window &win)$/;"	f	class:NEChannelCombineKernel
combine_YUV_3p	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::combine_YUV_3p(const Window &win)$/;"	f	class:NEChannelCombineKernel
common_promoted_signed_type	tests/Utils.h	/^struct common_promoted_signed_type$/;"	s	namespace:arm_compute::test
common_promoted_unsigned_type	tests/Utils.h	/^struct common_promoted_unsigned_type$/;"	s	namespace:arm_compute::test
comp_size	include/libnpy/npy.hpp	/^inline ndarray_len_t comp_size(const std::vector<ndarray_len_t>& shape) {$/;"	f	namespace:npy
compare	tests/validation/Validation.h	/^struct compare<AbsoluteTolerance<U>> : public compare_base<AbsoluteTolerance<U>>$/;"	s	namespace:arm_compute::test::validation
compare	tests/validation/Validation.h	/^struct compare<RelativeTolerance<U>> : public compare_base<RelativeTolerance<U>>$/;"	s	namespace:arm_compute::test::validation
compare_base	tests/validation/Validation.h	/^    compare_base(typename T::value_type target, typename T::value_type reference, T tolerance = T(0))$/;"	f	struct:arm_compute::test::validation::compare_base
compare_base	tests/validation/Validation.h	/^struct compare_base$/;"	s	namespace:arm_compute::test::validation
compare_detection_window	src/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.cpp	/^bool compare_detection_window(const DetectionWindow &lhs, const DetectionWindow &rhs)$/;"	f	namespace:__anon229
compare_detection_windows	tests/validation/Validation.h	/^std::pair<int64_t, int64_t> compare_detection_windows(T first1, T last1, U first2, U last2, V tolerance)$/;"	f	namespace:arm_compute::test::validation
compare_dimension	arm_compute/core/Validate.h	/^    compare_dimension(const Dimensions<T> &dim, const char *function, const char *file, int line)$/;"	f	class:arm_compute::detail::compare_dimension
compare_dimension	arm_compute/core/Validate.h	/^class compare_dimension$/;"	c	namespace:arm_compute::detail
compare_dimensions	tests/validation/Validation.h	/^bool compare_dimensions(const Dimensions<T> &dimensions1, const Dimensions<T> &dimensions2, const DataLayout &data_layout = DataLayout::NCHW)$/;"	f	namespace:arm_compute::test::validation
compare_exchange	include/CL/cl.hpp	/^    inline int compare_exchange(volatile int * dest, int exchange, int comparand)$/;"	f	namespace:cl::detail
compare_keypoints	tests/validation/Validation.h	/^std::pair<int64_t, int64_t> compare_keypoints(T first1, T last1, U first2, U last2, V tolerance, bool check_mismatches = true)$/;"	f	namespace:arm_compute::test::validation
compare_tensor	utils/Utils.h	/^int compare_tensor(ITensor &tensor1, ITensor &tensor2)$/;"	f	namespace:arm_compute::utils
compat_value	tests/framework/instruments/hwc.hpp	/^    uint32_t compat_value;$/;"	m	union:mali_userspace::__anon390::kbase_pointer
compatibility	include/CL/cl2.hpp	/^    namespace compatibility {$/;"	n	namespace:cl
compatibility	include/CL/cl2.hpp	/^namespace compatibility {$/;"	n	namespace:cl
compile	include/CL/cl.hpp	/^	cl_int compile($/;"	f	class:cl::Program
compile	include/CL/cl2.hpp	/^    cl_int compile($/;"	f	class:cl::Program
compile_shader	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GLuint GCProgram::compile_shader(const std::string &build_options)$/;"	f	class:GCProgram
compute_alexnet	tests/validation/CL/SYSTEM/AlexNet.cpp	/^std::vector<unsigned int> compute_alexnet(DataType dt, unsigned int batches, std::string input_file)$/;"	f	namespace:arm_compute::test::validation::__anon445
compute_alexnet	tests/validation/NEON/SYSTEM/AlexNet.cpp	/^std::vector<unsigned int> compute_alexnet(DataType dt, unsigned int batches, std::string input_file)$/;"	f	namespace:arm_compute::test::validation::__anon520
compute_bilinear_interpolation	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^inline int32x4_t compute_bilinear_interpolation(int16x8_t top_row, int16x8_t bottom_row, int16x4_t w00, int16x4_t w01, int16x4_t w10, int16x4_t w11, int32x4_t shift)$/;"	f	namespace:__anon275
compute_col2im_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_col2im_shape(const ITensorInfo &input, std::pair<unsigned int, unsigned int> convolved_dims)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_deconvolution_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_deconvolution_shape(const ITensorInfo &input, unsigned int sx, unsigned int sy, unsigned int inner_border_right, unsigned int inner_border_top, const PadStrideInfo &info)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_deep_convolution_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_deep_convolution_shape(const ITensorInfo &input, const ITensorInfo &weights, PadStrideInfo conv_info)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_depthwise_convolution_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_depthwise_convolution_shape(const ITensorInfo &input, const ITensorInfo &weights, PadStrideInfo conv_info, unsigned int depth_multiplier)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_derivative	tests/validation/reference/OpticalFlow.cpp	/^std::vector<int> compute_derivative(const SimpleTensor<T> &input, const InternalKeyPoint &keypoint,$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
compute_fully_connected_reshaped_weights_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_fully_connected_reshaped_weights_shape(const ITensorInfo *input, bool transpose_weights, bool is_batched_fc_layer, const int interleave)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_hor_sobel_x	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^inline int32x4x2_t compute_hor_sobel_x(const int32x4x4_t &data)$/;"	f	namespace:__anon295
compute_hor_sobel_y	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^inline int32x4x2_t compute_hor_sobel_y(const int32x4x4_t &data)$/;"	f	namespace:__anon295
compute_im2col_conv_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_im2col_conv_shape(const ITensorInfo *input, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, const Size2D &dilation)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_im2col_fc_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_im2col_fc_shape(const ITensorInfo *input, const int num_input_dimensions = 3)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_im2col_flatten_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_im2col_flatten_shape(const ITensorInfo *input)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_image_mismatch_vector	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^std::pair<int, int> NELKTrackerKernel::compute_image_mismatch_vector(const NELKInternalKeypoint &old_keypoint, const NELKInternalKeypoint &new_keypoint, const int32_t *bilinear_ix,$/;"	f	class:NELKTrackerKernel
compute_interleave_custom_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_interleave_custom_shape(const TensorShape &input, const int x_interleave, const int y_interleave)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_interleaved_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_interleaved_shape(const ITensorInfo &a, int mult_interleave4x4_height = 1)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_lenet5	tests/validation/CL/SYSTEM/LeNet5.cpp	/^std::vector<unsigned int> compute_lenet5(unsigned int batches, std::string input_file)$/;"	f	namespace:arm_compute::test::validation::__anon446
compute_lenet5	tests/validation/NEON/SYSTEM/LeNet5.cpp	/^std::vector<unsigned int> compute_lenet5(unsigned int batches, std::string input_file)$/;"	f	namespace:arm_compute::test::validation::__anon521
compute_magnitude	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline int16x8x2_t compute_magnitude<MagnitudeType::L1NORM>(const int16x8x2_t &in0, const int16x8x2_t &gx)$/;"	f	namespace:fp16
compute_magnitude	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline int16x8x2_t compute_magnitude<MagnitudeType::L2NORM>(const int16x8x2_t &in0, const int16x8x2_t &gx)$/;"	f	namespace:fp16
compute_min_max	tests/validation/reference/MinMaxLocation.cpp	/^void compute_min_max(const SimpleTensor<T> &src, T &min, T &max)$/;"	f	namespace:arm_compute::test::validation::reference
compute_min_max_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_min_max_shape(const ITensorInfo *input)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_mm_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_mm_shape(const ITensorInfo &input0, const ITensorInfo &input1, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_output_descriptor	src/graph/nodes/ConvolutionLayerNode.cpp	/^TensorDescriptor ConvolutionLayerNode::compute_output_descriptor(const TensorDescriptor &input_descriptor,$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
compute_output_descriptor	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^TensorDescriptor DepthConcatenateLayerNode::compute_output_descriptor(const std::vector<TensorDescriptor> &input_descriptors)$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
compute_output_descriptor	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^TensorDescriptor DepthwiseConvolutionLayerNode::compute_output_descriptor(const TensorDescriptor &input_descriptor,$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
compute_output_descriptor	src/graph/nodes/FullyConnectedLayer.cpp	/^TensorDescriptor FullyConnectedLayerNode::compute_output_descriptor(const TensorDescriptor &input_descriptor,$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
compute_output_descriptor	src/graph/nodes/PoolingLayerNode.cpp	/^TensorDescriptor PoolingLayerNode::compute_output_descriptor(const TensorDescriptor &input_descriptor,$/;"	f	class:arm_compute::graph::PoolingLayerNode
compute_output_descriptor	src/graph/nodes/SplitLayerNode.cpp	/^std::pair<TensorDescriptor, Coordinates> SplitLayerNode::compute_output_descriptor(const TensorDescriptor &input_descriptor,$/;"	f	class:arm_compute::graph::SplitLayerNode
compute_output_shape	src/core/CL/kernels/CLDepthwiseVectorToTensorKernel.cpp	/^TensorShape compute_output_shape(const TensorShape &input, size_t conv_w, size_t conv_h)$/;"	f	namespace:__anon192
compute_permutation_output_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_permutation_output_shape(const ITensorInfo &input, const PermutationVector &perm)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_permutation_paramaters	utils/GraphUtils.cpp	/^std::pair<arm_compute::TensorShape, arm_compute::PermutationVector> compute_permutation_paramaters(const arm_compute::TensorShape &shape,$/;"	f	namespace:__anon550
compute_phase	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline uint8x16_t compute_phase<PhaseType::SIGNED>(const int16x8x2_t &in0, const int16x8x2_t &gx)$/;"	f	namespace:fp16
compute_phase	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline uint8x16_t compute_phase<PhaseType::UNSIGNED>(const int16x8x2_t &in0, const int16x8x2_t &gx)$/;"	f	namespace:fp16
compute_pool_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_pool_shape(const ITensorInfo &input, PoolingLayerInfo pool_info)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_reductionA_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_reductionA_shape(const ITensorInfo &b)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_reductionB_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_reductionB_shape(const ITensorInfo &a)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_reference	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type0, DataType data_type1, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AbsoluteDifferenceValidationFixture
compute_reference	tests/validation/fixtures/AccumulateFixture.h	/^    SimpleTensor<T2> compute_reference(const TensorShape &shape, DataType data_type, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AccumulateBaseValidationFixture
compute_reference	tests/validation/fixtures/ActivationLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, ActivationLayerInfo info, DataType data_type, int fixed_point_position, QuantizationInfo quantization_info)$/;"	f	class:arm_compute::test::validation::ActivationValidationGenericFixture
compute_reference	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape0, const TensorShape &shape1, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy,$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionBroadcastValidationFixedPointFixture
compute_reference	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^    SimpleTensor<T3> compute_reference(const TensorShape &shape, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::ArithmeticSubtractionValidationFixedPointFixture
compute_reference	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape0, const TensorShape &shape1, float epsilon, ActivationLayerInfo act_info, DataType dt, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::BatchNormalizationLayerValidationFixedPointFixture
compute_reference	tests/validation/fixtures/BitwiseAndFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseAndValidationFixture
compute_reference	tests/validation/fixtures/BitwiseNotFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseNotValidationFixture
compute_reference	tests/validation/fixtures/BitwiseOrFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseOrValidationFixture
compute_reference	tests/validation/fixtures/BitwiseXorFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseXorValidationFixture
compute_reference	tests/validation/fixtures/Box3x3Fixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Box3x3ValidationFixture
compute_reference	tests/validation/fixtures/ChannelCombineFixture.h	/^    std::vector<SimpleTensor<T>> compute_reference(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::validation::ChannelCombineValidationFixture
compute_reference	tests/validation/fixtures/ChannelExtractFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, Format format, Channel channel)$/;"	f	class:arm_compute::test::validation::ChannelExtractValidationFixture
compute_reference	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, unsigned int num_groups)$/;"	f	class:arm_compute::test::validation::ChannelShuffleLayerValidationFixture
compute_reference	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const DataLayout training_data_layout, const DataType data_type)$/;"	f	class:arm_compute::test::validation::ConvertFullyConnectedWeightsValidationFixture
compute_reference	tests/validation/fixtures/ConvolutionFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType output_data_type, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixture
compute_reference	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::ConvolutionValidationGenericFixture
compute_reference	tests/validation/fixtures/CopyFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::CopyFixture
compute_reference	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape,$/;"	f	class:arm_compute::test::validation::DeconvolutionLayerFixtureBase
compute_reference	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^    SimpleTensor<T> compute_reference(std::vector<TensorShape> shapes, DataType data_type)$/;"	f	class:arm_compute::test::validation::DepthConcatenateLayerValidationFixture
compute_reference	tests/validation/fixtures/DepthConvertLayerFixture.h	/^    SimpleTensor<T2> compute_reference(const TensorShape &shape, DataType dt_in, DataType dt_out, ConvertPolicy policy, uint32_t shift, uint32_t fixed_point_position)$/;"	f	class:arm_compute::test::validation::DepthConvertLayerValidationFixedPointFixture
compute_reference	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &in_shape, const TensorShape &weights_shape, const TensorShape &biases_shape, const TensorShape &out_shape, const PadStrideInfo &pad_stride_info,$/;"	f	class:arm_compute::test::validation::DepthwiseConvolutionLayerValidationGenericFixture
compute_reference	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &in_shape, const TensorShape &depthwise_weights_shape, const TensorShape &depthwise_biases_shape, const TensorShape &depthwise_out_shape,$/;"	f	class:arm_compute::test::validation::DepthwiseSeparableConvolutionValidationFixture
compute_reference	tests/validation/fixtures/DequantizationLayerFixture.h	/^    SimpleTensor<float> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::DequantizationValidationFixedPointFixture
compute_reference	tests/validation/fixtures/DerivativeFixture.h	/^    std::pair<SimpleTensor<U>, SimpleTensor<U>> compute_reference(const TensorShape &shape, BorderMode border_mode, Format format, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::DerivativeValidationFixture
compute_reference	tests/validation/fixtures/DilateFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::DilateValidationFixture
compute_reference	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericFixture
compute_reference	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericTensorShiftFixture
compute_reference	tests/validation/fixtures/DropoutLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::DropoutLayerValidationFixture
compute_reference	tests/validation/fixtures/EqualizeHistogramFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::EqualizeHistogramValidationFixture
compute_reference	tests/validation/fixtures/ErodeFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::ErodeValidationFixture
compute_reference	tests/validation/fixtures/FastCornersFixture.h	/^    std::vector<KeyPoint> compute_reference(const std::string &image, Format format, float threshold, bool suppress_nonmax, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::FastCornersValidationFixture
compute_reference	tests/validation/fixtures/FixedPointFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType dt, FixedPointOp op, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::FixedPointValidationFixture
compute_reference	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType dt_in1, DataType dt_in2, float scale, ConvertPolicy convert_policy, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::FixedPointPixelWiseMultiplicationValidationFixture
compute_reference	tests/validation/fixtures/FlattenLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, const TensorShape &shape_flatten, DataType data_type)$/;"	f	class:arm_compute::test::validation::FlattenLayerValidationFixture
compute_reference	tests/validation/fixtures/FloorFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::FloorValidationFixture
compute_reference	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, bool transpose_weights,$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationGenericFixture
compute_reference	tests/validation/fixtures/GEMMFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape_a, const TensorShape &shape_b, const TensorShape &shape_c, const TensorShape &output_shape, float alpha, float beta,$/;"	f	class:arm_compute::test::validation::GEMMValidationFixedPointFixture
compute_reference	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape_a, const TensorShape &shape_b, DataType data_type, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::GEMMInterleave4x4ValidationFixedPointFixture
compute_reference	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^    SimpleTensor<int32_t> compute_reference(const TensorShape &shape_a, const TensorShape &shape_b, const TensorShape &shape_c)$/;"	f	class:arm_compute::test::validation::GEMMLowpAssemblyFixture
compute_reference	tests/validation/fixtures/GEMMLowpFixture.h	/^    SimpleTensor<int32_t> compute_reference(const TensorShape &shape_a, const TensorShape &shape_b, const TensorShape &shape_c,$/;"	f	class:arm_compute::test::validation::GEMMLowpMatrixMultiplyCoreValidationFixture
compute_reference	tests/validation/fixtures/GEMMLowpFixture.h	/^    SimpleTensor<uint8_t> compute_reference(const TensorShape &shape, int32_t result_fixed_point_multiplier, int32_t result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max,$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointValidationFixture
compute_reference	tests/validation/fixtures/GEMMLowpFixture.h	/^    SimpleTensor<uint8_t> compute_reference(const TensorShape &shape, int32_t result_offset, int32_t result_mult_int, int32_t result_shift, int32_t min, int32_t max, bool add_bias)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleValidationFixture
compute_reference	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape_a, const TensorShape &shape_b, DataType data_type, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::GEMMTranspose1xWValidationFixedPointFixture
compute_reference	tests/validation/fixtures/Gaussian3x3Fixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Gaussian3x3ValidationFixture
compute_reference	tests/validation/fixtures/Gaussian5x5Fixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Gaussian5x5ValidationFixture
compute_reference	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^    void compute_reference(const TensorShape &shape, BorderMode border_mode, uint8_t constant_border_value, size_t num_levels)$/;"	f	class:arm_compute::test::validation::GaussianPyramidHalfValidationFixture
compute_reference	tests/validation/fixtures/HOGDescriptorFixture.h	/^    SimpleTensor<U> compute_reference(const std::string image, Format format, BorderMode border_mode, T constant_border_value, const HOGInfo &hog_info)$/;"	f	class:arm_compute::test::validation::HOGDescriptorValidationFixture
compute_reference	tests/validation/fixtures/HOGDetectorFixture.h	/^    std::vector<DetectionWindow> compute_reference(const SimpleTensor<U> &src, const std::vector<U> &descriptor, unsigned int max_num_detection_windows,$/;"	f	class:arm_compute::test::validation::HOGDetectorValidationFixture
compute_reference	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^    std::vector<DetectionWindow> compute_reference(const std::string image, Format format, BorderMode border_mode, T constant_border_value,$/;"	f	class:arm_compute::test::validation::HOGMultiDetectionValidationFixture
compute_reference	tests/validation/fixtures/HarrisCornersFixture.h	/^    std::vector<KeyPoint> compute_reference(std::string image, int gradient_size, int block_size, BorderMode border_mode, Format format, const HarrisCornersParameters &params)$/;"	f	class:arm_compute::test::validation::HarrisCornersValidationFixture
compute_reference	tests/validation/fixtures/HistogramFixture.h	/^    SimpleTensor<uint32_t> compute_reference(const TensorShape &shape, DataType data_type, size_t num_bins, int32_t offset, uint32_t range)$/;"	f	class:arm_compute::test::validation::HistogramValidationFixture
compute_reference	tests/validation/fixtures/Im2ColFixture.h	/^    void compute_reference(const TensorShape &input_shape, const TensorShape &output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::Im2ColValidationFixture
compute_reference	tests/validation/fixtures/IntegralImageFixture.h	/^    SimpleTensor<uint32_t> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::IntegralImageValidationFixture
compute_reference	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, unsigned int axis, float epsilon)$/;"	f	class:arm_compute::test::validation::L2NormalizeLayerValidationFixture
compute_reference	tests/validation/fixtures/LSTMLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &input_weights_shape, const TensorShape &recurrent_weights_shape, const TensorShape &cell_bias_shape,$/;"	f	class:arm_compute::test::validation::LSTMLayerValidationFixture
compute_reference	tests/validation/fixtures/LocallyConnectedFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info)$/;"	f	class:arm_compute::test::validation::LocallyConnectedValidationFixture
compute_reference	tests/validation/fixtures/MagnitudeFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, Format format, MagnitudeType magnitude_type)$/;"	f	class:arm_compute::test::validation::MagnitudeValidationFixture
compute_reference	tests/validation/fixtures/MeanStdDevFixture.h	/^    std::pair<float, float> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::MeanStdDevValidationFixture
compute_reference	tests/validation/fixtures/Median3x3Fixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Median3x3ValidationFixture
compute_reference	tests/validation/fixtures/MinMaxLocationFixture.h	/^    MinMaxLocationValues<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::MinMaxLocationValidationFixture
compute_reference	tests/validation/fixtures/NonLinearFilterFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, const uint8_t *mask,$/;"	f	class:arm_compute::test::validation::NonLinearFilterValidationFixture
compute_reference	tests/validation/fixtures/NormalizationLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, NormalizationLayerInfo info, DataType data_type, int fixed_point_position = 0)$/;"	f	class:arm_compute::test::validation::NormalizationValidationFixedPointFixture
compute_reference	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape0, const TensorShape &shape1, DataType dt)$/;"	f	class:arm_compute::test::validation::NormalizePlanarYUVLayerValidationFixedPointFixture
compute_reference	tests/validation/fixtures/OpticalFlowFixture.h	/^    std::vector<KeyPoint> compute_reference(std::string old_image_name, std::string new_image_name,$/;"	f	class:arm_compute::test::validation::OpticalFlowValidationFixture
compute_reference	tests/validation/fixtures/PermuteFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, PermutationVector perm)$/;"	f	class:arm_compute::test::validation::PermuteValidationFixture
compute_reference	tests/validation/fixtures/PhaseFixture.h	/^    SimpleTensor<uint8_t> compute_reference(const TensorShape &shape, Format format, PhaseType phase_type)$/;"	f	class:arm_compute::test::validation::PhaseValidationFixture
compute_reference	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^    SimpleTensor<T2> compute_reference(const TensorShape &shape0, const TensorShape &shape1, DataType dt_in1, DataType dt_in2,$/;"	f	class:arm_compute::test::validation::PixelWiseMultiplicationBroadcastValidationFixture
compute_reference	tests/validation/fixtures/PoolingLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, PoolingLayerInfo info,$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationGenericFixture
compute_reference	tests/validation/fixtures/QuantizationLayerFixture.h	/^    SimpleTensor<uint8_t> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::QuantizationValidationFixedPointFixture
compute_reference	tests/validation/fixtures/RNNLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &recurrent_weights_shape, const TensorShape &bias_shape,$/;"	f	class:arm_compute::test::validation::RNNLayerValidationFixture
compute_reference	tests/validation/fixtures/ReductionOperationFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &src_shape, const TensorShape &dst_shape, DataType data_type, unsigned int axis, ReductionOperation op)$/;"	f	class:arm_compute::test::validation::ReductionOperationValidationFixture
compute_reference	tests/validation/fixtures/RemapFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, InterpolationPolicy policy, DataType data_type, BorderMode border_mode, T constant_border_value)$/;"	f	class:arm_compute::test::validation::RemapValidationFixture
compute_reference	tests/validation/fixtures/ReshapeLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::ReshapeLayerValidationFixture
compute_reference	tests/validation/fixtures/ScaleFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, const float scale_x, const float scale_y,$/;"	f	class:arm_compute::test::validation::ScaleValidationFixture
compute_reference	tests/validation/fixtures/ScharrFixture.h	/^    std::pair<SimpleTensor<U>, SimpleTensor<U>> compute_reference(const TensorShape &shape, int filter_size, BorderMode border_mode, Format format, uint8_t constant_border_value,$/;"	f	class:arm_compute::test::validation::ScharrValidationFixture
compute_reference	tests/validation/fixtures/SobelFixture.h	/^    std::pair<SimpleTensor<U>, SimpleTensor<U>> compute_reference(const TensorShape &shape, int filter_size, BorderMode border_mode, Format format, uint8_t constant_border_value,$/;"	f	class:arm_compute::test::validation::SobelValidationFixture
compute_reference	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, int fixed_point_position,$/;"	f	class:arm_compute::test::validation::SoftmaxValidationGenericFixture
compute_reference	tests/validation/fixtures/TableLookupFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::TableLookupValidationFixture
compute_reference	tests/validation/fixtures/ThresholdFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type,$/;"	f	class:arm_compute::test::validation::ThresholdValidationFixture
compute_reference	tests/validation/fixtures/TransposeFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::TransposeValidationFixture
compute_reference	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    SimpleTensor<T> compute_reference()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigure2TestCaseFixture
compute_reference	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    SimpleTensor<T> compute_reference()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigureTestCaseFixture
compute_reference	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    SimpleTensor<T> compute_reference()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerSimpleTestCaseFixture
compute_reference	tests/validation/fixtures/WarpAffineFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, DataType data_type, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::WarpAffineValidationFixture
compute_reference	tests/validation/fixtures/WarpPerspectiveFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &shape, const TensorShape &vmask_shape, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value,$/;"	f	class:arm_compute::test::validation::WarpPerspectiveValidationFixture
compute_reference	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^    SimpleTensor<T> compute_reference(std::vector<TensorShape> shapes, DataType data_type)$/;"	f	class:arm_compute::test::validation::WidthConcatenateLayerValidationFixture
compute_reference	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &output_shape, const WinogradInfo &winograd_info, DataLayout data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradFilterTransformValidationFixture
compute_reference	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &output_shape, const WinogradInfo &winograd_info, DataLayout data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradInputTransformValidationFixture
compute_reference	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &output_shape, const WinogradInfo &winograd_info, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradOutputTransformValidationFixture
compute_reference	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerFastMathValidationFixture
compute_reference	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    SimpleTensor<T> compute_reference(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerValidationFixture
compute_rnn_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_rnn_shape(const ITensorInfo *input, const unsigned int batch_size)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_sobel	tests/validation/reference/HarrisCornerDetector.cpp	/^std::tuple<SimpleTensor<T>, SimpleTensor<T>, float> compute_sobel(const SimpleTensor<uint8_t> &src, int gradient_size, int block_size, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference::__anon541
compute_spatial_gradient_matrix	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^std::tuple<int, int, int> NELKTrackerKernel::compute_spatial_gradient_matrix(const NELKInternalKeypoint &keypoint, int32_t *bilinear_ix, int32_t *bilinear_iy)$/;"	f	class:NELKTrackerKernel
compute_spatial_gradient_matrix	tests/validation/reference/OpticalFlow.cpp	/^std::tuple<float, float, float> compute_spatial_gradient_matrix(const std::vector<int> &bilinear_ix, const std::vector<int> &bilinear_iy)$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
compute_strides	arm_compute/core/Helpers.h	/^inline Strides compute_strides(const ITensorInfo &info)$/;"	f	namespace:arm_compute
compute_strides	arm_compute/core/Helpers.h	/^inline Strides compute_strides(const ITensorInfo &info, T stride_x, Ts &&... fixed_strides)$/;"	f	namespace:arm_compute
compute_target	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type0, DataType data_type1, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AbsoluteDifferenceValidationFixture
compute_target	tests/validation/fixtures/AccumulateFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AccumulateBaseValidationFixture
compute_target	tests/validation/fixtures/ActivationLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, bool in_place, ActivationLayerInfo info, DataType data_type, int fixed_point_position, QuantizationInfo quantization_info)$/;"	f	class:arm_compute::test::validation::ActivationValidationGenericFixture
compute_target	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    TensorType compute_target(const TensorShape &shape0, const TensorShape &shape1, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy,$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionBroadcastValidationFixedPointFixture
compute_target	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::ArithmeticSubtractionValidationFixedPointFixture
compute_target	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^    TensorType compute_target(TensorShape shape0, const TensorShape &shape1, float epsilon, ActivationLayerInfo act_info, DataType dt, DataLayout data_layout, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::BatchNormalizationLayerValidationFixedPointFixture
compute_target	tests/validation/fixtures/BitwiseAndFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseAndValidationFixture
compute_target	tests/validation/fixtures/BitwiseNotFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseNotValidationFixture
compute_target	tests/validation/fixtures/BitwiseOrFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseOrValidationFixture
compute_target	tests/validation/fixtures/BitwiseXorFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseXorValidationFixture
compute_target	tests/validation/fixtures/Box3x3Fixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Box3x3ValidationFixture
compute_target	tests/validation/fixtures/ChannelCombineFixture.h	/^    MultiImageType compute_target(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::validation::ChannelCombineValidationFixture
compute_target	tests/validation/fixtures/ChannelExtractFixture.h	/^    TensorType compute_target(const TensorShape &shape, Format format, Channel channel)$/;"	f	class:arm_compute::test::validation::ChannelExtractValidationFixture
compute_target	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, unsigned int num_groups)$/;"	f	class:arm_compute::test::validation::ChannelShuffleLayerValidationFixture
compute_target	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const DataLayout training_data_layout, const DataType data_type)$/;"	f	class:arm_compute::test::validation::ConvertFullyConnectedWeightsValidationFixture
compute_target	tests/validation/fixtures/ConvolutionFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType output_data_type, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::ConvolutionRectangleValidationFixture
compute_target	tests/validation/fixtures/ConvolutionFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType output_data_type, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::ConvolutionSeparableValidationFixture
compute_target	tests/validation/fixtures/ConvolutionFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType output_data_type, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::ConvolutionSquareValidationFixture
compute_target	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    TensorType compute_target(TensorShape input_shape, TensorShape weights_shape, const TensorShape &bias_shape, TensorShape output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::ConvolutionValidationGenericFixture
compute_target	tests/validation/fixtures/CopyFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::CopyFixture
compute_target	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape,$/;"	f	class:arm_compute::test::validation::DeconvolutionLayerFixtureBase
compute_target	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^    TensorType compute_target(std::vector<TensorShape> shapes, DataType data_type)$/;"	f	class:arm_compute::test::validation::DepthConcatenateLayerValidationFixture
compute_target	tests/validation/fixtures/DepthConvertLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType dt_in, DataType dt_out, ConvertPolicy policy, uint32_t shift, uint32_t fixed_point_position)$/;"	f	class:arm_compute::test::validation::DepthConvertLayerValidationFixedPointFixture
compute_target	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^    TensorType compute_target(TensorShape input_shape, TensorShape weights_shape, TensorShape biases_shape, TensorShape output_shape, PadStrideInfo &pad_stride_info, unsigned int depth_multiplier,$/;"	f	class:arm_compute::test::validation::DepthwiseConvolutionLayerValidationGenericFixture
compute_target	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &depthwise_weights_shape, const TensorShape &depthwise_biases_shape, const TensorShape &depthwise_out_shape,$/;"	f	class:arm_compute::test::validation::DepthwiseSeparableConvolutionValidationFixture
compute_target	tests/validation/fixtures/DequantizationLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::DequantizationValidationFixedPointFixture
compute_target	tests/validation/fixtures/DerivativeFixture.h	/^    std::pair<TensorType, TensorType> compute_target(const TensorShape &shape, BorderMode border_mode, Format format, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::DerivativeValidationFixture
compute_target	tests/validation/fixtures/DilateFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::DilateValidationFixture
compute_target	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    TensorType compute_target(TensorShape input_shape, TensorShape weights_shape, const TensorShape &bias_shape, TensorShape output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericFixture
compute_target	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericTensorShiftFixture
compute_target	tests/validation/fixtures/DropoutLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, float ratio, bool forward, DataType data_type)$/;"	f	class:arm_compute::test::validation::DropoutLayerValidationFixture
compute_target	tests/validation/fixtures/EqualizeHistogramFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::EqualizeHistogramValidationFixture
compute_target	tests/validation/fixtures/ErodeFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::ErodeValidationFixture
compute_target	tests/validation/fixtures/FastCornersFixture.h	/^    ArrayType compute_target(const std::string &image, Format format, float threshold, bool suppress_nonmax, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::FastCornersValidationFixture
compute_target	tests/validation/fixtures/FixedPointFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType dt, FixedPointOp op, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::FixedPointValidationFixture
compute_target	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType dt_in1, DataType dt_in2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::FixedPointPixelWiseMultiplicationValidationFixture
compute_target	tests/validation/fixtures/FlattenLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, const TensorShape &shape_flatten, DataType data_type)$/;"	f	class:arm_compute::test::validation::FlattenLayerValidationFixture
compute_target	tests/validation/fixtures/FloorFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::FloorValidationFixture
compute_target	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, bool transpose_weights,$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationGenericFixture
compute_target	tests/validation/fixtures/GEMMFixture.h	/^    TensorType compute_target(const TensorShape &shape_a, const TensorShape &shape_b, const TensorShape &shape_c, const TensorShape &output_shape, float alpha, float beta,$/;"	f	class:arm_compute::test::validation::GEMMValidationFixedPointFixture
compute_target	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^    TensorType compute_target(const TensorShape &shape_a, const TensorShape &shape_b, DataType data_type, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::GEMMInterleave4x4ValidationFixedPointFixture
compute_target	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^    TensorType compute_target(const TensorShape &shape_a, const TensorShape &shape_b, const TensorShape &shape_c)$/;"	f	class:arm_compute::test::validation::GEMMLowpAssemblyFixture
compute_target	tests/validation/fixtures/GEMMLowpFixture.h	/^    TensorType compute_target(const TensorShape &shape, int32_t result_fixedpoint_multiplier, int32_t result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max, bool add_bias)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointValidationFixture
compute_target	tests/validation/fixtures/GEMMLowpFixture.h	/^    TensorType compute_target(const TensorShape &shape, int32_t result_offset, int32_t result_mult_int, int32_t result_shift, int32_t min, int32_t max, bool add_bias)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleValidationFixture
compute_target	tests/validation/fixtures/GEMMLowpFixture.h	/^    TensorType compute_target(const TensorShape &shape_a, const TensorShape &shape_b, const TensorShape &shape_c,$/;"	f	class:arm_compute::test::validation::GEMMLowpMatrixMultiplyCoreValidationFixture
compute_target	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^    TensorType compute_target(const TensorShape &shape_a, const TensorShape &shape_b, DataType data_type, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::GEMMTranspose1xWValidationFixedPointFixture
compute_target	tests/validation/fixtures/Gaussian3x3Fixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Gaussian3x3ValidationFixture
compute_target	tests/validation/fixtures/Gaussian5x5Fixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Gaussian5x5ValidationFixture
compute_target	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^    void compute_target(const TensorShape &shape, BorderMode border_mode, uint8_t constant_border_value, size_t num_levels)$/;"	f	class:arm_compute::test::validation::GaussianPyramidHalfValidationFixture
compute_target	tests/validation/fixtures/HOGDescriptorFixture.h	/^    TensorType compute_target(const std::string image, Format &format, BorderMode &border_mode, T constant_border_value, const HOGInfo &hog_info)$/;"	f	class:arm_compute::test::validation::HOGDescriptorValidationFixture
compute_target	tests/validation/fixtures/HOGDetectorFixture.h	/^    std::vector<DetectionWindow> compute_target(const TensorType &src, const std::vector<U> &descriptor, unsigned int max_num_detection_windows,$/;"	f	class:arm_compute::test::validation::HOGDetectorValidationFixture
compute_target	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^    std::vector<DetectionWindow> compute_target(const std::string image, Format &format, BorderMode &border_mode, T constant_border_value,$/;"	f	class:arm_compute::test::validation::HOGMultiDetectionValidationFixture
compute_target	tests/validation/fixtures/HarrisCornersFixture.h	/^    ArrayType compute_target(std::string image, int gradient_size, int block_size, BorderMode border_mode, bool use_fp16, Format format, const HarrisCornersParameters &params)$/;"	f	class:arm_compute::test::validation::HarrisCornersValidationFixture
compute_target	tests/validation/fixtures/HistogramFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, size_t num_bins, int32_t offset, uint32_t range)$/;"	f	class:arm_compute::test::validation::HistogramValidationFixture
compute_target	tests/validation/fixtures/Im2ColFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::Im2ColValidationFixture
compute_target	tests/validation/fixtures/IntegralImageFixture.h	/^    TensorType compute_target(const TensorShape &shape)$/;"	f	class:arm_compute::test::validation::IntegralImageValidationFixture
compute_target	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, unsigned int axis, float epsilon)$/;"	f	class:arm_compute::test::validation::L2NormalizeLayerValidationFixture
compute_target	tests/validation/fixtures/LSTMLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &input_weights_shape, const TensorShape &recurrent_weights_shape, const TensorShape &cell_bias_shape,$/;"	f	class:arm_compute::test::validation::LSTMLayerValidationFixture
compute_target	tests/validation/fixtures/LocallyConnectedFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info)$/;"	f	class:arm_compute::test::validation::LocallyConnectedValidationFixture
compute_target	tests/validation/fixtures/MagnitudeFixture.h	/^    TensorType compute_target(const TensorShape &shape, Format format, MagnitudeType magnitude_type, bool use_fp16)$/;"	f	class:arm_compute::test::validation::MagnitudeValidationFixture
compute_target	tests/validation/fixtures/MeanStdDevFixture.h	/^    std::pair<float, float> compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::MeanStdDevValidationFixture
compute_target	tests/validation/fixtures/Median3x3Fixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::Median3x3ValidationFixture
compute_target	tests/validation/fixtures/MinMaxLocationFixture.h	/^    MinMaxLocationValues<target_type> compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::MinMaxLocationValidationFixture
compute_target	tests/validation/fixtures/NonLinearFilterFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, const uint8_t *mask, BorderMode border_mode,$/;"	f	class:arm_compute::test::validation::NonLinearFilterValidationFixture
compute_target	tests/validation/fixtures/NormalizationLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, NormalizationLayerInfo info, DataType data_type, int fixed_point_position = 0)$/;"	f	class:arm_compute::test::validation::NormalizationValidationFixedPointFixture
compute_target	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape0, const TensorShape &shape1, DataType dt)$/;"	f	class:arm_compute::test::validation::NormalizePlanarYUVLayerValidationFixedPointFixture
compute_target	tests/validation/fixtures/OpticalFlowFixture.h	/^    ArrayType compute_target(std::string old_image_name, std::string new_image_name, OpticalFlowParameters params, size_t num_levels,$/;"	f	class:arm_compute::test::validation::OpticalFlowValidationFixture
compute_target	tests/validation/fixtures/PermuteFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, PermutationVector perm)$/;"	f	class:arm_compute::test::validation::PermuteValidationFixture
compute_target	tests/validation/fixtures/PhaseFixture.h	/^    TensorType compute_target(const TensorShape &shape, Format format, PhaseType phase_type)$/;"	f	class:arm_compute::test::validation::PhaseValidationFixture
compute_target	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^    TensorType compute_target(const TensorShape &shape0, const TensorShape &shape1, DataType dt_in1, DataType dt_in2,$/;"	f	class:arm_compute::test::validation::PixelWiseMultiplicationBroadcastValidationFixture
compute_target	tests/validation/fixtures/PoolingLayerFixture.h	/^    TensorType compute_target(TensorShape shape, PoolingLayerInfo info,$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationGenericFixture
compute_target	tests/validation/fixtures/QuantizationLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::QuantizationValidationFixedPointFixture
compute_target	tests/validation/fixtures/RNNLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &recurrent_weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape,$/;"	f	class:arm_compute::test::validation::RNNLayerValidationFixture
compute_target	tests/validation/fixtures/ReductionOperationFixture.h	/^    TensorType compute_target(const TensorShape &src_shape, const TensorShape &dst_shape, DataType data_type, unsigned int axis, ReductionOperation op)$/;"	f	class:arm_compute::test::validation::ReductionOperationValidationFixture
compute_target	tests/validation/fixtures/RemapFixture.h	/^    TensorType compute_target(const TensorShape &shape, InterpolationPolicy policy, DataType data_type, BorderMode border_mode, T constant_border_value)$/;"	f	class:arm_compute::test::validation::RemapValidationFixture
compute_target	tests/validation/fixtures/ReshapeLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::ReshapeLayerValidationFixture
compute_target	tests/validation/fixtures/ScaleFixture.h	/^    TensorType compute_target(TensorShape shape, DataLayout data_layout, const float scale_x, const float scale_y,$/;"	f	class:arm_compute::test::validation::ScaleValidationFixture
compute_target	tests/validation/fixtures/ScharrFixture.h	/^    std::pair<TensorType, TensorType> compute_target(const TensorShape &shape, BorderMode border_mode, Format format, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::ScharrValidationFixture
compute_target	tests/validation/fixtures/SobelFixture.h	/^    std::pair<TensorType, TensorType> compute_target(const TensorShape &shape, BorderMode border_mode, Format format, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::SobelValidationFixture
compute_target	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, int fixed_point_position,$/;"	f	class:arm_compute::test::validation::SoftmaxValidationGenericFixture
compute_target	tests/validation/fixtures/TableLookupFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::TableLookupValidationFixture
compute_target	tests/validation/fixtures/ThresholdFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type,$/;"	f	class:arm_compute::test::validation::ThresholdValidationFixture
compute_target	tests/validation/fixtures/TransposeFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::TransposeValidationFixture
compute_target	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    TensorType compute_target()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigure2TestCaseFixture
compute_target	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    TensorType compute_target()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigureTestCaseFixture
compute_target	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    TensorType compute_target()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerSimpleTestCaseFixture
compute_target	tests/validation/fixtures/WarpAffineFixture.h	/^    TensorType compute_target(const TensorShape &shape, DataType data_type, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::WarpAffineValidationFixture
compute_target	tests/validation/fixtures/WarpPerspectiveFixture.h	/^    TensorType compute_target(const TensorShape &shape, const TensorShape &vmask_shape, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value,$/;"	f	class:arm_compute::test::validation::WarpPerspectiveValidationFixture
compute_target	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^    TensorType compute_target(std::vector<TensorShape> shapes, DataType data_type)$/;"	f	class:arm_compute::test::validation::WidthConcatenateLayerValidationFixture
compute_target	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &output_shape, const WinogradInfo &winograd_info, DataLayout data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradFilterTransformValidationFixture
compute_target	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &output_shape, const WinogradInfo &winograd_info, DataLayout data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradInputTransformValidationFixture
compute_target	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &output_shape, const WinogradInfo &winograd_info, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradOutputTransformValidationFixture
compute_target	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerFastMathValidationFixture
compute_target	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    TensorType compute_target(const TensorShape &input_shape, const TensorShape &weights_shape, const TensorShape &bias_shape, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerValidationFixture
compute_target_impl	tests/validation/CL/FixedPoint/FixedPointTarget.h	/^void compute_target_impl(const TensorShape &shape, DataType dt, FixedPointOp op, int fixed_point_position, TensorType &src, TensorType &dst)$/;"	f	namespace:arm_compute::test::validation::__anon418
compute_target_impl	tests/validation/NEON/FixedPoint/FixedPointTarget.h	/^void compute_target_impl(const TensorShape &shape, DataType dt, FixedPointOp op, int fixed_point_position, TensorType &src, TensorType &dst)$/;"	f	namespace:arm_compute::test::validation::__anon493
compute_temporal_gradient_vector	tests/validation/reference/OpticalFlow.cpp	/^std::tuple<double, double> compute_temporal_gradient_vector(const std::vector<int> &bilinear_it_old,$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
compute_transpose1xW_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_transpose1xW_shape(const ITensorInfo &b)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_transpose1xW_with_element_size_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_transpose1xW_with_element_size_shape(const ITensorInfo &b, int mult_transpose1xW_width = 1)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_transposed_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_transposed_shape(const ITensorInfo &input)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_valid_region	src/core/AccessWindowAutoPadding.cpp	/^ValidRegion AccessWindowAutoPadding::compute_valid_region() const$/;"	f	class:AccessWindowAutoPadding
compute_valid_region	src/core/AccessWindowAutoPadding.cpp	/^ValidRegion AccessWindowAutoPadding::compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const$/;"	f	class:AccessWindowAutoPadding
compute_valid_region	src/core/AccessWindowStatic.cpp	/^ValidRegion AccessWindowStatic::compute_valid_region(const Window &window, ValidRegion input_valid_region) const$/;"	f	class:AccessWindowStatic
compute_valid_region	src/core/AccessWindowStatic.cpp	/^ValidRegion AccessWindowStatic::compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const$/;"	f	class:AccessWindowStatic
compute_valid_region	src/core/AccessWindowTranspose.cpp	/^ValidRegion AccessWindowTranspose::compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const$/;"	f	class:AccessWindowTranspose
compute_valid_region	src/core/IAccessWindow.cpp	/^ValidRegion AccessWindowRectangle::compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const$/;"	f	class:AccessWindowRectangle
compute_valid_region	src/core/IAccessWindow.cpp	/^ValidRegion AccessWindowRectangle::compute_valid_region(const Window &window, const ValidRegion &input_valid_region) const$/;"	f	class:AccessWindowRectangle
compute_weights_descriptor	src/graph/nodes/FullyConnectedLayer.cpp	/^TensorDescriptor FullyConnectedLayerNode::compute_weights_descriptor(const TensorDescriptor &input_descriptor,$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
compute_weights_reshaped_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_weights_reshaped_shape(const ITensorInfo &weights, bool has_bias = false)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_winograd_filter_transform_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_winograd_filter_transform_shape(const ITensorInfo &input, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_winograd_input_transform_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_winograd_input_transform_shape(const ITensorInfo &input, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::misc::shape_calculator
compute_winograd_output_transform_shape	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape compute_winograd_output_transform_shape(const ITensorInfo &input, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::misc::shape_calculator
concat	tests/framework/datasets/JoinDataset.h	/^JoinDataset<T, U> concat(T &&dataset1, U &&dataset2)$/;"	f	namespace:arm_compute::test::framework::dataset
concatenate_8cl	documentation/concatenate_8cl.js	/^var concatenate_8cl =$/;"	v
conditional	include/half/half.hpp	/^		template<bool B,typename T,typename F> struct conditional : std::conditional<B,T,F> {};$/;"	s	namespace:half_float::detail
config	src/graph/GraphContext.cpp	/^const GraphConfig &GraphContext::config() const$/;"	f	class:arm_compute::graph::GraphContext
config_id	arm_compute/core/CL/ICLKernel.h	/^    const std::string &config_id() const$/;"	f	class:arm_compute::ICLKernel
configure	arm_compute/core/NEON/kernels/NEGEMMAssemblyBaseKernel.h	/^    void configure(const ITensor *input0, const ITensor *input1, ITensor *output, ITensor *workspace, float alpha = 1.f, float beta = 0.f, bool is_transposed_0 = false, bool is_transposed_1 = false)$/;"	f	class:arm_compute::NEGEMMAssemblyBaseKernel
configure	arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h	/^    void configure(T *kernel)$/;"	f	class:arm_compute::final
configure	src/core/CL/ICLSimpleKernel.cpp	/^void ICLSimpleKernel::configure(const ICLTensor *input, ICLTensor *output, unsigned int num_elems_processed_per_iteration, bool border_undefined, const BorderSize &border_size)$/;"	f	class:ICLSimpleKernel
configure	src/core/CL/kernels/CLAbsoluteDifferenceKernel.cpp	/^void CLAbsoluteDifferenceKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLAbsoluteDifferenceKernel
configure	src/core/CL/kernels/CLAccumulateKernel.cpp	/^void CLAccumulateKernel::configure(const ICLTensor *input, ICLTensor *accum)$/;"	f	class:CLAccumulateKernel
configure	src/core/CL/kernels/CLAccumulateKernel.cpp	/^void CLAccumulateSquaredKernel::configure(const ICLTensor *input, uint32_t shift, ICLTensor *accum)$/;"	f	class:CLAccumulateSquaredKernel
configure	src/core/CL/kernels/CLAccumulateKernel.cpp	/^void CLAccumulateWeightedKernel::configure(const ICLTensor *input, float alpha, ICLTensor *accum)$/;"	f	class:CLAccumulateWeightedKernel
configure	src/core/CL/kernels/CLActivationLayerKernel.cpp	/^void CLActivationLayerKernel::configure(ICLTensor *input, ICLTensor *output, ActivationLayerInfo act_info)$/;"	f	class:CLActivationLayerKernel
configure	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^void CLArithmeticAdditionKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticAdditionKernel
configure	src/core/CL/kernels/CLArithmeticSubtractionKernel.cpp	/^void CLArithmeticSubtractionKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticSubtractionKernel
configure	src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp	/^void CLBatchNormalizationLayerKernel::configure(ICLTensor *input, ICLTensor *output, const ICLTensor *mean, const ICLTensor *var, const ICLTensor *beta, const ICLTensor *gamma,$/;"	f	class:CLBatchNormalizationLayerKernel
configure	src/core/CL/kernels/CLBitwiseAndKernel.cpp	/^void CLBitwiseAndKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLBitwiseAndKernel
configure	src/core/CL/kernels/CLBitwiseNotKernel.cpp	/^void CLBitwiseNotKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLBitwiseNotKernel
configure	src/core/CL/kernels/CLBitwiseOrKernel.cpp	/^void CLBitwiseOrKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLBitwiseOrKernel
configure	src/core/CL/kernels/CLBitwiseXorKernel.cpp	/^void CLBitwiseXorKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLBitwiseXorKernel
configure	src/core/CL/kernels/CLBox3x3Kernel.cpp	/^void CLBox3x3Kernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLBox3x3Kernel
configure	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^void CLEdgeNonMaxSuppressionKernel::configure(const ICLTensor *magnitude, const ICLTensor *phase, ICLTensor *output, int32_t lower_thr, bool border_undefined)$/;"	f	class:CLEdgeNonMaxSuppressionKernel
configure	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^void CLEdgeTraceKernel::configure(const ICLTensor *input, ICLTensor *output, int32_t upper_thr, int32_t lower_thr,$/;"	f	class:CLEdgeTraceKernel
configure	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^void CLGradientKernel::configure(const ICLTensor *gx, const ICLTensor *gy, ICLTensor *magnitude, ICLTensor *phase, int32_t norm_type)$/;"	f	class:CLGradientKernel
configure	src/core/CL/kernels/CLChannelCombineKernel.cpp	/^void CLChannelCombineKernel::configure(const ICLImage *plane0, const ICLImage *plane1, const ICLImage *plane2, ICLMultiImage *output)$/;"	f	class:CLChannelCombineKernel
configure	src/core/CL/kernels/CLChannelCombineKernel.cpp	/^void CLChannelCombineKernel::configure(const ICLTensor *plane0, const ICLTensor *plane1, const ICLTensor *plane2, const ICLTensor *plane3, ICLTensor *output)$/;"	f	class:CLChannelCombineKernel
configure	src/core/CL/kernels/CLChannelExtractKernel.cpp	/^void CLChannelExtractKernel::configure(const ICLMultiImage *input, Channel channel, ICLImage *output)$/;"	f	class:CLChannelExtractKernel
configure	src/core/CL/kernels/CLChannelExtractKernel.cpp	/^void CLChannelExtractKernel::configure(const ICLTensor *input, Channel channel, ICLTensor *output)$/;"	f	class:CLChannelExtractKernel
configure	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^void CLChannelShuffleLayerKernel::configure(const ICLTensor *input, ICLTensor *output, unsigned int num_groups)$/;"	f	class:arm_compute::CLChannelShuffleLayerKernel
configure	src/core/CL/kernels/CLCol2ImKernel.cpp	/^void CLCol2ImKernel::configure(const ICLTensor *input, ICLTensor *output, std::pair<unsigned int, unsigned int> convolved_dims)$/;"	f	class:CLCol2ImKernel
configure	src/core/CL/kernels/CLColorConvertKernel.cpp	/^void CLColorConvertKernel::configure(const ICLImage *input, ICLMultiImage *output)$/;"	f	class:CLColorConvertKernel
configure	src/core/CL/kernels/CLColorConvertKernel.cpp	/^void CLColorConvertKernel::configure(const ICLMultiImage *input, ICLImage *output)$/;"	f	class:CLColorConvertKernel
configure	src/core/CL/kernels/CLColorConvertKernel.cpp	/^void CLColorConvertKernel::configure(const ICLMultiImage *input, ICLMultiImage *output)$/;"	f	class:CLColorConvertKernel
configure	src/core/CL/kernels/CLColorConvertKernel.cpp	/^void CLColorConvertKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLColorConvertKernel
configure	src/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.cpp	/^void CLConvertFullyConnectedWeightsKernel::configure(const ICLTensor *input, ICLTensor *output, const TensorShape &original_input_shape,$/;"	f	class:arm_compute::CLConvertFullyConnectedWeightsKernel
configure	src/core/CL/kernels/CLConvolutionKernel.cpp	/^void CLConvolutionKernel<matrix_size>::configure(const ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t scale, bool border_undefined)$/;"	f	class:CLConvolutionKernel
configure	src/core/CL/kernels/CLConvolutionKernel.cpp	/^void CLConvolutionRectangleKernel::configure(const ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t width, uint32_t height, uint32_t scale, bool border_undefined)$/;"	f	class:CLConvolutionRectangleKernel
configure	src/core/CL/kernels/CLConvolutionKernel.cpp	/^void CLSeparableConvolutionHorKernel<matrix_size>::configure(const ICLTensor *input, ICLTensor *output, const int16_t *conv, bool border_undefined)$/;"	f	class:CLSeparableConvolutionHorKernel
configure	src/core/CL/kernels/CLConvolutionKernel.cpp	/^void CLSeparableConvolutionVertKernel<matrix_size>::configure(const ICLTensor *input, ICLTensor *output,$/;"	f	class:CLSeparableConvolutionVertKernel
configure	src/core/CL/kernels/CLCopyKernel.cpp	/^void CLCopyKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLCopyKernel
configure	src/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.cpp	/^void CLDeconvolutionLayerUpsampleKernel::configure(const ICLTensor *input, ICLTensor *output, const BorderSize &inner_border,$/;"	f	class:CLDeconvolutionLayerUpsampleKernel
configure	src/core/CL/kernels/CLDepthConcatenateLayerKernel.cpp	/^void CLDepthConcatenateLayerKernel::configure(const ICLTensor *input, unsigned int depth_offset, ICLTensor *output)$/;"	f	class:CLDepthConcatenateLayerKernel
configure	src/core/CL/kernels/CLDepthConvertLayerKernel.cpp	/^void CLDepthConvertLayerKernel::configure(const ICLTensor *input, ICLTensor *output, ConvertPolicy policy, uint32_t shift)$/;"	f	class:CLDepthConvertLayerKernel
configure	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^void CLDepthwiseConvolutionLayer3x3NCHWKernel::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDepthwiseConvolutionLayer3x3NCHWKernel
configure	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^void CLDepthwiseConvolutionLayer3x3NHWCKernel::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDepthwiseConvolutionLayer3x3NHWCKernel
configure	src/core/CL/kernels/CLDepthwiseIm2ColKernel.cpp	/^void CLDepthwiseIm2ColKernel::configure(const ICLTensor *input, ICLTensor *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, unsigned int depth_multiplier)$/;"	f	class:CLDepthwiseIm2ColKernel
configure	src/core/CL/kernels/CLDepthwiseVectorToTensorKernel.cpp	/^void CLDepthwiseVectorToTensorKernel::configure(const ICLTensor *input, ICLTensor *output, size_t conv_w, size_t conv_h)$/;"	f	class:CLDepthwiseVectorToTensorKernel
configure	src/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.cpp	/^void CLDepthwiseWeightsReshapeKernel::configure(const ICLTensor *input, ICLTensor *output, const ICLTensor *biases)$/;"	f	class:CLDepthwiseWeightsReshapeKernel
configure	src/core/CL/kernels/CLDequantizationLayerKernel.cpp	/^void CLDequantizationLayerKernel::configure(const ICLTensor *input, ICLTensor *output, const ICLTensor *min_max)$/;"	f	class:CLDequantizationLayerKernel
configure	src/core/CL/kernels/CLDerivativeKernel.cpp	/^void CLDerivativeKernel::configure(const ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLDerivativeKernel
configure	src/core/CL/kernels/CLDilateKernel.cpp	/^void CLDilateKernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLDilateKernel
configure	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^void CLDirectConvolutionLayerKernel::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info)$/;"	f	class:CLDirectConvolutionLayerKernel
configure	src/core/CL/kernels/CLDirectConvolutionOutputStageKernel.cpp	/^void CLDirectConvolutionLayerOutputStageKernel::configure(ICLTensor *input, const ICLTensor *bias, ICLTensor *output,$/;"	f	class:CLDirectConvolutionLayerOutputStageKernel
configure	src/core/CL/kernels/CLErodeKernel.cpp	/^void CLErodeKernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLErodeKernel
configure	src/core/CL/kernels/CLFastCornersKernel.cpp	/^void CLCopyToArrayKernel::configure(const ICLImage *input, bool update_number, ICLKeyPointArray *corners, cl::Buffer *num_buffers)$/;"	f	class:CLCopyToArrayKernel
configure	src/core/CL/kernels/CLFastCornersKernel.cpp	/^void CLFastCornersKernel::configure(const ICLImage *input, ICLImage *output, float threshold, bool non_max_suppression, BorderMode border_mode)$/;"	f	class:CLFastCornersKernel
configure	src/core/CL/kernels/CLFillBorderKernel.cpp	/^void CLFillBorderKernel::configure(ICLTensor *tensor, BorderSize border_size, BorderMode border_mode, const PixelValue &constant_border_value)$/;"	f	class:CLFillBorderKernel
configure	src/core/CL/kernels/CLFloorKernel.cpp	/^void CLFloorKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLFloorKernel
configure	src/core/CL/kernels/CLGEMMInterleave4x4Kernel.cpp	/^void CLGEMMInterleave4x4Kernel::configure(const ICLTensor *input, ICLTensor *output, int mult_interleave4x4_height)$/;"	f	class:CLGEMMInterleave4x4Kernel
configure	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^void CLGEMMLowpMatrixMultiplyKernel::configure(const ICLTensor *input0, const ICLTensor *input1, ICLTensor *output, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	class:CLGEMMLowpMatrixMultiplyKernel
configure	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^void CLGEMMLowpOffsetContributionKernel::configure(ICLTensor *mm_result, const ICLTensor *vector_sum_col, const ICLTensor *vector_sum_row, int32_t k, int32_t a_offset, int32_t b_offset)$/;"	f	class:CLGEMMLowpOffsetContributionKernel
configure	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^void CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure(const ICLTensor *input, const ICLTensor *bias, ICLTensor *output, int result_fixedpoint_multiplier, int result_shift,$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
configure	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^void CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::configure(const ICLTensor *input, const ICLTensor *bias, ICLTensor *output, int result_offset, int result_mult_int, int result_shift, int min,$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
configure	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^void CLGEMMLowpMatrixAReductionKernel::configure(const ICLTensor *mtx_a, ICLTensor *vector_sum_row)$/;"	f	class:CLGEMMLowpMatrixAReductionKernel
configure	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^void CLGEMMLowpMatrixBReductionKernel::configure(const ICLTensor *mtx_b, ICLTensor *vector_sum_col)$/;"	f	class:CLGEMMLowpMatrixBReductionKernel
configure	src/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.cpp	/^void CLGEMMMatrixAccumulateBiasesKernel::configure(ICLTensor *accum, const ICLTensor *biases)$/;"	f	class:CLGEMMMatrixAccumulateBiasesKernel
configure	src/core/CL/kernels/CLGEMMMatrixAdditionKernel.cpp	/^void CLGEMMMatrixAdditionKernel::configure(const ICLTensor *input, ICLTensor *output, float beta)$/;"	f	class:CLGEMMMatrixAdditionKernel
configure	src/core/CL/kernels/CLGEMMMatrixMultiplyKernel.cpp	/^void CLGEMMMatrixMultiplyKernel::configure(const ICLTensor *input0, const ICLTensor *input1, ICLTensor *output, float alpha, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	class:CLGEMMMatrixMultiplyKernel
configure	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^void CLGEMMMatrixVectorMultiplyKernel::configure(const ICLTensor *input0, const ICLTensor *input1, ICLTensor *output)$/;"	f	class:CLGEMMMatrixVectorMultiplyKernel
configure	src/core/CL/kernels/CLGEMMTranspose1xWKernel.cpp	/^void CLGEMMTranspose1xWKernel::configure(const ICLTensor *input, ICLTensor *output, int mult_transpose1xW_width)$/;"	f	class:CLGEMMTranspose1xWKernel
configure	src/core/CL/kernels/CLGaussian3x3Kernel.cpp	/^void CLGaussian3x3Kernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLGaussian3x3Kernel
configure	src/core/CL/kernels/CLGaussian5x5Kernel.cpp	/^void CLGaussian5x5HorKernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLGaussian5x5HorKernel
configure	src/core/CL/kernels/CLGaussian5x5Kernel.cpp	/^void CLGaussian5x5VertKernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLGaussian5x5VertKernel
configure	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^void CLGaussianPyramidHorKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLGaussianPyramidHorKernel
configure	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^void CLGaussianPyramidVertKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLGaussianPyramidVertKernel
configure	src/core/CL/kernels/CLHOGDescriptorKernel.cpp	/^void CLHOGBlockNormalizationKernel::configure(const ICLTensor *input, ICLTensor *output, const HOGInfo *hog_info)$/;"	f	class:CLHOGBlockNormalizationKernel
configure	src/core/CL/kernels/CLHOGDescriptorKernel.cpp	/^void CLHOGOrientationBinningKernel::configure(const ICLTensor *input_magnitude, const ICLTensor *input_phase, ICLTensor *output, const HOGInfo *hog_info)$/;"	f	class:CLHOGOrientationBinningKernel
configure	src/core/CL/kernels/CLHOGDetectorKernel.cpp	/^void CLHOGDetectorKernel::configure(const ICLTensor *input, const ICLHOG *hog, ICLDetectionWindowArray *detection_windows, cl::Buffer *num_detection_windows, const Size2D &detection_window_stride,$/;"	f	class:CLHOGDetectorKernel
configure	src/core/CL/kernels/CLHarrisCornersKernel.cpp	/^void CLHarrisScoreKernel::configure(const ICLImage *input1, const ICLImage *input2, ICLImage *output,$/;"	f	class:CLHarrisScoreKernel
configure	src/core/CL/kernels/CLHistogramKernel.cpp	/^void CLHistogramBorderKernel::configure(const ICLImage *input, ICLDistribution1D *output)$/;"	f	class:CLHistogramBorderKernel
configure	src/core/CL/kernels/CLHistogramKernel.cpp	/^void CLHistogramKernel::configure(const ICLImage *input, ICLDistribution1D *output)$/;"	f	class:CLHistogramKernel
configure	src/core/CL/kernels/CLIm2ColKernel.cpp	/^void CLIm2ColKernel::configure(const ICLTensor *input, ICLTensor *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, const Size2D &dilation)$/;"	f	class:CLIm2ColKernel
configure	src/core/CL/kernels/CLIntegralImageKernel.cpp	/^void CLIntegralImageHorKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLIntegralImageHorKernel
configure	src/core/CL/kernels/CLIntegralImageKernel.cpp	/^void CLIntegralImageVertKernel::configure(ICLTensor *in_out)$/;"	f	class:CLIntegralImageVertKernel
configure	src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp	/^void CLL2NormalizeLayerKernel::configure(const ICLTensor *input, const ICLTensor *sum, ICLTensor *output, unsigned int axis, float epsilon)$/;"	f	class:CLL2NormalizeLayerKernel
configure	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerFinalizeKernel::configure(ICLLKInternalKeypointArray *new_points_internal, ICLKeyPointArray *new_points)$/;"	f	class:CLLKTrackerFinalizeKernel
configure	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerInitKernel::configure(const ICLKeyPointArray *old_points, const ICLKeyPointArray *new_points_estimates,$/;"	f	class:CLLKTrackerInitKernel
configure	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerStage0Kernel::configure(const ICLTensor *old_input, const ICLTensor *old_scharr_gx, const ICLTensor *old_scharr_gy,$/;"	f	class:CLLKTrackerStage0Kernel
configure	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerStage1Kernel::configure(const ICLTensor *new_input, ICLLKInternalKeypointArray *new_points_internal, ICLCoefficientTableArray *coeff_table, ICLOldValArray *old_ival,$/;"	f	class:CLLKTrackerStage1Kernel
configure	src/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.cpp	/^void CLLocallyConnectedMatrixMultiplyKernel::configure(const ICLTensor *input0, const ICLTensor *input1, ICLTensor *output)$/;"	f	class:CLLocallyConnectedMatrixMultiplyKernel
configure	src/core/CL/kernels/CLMagnitudePhaseKernel.cpp	/^void CLMagnitudePhaseKernel::configure(const ICLTensor *gx, const ICLTensor *gy, ICLTensor *magnitude, ICLTensor *phase,$/;"	f	class:CLMagnitudePhaseKernel
configure	src/core/CL/kernels/CLMeanStdDevKernel.cpp	/^void CLMeanStdDevKernel::configure(const ICLImage *input, float *mean, cl::Buffer *global_sum, float *stddev, cl::Buffer *global_sum_squared)$/;"	f	class:CLMeanStdDevKernel
configure	src/core/CL/kernels/CLMedian3x3Kernel.cpp	/^void CLMedian3x3Kernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLMedian3x3Kernel
configure	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^void CLMinMaxLayerKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLMinMaxLayerKernel
configure	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^void CLMinMaxKernel::configure(const ICLImage *input, cl::Buffer *min_max)$/;"	f	class:arm_compute::CLMinMaxKernel
configure	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^void CLMinMaxLocationKernel::configure(const ICLImage *input, cl::Buffer *min_max, cl::Buffer *min_max_count, ICLCoordinates2DArray *min_loc, ICLCoordinates2DArray *max_loc)$/;"	f	class:arm_compute::CLMinMaxLocationKernel
configure	src/core/CL/kernels/CLNonLinearFilterKernel.cpp	/^void CLNonLinearFilterKernel::configure(const ICLTensor *input, ICLTensor *output, NonLinearFilterFunction function,$/;"	f	class:CLNonLinearFilterKernel
configure	src/core/CL/kernels/CLNonMaximaSuppression3x3Kernel.cpp	/^void CLNonMaximaSuppression3x3Kernel::configure(const ICLTensor *input, ICLTensor *output, bool border_undefined)$/;"	f	class:CLNonMaximaSuppression3x3Kernel
configure	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^void CLNormalizationLayerKernel::configure(const ICLTensor *input, ICLTensor *output, NormalizationLayerInfo norm_info)$/;"	f	class:CLNormalizationLayerKernel
configure	src/core/CL/kernels/CLPermuteKernel.cpp	/^void CLPermuteKernel::configure(const ICLTensor *input, ICLTensor *output, const PermutationVector &perm)$/;"	f	class:CLPermuteKernel
configure	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^void CLPixelWiseMultiplicationKernel::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, float scale,$/;"	f	class:CLPixelWiseMultiplicationKernel
configure	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^void CLPoolingLayerKernel::configure(const ICLTensor *input, ICLTensor *output, const PoolingLayerInfo &pool_info)$/;"	f	class:CLPoolingLayerKernel
configure	src/core/CL/kernels/CLQuantizationLayerKernel.cpp	/^void CLQuantizationLayerKernel::configure(const ICLTensor *input, ICLTensor *output, ICLTensor *min_max)$/;"	f	class:CLQuantizationLayerKernel
configure	src/core/CL/kernels/CLROIPoolingLayerKernel.cpp	/^void CLROIPoolingLayerKernel::configure(const ICLTensor *input, const ICLROIArray *rois, ICLTensor *output, const ROIPoolingLayerInfo &pool_info)$/;"	f	class:CLROIPoolingLayerKernel
configure	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^void CLReductionOperationKernel::configure(const ICLTensor *input, ICLTensor *output, unsigned int axis, ReductionOperation op)$/;"	f	class:CLReductionOperationKernel
configure	src/core/CL/kernels/CLRemapKernel.cpp	/^void CLRemapKernel::configure(const ICLTensor *input, const ICLTensor *map_x, const ICLTensor *map_y, ICLTensor *output, InterpolationPolicy policy, bool border_undefined)$/;"	f	class:CLRemapKernel
configure	src/core/CL/kernels/CLReshapeLayerKernel.cpp	/^void CLReshapeLayerKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLReshapeLayerKernel
configure	src/core/CL/kernels/CLScaleKernel.cpp	/^void CLScaleKernel::configure(const ICLTensor *input, ICLTensor *output, InterpolationPolicy policy, bool border_undefined, SamplingPolicy sampling_policy)$/;"	f	class:CLScaleKernel
configure	src/core/CL/kernels/CLScharr3x3Kernel.cpp	/^void CLScharr3x3Kernel::configure(const ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLScharr3x3Kernel
configure	src/core/CL/kernels/CLSobel3x3Kernel.cpp	/^void CLSobel3x3Kernel::configure(const ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLSobel3x3Kernel
configure	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^void CLSobel5x5HorKernel::configure(const ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLSobel5x5HorKernel
configure	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^void CLSobel5x5VertKernel::configure(const ICLTensor *input_x, const ICLTensor *input_y, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLSobel5x5VertKernel
configure	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^void CLSobel7x7HorKernel::configure(const ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLSobel7x7HorKernel
configure	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^void CLSobel7x7VertKernel::configure(const ICLTensor *input_x, const ICLTensor *input_y, ICLTensor *output_x, ICLTensor *output_y, bool border_undefined)$/;"	f	class:CLSobel7x7VertKernel
configure	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^void CLLogits1DMaxShiftExpSumKernel::configure(const ICLTensor *input, ICLTensor *max, ICLTensor *output, ICLTensor *sum, float beta)$/;"	f	class:CLLogits1DMaxShiftExpSumKernel
configure	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^void CLLogits1DNormKernel::configure(const ICLTensor *input, const ICLTensor *sum, ICLTensor *output, float beta)$/;"	f	class:CLLogits1DNormKernel
configure	src/core/CL/kernels/CLTableLookupKernel.cpp	/^void CLTableLookupKernel::configure(const ICLTensor *input, const ICLLut *lut, ICLTensor *output)$/;"	f	class:CLTableLookupKernel
configure	src/core/CL/kernels/CLThresholdKernel.cpp	/^void CLThresholdKernel::configure(const ICLTensor *input, ICLTensor *output, uint8_t threshold,$/;"	f	class:CLThresholdKernel
configure	src/core/CL/kernels/CLTransposeKernel.cpp	/^void CLTransposeKernel::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLTransposeKernel
configure	src/core/CL/kernels/CLWarpAffineKernel.cpp	/^void CLWarpAffineKernel::configure(const ICLTensor *input, ICLTensor *output, const float *matrix, InterpolationPolicy policy)$/;"	f	class:CLWarpAffineKernel
configure	src/core/CL/kernels/CLWarpPerspectiveKernel.cpp	/^void CLWarpPerspectiveKernel::configure(const ICLTensor *input, ICLTensor *output, const float *matrix, InterpolationPolicy policy)$/;"	f	class:CLWarpPerspectiveKernel
configure	src/core/CL/kernels/CLWeightsReshapeKernel.cpp	/^void CLWeightsReshapeKernel::configure(const ICLTensor *input, const ICLTensor *biases, ICLTensor *output)$/;"	f	class:CLWeightsReshapeKernel
configure	src/core/CL/kernels/CLWidthConcatenateLayerKernel.cpp	/^void CLWidthConcatenateLayerKernel::configure(const ICLTensor *input, unsigned int width_offset, ICLTensor *output)$/;"	f	class:CLWidthConcatenateLayerKernel
configure	src/core/CL/kernels/CLWinogradFilterTransformKernel.cpp	/^void CLWinogradFilterTransformKernel::configure(const ICLTensor *input, ICLTensor *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradFilterTransformKernel
configure	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^void CLWinogradInputTransformKernel::configure(const ICLTensor *input, ICLTensor *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradInputTransformKernel
configure	src/core/CL/kernels/CLWinogradOutputTransformKernel.cpp	/^void CLWinogradOutputTransformKernel::configure(const ICLTensor *input, const ICLTensor *bias, ICLTensor *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradOutputTransformKernel
configure	src/core/CPP/ICPPSimpleKernel.cpp	/^void ICPPSimpleKernel::configure(const ITensor *input, ITensor *output, unsigned int num_elems_processed_per_iteration, bool border_undefined, const BorderSize &border_size)$/;"	f	class:ICPPSimpleKernel
configure	src/core/CPP/kernels/CPPCornerCandidatesKernel.cpp	/^void CPPCornerCandidatesKernel::configure(const IImage *input, InternalKeypoint *output, int32_t *num_corner_candidates)$/;"	f	class:CPPCornerCandidatesKernel
configure	src/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.cpp	/^void CPPDetectionWindowNonMaximaSuppressionKernel::configure(IDetectionWindowArray *input_output, float min_distance)$/;"	f	class:CPPDetectionWindowNonMaximaSuppressionKernel
configure	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^void CPPPermuteKernel::configure(const ITensor *input, ITensor *output, const PermutationVector &perm)$/;"	f	class:CPPPermuteKernel
configure	src/core/CPP/kernels/CPPSortEuclideanDistanceKernel.cpp	/^void CPPSortEuclideanDistanceKernel::configure(InternalKeypoint *in_out, IKeyPointArray *output, const int32_t *num_corner_candidates, float min_distance)$/;"	f	class:CPPSortEuclideanDistanceKernel
configure	src/core/CPP/kernels/CPPUpsampleKernel.cpp	/^void CPPUpsampleKernel::configure(const ITensor *input, ITensor *output, const PadStrideInfo &info, unsigned int inner_border_right, unsigned int inner_border_top)$/;"	f	class:CPPUpsampleKernel
configure	src/core/GLES_COMPUTE/IGCSimpleKernel.cpp	/^void IGCSimpleKernel::configure(const IGCTensor *input, IGCTensor *output, unsigned int num_elems_processed_per_iteration, bool border_undefined, const BorderSize &border_size)$/;"	f	class:IGCSimpleKernel
configure	src/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.cpp	/^void GCAbsoluteDifferenceKernel::configure(const IGCTensor *input1, const IGCTensor *input2, IGCTensor *output)$/;"	f	class:GCAbsoluteDifferenceKernel
configure	src/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.cpp	/^void GCActivationLayerKernel::configure(IGCTensor *input, IGCTensor *output, ActivationLayerInfo act_info)$/;"	f	class:GCActivationLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.cpp	/^void GCArithmeticAdditionKernel::configure(const IGCTensor *input1, const IGCTensor *input2, IGCTensor *output, ConvertPolicy policy)$/;"	f	class:GCArithmeticAdditionKernel
configure	src/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.cpp	/^void GCBatchNormalizationLayerKernel::configure(const IGCTensor *input, IGCTensor *output, const IGCTensor *mean, const IGCTensor *var, const IGCTensor *beta, const IGCTensor *gamma,$/;"	f	class:GCBatchNormalizationLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCCol2ImKernel.cpp	/^void GCCol2ImKernel::configure(const IGCTensor *input, IGCTensor    *output,$/;"	f	class:GCCol2ImKernel
configure	src/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.cpp	/^void GCDepthConcatenateLayerKernel::configure(const IGCTensor *input, unsigned int depth_offset, IGCTensor *output)$/;"	f	class:GCDepthConcatenateLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.cpp	/^void GCDepthwiseConvolutionLayer3x3Kernel::configure(const IGCTensor *input, const IGCTensor *weights, const IGCTensor *biases, IGCTensor *output, const PadStrideInfo &conv_info,$/;"	f	class:GCDepthwiseConvolutionLayer3x3Kernel
configure	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^void GCDirectConvolutionLayerKernel<kernel_size>::configure(const IGCTensor *input, const IGCTensor *weights, const IGCTensor *bias, IGCTensor *output,$/;"	f	class:GCDirectConvolutionLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.cpp	/^void GCDropoutLayerKernel::configure(const IGCTensor *input, IGCTensor *mask, IGCTensor *output, float ratio, bool forward)$/;"	f	class:GCDropoutLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCFillBorderKernel.cpp	/^void GCFillBorderKernel::configure(const IGCTensor *tensor, BorderSize border_size, BorderMode border_mode, const PixelValue &constant_border_value)$/;"	f	class:GCFillBorderKernel
configure	src/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.cpp	/^void GCGEMMInterleave4x4Kernel::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCGEMMInterleave4x4Kernel
configure	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.cpp	/^void GCGEMMMatrixAccumulateBiasesKernel::configure(IGCTensor *accum, const IGCTensor *biases)$/;"	f	class:GCGEMMMatrixAccumulateBiasesKernel
configure	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.cpp	/^void GCGEMMMatrixAdditionKernel::configure(const IGCTensor *input, IGCTensor *output, float beta)$/;"	f	class:GCGEMMMatrixAdditionKernel
configure	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.cpp	/^void GCGEMMMatrixMultiplyKernel::configure(const IGCTensor *input0, const IGCTensor *input1, IGCTensor *output, float alpha, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	class:GCGEMMMatrixMultiplyKernel
configure	src/core/GLES_COMPUTE/kernels/GCGEMMTranspose1xWKernel.cpp	/^void GCGEMMTranspose1xWKernel::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCGEMMTranspose1xWKernel
configure	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^void GCIm2ColKernel::configure(const IGCTensor *input, IGCTensor *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, const Size2D &dilation)$/;"	f	class:GCIm2ColKernel
configure	src/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.cpp	/^void GCNormalizationLayerKernel::configure(const IGCTensor *input, const IGCTensor *squared_input, IGCTensor *output, NormalizationLayerInfo norm_info)$/;"	f	class:GCNormalizationLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.cpp	/^void GCNormalizePlanarYUVLayerKernel::configure(const IGCTensor *input, IGCTensor *output, const IGCTensor *mean, const IGCTensor *sd)$/;"	f	class:GCNormalizePlanarYUVLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.cpp	/^void GCPixelWiseMultiplicationKernel::configure(const IGCTensor *input1, const IGCTensor *input2, IGCTensor *output, float scale)$/;"	f	class:GCPixelWiseMultiplicationKernel
configure	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^void GCPoolingLayerKernel::configure(const IGCTensor *input, IGCTensor *output, const PoolingLayerInfo &pool_info)$/;"	f	class:GCPoolingLayerKernel
configure	src/core/GLES_COMPUTE/kernels/GCScaleKernel.cpp	/^void GCScaleKernel::configure(const IGCTensor *input, IGCTensor *output, InterpolationPolicy policy, bool border_undefined, SamplingPolicy sampling_policy)$/;"	f	class:GCScaleKernel
configure	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^void GCLogits1DMaxKernel::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCLogits1DMaxKernel
configure	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^void GCLogits1DNormKernel::configure(const IGCTensor *input, const IGCTensor *sum, IGCTensor *output)$/;"	f	class:GCLogits1DNormKernel
configure	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^void GCLogits1DShiftExpSumKernel::configure(const IGCTensor *input, const IGCTensor *max, IGCTensor *output, IGCTensor *sum)$/;"	f	class:GCLogits1DShiftExpSumKernel
configure	src/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.cpp	/^void GCTensorShiftKernel::configure(IGCTensor *input)$/;"	f	class:GCTensorShiftKernel
configure	src/core/GLES_COMPUTE/kernels/GCTransposeKernel.cpp	/^void GCTransposeKernel::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCTransposeKernel
configure	src/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.cpp	/^void GCWeightsReshapeKernel::configure(const IGCTensor *input, const IGCTensor *biases, IGCTensor *output)$/;"	f	class:GCWeightsReshapeKernel
configure	src/core/IKernel.cpp	/^void IKernel::configure(const Window &window)$/;"	f	class:IKernel
configure	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^void NEAbsoluteDifferenceKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEAbsoluteDifferenceKernel
configure	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateKernel::configure(const ITensor *input, ITensor *accum)$/;"	f	class:NEAccumulateKernel
configure	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateSquaredKernel::configure(const ITensor *input, uint32_t shift, ITensor *accum)$/;"	f	class:NEAccumulateSquaredKernel
configure	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateWeightedKernel::configure(const ITensor *input, float alpha, ITensor *accum)$/;"	f	class:NEAccumulateWeightedKernel
configure	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^void NEActivationLayerKernel::configure(ITensor *input, ITensor *output, ActivationLayerInfo activation_info)$/;"	f	class:NEActivationLayerKernel
configure	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void NEArithmeticAdditionKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticAdditionKernel
configure	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void NEArithmeticSubtractionKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticSubtractionKernel
configure	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::configure(ITensor *input, ITensor *output,$/;"	f	class:NEBatchNormalizationLayerKernel
configure	src/core/NEON/kernels/NEBitwiseAndKernel.cpp	/^void NEBitwiseAndKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEBitwiseAndKernel
configure	src/core/NEON/kernels/NEBitwiseNotKernel.cpp	/^void NEBitwiseNotKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEBitwiseNotKernel
configure	src/core/NEON/kernels/NEBitwiseOrKernel.cpp	/^void NEBitwiseOrKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEBitwiseOrKernel
configure	src/core/NEON/kernels/NEBitwiseXorKernel.cpp	/^void NEBitwiseXorKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEBitwiseXorKernel
configure	src/core/NEON/kernels/NEBox3x3Kernel.cpp	/^void NEBox3x3Kernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEBox3x3Kernel
configure	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEEdgeNonMaxSuppressionKernel::configure(const ITensor *magnitude, const ITensor *phase, ITensor *output,$/;"	f	class:NEEdgeNonMaxSuppressionKernel
configure	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEEdgeTraceKernel::configure(ITensor *input, ITensor *output)$/;"	f	class:NEEdgeTraceKernel
configure	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEGradientFP16Kernel::configure(const ITensor *gx, const ITensor *gy, ITensor *magnitude, ITensor *phase, int32_t norm_type)$/;"	f	class:NEGradientFP16Kernel
configure	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEGradientKernel::configure(const ITensor *gx, const ITensor *gy, ITensor *magnitude, ITensor *phase, int32_t norm_type)$/;"	f	class:NEGradientKernel
configure	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::configure(const IImage *plane0, const IImage *plane1, const IImage *plane2, IMultiImage *output)$/;"	f	class:NEChannelCombineKernel
configure	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::configure(const ITensor *plane0, const ITensor *plane1, const ITensor *plane2, const ITensor *plane3, ITensor *output)$/;"	f	class:NEChannelCombineKernel
configure	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::configure(const IMultiImage *input, Channel channel, IImage *output)$/;"	f	class:NEChannelExtractKernel
configure	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::configure(const ITensor *input, Channel channel, ITensor *output)$/;"	f	class:NEChannelExtractKernel
configure	src/core/NEON/kernels/NECol2ImKernel.cpp	/^void NECol2ImKernel::configure(const ITensor *input, ITensor *output, const Size2D &convolved_dims)$/;"	f	class:NECol2ImKernel
configure	src/core/NEON/kernels/NEColorConvertKernel.cpp	/^void NEColorConvertKernel::configure(const IImage *input, IMultiImage *output)$/;"	f	class:NEColorConvertKernel
configure	src/core/NEON/kernels/NEColorConvertKernel.cpp	/^void NEColorConvertKernel::configure(const IMultiImage *input, IImage *output)$/;"	f	class:NEColorConvertKernel
configure	src/core/NEON/kernels/NEColorConvertKernel.cpp	/^void NEColorConvertKernel::configure(const IMultiImage *input, IMultiImage *output)$/;"	f	class:NEColorConvertKernel
configure	src/core/NEON/kernels/NEColorConvertKernel.cpp	/^void NEColorConvertKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEColorConvertKernel
configure	src/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.cpp	/^void NEConvertFullyConnectedWeightsKernel::configure(const ITensor *input, ITensor *output, const TensorShape &original_input_shape,$/;"	f	class:NEConvertFullyConnectedWeightsKernel
configure	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionKernel<matrix_size>::configure(const ITensor *input, ITensor *output, const int16_t *conv, uint32_t scale, bool border_undefined)$/;"	f	class:arm_compute::NEConvolutionKernel
configure	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionRectangleKernel::configure(const ITensor *input, ITensor *output, const int16_t *conv, uint32_t width, uint32_t height, uint32_t scale, bool border_undefined)$/;"	f	class:arm_compute::NEConvolutionRectangleKernel
configure	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionHorKernel<matrix_size>::configure(const ITensor *input, ITensor *output, const int16_t *conv_row, bool border_undefined)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
configure	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionVertKernel<matrix_size>::configure(const ITensor *input, ITensor *output, const int16_t *conv_col, uint32_t scale, bool border_undefined)$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
configure	src/core/NEON/kernels/NECumulativeDistributionKernel.cpp	/^void NECumulativeDistributionKernel::configure(const IImage *input, const IDistribution1D *distribution, IDistribution1D *cumulative_sum, ILut *output)$/;"	f	class:NECumulativeDistributionKernel
configure	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^void NEDepthConcatenateLayerKernel::configure(const ITensor *input, unsigned int depth_offset, ITensor *output)$/;"	f	class:NEDepthConcatenateLayerKernel
configure	src/core/NEON/kernels/NEDepthConvertLayerKernel.cpp	/^void NEDepthConvertLayerKernel::configure(ITensor *input, ITensor *output, ConvertPolicy policy, uint32_t shift)$/;"	f	class:NEDepthConvertLayerKernel
configure	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::configure(const ITensor *input, const ITensor *weights, ITensor *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier,$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
configure	src/core/NEON/kernels/NEDepthwiseIm2ColKernel.cpp	/^void NEDepthwiseIm2ColKernel::configure(const ITensor *input, ITensor *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, unsigned int depth_multiplier)$/;"	f	class:NEDepthwiseIm2ColKernel
configure	src/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.cpp	/^void NEDepthwiseVectorToTensorKernel::configure(const ITensor *input, ITensor *output, size_t conv_w, size_t conv_h)$/;"	f	class:NEDepthwiseVectorToTensorKernel
configure	src/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.cpp	/^void NEDepthwiseWeightsReshapeKernel::configure(const ITensor *input, ITensor *output, const ITensor *biases)$/;"	f	class:NEDepthwiseWeightsReshapeKernel
configure	src/core/NEON/kernels/NEDequantizationLayerKernel.cpp	/^void NEDequantizationLayerKernel::configure(const ITensor *input, ITensor *output, const ITensor *min_max)$/;"	f	class:NEDequantizationLayerKernel
configure	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^void NEDerivativeKernel::configure(const ITensor *input, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NEDerivativeKernel
configure	src/core/NEON/kernels/NEDilateKernel.cpp	/^void NEDilateKernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEDilateKernel
configure	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void NEDirectConvolutionLayerKernel::configure(const ITensor *input, const ITensor *weights, ITensor *output, const PadStrideInfo &conv_info)$/;"	f	class:NEDirectConvolutionLayerKernel
configure	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^void NEDirectConvolutionLayerOutputStageKernel::configure(ITensor *input, const ITensor *bias, ITensor *output,$/;"	f	class:NEDirectConvolutionLayerOutputStageKernel
configure	src/core/NEON/kernels/NEErodeKernel.cpp	/^void NEErodeKernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEErodeKernel
configure	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^void NEFastCornersKernel::configure(const IImage *input, IImage *output, uint8_t threshold, bool non_max_suppression, bool border_undefined)$/;"	f	class:NEFastCornersKernel
configure	src/core/NEON/kernels/NEFillArrayKernel.cpp	/^void NEFillArrayKernel::configure(const IImage *input, uint8_t threshold, IKeyPointArray *output)$/;"	f	class:NEFillArrayKernel
configure	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^void NEFillBorderKernel::configure(ITensor *tensor, BorderSize border_size, BorderMode border_mode, const PixelValue &constant_border_value)$/;"	f	class:NEFillBorderKernel
configure	src/core/NEON/kernels/NEFillInnerBorderKernel.cpp	/^void NEFillInnerBorderKernel::configure(ITensor *input, BorderSize border_size, const PixelValue &constant_border_value)$/;"	f	class:NEFillInnerBorderKernel
configure	src/core/NEON/kernels/NEFloorKernel.cpp	/^void NEFloorKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEFloorKernel
configure	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^void NEGEMMInterleave4x4Kernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEGEMMInterleave4x4Kernel
configure	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^void NEGEMMLowpMatrixMultiplyKernel::configure(const ITensor *input0, const ITensor *input1, ITensor *output)$/;"	f	class:NEGEMMLowpMatrixMultiplyKernel
configure	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^void NEGEMMLowpOffsetContributionKernel::configure(ITensor *mm_result, const ITensor *vector_sum_col, const ITensor *vector_sum_row, int32_t k, int32_t a_offset, int32_t b_offset)$/;"	f	class:NEGEMMLowpOffsetContributionKernel
configure	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure(const ITensor *input, const ITensor *bias, ITensor *output, int result_fixedpoint_multiplier, int result_shift,$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
configure	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::configure(const ITensor *input, const ITensor *bias, ITensor *output, int result_offset, int result_mult_int, int result_shift, int min, int max)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
configure	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^void NEGEMMLowpMatrixAReductionKernel::configure(const ITensor *mtx_a, ITensor *vector_sum_row, int32_t num_mtx_a_cols, bool is_interleaved4x4)$/;"	f	class:NEGEMMLowpMatrixAReductionKernel
configure	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^void NEGEMMLowpMatrixBReductionKernel::configure(const ITensor *mtx_b, ITensor *vector_sum_col, int32_t num_mtx_b_rows, bool is_transposed1xW)$/;"	f	class:NEGEMMLowpMatrixBReductionKernel
configure	src/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.cpp	/^void NEGEMMMatrixAccumulateBiasesKernel::configure(ITensor *accum, const ITensor *biases)$/;"	f	class:NEGEMMMatrixAccumulateBiasesKernel
configure	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^void NEGEMMMatrixAdditionKernel::configure(const ITensor *input, ITensor *output, float beta)$/;"	f	class:NEGEMMMatrixAdditionKernel
configure	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void NEGEMMMatrixMultiplyKernel::configure(const ITensor *input0, const ITensor *input1, ITensor *output, float alpha, bool is_interleaved, const GEMMReshapeInfo &reshape_info)$/;"	f	class:NEGEMMMatrixMultiplyKernel
configure	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^void NEGEMMMatrixVectorMultiplyKernel::configure(const ITensor *input0, const ITensor *input1, ITensor *output)$/;"	f	class:NEGEMMMatrixVectorMultiplyKernel
configure	src/core/NEON/kernels/NEGEMMTranspose1xWKernel.cpp	/^void NEGEMMTranspose1xWKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEGEMMTranspose1xWKernel
configure	src/core/NEON/kernels/NEGaussian3x3Kernel.cpp	/^void NEGaussian3x3Kernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEGaussian3x3Kernel
configure	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^void NEGaussian5x5HorKernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEGaussian5x5HorKernel
configure	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^void NEGaussian5x5VertKernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEGaussian5x5VertKernel
configure	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^void NEGaussianPyramidHorKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEGaussianPyramidHorKernel
configure	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^void NEGaussianPyramidVertKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEGaussianPyramidVertKernel
configure	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void NEHOGBlockNormalizationKernel::configure(const ITensor *input, ITensor *output, const HOGInfo *hog_info)$/;"	f	class:NEHOGBlockNormalizationKernel
configure	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void NEHOGOrientationBinningKernel::configure(const ITensor *input_magnitude, const ITensor *input_phase, ITensor *output, const HOGInfo *hog_info)$/;"	f	class:NEHOGOrientationBinningKernel
configure	src/core/NEON/kernels/NEHOGDetectorKernel.cpp	/^void NEHOGDetectorKernel::configure(const ITensor *input, const IHOG *hog, IDetectionWindowArray *detection_windows, const Size2D &detection_window_stride, float threshold, uint16_t idx_class)$/;"	f	class:NEHOGDetectorKernel
configure	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^void NEHarrisScoreFP16Kernel<block_size>::configure(const IImage *input1, const IImage *input2, IImage *output, float norm_factor, float strength_thresh, float sensitivity,$/;"	f	class:NEHarrisScoreFP16Kernel
configure	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^void NEHarrisScoreKernel<block_size>::configure(const IImage *input1, const IImage *input2, IImage *output, float norm_factor, float strength_thresh, float sensitivity,$/;"	f	class:NEHarrisScoreKernel
configure	src/core/NEON/kernels/NEHistogramKernel.cpp	/^void NEHistogramKernel::configure(const IImage *input, IDistribution1D *output)$/;"	f	class:NEHistogramKernel
configure	src/core/NEON/kernels/NEHistogramKernel.cpp	/^void NEHistogramKernel::configure(const IImage *input, IDistribution1D *output, uint32_t *local_hist, uint32_t *window_lut)$/;"	f	class:NEHistogramKernel
configure	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^void NEIm2ColKernel::configure(const ITensor *input, ITensor *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info,$/;"	f	class:NEIm2ColKernel
configure	src/core/NEON/kernels/NEIntegralImageKernel.cpp	/^void NEIntegralImageKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEIntegralImageKernel
configure	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^void NEL2NormalizeLayerKernel::configure(const ITensor *input, const ITensor *sum, ITensor *output, unsigned int axis, float epsilon)$/;"	f	class:NEL2NormalizeLayerKernel
configure	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^void NELKTrackerKernel::configure(const ITensor *input_old, const ITensor *input_new, const ITensor *old_scharr_gx, const ITensor *old_scharr_gy,$/;"	f	class:NELKTrackerKernel
configure	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^void NELocallyConnectedMatrixMultiplyKernel::configure(const ITensor *input0, const ITensor *input1, ITensor *output)$/;"	f	class:NELocallyConnectedMatrixMultiplyKernel
configure	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseFP16Kernel<mag_type, phase_type>::configure(const ITensor *gx, const ITensor *gy, ITensor *magnitude, ITensor *phase)$/;"	f	class:NEMagnitudePhaseFP16Kernel
configure	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseKernel<mag_type, phase_type>::configure(const ITensor *gx, const ITensor *gy, ITensor *magnitude, ITensor *phase)$/;"	f	class:NEMagnitudePhaseKernel
configure	src/core/NEON/kernels/NEMeanStdDevKernel.cpp	/^void NEMeanStdDevKernel::configure(const IImage *input, float *mean, uint64_t *global_sum, float *stddev, uint64_t *global_sum_squared)$/;"	f	class:NEMeanStdDevKernel
configure	src/core/NEON/kernels/NEMedian3x3Kernel.cpp	/^void NEMedian3x3Kernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NEMedian3x3Kernel
configure	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^void NEMinMaxLayerKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:arm_compute::NEMinMaxLayerKernel
configure	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::configure(const IImage *input, void *min, void *max)$/;"	f	class:arm_compute::NEMinMaxKernel
configure	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxLocationKernel::configure(const IImage *input, void *min, void *max,$/;"	f	class:arm_compute::NEMinMaxLocationKernel
configure	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::configure(const ITensor *input, ITensor *output, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, const uint8_t *mask,$/;"	f	class:arm_compute::NENonLinearFilterKernel
configure	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^void NENonMaximaSuppression3x3FP16Kernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NENonMaximaSuppression3x3FP16Kernel
configure	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^void NENonMaximaSuppression3x3Kernel::configure(const ITensor *input, ITensor *output, bool border_undefined)$/;"	f	class:NENonMaximaSuppression3x3Kernel
configure	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^void NENormalizationLayerKernel::configure(const ITensor *input, const ITensor *input_squared, ITensor *output, NormalizationLayerInfo norm_info)$/;"	f	class:NENormalizationLayerKernel
configure	src/core/NEON/kernels/NEPermuteKernel.cpp	/^void NEPermuteKernel::configure(const ITensor *input, ITensor *output, const PermutationVector &perm)$/;"	f	class:NEPermuteKernel
configure	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void NEPixelWiseMultiplicationKernel::configure(const ITensor *input1, const ITensor *input2, ITensor *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy)$/;"	f	class:NEPixelWiseMultiplicationKernel
configure	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::configure(const ITensor *input, ITensor *output, const PoolingLayerInfo &pool_info)$/;"	f	class:NEPoolingLayerKernel
configure	src/core/NEON/kernels/NEQuantizationLayerKernel.cpp	/^void NEQuantizationLayerKernel::configure(const ITensor *input, ITensor *output, const ITensor *min_max)$/;"	f	class:NEQuantizationLayerKernel
configure	src/core/NEON/kernels/NEROIPoolingLayerKernel.cpp	/^void NEROIPoolingLayerKernel::configure(const ITensor *input, const IROIArray *rois, ITensor *output, const ROIPoolingLayerInfo &pool_info)$/;"	f	class:NEROIPoolingLayerKernel
configure	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^void NEReductionOperationKernel::configure(const ITensor *input, ITensor *output, unsigned int axis, ReductionOperation op)$/;"	f	class:NEReductionOperationKernel
configure	src/core/NEON/kernels/NERemapKernel.cpp	/^void NERemapKernel::configure(const ITensor *input, const ITensor *map_x, const ITensor *map_y, ITensor *output, InterpolationPolicy policy)$/;"	f	class:NERemapKernel
configure	src/core/NEON/kernels/NEReshapeLayerKernel.cpp	/^void NEReshapeLayerKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEReshapeLayerKernel
configure	src/core/NEON/kernels/NEScaleKernel.cpp	/^void NEScaleKernel::configure(const ITensor *input, const ITensor *dx, const ITensor *dy, const ITensor *offsets,$/;"	f	class:arm_compute::NEScaleKernel
configure	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^void NEScharr3x3Kernel::configure(const ITensor *input, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NEScharr3x3Kernel
configure	src/core/NEON/kernels/NESobel3x3Kernel.cpp	/^void NESobel3x3Kernel::configure(const ITensor *input, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NESobel3x3Kernel
configure	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^void NESobel5x5HorKernel::configure(const ITensor *input, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NESobel5x5HorKernel
configure	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^void NESobel5x5VertKernel::configure(ITensor *input_x, ITensor *input_y, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NESobel5x5VertKernel
configure	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^void NESobel7x7HorKernel::configure(const ITensor *input, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NESobel7x7HorKernel
configure	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^void NESobel7x7VertKernel::configure(const ITensor *input_x, const ITensor *input_y, ITensor *output_x, ITensor *output_y, bool border_undefined)$/;"	f	class:NESobel7x7VertKernel
configure	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void NELogits1DMaxKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:arm_compute::NELogits1DMaxKernel
configure	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void NELogits1DSoftmaxKernel::configure(const ITensor *input, const ITensor *max, ITensor *output, const float beta, ITensor *tmp)$/;"	f	class:arm_compute::NELogits1DSoftmaxKernel
configure	src/core/NEON/kernels/NETableLookupKernel.cpp	/^void NETableLookupKernel::configure(const ITensor *input, const ILut *lut, ITensor *output)$/;"	f	class:NETableLookupKernel
configure	src/core/NEON/kernels/NEThresholdKernel.cpp	/^void NEThresholdKernel::configure(const ITensor *input, ITensor *output, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)$/;"	f	class:NEThresholdKernel
configure	src/core/NEON/kernels/NETransposeKernel.cpp	/^void NETransposeKernel::configure(const ITensor *input, ITensor *output)$/;"	f	class:NETransposeKernel
configure	src/core/NEON/kernels/NEWarpKernel.cpp	/^void INEWarpKernel::configure(const ITensor *input, ITensor *output, const float *matrix, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:INEWarpKernel
configure	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^void NEWeightsReshapeKernel::configure(const ITensor *input, const ITensor *bias, ITensor *output)$/;"	f	class:NEWeightsReshapeKernel
configure	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::configure($/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
configure	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerTransformInputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::configure($/;"	f	class:arm_compute::NEWinogradLayerTransformInputKernel
configure	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::configure($/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
configure	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::configure($/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
configure	src/runtime/CL/functions/CLAbsoluteDifference.cpp	/^void CLAbsoluteDifference::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLAbsoluteDifference
configure	src/runtime/CL/functions/CLAccumulate.cpp	/^void CLAccumulate::configure(const ICLTensor *input, ICLTensor *accum)$/;"	f	class:CLAccumulate
configure	src/runtime/CL/functions/CLAccumulate.cpp	/^void CLAccumulateSquared::configure(const ICLTensor *input, uint32_t shift, ICLTensor *accum)$/;"	f	class:CLAccumulateSquared
configure	src/runtime/CL/functions/CLAccumulate.cpp	/^void CLAccumulateWeighted::configure(const ICLTensor *input, float alpha, ICLTensor *accum)$/;"	f	class:CLAccumulateWeighted
configure	src/runtime/CL/functions/CLActivationLayer.cpp	/^void CLActivationLayer::configure(ICLTensor *input, ICLTensor *output, ActivationLayerInfo act_info)$/;"	f	class:CLActivationLayer
configure	src/runtime/CL/functions/CLArithmeticAddition.cpp	/^void CLArithmeticAddition::configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticAddition
configure	src/runtime/CL/functions/CLArithmeticSubtraction.cpp	/^void CLArithmeticSubtraction::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticSubtraction
configure	src/runtime/CL/functions/CLBatchNormalizationLayer.cpp	/^void CLBatchNormalizationLayer::configure(ICLTensor *input, ICLTensor *output, const ICLTensor *mean, const ICLTensor *var, const ICLTensor *beta, const ICLTensor *gamma, float epsilon,$/;"	f	class:CLBatchNormalizationLayer
configure	src/runtime/CL/functions/CLBitwiseAnd.cpp	/^void CLBitwiseAnd::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLBitwiseAnd
configure	src/runtime/CL/functions/CLBitwiseNot.cpp	/^void CLBitwiseNot::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLBitwiseNot
configure	src/runtime/CL/functions/CLBitwiseOr.cpp	/^void CLBitwiseOr::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLBitwiseOr
configure	src/runtime/CL/functions/CLBitwiseXor.cpp	/^void CLBitwiseXor::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output)$/;"	f	class:CLBitwiseXor
configure	src/runtime/CL/functions/CLBox3x3.cpp	/^void CLBox3x3::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLBox3x3
configure	src/runtime/CL/functions/CLCannyEdge.cpp	/^void CLCannyEdge::configure(ICLTensor *input, ICLTensor *output, int32_t upper_thr, int32_t lower_thr, int32_t gradient_size, int32_t norm_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLCannyEdge
configure	src/runtime/CL/functions/CLChannelCombine.cpp	/^void CLChannelCombine::configure(const ICLImage *plane0, const ICLImage *plane1, const ICLImage *plane2, ICLMultiImage *output)$/;"	f	class:CLChannelCombine
configure	src/runtime/CL/functions/CLChannelCombine.cpp	/^void CLChannelCombine::configure(const ICLTensor *plane0, const ICLTensor *plane1, const ICLTensor *plane2, const ICLTensor *plane3, ICLTensor *output)$/;"	f	class:CLChannelCombine
configure	src/runtime/CL/functions/CLChannelExtract.cpp	/^void CLChannelExtract::configure(const ICLMultiImage *input, Channel channel, ICLImage *output)$/;"	f	class:CLChannelExtract
configure	src/runtime/CL/functions/CLChannelExtract.cpp	/^void CLChannelExtract::configure(const ICLTensor *input, Channel channel, ICLTensor *output)$/;"	f	class:CLChannelExtract
configure	src/runtime/CL/functions/CLChannelShuffleLayer.cpp	/^void CLChannelShuffleLayer::configure(const ICLTensor *input, ICLTensor *output, unsigned int num_groups)$/;"	f	class:arm_compute::CLChannelShuffleLayer
configure	src/runtime/CL/functions/CLColorConvert.cpp	/^void CLColorConvert::configure(const ICLImage *input, ICLMultiImage *output)$/;"	f	class:CLColorConvert
configure	src/runtime/CL/functions/CLColorConvert.cpp	/^void CLColorConvert::configure(const ICLMultiImage *input, ICLImage *output)$/;"	f	class:CLColorConvert
configure	src/runtime/CL/functions/CLColorConvert.cpp	/^void CLColorConvert::configure(const ICLMultiImage *input, ICLMultiImage *output)$/;"	f	class:CLColorConvert
configure	src/runtime/CL/functions/CLColorConvert.cpp	/^void CLColorConvert::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLColorConvert
configure	src/runtime/CL/functions/CLConvertFullyConnectedWeights.cpp	/^void CLConvertFullyConnectedWeights::configure(const ICLTensor *input, ICLTensor *output, const TensorShape &original_input_shape,$/;"	f	class:CLConvertFullyConnectedWeights
configure	src/runtime/CL/functions/CLConvolution.cpp	/^void CLConvolution3x3::configure(ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLConvolution3x3
configure	src/runtime/CL/functions/CLConvolution.cpp	/^void CLConvolutionRectangle::configure(ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t rows, uint32_t cols, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLConvolutionRectangle
configure	src/runtime/CL/functions/CLConvolution.cpp	/^void CLConvolutionSquare<matrix_size>::configure(ICLTensor *input, ICLTensor *output, const int16_t *conv, uint32_t scale, BorderMode border_mode,$/;"	f	class:CLConvolutionSquare
configure	src/runtime/CL/functions/CLConvolutionLayer.cpp	/^void CLConvolutionLayer::configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info, const WeightsInfo &weights_info,$/;"	f	class:CLConvolutionLayer
configure	src/runtime/CL/functions/CLCopy.cpp	/^void CLCopy::configure(ICLTensor *input, ICLTensor *output)$/;"	f	class:CLCopy
configure	src/runtime/CL/functions/CLDeconvolutionLayer.cpp	/^void CLDeconvolutionLayer::configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *bias, ICLTensor *output, const PadStrideInfo &info,$/;"	f	class:CLDeconvolutionLayer
configure	src/runtime/CL/functions/CLDeconvolutionLayerUpsample.cpp	/^void CLDeconvolutionLayerUpsample::configure(ICLTensor *input, ICLTensor *output, const BorderSize &inner_border,$/;"	f	class:CLDeconvolutionLayerUpsample
configure	src/runtime/CL/functions/CLDepthConcatenateLayer.cpp	/^void CLDepthConcatenateLayer::configure(std::vector<ICLTensor *> inputs_vector, ICLTensor *output) \/\/ NOLINT$/;"	f	class:CLDepthConcatenateLayer
configure	src/runtime/CL/functions/CLDepthConvertLayer.cpp	/^void CLDepthConvertLayer::configure(const ICLTensor *input, ICLTensor *output, ConvertPolicy policy, uint32_t shift)$/;"	f	class:CLDepthConvertLayer
configure	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^void CLDepthwiseConvolutionLayer3x3::configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier,$/;"	f	class:CLDepthwiseConvolutionLayer3x3
configure	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^void CLDepthwiseConvolutionLayer::configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier)$/;"	f	class:CLDepthwiseConvolutionLayer
configure	src/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.cpp	/^void CLDepthwiseSeparableConvolutionLayer::configure(ICLTensor *input, const ICLTensor *depthwise_weights, const ICLTensor *depthwise_biases, ICLTensor *depthwise_out,$/;"	f	class:CLDepthwiseSeparableConvolutionLayer
configure	src/runtime/CL/functions/CLDequantizationLayer.cpp	/^void CLDequantizationLayer::configure(const ICLTensor *input, ICLTensor *output, const ICLTensor *min_max)$/;"	f	class:CLDequantizationLayer
configure	src/runtime/CL/functions/CLDerivative.cpp	/^void CLDerivative::configure(ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLDerivative
configure	src/runtime/CL/functions/CLDilate.cpp	/^void CLDilate::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLDilate
configure	src/runtime/CL/functions/CLDirectConvolutionLayer.cpp	/^void CLDirectConvolutionLayer::configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info, const ActivationLayerInfo &act_info)$/;"	f	class:CLDirectConvolutionLayer
configure	src/runtime/CL/functions/CLEqualizeHistogram.cpp	/^void CLEqualizeHistogram::configure(const ICLImage *input, ICLImage *output)$/;"	f	class:CLEqualizeHistogram
configure	src/runtime/CL/functions/CLErode.cpp	/^void CLErode::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLErode
configure	src/runtime/CL/functions/CLFastCorners.cpp	/^void CLFastCorners::configure(const ICLImage *input, float threshold, bool nonmax_suppression, ICLKeyPointArray *corners,$/;"	f	class:CLFastCorners
configure	src/runtime/CL/functions/CLFillBorder.cpp	/^void CLFillBorder::configure(ICLTensor *tensor, unsigned int border_width, BorderMode border_mode, const PixelValue &constant_border_value)$/;"	f	class:CLFillBorder
configure	src/runtime/CL/functions/CLFlattenLayer.cpp	/^void CLFlattenLayer::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLFlattenLayer
configure	src/runtime/CL/functions/CLFloor.cpp	/^void CLFloor::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLFloor
configure	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayer::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, bool transpose_weights, bool are_weights_reshaped)$/;"	f	class:CLFullyConnectedLayer
configure	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayerReshapeWeights::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLFullyConnectedLayerReshapeWeights
configure	src/runtime/CL/functions/CLGEMM.cpp	/^void CLGEMM::configure(const ICLTensor *a, const ICLTensor *b, const ICLTensor *c, ICLTensor *output, float alpha, float beta, const GEMMInfo &gemm_info)$/;"	f	class:CLGEMM
configure	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^void CLConvolutionLayerReshapeWeights::configure(const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output)$/;"	f	class:CLConvolutionLayerReshapeWeights
configure	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^void CLGEMMConvolutionLayer::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info, const WeightsInfo &weights_info,$/;"	f	class:CLGEMMConvolutionLayer
configure	src/runtime/CL/functions/CLGEMMInterleave4x4.cpp	/^void CLGEMMInterleave4x4::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLGEMMInterleave4x4
configure	src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp	/^void CLGEMMLowpMatrixMultiplyCore::configure(const ICLTensor *a, const ICLTensor *b, ICLTensor *output, const GEMMInfo &gemm_info)$/;"	f	class:CLGEMMLowpMatrixMultiplyCore
configure	src/runtime/CL/functions/CLGEMMLowpOutputStage.cpp	/^void CLGEMMLowpQuantizeDownInt32ToUint8Scale::configure(const ICLTensor *input, const ICLTensor *bias, ICLTensor *output, int result_offset, int result_mult_int, int result_shift, int min, int max)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8Scale
configure	src/runtime/CL/functions/CLGEMMLowpOutputStage.cpp	/^void CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint::configure(const ICLTensor *input, const ICLTensor *bias, ICLTensor *output, int result_fixedpoint_multiplier, int result_shift,$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint
configure	src/runtime/CL/functions/CLGEMMTranspose1xW.cpp	/^void CLGEMMTranspose1xW::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLGEMMTranspose1xW
configure	src/runtime/CL/functions/CLGaussian3x3.cpp	/^void CLGaussian3x3::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLGaussian3x3
configure	src/runtime/CL/functions/CLGaussian5x5.cpp	/^void CLGaussian5x5::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLGaussian5x5
configure	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^void CLGaussianPyramidHalf::configure(ICLTensor *input, CLPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLGaussianPyramidHalf
configure	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^void CLGaussianPyramidOrb::configure(ICLTensor *input, CLPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLGaussianPyramidOrb
configure	src/runtime/CL/functions/CLHOGDescriptor.cpp	/^void CLHOGDescriptor::configure(ICLTensor *input, ICLTensor *output, const IHOG *hog, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLHOGDescriptor
configure	src/runtime/CL/functions/CLHOGDetector.cpp	/^void CLHOGDetector::configure(const ICLTensor *input, const ICLHOG *hog, ICLDetectionWindowArray *detection_windows, const Size2D &detection_window_stride, float threshold, size_t idx_class)$/;"	f	class:CLHOGDetector
configure	src/runtime/CL/functions/CLHOGGradient.cpp	/^void CLHOGGradient::configure(ICLTensor *input, ICLTensor *output_magnitude, ICLTensor *output_phase, PhaseType phase_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLHOGGradient
configure	src/runtime/CL/functions/CLHOGMultiDetection.cpp	/^void CLHOGMultiDetection::configure(ICLTensor *input, const ICLMultiHOG *multi_hog, ICLDetectionWindowArray *detection_windows, ICLSize2DArray *detection_window_strides, BorderMode border_mode,$/;"	f	class:CLHOGMultiDetection
configure	src/runtime/CL/functions/CLHarrisCorners.cpp	/^void CLHarrisCorners::configure(ICLImage *input, float threshold, float min_dist,$/;"	f	class:CLHarrisCorners
configure	src/runtime/CL/functions/CLHistogram.cpp	/^void CLHistogram::configure(const ICLImage *input, ICLDistribution1D *output)$/;"	f	class:CLHistogram
configure	src/runtime/CL/functions/CLIntegralImage.cpp	/^void CLIntegralImage::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLIntegralImage
configure	src/runtime/CL/functions/CLL2NormalizeLayer.cpp	/^void CLL2NormalizeLayer::configure(ICLTensor *input, ICLTensor *output, unsigned int axis, float epsilon)$/;"	f	class:CLL2NormalizeLayer
configure	src/runtime/CL/functions/CLLSTMLayer.cpp	/^void CLLSTMLayer::configure(const ICLTensor *input, const ICLTensor *input_to_forget_weights, const ICLTensor *input_to_cell_weights, const ICLTensor *input_to_output_weights,$/;"	f	class:CLLSTMLayer
configure	src/runtime/CL/functions/CLLaplacianPyramid.cpp	/^void CLLaplacianPyramid::configure(ICLTensor *input, CLPyramid *pyramid, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLLaplacianPyramid
configure	src/runtime/CL/functions/CLLaplacianReconstruct.cpp	/^void CLLaplacianReconstruct::configure(const CLPyramid *pyramid, ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLLaplacianReconstruct
configure	src/runtime/CL/functions/CLLocallyConnectedLayer.cpp	/^void CLLocallyConnectedLayer::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info)$/;"	f	class:CLLocallyConnectedLayer
configure	src/runtime/CL/functions/CLMagnitude.cpp	/^void CLMagnitude::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, MagnitudeType mag_type, bool use_fp16)$/;"	f	class:CLMagnitude
configure	src/runtime/CL/functions/CLMeanStdDev.cpp	/^void CLMeanStdDev::configure(ICLImage *input, float *mean, float *stddev)$/;"	f	class:CLMeanStdDev
configure	src/runtime/CL/functions/CLMedian3x3.cpp	/^void CLMedian3x3::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLMedian3x3
configure	src/runtime/CL/functions/CLMinMaxLocation.cpp	/^void CLMinMaxLocation::configure(const ICLImage *input, void *min, void *max, CLCoordinates2DArray *min_loc, CLCoordinates2DArray *max_loc, uint32_t *min_count, uint32_t *max_count)$/;"	f	class:arm_compute::CLMinMaxLocation
configure	src/runtime/CL/functions/CLNonLinearFilter.cpp	/^void CLNonLinearFilter::configure(ICLTensor *input, ICLTensor *output, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, const uint8_t *mask,$/;"	f	class:CLNonLinearFilter
configure	src/runtime/CL/functions/CLNonMaximaSuppression3x3.cpp	/^void CLNonMaximaSuppression3x3::configure(ICLTensor *input, ICLTensor *output, BorderMode border_mode)$/;"	f	class:CLNonMaximaSuppression3x3
configure	src/runtime/CL/functions/CLNormalizationLayer.cpp	/^void CLNormalizationLayer::configure(ICLTensor *input, ICLTensor *output, const NormalizationLayerInfo &norm_info)$/;"	f	class:CLNormalizationLayer
configure	src/runtime/CL/functions/CLOpticalFlow.cpp	/^void CLOpticalFlow::configure(const CLPyramid *old_pyramid, const CLPyramid *new_pyramid,$/;"	f	class:CLOpticalFlow
configure	src/runtime/CL/functions/CLPermute.cpp	/^void CLPermute::configure(const ICLTensor *input, ICLTensor *output, const PermutationVector &perm)$/;"	f	class:CLPermute
configure	src/runtime/CL/functions/CLPhase.cpp	/^void CLPhase::configure(const ICLTensor *input1, const ICLTensor *input2, ICLTensor *output, PhaseType phase_type)$/;"	f	class:CLPhase
configure	src/runtime/CL/functions/CLPixelWiseMultiplication.cpp	/^void CLPixelWiseMultiplication::configure(ICLTensor *input1, ICLTensor *input2, ICLTensor *output, float scale,$/;"	f	class:CLPixelWiseMultiplication
configure	src/runtime/CL/functions/CLPoolingLayer.cpp	/^void CLPoolingLayer::configure(ICLTensor *input, ICLTensor *output, const PoolingLayerInfo &pool_info)$/;"	f	class:CLPoolingLayer
configure	src/runtime/CL/functions/CLQuantizationLayer.cpp	/^void CLQuantizationLayer::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLQuantizationLayer
configure	src/runtime/CL/functions/CLRNNLayer.cpp	/^void CLRNNLayer::configure(const ICLTensor *input, const ICLTensor *weights, const ICLTensor *recurrent_weights, const ICLTensor *bias, ICLTensor *hidden_state, ICLTensor *output,$/;"	f	class:CLRNNLayer
configure	src/runtime/CL/functions/CLROIPoolingLayer.cpp	/^void CLROIPoolingLayer::configure(const ICLTensor *input, const ICLROIArray *rois, ICLTensor *output, const ROIPoolingLayerInfo &pool_info)$/;"	f	class:CLROIPoolingLayer
configure	src/runtime/CL/functions/CLReductionOperation.cpp	/^void CLReductionOperation::configure(ICLTensor *input, ICLTensor *output, unsigned int axis, ReductionOperation op)$/;"	f	class:CLReductionOperation
configure	src/runtime/CL/functions/CLRemap.cpp	/^void CLRemap::configure(ICLTensor *input, const ICLTensor *map_x, const ICLTensor *map_y, ICLTensor *output, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLRemap
configure	src/runtime/CL/functions/CLReshapeLayer.cpp	/^void CLReshapeLayer::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLReshapeLayer
configure	src/runtime/CL/functions/CLScale.cpp	/^void CLScale::configure(ICLTensor *input, ICLTensor *output, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, SamplingPolicy sampling_policy)$/;"	f	class:CLScale
configure	src/runtime/CL/functions/CLScharr3x3.cpp	/^void CLScharr3x3::configure(ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLScharr3x3
configure	src/runtime/CL/functions/CLSobel3x3.cpp	/^void CLSobel3x3::configure(ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLSobel3x3
configure	src/runtime/CL/functions/CLSobel5x5.cpp	/^void CLSobel5x5::configure(ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLSobel5x5
configure	src/runtime/CL/functions/CLSobel7x7.cpp	/^void CLSobel7x7::configure(ICLTensor *input, ICLTensor *output_x, ICLTensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLSobel7x7
configure	src/runtime/CL/functions/CLSoftmaxLayer.cpp	/^void CLSoftmaxLayer::configure(const ICLTensor *input, ICLTensor *output, float beta)$/;"	f	class:CLSoftmaxLayer
configure	src/runtime/CL/functions/CLTableLookup.cpp	/^void CLTableLookup::configure(const ICLTensor *input, const ICLLut *lut, ICLTensor *output)$/;"	f	class:CLTableLookup
configure	src/runtime/CL/functions/CLThreshold.cpp	/^void CLThreshold::configure(const ICLTensor *input, ICLTensor *output, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)$/;"	f	class:CLThreshold
configure	src/runtime/CL/functions/CLTranspose.cpp	/^void CLTranspose::configure(const ICLTensor *input, ICLTensor *output)$/;"	f	class:CLTranspose
configure	src/runtime/CL/functions/CLWarpAffine.cpp	/^void CLWarpAffine::configure(ICLTensor *input, ICLTensor *output, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLWarpAffine
configure	src/runtime/CL/functions/CLWarpPerspective.cpp	/^void CLWarpPerspective::configure(ICLTensor *input, ICLTensor *output, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:CLWarpPerspective
configure	src/runtime/CL/functions/CLWidthConcatenateLayer.cpp	/^void CLWidthConcatenateLayer::configure(std::vector<ICLTensor *> inputs_vector, ICLTensor *output) \/\/ NOLINT$/;"	f	class:CLWidthConcatenateLayer
configure	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^void CLWinogradConvolutionLayer::configure(ICLTensor *input, const ICLTensor *weights, const ICLTensor *biases, ICLTensor *output, const PadStrideInfo &conv_info, const ActivationLayerInfo &act_info,$/;"	f	class:CLWinogradConvolutionLayer
configure	src/runtime/CL/functions/CLWinogradInputTransform.cpp	/^void CLWinogradInputTransform::configure(ICLTensor *input, ICLTensor *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradInputTransform
configure	src/runtime/CPP/functions/CPPPermute.cpp	/^void CPPPermute::configure(const ITensor *input, ITensor *output, const PermutationVector &perm)$/;"	f	class:CPPPermute
configure	src/runtime/CPP/functions/CPPUpsample.cpp	/^void CPPUpsample::configure(const ITensor *input, ITensor *output, const PadStrideInfo &info, unsigned int inner_border_right, unsigned int inner_border_top)$/;"	f	class:CPPUpsample
configure	src/runtime/GLES_COMPUTE/functions/GCAbsoluteDifference.cpp	/^void GCAbsoluteDifference::configure(const IGCTensor *input1, const IGCTensor *input2, IGCTensor *output)$/;"	f	class:GCAbsoluteDifference
configure	src/runtime/GLES_COMPUTE/functions/GCActivationLayer.cpp	/^void GCActivationLayer::configure(IGCTensor *input, IGCTensor *output, ActivationLayerInfo act_info)$/;"	f	class:GCActivationLayer
configure	src/runtime/GLES_COMPUTE/functions/GCArithmeticAddition.cpp	/^void GCArithmeticAddition::configure(const IGCTensor *input1, const IGCTensor *input2, IGCTensor *output, ConvertPolicy policy)$/;"	f	class:GCArithmeticAddition
configure	src/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.cpp	/^void GCBatchNormalizationLayer::configure(const IGCTensor *input, IGCTensor *output, const IGCTensor *mean, const IGCTensor *var, const IGCTensor *beta, const IGCTensor *gamma, float epsilon,$/;"	f	class:GCBatchNormalizationLayer
configure	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^void GCConvolutionLayer::configure(const IGCTensor *input, const IGCTensor *weights, const IGCTensor *biases, IGCTensor *output, const PadStrideInfo &conv_info, const WeightsInfo &weights_info,$/;"	f	class:GCConvolutionLayer
configure	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^void GCConvolutionLayerReshapeWeights::configure(const IGCTensor *weights, const IGCTensor *biases, IGCTensor *output)$/;"	f	class:GCConvolutionLayerReshapeWeights
configure	src/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.cpp	/^void GCDepthConcatenateLayer::configure(std::vector<IGCTensor *> inputs_vector, IGCTensor *output) \/\/NOLINT$/;"	f	class:GCDepthConcatenateLayer
configure	src/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.cpp	/^void GCDepthwiseConvolutionLayer3x3::configure(IGCTensor *input, const IGCTensor *weights, const IGCTensor *biases, IGCTensor *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier)$/;"	f	class:GCDepthwiseConvolutionLayer3x3
configure	src/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.cpp	/^void GCDirectConvolutionLayer::configure(IGCTensor *input, const IGCTensor *weights, const IGCTensor *biases, IGCTensor *output, const PadStrideInfo &conv_info,$/;"	f	class:GCDirectConvolutionLayer
configure	src/runtime/GLES_COMPUTE/functions/GCDropoutLayer.cpp	/^void GCDropoutLayer::configure(const IGCTensor *input, IGCTensor *mask, IGCTensor *output, float ratio, bool forward)$/;"	f	class:GCDropoutLayer
configure	src/runtime/GLES_COMPUTE/functions/GCFillBorder.cpp	/^void GCFillBorder::configure(IGCTensor *tensor, unsigned int border_width, BorderMode border_mode, const PixelValue &constant_border_value)$/;"	f	class:GCFillBorder
configure	src/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.cpp	/^void GCFullyConnectedLayer::configure(const IGCTensor *input, const IGCTensor *weights, const IGCTensor *biases, IGCTensor *output,$/;"	f	class:GCFullyConnectedLayer
configure	src/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.cpp	/^void GCFullyConnectedLayerReshapeWeights::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCFullyConnectedLayerReshapeWeights
configure	src/runtime/GLES_COMPUTE/functions/GCGEMM.cpp	/^void GCGEMM::configure(const IGCTensor *a, const IGCTensor *b, const IGCTensor *c, IGCTensor *output, float alpha, float beta, const GEMMInfo &gemm_info)$/;"	f	class:GCGEMM
configure	src/runtime/GLES_COMPUTE/functions/GCGEMMInterleave4x4.cpp	/^void GCGEMMInterleave4x4::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCGEMMInterleave4x4
configure	src/runtime/GLES_COMPUTE/functions/GCGEMMTranspose1xW.cpp	/^void GCGEMMTranspose1xW::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCGEMMTranspose1xW
configure	src/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.cpp	/^void GCNormalizationLayer::configure(const IGCTensor *input, IGCTensor *output, const NormalizationLayerInfo &norm_info)$/;"	f	class:GCNormalizationLayer
configure	src/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.cpp	/^void GCNormalizePlanarYUVLayer::configure(const IGCTensor *input, IGCTensor *output, const IGCTensor *mean, const IGCTensor *sd)$/;"	f	class:GCNormalizePlanarYUVLayer
configure	src/runtime/GLES_COMPUTE/functions/GCPixelWiseMultiplication.cpp	/^void GCPixelWiseMultiplication::configure(const IGCTensor *input1, const IGCTensor *input2, IGCTensor *output, float scale)$/;"	f	class:GCPixelWiseMultiplication
configure	src/runtime/GLES_COMPUTE/functions/GCPoolingLayer.cpp	/^void GCPoolingLayer::configure(IGCTensor *input, IGCTensor *output, const PoolingLayerInfo &pool_info)$/;"	f	class:GCPoolingLayer
configure	src/runtime/GLES_COMPUTE/functions/GCScale.cpp	/^void GCScale::configure(IGCTensor *input, IGCTensor *output, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, SamplingPolicy sampling_policy)$/;"	f	class:GCScale
configure	src/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.cpp	/^void GCSoftmaxLayer::configure(const IGCTensor *input, IGCTensor *output, float beta)$/;"	f	class:GCSoftmaxLayer
configure	src/runtime/GLES_COMPUTE/functions/GCTensorShift.cpp	/^void GCTensorShift::configure(IGCTensor *input)$/;"	f	class:GCTensorShift
configure	src/runtime/GLES_COMPUTE/functions/GCTranspose.cpp	/^void GCTranspose::configure(const IGCTensor *input, IGCTensor *output)$/;"	f	class:GCTranspose
configure	src/runtime/NEON/functions/NEAbsoluteDifference.cpp	/^void NEAbsoluteDifference::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEAbsoluteDifference
configure	src/runtime/NEON/functions/NEAccumulate.cpp	/^void NEAccumulate::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEAccumulate
configure	src/runtime/NEON/functions/NEAccumulate.cpp	/^void NEAccumulateSquared::configure(const ITensor *input, uint32_t shift, ITensor *output)$/;"	f	class:NEAccumulateSquared
configure	src/runtime/NEON/functions/NEAccumulate.cpp	/^void NEAccumulateWeighted::configure(const ITensor *input, float alpha, ITensor *output, bool use_fp16)$/;"	f	class:NEAccumulateWeighted
configure	src/runtime/NEON/functions/NEActivationLayer.cpp	/^void NEActivationLayer::configure(ITensor *input, ITensor *output, ActivationLayerInfo activation_info)$/;"	f	class:NEActivationLayer
configure	src/runtime/NEON/functions/NEArithmeticAddition.cpp	/^void NEArithmeticAddition::configure(ITensor *input1, ITensor *input2, ITensor *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticAddition
configure	src/runtime/NEON/functions/NEArithmeticSubtraction.cpp	/^void NEArithmeticSubtraction::configure(const ITensor *input1, const ITensor *input2, ITensor *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticSubtraction
configure	src/runtime/NEON/functions/NEBatchNormalizationLayer.cpp	/^void NEBatchNormalizationLayer::configure(ITensor *input, ITensor *output, const ITensor *mean, const ITensor *var, const ITensor *beta, const ITensor *gamma, float epsilon,$/;"	f	class:NEBatchNormalizationLayer
configure	src/runtime/NEON/functions/NEBitwiseAnd.cpp	/^void NEBitwiseAnd::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEBitwiseAnd
configure	src/runtime/NEON/functions/NEBitwiseNot.cpp	/^void NEBitwiseNot::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEBitwiseNot
configure	src/runtime/NEON/functions/NEBitwiseOr.cpp	/^void NEBitwiseOr::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEBitwiseOr
configure	src/runtime/NEON/functions/NEBitwiseXor.cpp	/^void NEBitwiseXor::configure(const ITensor *input1, const ITensor *input2, ITensor *output)$/;"	f	class:NEBitwiseXor
configure	src/runtime/NEON/functions/NEBox3x3.cpp	/^void NEBox3x3::configure(ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value, bool use_fp16)$/;"	f	class:NEBox3x3
configure	src/runtime/NEON/functions/NECannyEdge.cpp	/^void NECannyEdge::configure(ITensor *input, ITensor *output, int32_t upper_thr, int32_t lower_thr, int32_t gradient_size, int32_t norm_type, BorderMode border_mode, uint8_t constant_border_value,$/;"	f	class:NECannyEdge
configure	src/runtime/NEON/functions/NEChannelCombine.cpp	/^void NEChannelCombine::configure(const IImage *plane0, const IImage *plane1, const IImage *plane2, IMultiImage *output)$/;"	f	class:NEChannelCombine
configure	src/runtime/NEON/functions/NEChannelCombine.cpp	/^void NEChannelCombine::configure(const ITensor *plane0, const ITensor *plane1, const ITensor *plane2, const ITensor *plane3, ITensor *output)$/;"	f	class:NEChannelCombine
configure	src/runtime/NEON/functions/NEChannelExtract.cpp	/^void NEChannelExtract::configure(const IMultiImage *input, Channel channel, IImage *output)$/;"	f	class:NEChannelExtract
configure	src/runtime/NEON/functions/NEChannelExtract.cpp	/^void NEChannelExtract::configure(const ITensor *input, Channel channel, ITensor *output)$/;"	f	class:NEChannelExtract
configure	src/runtime/NEON/functions/NECol2Im.cpp	/^void NECol2Im::configure(const ITensor *input, ITensor *output, const Size2D &convolved_dims)$/;"	f	class:NECol2Im
configure	src/runtime/NEON/functions/NEColorConvert.cpp	/^void NEColorConvert::configure(const IImage *input, IMultiImage *output)$/;"	f	class:NEColorConvert
configure	src/runtime/NEON/functions/NEColorConvert.cpp	/^void NEColorConvert::configure(const IMultiImage *input, IImage *output)$/;"	f	class:NEColorConvert
configure	src/runtime/NEON/functions/NEColorConvert.cpp	/^void NEColorConvert::configure(const IMultiImage *input, IMultiImage *output)$/;"	f	class:NEColorConvert
configure	src/runtime/NEON/functions/NEColorConvert.cpp	/^void NEColorConvert::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEColorConvert
configure	src/runtime/NEON/functions/NEConvertFullyConnectedWeights.cpp	/^void NEConvertFullyConnectedWeights::configure(const ITensor *input, ITensor *output, const TensorShape &original_input_shape,$/;"	f	class:NEConvertFullyConnectedWeights
configure	src/runtime/NEON/functions/NEConvolution.cpp	/^void NEConvolution3x3::configure(ITensor *input, ITensor *output, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEConvolution3x3
configure	src/runtime/NEON/functions/NEConvolution.cpp	/^void NEConvolutionRectangle::configure(ITensor *input, ITensor *output, const int16_t *conv, uint32_t rows, uint32_t cols, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEConvolutionRectangle
configure	src/runtime/NEON/functions/NEConvolution.cpp	/^void NEConvolutionSquare<matrix_size>::configure(ITensor *input, ITensor *output, const int16_t *conv, uint32_t scale, BorderMode border_mode,$/;"	f	class:NEConvolutionSquare
configure	src/runtime/NEON/functions/NEConvolutionLayer.cpp	/^void NEConvolutionLayer::configure(ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, const PadStrideInfo &conv_info, const WeightsInfo &weights_info,$/;"	f	class:arm_compute::NEConvolutionLayer
configure	src/runtime/NEON/functions/NEDeconvolutionLayer.cpp	/^void NEDeconvolutionLayer::configure(ITensor *input, const ITensor *weights, const ITensor *bias, ITensor *output, const PadStrideInfo &info,$/;"	f	class:NEDeconvolutionLayer
configure	src/runtime/NEON/functions/NEDepthConcatenateLayer.cpp	/^void NEDepthConcatenateLayer::configure(std::vector<ITensor *> inputs_vector, ITensor *output) \/\/ NOLINT$/;"	f	class:NEDepthConcatenateLayer
configure	src/runtime/NEON/functions/NEDepthConvertLayer.cpp	/^void NEDepthConvertLayer::configure(ITensor *input, ITensor *output, ConvertPolicy policy, uint32_t shift)$/;"	f	class:NEDepthConvertLayer
configure	src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp	/^void NEDepthwiseConvolutionLayer3x3::configure(ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier)$/;"	f	class:NEDepthwiseConvolutionLayer3x3
configure	src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp	/^void NEDepthwiseConvolutionLayer::configure(ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier)$/;"	f	class:NEDepthwiseConvolutionLayer
configure	src/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.cpp	/^void NEDepthwiseSeparableConvolutionLayer::configure(ITensor *input, const ITensor *depthwise_weights, const ITensor *depthwise_biases, ITensor *depthwise_out,$/;"	f	class:NEDepthwiseSeparableConvolutionLayer
configure	src/runtime/NEON/functions/NEDequantizationLayer.cpp	/^void NEDequantizationLayer::configure(const ITensor *input, ITensor *output, const ITensor *min_max)$/;"	f	class:NEDequantizationLayer
configure	src/runtime/NEON/functions/NEDerivative.cpp	/^void NEDerivative::configure(ITensor *input, ITensor *output_x, ITensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEDerivative
configure	src/runtime/NEON/functions/NEDilate.cpp	/^void NEDilate::configure(ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEDilate
configure	src/runtime/NEON/functions/NEDirectConvolutionLayer.cpp	/^void NEDirectConvolutionLayer::configure(ITensor *input, const ITensor *weights, const ITensor *bias, ITensor *output, const PadStrideInfo &conv_info, const ActivationLayerInfo &act_info)$/;"	f	class:NEDirectConvolutionLayer
configure	src/runtime/NEON/functions/NEEqualizeHistogram.cpp	/^void NEEqualizeHistogram::configure(const IImage *input, IImage *output)$/;"	f	class:NEEqualizeHistogram
configure	src/runtime/NEON/functions/NEErode.cpp	/^void NEErode::configure(ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEErode
configure	src/runtime/NEON/functions/NEFastCorners.cpp	/^void NEFastCorners::configure(IImage *input, float threshold, bool nonmax_suppression, KeyPointArray *corners,$/;"	f	class:NEFastCorners
configure	src/runtime/NEON/functions/NEFillBorder.cpp	/^void NEFillBorder::configure(ITensor *input, unsigned int border_width, BorderMode border_mode, const PixelValue &constant_border_value)$/;"	f	class:NEFillBorder
configure	src/runtime/NEON/functions/NEFlattenLayer.cpp	/^void NEFlattenLayer::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEFlattenLayer
configure	src/runtime/NEON/functions/NEFloor.cpp	/^void NEFloor::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEFloor
configure	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^void NEFullyConnectedLayer::configure(const ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, bool transpose_weights, bool are_weights_reshaped)$/;"	f	class:NEFullyConnectedLayer
configure	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^void NEFullyConnectedLayerReshapeWeights::configure(const ITensor *input, ITensor *output, bool transpose_weights, bool is_batched_fc_layer)$/;"	f	class:NEFullyConnectedLayerReshapeWeights
configure	src/runtime/NEON/functions/NEGEMM.cpp	/^void NEGEMM::configure(const ITensor *a, const ITensor *b, const ITensor *c, ITensor *d, float alpha, float beta, const GEMMInfo &gemm_info)$/;"	f	class:arm_compute::NEGEMM
configure	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^void NEConvolutionLayerReshapeWeights::configure(const ITensor *weights, const ITensor *biases, ITensor *output, bool transpose1xW)$/;"	f	class:arm_compute::NEConvolutionLayerReshapeWeights
configure	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^void NEGEMMConvolutionLayer::configure(const ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, const PadStrideInfo &conv_info, const WeightsInfo &weights_info,$/;"	f	class:arm_compute::NEGEMMConvolutionLayer
configure	src/runtime/NEON/functions/NEGEMMInterleave4x4.cpp	/^void NEGEMMInterleave4x4::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEGEMMInterleave4x4
configure	src/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.cpp	/^void NEGEMMLowpAssemblyMatrixMultiplyCore::configure(const ITensor *a, const ITensor *b, ITensor *output)$/;"	f	class:NEGEMMLowpAssemblyMatrixMultiplyCore
configure	src/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.cpp	/^void NEGEMMLowpMatrixMultiplyCore::configure(const ITensor *a, const ITensor *b, ITensor *output, const GEMMInfo &gemm_info)$/;"	f	class:NEGEMMLowpMatrixMultiplyCore
configure	src/runtime/NEON/functions/NEGEMMLowpOutputStage.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8Scale::configure(const ITensor *input, const ITensor *bias, ITensor *output, int result_offset, int result_mult_int, int result_shift, int min, int max)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8Scale
configure	src/runtime/NEON/functions/NEGEMMLowpOutputStage.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint::configure(const ITensor *input, const ITensor *bias, ITensor *output, int result_fixedpoint_multiplier, int result_shift,$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint
configure	src/runtime/NEON/functions/NEGEMMTranspose1xW.cpp	/^void NEGEMMTranspose1xW::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEGEMMTranspose1xW
configure	src/runtime/NEON/functions/NEGaussian3x3.cpp	/^void NEGaussian3x3::configure(ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEGaussian3x3
configure	src/runtime/NEON/functions/NEGaussian5x5.cpp	/^void NEGaussian5x5::configure(ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEGaussian5x5
configure	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^void NEGaussianPyramidHalf::configure(const ITensor *input, IPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEGaussianPyramidHalf
configure	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^void NEGaussianPyramidOrb::configure(const ITensor *input, IPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEGaussianPyramidOrb
configure	src/runtime/NEON/functions/NEHOGDescriptor.cpp	/^void NEHOGDescriptor::configure(ITensor *input, ITensor *output, const IHOG *hog, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEHOGDescriptor
configure	src/runtime/NEON/functions/NEHOGDetector.cpp	/^void NEHOGDetector::configure(const ITensor *input, const IHOG *hog, IDetectionWindowArray *detection_windows, const Size2D &detection_window_stride, float threshold, size_t idx_class)$/;"	f	class:NEHOGDetector
configure	src/runtime/NEON/functions/NEHOGGradient.cpp	/^void NEHOGGradient::configure(ITensor *input, ITensor *output_magnitude, ITensor *output_phase, PhaseType phase_type, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEHOGGradient
configure	src/runtime/NEON/functions/NEHOGMultiDetection.cpp	/^void NEHOGMultiDetection::configure(ITensor *input, const IMultiHOG *multi_hog, IDetectionWindowArray *detection_windows, const ISize2DArray *detection_window_strides, BorderMode border_mode,$/;"	f	class:NEHOGMultiDetection
configure	src/runtime/NEON/functions/NEHarrisCorners.cpp	/^void NEHarrisCorners::configure(IImage *input, float threshold, float min_dist,$/;"	f	class:NEHarrisCorners
configure	src/runtime/NEON/functions/NEHistogram.cpp	/^void NEHistogram::configure(const IImage *input, IDistribution1D *output)$/;"	f	class:NEHistogram
configure	src/runtime/NEON/functions/NEIm2Col.cpp	/^void NEIm2Col::configure(const ITensor *input, ITensor *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, bool is_fully_connected, bool is_flatten)$/;"	f	class:NEIm2Col
configure	src/runtime/NEON/functions/NEIntegralImage.cpp	/^void NEIntegralImage::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEIntegralImage
configure	src/runtime/NEON/functions/NEL2NormalizeLayer.cpp	/^void NEL2NormalizeLayer::configure(ITensor *input, ITensor *output, unsigned int axis, float epsilon)$/;"	f	class:NEL2NormalizeLayer
configure	src/runtime/NEON/functions/NELaplacianPyramid.cpp	/^void NELaplacianPyramid::configure(const ITensor *input, IPyramid *pyramid, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NELaplacianPyramid
configure	src/runtime/NEON/functions/NELaplacianReconstruct.cpp	/^void NELaplacianReconstruct::configure(const IPyramid *pyramid, ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NELaplacianReconstruct
configure	src/runtime/NEON/functions/NELocallyConnectedLayer.cpp	/^void NELocallyConnectedLayer::configure(const ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, const PadStrideInfo &conv_info)$/;"	f	class:NELocallyConnectedLayer
configure	src/runtime/NEON/functions/NEMagnitude.cpp	/^void NEMagnitude::configure(const ITensor *input1, const ITensor *input2, ITensor *output, MagnitudeType mag_type, bool use_fp16)$/;"	f	class:NEMagnitude
configure	src/runtime/NEON/functions/NEMeanStdDev.cpp	/^void NEMeanStdDev::configure(IImage *input, float *mean, float *stddev)$/;"	f	class:NEMeanStdDev
configure	src/runtime/NEON/functions/NEMedian3x3.cpp	/^void NEMedian3x3::configure(ITensor *input, ITensor *output, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEMedian3x3
configure	src/runtime/NEON/functions/NEMinMaxLocation.cpp	/^void NEMinMaxLocation::configure(const IImage *input, void *min, void *max, ICoordinates2DArray *min_loc, ICoordinates2DArray *max_loc, uint32_t *min_count, uint32_t *max_count)$/;"	f	class:NEMinMaxLocation
configure	src/runtime/NEON/functions/NENonLinearFilter.cpp	/^void NENonLinearFilter::configure(ITensor *input, ITensor *output, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, const uint8_t *mask,$/;"	f	class:NENonLinearFilter
configure	src/runtime/NEON/functions/NENonMaximaSuppression3x3.cpp	/^void NENonMaximaSuppression3x3::configure(ITensor *input, ITensor *output, BorderMode border_mode)$/;"	f	class:NENonMaximaSuppression3x3
configure	src/runtime/NEON/functions/NENormalizationLayer.cpp	/^void NENormalizationLayer::configure(const ITensor *input, ITensor *output, const NormalizationLayerInfo &norm_info)$/;"	f	class:NENormalizationLayer
configure	src/runtime/NEON/functions/NEOpticalFlow.cpp	/^void NEOpticalFlow::configure(const Pyramid *old_pyramid, const Pyramid *new_pyramid, const IKeyPointArray *old_points, const IKeyPointArray *new_points_estimates,$/;"	f	class:NEOpticalFlow
configure	src/runtime/NEON/functions/NEPermute.cpp	/^void NEPermute::configure(const ITensor *input, ITensor *output, const PermutationVector &perm)$/;"	f	class:NEPermute
configure	src/runtime/NEON/functions/NEPhase.cpp	/^void NEPhase::configure(const ITensor *input1, const ITensor *input2, ITensor *output, PhaseType phase_type)$/;"	f	class:NEPhase
configure	src/runtime/NEON/functions/NEPixelWiseMultiplication.cpp	/^void NEPixelWiseMultiplication::configure(ITensor *input1, ITensor *input2, ITensor *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy)$/;"	f	class:NEPixelWiseMultiplication
configure	src/runtime/NEON/functions/NEPoolingLayer.cpp	/^void NEPoolingLayer::configure(ITensor *input, ITensor *output, const PoolingLayerInfo &pool_info)$/;"	f	class:NEPoolingLayer
configure	src/runtime/NEON/functions/NEQuantizationLayer.cpp	/^void NEQuantizationLayer::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEQuantizationLayer
configure	src/runtime/NEON/functions/NEROIPoolingLayer.cpp	/^void NEROIPoolingLayer::configure(const ITensor *input, const IROIArray *rois, ITensor *output, const ROIPoolingLayerInfo &pool_info)$/;"	f	class:NEROIPoolingLayer
configure	src/runtime/NEON/functions/NEReductionOperation.cpp	/^void NEReductionOperation::configure(ITensor *input, ITensor *output, unsigned int axis, ReductionOperation op)$/;"	f	class:NEReductionOperation
configure	src/runtime/NEON/functions/NERemap.cpp	/^void NERemap::configure(ITensor *input, const ITensor *map_x, const ITensor *map_y, ITensor *output, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NERemap
configure	src/runtime/NEON/functions/NEReshapeLayer.cpp	/^void NEReshapeLayer::configure(const ITensor *input, ITensor *output)$/;"	f	class:NEReshapeLayer
configure	src/runtime/NEON/functions/NEScale.cpp	/^void NEScale::configure(ITensor *input, ITensor *output, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, SamplingPolicy sampling_policy)$/;"	f	class:NEScale
configure	src/runtime/NEON/functions/NEScharr3x3.cpp	/^void NEScharr3x3::configure(ITensor *input, ITensor *output_x, ITensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEScharr3x3
configure	src/runtime/NEON/functions/NESobel3x3.cpp	/^void NESobel3x3::configure(ITensor *input, ITensor *output_x, ITensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NESobel3x3
configure	src/runtime/NEON/functions/NESobel5x5.cpp	/^void NESobel5x5::configure(ITensor *input, ITensor *output_x, ITensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NESobel5x5
configure	src/runtime/NEON/functions/NESobel7x7.cpp	/^void NESobel7x7::configure(ITensor *input, ITensor *output_x, ITensor *output_y, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NESobel7x7
configure	src/runtime/NEON/functions/NESoftmaxLayer.cpp	/^void NESoftmaxLayer::configure(ITensor *input, ITensor *output, float beta)$/;"	f	class:NESoftmaxLayer
configure	src/runtime/NEON/functions/NETableLookup.cpp	/^void NETableLookup::configure(const ITensor *input, const ILut *lut, ITensor *output)$/;"	f	class:NETableLookup
configure	src/runtime/NEON/functions/NEThreshold.cpp	/^void NEThreshold::configure(const ITensor *input, ITensor *output, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper)$/;"	f	class:NEThreshold
configure	src/runtime/NEON/functions/NETranspose.cpp	/^void NETranspose::configure(const ITensor *input, ITensor *output)$/;"	f	class:NETranspose
configure	src/runtime/NEON/functions/NEWarpAffine.cpp	/^void NEWarpAffine::configure(ITensor *input, ITensor *output, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEWarpAffine
configure	src/runtime/NEON/functions/NEWarpPerspective.cpp	/^void NEWarpPerspective::configure(ITensor *input, ITensor *output, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:NEWarpPerspective
configure	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^void NEWinogradConvolutionLayer::configure(const ITensor *input, const ITensor *weights, const ITensor *biases, ITensor *output, const PadStrideInfo &conv_info, const ActivationLayerInfo &act_info,$/;"	f	class:arm_compute::NEWinogradConvolutionLayer
configure	tests/CL/Helper.h	/^    void configure(Args &&... args)$/;"	f	class:arm_compute::test::CLSynthetizeFunction
configure	tests/CL/Helper.h	/^    void configure(T first, Args &&... args)$/;"	f	class:arm_compute::test::CLSynthetizeFunctionWithZeroConstantBorder
configure	tests/NEON/Helper.h	/^    void configure(Args &&... args)$/;"	f	class:arm_compute::test::NESynthetizeFunction
configure	tests/NEON/Helper.h	/^    void configure(T first, Args &&... args)$/;"	f	class:arm_compute::test::NESynthetizeFunctionWithZeroConstantBorder
configure	tests/networks/AlexNetNetwork.h	/^        configure(ITensorType *input, const ITensorType *weights, const ITensorType *biases, ITensorType *output, const PadStrideInfo &conv_info, const WeightsInfo &weights_info = WeightsInfo())$/;"	f	struct:arm_compute::test::networks::AlexNetNetwork::DirectConv
configure_all_nodes	src/graph/detail/ExecutionHelpers.cpp	/^ExecutionWorkload configure_all_nodes(Graph &g, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::detail
configure_all_tensors	src/graph/detail/ExecutionHelpers.cpp	/^void configure_all_tensors(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
configure_conv_fc	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayer::configure_conv_fc(const ICLTensor *input, const ICLTensor *weights, ICLTensor *output)$/;"	f	class:CLFullyConnectedLayer
configure_conv_fc	src/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.cpp	/^void GCFullyConnectedLayer::configure_conv_fc(const IGCTensor *input, const IGCTensor *weights, IGCTensor *output)$/;"	f	class:GCFullyConnectedLayer
configure_fc_fc	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayer::configure_fc_fc(const ICLTensor *input, const ICLTensor *weights, ICLTensor *output)$/;"	f	class:CLFullyConnectedLayer
configure_fc_fc	src/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.cpp	/^void GCFullyConnectedLayer::configure_fc_fc(const IGCTensor *input, const IGCTensor *weights, IGCTensor *output)$/;"	f	class:GCFullyConnectedLayer
configure_fused	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::configure_fused()$/;"	f	class:NEBatchNormalizationLayerKernel
configure_generic	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::configure_generic()$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
configure_handle_lifetime	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^void configure_handle_lifetime(std::vector<TaskHandles> &tasks_handles, const HandleCounter &hc)$/;"	f	namespace:arm_compute::graph::detail::__anon309
configure_mm	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayer::configure_mm(const ICLTensor *input, const ICLTensor *weights, ICLTensor *output)$/;"	f	class:CLFullyConnectedLayer
configure_mm	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^void CLGEMMConvolutionLayer::configure_mm(const ICLTensor *input, const ICLTensor *weights, ICLTensor *output)$/;"	f	class:CLGEMMConvolutionLayer
configure_mm	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^void GCConvolutionLayer::configure_mm(const IGCTensor *input, const IGCTensor *weights, IGCTensor *output)$/;"	f	class:GCConvolutionLayer
configure_mm	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^void NEGEMMConvolutionLayer::configure_mm(const ITensor *input, const ITensor *weights, ITensor *output, bool is_interleaved, const GEMMReshapeInfo &reshape_info)$/;"	f	class:arm_compute::NEGEMMConvolutionLayer
configure_node	src/graph/backends/CL/CLDeviceBackend.cpp	/^std::unique_ptr<arm_compute::IFunction> CLDeviceBackend::configure_node(INode &node, GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
configure_node	src/graph/backends/GLES/GCDeviceBackend.cpp	/^std::unique_ptr<arm_compute::IFunction> GCDeviceBackend::configure_node(INode &node, GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
configure_node	src/graph/backends/NEON/NEDeviceBackend.cpp	/^std::unique_ptr<arm_compute::IFunction> NEDeviceBackend::configure_node(INode &node, GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
configure_non_fused	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::configure_non_fused()$/;"	f	class:NEBatchNormalizationLayerKernel
configure_optimized	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::configure_optimized()$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
configure_output	src/graph/nodes/ActivationLayerNode.cpp	/^TensorDescriptor ActivationLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::ActivationLayerNode
configure_output	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^TensorDescriptor BatchNormalizationLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
configure_output	src/graph/nodes/ConstNode.cpp	/^TensorDescriptor ConstNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::ConstNode
configure_output	src/graph/nodes/ConvolutionLayerNode.cpp	/^TensorDescriptor ConvolutionLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
configure_output	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^TensorDescriptor DepthConcatenateLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
configure_output	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^TensorDescriptor DepthwiseConvolutionLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
configure_output	src/graph/nodes/EltwiseLayerNode.cpp	/^TensorDescriptor EltwiseLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::EltwiseLayerNode
configure_output	src/graph/nodes/FlattenLayerNode.cpp	/^TensorDescriptor FlattenLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::FlattenLayerNode
configure_output	src/graph/nodes/FullyConnectedLayer.cpp	/^TensorDescriptor FullyConnectedLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
configure_output	src/graph/nodes/InputNode.cpp	/^TensorDescriptor InputNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::InputNode
configure_output	src/graph/nodes/NormalizationLayerNode.cpp	/^TensorDescriptor NormalizationLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::NormalizationLayerNode
configure_output	src/graph/nodes/OutputNode.cpp	/^TensorDescriptor OutputNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::OutputNode
configure_output	src/graph/nodes/PoolingLayerNode.cpp	/^TensorDescriptor PoolingLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::PoolingLayerNode
configure_output	src/graph/nodes/ReshapeLayer.cpp	/^TensorDescriptor ReshapeLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::ReshapeLayerNode
configure_output	src/graph/nodes/SoftmaxLayerNode.cpp	/^TensorDescriptor SoftmaxLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::SoftmaxLayerNode
configure_output	src/graph/nodes/SplitLayerNode.cpp	/^TensorDescriptor SplitLayerNode::configure_output(size_t idx) const$/;"	f	class:arm_compute::graph::SplitLayerNode
configure_target	tests/validation/fixtures/FastCornersFixture.h	/^    void configure_target(F &func, TensorType &src, ArrayType &corners, unsigned int *num_corners, float threshold, bool suppress_nonmax, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	class:arm_compute::test::validation::FastCornersValidationFixture
configure_target	tests/validation/fixtures/HarrisCornersFixture.h	/^    void configure_target(F &func, TensorType &src, ArrayType &corners, int gradient_size, int block_size, BorderMode border_mode, bool use_fp16, const HarrisCornersParameters &params)$/;"	f	class:arm_compute::test::validation::HarrisCornersValidationFixture
configure_transition_manager	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^void configure_transition_manager(Graph &g, GraphContext &ctx, ExecutionWorkload &workload)$/;"	f	namespace:arm_compute::graph::detail
connect	arm_compute/core/utils/misc/Signal.h	/^    void connect(const Callback &cb)$/;"	f	class:arm_compute::utils::signal::detail::SignalImpl
connected	arm_compute/core/utils/misc/Signal.h	/^    bool connected() const$/;"	f	class:arm_compute::utils::signal::detail::SignalImpl
const_pointer	include/CL/cl2.hpp	/^    typedef const value_type* const_pointer;$/;"	t	class:cl::SVMAllocator
const_reference	include/CL/cl2.hpp	/^    typedef const value_type& const_reference;$/;"	t	class:cl::SVMAllocator
constant_expr	tests/validation/FixedPoint.h	/^struct constant_expr$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::detail
construct	include/CL/cl2.hpp	/^    void construct(U* p, Args&&... args)$/;"	f	class:cl::SVMAllocator
consumer	arm_compute/graph/Edge.h	/^    INode *consumer() const$/;"	f	class:arm_compute::graph::final
consumer_id	arm_compute/graph/Edge.h	/^    NodeID consumer_id() const$/;"	f	class:arm_compute::graph::final
consumer_idx	arm_compute/graph/Edge.h	/^    unsigned int consumer_idx() const$/;"	f	class:arm_compute::graph::final
contains	src/graph/backends/BackendRegistry.cpp	/^bool BackendRegistry::contains(Target target) const$/;"	f	class:arm_compute::graph::backends::BackendRegistry
context	arm_compute/core/CL/CLKernelLibrary.h	/^    cl::Context &context()$/;"	f	class:arm_compute::CLKernelLibrary
context	arm_compute/runtime/CL/CLScheduler.h	/^    cl::Context &context()$/;"	f	class:arm_compute::CLScheduler
context_	include/CL/cl2.hpp	/^    Context context_;$/;"	m	class:cl::SVMAllocator
conv_args	tests/validation/NEON/Im2Col.cpp	/^const auto conv_args = combine(combine(combine(framework::dataset::make("KernelDims", { Size2D(3U, 3U), Size2D(5U, 5U) }), framework::dataset::make("PadStride", { PadStrideInfo(1U, 1U, 0U, 0U), PadStrideInfo(1U, 1U, 1U, 1U), PadStrideInfo(2U, 2U, 0U, 2U) })),$/;"	m	namespace:arm_compute::test::validation::__anon506	file:
convertToId	documentation/search/search.js	/^function convertToId(search)$/;"	f
convert_f16x8x2_to_u8x16	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline uint8x16_t convert_f16x8x2_to_u8x16(const float16x8x2_t &input)$/;"	f	namespace:fp16
convert_f32x4x4_to_u8x16	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline uint8x16_t convert_f32x4x4_to_u8x16(const float32x4x4_t &input)$/;"	f	namespace:__anon239
convert_from_asymmetric	tests/validation/Helpers.cpp	/^SimpleTensor<float> convert_from_asymmetric(const SimpleTensor<uint8_t> &src)$/;"	f	namespace:arm_compute::test::validation
convert_fully_connected_weights	tests/validation/reference/ConvertFullyConnectedWeights.cpp	/^SimpleTensor<T> convert_fully_connected_weights(const SimpleTensor<T> &src, const TensorShape &original_input_shape, const DataLayout training_data_layout)$/;"	f	namespace:arm_compute::test::validation::reference
convert_policy	src/graph/nodes/EltwiseLayerNode.cpp	/^ConvertPolicy EltwiseLayerNode::convert_policy() const$/;"	f	class:arm_compute::graph::EltwiseLayerNode
convert_to_asymmetric	tests/validation/Helpers.cpp	/^SimpleTensor<uint8_t> convert_to_asymmetric(const SimpleTensor<float> &src, const QuantizationInfo &quantization_info)$/;"	f	namespace:arm_compute::test::validation
convert_u8x16_to_f16x8x2	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline float16x8x2_t convert_u8x16_to_f16x8x2(uint8x16_t input)$/;"	f	namespace:fp16
convert_u8x16_to_f32x4x4	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline float32x4x4_t convert_u8x16_to_f32x4x4(uint8x16_t input)$/;"	f	namespace:__anon239
convolution	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionKernel<3>::convolution(const Window &win)$/;"	f	class:arm_compute::NEConvolutionKernel
convolution	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionKernel<5>::convolution(const Window &win)$/;"	f	class:arm_compute::NEConvolutionKernel
convolution	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionKernel<7>::convolution(const Window &win)$/;"	f	class:arm_compute::NEConvolutionKernel
convolution	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionKernel<9>::convolution(const Window &win)$/;"	f	class:arm_compute::NEConvolutionKernel
convolution	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionRectangleKernel::convolution(const Window &win)$/;"	f	class:arm_compute::NEConvolutionRectangleKernel
convolution	tests/validation/reference/Convolution.cpp	/^SimpleTensor<T> convolution(const SimpleTensor<uint8_t> &src, DataType output_data_type, const int16_t *conv, uint32_t scale, BorderMode border_mode, uint8_t constant_border_value,$/;"	f	namespace:arm_compute::test::validation::reference
convolution3d	tests/validation/reference/Convolution3d.h	/^inline void convolution3d(const SimpleTensor<T> &in, const SimpleTensor<T> &weights, const SimpleTensor<TB> &bias, SimpleTensor<T> &out,$/;"	f	namespace:arm_compute::test::convolution_3d::detail
convolution3d	tests/validation/reference/Convolution3d.h	/^inline void convolution3d(const SimpleTensor<uint8_t> &in, const SimpleTensor<uint8_t> &weights, const SimpleTensor<int32_t> &bias, SimpleTensor<uint8_t> &out,$/;"	f	namespace:arm_compute::test::convolution_3d::detail
convolution3x3_8cl	documentation/convolution3x3_8cl.js	/^var convolution3x3_8cl =$/;"	v
convolution5x5_8cl	documentation/convolution5x5_8cl.js	/^var convolution5x5_8cl =$/;"	v
convolution7x7_8cl	documentation/convolution7x7_8cl.js	/^var convolution7x7_8cl =$/;"	v
convolution9x9_8cl	documentation/convolution9x9_8cl.js	/^var convolution9x9_8cl =$/;"	v
convolution_3d	tests/validation/reference/Convolution3d.h	/^namespace convolution_3d$/;"	n	namespace:arm_compute::test
convolution__rectangle_8cl	documentation/convolution__rectangle_8cl.js	/^var convolution__rectangle_8cl =$/;"	v
convolution_info	src/graph/nodes/ConvolutionLayerNode.cpp	/^PadStrideInfo ConvolutionLayerNode::convolution_info() const$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
convolution_info	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^PadStrideInfo DepthwiseConvolutionLayerNode::convolution_info() const$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
convolution_layer	tests/validation/reference/ConvolutionLayer.cpp	/^SimpleTensor<T> convolution_layer(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<TB> &bias, const TensorShape &output_shape, const PadStrideInfo &info,$/;"	f	namespace:arm_compute::test::validation::reference
convolution_layer_nchw	tests/validation/reference/ConvolutionLayer.cpp	/^SimpleTensor<T> convolution_layer_nchw(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<TB> &bias, SimpleTensor<T> &dst, const PadStrideInfo &info,$/;"	f	namespace:arm_compute::test::validation::reference
convolution_method	src/graph/nodes/ConvolutionLayerNode.cpp	/^ConvolutionMethod ConvolutionLayerNode::convolution_method() const$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
convolution_method_hint	arm_compute/graph/frontend/Types.h	/^    ConvolutionMethod          convolution_method_hint           = { ConvolutionMethod::DEFAULT };          \/**< Convolution method hint *\/$/;"	m	struct:arm_compute::graph::frontend::StreamHints
convolution_s16	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionVertKernel<matrix_size>::convolution_s16(const Window &win)$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
convolution_s32	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionVertKernel<matrix_size>::convolution_s32(const Window &win)$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
convolution_u16	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionVertKernel<matrix_size>::convolution_u16(const Window &win)$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void NESeparableConvolutionHorKernel<5>::convolve<int16_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void NESeparableConvolutionHorKernel<5>::convolve<uint16_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void NESeparableConvolutionHorKernel<7>::convolve<int16_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void NESeparableConvolutionHorKernel<7>::convolve<uint16_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void NESeparableConvolutionHorKernel<9>::convolve<int16_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void NESeparableConvolutionHorKernel<9>::convolve<uint16_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionHorKernel<5>::convolve<int32_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionHorKernel<7>::convolve<int32_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionHorKernel<9>::convolve<int32_t>(const Window &window)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
convolve	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^    static void convolve(const Window &window, unsigned int num_elems_written_per_iteration,$/;"	f	class:__anon253::convolver_3x3
convolve	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^    static void convolve(const Window &window, const ITensor *input, const ITensor *weights, ITensor *output, const PadStrideInfo &conv_info)$/;"	f	class:__anon256::convolver_w1x1_i8x8_f32
convolve	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^    static void convolve(const Window &window, int kernel_size, unsigned int num_elems_read_per_iteration,$/;"	f	class:__anon256::convolver_nhwc
convolve	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^    static void convolve(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	class:__anon256::convolver_1x1
convolve	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^    static void convolve(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	class:__anon256::convolver_3x3
convolve	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^    static void convolve(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	class:__anon256::convolver_5x5
convolve1x3	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	/^vec4 convolve1x3(vec4 s[3], vec4 w)$/;"	m
convolve1x3_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4 convolve1x3_stride1(uint offset, vec3 w)$/;"	m
convolve1x3_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4 convolve1x3_stride1(vec4 left, vec4 middle, vec4 right, vec3 w)$/;"	m
convolve1x3_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4 convolve1x3_stride1(vec4 tmp[2], vec3 w)$/;"	m
convolve1x3_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4[2] convolve1x3_stride1(uint offset, vec3 w)$/;"	m
convolve1x3_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4[2] convolve1x3_stride1(vec4 tmp[3], vec3 w)$/;"	m
convolve1x3_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4 convolve1x3_stride2(uint offset, vec3 w)$/;"	m
convolve1x3_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4 convolve1x3_stride2(vec4 tmp[3], vec3 w)$/;"	m
convolve1x3_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4[2] convolve1x3_stride2(uint offset, vec3 w)$/;"	m
convolve1x5_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	/^vec4 convolve1x5_stride1(vec4 tmp[2], vec2 w[3])$/;"	m
convolve1x5_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	/^vec4 convolve1x5_stride2(vec4 tmp[3], vec2 w[3])$/;"	m
convolve_1x1	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void convolve_1x1(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	namespace:__anon256
convolve_1x1	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void convolve_1x1<float, float>(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	namespace:__anon256
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^inline float32x4x2_t convolve_3x3<1>(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &m0, const float32x4x3_t &m1, const float32x4x3_t &m2, int fixed_point_position)$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^inline float32x4x2_t convolve_3x3<2>(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &m0, const float32x4x3_t &m1, const float32x4x3_t &m2, int fixed_point_position)$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^inline float32x4x2_t convolve_3x3<3>(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &m0, const float32x4x3_t &m1, const float32x4x3_t &m2, int fixed_point_position)$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float16x8x2_t convolve_3x3<1>(const float16_t *in_top, const float16_t *in_mid, const float16_t *in_low, const float16x8x3_t &m0, const float16x8x3_t &m1, const float16x8x3_t &m2,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float16x8x2_t convolve_3x3<2>(const float16_t *in_top, const float16_t *in_mid, const float16_t *in_low, const float16x8x3_t &m0, const float16x8x3_t &m1, const float16x8x3_t &m2,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float16x8x2_t convolve_3x3<3>(const float16_t *in_top, const float16_t *in_mid, const float16_t *in_low, const float16x8x3_t &m0, const float16x8x3_t &m1, const float16x8x3_t &m2,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float32x4x2_t convolve_3x3<1>(const float *in_top, const float *in_mid, const float *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float32x4x2_t convolve_3x3<2>(const float *in_top, const float *in_mid, const float *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float32x4x2_t convolve_3x3<3>(const float *in_top, const float *in_mid, const float *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int32x4x2_t convolve_3x3<1>(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low, const int32x4x3_t &m0, const int32x4x3_t &m1, const int32x4x3_t &m2,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int32x4x2_t convolve_3x3<2>(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int32x4x2_t convolve_3x3<3>(const uint8_t *in_top, const uint8_t *in_mid, const uint8_t *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline qint16x8x2_t convolve_3x3<1>(const qint8_t *in_top, const qint8_t *in_mid, const qint8_t *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline qint16x8x2_t convolve_3x3<2>(const qint8_t *in_top, const qint8_t *in_mid, const qint8_t *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline qint16x8x2_t convolve_3x3<3>(const qint8_t *in_top, const qint8_t *in_mid, const qint8_t *in_low,$/;"	f	namespace:arm_compute::detail
convolve_3x3	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^inline void convolve_3x3(const Window &window, unsigned int num_elems_written_per_iteration,$/;"	f	namespace:__anon253
convolve_3x3	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void convolve_3x3(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	namespace:__anon256
convolve_5x5	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4x2_t convolve_5x5<1>(const float *in_0, const float *in_1, const float *in_2, const float *in_3, const float *in_4,$/;"	f	namespace:__anon256
convolve_5x5	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4x2_t convolve_5x5<2>(const float *in_0, const float *in_1, const float *in_2, const float *in_3, const float *in_4,$/;"	f	namespace:__anon256
convolve_5x5	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4x2_t convolve_5x5<3>(const float *in_0, const float *in_1, const float *in_2, const float *in_3, const float *in_4,$/;"	f	namespace:__anon256
convolve_5x5	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void convolve_5x5(const Window &window, unsigned int num_elems_read_per_iteration, unsigned int num_elems_written_per_iteration,$/;"	f	namespace:__anon256
convolve_row3x1	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void convolve_row3x1(int32x4_t &out, int32x4_t &out2, const uint8x16_t &row_data, const int16_t *convolution)$/;"	f	namespace:arm_compute::__anon251
convolve_row3x1_unrolled	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void convolve_row3x1_unrolled(int32x4_t &out, int32x4_t &out2, const uint8x16_t &row_data, const int16x4_t &mat0, const int16x4_t &mat1, const int16x4_t &mat2)$/;"	f	namespace:arm_compute::__anon251
convolve_row5x1	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void convolve_row5x1(int32x4_t &out, int32x4_t &out2, const uint8x16_t &row_data, const int16_t *convolution)$/;"	f	namespace:arm_compute::__anon251
convolve_row7x1	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void convolve_row7x1(int32x4_t &out, int32x4_t &out2, const uint8x16_t &row_data, const int16_t *convolution)$/;"	f	namespace:arm_compute::__anon251
convolve_row9x1	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void convolve_row9x1(int32x4_t &out, int32x4_t &out2, const uint8x16_t &row_data, const int16_t *convolution)$/;"	f	namespace:arm_compute::__anon251
convolve_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4 convolve_stride1(ImageIterator src_iter, float w)$/;"	m
convolve_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4[2] convolve_stride1(ImageIterator src_iter, float w)$/;"	m
convolve_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4[2] convolve_stride1(ImageIterator src_iter, float w, int x1, int y1)$/;"	m
convolve_stride1	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4[3] convolve_stride1(ImageIterator src_iter, float w)$/;"	m
convolve_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4 convolve_stride2(ImageIterator src_iter, float w)$/;"	m
convolve_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4[2] convolve_stride2(ImageIterator src_iter, float w)$/;"	m
convolve_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4[2] convolve_stride2(ImageIterator src_iter, float w, int x1, int y1)$/;"	m
convolve_stride2	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^vec4[3] convolve_stride2(ImageIterator src_iter, float w)$/;"	m
convolver_1x1	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^class convolver_1x1$/;"	c	namespace:__anon256	file:
convolver_3x3	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^class convolver_3x3$/;"	c	namespace:__anon253	file:
convolver_3x3	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^class convolver_3x3$/;"	c	namespace:__anon256	file:
convolver_5x5	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^class convolver_5x5$/;"	c	namespace:__anon256	file:
convolver_nhwc	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^class convolver_nhwc$/;"	c	namespace:__anon256	file:
convolver_w1x1_i8x8_f32	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^class convolver_w1x1_i8x8_f32$/;"	c	namespace:__anon256	file:
cookie_namespace	documentation/resize.js	/^var cookie_namespace = 'doxygen'; $/;"	v
coord2index	tests/Utils.h	/^inline int coord2index(const TensorShape &shape, const Coordinates &coord)$/;"	f	namespace:arm_compute::test
coords	arm_compute/core/SubTensorInfo.h	/^    Coordinates coords() const$/;"	f	class:arm_compute::final
copies_	include/CL/cl2.hpp	/^        size_type copies_;$/;"	m	class:cl::detail::Deleter
copy	include/CL/cl.hpp	/^inline cl_int copy( IteratorType startIterator, IteratorType endIterator, cl::Buffer &buffer )$/;"	f	namespace:cl
copy	include/CL/cl.hpp	/^inline cl_int copy( const CommandQueue &queue, IteratorType startIterator, IteratorType endIterator, cl::Buffer &buffer )$/;"	f	namespace:cl
copy	include/CL/cl.hpp	/^inline cl_int copy( const CommandQueue &queue, const cl::Buffer &buffer, IteratorType startIterator, IteratorType endIterator )$/;"	f	namespace:cl
copy	include/CL/cl.hpp	/^inline cl_int copy( const cl::Buffer &buffer, IteratorType startIterator, IteratorType endIterator )$/;"	f	namespace:cl
copy	include/CL/cl2.hpp	/^inline cl_int copy( IteratorType startIterator, IteratorType endIterator, cl::Buffer &buffer )$/;"	f	namespace:cl
copy	include/CL/cl2.hpp	/^inline cl_int copy( const CommandQueue &queue, IteratorType startIterator, IteratorType endIterator, cl::Buffer &buffer )$/;"	f	namespace:cl
copy	include/CL/cl2.hpp	/^inline cl_int copy( const CommandQueue &queue, const cl::Buffer &buffer, IteratorType startIterator, IteratorType endIterator )$/;"	f	namespace:cl
copy	include/CL/cl2.hpp	/^inline cl_int copy( const cl::Buffer &buffer, IteratorType startIterator, IteratorType endIterator )$/;"	f	namespace:cl
copy	tests/validation/reference/Copy.cpp	/^SimpleTensor<T> copy(const SimpleTensor<T> &src, const TensorShape &output_shape)$/;"	f	namespace:arm_compute::test::validation::reference
copy__tensor_8cl	documentation/copy__tensor_8cl.js	/^var copy__tensor_8cl =$/;"	v
copy_from	src/core/ITensor.cpp	/^void ITensor::copy_from(const ITensor &src)$/;"	f	class:ITensor
copy_plane	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::copy_plane(const Window &win, uint32_t plane_id)$/;"	f	class:NEChannelCombineKernel
copy_plane	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::copy_plane(const Window &win)$/;"	f	class:NEChannelExtractKernel
copysign	include/half/half.hpp	/^			static half copysign(half x, half y) { return half(binary, x.data_^((x.data_^y.data_)&0x8000)); }$/;"	f	struct:detail::functions
copysign	include/half/half.hpp	/^		inline half copysign(expr x, expr y) { return functions::copysign(x, y); }$/;"	f	namespace:detail
copysign	include/half/half.hpp	/^		inline half copysign(expr x, half y) { return functions::copysign(x, y); }$/;"	f	namespace:detail
copysign	include/half/half.hpp	/^		inline half copysign(half x, expr y) { return functions::copysign(x, y); }$/;"	f	namespace:detail
copysign	include/half/half.hpp	/^		inline half copysign(half x, half y) { return functions::copysign(x, y); }$/;"	f	namespace:detail
copysign	support/ToolchainSupport.h	/^inline T copysign(T x, T y)$/;"	f	namespace:arm_compute::support::cpp11
core_counters	tests/framework/instruments/MaliCounter.h	/^    struct core_counters$/;"	s	class:arm_compute::test::framework::MaliCounter
core_mask	tests/framework/instruments/MaliCounter.cpp	/^    unsigned core_mask;$/;"	m	struct:arm_compute::test::framework::__anon387::MaliHWInfo	file:
core_mask	tests/framework/instruments/hwc.hpp	/^    uint64_t core_mask;$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group
core_mask	tests/framework/instruments/hwc.hpp	/^    uint64_t core_mask[16];$/;"	m	struct:mali_userspace::gpu_props
core_props	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_core_props          core_props;$/;"	m	struct:mali_userspace::mali_base_gpu_props
corner_candidates	src/core/CPP/kernels/CPPCornerCandidatesKernel.cpp	/^inline void corner_candidates(const float *__restrict input, InternalKeypoint *__restrict output, int32_t x, int32_t y, int32_t *num_corner_candidates, arm_compute::Mutex *corner_candidates_mutex)$/;"	f	namespace:__anon228
cos	include/half/half.hpp	/^			static expr cos(float arg) { return expr(std::cos(arg)); }$/;"	f	struct:detail::functions
cos	include/half/half.hpp	/^		inline expr cos(expr arg) { return functions::cos(arg); }$/;"	f	namespace:detail
cos	include/half/half.hpp	/^		inline expr cos(half arg) { return functions::cos(arg); }$/;"	f	namespace:detail
cosh	include/half/half.hpp	/^			static expr cosh(float arg) { return expr(std::cosh(arg)); }$/;"	f	struct:detail::functions
cosh	include/half/half.hpp	/^		inline expr cosh(expr arg) { return functions::cosh(arg); }$/;"	f	namespace:detail
cosh	include/half/half.hpp	/^		inline expr cosh(half arg) { return functions::cosh(arg); }$/;"	f	namespace:detail
count_input_handles_per_target	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^void count_input_handles_per_target(const TaskHandles &task_handles, TargetHandleCounter &handle_counter)$/;"	f	namespace:arm_compute::graph::detail::__anon309
count_test_results	tests/framework/Framework.cpp	/^std::map<TestResult::Status, int> Framework::count_test_results() const$/;"	f	class:arm_compute::test::framework::Framework
countfd	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    int              countfd           = 0;$/;"	m	class:arm_gemm::profiler
cpp11	support/ToolchainSupport.h	/^namespace cpp11$/;"	n	namespace:arm_compute::support
cpp14	support/ToolchainSupport.h	/^namespace cpp14$/;"	n	namespace:arm_compute::support
cpu_info	src/runtime/IScheduler.cpp	/^CPUInfo &IScheduler::cpu_info()$/;"	f	class:arm_compute::IScheduler
cpuinfo	arm_compute/core/CPP/CPPTypes.h	/^    CPUInfo &operator=(const CPUInfo &&cpuinfo) = delete;$/;"	m	class:arm_compute::final
cpuinfo	arm_compute/core/CPP/CPPTypes.h	/^    CPUInfo &operator=(const CPUInfo &cpuinfo) = delete;$/;"	m	class:arm_compute::final
cpuinfo	arm_compute/core/CPP/CPPTypes.h	/^    CPUInfo(const CPUInfo &&cpuinfo)            = delete;$/;"	m	class:arm_compute::final
cpuinfo	arm_compute/core/CPP/CPPTypes.h	/^    CPUInfo(const CPUInfo &cpuinfo)            = delete;$/;"	m	class:arm_compute::final
create	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> CLFunctionFactory::create(INode *node, GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::CLFunctionFactory
create	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> GCFunctionFactory::create(INode *node, GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::GCFunctionFactory
create	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> NEFunctionFactory::create(INode *node, GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::NEFunctionFactory
createIndent	documentation/navtree.js	/^function createIndent(o,domNode,node,level)$/;"	f
createKernels	include/CL/cl.hpp	/^    cl_int createKernels(VECTOR_CLASS<Kernel>* kernels)$/;"	f	class:cl::Program
createKernels	include/CL/cl2.hpp	/^    cl_int createKernels(vector<Kernel>* kernels)$/;"	f	class:cl::Program
createResults	documentation/search/search.js	/^function createResults()$/;"	f
createSubBuffer	include/CL/cl.hpp	/^    Buffer createSubBuffer($/;"	f	class:cl::Buffer
createSubBuffer	include/CL/cl2.hpp	/^    Buffer createSubBuffer($/;"	f	class:cl::Buffer
createSubDevices	include/CL/cl.hpp	/^    cl_int createSubDevices($/;"	f	class:cl::Device
createSubDevices	include/CL/cl2.hpp	/^    cl_int createSubDevices($/;"	f	class:cl::Device
create_HOG	tests/Utils.h	/^inline T create_HOG(const HOGInfo &hog_info)$/;"	f	namespace:arm_compute::test
create_activation_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_activation_layer(ActivationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_activation_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_activation_layer(ActivationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_activation_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_activation_layer(ActivationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_batch_normalization_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_batch_normalization_layer(BatchNormalizationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_batch_normalization_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_batch_normalization_layer(BatchNormalizationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_batch_normalization_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_batch_normalization_layer(BatchNormalizationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_circle_index_register	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline uint8x8x4_t create_circle_index_register()$/;"	f	namespace:__anon258
create_circle_tbl	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline uint8x8x2_t create_circle_tbl(const uint8_t *const __restrict buffer[7], size_t in_offset, const uint8x8x4_t &circle_index_r)$/;"	f	namespace:__anon258
create_configure_kernel	arm_compute/core/Helpers.h	/^std::unique_ptr<Kernel> create_configure_kernel(T &&... args)$/;"	f	namespace:arm_compute
create_conv	tests/validation/fixtures/ConvolutionFixture.h	/^    create_conv(int16_t *conv)$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixture
create_convolution_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_convolution_layer(ConvolutionLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_convolution_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_convolution_layer(ConvolutionLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_convolution_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_convolution_layer(ConvolutionLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_convolver_object	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^std::unique_ptr<depthwise::IDepthwiseConvolution> NEDepthwiseConvolutionLayer3x3Kernel::create_convolver_object(PadStrideInfo  conv_info,$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
create_default_pass_manager	src/graph/Utils.cpp	/^PassManager create_default_pass_manager(Target target)$/;"	f	namespace:arm_compute::graph
create_depth_concatenate_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<arm_compute::IFunction> create_depth_concatenate_layer(DepthConcatenateLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_depth_concatenate_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<arm_compute::IFunction> create_depth_concatenate_layer(DepthConcatenateLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_depth_concatenate_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<arm_compute::IFunction> create_depth_concatenate_layer(DepthConcatenateLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_depthwise_convolution_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_depthwise_convolution_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_depthwise_convolution_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_eltwise_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_eltwise_layer(EltwiseLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_eltwise_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_eltwise_layer(EltwiseLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_eltwise_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_eltwise_layer(EltwiseLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_empty_region	src/runtime/CL/CLMemory.cpp	/^void CLMemory::create_empty_region()$/;"	f	class:arm_compute::CLMemory
create_empty_region	src/runtime/Memory.cpp	/^void Memory::create_empty_region()$/;"	f	class:arm_compute::Memory
create_error	src/core/Error.cpp	/^Status arm_compute::create_error(ErrorCode error_code, const char *function, const char *file, const int line, const char *msg, ...)$/;"	f	class:arm_compute
create_error_va_list	src/core/Error.cpp	/^Status arm_compute::create_error_va_list(ErrorCode error_code, const char *function, const char *file, const int line, const char *msg, va_list args)$/;"	f	class:arm_compute
create_flags	tests/framework/instruments/hwc.hpp	/^    uint32_t create_flags;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_set_flags
create_flatten_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_flatten_layer(FlattenLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_flatten_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_flatten_layer(FlattenLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_fully_connected_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_fully_connected_layer(FullyConnectedLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_fully_connected_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_fully_connected_layer(FullyConnectedLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_fully_connected_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_fully_connected_layer(FullyConnectedLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_func_table	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^struct NEMinMaxLocationKernel::create_func_table<T, utility::index_sequence<N...>>$/;"	s	class:arm_compute::NEMinMaxLocationKernel	file:
create_grouped_convolution	src/graph/GraphBuilder.cpp	/^NodeID create_grouped_convolution(Graph &g, NodeParams &params, NodeIdxPair input, NodeID weights, NodeID bias,$/;"	f	namespace:arm_compute::graph::__anon303
create_image_planes	tests/validation/reference/ChannelCombine.cpp	/^inline std::vector<SimpleTensor<T>> create_image_planes(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute::test::validation::reference::__anon532
create_internal_keypoints	tests/validation/reference/OpticalFlow.cpp	/^InternalKeyPointArray create_internal_keypoints(const KeyPointArray &keypoints)$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
create_kernel	arm_compute/core/Helpers.h	/^std::unique_ptr<Kernel> create_kernel()$/;"	f	namespace:arm_compute
create_kernel	src/core/CL/CLKernelLibrary.cpp	/^Kernel CLKernelLibrary::create_kernel(const std::string &kernel_name, const StringSet &build_options_set) const$/;"	f	class:CLKernelLibrary
create_kernel	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernel GCKernelLibrary::create_kernel(const std::string &shader_name, const StringSet &build_options_set) const$/;"	f	class:GCKernelLibrary
create_log_msg	src/core/utils/logging/Logger.cpp	/^std::string Logger::create_log_msg(const std::string &str, LogLevel log_level)$/;"	f	class:Logger
create_logger	src/core/utils/logging/LoggerRegistry.cpp	/^void LoggerRegistry::create_logger(const std::string &name, LogLevel log_level, std::vector<std::shared_ptr<Printer>> printers)$/;"	f	class:LoggerRegistry
create_memory_manager	src/graph/backends/CL/CLDeviceBackend.cpp	/^std::shared_ptr<arm_compute::IMemoryManager> CLDeviceBackend::create_memory_manager(MemoryManagerAffinity affinity)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
create_memory_manager	src/graph/backends/GLES/GCDeviceBackend.cpp	/^std::shared_ptr<arm_compute::IMemoryManager> GCDeviceBackend::create_memory_manager(MemoryManagerAffinity affinity)$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
create_memory_manager	src/graph/backends/NEON/NEDeviceBackend.cpp	/^std::shared_ptr<arm_compute::IMemoryManager> NEDeviceBackend::create_memory_manager(MemoryManagerAffinity affinity)$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
create_multi_image	tests/Utils.h	/^inline T create_multi_image(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute::test
create_named_function	arm_compute/graph/backends/Utils.h	/^std::pair<std::unique_ptr<arm_compute::IFunction>, FunctionNameType> create_named_function(FunctionNameType name, ParameterType... args)$/;"	f	namespace:arm_compute::graph::backends
create_named_memory_managed_function	arm_compute/graph/backends/Utils.h	/^std::pair<std::unique_ptr<arm_compute::IFunction>, FunctionNameType> create_named_memory_managed_function(FunctionNameType name,$/;"	f	namespace:arm_compute::graph::backends
create_normalization_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_normalization_layer(NormalizationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_normalization_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_normalization_layer(NormalizationLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_normalization_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_normalization_layer(NormalizationLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_permutation_index	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline uint8x8x2_t create_permutation_index(size_t k)$/;"	f	namespace:__anon258
create_pool	src/runtime/BlobLifetimeManager.cpp	/^std::unique_ptr<IMemoryPool> BlobLifetimeManager::create_pool(IAllocator *allocator)$/;"	f	class:BlobLifetimeManager
create_pool	src/runtime/OffsetLifetimeManager.cpp	/^std::unique_ptr<IMemoryPool> OffsetLifetimeManager::create_pool(IAllocator *allocator)$/;"	f	class:OffsetLifetimeManager
create_pooling_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_pooling_layer(PoolingLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_pooling_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_pooling_layer(PoolingLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_pooling_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_pooling_layer(PoolingLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_printers	tests/framework/command_line/CommonOptions.cpp	/^std::vector<std::unique_ptr<Printer>> CommonOptions::create_printers()$/;"	f	class:arm_compute::test::framework::CommonOptions
create_pyramid	tests/Utils.h	/^inline T create_pyramid(const PyramidInfo &pyramid_info)$/;"	f	namespace:arm_compute::test
create_reserved_loggers	src/core/utils/logging/LoggerRegistry.cpp	/^void LoggerRegistry::create_reserved_loggers(LogLevel log_level, std::vector<std::shared_ptr<Printer>> printers)$/;"	f	class:LoggerRegistry
create_reshape_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_reshape_layer(ReshapeLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_reshape_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_reshape_layer(ReshapeLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_separable_conv	tests/validation/fixtures/ConvolutionFixture.h	/^    create_separable_conv(int16_t *conv)$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixture
create_simple_single_input_output_node	src/graph/GraphBuilder.cpp	/^NodeID create_simple_single_input_output_node(Graph &g, NodeParams &params, NodeIdxPair input, Args &&... args)$/;"	f	namespace:arm_compute::graph::__anon303
create_softmax_layer	src/graph/backends/CL/CLFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_softmax_layer(SoftmaxLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon305
create_softmax_layer	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^std::unique_ptr<IFunction> create_softmax_layer(SoftmaxLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon306
create_softmax_layer	src/graph/backends/NEON/NEFunctionFactory.cpp	/^std::unique_ptr<IFunction> create_softmax_layer(SoftmaxLayerNode &node, GraphContext &ctx)$/;"	f	namespace:arm_compute::graph::backends::__anon308
create_subimage	src/runtime/MultiImage.cpp	/^void MultiImage::create_subimage(MultiImage *image, const Coordinates &coords, unsigned int width, unsigned int height)$/;"	f	class:MultiImage
create_subtensor	src/graph/backends/CL/CLDeviceBackend.cpp	/^std::unique_ptr<ITensorHandle> CLDeviceBackend::create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
create_subtensor	src/graph/backends/GLES/GCDeviceBackend.cpp	/^std::unique_ptr<ITensorHandle> GCDeviceBackend::create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent)$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
create_subtensor	src/graph/backends/NEON/NEDeviceBackend.cpp	/^std::unique_ptr<ITensorHandle> NEDeviceBackend::create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent)$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
create_tensor	src/graph/Graph.cpp	/^TensorID Graph::create_tensor(TensorDescriptor desc)$/;"	f	class:arm_compute::graph::Graph
create_tensor	src/graph/backends/CL/CLDeviceBackend.cpp	/^std::unique_ptr<ITensorHandle> CLDeviceBackend::create_tensor(const Tensor &tensor)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
create_tensor	src/graph/backends/GLES/GCDeviceBackend.cpp	/^std::unique_ptr<ITensorHandle> GCDeviceBackend::create_tensor(const Tensor &tensor)$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
create_tensor	src/graph/backends/NEON/NEDeviceBackend.cpp	/^std::unique_ptr<ITensorHandle> NEDeviceBackend::create_tensor(const Tensor &tensor)$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
create_tensor	tests/GLES_COMPUTE/Helper.h	/^inline GCTensor create_tensor(const TensorShape &shape, DataType data_type, int num_channels = 1, int fixed_point_position = 0)$/;"	f	namespace:arm_compute::test
create_tensor	tests/GLES_COMPUTE/Helper.h	/^inline GCTensor create_tensor(const std::string &name, DataType data_type)$/;"	f	namespace:arm_compute::test
create_tensor	tests/Utils.h	/^inline T create_tensor(const TensorShape &shape, DataType data_type, int num_channels = 1,$/;"	f	namespace:arm_compute::test
create_tensor	tests/Utils.h	/^inline T create_tensor(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute::test
create_tensor_planes	tests/validation/fixtures/ChannelCombineFixture.h	/^inline std::vector<TensorType> create_tensor_planes(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute::test::validation::__anon528
create_tensor_planes_reference	tests/validation/fixtures/ChannelCombineFixture.h	/^    std::vector<SimpleTensor<U>> create_tensor_planes_reference(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::validation::ChannelCombineValidationFixture
create_tensor_planes_reference	tests/validation/fixtures/ChannelExtractFixture.h	/^    std::vector<SimpleTensor<T>> create_tensor_planes_reference(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::validation::ChannelExtractValidationFixture
cross_group	arm_compute/graph/GraphContext.h	/^    std::shared_ptr<arm_compute::IMemoryGroup>   cross_group = { nullptr };             \/**< Cross-function memory group *\/$/;"	m	struct:arm_compute::graph::MemoryManagerContext
cross_mm	arm_compute/graph/GraphContext.h	/^    std::shared_ptr<arm_compute::IMemoryManager> cross_mm    = { nullptr };             \/**< Cross-function memory manager *\/$/;"	m	struct:arm_compute::graph::MemoryManagerContext
ctx	arm_compute/graph/Workload.h	/^    GraphContext              *ctx     = { nullptr }; \/**< Graph execution context *\/$/;"	m	struct:arm_compute::graph::ExecutionWorkload
current_offset_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int current_offset_in_bytes; \/**< Current offset of image (in bytes) *\/$/;"	m	struct:ImageIterator
current_offset_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int current_offset_in_bytes; \/**< Current offset of tensor (in bytes) *\/$/;"	m	struct:Tensor3DIterator
current_offset_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int current_offset_in_bytes; \/**< Current offset of vector (in bytes) *\/$/;"	m	struct:VectorIterator
current_suite_name	tests/framework/Framework.cpp	/^std::string Framework::current_suite_name() const$/;"	f	class:arm_compute::test::framework::Framework
currentevent	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    int              currentevent      = 0;$/;"	m	class:arm_gemm::profiler
d	arm_compute/core/Window.h	/^        Dimension &operator=(const Dimension &d) = default;$/;"	m	class:arm_compute::Window::Dimension
data	include/linux/EGL/fbdev_window.h	/^	unsigned short *data;$/;"	m	struct:fbdev_pixmap
data	src/runtime/CL/CLLutAllocator.cpp	/^uint8_t *CLLutAllocator::data()$/;"	f	class:CLLutAllocator
data	src/runtime/CL/CLTensorAllocator.cpp	/^uint8_t *CLTensorAllocator::data()$/;"	f	class:CLTensorAllocator
data	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^uint8_t *GCTensorAllocator::data()$/;"	f	class:GCTensorAllocator
data	src/runtime/LutAllocator.cpp	/^uint8_t *LutAllocator::data() const$/;"	f	class:LutAllocator
data	src/runtime/TensorAllocator.cpp	/^uint8_t *TensorAllocator::data() const$/;"	f	class:TensorAllocator
data	tests/CL/CLAccessor.h	/^inline const void *CLAccessor::data() const$/;"	f	class:arm_compute::test::CLAccessor
data	tests/CL/CLAccessor.h	/^inline void *CLAccessor::data()$/;"	f	class:arm_compute::test::CLAccessor
data	tests/NEON/Accessor.h	/^inline const void *Accessor::data() const$/;"	f	class:arm_compute::test::Accessor
data	tests/NEON/Accessor.h	/^inline void *Accessor::data()$/;"	f	class:arm_compute::test::Accessor
data	tests/SimpleTensor.h	/^T *SimpleTensor<T>::data()$/;"	f	class:arm_compute::test::SimpleTensor
data	tests/SimpleTensor.h	/^const T *SimpleTensor<T>::data() const$/;"	f	class:arm_compute::test::SimpleTensor
data	tests/validation/CL/DirectConvolutionLayer.cpp	/^const auto data = combine(datasets::SmallDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon415	file:
data	tests/validation/CL/HarrisCorners.cpp	/^const auto data = combine(framework::dataset::make("GradientSize", { 3, 5, 7 }), combine(framework::dataset::make("BlockSize", { 3, 5, 7 }), combine(datasets::BorderModes(), use_fp16)));$/;"	m	namespace:arm_compute::test::validation::__anon429	file:
data	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^const auto data = combine(datasets::SmallDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon459	file:
data	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^const auto data = combine(datasets::SmallDirectConvolutionTensorShiftShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon460	file:
data	tests/validation/NEON/HarrisCorners.cpp	/^const auto data = combine(framework::dataset::make("GradientSize", { 3, 5, 7 }), combine(framework::dataset::make("BlockSize", { 3, 5, 7 }), combine(datasets::BorderModes(), use_fp16)));$/;"	m	namespace:arm_compute::test::validation::__anon505	file:
data1x1	tests/validation/CL/DeconvolutionLayer.cpp	/^const auto data1x1 = datasets::SmallDeconvolutionShapes() * framework::dataset::make("StrideX", 1, 4) * framework::dataset::make("StrideY", 1, 4) * framework::dataset::make("PadX", 0, 1)$/;"	m	namespace:arm_compute::test::validation::__anon408	file:
data1x1	tests/validation/NEON/DeconvolutionLayer.cpp	/^const auto data1x1 = datasets::SmallDeconvolutionShapes() * framework::dataset::make("StrideX", 1, 4) * framework::dataset::make("StrideY", 1, 4) * framework::dataset::make("PadX", 0, 1)$/;"	m	namespace:arm_compute::test::validation::__anon482	file:
data3x3	tests/validation/CL/DeconvolutionLayer.cpp	/^const auto data3x3 = datasets::SmallDeconvolutionShapes() * framework::dataset::make("StrideX", 1, 4) * framework::dataset::make("StrideY", 1, 4) * framework::dataset::make("PadX", 0, 2)$/;"	m	namespace:arm_compute::test::validation::__anon408	file:
data3x3	tests/validation/NEON/DeconvolutionLayer.cpp	/^const auto data3x3 = datasets::SmallDeconvolutionShapes() * framework::dataset::make("StrideX", 1, 4) * framework::dataset::make("StrideY", 1, 4) * framework::dataset::make("PadX", 0, 2)$/;"	m	namespace:arm_compute::test::validation::__anon482	file:
data4x4	tests/validation/CL/DeconvolutionLayer.cpp	/^const auto data4x4 = datasets::SmallDeconvolutionShapes() * framework::dataset::make("StrideX", 1, 4) * framework::dataset::make("StrideY", 1, 4) * framework::dataset::make("PadX", 0, 3)$/;"	m	namespace:arm_compute::test::validation::__anon408	file:
data4x4	tests/validation/NEON/DeconvolutionLayer.cpp	/^const auto data4x4 = datasets::SmallDeconvolutionShapes() * framework::dataset::make("StrideX", 1, 4) * framework::dataset::make("StrideY", 1, 4) * framework::dataset::make("PadX", 0, 3)$/;"	m	namespace:arm_compute::test::validation::__anon482	file:
data_	include/CL/cl.hpp	/^    ::size_t data_[N];$/;"	m	class:cl::size_t
data_	include/CL/cl.hpp	/^    T data_[N];$/;"	m	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
data_	include/CL/cl2.hpp	/^            size_type data_[N];$/;"	m	class:cl::compatibility::size_t
data_	include/half/half.hpp	/^		HALF_CONSTEXPR half() HALF_NOEXCEPT : data_() {}$/;"	f	class:half
data_	include/half/half.hpp	/^		HALF_CONSTEXPR half(detail::binary_t, detail::uint16 bits) HALF_NOEXCEPT : data_(bits) {}$/;"	f	class:half
data_	include/half/half.hpp	/^		detail::uint16 data_;$/;"	m	class:half
data_f32	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto data_f32 = combine(datasets::SmallDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon489	file:
data_fixed_point	tests/validation/CL/DirectConvolutionLayer.cpp	/^const auto data_fixed_point = combine(datasets::TinyDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon415	file:
data_interleave	tests/validation/CL/GEMM.cpp	/^const auto                          data_interleave = framework::dataset::make("M", 8, 14) * framework::dataset::make("N", 7, 14);$/;"	m	namespace:arm_compute::test::validation::__anon421	file:
data_interleave	tests/validation/NEON/GEMM.cpp	/^const auto data_interleave = framework::dataset::make("M", 8, 12) * framework::dataset::make("N", 8, 12);$/;"	m	namespace:arm_compute::test::validation::__anon496	file:
data_layout	tests/CL/CLAccessor.h	/^inline DataLayout CLAccessor::data_layout() const$/;"	f	class:arm_compute::test::CLAccessor
data_layout	tests/GLES_COMPUTE/GCAccessor.h	/^inline DataLayout GCAccessor::data_layout() const$/;"	f	class:arm_compute::test::GCAccessor
data_layout	tests/NEON/Accessor.h	/^inline DataLayout Accessor::data_layout() const$/;"	f	class:arm_compute::test::Accessor
data_layout	tests/SimpleTensor.h	/^DataLayout SimpleTensor<T>::data_layout() const$/;"	f	class:arm_compute::test::SimpleTensor
data_layouts	tests/benchmark/CL/PoolingLayer.cpp	/^const auto data_layouts = framework::dataset::make("DataLayout", { DataLayout::NCHW });$/;"	m	namespace:arm_compute::test::benchmark::__anon346	file:
data_layouts	tests/benchmark/GLES_COMPUTE/PoolingLayer.cpp	/^const auto data_layouts = framework::dataset::make("DataLayout", { DataLayout::NCHW });$/;"	m	namespace:arm_compute::test::benchmark::__anon359	file:
data_layouts	tests/benchmark/NEON/PoolingLayer.cpp	/^const auto data_layouts = framework::dataset::make("DataLayout", { DataLayout::NCHW, DataLayout::NHWC });$/;"	m	namespace:arm_compute::test::benchmark::__anon380	file:
data_matrix_multiply	tests/validation/NEON/GEMMLowp.cpp	/^const auto data_matrix_multiply = framework::dataset::make("M", 12, 20) * framework::dataset::make("N", 12, 20) * framework::dataset::make("K", 16);$/;"	m	namespace:arm_compute::test::validation::__anon497	file:
data_pad_f32	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto data_pad_f32 = concat(concat(combine(framework::dataset::make("PadX", { 0, 1 }),$/;"	m	namespace:arm_compute::test::validation::__anon489	file:
data_pad_qs8	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto data_pad_qs8 = concat(combine(framework::dataset::make("PadX", 0),$/;"	m	namespace:arm_compute::test::validation::__anon489	file:
data_qs16	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto data_qs16 = combine(datasets::TinyDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon489	file:
data_qs8	tests/validation/NEON/DirectConvolutionLayer.cpp	/^const auto data_qs8 = combine(datasets::TinyDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon489	file:
data_quantized	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^const auto data_quantized = combine(datasets::SmallDirectConvolutionShapes(),$/;"	m	namespace:arm_compute::test::validation::__anon459	file:
data_shapes	tests/benchmark/CL/GEMMInterleave4x4.cpp	/^const auto data_shapes = framework::dataset::make("M", 8, 12) * framework::dataset::make("N", 8, 12);$/;"	m	namespace:arm_compute::test::benchmark::__anon339	file:
data_shapes	tests/benchmark/NEON/GEMMInterleave4x4.cpp	/^const auto data_shapes = framework::dataset::make("M", 8, 12) * framework::dataset::make("N", 8, 12);$/;"	m	namespace:arm_compute::test::benchmark::__anon373	file:
data_size_from_type	arm_compute/core/Utils.h	/^inline size_t data_size_from_type(DataType data_type)$/;"	f	namespace:arm_compute
data_transpose	tests/validation/CL/GEMM.cpp	/^const auto data_transpose = framework::dataset::make("M", 8, 14) * framework::dataset::make("N", 7, 14);$/;"	m	namespace:arm_compute::test::validation	file:
data_transpose	tests/validation/NEON/GEMM.cpp	/^const auto data_transpose  = framework::dataset::make("M", 8, 14) * framework::dataset::make("N", 7, 14);$/;"	m	namespace:arm_compute::test::validation::__anon496	file:
data_type	tests/CL/CLAccessor.h	/^inline DataType CLAccessor::data_type() const$/;"	f	class:arm_compute::test::CLAccessor
data_type	tests/GLES_COMPUTE/GCAccessor.h	/^inline DataType GCAccessor::data_type() const$/;"	f	class:arm_compute::test::GCAccessor
data_type	tests/NEON/Accessor.h	/^inline DataType Accessor::data_type() const$/;"	f	class:arm_compute::test::Accessor
data_type	tests/SimpleTensor.h	/^DataType SimpleTensor<T>::data_type() const$/;"	f	class:arm_compute::test::SimpleTensor
data_type	tests/validation/reference/Derivative.cpp	/^struct data_type<int16_t>$/;"	s	namespace:arm_compute::test::validation::reference::__anon534	file:
data_type	tests/validation/reference/Scharr.cpp	/^struct data_type<int16_t>$/;"	s	namespace:arm_compute::test::validation::reference::__anon547	file:
data_type	tests/validation/reference/Sobel.cpp	/^struct data_type<int16_t>$/;"	s	namespace:arm_compute::test::validation::reference::__anon548	file:
data_type	tests/validation/reference/Sobel.cpp	/^struct data_type<int>$/;"	s	namespace:arm_compute::test::validation::reference::__anon548	file:
data_type_for_convolution	arm_compute/core/Utils.h	/^inline std::pair<DataType, DataType> data_type_for_convolution(const int16_t *conv_col, const int16_t *conv_row, size_t size)$/;"	f	namespace:arm_compute
data_type_for_convolution_matrix	arm_compute/core/Utils.h	/^inline DataType data_type_for_convolution_matrix(const int16_t *conv, size_t size)$/;"	f	namespace:arm_compute
data_type_from_format	arm_compute/core/Utils.h	/^inline DataType data_type_from_format(Format format)$/;"	f	namespace:arm_compute
data_types	tests/benchmark/CL/ActivationLayer.cpp	/^const auto data_types           = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QS8, DataType::QS16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon329	file:
data_types	tests/benchmark/CL/BatchNormalizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon330	file:
data_types	tests/benchmark/CL/ConvolutionLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon331	file:
data_types	tests/benchmark/CL/DepthConcatenateLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon332	file:
data_types	tests/benchmark/CL/DepthwiseConvolutionLayer.cpp	/^const auto data_types                    = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QASYMM8 });$/;"	m	namespace:arm_compute::test::benchmark	file:
data_types	tests/benchmark/CL/DepthwiseSeparableConvolutionLayer.cpp	/^const auto data_types                             = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark	file:
data_types	tests/benchmark/CL/DirectConvolutionLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon334	file:
data_types	tests/benchmark/CL/FlattenLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon335	file:
data_types	tests/benchmark/CL/Floor.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon336	file:
data_types	tests/benchmark/CL/FullyConnectedLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon337	file:
data_types	tests/benchmark/CL/GEMM.cpp	/^const auto data_types          = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon338	file:
data_types	tests/benchmark/CL/GEMMInterleave4x4.cpp	/^const auto data_types  = framework::dataset::make("DataType", { DataType::U8, DataType::U16, DataType::U32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon339	file:
data_types	tests/benchmark/CL/L2NormalizeLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon341	file:
data_types	tests/benchmark/CL/MinMaxLocation.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::U8, DataType::S16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon343	file:
data_types	tests/benchmark/CL/NormalizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon344	file:
data_types	tests/benchmark/CL/PoolingLayer.cpp	/^const auto data_types   = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon346	file:
data_types	tests/benchmark/CL/QuantizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon347	file:
data_types	tests/benchmark/CL/ReshapeLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::U8, DataType::U16, DataType::U32, DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon348	file:
data_types	tests/benchmark/CL/SoftmaxLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::QASYMM8, DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon350	file:
data_types	tests/benchmark/CL/Transpose.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::U8, DataType::U16, DataType::U32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon351	file:
data_types	tests/benchmark/GLES_COMPUTE/ActivationLayer.cpp	/^const auto data_types           = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon352	file:
data_types	tests/benchmark/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon353	file:
data_types	tests/benchmark/GLES_COMPUTE/ConvolutionLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon354	file:
data_types	tests/benchmark/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^const auto data_types                    = framework::dataset::make("DataType", { DataType::F16 });$/;"	m	namespace:arm_compute::test::benchmark	file:
data_types	tests/benchmark/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32, DataType::F16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon355	file:
data_types	tests/benchmark/GLES_COMPUTE/FullyConnectedLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32, DataType::F16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon356	file:
data_types	tests/benchmark/GLES_COMPUTE/GEMM.cpp	/^const auto data_types          = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon357	file:
data_types	tests/benchmark/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon358	file:
data_types	tests/benchmark/GLES_COMPUTE/PoolingLayer.cpp	/^const auto data_types   = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon359	file:
data_types	tests/benchmark/GLES_COMPUTE/Scale.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon360	file:
data_types	tests/benchmark/GLES_COMPUTE/SoftmaxLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon361	file:
data_types	tests/benchmark/GLES_COMPUTE/Transpose.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon362	file:
data_types	tests/benchmark/NEON/ActivationLayer.cpp	/^const auto data_types           = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QS8, DataType::QS16 });$/;"	m	namespace:arm_compute::test::benchmark::__anon363	file:
data_types	tests/benchmark/NEON/BatchNormalizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon364	file:
data_types	tests/benchmark/NEON/ConvolutionLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QASYMM8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon365	file:
data_types	tests/benchmark/NEON/DepthConcatenateLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon366	file:
data_types	tests/benchmark/NEON/DirectConvolutionLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon368	file:
data_types	tests/benchmark/NEON/FlattenLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon369	file:
data_types	tests/benchmark/NEON/Floor.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon370	file:
data_types	tests/benchmark/NEON/FullyConnectedLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon371	file:
data_types	tests/benchmark/NEON/GEMM.cpp	/^const auto data_types = framework::dataset::make("DataType",$/;"	m	namespace:arm_compute::test::benchmark::__anon372	file:
data_types	tests/benchmark/NEON/GEMMInterleave4x4.cpp	/^const auto data_types  = framework::dataset::make("DataType", { DataType::U8, DataType::U16, DataType::U32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon373	file:
data_types	tests/benchmark/NEON/L2NormalizeLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon375	file:
data_types	tests/benchmark/NEON/MinMaxLocation.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::U8, DataType::S16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon377	file:
data_types	tests/benchmark/NEON/NormalizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon378	file:
data_types	tests/benchmark/NEON/PoolingLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QASYMM8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon380	file:
data_types	tests/benchmark/NEON/PoolingLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32, DataType::QASYMM8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon380	file:
data_types	tests/benchmark/NEON/QuantizationLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon381	file:
data_types	tests/benchmark/NEON/ReshapeLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::U8, DataType::U16, DataType::U32, DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon382	file:
data_types	tests/benchmark/NEON/SoftmaxLayer.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon385	file:
data_types	tests/benchmark/NEON/Transpose.cpp	/^const auto data_types = framework::dataset::make("DataType", { DataType::U8, DataType::U16, DataType::U32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon386	file:
data_types_dst	tests/benchmark/CL/DequantizationLayer.cpp	/^const auto data_types_dst = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon333	file:
data_types_dst	tests/benchmark/NEON/DequantizationLayer.cpp	/^const auto data_types_dst = framework::dataset::make("DataType", { DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon367	file:
data_types_mobilenet	tests/benchmark/CL/ActivationLayer.cpp	/^const auto data_types_mobilenet = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QS8, DataType::QS16, DataType::QASYMM8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon329	file:
data_types_mobilenet	tests/benchmark/GLES_COMPUTE/ActivationLayer.cpp	/^const auto data_types_mobilenet = framework::dataset::make("DataType", { DataType::F16, DataType::F32 });$/;"	m	namespace:arm_compute::test::benchmark::__anon352	file:
data_types_mobilenet	tests/benchmark/NEON/ActivationLayer.cpp	/^const auto data_types_mobilenet = framework::dataset::make("DataType", { DataType::F16, DataType::F32, DataType::QS8, DataType::QS16, DataType::QASYMM8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon363	file:
data_types_src	tests/benchmark/CL/DequantizationLayer.cpp	/^const auto data_types_src = framework::dataset::make("DataType", { DataType::U8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon333	file:
data_types_src	tests/benchmark/NEON/DequantizationLayer.cpp	/^const auto data_types_src = framework::dataset::make("DataType", { DataType::U8 });$/;"	m	namespace:arm_compute::test::benchmark::__anon367	file:
dataset	tests/framework/datasets/CartesianProductDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/ContainerDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/Dataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/InitializerListDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/JoinDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/RangeDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/SingletonDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset	tests/framework/datasets/ZipDataset.h	/^namespace dataset$/;"	n	namespace:arm_compute::test::framework
dataset_mode_from_name	tests/framework/DatasetModes.cpp	/^DatasetMode dataset_mode_from_name(const std::string &name)$/;"	f	namespace:arm_compute::test::framework
datasets	tests/datasets/ActivationFunctionsDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/AlexNetGEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/BatchNormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/BorderModeDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ChannelShuffleLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ConvertPolicyDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/DilatedConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/DirectConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/FullyConnectedLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/GEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/GEMMLowpDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/GoogleNetGEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/GradientDimensionDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/HOGDescriptorDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/HOGMultiDetectionDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ImageFileDatasets.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/InterpolationPolicyDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/LSTMLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/LargeConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/LargeGEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/LargeGEMMLowpDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/LocallyConnectedDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/MatrixMultiplyGEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/MatrixPatternDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/NonLinearFilterFunctionDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/NormalizationTypesDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/OpticalFlowDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/PoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/PoolingTypesDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/RNNLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ROIPoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/RandomBatchNormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/RandomNormalizePlanarYUVLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ReductionOperationDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ReshapeLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/SamplingPolicyDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ScaleLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ShapeDatasets.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/SmallConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/SmallGEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/SmallGEMMLowpDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/ThresholdDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/TinyConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/TinyGEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/WinogradInputTransformDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/WinogradOutputTransformDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/alexnet/AlexNetActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/alexnet/AlexNetFullyConnectedLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/alexnet/AlexNetNormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/alexnet/AlexNetPoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1FullyConnectedLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1GEMMDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1NormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1PoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4BatchNormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4FullyConnectedLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4PoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/lenet5/LeNet5ActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/lenet5/LeNet5ConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/lenet5/LeNet5FullyConnectedLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/lenet5/LeNet5PoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/mobilenet/MobileNetActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/mobilenet/MobileNetBatchNormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/mobilenet/MobileNetConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseSeparableConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/squeezenet/SqueezeNetActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/squeezenet/SqueezeNetPoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/vgg/vgg16/VGG16ActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/vgg/vgg16/VGG16FullyConnectedLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/vgg/vgg16/VGG16PoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/yolo/v2/YOLOV2BatchNormalizationLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/yolo/v2/YOLOV2ConvolutionLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
datasets	tests/datasets/system_tests/yolo/v2/YOLOV2PoolingLayerDataset.h	/^namespace datasets$/;"	n	namespace:arm_compute::test
ddk_version	arm_compute/core/CL/CLTypes.h	/^    std::string ddk_version; \/**< DDK version *\/$/;"	m	struct:arm_compute::CLDeviceOptions
deallocate	include/CL/cl2.hpp	/^    void deallocate(pointer p, size_type)$/;"	f	class:cl::SVMAllocator
decltype	arm_compute/core/Utils.h	/^constexpr auto DIV_CEIL(S val, T m) -> decltype((val + m - 1) \/ m)$/;"	f	namespace:arm_compute
decltype	arm_compute/core/Utils.h	/^inline auto ceil_to_multiple(S value, T divisor) -> decltype(((value + divisor - 1) \/ divisor) * divisor)$/;"	f	namespace:arm_compute
decltype	arm_compute/core/Utils.h	/^inline auto floor_to_multiple(S value, T divisor) -> decltype((value \/ divisor) * divisor)$/;"	f	namespace:arm_compute
deconvolution__layer_8cl	documentation/deconvolution__layer_8cl.js	/^var deconvolution__layer_8cl =$/;"	v
deconvolution_layer	tests/validation/reference/DeconvolutionLayer.cpp	/^SimpleTensor<T> deconvolution_layer(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<T> &bias, const TensorShape &output_shape,$/;"	f	namespace:arm_compute::test::validation::reference
deconvolution_output_dimensions	src/core/Utils.cpp	/^const std::pair<unsigned int, unsigned int> arm_compute::deconvolution_output_dimensions($/;"	f	class:arm_compute
deconvolution_output_shape	src/core/Utils.cpp	/^TensorShape arm_compute::deconvolution_output_shape(const std::pair<unsigned int, unsigned int> &out_dims, TensorShape input, TensorShape weights)$/;"	f	class:arm_compute
decorate_log_msg	src/core/utils/logging/Logger.cpp	/^void Logger::decorate_log_msg(LogMsg &msg)$/;"	f	class:Logger
default_	include/CL/cl.hpp	/^    static CommandQueue default_;$/;"	m	class:cl::CommandQueue
default_	include/CL/cl.hpp	/^    static Context default_;$/;"	m	class:cl::Context
default_	include/CL/cl.hpp	/^__attribute__((weak)) CommandQueue CommandQueue::default_;$/;"	m	class:cl::CommandQueue
default_	include/CL/cl.hpp	/^__attribute__((weak)) Context Context::default_;$/;"	m	class:cl::Context
default_	include/CL/cl.hpp	/^__declspec(selectany) CommandQueue CommandQueue::default_;$/;"	m	class:cl::CommandQueue
default_	include/CL/cl.hpp	/^__declspec(selectany) Context Context::default_;$/;"	m	class:cl::Context
default_	include/CL/cl2.hpp	/^    static CommandQueue default_;$/;"	m	class:cl::CommandQueue
default_	include/CL/cl2.hpp	/^    static Context default_;$/;"	m	class:cl::Context
default_	include/CL/cl2.hpp	/^    static Device default_;$/;"	m	class:cl::Device
default_	include/CL/cl2.hpp	/^    static Platform default_;$/;"	m	class:cl::Platform
default_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ CommandQueue CommandQueue::default_;$/;"	m	class:cl::CommandQueue
default_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ Context Context::default_;$/;"	m	class:cl::Context
default_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ Device Device::default_;$/;"	m	class:cl::Device
default_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ Platform Platform::default_;$/;"	m	class:cl::Platform
default_config_id	arm_compute/core/CL/CLTypes.h	/^static const std::string default_config_id = "no_config_id";$/;"	m	namespace:arm_compute
default_error_	include/CL/cl.hpp	/^    static volatile cl_int default_error_;$/;"	m	class:cl::CommandQueue
default_error_	include/CL/cl.hpp	/^    static volatile cl_int default_error_;$/;"	m	class:cl::Context
default_error_	include/CL/cl.hpp	/^__attribute__((weak)) volatile cl_int CommandQueue::default_error_ = CL_SUCCESS;$/;"	m	class:cl::CommandQueue
default_error_	include/CL/cl.hpp	/^__attribute__((weak)) volatile cl_int Context::default_error_ = CL_SUCCESS;$/;"	m	class:cl::Context
default_error_	include/CL/cl.hpp	/^__declspec(selectany) volatile cl_int CommandQueue::default_error_ = CL_SUCCESS;$/;"	m	class:cl::CommandQueue
default_error_	include/CL/cl.hpp	/^__declspec(selectany) volatile cl_int Context::default_error_ = CL_SUCCESS;$/;"	m	class:cl::Context
default_error_	include/CL/cl2.hpp	/^    static cl_int default_error_;$/;"	m	class:cl::CommandQueue
default_error_	include/CL/cl2.hpp	/^    static cl_int default_error_;$/;"	m	class:cl::Context
default_error_	include/CL/cl2.hpp	/^    static cl_int default_error_;$/;"	m	class:cl::Device
default_error_	include/CL/cl2.hpp	/^    static cl_int default_error_;$/;"	m	class:cl::Platform
default_error_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ cl_int CommandQueue::default_error_ = CL_SUCCESS;$/;"	m	class:cl::CommandQueue
default_error_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ cl_int Context::default_error_ = CL_SUCCESS;$/;"	m	class:cl::Context
default_error_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ cl_int Device::default_error_ = CL_SUCCESS;$/;"	m	class:cl::Device
default_error_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ cl_int Platform::default_error_ = CL_SUCCESS;$/;"	m	class:cl::Platform
default_init	arm_compute/runtime/CL/CLScheduler.h	/^    void default_init(ICLTuner *cl_tuner = nullptr)$/;"	f	class:arm_compute::CLScheduler
default_init	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^void GCScheduler::default_init()$/;"	f	class:GCScheduler
default_initialize_backends	src/graph/detail/ExecutionHelpers.cpp	/^void default_initialize_backends()$/;"	f	namespace:arm_compute::graph::detail
default_initialized_	include/CL/cl.hpp	/^    static volatile int default_initialized_;$/;"	m	class:cl::CommandQueue
default_initialized_	include/CL/cl.hpp	/^    static volatile int default_initialized_;$/;"	m	class:cl::Context
default_initialized_	include/CL/cl.hpp	/^__attribute__((weak)) volatile int CommandQueue::default_initialized_ = __DEFAULT_NOT_INITIALIZED;$/;"	m	class:cl::CommandQueue
default_initialized_	include/CL/cl.hpp	/^__attribute__((weak)) volatile int Context::default_initialized_ = __DEFAULT_NOT_INITIALIZED;$/;"	m	class:cl::Context
default_initialized_	include/CL/cl.hpp	/^__declspec(selectany) volatile int CommandQueue::default_initialized_ = __DEFAULT_NOT_INITIALIZED;$/;"	m	class:cl::CommandQueue
default_initialized_	include/CL/cl.hpp	/^__declspec(selectany) volatile int Context::default_initialized_ = __DEFAULT_NOT_INITIALIZED;$/;"	m	class:cl::Context
default_initialized_	include/CL/cl2.hpp	/^    static std::once_flag default_initialized_;$/;"	m	class:cl::CommandQueue
default_initialized_	include/CL/cl2.hpp	/^    static std::once_flag default_initialized_;$/;"	m	class:cl::Context
default_initialized_	include/CL/cl2.hpp	/^    static std::once_flag default_initialized_;$/;"	m	class:cl::Device
default_initialized_	include/CL/cl2.hpp	/^    static std::once_flag default_initialized_;$/;"	m	class:cl::Platform
default_initialized_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ std::once_flag CommandQueue::default_initialized_;$/;"	m	class:cl::CommandQueue
default_initialized_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ std::once_flag Context::default_initialized_;$/;"	m	class:cl::Context
default_initialized_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ std::once_flag Device::default_initialized_;$/;"	m	class:cl::Device
default_initialized_	include/CL/cl2.hpp	/^CL_HPP_DEFINE_STATIC_MEMBER_ std::once_flag Platform::default_initialized_;$/;"	m	class:cl::Platform
default_ndrange	src/core/CL/CLKernelLibrary.cpp	/^cl::NDRange CLKernelLibrary::default_ndrange() const$/;"	f	class:CLKernelLibrary
default_visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::default_visit()$/;"	f	class:arm_compute::graph::DotGraphVisitor
deleteLink	documentation/navtree.js	/^function deleteLink()$/;"	f
delta_bilinear_c1	arm_compute/core/Helpers.h	/^inline T delta_bilinear_c1(const T *pixel_ptr, size_t stride, float dx, float dy)$/;"	f	namespace:arm_compute
delta_linear_c1_x	arm_compute/core/Helpers.h	/^inline T delta_linear_c1_x(const T *pixel_ptr, float dx)$/;"	f	namespace:arm_compute
delta_linear_c1_y	arm_compute/core/Helpers.h	/^inline T delta_linear_c1_y(const T *pixel_ptr, size_t stride, float dy)$/;"	f	namespace:arm_compute
depth__convert_8cl	documentation/depth__convert_8cl.js	/^var depth__convert_8cl =$/;"	v
depth_concat	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^void depth_concat(const ITensor *in, ITensor *out, std::pair<int, int> start_xy, int depth_offset, const Window &window)$/;"	f	namespace:__anon252
depth_convert	tests/validation/reference/DepthConvertLayer.cpp	/^SimpleTensor<T2> depth_convert(const SimpleTensor<T1> &src, DataType dt_out, ConvertPolicy policy, uint32_t shift)$/;"	f	namespace:arm_compute::test::validation::reference
depth_multipliers	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^const auto depth_multipliers = framework::dataset::make("DepthMultiplier", { 1, 2, 3 });$/;"	m	namespace:arm_compute::test::validation::__anon410	file:
depth_multipliers	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^const auto depth_multipliers = framework::dataset::make("DepthMultiplier", { 1, 2, 3 });$/;"	m	namespace:arm_compute::test::validation::__anon458	file:
depth_multipliers	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^const auto depth_multipliers = framework::dataset::make("DepthMultiplier", { 1, 2, 3 });$/;"	m	namespace:arm_compute::test::validation::__anon484	file:
depthconcatenate_layer	tests/validation/reference/DepthConcatenateLayer.cpp	/^SimpleTensor<T> depthconcatenate_layer(const std::vector<SimpleTensor<T>> &srcs)$/;"	f	namespace:arm_compute::test::validation::reference
depthwise	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^namespace depthwise$/;"	n
depthwise	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^namespace depthwise$/;"	n
depthwise	arm_compute/core/NEON/kernels/convolution/depthwise/impl_fp32_fp32.hpp	/^namespace depthwise$/;"	n
depthwise	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^namespace depthwise$/;"	n	file:
depthwise	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^namespace depthwise$/;"	n	file:
depthwise	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^namespace depthwise$/;"	n	file:
depthwise	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^namespace depthwise$/;"	n	file:
depthwise	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^namespace depthwise$/;"	n	file:
depthwise	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^namespace depthwise$/;"	n	file:
depthwise_conv_block_build	tests/networks/MobileNetNetwork.h	/^    void depthwise_conv_block_build(unsigned int idx, PadStrideInfo dwc_ps, PadStrideInfo conv_ps)$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
depthwise_conv_block_build	tests/networks/MobileNetV1Network.h	/^    void depthwise_conv_block_build(unsigned int idx, PadStrideInfo dwc_ps, PadStrideInfo conv_ps)$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
depthwise_conv_block_init	tests/networks/MobileNetNetwork.h	/^    void depthwise_conv_block_init(unsigned int idx, unsigned int ifm, unsigned int ofm)$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
depthwise_conv_block_init	tests/networks/MobileNetV1Network.h	/^    void depthwise_conv_block_init(unsigned int idx, unsigned int ifm, unsigned int ofm)$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
depthwise_conv_block_run	tests/networks/MobileNetNetwork.h	/^    void depthwise_conv_block_run(unsigned int idx)$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
depthwise_conv_block_run	tests/networks/MobileNetV1Network.h	/^    void depthwise_conv_block_run(unsigned int idx)$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
depthwise_convolution	tests/validation/reference/DepthwiseConvolutionLayer.cpp	/^SimpleTensor<T> depthwise_convolution(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<TB> &biases, const TensorShape &dst_shape, const PadStrideInfo &conv_info,$/;"	f	namespace:arm_compute::test::validation::reference
depthwise_convolution	tests/validation/reference/DepthwiseConvolutionLayer.cpp	/^SimpleTensor<uint8_t> depthwise_convolution(const SimpleTensor<uint8_t> &src, const SimpleTensor<uint8_t> &weights, const SimpleTensor<int32_t> &biases, const TensorShape &dst_shape,$/;"	f	namespace:arm_compute::test::validation::reference
depthwise_convolution_method	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^DepthwiseConvolutionMethod DepthwiseConvolutionLayerNode::depthwise_convolution_method() const$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
depthwise_convolution_method_hint	arm_compute/graph/frontend/Types.h	/^    DepthwiseConvolutionMethod depthwise_convolution_method_hint = { DepthwiseConvolutionMethod::DEFAULT }; \/**< Depthwise Convolution method hint *\/$/;"	m	struct:arm_compute::graph::frontend::StreamHints
depthwise_separable_convolution_layer	tests/validation/reference/DepthwiseSeparableConvolutionLayer.cpp	/^SimpleTensor<T> depthwise_separable_convolution_layer(const SimpleTensor<T> &src, const SimpleTensor<T> &depthwise_weights, const SimpleTensor<T> &depthwise_biases,$/;"	f	namespace:arm_compute::test::validation::reference
dequantization__layer_8cl	documentation/dequantization__layer_8cl.js	/^var dequantization__layer_8cl =$/;"	v
dequantization_layer	tests/validation/reference/DequantizationLayer.cpp	/^SimpleTensor<float> dequantization_layer(const SimpleTensor<T> &src, const SimpleTensor<float> &min_max)$/;"	f	namespace:arm_compute::test::validation::reference
dequantize	arm_compute/core/Types.h	/^    float dequantize(qasymm8_t value) const$/;"	f	struct:arm_compute::QuantizationInfo
derivative	tests/validation/reference/Derivative.cpp	/^std::pair<SimpleTensor<T>, SimpleTensor<T>> derivative(const SimpleTensor<U> &src, BorderMode border_mode, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	namespace:arm_compute::test::validation::reference
derivative_8cl	documentation/derivative_8cl.js	/^var derivative_8cl =$/;"	v
derivative_x	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^void NEDerivativeKernel::derivative_x(const Window &window)$/;"	f	class:NEDerivativeKernel
derivative_xy	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^void NEDerivativeKernel::derivative_xy(const Window &window)$/;"	f	class:NEDerivativeKernel
derivative_y	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^void NEDerivativeKernel::derivative_y(const Window &window)$/;"	f	class:NEDerivativeKernel
desc	src/graph/Tensor.cpp	/^TensorDescriptor &Tensor::desc()$/;"	f	class:arm_compute::graph::Tensor
desc	src/graph/Tensor.cpp	/^const TensorDescriptor &Tensor::desc() const$/;"	f	class:arm_compute::graph::Tensor
description	tests/datasets/BatchNormalizationLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
description	tests/datasets/ChannelShuffleLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ChannelShuffleLayerDataset::iterator
description	tests/datasets/ConvolutionLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
description	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
description	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
description	tests/datasets/FullyConnectedLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
description	tests/datasets/GEMMDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::GEMMDataset::iterator
description	tests/datasets/GEMMLowpDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
description	tests/datasets/HOGDescriptorDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::HOGDescriptorDataset::iterator
description	tests/datasets/HOGMultiDetectionDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
description	tests/datasets/ImageFileDatasets.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ImageFileDataset::iterator
description	tests/datasets/LSTMLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
description	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset::iterator
description	tests/datasets/OpticalFlowDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
description	tests/datasets/PoolingLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::PoolingLayerDataset::iterator
description	tests/datasets/RNNLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
description	tests/datasets/ROIPoolingLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
description	tests/datasets/ReshapeLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ReshapeLayerDataset::iterator
description	tests/datasets/ScaleLayerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
description	tests/datasets/ThresholdDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::ThresholdDataset::iterator
description	tests/datasets/WinogradInputTransformDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::WinogradInputTransformDataset::iterator
description	tests/datasets/WinogradOutputTransformDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::datasets::WinogradOutputTransformDataset::iterator
description	tests/framework/datasets/CartesianProductDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
description	tests/framework/datasets/ContainerDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::ContainerDataset::iterator
description	tests/framework/datasets/InitializerListDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
description	tests/framework/datasets/JoinDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
description	tests/framework/datasets/RangeDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
description	tests/framework/datasets/SingletonDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::SingletonDataset::iterator
description	tests/framework/datasets/ZipDataset.h	/^        std::string description() const$/;"	f	struct:arm_compute::test::framework::dataset::ZipDataset::iterator
descriptor	src/core/CL/ICLHOG.cpp	/^float *ICLHOG::descriptor() const$/;"	f	class:ICLHOG
descriptor	src/runtime/HOG.cpp	/^float *HOG::descriptor() const$/;"	f	class:HOG
descriptor_size	src/core/HOGInfo.cpp	/^size_t HOGInfo::descriptor_size() const$/;"	f	class:HOGInfo
destroy	include/CL/cl2.hpp	/^    void destroy(U* p)$/;"	f	class:cl::SVMAllocator
detail	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^namespace detail$/;"	n	namespace:arm_compute
detail	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^namespace detail$/;"	n	namespace:arm_compute
detail	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^namespace detail$/;"	n	namespace:arm_compute
detail	arm_compute/core/Validate.h	/^namespace detail$/;"	n	namespace:arm_compute
detail	arm_compute/core/utils/misc/Signal.h	/^namespace detail$/;"	n	namespace:arm_compute::utils::signal
detail	arm_compute/core/utils/misc/Utility.h	/^namespace detail$/;"	n	namespace:arm_compute::utility
detail	arm_compute/graph/algorithms/BFS.h	/^namespace detail$/;"	n	namespace:arm_compute::graph
detail	arm_compute/graph/backends/BackendRegistrar.h	/^namespace detail$/;"	n	namespace:arm_compute::graph::backends
detail	arm_compute/graph/backends/ValidateHelpers.h	/^namespace detail$/;"	n	namespace:arm_compute::graph::backends
detail	arm_compute/graph/detail/CrossLayerMemoryManagerHelpers.h	/^namespace detail$/;"	n	namespace:arm_compute::graph
detail	arm_compute/graph/detail/ExecutionHelpers.h	/^namespace detail$/;"	n	namespace:arm_compute::graph
detail	arm_compute/graph/mutators/NodeFusionMutator.h	/^namespace detail$/;"	n	namespace:arm_compute::graph
detail	include/CL/cl.hpp	/^namespace detail {$/;"	n	namespace:cl
detail	include/CL/cl.hpp	/^namespace detail$/;"	n	namespace:cl
detail	include/CL/cl2.hpp	/^    namespace detail {$/;"	n	namespace:cl
detail	include/CL/cl2.hpp	/^namespace detail {$/;"	n	namespace:cl
detail	include/CL/cl2.hpp	/^namespace detail$/;"	n	namespace:cl
detail	include/half/half.hpp	/^	namespace detail$/;"	n
detail	include/half/half.hpp	/^	namespace detail$/;"	n	namespace:half_float
detail	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^namespace detail$/;"	n	namespace:arm_compute::graph	file:
detail	src/graph/detail/ExecutionHelpers.cpp	/^namespace detail$/;"	n	namespace:arm_compute::graph	file:
detail	src/graph/mutators/NodeFusionMutator.cpp	/^namespace detail$/;"	n	namespace:arm_compute::graph	file:
detail	tests/framework/Asserts.h	/^namespace detail$/;"	n	namespace:arm_compute::test::framework
detail	tests/framework/Registrars.h	/^namespace detail$/;"	n	namespace:arm_compute::test::framework
detail	tests/framework/Utils.h	/^namespace detail$/;"	n	namespace:arm_compute::test::framework
detail	tests/validation/FixedPoint.h	/^namespace detail$/;"	n	namespace:arm_compute::test::fixed_point_arithmetic
detail	tests/validation/reference/Convolution3d.h	/^namespace detail$/;"	n	namespace:arm_compute::test::convolution_3d
detection_window_size	src/core/HOGInfo.cpp	/^const Size2D &HOGInfo::detection_window_size() const$/;"	f	class:HOGInfo
detection_windows_non_maxima_suppression	tests/validation/reference/HOGMultiDetection.cpp	/^void detection_windows_non_maxima_suppression(std::vector<DetectionWindow> &multi_windows, float min_distance)$/;"	f	namespace:arm_compute::test::validation::reference
device_supports_extension	src/core/CL/CLHelpers.cpp	/^bool device_supports_extension(const cl::Device &device, const char *extension_name)$/;"	f	namespace:arm_compute
difference_type	include/CL/cl2.hpp	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:cl::SVMAllocator
dilate	tests/validation/reference/Dilate.cpp	/^SimpleTensor<T> dilate(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
dilate_8cl	documentation/dilate_8cl.js	/^var dilate_8cl =$/;"	v
dimensions	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    size_t dimensions() const$/;"	f	class:arm_compute::gles::NDRange
dimensions	include/CL/cl.hpp	/^    ::size_t dimensions() const { return dimensions_; }$/;"	f	class:cl::NDRange
dimensions	include/CL/cl2.hpp	/^    size_type dimensions() const $/;"	f	class:cl::NDRange
dimensions	src/core/IDistribution1D.cpp	/^size_t IDistribution1D::dimensions() const$/;"	f	class:IDistribution1D
dimensions_	include/CL/cl.hpp	/^    cl_uint dimensions_;$/;"	m	class:cl::NDRange
dimensions_	include/CL/cl2.hpp	/^    cl_uint dimensions_;$/;"	m	class:cl::NDRange
dir_0538a82dae0483a21d0f1e9d7e0a45c6	documentation/dir_0538a82dae0483a21d0f1e9d7e0a45c6.js	/^var dir_0538a82dae0483a21d0f1e9d7e0a45c6 =$/;"	v
dir_0c108762cda89b68d4571cbbabdf46df	documentation/dir_0c108762cda89b68d4571cbbabdf46df.js	/^var dir_0c108762cda89b68d4571cbbabdf46df =$/;"	v
dir_0cc2cfaf817de5fd0d308f8b2b47cf4a	documentation/dir_0cc2cfaf817de5fd0d308f8b2b47cf4a.js	/^var dir_0cc2cfaf817de5fd0d308f8b2b47cf4a =$/;"	v
dir_0dd7887818bb8d90732685575a13f58a	documentation/dir_0dd7887818bb8d90732685575a13f58a.js	/^var dir_0dd7887818bb8d90732685575a13f58a =$/;"	v
dir_0f1ff859406f1a8b0006aceabacdc4c4	documentation/dir_0f1ff859406f1a8b0006aceabacdc4c4.js	/^var dir_0f1ff859406f1a8b0006aceabacdc4c4 =$/;"	v
dir_154b7715c8b805d6c07751152e8bda26	documentation/dir_154b7715c8b805d6c07751152e8bda26.js	/^var dir_154b7715c8b805d6c07751152e8bda26 =$/;"	v
dir_1633709b037eda5b8477677909f78129	documentation/dir_1633709b037eda5b8477677909f78129.js	/^var dir_1633709b037eda5b8477677909f78129 =$/;"	v
dir_184f72a532a521c8d66e76d860c2010a	documentation/dir_184f72a532a521c8d66e76d860c2010a.js	/^var dir_184f72a532a521c8d66e76d860c2010a =$/;"	v
dir_1fb090f0c6070330bfaccc4236d3ca0d	documentation/dir_1fb090f0c6070330bfaccc4236d3ca0d.js	/^var dir_1fb090f0c6070330bfaccc4236d3ca0d =$/;"	v
dir_214608ef36d61442cb2b0c1c4e9a7def	documentation/dir_214608ef36d61442cb2b0c1c4e9a7def.js	/^var dir_214608ef36d61442cb2b0c1c4e9a7def =$/;"	v
dir_23221f641cabea68e0f604f0420281b4	documentation/dir_23221f641cabea68e0f604f0420281b4.js	/^var dir_23221f641cabea68e0f604f0420281b4 =$/;"	v
dir_251c63bc3f70b60acf43edd6d870a3ef	documentation/dir_251c63bc3f70b60acf43edd6d870a3ef.js	/^var dir_251c63bc3f70b60acf43edd6d870a3ef =$/;"	v
dir_25885286e9dad4fa105b7b25a8031bbf	documentation/dir_25885286e9dad4fa105b7b25a8031bbf.js	/^var dir_25885286e9dad4fa105b7b25a8031bbf =$/;"	v
dir_2af5ba73c22f603fb662b4c21cfc8574	documentation/dir_2af5ba73c22f603fb662b4c21cfc8574.js	/^var dir_2af5ba73c22f603fb662b4c21cfc8574 =$/;"	v
dir_2c3c4cb85e732569e2614ad40a451d53	documentation/dir_2c3c4cb85e732569e2614ad40a451d53.js	/^var dir_2c3c4cb85e732569e2614ad40a451d53 =$/;"	v
dir_2ce15eaea275a277c2370049ea836e06	documentation/dir_2ce15eaea275a277c2370049ea836e06.js	/^var dir_2ce15eaea275a277c2370049ea836e06 =$/;"	v
dir_2dfba1021aeb15d8e1228add590b046a	documentation/dir_2dfba1021aeb15d8e1228add590b046a.js	/^var dir_2dfba1021aeb15d8e1228add590b046a =$/;"	v
dir_315f6cf1ec0b2df3ae747ff8286a19f5	documentation/dir_315f6cf1ec0b2df3ae747ff8286a19f5.js	/^var dir_315f6cf1ec0b2df3ae747ff8286a19f5 =$/;"	v
dir_345bd7154d1542d1e03fd2836959a19d	documentation/dir_345bd7154d1542d1e03fd2836959a19d.js	/^var dir_345bd7154d1542d1e03fd2836959a19d =$/;"	v
dir_36bd1941057d7130e210a25993eacc69	documentation/dir_36bd1941057d7130e210a25993eacc69.js	/^var dir_36bd1941057d7130e210a25993eacc69 =$/;"	v
dir_36fc908da539caaba46833e40038b859	documentation/dir_36fc908da539caaba46833e40038b859.js	/^var dir_36fc908da539caaba46833e40038b859 =$/;"	v
dir_3cbe5b6455504b72bdad57647abe41ab	documentation/dir_3cbe5b6455504b72bdad57647abe41ab.js	/^var dir_3cbe5b6455504b72bdad57647abe41ab =$/;"	v
dir_4165fcd8206cc52fde421ae1f1275b40	documentation/dir_4165fcd8206cc52fde421ae1f1275b40.js	/^var dir_4165fcd8206cc52fde421ae1f1275b40 =$/;"	v
dir_420d2db1b9c99f59825a3985434c3703	documentation/dir_420d2db1b9c99f59825a3985434c3703.js	/^var dir_420d2db1b9c99f59825a3985434c3703 =$/;"	v
dir_445738e6fed662d0b65e690e3f1e1de0	documentation/dir_445738e6fed662d0b65e690e3f1e1de0.js	/^var dir_445738e6fed662d0b65e690e3f1e1de0 =$/;"	v
dir_445738e6fed662d0b65e690e3f1e1de0.xhtml	documentation/navtreeindex42.js	/^"dir_445738e6fed662d0b65e690e3f1e1de0.xhtml":[6,0,4,4],$/;"	p	class:NAVTREEINDEX42
dir_46fdb196cebdbffe77dac340cde62f29	documentation/dir_46fdb196cebdbffe77dac340cde62f29.js	/^var dir_46fdb196cebdbffe77dac340cde62f29 =$/;"	v
dir_4da487531dc5bdc76b523c9e82b781b1	documentation/dir_4da487531dc5bdc76b523c9e82b781b1.js	/^var dir_4da487531dc5bdc76b523c9e82b781b1 =$/;"	v
dir_4dbf711d3d3ef9d1292a532e836709c1	documentation/dir_4dbf711d3d3ef9d1292a532e836709c1.js	/^var dir_4dbf711d3d3ef9d1292a532e836709c1 =$/;"	v
dir_4efd0ee2ecda32567e74991b08d544ea	documentation/dir_4efd0ee2ecda32567e74991b08d544ea.js	/^var dir_4efd0ee2ecda32567e74991b08d544ea =$/;"	v
dir_4f17730e234c0f44aa1a4a309fc35bea	documentation/dir_4f17730e234c0f44aa1a4a309fc35bea.js	/^var dir_4f17730e234c0f44aa1a4a309fc35bea =$/;"	v
dir_4f2df8950dc650bf7cf9176fae02facc	documentation/dir_4f2df8950dc650bf7cf9176fae02facc.js	/^var dir_4f2df8950dc650bf7cf9176fae02facc =$/;"	v
dir_4fe3055359cf5438733b5e64b064b197	documentation/dir_4fe3055359cf5438733b5e64b064b197.js	/^var dir_4fe3055359cf5438733b5e64b064b197 =$/;"	v
dir_50b23570393db6a4ca8647d7d5ff6dbe	documentation/dir_50b23570393db6a4ca8647d7d5ff6dbe.js	/^var dir_50b23570393db6a4ca8647d7d5ff6dbe =$/;"	v
dir_541ebbb21ca179b54b469d645ff46bd9	documentation/dir_541ebbb21ca179b54b469d645ff46bd9.js	/^var dir_541ebbb21ca179b54b469d645ff46bd9 =$/;"	v
dir_550bba389faad7f08ae5a13c29129f99	documentation/dir_550bba389faad7f08ae5a13c29129f99.js	/^var dir_550bba389faad7f08ae5a13c29129f99 =$/;"	v
dir_5815af820a9cc9481f1d0990a0d60286	documentation/dir_5815af820a9cc9481f1d0990a0d60286.js	/^var dir_5815af820a9cc9481f1d0990a0d60286 =$/;"	v
dir_59425e443f801f1f2fd8bbe4959a3ccf	documentation/dir_59425e443f801f1f2fd8bbe4959a3ccf.js	/^var dir_59425e443f801f1f2fd8bbe4959a3ccf =$/;"	v
dir_59b2231210c554f4cc243709030bf1f8	documentation/dir_59b2231210c554f4cc243709030bf1f8.js	/^var dir_59b2231210c554f4cc243709030bf1f8 =$/;"	v
dir_6013eaf2dfd46ef85ec5f8d403ae0adb	documentation/dir_6013eaf2dfd46ef85ec5f8d403ae0adb.js	/^var dir_6013eaf2dfd46ef85ec5f8d403ae0adb =$/;"	v
dir_65e289039e1347f87d412b0a1b1a312c	documentation/dir_65e289039e1347f87d412b0a1b1a312c.js	/^var dir_65e289039e1347f87d412b0a1b1a312c =$/;"	v
dir_68267d1309a1af8e8297ef4c3efbcdba	documentation/dir_68267d1309a1af8e8297ef4c3efbcdba.js	/^var dir_68267d1309a1af8e8297ef4c3efbcdba =$/;"	v
dir_68cb0bded1cc5601c88ddaacbb31e482	documentation/dir_68cb0bded1cc5601c88ddaacbb31e482.js	/^var dir_68cb0bded1cc5601c88ddaacbb31e482 =$/;"	v
dir_6b58bd0be07bddcf3022ab9b026cbf38	documentation/dir_6b58bd0be07bddcf3022ab9b026cbf38.js	/^var dir_6b58bd0be07bddcf3022ab9b026cbf38 =$/;"	v
dir_6fc87decd8cffc07e5f49c197ca3de10	documentation/dir_6fc87decd8cffc07e5f49c197ca3de10.js	/^var dir_6fc87decd8cffc07e5f49c197ca3de10 =$/;"	v
dir_7365e77196b52ca311bb83f181e59b8c	documentation/dir_7365e77196b52ca311bb83f181e59b8c.js	/^var dir_7365e77196b52ca311bb83f181e59b8c =$/;"	v
dir_7484b841a86f2d7fdd057c9b24fbf230	documentation/dir_7484b841a86f2d7fdd057c9b24fbf230.js	/^var dir_7484b841a86f2d7fdd057c9b24fbf230 =$/;"	v
dir_7526be4d1cfecb7bc660fdbdb8633223	documentation/dir_7526be4d1cfecb7bc660fdbdb8633223.js	/^var dir_7526be4d1cfecb7bc660fdbdb8633223 =$/;"	v
dir_7b0825b7536eda12b63e5d87347b1c7d	documentation/dir_7b0825b7536eda12b63e5d87347b1c7d.js	/^var dir_7b0825b7536eda12b63e5d87347b1c7d =$/;"	v
dir_7d9e792b56b44fd84901d9e18064c5a8	documentation/dir_7d9e792b56b44fd84901d9e18064c5a8.js	/^var dir_7d9e792b56b44fd84901d9e18064c5a8 =$/;"	v
dir_896191444cf08ec8ade6f88256cb2bdd	documentation/dir_896191444cf08ec8ade6f88256cb2bdd.js	/^var dir_896191444cf08ec8ade6f88256cb2bdd =$/;"	v
dir_8bc26130589aa16388b5a02f17abf2c2	documentation/dir_8bc26130589aa16388b5a02f17abf2c2.js	/^var dir_8bc26130589aa16388b5a02f17abf2c2 =$/;"	v
dir_8c278f79c760e5c5fbd911f9870614c1	documentation/dir_8c278f79c760e5c5fbd911f9870614c1.js	/^var dir_8c278f79c760e5c5fbd911f9870614c1 =$/;"	v
dir_99ae3712d1eecd2a93fc4d38b59a99ba	documentation/dir_99ae3712d1eecd2a93fc4d38b59a99ba.js	/^var dir_99ae3712d1eecd2a93fc4d38b59a99ba =$/;"	v
dir_9b109a3838d873f4037ee21889a49db8	documentation/dir_9b109a3838d873f4037ee21889a49db8.js	/^var dir_9b109a3838d873f4037ee21889a49db8 =$/;"	v
dir_9e71e2da941d3cafc4d98a9f6ae3de4f	documentation/dir_9e71e2da941d3cafc4d98a9f6ae3de4f.js	/^var dir_9e71e2da941d3cafc4d98a9f6ae3de4f =$/;"	v
dir_9eca3c725728e372597fcd0d17c1ea0f	documentation/dir_9eca3c725728e372597fcd0d17c1ea0f.js	/^var dir_9eca3c725728e372597fcd0d17c1ea0f =$/;"	v
dir_aebb8dcc11953d78e620bbef0b9e2183	documentation/dir_aebb8dcc11953d78e620bbef0b9e2183.js	/^var dir_aebb8dcc11953d78e620bbef0b9e2183 =$/;"	v
dir_b19d819d13c0f52aff9af701145a9252	documentation/dir_b19d819d13c0f52aff9af701145a9252.js	/^var dir_b19d819d13c0f52aff9af701145a9252 =$/;"	v
dir_b2d75812ef27339cb07aa08923a4a042	documentation/dir_b2d75812ef27339cb07aa08923a4a042.js	/^var dir_b2d75812ef27339cb07aa08923a4a042 =$/;"	v
dir_b30607d43e07fadf88f4c95a88a6c88e	documentation/dir_b30607d43e07fadf88f4c95a88a6c88e.js	/^var dir_b30607d43e07fadf88f4c95a88a6c88e =$/;"	v
dir_b496024afd63bafbf4e8da80d7d3a81a	documentation/dir_b496024afd63bafbf4e8da80d7d3a81a.js	/^var dir_b496024afd63bafbf4e8da80d7d3a81a =$/;"	v
dir_b88a6d23833cc7e200916be8af5e3057	documentation/dir_b88a6d23833cc7e200916be8af5e3057.js	/^var dir_b88a6d23833cc7e200916be8af5e3057 =$/;"	v
dir_b986aa98f9b6490bb4fc7918500346fb	documentation/dir_b986aa98f9b6490bb4fc7918500346fb.js	/^var dir_b986aa98f9b6490bb4fc7918500346fb =$/;"	v
dir_bd82036549cb2b9c5b3542d0a5df616a	documentation/dir_bd82036549cb2b9c5b3542d0a5df616a.js	/^var dir_bd82036549cb2b9c5b3542d0a5df616a =$/;"	v
dir_cab437ca4f6ec1fbc573ae83f91b2654	documentation/dir_cab437ca4f6ec1fbc573ae83f91b2654.js	/^var dir_cab437ca4f6ec1fbc573ae83f91b2654 =$/;"	v
dir_cbdb8362360e11eafe2fa3bc74cf0ffd	documentation/dir_cbdb8362360e11eafe2fa3bc74cf0ffd.js	/^var dir_cbdb8362360e11eafe2fa3bc74cf0ffd =$/;"	v
dir_d03e69479d487ec17de4c74c8d185b2d	documentation/dir_d03e69479d487ec17de4c74c8d185b2d.js	/^var dir_d03e69479d487ec17de4c74c8d185b2d =$/;"	v
dir_d247c927d0dc22626cf668ab2bd7f080	documentation/dir_d247c927d0dc22626cf668ab2bd7f080.js	/^var dir_d247c927d0dc22626cf668ab2bd7f080 =$/;"	v
dir_d28a4824dc47e487b107a5db32ef43c4	documentation/dir_d28a4824dc47e487b107a5db32ef43c4.js	/^var dir_d28a4824dc47e487b107a5db32ef43c4 =$/;"	v
dir_e31c3eb8a08c20d742288af67200e09f	documentation/dir_e31c3eb8a08c20d742288af67200e09f.js	/^var dir_e31c3eb8a08c20d742288af67200e09f =$/;"	v
dir_e575b855d3e83e3374bc2a6f9bf89d98	documentation/dir_e575b855d3e83e3374bc2a6f9bf89d98.js	/^var dir_e575b855d3e83e3374bc2a6f9bf89d98 =$/;"	v
dir_e7c7b16542faa38cb4655ff1750d3604	documentation/dir_e7c7b16542faa38cb4655ff1750d3604.js	/^var dir_e7c7b16542faa38cb4655ff1750d3604 =$/;"	v
dir_e83fa7cb9796f3ad7be03e3d9fcd3249	documentation/dir_e83fa7cb9796f3ad7be03e3d9fcd3249.js	/^var dir_e83fa7cb9796f3ad7be03e3d9fcd3249 =$/;"	v
dir_ec05701f68bea22653d08da5856c9ffc	documentation/dir_ec05701f68bea22653d08da5856c9ffc.js	/^var dir_ec05701f68bea22653d08da5856c9ffc =$/;"	v
dir_f7024513cd67abef53e86ee9382ac5ce	documentation/dir_f7024513cd67abef53e86ee9382ac5ce.js	/^var dir_f7024513cd67abef53e86ee9382ac5ce =$/;"	v
dir_f906bbebc596bc606d589ccb705e6595	documentation/dir_f906bbebc596bc606d589ccb705e6595.js	/^var dir_f906bbebc596bc606d589ccb705e6595 =$/;"	v
dir_fbdf7bf92663091dc4d5520df638c068	documentation/dir_fbdf7bf92663091dc4d5520df638c068.js	/^var dir_fbdf7bf92663091dc4d5520df638c068 =$/;"	v
dir_fe1af781eaa3d1f7e682840ac00bce9c	documentation/dir_fe1af781eaa3d1f7e682840ac00bce9c.js	/^var dir_fe1af781eaa3d1f7e682840ac00bce9c =$/;"	v
direct__convolution1x1_8cl	documentation/direct__convolution1x1_8cl.js	/^var direct__convolution1x1_8cl =$/;"	v
direct__convolution3x3_8cl	documentation/direct__convolution3x3_8cl.js	/^var direct__convolution3x3_8cl =$/;"	v
direct__convolution__1x1__3x3__5x5__quantized_8cl	documentation/direct__convolution__1x1__3x3__5x5__quantized_8cl.js	/^var direct__convolution__1x1__3x3__5x5__quantized_8cl =$/;"	v
discard_comments	tests/AssetsLibrary.cpp	/^void discard_comments(std::ifstream &fs)$/;"	f	namespace:arm_compute::test::__anon328
discard_comments	utils/Utils.cpp	/^void discard_comments(std::ifstream &fs)$/;"	f	namespace:arm_compute::utils::__anon551
discard_comments_and_spaces	tests/AssetsLibrary.cpp	/^void discard_comments_and_spaces(std::ifstream &fs)$/;"	f	namespace:arm_compute::test::__anon328
discard_comments_and_spaces	utils/Utils.cpp	/^void discard_comments_and_spaces(std::ifstream &fs)$/;"	f	namespace:arm_compute::utils::__anon551
disconnect	arm_compute/core/utils/misc/Signal.h	/^    void disconnect()$/;"	f	class:arm_compute::utils::signal::detail::SignalImpl
dispatch	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^void GCScheduler::dispatch(IGCKernel &kernel, bool flush)$/;"	f	class:GCScheduler
div	tests/validation/FixedPoint.h	/^    static fixed_point<T> div(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
div	tests/validation/FixedPoint.h	/^inline fixed_point<T> div(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
divides	include/half/half.hpp	/^			static expr divides(float x, float y) { return expr(x\/y); }$/;"	f	struct:detail::functions
do_map	src/runtime/CL/CLDistribution1D.cpp	/^uint32_t *CLDistribution1D::do_map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLDistribution1D
do_map	src/runtime/CL/CLHOG.cpp	/^uint8_t *CLHOG::do_map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLHOG
do_map	src/runtime/CL/CLLut.cpp	/^uint8_t *CLLut::do_map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLLut
do_map	src/runtime/CL/CLSubTensor.cpp	/^uint8_t *CLSubTensor::do_map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLSubTensor
do_map	src/runtime/CL/CLTensor.cpp	/^uint8_t *CLTensor::do_map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLTensor
do_map	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^uint8_t *GCTensor::do_map(bool blocking)$/;"	f	class:GCTensor
do_run	tests/framework/TestCase.h	/^    virtual void do_run() {};$/;"	f	class:arm_compute::test::framework::TestCase
do_run	utils/Utils.h	/^    virtual void do_run() {};$/;"	f	class:arm_compute::utils::Example
do_setup	tests/framework/TestCase.h	/^    virtual void do_setup() {};$/;"	f	class:arm_compute::test::framework::TestCase
do_setup	utils/Utils.h	/^    virtual void do_setup(int argc, char **argv) {};$/;"	f	class:arm_compute::utils::Example
do_sync	tests/framework/TestCase.h	/^    virtual void do_sync() {};$/;"	f	class:arm_compute::test::framework::TestCase
do_teardown	tests/framework/TestCase.h	/^    virtual void do_teardown() {};$/;"	f	class:arm_compute::test::framework::TestCase
do_teardown	utils/Utils.h	/^    virtual void do_teardown() {};$/;"	f	class:arm_compute::utils::Example
do_unmap	src/runtime/CL/CLDistribution1D.cpp	/^void CLDistribution1D::do_unmap(cl::CommandQueue &q)$/;"	f	class:CLDistribution1D
do_unmap	src/runtime/CL/CLHOG.cpp	/^void CLHOG::do_unmap(cl::CommandQueue &q)$/;"	f	class:CLHOG
do_unmap	src/runtime/CL/CLLut.cpp	/^void CLLut::do_unmap(cl::CommandQueue &q)$/;"	f	class:CLLut
do_unmap	src/runtime/CL/CLSubTensor.cpp	/^void CLSubTensor::do_unmap(cl::CommandQueue &q)$/;"	f	class:CLSubTensor
do_unmap	src/runtime/CL/CLTensor.cpp	/^void CLTensor::do_unmap(cl::CommandQueue &q)$/;"	f	class:CLTensor
do_unmap	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^void GCTensor::do_unmap()$/;"	f	class:GCTensor
done	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        bool done(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
draw_detection_rectangle	utils/Utils.cpp	/^void draw_detection_rectangle(ITensor *tensor, const DetectionWindow &rect, uint8_t r, uint8_t g, uint8_t b)$/;"	f	namespace:arm_compute::utils
dst_format	tests/validation/fixtures/ScharrFixture.h	/^    static const Format dst_format  = Format::S16;$/;"	m	struct:arm_compute::test::validation::__anon529::info
dst_format	tests/validation/fixtures/SobelFixture.h	/^    static const Format dst_format  = Format::S16;$/;"	m	struct:arm_compute::test::validation::__anon530::info
dst_format	tests/validation/fixtures/SobelFixture.h	/^    static const Format dst_format  = Format::S32;$/;"	m	struct:arm_compute::test::validation::__anon530::info
dummy	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    int16_t dummy; \/**< Dummy field, to make sure the data structure 128-bit align, so that GPU can use vload4 *\/$/;"	m	struct:arm_compute::CLOldValue
dummy	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    explicit dummy(ActivationLayerInfo act_info)$/;"	f	struct:arm_compute::detail::dummy
dummy	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^struct dummy$/;"	s	namespace:arm_compute::detail
dup__n_8h	documentation/dup__n_8h.js	/^var dup__n_8h =$/;"	v
duplicate	src/runtime/BlobMemoryPool.cpp	/^std::unique_ptr<IMemoryPool> BlobMemoryPool::duplicate()$/;"	f	class:BlobMemoryPool
duplicate	src/runtime/OffsetMemoryPool.cpp	/^std::unique_ptr<IMemoryPool> OffsetMemoryPool::duplicate()$/;"	f	class:OffsetMemoryPool
edge	src/graph/Graph.cpp	/^Edge *Graph::edge(EdgeID id)$/;"	f	class:arm_compute::graph::Graph
edge	src/graph/Graph.cpp	/^const Edge *Graph::edge(EdgeID id) const$/;"	f	class:arm_compute::graph::Graph
edge_trace_U8_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void edge_trace_U8_U8(uint8_t *__restrict input, uint8_t *__restrict output, const int32_t input_stride, const int32_t output_stride)$/;"	f	namespace:__anon249
edge_trace_recursive_U8_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void edge_trace_recursive_U8_U8(uint8_t *__restrict in, uint8_t *__restrict out, const int32_t in_stride, const int32_t out_stride)$/;"	f	namespace:fp16
edge_trace_recursive_U8_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void edge_trace_recursive_U8_U8(uint8_t *__restrict input, uint8_t *__restrict output, const int32_t input_stride, const int32_t output_stride)$/;"	f	namespace:__anon249
edges	src/graph/Graph.cpp	/^const std::vector<std::unique_ptr<Edge>> &Graph::edges() const$/;"	f	class:arm_compute::graph::Graph
eglBindAPI	opengles-3.1-stubs/EGL.c	/^void eglBindAPI(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglBindAPI	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLBoolean EGLAPIENTRY eglBindAPI(EGLenum api)$/;"	f
eglBindTexImage	opengles-3.1-stubs/EGL.c	/^void eglBindTexImage(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglChooseConfig	opengles-3.1-stubs/EGL.c	/^void eglChooseConfig(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglChooseConfig	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLBoolean EGLAPIENTRY eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)$/;"	f
eglCopyBuffers	opengles-3.1-stubs/EGL.c	/^void eglCopyBuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglCreateContext	opengles-3.1-stubs/EGL.c	/^void eglCreateContext(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglCreateContext	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLContext EGLAPIENTRY eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)$/;"	f
eglCreateImageKHR	opengles-3.1-stubs/EGL.c	/^void eglCreateImageKHR (void) { PRINT_STUB_ERROR; return; }$/;"	f
eglCreatePbufferFromClientBuffer	opengles-3.1-stubs/EGL.c	/^void eglCreatePbufferFromClientBuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglCreatePbufferSurface	opengles-3.1-stubs/EGL.c	/^void eglCreatePbufferSurface(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglCreatePixmapSurface	opengles-3.1-stubs/EGL.c	/^void eglCreatePixmapSurface(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglCreateWindowSurface	opengles-3.1-stubs/EGL.c	/^void eglCreateWindowSurface(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglDestroyContext	opengles-3.1-stubs/EGL.c	/^void eglDestroyContext(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglDestroyContext	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLBoolean EGLAPIENTRY eglDestroyContext(EGLDisplay dpy, EGLContext ctx)$/;"	f
eglDestroyImageKHR	opengles-3.1-stubs/EGL.c	/^void eglDestroyImageKHR (void) { PRINT_STUB_ERROR; return; }$/;"	f
eglDestroySurface	opengles-3.1-stubs/EGL.c	/^void eglDestroySurface(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetConfigAttrib	opengles-3.1-stubs/EGL.c	/^void eglGetConfigAttrib(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetConfigs	opengles-3.1-stubs/EGL.c	/^void eglGetConfigs(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetCurrentContext	opengles-3.1-stubs/EGL.c	/^void eglGetCurrentContext(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetCurrentDisplay	opengles-3.1-stubs/EGL.c	/^void eglGetCurrentDisplay(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetCurrentSurface	opengles-3.1-stubs/EGL.c	/^void eglGetCurrentSurface(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetDisplay	opengles-3.1-stubs/EGL.c	/^void eglGetDisplay(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetDisplay	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLDisplay EGLAPIENTRY eglGetDisplay(EGLNativeDisplayType display_id)$/;"	f
eglGetError	opengles-3.1-stubs/EGL.c	/^void eglGetError(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetError	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLint EGLAPIENTRY eglGetError()$/;"	f
eglGetProcAddress	opengles-3.1-stubs/EGL.c	/^void eglGetProcAddress(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglGetProcAddress	src/core/GLES_COMPUTE/OpenGLES.cpp	/^__eglMustCastToProperFunctionPointerType EGLAPIENTRY eglGetProcAddress(const char *procname)$/;"	f
eglInitialize	opengles-3.1-stubs/EGL.c	/^void eglInitialize(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglInitialize	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLBoolean EGLAPIENTRY eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)$/;"	f
eglMakeCurrent	opengles-3.1-stubs/EGL.c	/^void eglMakeCurrent(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglMakeCurrent	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLBoolean EGLAPIENTRY eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)$/;"	f
eglQueryAPI	opengles-3.1-stubs/EGL.c	/^void eglQueryAPI(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglQueryContext	opengles-3.1-stubs/EGL.c	/^void eglQueryContext(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglQueryString	opengles-3.1-stubs/EGL.c	/^void eglQueryString(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglQueryString	src/core/GLES_COMPUTE/OpenGLES.cpp	/^char const *EGLAPIENTRY eglQueryString(EGLDisplay dpy, EGLint name)$/;"	f
eglQuerySurface	opengles-3.1-stubs/EGL.c	/^void eglQuerySurface(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglReleaseTexImage	opengles-3.1-stubs/EGL.c	/^void eglReleaseTexImage(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglReleaseThread	opengles-3.1-stubs/EGL.c	/^void eglReleaseThread(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglSurfaceAttrib	opengles-3.1-stubs/EGL.c	/^void eglSurfaceAttrib(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglSwapBuffers	opengles-3.1-stubs/EGL.c	/^void eglSwapBuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglSwapInterval	opengles-3.1-stubs/EGL.c	/^void eglSwapInterval(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglTerminate	opengles-3.1-stubs/EGL.c	/^void eglTerminate(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglTerminate	src/core/GLES_COMPUTE/OpenGLES.cpp	/^EGLBoolean EGLAPIENTRY eglTerminate(EGLDisplay dpy)$/;"	f
eglWaitClient	opengles-3.1-stubs/EGL.c	/^void eglWaitClient(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglWaitGL	opengles-3.1-stubs/EGL.c	/^void eglWaitGL(void) { PRINT_STUB_ERROR; return; }$/;"	f
eglWaitNative	opengles-3.1-stubs/EGL.c	/^void eglWaitNative(void) { PRINT_STUB_ERROR; return; }$/;"	f
element	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^inline float& Tensor4D<KernelShape, float>::element(int oc, int i, int j, int ic) const$/;"	f	class:Tensor4D
element	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^inline float& Tensor4D<Tensor4DShape, float>::element(int n, int i, int j, int c) const$/;"	f	class:Tensor4D
element_delim	arm_compute/core/Types.h	/^    std::string element_delim;$/;"	m	struct:arm_compute::HOGNormType::IOFormatInfo
element_shift	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int element_shift;           \/**< The number of bits to shift by for one element *\/$/;"	m	struct:ImageIterator
element_shift	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int element_shift;           \/**< The number of bits to shift by for one element *\/$/;"	m	struct:Tensor3DIterator
element_shift	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int element_shift;           \/**< The number of bits to shift by for one element *\/$/;"	m	struct:VectorIterator
element_size	tests/CL/CLAccessor.h	/^inline size_t CLAccessor::element_size() const$/;"	f	class:arm_compute::test::CLAccessor
element_size	tests/GLES_COMPUTE/GCAccessor.h	/^inline size_t GCAccessor::element_size() const$/;"	f	class:arm_compute::test::GCAccessor
element_size	tests/NEON/Accessor.h	/^inline size_t Accessor::element_size() const$/;"	f	class:arm_compute::test::Accessor
element_size	tests/SimpleTensor.h	/^size_t SimpleTensor<T>::element_size() const$/;"	f	class:arm_compute::test::SimpleTensor
element_size_from_data_type	arm_compute/core/Utils.h	/^inline size_t element_size_from_data_type(DataType dt)$/;"	f	namespace:arm_compute
eltwise_operation	src/graph/nodes/EltwiseLayerNode.cpp	/^EltwiseOperation EltwiseLayerNode::eltwise_operation() const$/;"	f	class:arm_compute::graph::EltwiseLayerNode
empty	arm_compute/core/Types.h	/^    bool empty() const$/;"	f	struct:arm_compute::QuantizationInfo
empty	arm_compute/core/Types.h	/^    constexpr bool empty() const$/;"	f	struct:arm_compute::BorderSize
empty	include/CL/cl.hpp	/^    bool empty (void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
enable	include/half/half.hpp	/^		template<typename T,typename,typename=void,typename=void> struct enable {};$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,expr,expr> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,expr,half> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,expr,void> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,half,expr> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,half,half> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,half,void> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,void,void> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,expr,expr> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,expr,half> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,expr,void> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,half,expr> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,half,half> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,half,void> { typedef T type; };$/;"	s	namespace:half_float
enable	include/half/half.hpp	/^		template<typename T> struct enable<T,half,void,void> { typedef T type; };$/;"	s	namespace:half_float
enableFineGrainedSystemSVM	include/CL/cl2.hpp	/^    cl_int enableFineGrainedSystemSVM(bool svmEnabled)$/;"	f	class:cl::Kernel
enable_bitwise_ops	arm_compute/core/GPUTarget.h	/^struct enable_bitwise_ops<arm_compute::GPUTarget>$/;"	s	class:arm_compute::GPUTarget
enable_bitwise_ops	arm_compute/core/Helpers.h	/^struct enable_bitwise_ops$/;"	s	namespace:arm_compute
enabled	arm_compute/core/Types.h	/^    bool enabled() const$/;"	f	class:arm_compute::HOGNormType::ActivationLayerInfo
end	arm_compute/core/Dimensions.h	/^    typename std::array<T, num_max_dimensions>::const_iterator end() const$/;"	f	class:arm_compute::Dimensions
end	arm_compute/core/Dimensions.h	/^    typename std::array<T, num_max_dimensions>::iterator end()$/;"	f	class:arm_compute::Dimensions
end	arm_compute/core/Types.h	/^    int end(unsigned int d) const$/;"	f	struct:arm_compute::ValidRegion
end	arm_compute/core/Window.h	/^        constexpr int end() const$/;"	f	class:arm_compute::Window::Dimension
end	arm_compute/core/utils/misc/Iterable.h	/^    typename T::reverse_iterator end()$/;"	f	class:arm_compute::utils::iterable::reverse_iterable
end	include/CL/cl.hpp	/^        static iterator end(const cl::vector<T,N> &vec)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
end	include/CL/cl.hpp	/^    iterator end(void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
end	include/CL/cl.hpp	/^    iterator end(void)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
end_color	tests/framework/printers/PrettyPrinter.cpp	/^std::string PrettyPrinter::end_color() const$/;"	f	class:arm_compute::test::framework::PrettyPrinter
end_lifetime	src/runtime/ISimpleLifetimeManager.cpp	/^void ISimpleLifetimeManager::end_lifetime(void *obj, void **handle, size_t size)$/;"	f	class:ISimpleLifetimeManager
endswith	arm_compute/core/utils/misc/Utility.h	/^inline bool endswith(const std::string &filename, const std::string &suffix)$/;"	f	namespace:arm_compute::utility
enqueue	src/core/CL/ICLKernel.cpp	/^void arm_compute::enqueue(cl::CommandQueue &queue, ICLKernel &kernel, const Window &window, const cl::NDRange &lws_hint)$/;"	f	class:arm_compute
enqueue	src/core/GLES_COMPUTE/IGCKernel.cpp	/^void arm_compute::enqueue(IGCKernel &kernel, const Window &window, const gles::NDRange &lws)$/;"	f	class:arm_compute
enqueue	src/runtime/CL/CLScheduler.cpp	/^void CLScheduler::enqueue(ICLKernel &kernel, bool flush)$/;"	f	class:CLScheduler
enqueueAcquireD3D10Objects	include/CL/cl.hpp	/^    cl_int enqueueAcquireD3D10Objects($/;"	f	class:cl::CommandQueue
enqueueAcquireD3D10Objects	include/CL/cl2.hpp	/^    cl_int enqueueAcquireD3D10Objects($/;"	f	class:cl::CommandQueue
enqueueAcquireGLObjects	include/CL/cl.hpp	/^    cl_int enqueueAcquireGLObjects($/;"	f	class:cl::CommandQueue
enqueueAcquireGLObjects	include/CL/cl2.hpp	/^    cl_int enqueueAcquireGLObjects($/;"	f	class:cl::CommandQueue
enqueueBarrierWithWaitList	include/CL/cl.hpp	/^    cl_int enqueueBarrierWithWaitList($/;"	f	class:cl::CommandQueue
enqueueBarrierWithWaitList	include/CL/cl2.hpp	/^    cl_int enqueueBarrierWithWaitList($/;"	f	class:cl::CommandQueue
enqueueCopyBuffer	include/CL/cl.hpp	/^    cl_int enqueueCopyBuffer($/;"	f	class:cl::CommandQueue
enqueueCopyBuffer	include/CL/cl.hpp	/^inline cl_int enqueueCopyBuffer($/;"	f	namespace:cl
enqueueCopyBuffer	include/CL/cl2.hpp	/^    cl_int enqueueCopyBuffer($/;"	f	class:cl::CommandQueue
enqueueCopyBuffer	include/CL/cl2.hpp	/^inline cl_int enqueueCopyBuffer($/;"	f	namespace:cl
enqueueCopyBufferRect	include/CL/cl.hpp	/^    cl_int enqueueCopyBufferRect($/;"	f	class:cl::CommandQueue
enqueueCopyBufferRect	include/CL/cl.hpp	/^inline cl_int enqueueCopyBufferRect($/;"	f	namespace:cl
enqueueCopyBufferRect	include/CL/cl2.hpp	/^    cl_int enqueueCopyBufferRect($/;"	f	class:cl::CommandQueue
enqueueCopyBufferRect	include/CL/cl2.hpp	/^inline cl_int enqueueCopyBufferRect($/;"	f	namespace:cl
enqueueCopyBufferToImage	include/CL/cl.hpp	/^    cl_int enqueueCopyBufferToImage($/;"	f	class:cl::CommandQueue
enqueueCopyBufferToImage	include/CL/cl.hpp	/^inline cl_int enqueueCopyBufferToImage($/;"	f	namespace:cl
enqueueCopyBufferToImage	include/CL/cl2.hpp	/^    cl_int enqueueCopyBufferToImage($/;"	f	class:cl::CommandQueue
enqueueCopyBufferToImage	include/CL/cl2.hpp	/^inline cl_int enqueueCopyBufferToImage($/;"	f	namespace:cl
enqueueCopyImage	include/CL/cl.hpp	/^    cl_int enqueueCopyImage($/;"	f	class:cl::CommandQueue
enqueueCopyImage	include/CL/cl.hpp	/^inline cl_int enqueueCopyImage($/;"	f	namespace:cl
enqueueCopyImage	include/CL/cl2.hpp	/^    cl_int enqueueCopyImage($/;"	f	class:cl::CommandQueue
enqueueCopyImage	include/CL/cl2.hpp	/^inline cl_int enqueueCopyImage($/;"	f	namespace:cl
enqueueCopyImageToBuffer	include/CL/cl.hpp	/^    cl_int enqueueCopyImageToBuffer($/;"	f	class:cl::CommandQueue
enqueueCopyImageToBuffer	include/CL/cl.hpp	/^inline cl_int enqueueCopyImageToBuffer($/;"	f	namespace:cl
enqueueCopyImageToBuffer	include/CL/cl2.hpp	/^    cl_int enqueueCopyImageToBuffer($/;"	f	class:cl::CommandQueue
enqueueCopyImageToBuffer	include/CL/cl2.hpp	/^inline cl_int enqueueCopyImageToBuffer($/;"	f	namespace:cl
enqueueFillBuffer	include/CL/cl.hpp	/^    cl_int enqueueFillBuffer($/;"	f	class:cl::CommandQueue
enqueueFillBuffer	include/CL/cl2.hpp	/^    cl_int enqueueFillBuffer($/;"	f	class:cl::CommandQueue
enqueueFillImage	include/CL/cl.hpp	/^    cl_int enqueueFillImage($/;"	f	class:cl::CommandQueue
enqueueFillImage	include/CL/cl2.hpp	/^    cl_int enqueueFillImage($/;"	f	class:cl::CommandQueue
enqueueMapBuffer	include/CL/cl.hpp	/^    void* enqueueMapBuffer($/;"	f	class:cl::CommandQueue
enqueueMapBuffer	include/CL/cl.hpp	/^inline void* enqueueMapBuffer($/;"	f	namespace:cl
enqueueMapBuffer	include/CL/cl2.hpp	/^    void* enqueueMapBuffer($/;"	f	class:cl::CommandQueue
enqueueMapBuffer	include/CL/cl2.hpp	/^inline void* enqueueMapBuffer($/;"	f	namespace:cl
enqueueMapImage	include/CL/cl.hpp	/^    void* enqueueMapImage($/;"	f	class:cl::CommandQueue
enqueueMapImage	include/CL/cl2.hpp	/^    void* enqueueMapImage($/;"	f	class:cl::CommandQueue
enqueueMapSVM	include/CL/cl2.hpp	/^    cl_int enqueueMapSVM($/;"	f	class:cl::CommandQueue
enqueueMapSVM	include/CL/cl2.hpp	/^inline cl_int enqueueMapSVM($/;"	f	namespace:cl
enqueueMarkerWithWaitList	include/CL/cl.hpp	/^    cl_int enqueueMarkerWithWaitList($/;"	f	class:cl::CommandQueue
enqueueMarkerWithWaitList	include/CL/cl2.hpp	/^    cl_int enqueueMarkerWithWaitList($/;"	f	class:cl::CommandQueue
enqueueMigrateMemObjects	include/CL/cl.hpp	/^    cl_int enqueueMigrateMemObjects($/;"	f	class:cl::CommandQueue
enqueueMigrateMemObjects	include/CL/cl2.hpp	/^    cl_int enqueueMigrateMemObjects($/;"	f	class:cl::CommandQueue
enqueueNDRangeKernel	include/CL/cl.hpp	/^    cl_int enqueueNDRangeKernel($/;"	f	class:cl::CommandQueue
enqueueNDRangeKernel	include/CL/cl2.hpp	/^    cl_int enqueueNDRangeKernel($/;"	f	class:cl::CommandQueue
enqueueNativeKernel	include/CL/cl.hpp	/^    cl_int enqueueNativeKernel($/;"	f	class:cl::CommandQueue
enqueueNativeKernel	include/CL/cl2.hpp	/^    cl_int enqueueNativeKernel($/;"	f	class:cl::CommandQueue
enqueueReadBuffer	include/CL/cl.hpp	/^    cl_int enqueueReadBuffer($/;"	f	class:cl::CommandQueue
enqueueReadBuffer	include/CL/cl.hpp	/^inline cl_int enqueueReadBuffer($/;"	f	namespace:cl
enqueueReadBuffer	include/CL/cl2.hpp	/^    cl_int enqueueReadBuffer($/;"	f	class:cl::CommandQueue
enqueueReadBuffer	include/CL/cl2.hpp	/^inline cl_int enqueueReadBuffer($/;"	f	namespace:cl
enqueueReadBufferRect	include/CL/cl.hpp	/^    cl_int enqueueReadBufferRect($/;"	f	class:cl::CommandQueue
enqueueReadBufferRect	include/CL/cl.hpp	/^inline cl_int enqueueReadBufferRect($/;"	f	namespace:cl
enqueueReadBufferRect	include/CL/cl2.hpp	/^    cl_int enqueueReadBufferRect($/;"	f	class:cl::CommandQueue
enqueueReadBufferRect	include/CL/cl2.hpp	/^inline cl_int enqueueReadBufferRect($/;"	f	namespace:cl
enqueueReadImage	include/CL/cl.hpp	/^    cl_int enqueueReadImage($/;"	f	class:cl::CommandQueue
enqueueReadImage	include/CL/cl.hpp	/^inline cl_int enqueueReadImage($/;"	f	namespace:cl
enqueueReadImage	include/CL/cl2.hpp	/^    cl_int enqueueReadImage($/;"	f	class:cl::CommandQueue
enqueueReadImage	include/CL/cl2.hpp	/^inline cl_int enqueueReadImage($/;"	f	namespace:cl
enqueueReleaseD3D10Objects	include/CL/cl.hpp	/^    cl_int enqueueReleaseD3D10Objects($/;"	f	class:cl::CommandQueue
enqueueReleaseD3D10Objects	include/CL/cl2.hpp	/^    cl_int enqueueReleaseD3D10Objects($/;"	f	class:cl::CommandQueue
enqueueReleaseGLObjects	include/CL/cl.hpp	/^    cl_int enqueueReleaseGLObjects($/;"	f	class:cl::CommandQueue
enqueueReleaseGLObjects	include/CL/cl2.hpp	/^    cl_int enqueueReleaseGLObjects($/;"	f	class:cl::CommandQueue
enqueueTask	include/CL/cl.hpp	/^    cl_int enqueueTask($/;"	f	class:cl::CommandQueue
enqueueUnmapMemObject	include/CL/cl.hpp	/^    cl_int enqueueUnmapMemObject($/;"	f	class:cl::CommandQueue
enqueueUnmapMemObject	include/CL/cl.hpp	/^inline cl_int enqueueUnmapMemObject($/;"	f	namespace:cl
enqueueUnmapMemObject	include/CL/cl2.hpp	/^    cl_int enqueueUnmapMemObject($/;"	f	class:cl::CommandQueue
enqueueUnmapMemObject	include/CL/cl2.hpp	/^inline cl_int enqueueUnmapMemObject($/;"	f	namespace:cl
enqueueUnmapSVM	include/CL/cl2.hpp	/^    cl_int enqueueUnmapSVM($/;"	f	class:cl::CommandQueue
enqueueUnmapSVM	include/CL/cl2.hpp	/^inline cl_int enqueueUnmapSVM($/;"	f	namespace:cl
enqueueWriteBuffer	include/CL/cl.hpp	/^    cl_int enqueueWriteBuffer($/;"	f	class:cl::CommandQueue
enqueueWriteBuffer	include/CL/cl.hpp	/^inline cl_int enqueueWriteBuffer($/;"	f	namespace:cl
enqueueWriteBuffer	include/CL/cl2.hpp	/^    cl_int enqueueWriteBuffer($/;"	f	class:cl::CommandQueue
enqueueWriteBuffer	include/CL/cl2.hpp	/^inline cl_int enqueueWriteBuffer($/;"	f	namespace:cl
enqueueWriteBufferRect	include/CL/cl.hpp	/^    cl_int enqueueWriteBufferRect($/;"	f	class:cl::CommandQueue
enqueueWriteBufferRect	include/CL/cl.hpp	/^inline cl_int enqueueWriteBufferRect($/;"	f	namespace:cl
enqueueWriteBufferRect	include/CL/cl2.hpp	/^    cl_int enqueueWriteBufferRect($/;"	f	class:cl::CommandQueue
enqueueWriteBufferRect	include/CL/cl2.hpp	/^inline cl_int enqueueWriteBufferRect($/;"	f	namespace:cl
enqueueWriteImage	include/CL/cl.hpp	/^    cl_int enqueueWriteImage($/;"	f	class:cl::CommandQueue
enqueueWriteImage	include/CL/cl.hpp	/^inline cl_int enqueueWriteImage($/;"	f	namespace:cl
enqueueWriteImage	include/CL/cl2.hpp	/^    cl_int enqueueWriteImage($/;"	f	class:cl::CommandQueue
enqueueWriteImage	include/CL/cl2.hpp	/^inline cl_int enqueueWriteImage($/;"	f	namespace:cl
enqueue_sync_event	arm_compute/runtime/CL/CLScheduler.h	/^    cl::Event enqueue_sync_event()$/;"	f	class:arm_compute::CLScheduler
epsilon	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^float BatchNormalizationLayerNode::epsilon() const$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
epsilon	tests/Types.h	/^    float       epsilon;$/;"	m	struct:arm_compute::OpticalFlowParameters
equalize_histogram	tests/validation/reference/EqualizeHistogram.cpp	/^SimpleTensor<T> equalize_histogram(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
erf	include/half/half.hpp	/^			static double erf(double arg)$/;"	f	struct:detail::functions
erf	include/half/half.hpp	/^			static expr erf(float arg)$/;"	f	struct:detail::functions
erf	include/half/half.hpp	/^		inline expr erf(expr arg) { return functions::erf(arg); }$/;"	f	namespace:detail
erf	include/half/half.hpp	/^		inline expr erf(half arg) { return functions::erf(arg); }$/;"	f	namespace:detail
erfc	include/half/half.hpp	/^			static expr erfc(float arg)$/;"	f	struct:detail::functions
erfc	include/half/half.hpp	/^		inline expr erfc(expr arg) { return functions::erfc(arg); }$/;"	f	namespace:detail
erfc	include/half/half.hpp	/^		inline expr erfc(half arg) { return functions::erfc(arg); }$/;"	f	namespace:detail
erode	tests/validation/reference/Erode.cpp	/^SimpleTensor<T> erode(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
erode_8cl	documentation/erode_8cl.js	/^var erode_8cl =$/;"	v
err	include/CL/cl.hpp	/^    cl_int err(void) const { return err_; }$/;"	f	class:cl::Error
err	include/CL/cl2.hpp	/^        cl_int err(void) const { return err_; }$/;"	f	class:cl::Error
errHandler	include/CL/cl.hpp	/^static inline cl_int errHandler ($/;"	f	namespace:cl::detail
errHandler	include/CL/cl2.hpp	/^static inline cl_int errHandler ($/;"	f	namespace:cl::detail
errStr_	include/CL/cl.hpp	/^    const char * errStr_;$/;"	m	class:cl::Error
errStr_	include/CL/cl2.hpp	/^        const char * errStr_;$/;"	m	class:cl::Error
err_	include/CL/cl.hpp	/^    cl_int err_;$/;"	m	class:cl::Error
err_	include/CL/cl2.hpp	/^        cl_int err_;$/;"	m	class:cl::Error
error	src/core/CL/cl_kernels/types.h	/^    float error;           \/**< A tracking method specific error. Initialized to 0 by corner detectors. *\/$/;"	m	struct:Keypoint
error	src/core/Error.cpp	/^void arm_compute::error(const char *function, const char *file, const int line, const char *msg, ...)$/;"	f	class:arm_compute
error_code	arm_compute/core/Error.h	/^    ErrorCode error_code() const$/;"	f	class:arm_compute::Status
error_description	arm_compute/core/Error.h	/^    std::string error_description() const$/;"	f	class:arm_compute::Status
error_on_channel_not_in	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_channel_not_in(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_channel_not_in_known_format	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_channel_not_in_known_format(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_coordinates_dimensions_gte	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_coordinates_dimensions_gte(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_data_type_channel_not_in	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_data_type_channel_not_in(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_data_type_not_in	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_data_type_not_in(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_format_not_in	arm_compute/core/Validate.h	/^void error_on_format_not_in(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_invalid_multi_hog	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_invalid_multi_hog(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_invalid_subtensor	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_invalid_subtensor(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_invalid_subtensor_valid_region	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_invalid_subtensor_valid_region(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_invalid_subwindow	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_invalid_subwindow(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_mismatching_data_layouts	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_mismatching_data_layouts(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_mismatching_data_types	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_mismatching_data_types(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_mismatching_dimensions	arm_compute/core/Validate.h	/^arm_compute::Status error_on_mismatching_dimensions(const char *function, const char *file, int line,$/;"	f	namespace:arm_compute
error_on_mismatching_fixed_point	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_mismatching_fixed_point(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_mismatching_fixed_point_position	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_mismatching_fixed_point_position(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_mismatching_quantization_info	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_mismatching_quantization_info(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_mismatching_shapes	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_mismatching_shapes(const char *function, const char *file, const int line,$/;"	f	namespace:arm_compute
error_on_mismatching_windows	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_mismatching_windows(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_missing_assets	tests/framework/Framework.cpp	/^bool Framework::error_on_missing_assets() const$/;"	f	class:arm_compute::test::framework::Framework
error_on_nullptr	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_nullptr(const char *function, const char *file, const int line, Ts &&... pointers)$/;"	f	namespace:arm_compute
error_on_tensor_not_2d	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_tensor_not_2d(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_tensors_not_even	arm_compute/core/Validate.h	/^arm_compute::Status error_on_tensors_not_even(const char *function, const char *file, int line,$/;"	f	namespace:arm_compute
error_on_tensors_not_subsampled	arm_compute/core/Validate.h	/^arm_compute::Status error_on_tensors_not_subsampled(const char *function, const char *file, int line,$/;"	f	namespace:arm_compute
error_on_unconfigured_kernel	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_unconfigured_kernel(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_value_not_representable_in_fixed_point	arm_compute/core/Validate.h	/^inline arm_compute::Status error_on_value_not_representable_in_fixed_point(const char *function, const char *file, int line,$/;"	f	namespace:arm_compute
error_on_window_dimensions_gte	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_window_dimensions_gte(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
error_on_window_not_collapsable_at_dimension	src/core/Validate.cpp	/^arm_compute::Status arm_compute::error_on_window_not_collapsable_at_dimension(const char *function, const char *file, const int line,$/;"	f	class:arm_compute
event_id	tests/framework/instruments/hwc.hpp	/^    uint32_t event_id   = 0;$/;"	m	struct:mali_userspace::kbase_hwcnt_reader_metadata
events	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    int              events[maxevents] = {};$/;"	m	class:arm_gemm::profiler
events_	include/CL/cl.hpp	/^    VECTOR_CLASS<Event> events_;$/;"	m	struct:cl::EnqueueArgs
events_	include/CL/cl2.hpp	/^    vector<Event> events_;$/;"	m	class:cl::EnqueueArgs
exclude_padding	arm_compute/core/Types.h	/^    bool exclude_padding() const$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
execute	arm_compute/core/NEON/kernels/convolution/winograd/transforms/input.hpp	/^  void WinogradGEMM<output_tile_rows, output_tile_cols, kernel_rows, kernel_cols>::InputTransform<T>::execute($/;"	f	class:winograd::WinogradGEMM::InputTransform
execute	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  void WinogradGEMM<output_tile_rows, output_tile_cols, kernel_rows, kernel_cols>::OutputTransform<T>::execute($/;"	f	class:winograd::WinogradGEMM::OutputTransform
execute	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_3x3_fp32.cpp	/^  void WinogradGEMM<2, 2, 3, 3>::WeightsTransform<float>::execute($/;"	f	class:winograd::WinogradGEMM::WeightsTransform
execute	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_5x5_fp32.cpp	/^  void WinogradGEMM<2, 2, 5, 5>::WeightsTransform<float>::execute($/;"	f	class:winograd::WinogradGEMM::WeightsTransform
execute	src/core/NEON/kernels/convolution/winograd/transforms/weights_4x4_3x3_fp32.cpp	/^  void WinogradGEMM<4, 4, 3, 3>::WeightsTransform<float>::execute($/;"	f	class:winograd::WinogradGEMM::WeightsTransform
execute_function	arm_compute/graph/Workload.h	/^    std::function<decltype(execute_task)> execute_function;$/;"	m	class:arm_compute::graph::final
execute_graph	src/graph/GraphManager.cpp	/^void GraphManager::execute_graph(Graph &graph)$/;"	f	class:arm_compute::graph::GraphManager
execute_internal	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    void execute_internal(unsigned int start, unsigned int end, int threadid)$/;"	f	class:arm_gemm::GemmInterleaved
execute_task	src/graph/Workload.cpp	/^void execute_task(ExecutionTask &task)$/;"	f	namespace:arm_compute::graph
exp	include/half/half.hpp	/^			static expr exp(float arg) { return expr(std::exp(arg)); }$/;"	f	struct:detail::functions
exp	include/half/half.hpp	/^		inline expr exp(expr arg) { return functions::exp(arg); }$/;"	f	namespace:detail
exp	include/half/half.hpp	/^		inline expr exp(half arg) { return functions::exp(arg); }$/;"	f	namespace:detail
exp	tests/validation/FixedPoint.h	/^    static fixed_point<T> exp(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
exp	tests/validation/FixedPoint.h	/^inline fixed_point<T> exp(fixed_point<T> x)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
exp2	include/half/half.hpp	/^			static expr exp2(float arg)$/;"	f	struct:detail::functions
exp2	include/half/half.hpp	/^		inline expr exp2(expr arg) { return functions::exp2(arg); }$/;"	f	namespace:detail
exp2	include/half/half.hpp	/^		inline expr exp2(half arg) { return functions::exp2(arg); }$/;"	f	namespace:detail
expandNode	documentation/navtree.js	/^function expandNode(o, node, imm, showRoot)$/;"	f
expm1	include/half/half.hpp	/^			static expr expm1(float arg)$/;"	f	struct:detail::functions
expm1	include/half/half.hpp	/^		inline expr expm1(expr arg) { return functions::expm1(arg); }$/;"	f	namespace:detail
expm1	include/half/half.hpp	/^		inline expr expm1(half arg) { return functions::expm1(arg); }$/;"	f	namespace:detail
expr	include/half/half.hpp	/^		struct expr$/;"	s	namespace:half_float::detail
ext_host_ptr	include/CL/cl_ext.h	/^    cl_mem_ext_host_ptr  ext_host_ptr;$/;"	m	struct:_cl_mem_ion_host_ptr
extend_padding	src/core/SubTensorInfo.cpp	/^bool SubTensorInfo::extend_padding(const PaddingSize &padding)$/;"	f	class:SubTensorInfo
extend_padding	src/core/TensorInfo.cpp	/^bool TensorInfo::extend_padding(const PaddingSize &padding)$/;"	f	class:TensorInfo
extend_parent_shape	src/core/SubTensorInfo.cpp	/^TensorShape extend_parent_shape(TensorShape parent_shape, TensorShape shape, Coordinates coords)$/;"	f	namespace:__anon302
extensions	arm_compute/core/CL/CLTypes.h	/^    std::string extensions;  \/**< List of supported extensions *\/$/;"	m	struct:arm_compute::CLDeviceOptions
extract_1C_from_2C_img	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::extract_1C_from_2C_img(const Window &win)$/;"	f	class:NEChannelExtractKernel
extract_1C_from_3C_img	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::extract_1C_from_3C_img(const Window &win)$/;"	f	class:NEChannelExtractKernel
extract_1C_from_4C_img	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::extract_1C_from_4C_img(const Window &win)$/;"	f	class:NEChannelExtractKernel
extract_YUYV_uv	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::extract_YUYV_uv(const Window &win)$/;"	f	class:NEChannelExtractKernel
extract_b_from_rgb	tests/AssetsLibrary.cpp	/^void extract_b_from_rgb(const RawTensor &src, RawTensor &dst)$/;"	f	namespace:arm_compute::test::__anon328
extract_g_from_rgb	tests/AssetsLibrary.cpp	/^void extract_g_from_rgb(const RawTensor &src, RawTensor &dst)$/;"	f	namespace:arm_compute::test::__anon328
extract_r_from_rgb	tests/AssetsLibrary.cpp	/^void extract_r_from_rgb(const RawTensor &src, RawTensor &dst)$/;"	f	namespace:arm_compute::test::__anon328
f16	arm_compute/core/PixelValue.h	/^            half     f16;     \/**< Single channel F16 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
f32	arm_compute/core/PixelValue.h	/^            float    f32;     \/**< Single channel float 32 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
f64	arm_compute/core/PixelValue.h	/^            double   f64;     \/**< Single channel double *\/$/;"	m	union:arm_compute::PixelValue::__anon1
f_	include/CL/cl.hpp	/^    Func f_; const Arg0& arg0_; const Arg1& arg1_;$/;"	m	struct:cl::detail::GetInfoFunctor1
f_	include/CL/cl.hpp	/^    Func f_; const Arg0& arg0_;$/;"	m	struct:cl::detail::GetInfoFunctor0
f_	include/CL/cl2.hpp	/^    Func f_; const Arg0& arg0_; const Arg1& arg1_;$/;"	m	struct:cl::detail::GetInfoFunctor1
f_	include/CL/cl2.hpp	/^    Func f_; const Arg0& arg0_;$/;"	m	struct:cl::detail::GetInfoFunctor0
fabs	include/half/half.hpp	/^			static expr fabs(float arg) { return expr(std::fabs(arg)); }$/;"	f	struct:detail::unary_specialized
fabs	include/half/half.hpp	/^			static half fabs(half arg) { return half(binary, arg.data_&0x7FFF); }$/;"	f	struct:detail::unary_specialized
fabs	include/half/half.hpp	/^		inline expr fabs(expr arg) { return unary_specialized<expr>::fabs(arg); }$/;"	f	namespace:detail
fabs	include/half/half.hpp	/^		inline half fabs(half arg) { return unary_specialized<half>::fabs(arg); }$/;"	f	namespace:detail
fast9_masks	tests/validation/reference/FastCorners.cpp	/^const std::array<uint16_t, 16> fast9_masks =$/;"	m	namespace:arm_compute::test::validation::reference::__anon535	file:
fast__corners_8cl	documentation/fast__corners_8cl.js	/^var fast__corners_8cl =$/;"	v
fast_corners	tests/validation/reference/FastCorners.cpp	/^std::vector<KeyPoint> fast_corners(const SimpleTensor<T> &src, float input_thresh, bool suppress_nonmax, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
fast_math_hint	arm_compute/graph/frontend/Types.h	/^    FastMathHint               fast_math_hint                    = { FastMathHint::DISABLED };              \/**< Fast math hint *\/$/;"	m	struct:arm_compute::graph::frontend::StreamHints
fast_math_hint	src/graph/nodes/ConvolutionLayerNode.cpp	/^FastMathHint ConvolutionLayerNode::fast_math_hint() const$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
fbdev_pixmap	include/linux/EGL/fbdev_window.h	/^typedef struct fbdev_pixmap $/;"	s
fbdev_pixmap	include/linux/EGL/fbdev_window.h	/^} fbdev_pixmap;$/;"	t	typeref:struct:fbdev_pixmap
fbdev_pixmap_flags	include/linux/EGL/fbdev_window.h	/^} fbdev_pixmap_flags;$/;"	t	typeref:enum:__anon181
fbdev_window	include/linux/EGL/fbdev_window.h	/^typedef struct fbdev_window$/;"	s
fbdev_window	include/linux/EGL/fbdev_window.h	/^} fbdev_window;$/;"	t	typeref:struct:fbdev_window
fd	tests/framework/instruments/hwc.hpp	/^    int32_t fd;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup
fdim	include/half/half.hpp	/^			static expr fdim(float x, float y)$/;"	f	struct:detail::functions
fdim	include/half/half.hpp	/^		inline expr fdim(expr x, expr y) { return functions::fdim(x, y); }$/;"	f	namespace:detail
fdim	include/half/half.hpp	/^		inline expr fdim(expr x, half y) { return functions::fdim(x, y); }$/;"	f	namespace:detail
fdim	include/half/half.hpp	/^		inline expr fdim(half x, expr y) { return functions::fdim(x, y); }$/;"	f	namespace:detail
fdim	include/half/half.hpp	/^		inline expr fdim(half x, half y) { return functions::fdim(x, y); }$/;"	f	namespace:detail
feed	tests/networks/AlexNetNetwork.h	/^    void feed(std::string name)$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
feed	tests/networks/LeNet5Network.h	/^    void feed(std::string name)$/;"	f	class:arm_compute::test::networks::LeNet5Network
feed	tests/networks/MobileNetNetwork.h	/^    void feed(std::string name)$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
feed	tests/networks/MobileNetV1Network.h	/^    void feed(std::string name)$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
fence	include/CL/cl.hpp	/^    inline void fence() { _mm_mfence(); }$/;"	f	namespace:cl::detail
fifteen	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t fifteen   = vdupq_n_s32(15);$/;"	m	namespace:__anon295	file:
file_exists	src/graph/backends/CL/CLDeviceBackend.cpp	/^bool file_exists(const std::string &filename)$/;"	f	namespace:arm_compute::graph::backends::__anon304
filename	src/core/utils/io/FileHandler.cpp	/^std::string FileHandler::filename() const$/;"	f	class:FileHandler
files	documentation/files.js	/^var files =$/;"	v
fill	tests/AssetsLibrary.cpp	/^void AssetsLibrary::fill(RawTensor &raw, const std::string &name, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.cpp	/^void AssetsLibrary::fill(RawTensor &raw, const std::string &name, Format format) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.cpp	/^void AssetsLibrary::fill(RawTensor &raw, const std::string &name, Format format, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.h	/^void AssetsLibrary::fill(RawTensor &raw, D &&distribution, std::random_device::result_type seed_offset) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.h	/^void AssetsLibrary::fill(T &&tensor, D &&distribution, std::random_device::result_type seed_offset) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.h	/^void AssetsLibrary::fill(T &&tensor, RawTensor raw) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.h	/^void AssetsLibrary::fill(T &&tensor, const std::string &name, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.h	/^void AssetsLibrary::fill(T &&tensor, const std::string &name, Format format) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/AssetsLibrary.h	/^void AssetsLibrary::fill(T &&tensor, const std::string &name, Format format, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill	tests/networks/AlexNetNetwork.h	/^    void fill(std::vector<std::string> weights, std::vector<std::string> biases)$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
fill	tests/networks/LeNet5Network.h	/^    void fill(std::vector<std::string> weights, std::vector<std::string> biases)$/;"	f	class:arm_compute::test::networks::LeNet5Network
fill	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::AbsoluteDifferenceValidationFixture
fill	tests/validation/fixtures/AccumulateFixture.h	/^    void fill(U &&tensor, int i, D max)$/;"	f	class:arm_compute::test::validation::AccumulateBaseValidationFixture
fill	tests/validation/fixtures/ActivationLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::ActivationValidationGenericFixture
fill	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionBroadcastValidationFixedPointFixture
fill	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ArithmeticSubtractionValidationFixedPointFixture
fill	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^    void fill(U &&src_tensor, U &&mean_tensor, U &&var_tensor, U &&beta_tensor, U &&gamma_tensor)$/;"	f	class:arm_compute::test::validation::BatchNormalizationLayerValidationFixedPointFixture
fill	tests/validation/fixtures/BitwiseAndFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::BitwiseAndValidationFixture
fill	tests/validation/fixtures/BitwiseNotFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::BitwiseNotValidationFixture
fill	tests/validation/fixtures/BitwiseOrFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::BitwiseOrValidationFixture
fill	tests/validation/fixtures/BitwiseXorFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::BitwiseXorValidationFixture
fill	tests/validation/fixtures/Box3x3Fixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::Box3x3ValidationFixture
fill	tests/validation/fixtures/ChannelCombineFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ChannelCombineValidationFixture
fill	tests/validation/fixtures/ChannelExtractFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ChannelExtractValidationFixture
fill	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::ChannelShuffleLayerValidationFixture
fill	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ConvertFullyConnectedWeightsValidationFixture
fill	tests/validation/fixtures/ConvolutionFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixture
fill	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ConvolutionValidationGenericFixture
fill	tests/validation/fixtures/CopyFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::CopyFixture
fill	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::DeconvolutionLayerFixtureBase
fill	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::DepthConcatenateLayerValidationFixture
fill	tests/validation/fixtures/DepthConvertLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::DepthConvertLayerValidationFixedPointFixture
fill	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::DepthwiseConvolutionLayerValidationGenericFixture
fill	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i, bool zero_fill = false)$/;"	f	class:arm_compute::test::validation::DepthwiseSeparableConvolutionValidationFixture
fill	tests/validation/fixtures/DequantizationLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::DequantizationValidationFixedPointFixture
fill	tests/validation/fixtures/DerivativeFixture.h	/^    void fill(V &&tensor)$/;"	f	class:arm_compute::test::validation::DerivativeValidationFixture
fill	tests/validation/fixtures/DilateFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::DilateValidationFixture
fill	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericFixture
fill	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericTensorShiftFixture
fill	tests/validation/fixtures/DropoutLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::DropoutLayerValidationFixture
fill	tests/validation/fixtures/EqualizeHistogramFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::EqualizeHistogramValidationFixture
fill	tests/validation/fixtures/ErodeFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::ErodeValidationFixture
fill	tests/validation/fixtures/FastCornersFixture.h	/^    void fill(U &&tensor, RawTensor raw)$/;"	f	class:arm_compute::test::validation::FastCornersValidationFixture
fill	tests/validation/fixtures/FixedPointFixture.h	/^    void fill(U &&tensor, int min, int max, int i)$/;"	f	class:arm_compute::test::validation::FixedPointValidationFixture
fill	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^    void fill(U &&tensor, unsigned int seed_offset)$/;"	f	class:arm_compute::test::validation::FixedPointPixelWiseMultiplicationValidationFixture
fill	tests/validation/fixtures/FlattenLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::FlattenLayerValidationFixture
fill	tests/validation/fixtures/FloorFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::FloorValidationFixture
fill	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationGenericFixture
fill	tests/validation/fixtures/GEMMFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::GEMMValidationFixedPointFixture
fill	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::GEMMInterleave4x4ValidationFixedPointFixture
fill	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^    void fill(U &&tensor, int i, int lo, int hi)$/;"	f	class:arm_compute::test::validation::GEMMLowpAssemblyFixture
fill	tests/validation/fixtures/GEMMLowpFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::GEMMLowpMatrixMultiplyCoreValidationFixture
fill	tests/validation/fixtures/GEMMLowpFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointValidationFixture
fill	tests/validation/fixtures/GEMMLowpFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleValidationFixture
fill	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::GEMMTranspose1xWValidationFixedPointFixture
fill	tests/validation/fixtures/Gaussian3x3Fixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::Gaussian3x3ValidationFixture
fill	tests/validation/fixtures/Gaussian5x5Fixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::Gaussian5x5ValidationFixture
fill	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::GaussianPyramidHalfValidationFixture
fill	tests/validation/fixtures/HOGDescriptorFixture.h	/^    void fill(V &&tensor, const std::string image, Format format)$/;"	f	class:arm_compute::test::validation::HOGDescriptorValidationFixture
fill	tests/validation/fixtures/HOGDescriptorFixture.h	/^    void fill(V &&tensor, int i, D max)$/;"	f	class:arm_compute::test::validation::HOGDescriptorValidationFixture
fill	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^    void fill(V &&tensor, const std::string image, Format format)$/;"	f	class:arm_compute::test::validation::HOGMultiDetectionValidationFixture
fill	tests/validation/fixtures/HarrisCornersFixture.h	/^    void fill(U &&tensor, RawTensor raw)$/;"	f	class:arm_compute::test::validation::HarrisCornersValidationFixture
fill	tests/validation/fixtures/HistogramFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::HistogramValidationFixture
fill	tests/validation/fixtures/Im2ColFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::Im2ColValidationFixture
fill	tests/validation/fixtures/IntegralImageFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::IntegralImageValidationFixture
fill	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::L2NormalizeLayerValidationFixture
fill	tests/validation/fixtures/LSTMLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::LSTMLayerValidationFixture
fill	tests/validation/fixtures/LocallyConnectedFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::LocallyConnectedValidationFixture
fill	tests/validation/fixtures/MagnitudeFixture.h	/^    void fill(U &&tensor, std::random_device::result_type seed_offset)$/;"	f	class:arm_compute::test::validation::MagnitudeValidationFixture
fill	tests/validation/fixtures/MeanStdDevFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::MeanStdDevValidationFixture
fill	tests/validation/fixtures/Median3x3Fixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::Median3x3ValidationFixture
fill	tests/validation/fixtures/MinMaxLocationFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::MinMaxLocationValidationFixture
fill	tests/validation/fixtures/NonLinearFilterFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::NonLinearFilterValidationFixture
fill	tests/validation/fixtures/NormalizationLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::NormalizationValidationFixedPointFixture
fill	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void fill(U &&src_tensor, U &&mean_tensor, U &&sd_tensor)$/;"	f	class:arm_compute::test::validation::NormalizePlanarYUVLayerValidationFixedPointFixture
fill	tests/validation/fixtures/OpticalFlowFixture.h	/^    void fill(V &&tensor, const std::string image, Format format)$/;"	f	class:arm_compute::test::validation::OpticalFlowValidationFixture
fill	tests/validation/fixtures/PermuteFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::PermuteValidationFixture
fill	tests/validation/fixtures/PhaseFixture.h	/^    void fill(U &&tensor, std::random_device::result_type seed_offset)$/;"	f	class:arm_compute::test::validation::PhaseValidationFixture
fill	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^    void fill(U &&tensor, unsigned int seed_offset)$/;"	f	class:arm_compute::test::validation::PixelWiseMultiplicationBroadcastValidationFixture
fill	tests/validation/fixtures/PoolingLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationGenericFixture
fill	tests/validation/fixtures/QuantizationLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::QuantizationValidationFixedPointFixture
fill	tests/validation/fixtures/RNNLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::RNNLayerValidationFixture
fill	tests/validation/fixtures/ReductionOperationFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::ReductionOperationValidationFixture
fill	tests/validation/fixtures/RemapFixture.h	/^    void fill(U &&tensor, int i, float min, float max)$/;"	f	class:arm_compute::test::validation::RemapValidationFixture
fill	tests/validation/fixtures/ReshapeLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::ReshapeLayerValidationFixture
fill	tests/validation/fixtures/ScaleFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::ScaleValidationFixture
fill	tests/validation/fixtures/ScharrFixture.h	/^    void fill(V &&tensor)$/;"	f	class:arm_compute::test::validation::ScharrValidationFixture
fill	tests/validation/fixtures/SobelFixture.h	/^    void fill(V &&tensor)$/;"	f	class:arm_compute::test::validation::SobelValidationFixture
fill	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::SoftmaxValidationGenericFixture
fill	tests/validation/fixtures/TableLookupFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::TableLookupValidationFixture
fill	tests/validation/fixtures/ThresholdFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::ThresholdValidationFixture
fill	tests/validation/fixtures/TransposeFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::TransposeValidationFixture
fill	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigure2TestCaseFixture
fill	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigureTestCaseFixture
fill	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerSimpleTestCaseFixture
fill	tests/validation/fixtures/WarpAffineFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::WarpAffineValidationFixture
fill	tests/validation/fixtures/WarpPerspectiveFixture.h	/^    void fill(U &&tensor)$/;"	f	class:arm_compute::test::validation::WarpPerspectiveValidationFixture
fill	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^    void fill(U &&tensor, int i)$/;"	f	class:arm_compute::test::validation::WidthConcatenateLayerValidationFixture
fill	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i, float min, float max)$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerFastMathValidationFixture
fill	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i, float min, float max)$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerValidationFixture
fill	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i, float min, float max)$/;"	f	class:arm_compute::test::validation::WinogradFilterTransformValidationFixture
fill	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i, float min, float max)$/;"	f	class:arm_compute::test::validation::WinogradInputTransformValidationFixture
fill	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void fill(U &&tensor, int i, float min, float max)$/;"	f	class:arm_compute::test::validation::WinogradOutputTransformValidationFixture
fill	utils/GraphUtils.cpp	/^void RandomAccessor::fill(ITensor &tensor, D &&distribution)$/;"	f	class:RandomAccessor
fill__border_8cl	documentation/fill__border_8cl.js	/^var fill__border_8cl =$/;"	v
fill_array	tests/Utils.h	/^inline void fill_array(ArrayAccessor_T &&array, const std::vector<T> &v)$/;"	f	namespace:arm_compute::test
fill_borders_with_garbage	tests/AssetsLibrary.h	/^void AssetsLibrary::fill_borders_with_garbage(T &&tensor, D &&distribution, std::random_device::result_type seed_offset) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill_constant_value_single_channel	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^void NEFillBorderKernel::fill_constant_value_single_channel(const Window &window)$/;"	f	class:NEFillBorderKernel
fill_constant_value_single_channel_special	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^inline void fill_constant_value_single_channel_special<float, 1u, 1u>(ITensor *tensor, const Window &window, unsigned int right, unsigned int bottom, const PixelValue &constant_border_value)$/;"	f	namespace:__anon259
fill_custom_val	tests/validation/fixtures/LSTMLayerFixture.h	/^    void fill_custom_val(U &&tensor, float num, int i)$/;"	f	class:arm_compute::test::validation::LSTMLayerValidationFixture
fill_image	utils/Utils.h	/^    void fill_image(T &image)$/;"	f	class:arm_compute::utils::PPMLoader
fill_layer_data	tests/AssetsLibrary.h	/^void AssetsLibrary::fill_layer_data(T &&tensor, std::string name) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill_lookuptable	tests/validation/Helpers.h	/^void fill_lookuptable(T &&table)$/;"	f	namespace:arm_compute::test::validation
fill_mask	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::fill_mask(uint8_t *mask, int cols, int rows, MatrixPattern pattern)$/;"	f	class:arm_compute::NENonLinearFilterKernel
fill_mask_from_pattern	tests/validation/Helpers.cpp	/^void fill_mask_from_pattern(uint8_t *mask, int cols, int rows, MatrixPattern pattern)$/;"	f	namespace:arm_compute::test::validation
fill_min_max	tests/validation/fixtures/DequantizationLayerFixture.h	/^    void fill_min_max(U &&tensor)$/;"	f	class:arm_compute::test::validation::DequantizationValidationFixedPointFixture
fill_planar_tensor	utils/Utils.h	/^    void fill_planar_tensor(T &tensor, bool bgr = false)$/;"	f	class:arm_compute::utils::PPMLoader
fill_random	tests/networks/AlexNetNetwork.h	/^    void fill_random()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
fill_random	tests/networks/LeNet5Network.h	/^    void fill_random()$/;"	f	class:arm_compute::test::networks::LeNet5Network
fill_random	tests/networks/MobileNetNetwork.h	/^    void fill_random()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
fill_random	tests/networks/MobileNetV1Network.h	/^    void fill_random()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
fill_random_tensor	utils/Utils.h	/^void fill_random_tensor(T &tensor, float lower_bound, float upper_bound)$/;"	f	namespace:arm_compute::utils
fill_replicate_single_channel	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^void NEFillBorderKernel::fill_replicate_single_channel(const Window &window)$/;"	f	class:NEFillBorderKernel
fill_tensor	utils/Utils.h	/^    void fill_tensor(T &tensor)$/;"	f	class:arm_compute::utils::NPYLoader
fill_tensor_uniform	tests/AssetsLibrary.h	/^void AssetsLibrary::fill_tensor_uniform(T &&tensor, std::random_device::result_type seed_offset) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill_tensor_uniform	tests/AssetsLibrary.h	/^void AssetsLibrary::fill_tensor_uniform(T &&tensor, std::random_device::result_type seed_offset, D low, D high) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill_tensor_value	tests/AssetsLibrary.h	/^void AssetsLibrary::fill_tensor_value(T &&tensor, D value) const$/;"	f	class:arm_compute::test::AssetsLibrary
fill_tensors	tests/NEON/Helper.h	/^void fill_tensors(D &&dist, std::initializer_list<int> seeds, T &&tensor, Ts &&... other_tensors)$/;"	f	namespace:arm_compute::test
fill_value_single_channel	src/core/NEON/kernels/NEFillInnerBorderKernel.cpp	/^void NEFillInnerBorderKernel::fill_value_single_channel(const Window &window)$/;"	f	class:NEFillInnerBorderKernel
fill_warp_matrix	tests/validation/reference/Utils.h	/^inline void fill_warp_matrix(std::array<float, SIZE> &matrix)$/;"	f	namespace:arm_compute::test::validation
fill_zero	tests/validation/fixtures/DerivativeFixture.h	/^    void fill_zero(V &&tensor)$/;"	f	class:arm_compute::test::validation::DerivativeValidationFixture
fill_zero	tests/validation/fixtures/ScharrFixture.h	/^    void fill_zero(V &&tensor)$/;"	f	class:arm_compute::test::validation::ScharrValidationFixture
filter_size	tests/validation/CL/Box3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon403	file:
filter_size	tests/validation/CL/Dilate.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon413	file:
filter_size	tests/validation/CL/Erode.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon416	file:
filter_size	tests/validation/CL/Gaussian3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon422	file:
filter_size	tests/validation/CL/Gaussian5x5.cpp	/^constexpr unsigned int filter_size = 5;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon423	file:
filter_size	tests/validation/CL/Median3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon435	file:
filter_size	tests/validation/NEON/Box3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon476	file:
filter_size	tests/validation/NEON/Dilate.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon487	file:
filter_size	tests/validation/NEON/Erode.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon490	file:
filter_size	tests/validation/NEON/Gaussian3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/** Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon498	file:
filter_size	tests/validation/NEON/Gaussian5x5.cpp	/^constexpr unsigned int filter_size = 5;              \/** Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon499	file:
filter_size	tests/validation/NEON/Median3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::__anon511	file:
filter_size	tests/validation/fixtures/ScharrFixture.h	/^    static const int    filter_size = 3;$/;"	m	struct:arm_compute::test::validation::__anon529::info
filter_size	tests/validation/fixtures/SobelFixture.h	/^    static const int    filter_size = 3;$/;"	m	struct:arm_compute::test::validation::__anon530::info
filter_size	tests/validation/fixtures/SobelFixture.h	/^    static const int    filter_size = 5;$/;"	m	struct:arm_compute::test::validation::__anon530::info
filter_size	tests/validation/fixtures/SobelFixture.h	/^    static const int    filter_size = 7;$/;"	m	struct:arm_compute::test::validation::__anon530::info
filter_size	tests/validation/reference/Median3x3.cpp	/^constexpr unsigned int filter_size = 3;              \/* Size of the kernel\/filter in number of elements. *\/$/;"	m	namespace:arm_compute::test::validation::reference::__anon543	file:
final	arm_compute/core/CL/OpenCL.h	/^class CLSymbols final$/;"	c	namespace:arm_compute
final	arm_compute/core/CPP/CPPTypes.h	/^class CPUInfo final$/;"	c	namespace:arm_compute
final	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^class NEWinogradLayerTransformWeightsKernel final : public INEWinogradLayerTransformWeightsKernel<T>$/;"	c	namespace:arm_compute
final	arm_compute/core/NEON/kernels/assembly/NEGEMMAssemblyWrapper.h	/^class NEGEMMAssemblyWrapper final : public INEKernel$/;"	c	namespace:arm_compute
final	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^class Tensor4D final$/;"	c
final	arm_compute/core/SubTensorInfo.h	/^class SubTensorInfo final : public ITensorInfo$/;"	c	namespace:arm_compute
final	arm_compute/core/TensorInfo.h	/^class TensorInfo final : public ITensorInfo$/;"	c	namespace:arm_compute
final	arm_compute/core/Types.h	/^class GEMMReshapeInfo final$/;"	c	class:arm_compute::HOGNormType
final	arm_compute/core/utils/logging/FilePrinter.h	/^class FilePrinter final : public Printer$/;"	c	namespace:arm_compute::logging
final	arm_compute/core/utils/logging/LoggerRegistry.h	/^class LoggerRegistry final$/;"	c	namespace:arm_compute::logging
final	arm_compute/core/utils/logging/StdPrinter.h	/^class StdPrinter final : public Printer$/;"	c	namespace:arm_compute::logging
final	arm_compute/graph/Edge.h	/^class Edge final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/Graph.h	/^class Graph final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/GraphBuilder.h	/^class GraphBuilder final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/GraphContext.h	/^class GraphContext final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/GraphManager.h	/^class GraphManager final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/PassManager.h	/^class PassManager final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/Tensor.h	/^class Tensor final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/TensorDescriptor.h	/^struct TensorDescriptor final : public misc::ICloneable<TensorDescriptor>$/;"	s	namespace:arm_compute::graph
final	arm_compute/graph/Workload.h	/^class TaskExecutor final$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/backends/BackendRegistrar.h	/^class BackendRegistrar final$/;"	c	namespace:arm_compute::graph::backends::detail
final	arm_compute/graph/backends/BackendRegistry.h	/^class BackendRegistry final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^class CLDeviceBackend final : public IDeviceBackend$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/CL/CLFunctionFactory.h	/^class CLFunctionFactory final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/CL/CLNodeValidator.h	/^class CLNodeValidator final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^class CLSubTensorHandle final : public ITensorHandle$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/CL/CLTensorHandle.h	/^class CLTensorHandle final : public ITensorHandle$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^class GCDeviceBackend final : public IDeviceBackend$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/GLES/GCFunctionFactory.h	/^class GCFunctionFactory final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/GLES/GCNodeValidator.h	/^class GCNodeValidator final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^class GCTensorHandle final : public ITensorHandle$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^class NEDeviceBackend final : public IDeviceBackend$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/NEON/NEFunctionFactory.h	/^class NEFunctionFactory final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/NEON/NENodeValidator.h	/^class NENodeValidator final$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^class NESubTensorHandle final : public ITensorHandle$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/backends/NEON/NETensorHandle.h	/^class NETensorHandle final : public ITensorHandle$/;"	c	namespace:arm_compute::graph::backends
final	arm_compute/graph/frontend/Layers.h	/^class ActivationLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class BatchNormalizationLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class BranchLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class ConvolutionLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class DepthwiseConvolutionLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class FlattenLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class FullyConnectedLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class InputLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class NormalizationLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class OutputLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class PoolingLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class ReshapeLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class ScaleLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Layers.h	/^class SoftmaxLayer final : public ILayer$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/Stream.h	/^class Stream final : public IStream$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/frontend/SubStream.h	/^class SubStream final : public IStream$/;"	c	namespace:arm_compute::graph::frontend
final	arm_compute/graph/mutators/DepthConcatSubTensorMutator.h	/^class DepthConcatSubTensorMutator final : public IGraphMutator$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/mutators/InPlaceOperationMutator.h	/^class InPlaceOperationMutator final : public IGraphMutator$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/mutators/NodeFusionMutator.h	/^class NodeFusionMutator final : public IGraphMutator$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/mutators/SplitLayerSubTensorMutator.h	/^class SplitLayerSubTensorMutator final : public IGraphMutator$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/ActivationLayerNode.h	/^class ActivationLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^class BatchNormalizationLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/ConstNode.h	/^class ConstNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^class ConvolutionLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^class DepthConcatenateLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^class DepthwiseConvolutionLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/EltwiseLayerNode.h	/^class EltwiseLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/FlattenLayerNode.h	/^class FlattenLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^class FullyConnectedLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/InputNode.h	/^class InputNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/NormalizationLayerNode.h	/^class NormalizationLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/OutputNode.h	/^class OutputNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/PoolingLayerNode.h	/^class PoolingLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/ReshapeLayerNode.h	/^class ReshapeLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^class SoftmaxLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/nodes/SplitLayerNode.h	/^class SplitLayerNode final : public INode$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/printers/DotGraphPrinter.h	/^class DotGraphPrinter final : public IGraphPrinter$/;"	c	namespace:arm_compute::graph
final	arm_compute/graph/printers/DotGraphPrinter.h	/^class DotGraphVisitor final : public DefaultNodeVisitor$/;"	c	namespace:arm_compute::graph
final	arm_compute/runtime/Allocator.h	/^class Allocator final : public IAllocator$/;"	c	namespace:arm_compute
final	arm_compute/runtime/CL/CLBufferAllocator.h	/^class CLBufferAllocator final : public IAllocator$/;"	c	namespace:arm_compute
final	arm_compute/runtime/CL/CLMemoryRegion.h	/^class CLBufferMemoryRegion final : public ICLMemoryRegion$/;"	c	namespace:arm_compute
final	arm_compute/runtime/CL/CLMemoryRegion.h	/^class CLCoarseSVMMemoryRegion final : public ICLSVMMemoryRegion$/;"	c	namespace:arm_compute
final	arm_compute/runtime/CL/CLMemoryRegion.h	/^class CLFineSVMMemoryRegion final : public ICLSVMMemoryRegion$/;"	c	namespace:arm_compute
final	arm_compute/runtime/CL/ICLSimpleFunction.h	/^    void run() override final;$/;"	m	class:arm_compute::ICLSimpleFunction
final	arm_compute/runtime/CL/tuners/BifrostTuner.h	/^class BifrostTuner final : public ICLTuner$/;"	c	namespace:arm_compute::tuners
final	arm_compute/runtime/CPP/ICPPSimpleFunction.h	/^    void run() override final;$/;"	m	class:arm_compute::ICPPSimpleFunction
final	arm_compute/runtime/GLES_COMPUTE/GCBufferAllocator.h	/^class GCBufferAllocator final : public IAllocator$/;"	c	namespace:arm_compute
final	arm_compute/runtime/GLES_COMPUTE/IGCSimpleFunction.h	/^    void run() override final;$/;"	m	class:arm_compute::IGCSimpleFunction
final	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.h	/^    void run() override final;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3
final	arm_compute/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.h	/^    void run() override final;$/;"	m	class:arm_compute::GCDirectConvolutionLayer
final	arm_compute/runtime/GLES_COMPUTE/functions/GCPoolingLayer.h	/^    void run() override final;$/;"	m	class:arm_compute::GCPoolingLayer
final	arm_compute/runtime/MemoryRegion.h	/^class MemoryRegion final : public IMemoryRegion$/;"	c	namespace:arm_compute
final	arm_compute/runtime/NEON/AssemblyHelper.h	/^class AssemblyKernelGlue final$/;"	c	namespace:arm_compute
final	arm_compute/runtime/NEON/INESimpleFunction.h	/^    void run() override final;$/;"	m	class:arm_compute::INESimpleFunction
final	examples/graph_inception_v4.cpp	/^class InceptionV4Example final : public Example$/;"	c	file:
final	examples_mod/graph_inception_v4.cpp	/^class InceptionV4Example final : public Example$/;"	c	file:
final	tests/AssetsLibrary.h	/^class AssetsLibrary final$/;"	c	namespace:arm_compute::test
final	tests/PaddingCalculator.h	/^class PaddingCalculator final$/;"	c	namespace:arm_compute::test
final	tests/datasets/ActivationFunctionsDataset.h	/^class ActivationFunctions final : public framework::dataset::ContainerDataset<std::vector<ActivationLayerInfo::ActivationFunction>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/AlexNetGEMMDataset.h	/^class AlexNetGEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/BorderModeDataset.h	/^class BorderModes final : public framework::dataset::ContainerDataset<std::vector<BorderMode>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ChannelShuffleLayerDataset.h	/^class LargeRandomChannelShuffleLayerDataset final : public ChannelShuffleLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ChannelShuffleLayerDataset.h	/^class SmallRandomChannelShuffleLayerDataset final : public ChannelShuffleLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ConvertPolicyDataset.h	/^class ConvertPolicies final : public framework::dataset::ContainerDataset<std::vector<ConvertPolicy>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class LargeDepthwiseConvolutionLayerDataset final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class LargeDepthwiseConvolutionLayerDataset3x3 final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class OptimizedDepthwiseConvolutionLayerDataset3x3 final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class SmallDepthwiseConvolutionLayerDataset final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class SmallDepthwiseConvolutionLayerDataset3x3 final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^class SmallDepthwiseConvolutionLayerDataset3x3NCHW final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DilatedConvolutionLayerDataset.h	/^class LargeDilatedConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DilatedConvolutionLayerDataset.h	/^class SmallDilatedConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DilatedConvolutionLayerDataset.h	/^class TinyDilatedConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/DirectConvolutionLayerDataset.h	/^class DirectConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/FullyConnectedLayerDataset.h	/^class LargeFullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/FullyConnectedLayerDataset.h	/^class SmallFullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/FullyConnectedLayerDataset.h	/^class TinyFullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/GoogleNetGEMMDataset.h	/^class GoogleNetGEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/GradientDimensionDataset.h	/^class GradientDimensions final : public framework::dataset::ContainerDataset<std::vector<GradientDimension>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/HOGDescriptorDataset.h	/^class LargeHOGDescriptorDataset final : public HOGDescriptorDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/HOGDescriptorDataset.h	/^class SmallHOGDescriptorDataset final : public HOGDescriptorDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/HOGMultiDetectionDataset.h	/^class LargeHOGMultiDetectionDataset final : public HOGMultiDetectionDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/HOGMultiDetectionDataset.h	/^class SmallHOGMultiDetectionDataset final : public HOGMultiDetectionDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ImageFileDatasets.h	/^class LargeImageFiles final : public ImageFileDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ImageFileDatasets.h	/^class SmallImageFiles final : public ImageFileDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/InterpolationPolicyDataset.h	/^class InterpolationPolicies final : public framework::dataset::ContainerDataset<std::vector<InterpolationPolicy>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LSTMLayerDataset.h	/^class SmallLSTMLayerDataset final : public LSTMLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LargeConvolutionLayerDataset.h	/^class LargeConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LargeConvolutionLayerDataset.h	/^class LargeWinogradConvolutionLayer3x3Dataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LargeConvolutionLayerDataset.h	/^class LargeWinogradConvolutionLayer5x5Dataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LargeGEMMDataset.h	/^class LargeGEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LargeGEMMLowpDataset.h	/^class LargeGEMMLowpDataset final : public GEMMLowpDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LocallyConnectedDataset.h	/^class LargeLocallyConnectedDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/LocallyConnectedDataset.h	/^class SmallLocallyConnectedDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/MatrixMultiplyGEMMDataset.h	/^class MatrixMultiplyGEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/MatrixPatternDataset.h	/^class MatrixPatterns final : public framework::dataset::ContainerDataset<std::vector<MatrixPattern>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/NonLinearFilterFunctionDataset.h	/^class NonLinearFilterFunctions final : public framework::dataset::ContainerDataset<std::vector<NonLinearFilterFunction>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/NormalizationTypesDataset.h	/^class NormalizationTypes final : public framework::dataset::ContainerDataset<std::vector<NormType>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/OpticalFlowDataset.h	/^class LargeOpticalFlowDataset final : public OpticalFlowDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/OpticalFlowDataset.h	/^class SmallOpticalFlowDataset final : public OpticalFlowDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/PoolingLayerDataset.h	/^class PoolingLayerDatasetSpecial final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/PoolingTypesDataset.h	/^class PoolingTypes final : public framework::dataset::ContainerDataset<std::vector<PoolingType>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/RNNLayerDataset.h	/^class SmallRNNLayerDataset final : public RNNLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ROIPoolingLayerDataset.h	/^class SmallROIPoolingLayerDataset final : public ROIPoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/RandomBatchNormalizationLayerDataset.h	/^class RandomBatchNormalizationLayerDataset final : public BatchNormalizationLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/RandomNormalizePlanarYUVLayerDataset.h	/^class RandomNormalizePlanarYUVLayerDataset final : public NormalizePlanarYUVLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ReductionOperationDataset.h	/^class ReductionOperations final : public framework::dataset::ContainerDataset<std::vector<ReductionOperation>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ReshapeLayerDataset.h	/^class SmallReshapeLayerDataset final : public ReshapeLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/SamplingPolicyDataset.h	/^class SamplingPolicies final : public framework::dataset::ContainerDataset<std::vector<SamplingPolicy>>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ScaleLayerDataset.h	/^class LargeScaleLayerShapes final : public ScaleLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ScaleLayerDataset.h	/^class SmallScaleLayerShapes final : public ScaleLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class DepthConcatenateLayerShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class GlobalPoolingShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Large1DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Large2DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Large3DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Large3x3Shapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Large4DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Large5x5Shapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class LargeImageShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class LargeShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class LargeShapesBroadcast final : public framework::dataset::ZipDataset<ShapeDataset, ShapeDataset>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Medium2DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Medium3DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Medium4DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class MediumShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Small1DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Small2DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Small3DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Small3x3Shapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Small4DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Small5x5Shapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SmallDeconvolutionShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SmallDirectConvolutionShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SmallDirectConvolutionTensorShiftShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SmallImageShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SmallShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SmallShapesBroadcast final : public framework::dataset::ZipDataset<ShapeDataset, ShapeDataset>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SoftmaxLayerLargeShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SoftmaxLayerSmallShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class SoftmaxLayerTinyShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Tiny2DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Tiny3DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class Tiny4DShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class TinyDirectConvolutionShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class TinyShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ShapeDatasets.h	/^class WidthConcatenateLayerShapes final : public ShapeDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/SmallConvolutionLayerDataset.h	/^class SmallConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/SmallConvolutionLayerDataset.h	/^class SmallWinogradConvolutionLayer3x3Dataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/SmallConvolutionLayerDataset.h	/^class SmallWinogradConvolutionLayer5x5Dataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/SmallGEMMDataset.h	/^class SmallGEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/SmallGEMMLowpDataset.h	/^class SmallGEMMLowpDataset final : public GEMMLowpDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/ThresholdDataset.h	/^class MixedThresholdDataset final : public ThresholdDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/TinyConvolutionLayerDataset.h	/^class TinyConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/TinyGEMMDataset.h	/^class TinyGEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/WinogradInputTransformDataset.h	/^class LargeWinogradInputTransformDataset final : public WinogradInputTransformDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/WinogradInputTransformDataset.h	/^class SmallWinogradInputTransformDataset final : public WinogradInputTransformDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/WinogradOutputTransformDataset.h	/^class LargeWinogradOutputTransformDataset final : public WinogradOutputTransformDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/WinogradOutputTransformDataset.h	/^class SmallWinogradOutputTransformDataset final : public WinogradOutputTransformDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetActivationLayerDataset.h	/^class AlexNetActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^class AlexNetConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^class AlexNetDirectConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^class AlexNetWinogradLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetFullyConnectedLayerDataset.h	/^class AlexNetFullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetNormalizationLayerDataset.h	/^class AlexNetNormalizationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/alexnet/AlexNetPoolingLayerDataset.h	/^class AlexNetPoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ActivationLayerDataset.h	/^class GoogLeNetInceptionV1ActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^class GoogLeNetInceptionV1ConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^class GoogLeNetInceptionV1DirectConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^class GoogLeNetInceptionV1WinogradLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1FullyConnectedLayerDataset.h	/^class GoogLeNetInceptionV1FullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1GEMMDataset.h	/^class GoogLeNetInceptionV1GEMMDataset final : public GEMMDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1NormalizationLayerDataset.h	/^class GoogLeNetInceptionV1NormalizationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1PoolingLayerDataset.h	/^class GoogLeNetInceptionV1PoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ActivationLayerDataset.h	/^class GoogLeNetInceptionV4ActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4BatchNormalizationLayerDataset.h	/^class GoogLeNetInceptionV4BatchNormalizationLayerDataset final : public BatchNormalizationLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^class GoogLeNetInceptionV4ConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^class GoogLeNetInceptionV4DirectConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^class GoogLeNetInceptionV4WinogradLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4FullyConnectedLayerDataset.h	/^class GoogLeNetInceptionV4FullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset.h	/^class GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset final : public NormalizePlanarYUVLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4PoolingLayerDataset.h	/^class GoogLeNetInceptionV4PoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/lenet5/LeNet5ActivationLayerDataset.h	/^class LeNet5ActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/lenet5/LeNet5ConvolutionLayerDataset.h	/^class LeNet5ConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/lenet5/LeNet5FullyConnectedLayerDataset.h	/^class LeNet5FullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/lenet5/LeNet5PoolingLayerDataset.h	/^class LeNet5PoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/mobilenet/MobileNetActivationLayerDataset.h	/^class MobileNetActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/mobilenet/MobileNetBatchNormalizationLayerDataset.h	/^class MobileNetBatchNormalizationLayerDataset final : public BatchNormalizationLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/mobilenet/MobileNetConvolutionLayerDataset.h	/^class MobileNetConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseConvolutionLayerDataset.h	/^class MobileNetDepthwiseConvolutionLayerDataset final : public DepthwiseConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseSeparableConvolutionLayerDataset.h	/^class MobileNetDepthwiseSeparableConvolutionLayerDataset final : public DepthwiseSeparableConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/squeezenet/SqueezeNetActivationLayerDataset.h	/^class SqueezeNetActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^class SqueezeNetConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^class SqueezeNetWinogradLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/squeezenet/SqueezeNetPoolingLayerDataset.h	/^class SqueezeNetPoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/vgg/vgg16/VGG16ActivationLayerDataset.h	/^class VGG16ActivationLayerDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^class VGG16ConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^class VGG16DirectConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/vgg/vgg16/VGG16FullyConnectedLayerDataset.h	/^class VGG16FullyConnectedLayerDataset final : public FullyConnectedLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/vgg/vgg16/VGG16PoolingLayerDataset.h	/^class VGG16PoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^class YOLOV2ActivationLayerDataset final : public framework::dataset::JoinDataset<YOLOV2ActivationLayerRELUDataset, YOLOV2ActivationLayerLINEARDataset>$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^class YOLOV2ActivationLayerLINEARDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^class YOLOV2ActivationLayerRELUDataset final : public$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/yolo/v2/YOLOV2BatchNormalizationLayerDataset.h	/^class YOLOV2BatchNormalizationLayerDataset final : public BatchNormalizationLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/yolo/v2/YOLOV2ConvolutionLayerDataset.h	/^class YOLOV2ConvolutionLayerDataset final : public ConvolutionLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/datasets/system_tests/yolo/v2/YOLOV2PoolingLayerDataset.h	/^class YOLOV2PoolingLayerDataset final : public PoolingLayerDataset$/;"	c	namespace:arm_compute::test::datasets
final	tests/framework/Framework.h	/^class Framework final$/;"	c	namespace:arm_compute::test::framework
final	tests/framework/Registrars.h	/^class TestCaseRegistrar final$/;"	c	namespace:arm_compute::test::framework::detail
final	tests/framework/Registrars.h	/^class TestSuiteRegistrar final$/;"	c	namespace:arm_compute::test::framework::detail
final	tests/framework/TestCaseFactory.h	/^class DataTestCaseFactory final : public TestCaseFactory$/;"	c	namespace:arm_compute::test::framework
final	tests/framework/TestCaseFactory.h	/^class SimpleTestCaseFactory final : public TestCaseFactory$/;"	c	namespace:arm_compute::test::framework
final	tests/framework/TestFilter.h	/^class TestFilter final$/;"	c	namespace:arm_compute::test::framework
final	tests/framework/command_line/CommandLineParser.h	/^class CommandLineParser final$/;"	c	namespace:arm_compute::test::framework
final	tests/framework/datasets/InitializerListDataset.h	/^class InitializerListDataset final : public NamedDataset$/;"	c	namespace:arm_compute::test::framework::dataset
final	tests/framework/datasets/RangeDataset.h	/^class RangeDataset final : public NamedDataset$/;"	c	namespace:arm_compute::test::framework::dataset
final	tests/framework/instruments/SchedulerTimer.cpp	/^class Interceptor final : public IScheduler$/;"	c	namespace:arm_compute::test::framework	file:
final	utils/GraphUtils.h	/^class DummyAccessor final : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
final	utils/GraphUtils.h	/^class NumPyAccessor final : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
final	utils/GraphUtils.h	/^class NumPyBinLoader final : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
final	utils/GraphUtils.h	/^class PPMAccessor final : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
final	utils/GraphUtils.h	/^class RandomAccessor final : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
final	utils/GraphUtils.h	/^class TopNPredictionsAccessor final : public graph::ITensorAccessor$/;"	c	namespace:arm_compute::graph_utils
finalize	src/graph/GraphContext.cpp	/^void GraphContext::finalize()$/;"	f	class:arm_compute::graph::GraphContext
finalize	src/graph/frontend/Stream.cpp	/^void Stream::finalize(Target target, const GraphConfig &config)$/;"	f	class:arm_compute::graph::frontend::Stream
finalize	src/runtime/MemoryManagerOnDemand.cpp	/^void MemoryManagerOnDemand::finalize()$/;"	f	class:MemoryManagerOnDemand
finalize_graph	src/graph/GraphManager.cpp	/^void GraphManager::finalize_graph(Graph &graph, GraphContext &ctx, PassManager &pm, Target target)$/;"	f	class:arm_compute::graph::GraphManager
finalize_memory	arm_compute/runtime/MemoryGroupBase.h	/^inline void MemoryGroupBase<TensorType>::finalize_memory(TensorType *obj, void **handle, size_t size)$/;"	f	class:arm_compute::MemoryGroupBase
finalize_quantization	arm_compute/core/NEON/NEAsymm.h	/^uint8x16_t finalize_quantization(int32x4x4_t &in_s32,$/;"	f	namespace:arm_compute
finalize_quantization	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^inline uint8_t finalize_quantization(int32x4_t in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int32x4_t result_offset_after_shift_s32, uint8_t min_u8, uint8_t max_u8)$/;"	f	namespace:arm_compute
finalize_quantization	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^inline uint8x16_t finalize_quantization(int32x4x4_t &in_s32, int32x4_t result_shift_s32, uint8x16_t min_u8, uint8x16_t max_u8)$/;"	f	namespace:__anon265
find	tests/TensorCache.h	/^inline RawTensor *TensorCache::find(std::tuple<const std::string &, Format, Channel> key)$/;"	f	class:arm_compute::test::TensorCache
find	tests/TensorCache.h	/^inline RawTensor *TensorCache::find(std::tuple<const std::string &, Format> key)$/;"	f	class:arm_compute::test::TensorCache
find_backend	src/graph/backends/BackendRegistry.cpp	/^IDeviceBackend *BackendRegistry::find_backend(Target target)$/;"	f	class:arm_compute::graph::backends::BackendRegistry
find_counter_index_by_name	tests/framework/instruments/MaliCounter.cpp	/^int MaliCounter::find_counter_index_by_name(mali_userspace::MaliCounterBlockName block, const char *name)$/;"	f	class:arm_compute::test::framework::MaliCounter
find_optimal_lws	src/runtime/CL/CLTuner.cpp	/^cl::NDRange CLTuner::find_optimal_lws(ICLKernel &kernel)$/;"	f	class:CLTuner
find_or_create_raw_tensor	tests/AssetsLibrary.cpp	/^const RawTensor &AssetsLibrary::find_or_create_raw_tensor(const std::string &name, Format format) const$/;"	f	class:arm_compute::test::AssetsLibrary
find_or_create_raw_tensor	tests/AssetsLibrary.cpp	/^const RawTensor &AssetsLibrary::find_or_create_raw_tensor(const std::string &name, Format format, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
finish	include/CL/cl.hpp	/^    cl_int finish() const$/;"	f	class:cl::CommandQueue
finish	include/CL/cl.hpp	/^inline cl_int finish(void)$/;"	f	namespace:cl
finish	include/CL/cl2.hpp	/^    cl_int finish() const$/;"	f	class:cl::CommandQueue
finish	include/CL/cl2.hpp	/^inline cl_int finish(void)$/;"	f	namespace:cl
first_slice_window_1D	arm_compute/core/Window.h	/^    Window first_slice_window_1D() const$/;"	f	class:arm_compute::Window
first_slice_window_2D	arm_compute/core/Window.h	/^    Window first_slice_window_2D() const$/;"	f	class:arm_compute::Window
first_slice_window_3D	arm_compute/core/Window.h	/^    Window first_slice_window_3D() const$/;"	f	class:arm_compute::Window
first_slice_window_4D	arm_compute/core/Window.h	/^    Window first_slice_window_4D() const$/;"	f	class:arm_compute::Window
five	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t five      = vdupq_n_s32(5);$/;"	m	namespace:__anon295	file:
fixed__point_8h	documentation/fixed__point_8h.js	/^var fixed__point_8h =$/;"	v
fixed__point_8h.xhtml#abf77757e07132c678f7146c860e80fe1	documentation/navtreeindex43.js	/^"fixed__point_8h.xhtml#abf77757e07132c678f7146c860e80fe1":[6,0,2,0,0,0,36,106],$/;"	p	class:NAVTREEINDEX43
fixed_one	tests/validation/FixedPoint.h	/^    static constexpr T fixed_one(uint8_t p)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
fixed_point	tests/validation/FixedPoint.h	/^    fixed_point(U val, uint8_t p, bool is_raw = false)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
fixed_point	tests/validation/FixedPoint.h	/^    fixed_point(fixed_point<U> val, uint8_t p)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
fixed_point	tests/validation/FixedPoint.h	/^    fixed_point(float val, uint8_t p)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
fixed_point	tests/validation/FixedPoint.h	/^    fixed_point(std::string str, uint8_t p)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
fixed_point	tests/validation/FixedPoint.h	/^class fixed_point$/;"	c	namespace:arm_compute::test::fixed_point_arithmetic
fixed_point_arithmetic	tests/validation/FixedPoint.h	/^namespace fixed_point_arithmetic$/;"	n	namespace:arm_compute::test
fixed_point_operation	tests/validation/reference/FixedPoint.cpp	/^SimpleTensor<T> fixed_point_operation(const SimpleTensor<T> &src, FixedPointOp op)$/;"	f	namespace:arm_compute::test::validation::reference
fixed_point_pixel_wise_multiplication	tests/validation/reference/FixedPointPixelWiseMultiplication.cpp	/^SimpleTensor<T> fixed_point_pixel_wise_multiplication(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2, float scale, ConvertPolicy convert_policy)$/;"	f	namespace:arm_compute::test::validation::reference
fixed_point_position	tests/CL/CLAccessor.h	/^inline int CLAccessor::fixed_point_position() const$/;"	f	class:arm_compute::test::CLAccessor
fixed_point_position	tests/GLES_COMPUTE/GCAccessor.h	/^inline int GCAccessor::fixed_point_position() const$/;"	f	class:arm_compute::test::GCAccessor
fixed_point_position	tests/NEON/Accessor.h	/^inline int Accessor::fixed_point_position() const$/;"	f	class:arm_compute::test::Accessor
fixed_point_position	tests/SimpleTensor.h	/^int SimpleTensor<T>::fixed_point_position() const$/;"	f	class:arm_compute::test::SimpleTensor
fixed_step	tests/validation/FixedPoint.h	/^    static constexpr float fixed_step(uint8_t p)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
flags	include/linux/EGL/fbdev_window.h	/^	fbdev_pixmap_flags flags;$/;"	m	struct:fbdev_pixmap
flags	tests/framework/instruments/hwc.hpp	/^    uint32_t      flags;$/;"	m	struct:mali_userspace::__anon390::kbase_ioctl_get_gpuprops
flatten_layer	tests/validation/reference/FlattenLayer.cpp	/^SimpleTensor<T> flatten_layer(const SimpleTensor<T> &src, const TensorShape &shape_flatten)$/;"	f	namespace:arm_compute::test::validation::reference
float16_TYPE	src/core/CL/cl_kernels/fixed_point.h	477;"	d
float2half	include/half/half.hpp	/^		template<std::float_round_style R,typename T> uint16 float2half(T value)$/;"	f	namespace:half_float
float2half_impl	include/half/half.hpp	/^		template<std::float_round_style R,typename T> uint16 float2half_impl(T value, ...)$/;"	f	namespace:half_float
float2half_impl	include/half/half.hpp	/^		template<std::float_round_style R> uint16 float2half_impl(double value, true_type)$/;"	f	namespace:half_float
float2half_impl	include/half/half.hpp	/^		template<std::float_round_style R> uint16 float2half_impl(float value, true_type)$/;"	f	namespace:half_float
float_construct	src/core/GLES_COMPUTE/cs_shaders/dropout.cs	/^float float_construct(uint m)$/;"	m
float_min	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	/^const float float_min = -1.0 \/ 0.0;$/;"	v
float_to_string_with_full_precision	arm_compute/core/Utils.h	/^inline std::string float_to_string_with_full_precision(float val)$/;"	f	namespace:arm_compute
floating_point	tests/framework/instruments/Measurement.h	/^                double        floating_point;$/;"	m	union:arm_compute::test::framework::Measurement::Value::__anon388
floatx16	src/core/CL/cl_kernels/fixed_point.h	476;"	d
floor	include/half/half.hpp	/^			static half floor(half arg) { return half(binary, round_half<std::round_toward_neg_infinity>(arg.data_)); }$/;"	f	struct:detail::functions
floor	include/half/half.hpp	/^		inline half floor(expr arg) { return functions::floor(arg); }$/;"	f	namespace:detail
floor	include/half/half.hpp	/^		inline half floor(half arg) { return functions::floor(arg); }$/;"	f	namespace:detail
floor_8cl	documentation/floor_8cl.js	/^var floor_8cl =$/;"	v
floor_layer	tests/validation/reference/Floor.cpp	/^SimpleTensor<T> floor_layer(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
flush	include/CL/cl.hpp	/^    cl_int flush() const$/;"	f	class:cl::CommandQueue
flush	include/CL/cl.hpp	/^inline cl_int flush(void)$/;"	f	namespace:cl
flush	include/CL/cl2.hpp	/^    cl_int flush() const$/;"	f	class:cl::CommandQueue
flush	include/CL/cl2.hpp	/^inline cl_int flush(void)$/;"	f	namespace:cl
fma	include/half/half.hpp	/^			static expr fma(float x, float y, float z)$/;"	f	struct:detail::functions
fma	include/half/half.hpp	/^		inline expr fma(expr x, expr y, expr z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(expr x, expr y, half z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(expr x, half y, expr z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(expr x, half y, half z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(half x, expr y, expr z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(half x, expr y, half z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(half x, half y, expr z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fma	include/half/half.hpp	/^		inline expr fma(half x, half y, half z) { return functions::fma(x, y, z); }$/;"	f	namespace:detail
fmax	include/half/half.hpp	/^			static expr fmax(float x, float y)$/;"	f	struct:detail::binary_specialized
fmax	include/half/half.hpp	/^			static half fmax(half x, half y)$/;"	f	struct:detail::binary_specialized
fmax	include/half/half.hpp	/^		inline expr fmax(expr x, expr y) { return binary_specialized<expr,expr>::fmax(x, y); }$/;"	f	namespace:detail
fmax	include/half/half.hpp	/^		inline expr fmax(expr x, half y) { return binary_specialized<expr,half>::fmax(x, y); }$/;"	f	namespace:detail
fmax	include/half/half.hpp	/^		inline expr fmax(half x, expr y) { return binary_specialized<half,expr>::fmax(x, y); }$/;"	f	namespace:detail
fmax	include/half/half.hpp	/^		inline half fmax(half x, half y) { return binary_specialized<half,half>::fmax(x, y); }$/;"	f	namespace:detail
fmin	include/half/half.hpp	/^			static expr fmin(float x, float y)$/;"	f	struct:detail::binary_specialized
fmin	include/half/half.hpp	/^			static half fmin(half x, half y)$/;"	f	struct:detail::binary_specialized
fmin	include/half/half.hpp	/^		inline expr fmin(expr x, expr y) { return binary_specialized<expr,expr>::fmin(x, y); }$/;"	f	namespace:detail
fmin	include/half/half.hpp	/^		inline expr fmin(expr x, half y) { return binary_specialized<expr,half>::fmin(x, y); }$/;"	f	namespace:detail
fmin	include/half/half.hpp	/^		inline expr fmin(half x, expr y) { return binary_specialized<half,expr>::fmin(x, y); }$/;"	f	namespace:detail
fmin	include/half/half.hpp	/^		inline half fmin(half x, half y) { return binary_specialized<half,half>::fmin(x, y); }$/;"	f	namespace:detail
fmod	include/half/half.hpp	/^			static expr fmod(float x, float y) { return expr(std::fmod(x, y)); }$/;"	f	struct:detail::functions
fmod	include/half/half.hpp	/^		inline expr fmod(expr x, expr y) { return functions::fmod(x, y); }$/;"	f	namespace:detail
fmod	include/half/half.hpp	/^		inline expr fmod(expr x, half y) { return functions::fmod(x, y); }$/;"	f	namespace:detail
fmod	include/half/half.hpp	/^		inline expr fmod(half x, expr y) { return functions::fmod(x, y); }$/;"	f	namespace:detail
fmod	include/half/half.hpp	/^		inline expr fmod(half x, half y) { return functions::fmod(x, y); }$/;"	f	namespace:detail
foldl	arm_compute/core/utils/misc/Utility.h	/^inline T &&foldl(F &&, T &&value)$/;"	f	namespace:arm_compute::utility
foldl	tests/Utils.h	/^inline I foldl(F &&func, I &&initial, T &&value, Vs &&... values)$/;"	f	namespace:arm_compute::test
foldl	tests/Utils.h	/^inline T foldl(F &&, const T &value)$/;"	f	namespace:arm_compute::test
for_each	arm_compute/core/utils/misc/Utility.h	/^inline void for_each(F &&)$/;"	f	namespace:arm_compute::utility
for_each	arm_compute/core/utils/misc/Utility.h	/^inline void for_each(F &&func, T &&arg, Ts &&... args)$/;"	f	namespace:arm_compute::utility
for_each_error	arm_compute/core/Validate.h	/^inline arm_compute::Status for_each_error(F &&)$/;"	f	namespace:arm_compute::detail
for_each_error	arm_compute/core/Validate.h	/^inline arm_compute::Status for_each_error(F &&func, T &&arg, Ts &&... args)$/;"	f	namespace:arm_compute::detail
force_target_to_graph	src/graph/Utils.cpp	/^void force_target_to_graph(Graph &g, Target target)$/;"	f	namespace:arm_compute::graph
format	src/core/MultiImageInfo.cpp	/^Format MultiImageInfo::format() const$/;"	f	class:MultiImageInfo
format	src/core/PyramidInfo.cpp	/^Format PyramidInfo::format() const$/;"	f	class:PyramidInfo
format	tests/CL/CLAccessor.h	/^inline Format CLAccessor::format() const$/;"	f	class:arm_compute::test::CLAccessor
format	tests/GLES_COMPUTE/GCAccessor.h	/^inline Format GCAccessor::format() const$/;"	f	class:arm_compute::test::GCAccessor
format	tests/NEON/Accessor.h	/^inline Format Accessor::format() const$/;"	f	class:arm_compute::test::Accessor
format	tests/SimpleTensor.h	/^Format SimpleTensor<T>::format() const$/;"	f	class:arm_compute::test::SimpleTensor
forward	arm_compute/core/utils/misc/Utility.h	/^inline auto foldl(F &&func, T &&initial, U &&value, Us &&... values) -> decltype(func(std::forward<T>(initial), std::forward<U>(value)))$/;"	f	class:arm_compute::utility::std
forward	tests/framework/datasets/ContainerDataset.h	/^        : NamedDataset{ std::move(name) }, _container(std::forward<T>(container))$/;"	f	class:arm_compute::test::framework::dataset::ContainerDataset
forward	tests/framework/datasets/InitializerListDataset.h	/^        : NamedDataset{ std::move(name) }, _data(std::forward<std::initializer_list<T>>(list))$/;"	f	class:arm_compute::test::framework::dataset::final
forward_descriptors	src/graph/nodes/ActivationLayerNode.cpp	/^bool ActivationLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::ActivationLayerNode
forward_descriptors	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^bool BatchNormalizationLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
forward_descriptors	src/graph/nodes/ConstNode.cpp	/^bool ConstNode::forward_descriptors()$/;"	f	class:arm_compute::graph::ConstNode
forward_descriptors	src/graph/nodes/ConvolutionLayerNode.cpp	/^bool ConvolutionLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
forward_descriptors	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^bool DepthConcatenateLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
forward_descriptors	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^bool DepthwiseConvolutionLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
forward_descriptors	src/graph/nodes/EltwiseLayerNode.cpp	/^bool EltwiseLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::EltwiseLayerNode
forward_descriptors	src/graph/nodes/FlattenLayerNode.cpp	/^bool FlattenLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::FlattenLayerNode
forward_descriptors	src/graph/nodes/FullyConnectedLayer.cpp	/^bool FullyConnectedLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
forward_descriptors	src/graph/nodes/InputNode.cpp	/^bool InputNode::forward_descriptors()$/;"	f	class:arm_compute::graph::InputNode
forward_descriptors	src/graph/nodes/NormalizationLayerNode.cpp	/^bool NormalizationLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::NormalizationLayerNode
forward_descriptors	src/graph/nodes/OutputNode.cpp	/^bool OutputNode::forward_descriptors()$/;"	f	class:arm_compute::graph::OutputNode
forward_descriptors	src/graph/nodes/PoolingLayerNode.cpp	/^bool PoolingLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::PoolingLayerNode
forward_descriptors	src/graph/nodes/ReshapeLayer.cpp	/^bool ReshapeLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::ReshapeLayerNode
forward_descriptors	src/graph/nodes/SoftmaxLayerNode.cpp	/^bool SoftmaxLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::SoftmaxLayerNode
forward_descriptors	src/graph/nodes/SplitLayerNode.cpp	/^bool SplitLayerNode::forward_descriptors()$/;"	f	class:arm_compute::graph::SplitLayerNode
forward_tail	arm_compute/graph/frontend/IStream.h	/^    void forward_tail(NodeID nid)$/;"	f	class:arm_compute::graph::frontend::IStream
four	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t four      = vdupq_n_s32(4);$/;"	m	namespace:__anon295	file:
fp16	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^namespace fp16$/;"	n	file:
fp16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^namespace fp16$/;"	n	file:
fp16	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^namespace fp16$/;"	n	file:
fp16	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^namespace fp16$/;"	n	file:
fp16	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^namespace fp16$/;"	n	file:
fp16_supported	src/core/CL/CLHelpers.cpp	/^bool fp16_supported(const cl::Device &device)$/;"	f	namespace:arm_compute
fpclassify	include/half/half.hpp	/^			static int fpclassify(half arg)$/;"	f	struct:detail::functions
fpclassify	include/half/half.hpp	/^		inline int fpclassify(expr arg) { return functions::fpclassify(arg); }$/;"	f	namespace:detail
fpclassify	include/half/half.hpp	/^		inline int fpclassify(half arg) { return functions::fpclassify(arg); }$/;"	f	namespace:detail
framework	tests/framework/Asserts.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/DatasetModes.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/DatasetModes.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/Exceptions.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/Exceptions.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/Fixture.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/Framework.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/Framework.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/Profiler.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/Profiler.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/Registrars.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/TestCase.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/TestCaseFactory.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/TestFilter.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/TestFilter.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/TestResult.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/Utils.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/CommandLineParser.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/command_line/CommandLineParser.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/CommonOptions.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/command_line/CommonOptions.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/EnumListOption.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/EnumOption.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/ListOption.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/Option.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/command_line/Option.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/SimpleOption.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/command_line/ToggleOption.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/command_line/ToggleOption.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/CartesianProductDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/ContainerDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/Dataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/InitializerListDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/JoinDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/RangeDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/SingletonDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/datasets/ZipDataset.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/Instrument.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/Instruments.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/Instruments.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/InstrumentsStats.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/InstrumentsStats.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/MaliCounter.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/MaliCounter.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/Measurement.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/OpenCLMemoryUsage.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/OpenCLTimer.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/OpenCLTimer.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/PMU.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/PMU.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/PMUCounter.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/PMUCounter.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/SchedulerTimer.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/SchedulerTimer.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/instruments/WallClockTimer.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/instruments/WallClockTimer.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/printers/JSONPrinter.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/printers/JSONPrinter.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/printers/PrettyPrinter.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/printers/PrettyPrinter.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/printers/Printer.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/printers/Printer.h	/^namespace framework$/;"	n	namespace:arm_compute::test
framework	tests/framework/printers/Printers.cpp	/^namespace framework$/;"	n	namespace:arm_compute::test	file:
framework	tests/framework/printers/Printers.h	/^namespace framework$/;"	n	namespace:arm_compute::test
free	src/graph/backends/CL/CLSubTensorHandle.cpp	/^void CLSubTensorHandle::free()$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
free	src/graph/backends/CL/CLTensorHandle.cpp	/^void CLTensorHandle::free()$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
free	src/graph/backends/GLES/GCTensorHandle.cpp	/^void GCTensorHandle::free()$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
free	src/graph/backends/NEON/NESubTensorHandle.cpp	/^void NESubTensorHandle::free()$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
free	src/graph/backends/NEON/NETensorHandle.cpp	/^void NETensorHandle::free()$/;"	f	class:arm_compute::graph::backends::NETensorHandle
free	src/runtime/Allocator.cpp	/^void Allocator::free(void *ptr)$/;"	f	class:Allocator
free	src/runtime/CL/CLBufferAllocator.cpp	/^void CLBufferAllocator::free(void *ptr)$/;"	f	class:CLBufferAllocator
free	src/runtime/CL/CLHOG.cpp	/^void CLHOG::free()$/;"	f	class:CLHOG
free	src/runtime/CL/CLTensorAllocator.cpp	/^void CLTensorAllocator::free()$/;"	f	class:CLTensorAllocator
free	src/runtime/GLES_COMPUTE/GCBufferAllocator.cpp	/^void GCBufferAllocator::free(void *ptr)$/;"	f	class:arm_compute::GCBufferAllocator
free	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^void GCTensorAllocator::free()$/;"	f	class:GCTensorAllocator
free	src/runtime/TensorAllocator.cpp	/^void TensorAllocator::free()$/;"	f	class:TensorAllocator
free_blobs	src/runtime/BlobMemoryPool.cpp	/^void BlobMemoryPool::free_blobs()$/;"	f	class:BlobMemoryPool
frexp	include/half/half.hpp	/^			static half frexp(half arg, int *exp)$/;"	f	struct:detail::functions
frexp	include/half/half.hpp	/^		inline half frexp(expr arg, int *exp) { return functions::frexp(arg, exp); }$/;"	f	namespace:detail
frexp	include/half/half.hpp	/^		inline half frexp(half arg, int *exp) { return functions::frexp(arg, exp); }$/;"	f	namespace:detail
front	include/CL/cl.hpp	/^    T& front(void)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
front	include/CL/cl.hpp	/^    const T& front(void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
frontend	arm_compute/graph/frontend/ILayer.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	arm_compute/graph/frontend/IStream.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	arm_compute/graph/frontend/IStreamOperators.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	arm_compute/graph/frontend/Layers.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	arm_compute/graph/frontend/Stream.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	arm_compute/graph/frontend/SubStream.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	arm_compute/graph/frontend/Types.h	/^namespace frontend$/;"	n	namespace:arm_compute::graph
frontend	src/graph/frontend/Stream.cpp	/^namespace frontend$/;"	n	namespace:arm_compute::graph	file:
frontend	src/graph/frontend/SubStream.cpp	/^namespace frontend$/;"	n	namespace:arm_compute::graph	file:
fully_connected_layer	tests/validation/reference/FullyConnectedLayer.cpp	/^SimpleTensor<T> fully_connected_layer(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<TB> &bias, const TensorShape &dst_shape)$/;"	f	namespace:arm_compute::test::validation::reference
func	tests/Utils.h	/^inline auto foldl(F &&func, T &&value1, U &&value2) -> decltype(func(value1, value2))$/;"	f	namespace:arm_compute::test
func_on_all_printers	tests/framework/Framework.cpp	/^void Framework::func_on_all_printers(F &&func)$/;"	f	class:arm_compute::test::framework::Framework
func_table	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^    static const NEMinMaxLocationKernel::MinMaxLocFunction func_table[sizeof...(N)];$/;"	m	struct:arm_compute::NEMinMaxLocationKernel::create_func_table	file:
func_table	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^const NEMinMaxLocationKernel::MinMaxLocFunction NEMinMaxLocationKernel::create_func_table<T, utility::index_sequence<N...>>::func_table[sizeof...(N)] =$/;"	m	class:arm_compute::NEMinMaxLocationKernel::create_func_table	file:
functionImplementation_	include/CL/cl.hpp	/^    functionImplementation_(const FunctorType &functor) :$/;"	f	struct:cl::detail::functionImplementation_
functionImplementation_	include/CL/cl.hpp	/^struct functionImplementation_$/;"	s	namespace:cl::detail
functions	include/half/half.hpp	/^		struct functions$/;"	s	namespace:detail
functions	tests/validation/FixedPoint.h	/^struct functions$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::detail
functions_dup	documentation/functions_dup.js	/^var functions_dup =$/;"	v
functions_func	documentation/functions_func.js	/^var functions_func =$/;"	v
functions_vars	documentation/functions_vars.js	/^var functions_vars =$/;"	v
functor_	include/CL/cl.hpp	/^    FunctorType functor_;$/;"	m	struct:cl::detail::functionImplementation_
functor_	include/CL/cl2.hpp	/^        FunctorType functor_;$/;"	m	struct:cl::compatibility::make_kernel
fuse_batch_norm_with_activation	src/graph/mutators/NodeFusionMutator.cpp	/^void fuse_batch_norm_with_activation(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
fused_activation	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^ActivationLayerInfo BatchNormalizationLayerNode::fused_activation() const$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
gaussian3x3	examples/cl_convolution.cpp	/^const int16_t gaussian3x3[] =$/;"	v
gaussian3x3	examples/neon_convolution.cpp	/^const int16_t gaussian3x3[] =$/;"	v
gaussian3x3	tests/validation/reference/Gaussian3x3.cpp	/^SimpleTensor<T> gaussian3x3(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
gaussian5x5	examples/cl_convolution.cpp	/^const int16_t gaussian5x5[] =$/;"	v
gaussian5x5	examples/neon_convolution.cpp	/^const int16_t gaussian5x5[] =$/;"	v
gaussian5x5	tests/validation/reference/Gaussian5x5.cpp	/^SimpleTensor<T> gaussian5x5(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
gaussian__pyramid_8cl	documentation/gaussian__pyramid_8cl.js	/^var gaussian__pyramid_8cl =$/;"	v
gaussian_pyramid_half	tests/validation/reference/GaussianPyramidHalf.cpp	/^std::vector<SimpleTensor<T>> gaussian_pyramid_half(const SimpleTensor<T> &src, BorderMode border_mode, uint8_t constant_border_value, size_t num_levels)$/;"	f	namespace:arm_compute::test::validation::reference
gc__absdiff_8cpp	documentation/gc__absdiff_8cpp.js	/^var gc__absdiff_8cpp =$/;"	v
gc__dc_8cpp	documentation/gc__dc_8cpp.js	/^var gc__dc_8cpp =$/;"	v
gc_buffer	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^GLuint GCTensor::gc_buffer() const$/;"	f	class:GCTensor
gemm	src/core/NEON/kernels/arm_gemm/gemm_fp16.cpp	/^UniqueGemmCommon<__fp16, __fp16> gemm(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	namespace:arm_gemm
gemm	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^UniqueGemmCommon<float, float> gemm<float, float>(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	namespace:arm_gemm
gemm	src/core/NEON/kernels/arm_gemm/gemm_int16.cpp	/^UniqueGemmCommon<int16_t, int32_t> gemm<int16_t, int32_t>(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	namespace:arm_gemm
gemm	src/core/NEON/kernels/arm_gemm/gemm_int8.cpp	/^UniqueGemmCommon<int8_t, int32_t> gemm<int8_t, int32_t>(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	namespace:arm_gemm
gemm	src/core/NEON/kernels/arm_gemm/gemm_uint16.cpp	/^UniqueGemmCommon<uint16_t, uint32_t> gemm<uint16_t, uint32_t>(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	namespace:arm_gemm
gemm	src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp	/^UniqueGemmCommon<uint8_t, uint32_t> gemm<uint8_t, uint32_t>(const CPUInfo &ci, const unsigned int M, const unsigned int N, const unsigned int K,$/;"	f	namespace:arm_gemm
gemm	tests/validation/reference/GEMM.cpp	/^SimpleTensor<T> gemm(const SimpleTensor<T> &a, const SimpleTensor<T> &b, const SimpleTensor<T> &c, float alpha, float beta)$/;"	f	namespace:arm_compute::test::validation::reference
gemm_interleave_16bit_elements	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^void gemm_interleave_16bit_elements(const ITensor *input, ITensor *output, const Window &window)$/;"	f	namespace:__anon260
gemm_interleave_32bit_elements	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^void gemm_interleave_32bit_elements(const ITensor *input, ITensor *output, const Window &window)$/;"	f	namespace:__anon260
gemm_interleave_4x4	tests/validation/reference/GEMMInterleave4x4.h	/^SimpleTensor<T> gemm_interleave_4x4(const SimpleTensor<T> &in, SimpleTensor<T> &out)$/;"	f	namespace:arm_compute::test::validation::reference
gemm_interleave_8bit_elements	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^void gemm_interleave_8bit_elements(const ITensor *input, ITensor *output, const Window &window)$/;"	f	namespace:__anon260
gemm_interleave_blocked	tests/validation/reference/GEMMInterleaveBlocked.h	/^SimpleTensor<T> gemm_interleave_blocked(const SimpleTensor<T> &in, SimpleTensor<T> &out, int int_by, int block, bool transposed)$/;"	f	namespace:arm_compute::test::validation::reference
gemm_s16_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    gemm_s16_12x8(const CPUInfo *ci)$/;"	f	class:arm_gemm::gemm_s16_12x8
gemm_s16_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^class gemm_s16_12x8$/;"	c	namespace:arm_gemm
gemm_s8_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    gemm_s8_12x8(const CPUInfo *ci)$/;"	f	class:arm_gemm::gemm_s8_12x8
gemm_s8_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^class gemm_s8_12x8$/;"	c	namespace:arm_gemm
gemm_s8_4x4	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    gemm_s8_4x4(const CPUInfo *ci)$/;"	f	class:arm_gemm::gemm_s8_4x4
gemm_s8_4x4	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^class gemm_s8_4x4$/;"	c	namespace:arm_gemm
gemm_transpose_1xW	tests/validation/reference/GEMMTranspose1xW.h	/^SimpleTensor<T> gemm_transpose_1xW(const SimpleTensor<T> &in)$/;"	f	namespace:arm_compute::test::validation::reference
gemm_u16_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    gemm_u16_12x8(const CPUInfo *ci)$/;"	f	class:arm_gemm::gemm_u16_12x8
gemm_u16_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^class gemm_u16_12x8$/;"	c	namespace:arm_gemm
gemm_u8_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    gemm_u8_12x8(const CPUInfo *ci)$/;"	f	class:arm_gemm::gemm_u8_12x8
gemm_u8_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^class gemm_u8_12x8$/;"	c	namespace:arm_gemm
gemm_u8_4x4	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    gemm_u8_4x4(const CPUInfo *ci)$/;"	f	class:arm_gemm::gemm_u8_4x4
gemm_u8_4x4	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^class gemm_u8_4x4$/;"	c	namespace:arm_gemm
gemmlowp	tests/validation/reference/GEMMLowp.cpp	/^SimpleTensor<T1> gemmlowp(const SimpleTensor<T2> &a, const SimpleTensor<T2> &b)$/;"	f	namespace:arm_compute::test::validation::reference
gemmlowp_matrix_multiply_core	tests/validation/reference/GEMMLowp.cpp	/^SimpleTensor<T_out> gemmlowp_matrix_multiply_core(const SimpleTensor<T_in> &a, const SimpleTensor<T_in> &b, int32_t a_offset, int32_t b_offset)$/;"	f	namespace:arm_compute::test::validation::reference
gemmlowp_quantize_down_int32_to_uint8_scale	tests/validation/reference/GEMMLowp.cpp	/^SimpleTensor<uint8_t> gemmlowp_quantize_down_int32_to_uint8_scale(const SimpleTensor<T> &in, const SimpleTensor<T> &bias, int32_t result_offset, int32_t result_mult_int, int32_t result_shift,$/;"	f	namespace:arm_compute::test::validation::reference
gemmlowp_quantize_down_int32_to_uint8_scale	tests/validation/reference/GEMMLowp.cpp	/^SimpleTensor<uint8_t> gemmlowp_quantize_down_int32_to_uint8_scale(const SimpleTensor<T> &in, int32_t result_offset, int32_t result_mult_int, int32_t result_shift, int32_t min, int32_t max)$/;"	f	namespace:arm_compute::test::validation::reference
gemmlowp_quantize_down_int32_to_uint8_scale_by_fixedpoint	tests/validation/reference/GEMMLowp.cpp	/^SimpleTensor<uint8_t> gemmlowp_quantize_down_int32_to_uint8_scale_by_fixedpoint(const SimpleTensor<T> &in, const SimpleTensor<T> &bias, int32_t result_fixedpoint_multiplier, int32_t result_shift,$/;"	f	namespace:arm_compute::test::validation::reference
gemmlowp_quantize_down_int32_to_uint8_scale_by_fixedpoint	tests/validation/reference/GEMMLowp.cpp	/^SimpleTensor<uint8_t> gemmlowp_quantize_down_int32_to_uint8_scale_by_fixedpoint(const SimpleTensor<T> &in, int32_t result_fixedpoint_multiplier, int32_t result_shift,$/;"	f	namespace:arm_compute::test::validation::reference
generate_convolver	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::generate_convolver()$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
generate_input_shapes	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^    inline std::vector<TensorShape> generate_input_shapes(TensorShape shape)$/;"	f	class:arm_compute::test::benchmark::DepthConcatenateLayerFixture
generate_random_keypoints	tests/Utils.h	/^inline std::vector<KeyPoint> generate_random_keypoints(const TensorShape &shape, size_t num_keypoints, std::random_device::result_type seed, size_t num_levels = 1)$/;"	f	namespace:arm_compute::test
generate_random_real	tests/Utils.h	/^inline std::vector<T> generate_random_real(unsigned int num_values, T min, T max, std::random_device::result_type seed)$/;"	f	namespace:arm_compute::test
generate_random_rois	tests/Utils.h	/^inline std::vector<ROI> generate_random_rois(const TensorShape &shape, const ROIPoolingLayerInfo &pool_info, unsigned int num_rois, std::random_device::result_type seed)$/;"	f	namespace:arm_compute::test
get	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    const size_t *get() const$/;"	f	class:arm_compute::gles::NDRange
get	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    size_t *get()$/;"	f	class:arm_compute::gles::NDRange
get	arm_compute/core/PixelValue.h	/^    T get() const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(double &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(float &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(half &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(int16_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(int32_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(int64_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(int8_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(uint16_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(uint32_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(uint64_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/PixelValue.h	/^    void get(uint8_t &v) const$/;"	f	class:arm_compute::PixelValue
get	arm_compute/core/utils/strong_type/StrongType.h	/^    T &get()$/;"	f	class:arm_compute::strong_type::StrongType
get	arm_compute/core/utils/strong_type/StrongType.h	/^    const T &get() const$/;"	f	class:arm_compute::strong_type::StrongType
get	include/CL/cl.hpp	/^    static Platform get($/;"	f	class:cl::Platform
get	include/CL/cl.hpp	/^    static cl_int get($/;"	f	class:cl::Platform
get	include/CL/cl2.hpp	/^    cl_type get() { return object_; }$/;"	f	class:cl::detail::Wrapper
get	include/CL/cl2.hpp	/^    const cl_type get() const { return object_; }$/;"	f	class:cl::detail::Wrapper
get	include/CL/cl2.hpp	/^    const size_type* get() const$/;"	f	class:cl::NDRange
get	include/CL/cl2.hpp	/^    size_type* get()$/;"	f	class:cl::NDRange
get	include/CL/cl2.hpp	/^    static Platform get($/;"	f	class:cl::Platform
get	include/CL/cl2.hpp	/^    static cl_int get($/;"	f	class:cl::Platform
get	src/core/CL/CLKernelLibrary.cpp	/^CLKernelLibrary &CLKernelLibrary::get()$/;"	f	class:CLKernelLibrary
get	src/core/CL/OpenCL.cpp	/^CLSymbols &CLSymbols::get()$/;"	f	class:arm_compute::CLSymbols
get	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernelLibrary &GCKernelLibrary::get()$/;"	f	class:GCKernelLibrary
get	src/core/GLES_COMPUTE/OpenGLES.cpp	/^    static GLESSymbols &get()$/;"	f	class:GLESSymbols
get	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void *get(const int index, T func)$/;"	f	class:arm_gemm::Buffer
get	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void *get(const int index, T func)$/;"	f	class:arm_gemm::BufferManager
get	src/core/utils/logging/LoggerRegistry.cpp	/^LoggerRegistry &LoggerRegistry::get()$/;"	f	class:LoggerRegistry
get	src/graph/Workload.cpp	/^TaskExecutor &TaskExecutor::get()$/;"	f	class:arm_compute::graph::TaskExecutor
get	src/graph/backends/BackendRegistry.cpp	/^BackendRegistry &BackendRegistry::get()$/;"	f	class:arm_compute::graph::backends::BackendRegistry
get	src/runtime/CL/CLScheduler.cpp	/^CLScheduler &CLScheduler::get()$/;"	f	class:CLScheduler
get	src/runtime/CPP/CPPScheduler.cpp	/^CPPScheduler &CPPScheduler::get()$/;"	f	class:arm_compute::CPPScheduler
get	src/runtime/CPP/SingleThreadScheduler.cpp	/^SingleThreadScheduler &SingleThreadScheduler::get()$/;"	f	class:arm_compute::SingleThreadScheduler
get	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^GCScheduler &GCScheduler::get()$/;"	f	class:GCScheduler
get	src/runtime/OMP/OMPScheduler.cpp	/^OMPScheduler &OMPScheduler::get()$/;"	f	class:OMPScheduler
get	src/runtime/Scheduler.cpp	/^IScheduler &Scheduler::get()$/;"	f	class:Scheduler
get	tests/AssetsLibrary.cpp	/^RawTensor AssetsLibrary::get(const std::string &name)$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^RawTensor AssetsLibrary::get(const std::string &name, Channel channel)$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^RawTensor AssetsLibrary::get(const std::string &name, DataType data_type, int num_channels) const$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^RawTensor AssetsLibrary::get(const std::string &name, Format format)$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^RawTensor AssetsLibrary::get(const std::string &name, Format format, Channel channel)$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^const RawTensor &AssetsLibrary::get(const std::string &name) const$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^const RawTensor &AssetsLibrary::get(const std::string &name, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^const RawTensor &AssetsLibrary::get(const std::string &name, Format format) const$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/AssetsLibrary.cpp	/^const RawTensor &AssetsLibrary::get(const std::string &name, Format format, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
get	tests/framework/Framework.cpp	/^Framework &Framework::get()$/;"	f	class:arm_compute::test::framework::Framework
getArgInfo	include/CL/cl.hpp	/^    cl_int getArgInfo(cl_uint argIndex, cl_kernel_arg_info name, T* param) const$/;"	f	class:cl::Kernel
getArgInfo	include/CL/cl.hpp	/^    getArgInfo(cl_uint argIndex, cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getArgInfo	include/CL/cl2.hpp	/^    cl_int getArgInfo(cl_uint argIndex, cl_kernel_arg_info name, T* param) const$/;"	f	class:cl::Kernel
getArgInfo	include/CL/cl2.hpp	/^    getArgInfo(cl_uint argIndex, cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getBuildInfo	include/CL/cl.hpp	/^    cl_int getBuildInfo($/;"	f	class:cl::Program
getBuildInfo	include/CL/cl.hpp	/^    getBuildInfo(const Device& device, cl_int* err = NULL) const$/;"	f	class:cl::Program
getBuildInfo	include/CL/cl2.hpp	/^        getBuildInfo(cl_int *err = NULL) const$/;"	f	class:cl::Program
getBuildInfo	include/CL/cl2.hpp	/^    cl_int getBuildInfo($/;"	f	class:cl::Program
getBuildInfo	include/CL/cl2.hpp	/^    getBuildInfo(const Device& device, cl_int* err = NULL) const$/;"	f	class:cl::Program
getBuildLog	include/CL/cl2.hpp	/^    BuildLogType getBuildLog() const$/;"	f	class:cl::BuildError
getContextPlatformVersion	include/CL/cl.hpp	/^static cl_uint getContextPlatformVersion(cl_context context)$/;"	f	namespace:cl::detail
getContextPlatformVersion	include/CL/cl2.hpp	/^static cl_uint getContextPlatformVersion(cl_context context)$/;"	f	namespace:cl::detail
getData	documentation/navtree.js	/^function getData(varName)$/;"	f
getDefault	include/CL/cl.hpp	/^    static CommandQueue getDefault(cl_int * err = NULL) $/;"	f	class:cl::CommandQueue
getDefault	include/CL/cl.hpp	/^    static Context getDefault(cl_int * err = NULL) $/;"	f	class:cl::Context
getDefault	include/CL/cl.hpp	/^    static Platform getDefault( $/;"	f	class:cl::Platform
getDefault	include/CL/cl.hpp	/^inline Device Device::getDefault(cl_int * err)$/;"	f	class:cl::Device
getDefault	include/CL/cl2.hpp	/^    static CommandQueue getDefault(cl_int * err = NULL) $/;"	f	class:cl::CommandQueue
getDefault	include/CL/cl2.hpp	/^    static Context getDefault(cl_int * err = NULL) $/;"	f	class:cl::Context
getDefault	include/CL/cl2.hpp	/^    static Device getDefault($/;"	f	class:cl::Device
getDefault	include/CL/cl2.hpp	/^    static Platform getDefault($/;"	f	class:cl::Platform
getDevicePlatformVersion	include/CL/cl.hpp	/^static cl_uint getDevicePlatformVersion(cl_device_id device)$/;"	f	namespace:cl::detail
getDevicePlatformVersion	include/CL/cl2.hpp	/^static cl_uint getDevicePlatformVersion(cl_device_id device)$/;"	f	namespace:cl::detail
getDevices	include/CL/cl.hpp	/^    cl_int getDevices($/;"	f	class:cl::Platform
getDevices	include/CL/cl2.hpp	/^    cl_int getDevices($/;"	f	class:cl::Platform
getImageInfo	include/CL/cl.hpp	/^    cl_int getImageInfo(cl_image_info name, T* param) const$/;"	f	class:cl::Image
getImageInfo	include/CL/cl.hpp	/^    getImageInfo(cl_int* err = NULL) const$/;"	f	class:cl::Image
getImageInfo	include/CL/cl2.hpp	/^    cl_int getImageInfo(cl_image_info name, T* param) const$/;"	f	class:cl::Image
getImageInfo	include/CL/cl2.hpp	/^    getImageInfo(cl_int* err = NULL) const$/;"	f	class:cl::Image
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_command_queue_info name, T* param) const$/;"	f	class:cl::CommandQueue
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_context_info name, T* param) const$/;"	f	class:cl::Context
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_device_info name, T* param) const$/;"	f	class:cl::Device
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_event_info name, T* param) const$/;"	f	class:cl::Event
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_kernel_info name, T* param) const$/;"	f	class:cl::Kernel
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_mem_info name, T* param) const$/;"	f	class:cl::Memory
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_platform_info name, STRING_CLASS* param) const$/;"	f	class:cl::Platform
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_program_info name, T* param) const$/;"	f	class:cl::Program
getInfo	include/CL/cl.hpp	/^    cl_int getInfo(cl_sampler_info name, T* param) const$/;"	f	class:cl::Sampler
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::CommandQueue
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Context
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Device
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Event
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Memory
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Platform
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Program
getInfo	include/CL/cl.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Sampler
getInfo	include/CL/cl.hpp	/^getInfo(Func f, cl_uint name, T* param)$/;"	f	namespace:cl::detail
getInfo	include/CL/cl.hpp	/^getInfo(Func f, const Arg0& arg0, cl_uint name, T* param)$/;"	f	namespace:cl::detail
getInfo	include/CL/cl.hpp	/^getInfo(Func f, const Arg0& arg0, const Arg1& arg1, cl_uint name, T* param)$/;"	f	namespace:cl::detail
getInfo	include/CL/cl.hpp	/^inline VECTOR_CLASS<char *> cl::Program::getInfo<CL_PROGRAM_BINARIES>(cl_int* err) const$/;"	f	class:cl::cl::Program
getInfo	include/CL/cl2.hpp	/^        getInfo(cl_int* err = NULL) const$/;"	f	class:cl::DeviceCommandQueue
getInfo	include/CL/cl2.hpp	/^        getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Pipe
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_command_queue_info name, T* param) const$/;"	f	class:cl::CommandQueue
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_command_queue_info name, T* param) const$/;"	f	class:cl::DeviceCommandQueue
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_context_info name, T* param) const$/;"	f	class:cl::Context
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_device_info name, T* param) const$/;"	f	class:cl::Device
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_event_info name, T* param) const$/;"	f	class:cl::Event
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_kernel_info name, T* param) const$/;"	f	class:cl::Kernel
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_mem_info name, T* param) const$/;"	f	class:cl::Memory
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_pipe_info name, T* param) const$/;"	f	class:cl::Pipe
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_platform_info name, string* param) const$/;"	f	class:cl::Platform
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_program_info name, T* param) const$/;"	f	class:cl::Program
getInfo	include/CL/cl2.hpp	/^    cl_int getInfo(cl_sampler_info name, T* param) const$/;"	f	class:cl::Sampler
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::CommandQueue
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Context
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Device
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Event
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Memory
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Platform
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Program
getInfo	include/CL/cl2.hpp	/^    getInfo(cl_int* err = NULL) const$/;"	f	class:cl::Sampler
getInfo	include/CL/cl2.hpp	/^getInfo(Func f, cl_uint name, T* param)$/;"	f	namespace:cl::detail
getInfo	include/CL/cl2.hpp	/^getInfo(Func f, const Arg0& arg0, cl_uint name, T* param)$/;"	f	namespace:cl::detail
getInfo	include/CL/cl2.hpp	/^getInfo(Func f, const Arg0& arg0, const Arg1& arg1, cl_uint name, T* param)$/;"	f	namespace:cl::detail
getInfo	include/CL/cl2.hpp	/^inline cl_int cl::Program::getInfo(cl_program_info name, vector<vector<unsigned char>>* param) const$/;"	f	class:cl::cl::Program
getInfo	include/CL/cl2.hpp	/^inline vector<vector<unsigned char>> cl::Program::getInfo<CL_PROGRAM_BINARIES>(cl_int* err) const$/;"	f	class:cl::cl::Program
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, STRING_CLASS* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, T* param, int, typename T::cl_type = 0)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, VECTOR_CLASS<T>* param, int, typename T::cl_type = 0)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, VECTOR_CLASS<T>* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, VECTOR_CLASS<char *>* param, int)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, size_t<N>* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl.hpp	/^inline cl_int getInfoHelper(Functor f, cl_uint name, T* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper($/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, T* param, int, typename T::cl_type = 0)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, array<size_type, N>* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, string* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, vector<T>* param, long)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper(Func f, cl_uint name, vector<vector<unsigned char>>* param, int)$/;"	f	namespace:cl::detail
getInfoHelper	include/CL/cl2.hpp	/^inline cl_int getInfoHelper(Functor f, cl_uint name, T* param, long)$/;"	f	namespace:cl::detail
getKernel	include/CL/cl2.hpp	/^    Kernel getKernel()$/;"	f	class:cl::KernelFunctor
getNode	documentation/navtree.js	/^function getNode(o, po)$/;"	f
getObjectInfo	include/CL/cl.hpp	/^    cl_int getObjectInfo($/;"	f	class:cl::BufferGL
getObjectInfo	include/CL/cl.hpp	/^    cl_int getObjectInfo($/;"	f	class:cl::BufferRenderGL
getObjectInfo	include/CL/cl2.hpp	/^    cl_int getObjectInfo($/;"	f	class:cl::BufferGL
getObjectInfo	include/CL/cl2.hpp	/^    cl_int getObjectInfo($/;"	f	class:cl::BufferRenderGL
getPlatformVersion	include/CL/cl.hpp	/^static cl_uint getPlatformVersion(cl_platform_id platform)$/;"	f	namespace:cl::detail
getPlatformVersion	include/CL/cl2.hpp	/^static cl_uint getPlatformVersion(cl_platform_id platform)$/;"	f	namespace:cl::detail
getProfilingInfo	include/CL/cl.hpp	/^    cl_int getProfilingInfo(cl_profiling_info name, T* param) const$/;"	f	class:cl::Event
getProfilingInfo	include/CL/cl.hpp	/^    getProfilingInfo(cl_int* err = NULL) const$/;"	f	class:cl::Event
getProfilingInfo	include/CL/cl2.hpp	/^    cl_int getProfilingInfo(cl_profiling_info name, T* param) const$/;"	f	class:cl::Event
getProfilingInfo	include/CL/cl2.hpp	/^    getProfilingInfo(cl_int* err = NULL) const$/;"	f	class:cl::Event
getSVMMemFlags	include/CL/cl2.hpp	/^        static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::detail::SVMTraitNull
getSVMMemFlags	include/CL/cl2.hpp	/^    static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::SVMTraitAtomic
getSVMMemFlags	include/CL/cl2.hpp	/^    static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::SVMTraitCoarse
getSVMMemFlags	include/CL/cl2.hpp	/^    static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::SVMTraitFine
getSVMMemFlags	include/CL/cl2.hpp	/^    static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::SVMTraitReadOnly
getSVMMemFlags	include/CL/cl2.hpp	/^    static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::SVMTraitReadWrite
getSVMMemFlags	include/CL/cl2.hpp	/^    static cl_svm_mem_flags getSVMMemFlags()$/;"	f	class:cl::SVMTraitWriteOnly
getScript	documentation/navtree.js	/^function getScript(scriptName,func,show)$/;"	f
getSubGroupInfo	include/CL/cl2.hpp	/^        size_type getSubGroupInfo(const cl::Device &dev, const cl::NDRange &range, cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getSubGroupInfo	include/CL/cl2.hpp	/^    cl_int getSubGroupInfo(const cl::Device &dev, cl_kernel_sub_group_info name, const cl::NDRange &range, size_type* param) const$/;"	f	class:cl::Kernel
getSupportedImageFormats	include/CL/cl.hpp	/^    cl_int getSupportedImageFormats($/;"	f	class:cl::Context
getSupportedImageFormats	include/CL/cl2.hpp	/^    cl_int getSupportedImageFormats($/;"	f	class:cl::Context
getVersion	include/CL/cl.hpp	/^static cl_uint getVersion(const char *versionInfo)$/;"	f	namespace:cl::detail
getVersion	include/CL/cl2.hpp	/^static cl_uint getVersion(const vector<char> &versionInfo)$/;"	f	namespace:cl::detail
getWorkGroupInfo	include/CL/cl.hpp	/^        getWorkGroupInfo(const Device& device, cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getWorkGroupInfo	include/CL/cl.hpp	/^    cl_int getWorkGroupInfo($/;"	f	class:cl::Kernel
getWorkGroupInfo	include/CL/cl2.hpp	/^        getWorkGroupInfo(const Device& device, cl_int* err = NULL) const$/;"	f	class:cl::Kernel
getWorkGroupInfo	include/CL/cl2.hpp	/^    cl_int getWorkGroupInfo($/;"	f	class:cl::Kernel
getXPos	documentation/search/search.js	/^function getXPos(item)$/;"	f
getYPos	documentation/search/search.js	/^function getYPos(item)$/;"	f
get_B_pretransposed_array_size	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual size_t get_B_pretransposed_array_size() const { return 0; }$/;"	f	class:arm_gemm::GemmCommon
get_L1_cache_size	src/core/CPP/CPPTypes.cpp	/^unsigned int CPUInfo::get_L1_cache_size() const$/;"	f	class:CPUInfo
get_L2_cache_size	src/core/CPP/CPPTypes.cpp	/^unsigned int CPUInfo::get_L2_cache_size() const$/;"	f	class:CPUInfo
get_a_working_size	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    size_t get_a_working_size() const$/;"	f	class:arm_gemm::GemmInterleaved
get_activation_layer_test_bounds	tests/validation/Helpers.h	/^std::pair<T, T> get_activation_layer_test_bounds(ActivationLayerInfo::ActivationFunction activation, DataType data_type, int fixed_point_position = 0)$/;"	f	namespace:arm_compute::test::validation
get_arch_from_target	src/core/GPUTarget.cpp	/^GPUTarget get_arch_from_target(GPUTarget target)$/;"	f	namespace:arm_compute
get_b_working_size	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    size_t get_b_working_size() const$/;"	f	class:arm_gemm::GemmInterleaved
get_backing_tensor	src/graph/backends/CL/CLFunctionsFactory.cpp	/^arm_compute::ICLTensor *get_backing_tensor(arm_compute::graph::Tensor *tensor)$/;"	f	namespace:arm_compute::graph::backends::__anon305
get_backing_tensor	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^arm_compute::IGCTensor *get_backing_tensor(arm_compute::graph::Tensor *tensor)$/;"	f	namespace:arm_compute::graph::backends::__anon306
get_backing_tensor	src/graph/backends/NEON/NEFunctionFactory.cpp	/^arm_compute::ITensor *get_backing_tensor(arm_compute::graph::Tensor *tensor)$/;"	f	namespace:arm_compute::graph::backends::__anon308
get_backing_tensor_info	arm_compute/graph/backends/ValidateHelpers.h	/^inline arm_compute::ITensorInfo *get_backing_tensor_info(arm_compute::graph::Tensor *tensor)$/;"	f	namespace:arm_compute::graph::backends::detail
get_batchnormalization_layer_test_bounds	tests/validation/Helpers.h	/^std::pair<T, T> get_batchnormalization_layer_test_bounds(int fixed_point_position = 1)$/;"	f	namespace:arm_compute::test::validation
get_bifrost_target	src/core/GPUTarget.cpp	/^arm_compute::GPUTarget get_bifrost_target(const std::string &version)$/;"	f	namespace:__anon237
get_built_programs	arm_compute/core/CL/CLKernelLibrary.h	/^    const std::map<std::string, cl::Program> &get_built_programs() const$/;"	f	class:arm_compute::CLKernelLibrary
get_c_working_size	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^    size_t get_c_working_size() const$/;"	f	class:arm_gemm::GemmInterleaved
get_channel_format	tests/Utils.h	/^inline Format get_channel_format(Channel channel)$/;"	f	namespace:arm_compute::test
get_circle_texels	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline uint8x16_t get_circle_texels(const uint8x8x4_t &index, const uint8x8x4_t &tbl_hi, const uint8x8x3_t &tbl_lo)$/;"	f	namespace:__anon258
get_cl_type_from_data_type	src/core/CL/CLHelpers.cpp	/^std::string get_cl_type_from_data_type(const DataType &dt)$/;"	f	namespace:arm_compute
get_cl_version	src/core/CL/CLHelpers.cpp	/^CLVersion get_cl_version(const cl::Device &device)$/;"	f	namespace:arm_compute
get_classifications	tests/networks/AlexNetNetwork.h	/^    std::vector<unsigned int> get_classifications()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
get_classifications	tests/networks/LeNet5Network.h	/^    std::vector<unsigned int> get_classifications()$/;"	f	class:arm_compute::test::networks::LeNet5Network
get_classifications	tests/networks/MobileNetNetwork.h	/^    std::vector<unsigned int> get_classifications()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
get_classifications	tests/networks/MobileNetV1Network.h	/^    std::vector<unsigned int> get_classifications()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
get_const_handles	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^std::set<ITensorHandle *> get_const_handles(const Graph &g)$/;"	f	namespace:arm_compute::graph::detail::__anon309
get_converter	tests/AssetsLibrary.cpp	/^const AssetsLibrary::Converter &AssetsLibrary::get_converter(DataType src, DataType dst) const$/;"	f	class:arm_compute::test::AssetsLibrary
get_converter	tests/AssetsLibrary.cpp	/^const AssetsLibrary::Converter &AssetsLibrary::get_converter(DataType src, Format dst) const$/;"	f	class:arm_compute::test::AssetsLibrary
get_converter	tests/AssetsLibrary.cpp	/^const AssetsLibrary::Converter &AssetsLibrary::get_converter(Format src, DataType dst) const$/;"	f	class:arm_compute::test::AssetsLibrary
get_converter	tests/AssetsLibrary.cpp	/^const AssetsLibrary::Converter &AssetsLibrary::get_converter(Format src, Format dst) const$/;"	f	class:arm_compute::test::AssetsLibrary
get_convolution_method	src/runtime/CL/functions/CLConvolutionLayer.cpp	/^ConvolutionMethod CLConvolutionLayer::get_convolution_method(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLConvolutionLayer
get_convolution_method	src/runtime/NEON/functions/NEConvolutionLayer.cpp	/^ConvolutionMethod NEConvolutionLayer::get_convolution_method(const ITensorInfo *input, const ITensorInfo *weights,$/;"	f	class:arm_compute::NEConvolutionLayer
get_counters	tests/framework/instruments/MaliCounter.cpp	/^const uint32_t *MaliCounter::get_counters() const$/;"	f	class:arm_compute::test::framework::MaliCounter
get_counters	tests/framework/instruments/MaliCounter.cpp	/^const uint32_t *MaliCounter::get_counters(mali_userspace::MaliCounterBlockName block, int core) const$/;"	f	class:arm_compute::test::framework::MaliCounter
get_cpu_configuration	src/runtime/CPUUtils.cpp	/^void get_cpu_configuration(CPUInfo &cpuinfo)$/;"	f	namespace:arm_compute
get_cpu_model	src/core/CPP/CPPTypes.cpp	/^CPUModel CPUInfo::get_cpu_model() const$/;"	f	class:CPUInfo
get_cpu_model	src/core/CPP/CPPTypes.cpp	/^CPUModel CPUInfo::get_cpu_model(unsigned int cpuid) const$/;"	f	class:CPUInfo
get_current_coords	src/core/CL/cl_kernels/warp_helpers.h	/^inline const float2 get_current_coords()$/;"	f
get_data_size_from_data_type	src/core/CL/CLHelpers.cpp	/^std::string get_data_size_from_data_type(const DataType &dt)$/;"	f	namespace:arm_compute
get_default_target	src/graph/Utils.cpp	/^Target get_default_target()$/;"	f	namespace:arm_compute::graph
get_device_version	src/core/CL/CLKernelLibrary.cpp	/^std::string CLKernelLibrary::get_device_version()$/;"	f	class:CLKernelLibrary
get_dimension_idx	src/graph/Utils.cpp	/^size_t get_dimension_idx(const TensorDescriptor &descriptor, const DataLayoutDimension data_layout_dimension)$/;"	f	namespace:arm_compute::graph
get_dimension_size	src/graph/Utils.cpp	/^size_t get_dimension_size(const TensorDescriptor &descriptor, const DataLayoutDimension data_layout_dimension)$/;"	f	namespace:arm_compute::graph
get_double_data	tests/validation/Validation.cpp	/^double get_double_data(const void *ptr, DataType data_type)$/;"	f	namespace:arm_compute::test::validation::__anon527
get_dwsc_node	examples/graph_mobilenet.cpp	/^    BranchLayer get_dwsc_node(const std::string &data_path, std::string &&param_path,$/;"	f	class:GraphMobilenetExample	file:
get_dwsc_node	examples/graph_mobilenet_qasymm8.cpp	/^    BranchLayer get_dwsc_node(const std::string &data_path, std::string &&param_path,$/;"	f	class:GraphMobileNetQASYMM8Example	file:
get_dwsc_node	examples_mod/graph_mobilenet.cpp	/^    BranchLayer get_dwsc_node(const std::string &data_path, std::string &&param_path,$/;"	f	class:GraphMobilenetExample	file:
get_expand_fire_node	examples/graph_squeezenet.cpp	/^    BranchLayer get_expand_fire_node(const std::string &data_path, std::string &&param_path, unsigned int expand1_filt, unsigned int expand3_filt)$/;"	f	class:GraphSqueezenetExample	file:
get_expand_fire_node	examples/graph_squeezenet_v1_1.cpp	/^    BranchLayer get_expand_fire_node(const std::string &data_path, std::string &&param_path, unsigned int expand1_filt, unsigned int expand3_filt)$/;"	f	class:GraphSqueezenet_v1_1Example	file:
get_expand_fire_node	examples_mod/graph_squeezenet.cpp	/^    BranchLayer get_expand_fire_node(const std::string &data_path, std::string &&param_path, unsigned int expand1_filt, unsigned int expand3_filt)$/;"	f	class:GraphSqueezenetExample	file:
get_extractor	tests/AssetsLibrary.cpp	/^const AssetsLibrary::Extractor &AssetsLibrary::get_extractor(Format format, Channel channel) const$/;"	f	class:arm_compute::test::AssetsLibrary
get_format_for_channel	tests/Utils.h	/^inline Format get_format_for_channel(Channel channel)$/;"	f	namespace:arm_compute::test
get_gl_ssbo_name	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^GLuint GCTensorAllocator::get_gl_ssbo_name() const$/;"	f	class:GCTensorAllocator
get_image_shape	tests/AssetsLibrary.cpp	/^TensorShape AssetsLibrary::get_image_shape(const std::string &name)$/;"	f	class:arm_compute::test::AssetsLibrary
get_inceptionA_block	examples/graph_inception_v4.cpp	/^    BranchLayer get_inceptionA_block(const std::string &data_path, std::string &&param_path)$/;"	f	class:final	file:
get_inceptionA_block	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_inceptionA_block(const std::string &data_path, std::string &&param_path)$/;"	f	class:final	file:
get_inceptionB_block	examples/graph_inception_v4.cpp	/^    BranchLayer get_inceptionB_block(const std::string &data_path, std::string &&param_path)$/;"	f	class:final	file:
get_inceptionB_block	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_inceptionB_block(const std::string &data_path, std::string &&param_path)$/;"	f	class:final	file:
get_inceptionC_block	examples/graph_inception_v4.cpp	/^    BranchLayer get_inceptionC_block(const std::string &data_path, std::string &&param_path)$/;"	f	class:final	file:
get_inceptionC_block	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_inceptionC_block(const std::string &data_path, std::string &&param_path)$/;"	f	class:final	file:
get_inception_node	examples/graph_googlenet.cpp	/^    BranchLayer get_inception_node(const std::string &data_path, std::string &&param_path,$/;"	f	class:GraphGooglenetExample	file:
get_inception_node	examples_mod/graph_googlenet.cpp	/^    BranchLayer get_inception_node(const std::string &data_path, std::string &&param_path,$/;"	f	class:GraphGooglenetExample	file:
get_inception_node_A	examples/graph_inception_v3.cpp	/^    BranchLayer get_inception_node_A(const std::string &data_path, std::string &&param_path,$/;"	f	class:InceptionV3Example	file:
get_inception_node_B	examples/graph_inception_v3.cpp	/^    BranchLayer get_inception_node_B(const std::string &data_path, std::string &&param_path,$/;"	f	class:InceptionV3Example	file:
get_inception_node_C	examples/graph_inception_v3.cpp	/^    BranchLayer get_inception_node_C(const std::string &data_path, std::string &&param_path,$/;"	f	class:InceptionV3Example	file:
get_inception_node_D	examples/graph_inception_v3.cpp	/^    BranchLayer get_inception_node_D(const std::string &data_path, std::string &&param_path,$/;"	f	class:InceptionV3Example	file:
get_inception_node_E	examples/graph_inception_v3.cpp	/^    BranchLayer get_inception_node_E(const std::string &data_path, std::string &&param_path,$/;"	f	class:InceptionV3Example	file:
get_index	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^unsigned int NEConvolutionRectangleKernel::get_index(uint32_t val)$/;"	f	class:arm_compute::NEConvolutionRectangleKernel
get_input_accessor	utils/GraphUtils.h	/^inline std::unique_ptr<graph::ITensorAccessor> get_input_accessor(const std::string             &ppm_path,$/;"	f	namespace:arm_compute::graph_utils
get_input_matrix_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_input_matrix_size($/;"	f	class:WinogradGEMM::Convolution
get_input_matrix_stride	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^int WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_input_matrix_stride($/;"	f	class:WinogradGEMM::Convolution
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^int get_input_num_elems_processed<1>(unsigned int num_elems_written_per_iteration)$/;"	f	namespace:arm_compute::detail
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^int get_input_num_elems_processed<2>(unsigned int num_elems_written_per_iteration)$/;"	f	namespace:arm_compute::detail
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^int get_input_num_elems_processed<3>(unsigned int num_elems_written_per_iteration)$/;"	f	namespace:arm_compute::detail
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int get_input_num_elems_processed(unsigned int num_elems_written_per_iteration, unsigned int stridex)$/;"	f	namespace:arm_compute::detail
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int get_input_num_elems_processed<1>(unsigned int num_elems_written_per_iteration)$/;"	f	namespace:arm_compute::detail
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int get_input_num_elems_processed<2>(unsigned int num_elems_written_per_iteration)$/;"	f	namespace:arm_compute::detail
get_input_num_elems_processed	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int get_input_num_elems_processed<3>(unsigned int num_elems_written_per_iteration)$/;"	f	namespace:arm_compute::detail
get_input_storage_size	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^unsigned int NEWinogradLayerTransformInputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_input_storage_size($/;"	f	class:arm_compute::NEWinogradLayerTransformInputKernel
get_input_storage_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_input_storage_size($/;"	f	class:WinogradGEMM::Convolution
get_kernel_matrix_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_kernel_matrix_size(const KernelShape &shape)$/;"	f	class:WinogradGEMM::Convolution
get_kernel_matrix_stride	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^int WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_kernel_matrix_stride(const KernelShape &shape)$/;"	f	class:WinogradGEMM::Convolution
get_kernel_path	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string get_kernel_path()$/;"	f	class:arm_compute::CLKernelLibrary
get_kernel_storage_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_kernel_storage_size(const KernelShape &shape)$/;"	f	class:WinogradGEMM::Convolution
get_kernel_transform_working_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_kernel_transform_working_size(const KernelShape &shape)$/;"	f	class:WinogradGEMM::Convolution
get_loader	tests/AssetsLibrary.cpp	/^const AssetsLibrary::Loader &AssetsLibrary::get_loader(const std::string &extension) const$/;"	f	class:arm_compute::test::AssetsLibrary
get_mali_hw_info	tests/framework/instruments/MaliCounter.cpp	/^MaliHWInfo get_mali_hw_info(const char *path)$/;"	f	namespace:arm_compute::test::framework::__anon387
get_matrix_stride	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^int NEWinogradLayerTransformInputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_matrix_stride($/;"	f	class:arm_compute::NEWinogradLayerTransformInputKernel
get_matrix_stride	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^int NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_matrix_stride($/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
get_matrix_stride	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^int NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_matrix_stride(const KernelShape &kernel_shape) const$/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
get_max_cpus	src/runtime/CPUUtils.cpp	/^int get_max_cpus()$/;"	f	namespace:__anon319
get_max_workgroup_size	src/core/CL/ICLKernel.cpp	/^size_t ICLKernel::get_max_workgroup_size()$/;"	f	class:ICLKernel
get_mem_free_from_meminfo	utils/Utils.cpp	/^uint64_t get_mem_free_from_meminfo()$/;"	f	namespace:arm_compute::utils
get_memory_group_from_handle	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^IMemoryGroup *get_memory_group_from_handle(GraphContext &ctx, ITensorHandle *handle)$/;"	f	namespace:arm_compute::graph::detail::__anon309
get_memory_manager	arm_compute/graph/backends/Utils.h	/^inline std::shared_ptr<IMemoryManager> get_memory_manager(GraphContext &ctx, Target target)$/;"	f	namespace:arm_compute::graph::backends
get_midgard_target	src/core/GPUTarget.cpp	/^arm_compute::GPUTarget get_midgard_target(const std::string &version)$/;"	f	namespace:__anon237
get_mixed_3a	examples/graph_inception_v4.cpp	/^    BranchLayer get_mixed_3a(const std::string &data_path)$/;"	f	class:final	file:
get_mixed_3a	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_mixed_3a(const std::string &data_path)$/;"	f	class:final	file:
get_mixed_4a	examples/graph_inception_v4.cpp	/^    BranchLayer get_mixed_4a(const std::string &data_path)$/;"	f	class:final	file:
get_mixed_4a	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_mixed_4a(const std::string &data_path)$/;"	f	class:final	file:
get_mixed_5a	examples/graph_inception_v4.cpp	/^    BranchLayer get_mixed_5a(const std::string &data_path)$/;"	f	class:final	file:
get_mixed_5a	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_mixed_5a(const std::string &data_path)$/;"	f	class:final	file:
get_neighbour_coords	src/core/CL/cl_kernels/warp_helpers.h	/^inline const float8 get_neighbour_coords(const float2 coord)$/;"	f
get_normalize_planar_yuv_layer_test_bounds	tests/validation/Helpers.h	/^std::pair<T, T> get_normalize_planar_yuv_layer_test_bounds()$/;"	f	namespace:arm_compute::test::validation
get_npy_output_accessor	utils/GraphUtils.h	/^inline std::unique_ptr<graph::ITensorAccessor> get_npy_output_accessor(const std::string &npy_path, TensorShape shape, DataType data_type, std::ostream &output_stream = std::cout)$/;"	f	namespace:arm_compute::graph_utils
get_number_blocks	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^int NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_number_blocks() const$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
get_number_gemms	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^unsigned int NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_number_gemms() const$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
get_output_accessor	utils/GraphUtils.h	/^inline std::unique_ptr<graph::ITensorAccessor> get_output_accessor(const std::string &labels_path, size_t top_n = 5, std::ostream &output_stream = std::cout)$/;"	f	namespace:arm_compute::graph_utils
get_output_matrix_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_output_matrix_size($/;"	f	class:WinogradGEMM::Convolution
get_output_matrix_stride	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^int WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_output_matrix_stride($/;"	f	class:WinogradGEMM::Convolution
get_output_shape	examples/gc_dc.cpp	/^    TensorShape get_output_shape(TensorShape in_shape, TensorShape kernel_shape, const PadStrideInfo &info)$/;"	f	class:GCDCExample	file:
get_output_shape	src/core/CL/kernels/CLPermuteKernel.cpp	/^TensorShape get_output_shape(const ITensorInfo *input, const PermutationVector &perm)$/;"	f	namespace:__anon214
get_output_shape	src/core/NEON/kernels/NECol2ImKernel.cpp	/^TensorShape get_output_shape(const ITensorInfo *input, const Size2D &convolved_dims)$/;"	f	namespace:__anon250
get_output_shape	src/core/NEON/kernels/NEGEMMTranspose1xWKernel.cpp	/^TensorShape get_output_shape(const ITensorInfo *input)$/;"	f	namespace:__anon270
get_output_shape	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^TensorShape get_output_shape(const ITensorInfo *input, bool has_bias)$/;"	f	namespace:__anon300
get_output_shape	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Tensor4DShape NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_output_shape($/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
get_output_shape	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^Tensor4DShape WinogradGEMM<kr, kc, itr, itc>::Convolution<TOut, TIn>::get_output_shape($/;"	f	class:WinogradGEMM::Convolution
get_output_shape	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    TensorShape get_output_shape(TensorShape in_shape, TensorShape kernel_shape, const PadStrideInfo &info)$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericTensorShiftFixture
get_output_shape	tests/validation/fixtures/ReductionOperationFixture.h	/^    TensorShape get_output_shape(TensorShape shape, unsigned int axis)$/;"	f	class:arm_compute::test::validation::ReductionOperationValidationFixture
get_output_shape	tests/validation/reference/L2NormalizeLayer.cpp	/^TensorShape get_output_shape(TensorShape shape, unsigned int axis)$/;"	f	namespace:arm_compute::test::validation::reference::__anon542
get_output_size	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^int DepthwiseConvolution<OTR, OTC, KR, KC, SR, SC, TIn, TOut>::get_output_size($/;"	f	class:depthwise::DepthwiseConvolution
get_output_storage_size	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^unsigned int NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_output_storage_size($/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
get_output_storage_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_output_storage_size($/;"	f	class:WinogradGEMM::Convolution
get_output_tile_cols	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^int NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_output_tile_cols() const$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
get_output_tile_rows	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^int NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_output_tile_rows() const$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
get_permutation_texels	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline uint8x16_t get_permutation_texels(const uint8x8x2_t &permutation_index, const uint8x8x2_t &tbl_circle)$/;"	f	namespace:__anon258
get_pixel	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^inline int get_pixel(const ITensor *tensor, int xi, int yi, int iw00, int iw01, int iw10, int iw11, int scale)$/;"	f	namespace:__anon275
get_point_score	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline uint8_t get_point_score(uint8_t p, uint8_t tolerance, const uint8x8x2_t &tbl_circle, uint8x8x2_t perm_indices[PERMUTATIONS])$/;"	f	namespace:__anon258
get_profiler	tests/framework/Framework.cpp	/^Profiler Framework::get_profiler() const$/;"	f	class:arm_compute::test::framework::Framework
get_program	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    GLuint get_program() const$/;"	f	class:arm_compute::GCKernel
get_program_source	src/core/CL/CLKernelLibrary.cpp	/^std::string CLKernelLibrary::get_program_source(const std::string &program_name)$/;"	f	class:CLKernelLibrary
get_promoted_data_type	arm_compute/core/Utils.h	/^inline DataType get_promoted_data_type(DataType dt)$/;"	f	namespace:arm_compute
get_pyramid_level	src/runtime/CL/CLPyramid.cpp	/^CLTensor *CLPyramid::get_pyramid_level(size_t index) const$/;"	f	class:CLPyramid
get_pyramid_level	src/runtime/Pyramid.cpp	/^Tensor *Pyramid::get_pyramid_level(size_t index) const$/;"	f	class:Pyramid
get_random_accessor	utils/GraphUtils.h	/^inline std::unique_ptr<graph::ITensorAccessor> get_random_accessor(PixelValue lower, PixelValue upper, const std::random_device::result_type seed = 0)$/;"	f	namespace:arm_compute::graph_utils
get_reductionA_block	examples/graph_inception_v4.cpp	/^    BranchLayer get_reductionA_block(const std::string &data_path)$/;"	f	class:final	file:
get_reductionA_block	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_reductionA_block(const std::string &data_path)$/;"	f	class:final	file:
get_reductionB_block	examples/graph_inception_v4.cpp	/^    BranchLayer get_reductionB_block(const std::string &data_path)$/;"	f	class:final	file:
get_reductionB_block	examples_mod/graph_inception_v4.cpp	/^    BranchLayer get_reductionB_block(const std::string &data_path)$/;"	f	class:final	file:
get_reshaped_weights_shape	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^arm_compute::TensorShape get_reshaped_weights_shape(const arm_compute::ITensorInfo *weights, bool append_bias)$/;"	f	namespace:__anon321
get_reshaped_weights_shape_conv	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^TensorShape get_reshaped_weights_shape_conv(const ITensorInfo *weights, bool append_bias, bool is_fully_connected_convolution)$/;"	f	namespace:arm_compute::__anon322
get_shape_from_info	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape get_shape_from_info(ITensorInfo *info)$/;"	f	namespace:arm_compute::misc::shape_calculator
get_shape_from_info	arm_compute/core/utils/misc/ShapeCalculator.h	/^inline TensorShape get_shape_from_info(T *info)$/;"	f	namespace:arm_compute::misc::shape_calculator
get_storage_requirement	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    static inline size_t get_storage_requirement(const int maxthreads, const size_t buffersize)$/;"	f	class:arm_gemm::BufferManager
get_target	arm_compute/core/CL/ICLKernel.h	/^    GPUTarget get_target() const$/;"	f	class:arm_compute::ICLKernel
get_target	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^    GPUTarget get_target() const$/;"	f	class:arm_compute::IGCKernel
get_target	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^    GPUTarget get_target() const$/;"	f	class:arm_compute::GCScheduler
get_target_from_device	src/core/CL/CLHelpers.cpp	/^GPUTarget get_target_from_device(cl::Device &device)$/;"	f	namespace:arm_compute
get_target_from_device	src/core/GLES_COMPUTE/GCHelpers.cpp	/^GPUTarget get_target_from_device()$/;"	f	namespace:arm_compute
get_target_from_name	src/core/GPUTarget.cpp	/^GPUTarget get_target_from_name(const std::string &device_name)$/;"	f	namespace:arm_compute
get_tensor_descriptor	arm_compute/graph/Utils.h	/^inline TensorDescriptor get_tensor_descriptor(const Graph &g, TensorID tid)$/;"	f	namespace:arm_compute::graph
get_tensor_info_t	arm_compute/core/Validate.h	/^struct get_tensor_info_t<ITensorInfo *>$/;"	s	namespace:arm_compute::detail
get_threads_hint	src/runtime/CPUUtils.cpp	/^unsigned int get_threads_hint()$/;"	f	namespace:arm_compute
get_tile	tests/validation/Helpers.cpp	/^void get_tile(const SimpleTensor<T> &in, SimpleTensor<T> &tile, const Coordinates &coord)$/;"	f	namespace:arm_compute::test::validation
get_time	arm_compute/core/utils/logging/LogMsgDecorators.h	/^    std::string get_time()$/;"	f	class:arm_compute::logging::DateDecorator
get_transition_handles	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^TaskHandles get_transition_handles(GraphContext                    &ctx,$/;"	f	namespace:arm_compute::graph::detail::__anon309
get_type	src/runtime/Scheduler.cpp	/^Scheduler::Type Scheduler::get_type()$/;"	f	class:Scheduler
get_typestring	tests/Utils.h	/^inline std::string get_typestring(DataType data_type)$/;"	f	namespace:arm_compute::test
get_typestring	utils/Utils.h	/^inline std::string get_typestring(DataType data_type)$/;"	f	namespace:arm_compute::utils
get_underlying_cl_type_from_data_type	src/core/CL/CLHelpers.cpp	/^std::string get_underlying_cl_type_from_data_type(const DataType &dt)$/;"	f	namespace:arm_compute
get_value	tests/framework/instruments/PMU.h	/^T PMU::get_value() const$/;"	f	class:arm_compute::test::framework::PMU
get_value_from_map	include/libnpy/npy.hpp	/^inline std::string get_value_from_map(const std::string& mapstr) {$/;"	f	namespace:npy::pyparse
get_weight_storage_size	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^unsigned int NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::get_weight_storage_size(int n_output_channels, int n_input_channels) const$/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
get_weights_accessor	utils/GraphUtils.h	/^inline std::unique_ptr<graph::ITensorAccessor> get_weights_accessor(const std::string &path,$/;"	f	namespace:arm_compute::graph_utils
get_window	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^unsigned int DepthwiseConvolution<OTR, OTC, KR, KC, SR, SC, TIn, TOut>::get_window() const$/;"	f	class:depthwise::DepthwiseConvolution
get_window	arm_compute/core/NEON/kernels/convolution/winograd/transforms/input.hpp	/^  unsigned int WinogradGEMM<otr, otc, kr, kc>::InputTransform<T>::get_window() const$/;"	f	class:winograd::WinogradGEMM::InputTransform
get_window	arm_compute/core/NEON/kernels/convolution/winograd/transforms/kernel.hpp	/^unsigned int WinogradGEMM<otr, otc, kr, kc>::WeightsTransform<T>::get_window() const$/;"	f	class:WinogradGEMM::WeightsTransform
get_window	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  unsigned int WinogradGEMM<otr, otc, kr, kc>::OutputTransform<T>::get_window() const$/;"	f	class:winograd::WinogradGEMM::OutputTransform
get_window	src/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.cpp	/^unsigned int BatchedBlockedGemm<MBlock, NBlock, TIn, TOut>::get_window() const$/;"	f	class:BatchedBlockedGemm
get_working_size	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual size_t get_working_size() const { return 0; }$/;"	f	class:arm_gemm::GemmCommon
get_working_space_size	src/core/NEON/kernels/convolution/winograd/winograd_gemm.cpp	/^size_t WinogradGEMM<kernel_rows, kernel_cols, output_tile_rows, output_tile_cols>::Convolution<TOut, TIn>::get_working_space_size($/;"	f	class:WinogradGEMM::Convolution
glActiveTexture	opengles-3.1-stubs/GLESv2.c	/^void glActiveTexture(void) { PRINT_STUB_ERROR; return; }$/;"	f
glAttachShader	opengles-3.1-stubs/GLESv2.c	/^void glAttachShader(void) { PRINT_STUB_ERROR; return; }$/;"	f
glAttachShader	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glAttachShader(GLuint program, GLuint shader)$/;"	f
glBeginQuery	opengles-3.1-stubs/GLESv2.c	/^void glBeginQuery(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBeginTransformFeedback	opengles-3.1-stubs/GLESv2.c	/^void glBeginTransformFeedback(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindAttribLocation	opengles-3.1-stubs/GLESv2.c	/^void glBindAttribLocation(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindBuffer	opengles-3.1-stubs/GLESv2.c	/^void glBindBuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindBuffer	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glBindBuffer(GLenum target, GLuint buffer)$/;"	f
glBindBufferBase	opengles-3.1-stubs/GLESv2.c	/^void glBindBufferBase(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindBufferBase	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer)$/;"	f
glBindBufferRange	opengles-3.1-stubs/GLESv2.c	/^void glBindBufferRange(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindFramebuffer	opengles-3.1-stubs/GLESv2.c	/^void glBindFramebuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindFramebuffer	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer)$/;"	f
glBindImageTexture	opengles-3.1-stubs/GLESv2.c	/^void glBindImageTexture(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindRenderbuffer	opengles-3.1-stubs/GLESv2.c	/^void glBindRenderbuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindSampler	opengles-3.1-stubs/GLESv2.c	/^void glBindSampler(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindTexture	opengles-3.1-stubs/GLESv2.c	/^void glBindTexture(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindTexture	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glBindTexture(GLenum target, GLuint texture)$/;"	f
glBindTransformFeedback	opengles-3.1-stubs/GLESv2.c	/^void glBindTransformFeedback(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBindVertexArray	opengles-3.1-stubs/GLESv2.c	/^void glBindVertexArray(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBlendColor	opengles-3.1-stubs/GLESv2.c	/^void glBlendColor(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBlendEquation	opengles-3.1-stubs/GLESv2.c	/^void glBlendEquation(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBlendEquationSeparate	opengles-3.1-stubs/GLESv2.c	/^void glBlendEquationSeparate(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBlendFunc	opengles-3.1-stubs/GLESv2.c	/^void glBlendFunc(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBlendFuncSeparate	opengles-3.1-stubs/GLESv2.c	/^void glBlendFuncSeparate(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBlitFramebuffer	opengles-3.1-stubs/GLESv2.c	/^void glBlitFramebuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBufferData	opengles-3.1-stubs/GLESv2.c	/^void glBufferData(void) { PRINT_STUB_ERROR; return; }$/;"	f
glBufferData	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)$/;"	f
glBufferSubData	opengles-3.1-stubs/GLESv2.c	/^void glBufferSubData(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCheckFramebufferStatus	opengles-3.1-stubs/GLESv2.c	/^void glCheckFramebufferStatus(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClear	opengles-3.1-stubs/GLESv2.c	/^void glClear(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearBufferfi	opengles-3.1-stubs/GLESv2.c	/^void glClearBufferfi(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearBufferfv	opengles-3.1-stubs/GLESv2.c	/^void glClearBufferfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearBufferiv	opengles-3.1-stubs/GLESv2.c	/^void glClearBufferiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearBufferuiv	opengles-3.1-stubs/GLESv2.c	/^void glClearBufferuiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearColor	opengles-3.1-stubs/GLESv2.c	/^void glClearColor(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearDepthf	opengles-3.1-stubs/GLESv2.c	/^void glClearDepthf(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClearStencil	opengles-3.1-stubs/GLESv2.c	/^void glClearStencil(void) { PRINT_STUB_ERROR; return; }$/;"	f
glClientWaitSync	opengles-3.1-stubs/GLESv2.c	/^void glClientWaitSync(void) { PRINT_STUB_ERROR; return; }$/;"	f
glColorMask	opengles-3.1-stubs/GLESv2.c	/^void glColorMask(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCompileShader	opengles-3.1-stubs/GLESv2.c	/^void glCompileShader(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCompileShader	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glCompileShader(GLuint shader)$/;"	f
glCompressedTexImage2D	opengles-3.1-stubs/GLESv2.c	/^void glCompressedTexImage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCompressedTexImage3D	opengles-3.1-stubs/GLESv2.c	/^void glCompressedTexImage3D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCompressedTexSubImage2D	opengles-3.1-stubs/GLESv2.c	/^void glCompressedTexSubImage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCompressedTexSubImage3D	opengles-3.1-stubs/GLESv2.c	/^void glCompressedTexSubImage3D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCopyBufferSubData	opengles-3.1-stubs/GLESv2.c	/^void glCopyBufferSubData(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCopyTexImage2D	opengles-3.1-stubs/GLESv2.c	/^void glCopyTexImage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCopyTexSubImage2D	opengles-3.1-stubs/GLESv2.c	/^void glCopyTexSubImage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCopyTexSubImage3D	opengles-3.1-stubs/GLESv2.c	/^void glCopyTexSubImage3D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCreateProgram	opengles-3.1-stubs/GLESv2.c	/^void glCreateProgram(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCreateProgram	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLuint GL_APIENTRY glCreateProgram()$/;"	f
glCreateShader	opengles-3.1-stubs/GLESv2.c	/^void glCreateShader(void) { PRINT_STUB_ERROR; return; }$/;"	f
glCreateShader	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLuint GL_APIENTRY glCreateShader(GLenum type)$/;"	f
glCullFace	opengles-3.1-stubs/GLESv2.c	/^void glCullFace(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteBuffers	opengles-3.1-stubs/GLESv2.c	/^void glDeleteBuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteBuffers	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers)$/;"	f
glDeleteFramebuffers	opengles-3.1-stubs/GLESv2.c	/^void glDeleteFramebuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteFramebuffers	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)$/;"	f
glDeleteProgram	opengles-3.1-stubs/GLESv2.c	/^void glDeleteProgram(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteProgram	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDeleteProgram(GLuint program)$/;"	f
glDeleteQueries	opengles-3.1-stubs/GLESv2.c	/^void glDeleteQueries(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteRenderbuffers	opengles-3.1-stubs/GLESv2.c	/^void glDeleteRenderbuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteSamplers	opengles-3.1-stubs/GLESv2.c	/^void glDeleteSamplers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteShader	opengles-3.1-stubs/GLESv2.c	/^void glDeleteShader(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteShader	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDeleteShader(GLuint shader)$/;"	f
glDeleteSync	opengles-3.1-stubs/GLESv2.c	/^void glDeleteSync(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteTextures	opengles-3.1-stubs/GLESv2.c	/^void glDeleteTextures(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteTextures	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures)$/;"	f
glDeleteTransformFeedbacks	opengles-3.1-stubs/GLESv2.c	/^void glDeleteTransformFeedbacks(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDeleteVertexArrays	opengles-3.1-stubs/GLESv2.c	/^void glDeleteVertexArrays(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDepthFunc	opengles-3.1-stubs/GLESv2.c	/^void glDepthFunc(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDepthMask	opengles-3.1-stubs/GLESv2.c	/^void glDepthMask(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDepthRangef	opengles-3.1-stubs/GLESv2.c	/^void glDepthRangef(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDetachShader	opengles-3.1-stubs/GLESv2.c	/^void glDetachShader(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDetachShader	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDetachShader(GLuint program, GLuint shader)$/;"	f
glDisable	opengles-3.1-stubs/GLESv2.c	/^void glDisable(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDisableVertexAttribArray	opengles-3.1-stubs/GLESv2.c	/^void glDisableVertexAttribArray(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDispatchCompute	opengles-3.1-stubs/GLESv2.c	/^void glDispatchCompute(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDispatchCompute	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)$/;"	f
glDrawArrays	opengles-3.1-stubs/GLESv2.c	/^void glDrawArrays(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDrawArraysInstanced	opengles-3.1-stubs/GLESv2.c	/^void glDrawArraysInstanced(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDrawBuffers	opengles-3.1-stubs/GLESv2.c	/^void glDrawBuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDrawElements	opengles-3.1-stubs/GLESv2.c	/^void glDrawElements(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDrawElementsIndirect	opengles-3.1-stubs/GLESv2.c	/^void glDrawElementsIndirect(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDrawElementsInstanced	opengles-3.1-stubs/GLESv2.c	/^void glDrawElementsInstanced(void) { PRINT_STUB_ERROR; return; }$/;"	f
glDrawRangeElements	opengles-3.1-stubs/GLESv2.c	/^void glDrawRangeElements(void) { PRINT_STUB_ERROR; return; }$/;"	f
glEnable	opengles-3.1-stubs/GLESv2.c	/^void glEnable(void) { PRINT_STUB_ERROR; return; }$/;"	f
glEnableVertexAttribArray	opengles-3.1-stubs/GLESv2.c	/^void glEnableVertexAttribArray(void) { PRINT_STUB_ERROR; return; }$/;"	f
glEndQuery	opengles-3.1-stubs/GLESv2.c	/^void glEndQuery(void) { PRINT_STUB_ERROR; return; }$/;"	f
glEndTransformFeedback	opengles-3.1-stubs/GLESv2.c	/^void glEndTransformFeedback(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFenceSync	opengles-3.1-stubs/GLESv2.c	/^void glFenceSync(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFinish	opengles-3.1-stubs/GLESv2.c	/^void glFinish(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFlush	opengles-3.1-stubs/GLESv2.c	/^void glFlush(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFlush	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glFlush(void)$/;"	f
glFlushMappedBufferRange	opengles-3.1-stubs/GLESv2.c	/^void glFlushMappedBufferRange(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFramebufferRenderbuffer	opengles-3.1-stubs/GLESv2.c	/^void glFramebufferRenderbuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFramebufferTexture2D	opengles-3.1-stubs/GLESv2.c	/^void glFramebufferTexture2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFramebufferTexture2D	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)$/;"	f
glFramebufferTextureLayer	opengles-3.1-stubs/GLESv2.c	/^void glFramebufferTextureLayer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glFrontFace	opengles-3.1-stubs/GLESv2.c	/^void glFrontFace(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenBuffers	opengles-3.1-stubs/GLESv2.c	/^void glGenBuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenBuffers	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGenBuffers(GLsizei n, GLuint *buffers)$/;"	f
glGenFramebuffers	opengles-3.1-stubs/GLESv2.c	/^void glGenFramebuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenFramebuffers	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers)$/;"	f
glGenQueries	opengles-3.1-stubs/GLESv2.c	/^void glGenQueries(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenRenderbuffers	opengles-3.1-stubs/GLESv2.c	/^void glGenRenderbuffers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenSamplers	opengles-3.1-stubs/GLESv2.c	/^void glGenSamplers(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenTextures	opengles-3.1-stubs/GLESv2.c	/^void glGenTextures(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenTextures	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGenTextures(GLsizei n, GLuint *textures)$/;"	f
glGenTransformFeedbacks	opengles-3.1-stubs/GLESv2.c	/^void glGenTransformFeedbacks(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenVertexArrays	opengles-3.1-stubs/GLESv2.c	/^void glGenVertexArrays(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGenerateMipmap	opengles-3.1-stubs/GLESv2.c	/^void glGenerateMipmap(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetActiveAttrib	opengles-3.1-stubs/GLESv2.c	/^void glGetActiveAttrib(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetActiveUniform	opengles-3.1-stubs/GLESv2.c	/^void glGetActiveUniform(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetActiveUniformBlockName	opengles-3.1-stubs/GLESv2.c	/^void glGetActiveUniformBlockName(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetActiveUniformBlockiv	opengles-3.1-stubs/GLESv2.c	/^void glGetActiveUniformBlockiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetActiveUniformBlockiv	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)$/;"	f
glGetActiveUniformsiv	opengles-3.1-stubs/GLESv2.c	/^void glGetActiveUniformsiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetAttachedShaders	opengles-3.1-stubs/GLESv2.c	/^void glGetAttachedShaders(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetAttribLocation	opengles-3.1-stubs/GLESv2.c	/^void glGetAttribLocation(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetBooleanv	opengles-3.1-stubs/GLESv2.c	/^void glGetBooleanv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetBufferParameteri64v	opengles-3.1-stubs/GLESv2.c	/^void glGetBufferParameteri64v(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetBufferParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glGetBufferParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetBufferPointerv	opengles-3.1-stubs/GLESv2.c	/^void glGetBufferPointerv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetError	opengles-3.1-stubs/GLESv2.c	/^void glGetError(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetError	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLenum GL_APIENTRY glGetError(void)$/;"	f
glGetFloatv	opengles-3.1-stubs/GLESv2.c	/^void glGetFloatv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetFragDataLocation	opengles-3.1-stubs/GLESv2.c	/^void glGetFragDataLocation(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetFramebufferAttachmentParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glGetFramebufferAttachmentParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetInteger64i_v	opengles-3.1-stubs/GLESv2.c	/^void glGetInteger64i_v(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetInteger64v	opengles-3.1-stubs/GLESv2.c	/^void glGetInteger64v(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetIntegeri_v	opengles-3.1-stubs/GLESv2.c	/^void glGetIntegeri_v(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetIntegerv	opengles-3.1-stubs/GLESv2.c	/^void glGetIntegerv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetInternalformativ	opengles-3.1-stubs/GLESv2.c	/^void glGetInternalformativ(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetProgramBinary	opengles-3.1-stubs/GLESv2.c	/^void glGetProgramBinary(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetProgramInfoLog	opengles-3.1-stubs/GLESv2.c	/^void glGetProgramInfoLog(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetProgramInfoLog	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)$/;"	f
glGetProgramResourceIndex	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLuint GL_APIENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)$/;"	f
glGetProgramiv	opengles-3.1-stubs/GLESv2.c	/^void glGetProgramiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetProgramiv	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params)$/;"	f
glGetQueryObjectuiv	opengles-3.1-stubs/GLESv2.c	/^void glGetQueryObjectuiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetQueryiv	opengles-3.1-stubs/GLESv2.c	/^void glGetQueryiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetRenderbufferParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glGetRenderbufferParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetSamplerParameterfv	opengles-3.1-stubs/GLESv2.c	/^void glGetSamplerParameterfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetSamplerParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glGetSamplerParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetShaderInfoLog	opengles-3.1-stubs/GLESv2.c	/^void glGetShaderInfoLog(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetShaderInfoLog	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)$/;"	f
glGetShaderPrecisionFormat	opengles-3.1-stubs/GLESv2.c	/^void glGetShaderPrecisionFormat(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetShaderSource	opengles-3.1-stubs/GLESv2.c	/^void glGetShaderSource(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetShaderiv	opengles-3.1-stubs/GLESv2.c	/^void glGetShaderiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetShaderiv	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params)$/;"	f
glGetString	opengles-3.1-stubs/GLESv2.c	/^void glGetString(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetString	src/core/GLES_COMPUTE/OpenGLES.cpp	/^const GLubyte *GL_APIENTRY glGetString(GLenum name)$/;"	f
glGetStringi	opengles-3.1-stubs/GLESv2.c	/^void glGetStringi(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetSynciv	opengles-3.1-stubs/GLESv2.c	/^void glGetSynciv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetTexParameterfv	opengles-3.1-stubs/GLESv2.c	/^void glGetTexParameterfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetTexParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glGetTexParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetTransformFeedbackVarying	opengles-3.1-stubs/GLESv2.c	/^void glGetTransformFeedbackVarying(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetUniformBlockIndex	opengles-3.1-stubs/GLESv2.c	/^void glGetUniformBlockIndex(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetUniformBlockIndex	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLuint GL_APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)$/;"	f
glGetUniformIndices	opengles-3.1-stubs/GLESv2.c	/^void glGetUniformIndices(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetUniformLocation	opengles-3.1-stubs/GLESv2.c	/^void glGetUniformLocation(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetUniformLocation	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLint GL_APIENTRY glGetUniformLocation(GLuint program, const GLchar *name)$/;"	f
glGetUniformfv	opengles-3.1-stubs/GLESv2.c	/^void glGetUniformfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetUniformiv	opengles-3.1-stubs/GLESv2.c	/^void glGetUniformiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetUniformuiv	opengles-3.1-stubs/GLESv2.c	/^void glGetUniformuiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetVertexAttribIiv	opengles-3.1-stubs/GLESv2.c	/^void glGetVertexAttribIiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetVertexAttribIuiv	opengles-3.1-stubs/GLESv2.c	/^void glGetVertexAttribIuiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetVertexAttribPointerv	opengles-3.1-stubs/GLESv2.c	/^void glGetVertexAttribPointerv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetVertexAttribfv	opengles-3.1-stubs/GLESv2.c	/^void glGetVertexAttribfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glGetVertexAttribiv	opengles-3.1-stubs/GLESv2.c	/^void glGetVertexAttribiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glHint	opengles-3.1-stubs/GLESv2.c	/^void glHint(void) { PRINT_STUB_ERROR; return; }$/;"	f
glInvalidateFramebuffer	opengles-3.1-stubs/GLESv2.c	/^void glInvalidateFramebuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glInvalidateSubFramebuffer	opengles-3.1-stubs/GLESv2.c	/^void glInvalidateSubFramebuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsBuffer	opengles-3.1-stubs/GLESv2.c	/^void glIsBuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsEnabled	opengles-3.1-stubs/GLESv2.c	/^void glIsEnabled(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsFramebuffer	opengles-3.1-stubs/GLESv2.c	/^void glIsFramebuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsProgram	opengles-3.1-stubs/GLESv2.c	/^void glIsProgram(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsQuery	opengles-3.1-stubs/GLESv2.c	/^void glIsQuery(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsRenderbuffer	opengles-3.1-stubs/GLESv2.c	/^void glIsRenderbuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsSampler	opengles-3.1-stubs/GLESv2.c	/^void glIsSampler(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsShader	opengles-3.1-stubs/GLESv2.c	/^void glIsShader(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsSync	opengles-3.1-stubs/GLESv2.c	/^void glIsSync(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsTexture	opengles-3.1-stubs/GLESv2.c	/^void glIsTexture(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsTransformFeedback	opengles-3.1-stubs/GLESv2.c	/^void glIsTransformFeedback(void) { PRINT_STUB_ERROR; return; }$/;"	f
glIsVertexArray	opengles-3.1-stubs/GLESv2.c	/^void glIsVertexArray(void) { PRINT_STUB_ERROR; return; }$/;"	f
glLineWidth	opengles-3.1-stubs/GLESv2.c	/^void glLineWidth(void) { PRINT_STUB_ERROR; return; }$/;"	f
glLinkProgram	opengles-3.1-stubs/GLESv2.c	/^void glLinkProgram(void) { PRINT_STUB_ERROR; return; }$/;"	f
glLinkProgram	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glLinkProgram(GLuint program)$/;"	f
glMapBufferRange	opengles-3.1-stubs/GLESv2.c	/^void glMapBufferRange(void) { PRINT_STUB_ERROR; return; }$/;"	f
glMapBufferRange	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void *GL_APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)$/;"	f
glMemoryBarrier	opengles-3.1-stubs/GLESv2.c	/^void glMemoryBarrier(void) { PRINT_STUB_ERROR; return; }$/;"	f
glMemoryBarrier	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glMemoryBarrier(GLbitfield barriers)$/;"	f
glPauseTransformFeedback	opengles-3.1-stubs/GLESv2.c	/^void glPauseTransformFeedback(void) { PRINT_STUB_ERROR; return; }$/;"	f
glPixelStorei	opengles-3.1-stubs/GLESv2.c	/^void glPixelStorei(void) { PRINT_STUB_ERROR; return; }$/;"	f
glPolygonOffset	opengles-3.1-stubs/GLESv2.c	/^void glPolygonOffset(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramBinary	opengles-3.1-stubs/GLESv2.c	/^void glProgramBinary(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramParameteri	opengles-3.1-stubs/GLESv2.c	/^void glProgramParameteri(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniform1f	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniform1f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniform1ui	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniform1ui(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniform2f	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniform2f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniform3f	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniform3f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniform3fv	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniform3fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniform4f	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniform4f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glProgramUniformMatrix4fv	opengles-3.1-stubs/GLESv2.c	/^void glProgramUniformMatrix4fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glReadBuffer	opengles-3.1-stubs/GLESv2.c	/^void glReadBuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glReadPixels	opengles-3.1-stubs/GLESv2.c	/^void glReadPixels(void) { PRINT_STUB_ERROR; return; }$/;"	f
glReleaseShaderCompiler	opengles-3.1-stubs/GLESv2.c	/^void glReleaseShaderCompiler(void) { PRINT_STUB_ERROR; return; }$/;"	f
glRenderbufferStorage	opengles-3.1-stubs/GLESv2.c	/^void glRenderbufferStorage(void) { PRINT_STUB_ERROR; return; }$/;"	f
glRenderbufferStorageMultisample	opengles-3.1-stubs/GLESv2.c	/^void glRenderbufferStorageMultisample(void) { PRINT_STUB_ERROR; return; }$/;"	f
glResumeTransformFeedback	opengles-3.1-stubs/GLESv2.c	/^void glResumeTransformFeedback(void) { PRINT_STUB_ERROR; return; }$/;"	f
glSampleCoverage	opengles-3.1-stubs/GLESv2.c	/^void glSampleCoverage(void) { PRINT_STUB_ERROR; return; }$/;"	f
glSamplerParameterf	opengles-3.1-stubs/GLESv2.c	/^void glSamplerParameterf(void) { PRINT_STUB_ERROR; return; }$/;"	f
glSamplerParameterfv	opengles-3.1-stubs/GLESv2.c	/^void glSamplerParameterfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glSamplerParameteri	opengles-3.1-stubs/GLESv2.c	/^void glSamplerParameteri(void) { PRINT_STUB_ERROR; return; }$/;"	f
glSamplerParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glSamplerParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glScissor	opengles-3.1-stubs/GLESv2.c	/^void glScissor(void) { PRINT_STUB_ERROR; return; }$/;"	f
glShaderBinary	opengles-3.1-stubs/GLESv2.c	/^void glShaderBinary(void) { PRINT_STUB_ERROR; return; }$/;"	f
glShaderSource	opengles-3.1-stubs/GLESv2.c	/^void glShaderSource(void) { PRINT_STUB_ERROR; return; }$/;"	f
glShaderSource	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)$/;"	f
glStencilFunc	opengles-3.1-stubs/GLESv2.c	/^void glStencilFunc(void) { PRINT_STUB_ERROR; return; }$/;"	f
glStencilFuncSeparate	opengles-3.1-stubs/GLESv2.c	/^void glStencilFuncSeparate(void) { PRINT_STUB_ERROR; return; }$/;"	f
glStencilMask	opengles-3.1-stubs/GLESv2.c	/^void glStencilMask(void) { PRINT_STUB_ERROR; return; }$/;"	f
glStencilMaskSeparate	opengles-3.1-stubs/GLESv2.c	/^void glStencilMaskSeparate(void) { PRINT_STUB_ERROR; return; }$/;"	f
glStencilOp	opengles-3.1-stubs/GLESv2.c	/^void glStencilOp(void) { PRINT_STUB_ERROR; return; }$/;"	f
glStencilOpSeparate	opengles-3.1-stubs/GLESv2.c	/^void glStencilOpSeparate(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexImage2D	opengles-3.1-stubs/GLESv2.c	/^void glTexImage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexImage2D	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f
glTexImage3D	opengles-3.1-stubs/GLESv2.c	/^void glTexImage3D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexParameterf	opengles-3.1-stubs/GLESv2.c	/^void glTexParameterf(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexParameterfv	opengles-3.1-stubs/GLESv2.c	/^void glTexParameterfv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexParameteri	opengles-3.1-stubs/GLESv2.c	/^void glTexParameteri(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexParameteriv	opengles-3.1-stubs/GLESv2.c	/^void glTexParameteriv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexStorage2D	opengles-3.1-stubs/GLESv2.c	/^void glTexStorage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexStorage3D	opengles-3.1-stubs/GLESv2.c	/^void glTexStorage3D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexSubImage2D	opengles-3.1-stubs/GLESv2.c	/^void glTexSubImage2D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTexSubImage3D	opengles-3.1-stubs/GLESv2.c	/^void glTexSubImage3D(void) { PRINT_STUB_ERROR; return; }$/;"	f
glTransformFeedbackVaryings	opengles-3.1-stubs/GLESv2.c	/^void glTransformFeedbackVaryings(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform1f	opengles-3.1-stubs/GLESv2.c	/^void glUniform1f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform1fv	opengles-3.1-stubs/GLESv2.c	/^void glUniform1fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform1i	opengles-3.1-stubs/GLESv2.c	/^void glUniform1i(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform1iv	opengles-3.1-stubs/GLESv2.c	/^void glUniform1iv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform1ui	opengles-3.1-stubs/GLESv2.c	/^void glUniform1ui(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform1ui	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glUniform1ui(GLint location, GLuint v0)$/;"	f
glUniform1uiv	opengles-3.1-stubs/GLESv2.c	/^void glUniform1uiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform2f	opengles-3.1-stubs/GLESv2.c	/^void glUniform2f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform2fv	opengles-3.1-stubs/GLESv2.c	/^void glUniform2fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform2i	opengles-3.1-stubs/GLESv2.c	/^void glUniform2i(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform2iv	opengles-3.1-stubs/GLESv2.c	/^void glUniform2iv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform2ui	opengles-3.1-stubs/GLESv2.c	/^void glUniform2ui(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform2uiv	opengles-3.1-stubs/GLESv2.c	/^void glUniform2uiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform3f	opengles-3.1-stubs/GLESv2.c	/^void glUniform3f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform3fv	opengles-3.1-stubs/GLESv2.c	/^void glUniform3fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform3i	opengles-3.1-stubs/GLESv2.c	/^void glUniform3i(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform3iv	opengles-3.1-stubs/GLESv2.c	/^void glUniform3iv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform3ui	opengles-3.1-stubs/GLESv2.c	/^void glUniform3ui(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform3uiv	opengles-3.1-stubs/GLESv2.c	/^void glUniform3uiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform4f	opengles-3.1-stubs/GLESv2.c	/^void glUniform4f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform4fv	opengles-3.1-stubs/GLESv2.c	/^void glUniform4fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform4i	opengles-3.1-stubs/GLESv2.c	/^void glUniform4i(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform4iv	opengles-3.1-stubs/GLESv2.c	/^void glUniform4iv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform4ui	opengles-3.1-stubs/GLESv2.c	/^void glUniform4ui(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniform4uiv	opengles-3.1-stubs/GLESv2.c	/^void glUniform4uiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformBlockBinding	opengles-3.1-stubs/GLESv2.c	/^void glUniformBlockBinding(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformBlockBinding	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)$/;"	f
glUniformMatrix2fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix2fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix2x3fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix2x3fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix2x4fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix2x4fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix3fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix3fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix3x2fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix3x2fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix3x4fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix3x4fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix4fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix4fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix4x2fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix4x2fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUniformMatrix4x3fv	opengles-3.1-stubs/GLESv2.c	/^void glUniformMatrix4x3fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUnmapBuffer	opengles-3.1-stubs/GLESv2.c	/^void glUnmapBuffer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUnmapBuffer	src/core/GLES_COMPUTE/OpenGLES.cpp	/^GLboolean GL_APIENTRY glUnmapBuffer(GLenum target)$/;"	f
glUseProgram	opengles-3.1-stubs/GLESv2.c	/^void glUseProgram(void) { PRINT_STUB_ERROR; return; }$/;"	f
glUseProgram	src/core/GLES_COMPUTE/OpenGLES.cpp	/^void GL_APIENTRY glUseProgram(GLuint program)$/;"	f
glValidateProgram	opengles-3.1-stubs/GLESv2.c	/^void glValidateProgram(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib1f	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib1f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib1fv	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib1fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib2f	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib2f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib2fv	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib2fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib3f	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib3f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib3fv	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib3fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib4f	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib4f(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttrib4fv	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttrib4fv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribDivisor	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribDivisor(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribI4i	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribI4i(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribI4iv	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribI4iv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribI4ui	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribI4ui(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribI4uiv	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribI4uiv(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribIPointer	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribIPointer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glVertexAttribPointer	opengles-3.1-stubs/GLESv2.c	/^void glVertexAttribPointer(void) { PRINT_STUB_ERROR; return; }$/;"	f
glViewport	opengles-3.1-stubs/GLESv2.c	/^void glViewport(void) { PRINT_STUB_ERROR; return; }$/;"	f
glWaitSync	opengles-3.1-stubs/GLESv2.c	/^void glWaitSync(void) { PRINT_STUB_ERROR; return; }$/;"	f
gles	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^namespace gles$/;"	n	namespace:arm_compute
global_	include/CL/cl.hpp	/^    const NDRange global_;$/;"	m	struct:cl::EnqueueArgs
global_	include/CL/cl2.hpp	/^    const NDRange global_;$/;"	m	class:cl::EnqueueArgs
globals_defs	documentation/globals_defs.js	/^var globals_defs =$/;"	v
globals_dup	documentation/globals_dup.js	/^var globals_dup =$/;"	v
globals_func	documentation/globals_func.js	/^var globals_func =$/;"	v
glowEffect	documentation/navtree.js	/^function glowEffect(n,duration)$/;"	f
gotoAnchor	documentation/navtree.js	/^function gotoAnchor(anchor,aname,updateLocation)$/;"	f
gotoNode	documentation/navtree.js	/^function gotoNode(o,subIndex,root,hash,relpath)$/;"	f
gpu_available_memory_size	tests/framework/instruments/hwc.hpp	/^    uint64_t gpu_available_memory_size;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
gpu_freq_khz_max	tests/framework/instruments/hwc.hpp	/^    uint32_t gpu_freq_khz_max;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
gpu_freq_khz_min	tests/framework/instruments/hwc.hpp	/^    uint32_t gpu_freq_khz_min;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
gpu_id	tests/framework/instruments/MaliCounter.cpp	/^    unsigned gpu_id;$/;"	m	struct:arm_compute::test::framework::__anon387::MaliHWInfo	file:
gpu_id	tests/framework/instruments/hwc.hpp	/^    uint32_t gpu_id;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
gpu_property_mapping	tests/framework/instruments/hwc.hpp	/^} gpu_property_mapping[] =$/;"	m	namespace:mali_userspace	typeref:struct:mali_userspace::__anon389
gpu_props	tests/framework/instruments/hwc.hpp	/^struct gpu_props$/;"	s	namespace:mali_userspace
gpu_raw_gpu_props	tests/framework/instruments/hwc.hpp	/^struct gpu_raw_gpu_props$/;"	s	namespace:mali_userspace
gpu_speed_mhz	tests/framework/instruments/hwc.hpp	/^    uint32_t gpu_speed_mhz;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
gpu_target	arm_compute/core/CL/CLTypes.h	/^    GPUTarget   gpu_target;  \/**< GPU target architecture\/instance *\/$/;"	m	struct:arm_compute::CLDeviceOptions
gpu_target_is_in	arm_compute/core/GPUTarget.h	/^bool gpu_target_is_in(GPUTarget target_to_check, GPUTarget target, Args... targets)$/;"	f	class:arm_compute::GPUTarget
gpu_target_is_in	arm_compute/core/GPUTarget.h	/^inline bool gpu_target_is_in(GPUTarget target_to_check, GPUTarget target)$/;"	f	class:arm_compute::GPUTarget
gradient_size	tests/benchmark/CL/HarrisCorners.cpp	/^const auto gradient_size = framework::dataset::make("GradientSize", { 3, 5, 7 });$/;"	m	namespace:arm_compute::test::benchmark::__anon340	file:
gradient_size	tests/benchmark/NEON/HarrisCorners.cpp	/^const auto gradient_size = framework::dataset::make("GradientSize", { 3, 5, 7 });$/;"	m	namespace:arm_compute::test::benchmark::__anon374	file:
graph	arm_compute/graph/Edge.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/Graph.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/GraphBuilder.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/GraphContext.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/GraphManager.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/IDeviceBackend.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/IGraphMutator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/IGraphPrinter.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/INode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/INodeVisitor.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/ITensorAccessor.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/ITensorHandle.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/PassManager.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/Tensor.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/TensorDescriptor.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/TypePrinter.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/Types.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/Utils.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/Workload.h	/^    Graph                     *graph   = { nullptr }; \/**< Graph bound to the workload *\/$/;"	m	struct:arm_compute::graph::ExecutionWorkload
graph	arm_compute/graph/Workload.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/algorithms/BFS.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/BackendRegistrar.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/BackendRegistry.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/CL/CLFunctionFactory.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/CL/CLNodeValidator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/CL/CLTensorHandle.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/GLES/GCFunctionFactory.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/GLES/GCNodeValidator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/NEON/NEFunctionFactory.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/NEON/NENodeValidator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/NEON/NETensorHandle.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/Utils.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/backends/ValidateHelpers.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/detail/CrossLayerMemoryManagerHelpers.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/detail/ExecutionHelpers.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/ILayer.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/IStream.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/IStreamOperators.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/Layers.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/Stream.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/SubStream.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/frontend/Types.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/mutators/DepthConcatSubTensorMutator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/mutators/InPlaceOperationMutator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/mutators/NodeFusionMutator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/mutators/SplitLayerSubTensorMutator.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/ActivationLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/ConstNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/EltwiseLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/FlattenLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/InputNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/NodesFwd.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/NormalizationLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/OutputNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/PoolingLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/ReshapeLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/nodes/SplitLayerNode.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	arm_compute/graph/printers/DotGraphPrinter.h	/^namespace graph$/;"	n	namespace:arm_compute
graph	src/graph/Graph.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/GraphBuilder.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/GraphContext.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/GraphManager.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/INode.cpp	/^Graph *INode::graph()$/;"	f	class:arm_compute::graph::INode
graph	src/graph/INode.cpp	/^const Graph *INode::graph() const$/;"	f	class:arm_compute::graph::INode
graph	src/graph/INode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/PassManager.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/Tensor.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/Utils.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/Workload.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/BackendRegistry.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/CL/CLDeviceBackend.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/CL/CLFunctionsFactory.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/CL/CLNodeValidator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/CL/CLSubTensorHandle.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/CL/CLTensorHandle.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/GLES/GCDeviceBackend.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/GLES/GCFunctionsFactory.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/GLES/GCNodeValidator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/GLES/GCTensorHandle.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/NEON/NEDeviceBackend.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/NEON/NEFunctionFactory.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/NEON/NENodeValidator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/NEON/NESubTensorHandle.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/backends/NEON/NETensorHandle.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/detail/ExecutionHelpers.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/frontend/Stream.cpp	/^Graph &Stream::graph()$/;"	f	class:arm_compute::graph::frontend::Stream
graph	src/graph/frontend/Stream.cpp	/^const Graph &Stream::graph() const$/;"	f	class:arm_compute::graph::frontend::Stream
graph	src/graph/frontend/Stream.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/frontend/SubStream.cpp	/^Graph &SubStream::graph()$/;"	f	class:arm_compute::graph::frontend::SubStream
graph	src/graph/frontend/SubStream.cpp	/^const Graph &SubStream::graph() const$/;"	f	class:arm_compute::graph::frontend::SubStream
graph	src/graph/frontend/SubStream.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/mutators/DepthConcatSubTensorMutator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/mutators/InPlaceOperationMutator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/mutators/NodeFusionMutator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/mutators/SplitLayerSubTensorMutator.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/ActivationLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/ConstNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/ConvolutionLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/EltwiseLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/FlattenLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/FullyConnectedLayer.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/InputNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/NormalizationLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/OutputNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/PoolingLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/ReshapeLayer.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/SoftmaxLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/nodes/SplitLayerNode.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph	src/graph/printers/DotGraphPrinter.cpp	/^namespace graph$/;"	n	namespace:arm_compute	file:
graph_2_logger_8h	documentation/graph_2_logger_8h.js	/^var graph_2_logger_8h =$/;"	v
graph_8h_source.xhtml	documentation/navtreeindex44.js	/^"graph_8h_source.xhtml":[6,0,0,3],$/;"	p	class:NAVTREEINDEX44
graph__alexnet_8cpp	documentation/graph__alexnet_8cpp.js	/^var graph__alexnet_8cpp =$/;"	v
graph__googlenet_8cpp	documentation/graph__googlenet_8cpp.js	/^var graph__googlenet_8cpp =$/;"	v
graph__inception__v3_8cpp	documentation/graph__inception__v3_8cpp.js	/^var graph__inception__v3_8cpp =$/;"	v
graph__inception__v4_8cpp	documentation/graph__inception__v4_8cpp.js	/^var graph__inception__v4_8cpp =$/;"	v
graph__lenet_8cpp	documentation/graph__lenet_8cpp.js	/^var graph__lenet_8cpp =$/;"	v
graph__mobilenet_8cpp	documentation/graph__mobilenet_8cpp.js	/^var graph__mobilenet_8cpp =$/;"	v
graph__mobilenet__qasymm8_8cpp	documentation/graph__mobilenet__qasymm8_8cpp.js	/^var graph__mobilenet__qasymm8_8cpp =$/;"	v
graph__resnet50_8cpp	documentation/graph__resnet50_8cpp.js	/^var graph__resnet50_8cpp =$/;"	v
graph__resnext50_8cpp	documentation/graph__resnext50_8cpp.js	/^var graph__resnext50_8cpp =$/;"	v
graph__squeezenet_8cpp	documentation/graph__squeezenet_8cpp.js	/^var graph__squeezenet_8cpp =$/;"	v
graph__squeezenet__v1__1_8cpp	documentation/graph__squeezenet__v1__1_8cpp.js	/^var graph__squeezenet__v1__1_8cpp =$/;"	v
graph__vgg16_8cpp	documentation/graph__vgg16_8cpp.js	/^var graph__vgg16_8cpp =$/;"	v
graph__vgg19_8cpp	documentation/graph__vgg19_8cpp.js	/^var graph__vgg19_8cpp =$/;"	v
graph_utils	utils/GraphUtils.h	/^namespace graph_utils$/;"	n	namespace:arm_compute
green_size	include/linux/EGL/fbdev_window.h	/^	unsigned char green_size;$/;"	m	struct:fbdev_pixmap
group	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_coherent_group group[BASE_MAX_COHERENT_GROUPS];$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group_info
gws_from_window	src/core/CL/ICLKernel.cpp	/^cl::NDRange ICLKernel::gws_from_window(const Window &window)$/;"	f	class:ICLKernel
h_w_ifm_ofm_to_ofm_ifm_h_w	arm_compute/core/NEON/kernels/convolution/common/shims.hpp	/^inline void h_w_ifm_ofm_to_ofm_ifm_h_w($/;"	f	namespace:reorder
half	include/half/half.hpp	/^		explicit half(float rhs) : data_(detail::float2half<round_style>(rhs)) {}$/;"	f	class:half
half	include/half/half.hpp	/^		half(detail::expr rhs) : data_(detail::float2half<round_style>(static_cast<float>(rhs))) {}$/;"	f	class:half
half	include/half/half.hpp	/^	class half$/;"	c
half2float	include/half/half.hpp	/^		template<typename T> T half2float(uint16 value)$/;"	f	namespace:half_float
half2float_impl	include/half/half.hpp	/^		inline double half2float_impl(uint16 value, double, true_type)$/;"	f	namespace:half_float
half2float_impl	include/half/half.hpp	/^		inline float half2float_impl(uint16 value, float, true_type)$/;"	f	namespace:half_float
half2float_impl	include/half/half.hpp	/^		template<typename T> T half2float_impl(uint16 value, T, ...)$/;"	f	namespace:half_float
half2int	include/half/half.hpp	/^		template<std::float_round_style R,typename T> T half2int(uint16 value) { return half2int_impl<R,HALF_ROUND_TIES_TO_EVEN,T>(value); }$/;"	f	namespace:half_float
half2int_impl	include/half/half.hpp	/^		template<std::float_round_style R,bool E,typename T> T half2int_impl(uint16 value)$/;"	f	namespace:half_float
half2int_up	include/half/half.hpp	/^		template<typename T> T half2int_up(uint16 value) { return half2int_impl<std::round_to_nearest,0,T>(value); }$/;"	f	namespace:half_float
half_cast	include/half/half.hpp	/^		template<typename T,std::float_round_style R,typename U> T half_cast(U arg) { return half_caster<T,U,R>::cast(arg); }$/;"	f	namespace:detail
half_cast	include/half/half.hpp	/^		template<typename T,typename U> T half_cast(U arg) { return half_caster<T,U>::cast(arg); }$/;"	f	namespace:detail
half_caster	include/half/half.hpp	/^		template<std::float_round_style R> struct half_caster<half,expr,R> : half_caster<half,half,R> {};$/;"	s	namespace:detail
half_caster	include/half/half.hpp	/^		template<std::float_round_style R> struct half_caster<half,half,R>$/;"	s	namespace:detail
half_caster	include/half/half.hpp	/^		template<typename T,std::float_round_style R> struct half_caster<T,expr,R>$/;"	s	namespace:detail
half_caster	include/half/half.hpp	/^		template<typename T,std::float_round_style R> struct half_caster<T,half,R>$/;"	s	namespace:detail
half_caster	include/half/half.hpp	/^		template<typename T,typename U,std::float_round_style R=(std::float_round_style)(HALF_ROUND_STYLE)> struct half_caster {};$/;"	s	namespace:detail
half_caster	include/half/half.hpp	/^		template<typename U,std::float_round_style R> struct half_caster<half,U,R>$/;"	s	namespace:detail
half_float	include/half/half.hpp	/^namespace half_float$/;"	n
handle	arm_compute/runtime/ISimpleLifetimeManager.h	/^        void **handle; \/**< Element's memory handle *\/$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Element
handle	src/graph/Tensor.cpp	/^ITensorHandle *Tensor::handle()$/;"	f	class:arm_compute::graph::Tensor
handle	src/runtime/CL/CLMemoryRegion.cpp	/^void **ICLMemoryRegion::handle()$/;"	f	class:arm_compute::ICLMemoryRegion
hardware_counters_mali_t60x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t60x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t62x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t62x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t72x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t72x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t76x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t76x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t82x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t82x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t83x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t83x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t86x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t86x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_t88x	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_t88x[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_tHEx	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_tHEx[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_tMIx	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_tMIx[] =$/;"	m	namespace:mali_userspace
hardware_counters_mali_tSIx	tests/framework/instruments/hwc_names.hpp	/^static const char *const hardware_counters_mali_tSIx[] =$/;"	m	namespace:mali_userspace
harris__corners_8cl	documentation/harris__corners_8cl.js	/^var harris__corners_8cl =$/;"	v
harris_corner_detector	tests/validation/reference/HarrisCornerDetector.cpp	/^std::vector<KeyPoint> harris_corner_detector(const SimpleTensor<T> &src, float threshold, float min_dist, float sensitivity, int gradient_size, int block_size, BorderMode border_mode,$/;"	f	namespace:arm_compute::test::validation::reference
harris_corner_detector_impl	tests/validation/reference/HarrisCornerDetector.cpp	/^std::vector<KeyPoint> harris_corner_detector_impl(const SimpleTensor<U> &src, float threshold, float min_dist, float sensitivity, int gradient_size, int block_size, BorderMode border_mode,$/;"	f	namespace:arm_compute::test::validation::reference::__anon541
harris_corners_parameters	tests/validation/Helpers.cpp	/^HarrisCornersParameters harris_corners_parameters()$/;"	f	namespace:arm_compute::test::validation
harris_score	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline float16x8_t harris_score(float16x8_t gx2, float16x8_t gy2, float16x8_t gxgy, float sensitivity, float strength_thresh)$/;"	f	namespace:fp16
harris_score	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline float32x4_t harris_score(float32x4_t gx2, float32x4_t gy2, float32x4_t gxgy, float32x4_t sensitivity, float32x4_t strength_thresh)$/;"	f	namespace:__anon272
harris_score1x3_FLOAT_FLOAT_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score1x3_FLOAT_FLOAT_FLOAT(float32x4_t low_gx, float32x4_t low_gy, float32x4_t high_gx, float32x4_t high_gy, float32x4_t &gx2, float32x4_t &gy2, float32x4_t &gxgy,$/;"	f	namespace:__anon272
harris_score1x5_FLOAT_FLOAT_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score1x5_FLOAT_FLOAT_FLOAT(float32x4_t low_gx, float32x4_t low_gy, float32x4_t high_gx, float32x4_t high_gy, float32x4_t &gx2, float32x4_t &gy2, float32x4_t &gxgy,$/;"	f	namespace:__anon272
harris_score1x7_FLOAT_FLOAT_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score1x7_FLOAT_FLOAT_FLOAT(float32x4_t low_gx, float32x4_t low_gy, float32x4_t high_gx, float32x4_t high_gy, float32x4_t high_gx1, float32x4_t high_gy1, float32x4_t &gx2,$/;"	f	namespace:__anon272
harris_score1xN_FLOAT_FLOAT_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score1xN_FLOAT_FLOAT_FLOAT(float16x8_t low_gx, float16x8_t low_gy, float16x8_t high_gx, float16x8_t high_gy, float16x8_t &gx2, float16x8_t &gy2, float16x8_t &gxgy,$/;"	f	namespace:fp16
harris_score3x3_S16_S16_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score3x3_S16_S16_FLOAT(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int32_t input_stride,$/;"	f	namespace:__anon272
harris_score3x3_S32_S32_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score3x3_S32_S32_FLOAT(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int32_t input_stride,$/;"	f	namespace:__anon272
harris_score5x5_S16_S16_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score5x5_S16_S16_FLOAT(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int32_t input_stride,$/;"	f	namespace:__anon272
harris_score5x5_S32_S32_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score5x5_S32_S32_FLOAT(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int32_t input_stride,$/;"	f	namespace:__anon272
harris_score7x7_S16_S16_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score7x7_S16_S16_FLOAT(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int32_t input_stride,$/;"	f	namespace:__anon272
harris_score7x7_S32_S32_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score7x7_S32_S32_FLOAT(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int32_t input_stride,$/;"	f	namespace:__anon272
harris_score_S16_S16_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score_S16_S16_FLOAT(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out_ptr, int32_t in_stride, float norm_factor, float sensitivity,$/;"	f	namespace:fp16
harris_score_S32_S32_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score_S32_S32_FLOAT(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out_ptr, int32_t in_stride, float norm_factor, float sensitivity,$/;"	f	namespace:fp16
harris_score_S32_S32_FLOAT	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^inline void harris_score_S32_S32_FLOAT<7>(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out_ptr, int32_t in_stride, float norm_factor, float sensitivity,$/;"	f	namespace:fp16
has_cifg_opt	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool has_cifg_opt() const$/;"	f	class:arm_compute::LSTMParams
has_dotprod	src/core/CPP/CPPTypes.cpp	/^bool CPUInfo::has_dotprod() const$/;"	f	class:CPUInfo
has_format_horizontal_subsampling	arm_compute/core/Utils.h	/^inline bool has_format_horizontal_subsampling(Format format)$/;"	f	namespace:arm_compute
has_format_vertical_subsampling	arm_compute/core/Utils.h	/^inline bool has_format_vertical_subsampling(Format format)$/;"	f	namespace:arm_compute
has_fp16	src/core/CPP/CPPTypes.cpp	/^bool CPUInfo::has_fp16() const$/;"	f	class:CPUInfo
has_padding	arm_compute/core/Types.h	/^    bool has_padding() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
has_peephole_opt	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool has_peephole_opt() const$/;"	f	class:arm_compute::LSTMParams
has_projection	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    bool has_projection() const$/;"	f	class:arm_compute::LSTMParams
has_test_info	tests/framework/Framework.cpp	/^bool Framework::has_test_info() const$/;"	f	class:arm_compute::test::framework::Framework
hash	src/core/GLES_COMPUTE/cs_shaders/dropout.cs	/^uint hash(uint x)$/;"	m
hash	src/core/GLES_COMPUTE/cs_shaders/dropout.cs	/^uint hash(uvec3 v)$/;"	m
hashUrl	documentation/navtree.js	/^function hashUrl()$/;"	f
hashValue	documentation/navtree.js	/^function hashValue()$/;"	f
have_different_dimensions	arm_compute/core/Validate.h	/^inline bool have_different_dimensions(const Dimensions<T> &dim1, const Dimensions<T> &dim2, unsigned int upper_dim)$/;"	f	namespace:arm_compute::detail
header	tests/framework/instruments/hwc.hpp	/^    uk_header           header;$/;"	m	struct:mali_userspace::kbase_uk_gpuprops
header	tests/framework/instruments/hwc.hpp	/^    uk_header header;$/;"	m	struct:mali_userspace::__anon390::uku_version_check_args
header	tests/framework/instruments/hwc.hpp	/^    union kbase_uk_hwcnt_header header;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_set_flags	typeref:union:mali_userspace::__anon390::kbase_uk_hwcnt_reader_set_flags::kbase_uk_hwcnt_header
header	tests/framework/instruments/hwc.hpp	/^    union kbase_uk_hwcnt_header header;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup	typeref:union:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup::kbase_uk_hwcnt_header
header	tests/framework/instruments/hwc.hpp	/^    union kbase_uk_hwcnt_header header;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_version_check_args	typeref:union:mali_userspace::__anon390::kbase_uk_hwcnt_reader_version_check_args::kbase_uk_hwcnt_header
height	arm_compute/core/Size2D.h	/^    size_t height = {}; \/**< Height of the image region or rectangle *\/$/;"	m	class:arm_compute::Size2D
height	arm_compute/core/Types.h	/^    uint16_t height; \/**< Height of the rectangle *\/$/;"	m	struct:arm_compute::Rectangle
height	include/linux/EGL/fbdev_window.h	/^	unsigned int height;$/;"	m	struct:fbdev_pixmap
height	include/linux/EGL/fbdev_window.h	/^	unsigned short height;$/;"	m	struct:fbdev_window
height	src/core/CL/cl_kernels/types.h	/^    ushort height;    \/**< Height of the detection window *\/$/;"	m	struct:DetectionWindow
height	src/core/MultiImageInfo.cpp	/^unsigned int MultiImageInfo::height() const$/;"	f	class:MultiImageInfo
height	src/core/PyramidInfo.cpp	/^size_t PyramidInfo::height() const$/;"	f	class:PyramidInfo
height	utils/Utils.h	/^    unsigned int height() const$/;"	f	class:arm_compute::utils::PPMLoader
help	tests/framework/command_line/CommonOptions.h	/^    ToggleOption                               *help;           \/**< Show help option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
help	tests/framework/command_line/EnumListOption.h	/^std::string EnumListOption<T>::help() const$/;"	f	class:arm_compute::test::framework::EnumListOption
help	tests/framework/command_line/EnumOption.h	/^std::string EnumOption<T>::help() const$/;"	f	class:arm_compute::test::framework::EnumOption
help	tests/framework/command_line/ListOption.h	/^inline std::string ListOption<T>::help() const$/;"	f	class:arm_compute::test::framework::ListOption
help	tests/framework/command_line/SimpleOption.h	/^inline std::string SimpleOption<T>::help() const$/;"	f	class:arm_compute::test::framework::SimpleOption
help	tests/framework/command_line/ToggleOption.cpp	/^std::string ToggleOption::help() const$/;"	f	class:arm_compute::test::framework::ToggleOption
helpers_8h	documentation/helpers_8h.js	/^var helpers_8h =$/;"	v
helpers__asymm_8h	documentation/helpers__asymm_8h.js	/^var helpers__asymm_8h =$/;"	v
hgemm_24x8	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    hgemm_24x8(const CPUInfo *ci)$/;"	f	class:arm_gemm::hgemm_24x8
hgemm_24x8	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^class hgemm_24x8$/;"	c	namespace:arm_gemm
hi	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  lo, hi; };$/;"	m	struct:__anon69::__anon72
hi	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half2 lo, hi; };$/;"	m	struct:__anon73::__anon76
hi	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half4 lo, hi; };$/;"	m	struct:__anon77::__anon80
hi	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half8 lo, hi; };$/;"	m	struct:__anon81::__anon84
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  lo, hi; };$/;"	m	struct:__anon5::__anon8
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char2 lo, hi; };$/;"	m	struct:__anon9::__anon12
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char4 lo, hi; };$/;"	m	struct:__anon13::__anon16
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char8 lo, hi; };$/;"	m	struct:__anon17::__anon20
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double lo, hi; };$/;"	m	struct:__anon165::__anon168
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double2 lo, hi; };$/;"	m	struct:__anon169::__anon172
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double4 lo, hi; };$/;"	m	struct:__anon173::__anon176
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double8 lo, hi; };$/;"	m	struct:__anon177::__anon180
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  lo, hi; };$/;"	m	struct:__anon149::__anon152
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float2  lo, hi; };$/;"	m	struct:__anon153::__anon156
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float4  lo, hi; };$/;"	m	struct:__anon157::__anon160
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float8 lo, hi; };$/;"	m	struct:__anon161::__anon164
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  lo, hi; };$/;"	m	struct:__anon85::__anon88
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int2 lo, hi; };$/;"	m	struct:__anon89::__anon92
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int4 lo, hi; };$/;"	m	struct:__anon93::__anon96
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int8 lo, hi; };$/;"	m	struct:__anon97::__anon100
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  lo, hi; };$/;"	m	struct:__anon117::__anon120
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long2 lo, hi; };$/;"	m	struct:__anon121::__anon124
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long4 lo, hi; };$/;"	m	struct:__anon125::__anon128
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long8 lo, hi; };$/;"	m	struct:__anon129::__anon132
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  lo, hi; };$/;"	m	struct:__anon37::__anon40
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short2 lo, hi; };$/;"	m	struct:__anon41::__anon44
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short4 lo, hi; };$/;"	m	struct:__anon45::__anon48
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short8 lo, hi; };$/;"	m	struct:__anon49::__anon52
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  lo, hi; };$/;"	m	struct:__anon21::__anon24
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar2 lo, hi; };$/;"	m	struct:__anon25::__anon28
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar4 lo, hi; };$/;"	m	struct:__anon29::__anon32
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar8 lo, hi; };$/;"	m	struct:__anon33::__anon36
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  lo, hi; };$/;"	m	struct:__anon101::__anon104
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint2 lo, hi; };$/;"	m	struct:__anon105::__anon108
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint4 lo, hi; };$/;"	m	struct:__anon109::__anon112
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint8 lo, hi; };$/;"	m	struct:__anon113::__anon116
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  lo, hi; };$/;"	m	struct:__anon133::__anon136
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong2 lo, hi; };$/;"	m	struct:__anon137::__anon140
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong4 lo, hi; };$/;"	m	struct:__anon141::__anon144
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong8 lo, hi; };$/;"	m	struct:__anon145::__anon148
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  lo, hi; };$/;"	m	struct:__anon53::__anon56
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort2 lo, hi; };$/;"	m	struct:__anon57::__anon60
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort4 lo, hi; };$/;"	m	struct:__anon61::__anon64
hi	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort8 lo, hi; };$/;"	m	struct:__anon65::__anon68
hierarchy	documentation/hierarchy.js	/^var hierarchy =$/;"	v
highlightAnchor	documentation/navtree.js	/^function highlightAnchor()$/;"	f
hints	arm_compute/graph/frontend/IStream.h	/^    StreamHints &hints()$/;"	f	class:arm_compute::graph::frontend::IStream
histogram	tests/validation/reference/Histogram.cpp	/^SimpleTensor<uint32_t> histogram(const SimpleTensor<T> &src, size_t num_bins, int32_t offset, uint32_t range)$/;"	f	namespace:arm_compute::test::validation::reference
histogram_8cl	documentation/histogram_8cl.js	/^var histogram_8cl =$/;"	v
histogram_U8	src/core/NEON/kernels/NEHistogramKernel.cpp	/^void NEHistogramKernel::histogram_U8(Window win, const ThreadInfo &info)$/;"	f	class:NEHistogramKernel
histogram_fixed_U8	src/core/NEON/kernels/NEHistogramKernel.cpp	/^void NEHistogramKernel::histogram_fixed_U8(Window win, const ThreadInfo &info)$/;"	f	class:NEHistogramKernel
hog_block_normalization	tests/validation/reference/HOGDescriptor.cpp	/^void hog_block_normalization(SimpleTensor<T> &desc, const SimpleTensor<T> &hog_space, const HOGInfo &hog_info)$/;"	f	namespace:arm_compute::test::validation::reference
hog_block_normalization_compute	tests/validation/reference/HOGDescriptor.cpp	/^void hog_block_normalization_compute(SimpleTensor<T> &block, SimpleTensor<T> &desc, const HOGInfo &hog_info, size_t block_idx)$/;"	f	namespace:arm_compute::test::validation::reference::__anon538
hog_descriptor	tests/validation/reference/HOGDescriptor.cpp	/^SimpleTensor<T> hog_descriptor(const SimpleTensor<U> &src, BorderMode border_mode, U constant_border_value, const HOGInfo &hog_info)$/;"	f	namespace:arm_compute::test::validation::reference
hog_detector	tests/validation/reference/HOGDetector.cpp	/^std::vector<DetectionWindow> hog_detector(const SimpleTensor<T> &src, const std::vector<T> &descriptor, unsigned int max_num_detection_windows,$/;"	f	namespace:arm_compute::test::validation::reference
hog_multi_detection	tests/validation/reference/HOGMultiDetection.cpp	/^std::vector<DetectionWindow> hog_multi_detection(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value,$/;"	f	namespace:arm_compute::test::validation::reference
hog_orientation_binning	tests/validation/reference/HOGDescriptor.cpp	/^void hog_orientation_binning(const SimpleTensor<T> &mag, const SimpleTensor<U> &phase, SimpleTensor<V> &hog_space, const HOGInfo &hog_info)$/;"	f	namespace:arm_compute::test::validation::reference
hog_orientation_compute	tests/validation/reference/HOGDescriptor.cpp	/^void hog_orientation_compute(const SimpleTensor<T> &mag, const SimpleTensor<T> &phase, std::vector<T> &bins, const HOGInfo &hog_info)$/;"	f	namespace:arm_compute::test::validation::reference::__anon538
host_cache_policy	include/CL/cl_ext.h	/^    cl_uint  host_cache_policy;$/;"	m	struct:_cl_mem_ext_host_ptr
host_endian_char	include/libnpy/npy.hpp	/^constexpr char host_endian_char = ( big_endian ? $/;"	m	namespace:npy
hypot	include/half/half.hpp	/^			static expr hypot(float x, float y)$/;"	f	struct:detail::functions
hypot	include/half/half.hpp	/^		inline expr hypot(expr x, expr y) { return functions::hypot(x, y); }$/;"	f	namespace:detail
hypot	include/half/half.hpp	/^		inline expr hypot(expr x, half y) { return functions::hypot(x, y); }$/;"	f	namespace:detail
hypot	include/half/half.hpp	/^		inline expr hypot(half x, expr y) { return functions::hypot(x, y); }$/;"	f	namespace:detail
hypot	include/half/half.hpp	/^		inline expr hypot(half x, half y) { return functions::hypot(x, y); }$/;"	f	namespace:detail
iHeight	include/linux/EGL/eglext.h	/^    EGLint iHeight;$/;"	m	struct:EGLClientPixmapHI
iStride	include/linux/EGL/eglext.h	/^    EGLint iStride;$/;"	m	struct:EGLClientPixmapHI
iWidth	include/linux/EGL/eglext.h	/^    EGLint iWidth;$/;"	m	struct:EGLClientPixmapHI
iceildiv	arm_compute/core/NEON/kernels/convolution/common/utils.hpp	/^inline int iceildiv(const int a, const int b)$/;"	f
iceildiv	src/core/NEON/kernels/arm_gemm/utils.hpp	/^inline int iceildiv(const int a, const int b)$/;"	f
id	arm_compute/graph/Edge.h	/^    EdgeID id() const$/;"	f	class:arm_compute::graph::final
id	arm_compute/runtime/ISimpleLifetimeManager.h	/^        void            *id;$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Blob
id	arm_compute/runtime/ISimpleLifetimeManager.h	/^        void *id;      \/**< Element id *\/$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Element
id	src/graph/Graph.cpp	/^GraphID Graph::id() const$/;"	f	class:arm_compute::graph::Graph
id	src/graph/INode.cpp	/^NodeID INode::id() const$/;"	f	class:arm_compute::graph::INode
id	src/graph/Tensor.cpp	/^TensorID Tensor::id() const$/;"	f	class:arm_compute::graph::Tensor
id	tests/framework/Framework.h	/^    int                     id;     \/**< Test ID *\/$/;"	m	struct:arm_compute::test::framework::TestInfo
id	tests/framework/instruments/MaliCounter.cpp	/^std::string MaliCounter::id() const$/;"	f	class:arm_compute::test::framework::MaliCounter
id	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^std::string OpenCLMemoryUsage::id() const$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
id	tests/framework/instruments/OpenCLTimer.cpp	/^std::string OpenCLTimer::id() const$/;"	f	class:arm_compute::test::framework::OpenCLTimer
id	tests/framework/instruments/PMUCounter.cpp	/^std::string PMUCounter::id() const$/;"	f	class:arm_compute::test::framework::PMUCounter
id	tests/framework/instruments/SchedulerTimer.cpp	/^std::string SchedulerTimer::id() const$/;"	f	class:arm_compute::test::framework::SchedulerTimer
id	tests/framework/instruments/WallClockTimer.cpp	/^std::string WallClockTimer::id() const$/;"	f	class:arm_compute::test::framework::WallClockTimer
id	tests/framework/instruments/hwc.hpp	/^    uint32_t id;$/;"	m	union:mali_userspace::__anon390::kbase_uk_hwcnt_header
id	tests/framework/instruments/hwc.hpp	/^    uint32_t id;$/;"	m	union:mali_userspace::uk_header
idx_class	src/core/CL/cl_kernels/types.h	/^    ushort idx_class; \/**< Index of the class *\/$/;"	m	struct:DetectionWindow
ignore_unused	arm_compute/core/Error.h	/^inline void ignore_unused(T &&...)$/;"	f	namespace:arm_compute
ilogb	include/half/half.hpp	/^			static int ilogb(half arg)$/;"	f	struct:detail::functions
ilogb	include/half/half.hpp	/^		inline int ilogb(expr arg) { return functions::ilogb(arg); }$/;"	f	namespace:detail
ilogb	include/half/half.hpp	/^		inline int ilogb(half arg) { return functions::ilogb(arg); }$/;"	f	namespace:detail
im2col	tests/validation/reference/Im2Col.cpp	/^void im2col(const SimpleTensor<T> &src, SimpleTensor<T> &dst, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias)$/;"	f	namespace:arm_compute::test::validation::reference
im2col_nchw	tests/validation/reference/Im2Col.cpp	/^void im2col_nchw(const SimpleTensor<T> &src, SimpleTensor<T> &dst, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias)$/;"	f	namespace:arm_compute::test::validation::reference
im2col_nhwc	tests/validation/reference/Im2Col.cpp	/^void im2col_nhwc(const SimpleTensor<T> &src, SimpleTensor<T> &dst, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias)$/;"	f	namespace:arm_compute::test::validation::reference
image_array_size	include/CL/cl.h	/^    size_t                  image_array_size;$/;"	m	struct:_cl_image_desc
image_channel_data_type	include/CL/cl.h	/^    cl_channel_type         image_channel_data_type;$/;"	m	struct:_cl_image_format
image_channel_order	include/CL/cl.h	/^    cl_channel_order        image_channel_order;$/;"	m	struct:_cl_image_format
image_depth	include/CL/cl.h	/^    size_t                  image_depth;$/;"	m	struct:_cl_image_desc
image_height	include/CL/cl.h	/^    size_t                  image_height;$/;"	m	struct:_cl_image_desc
image_offset_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^uint image_offset_in_bytes(ImageIterator image_iter, int x, int y)$/;"	f
image_row_pitch	include/CL/cl.h	/^    size_t                  image_row_pitch;$/;"	m	struct:_cl_image_desc
image_slice_pitch	include/CL/cl.h	/^    size_t                  image_slice_pitch;$/;"	m	struct:_cl_image_desc
image_type	include/CL/cl.h	/^    cl_mem_object_type      image_type;$/;"	m	struct:_cl_image_desc
image_width	include/CL/cl.h	/^    size_t                  image_width;$/;"	m	struct:_cl_image_desc
impl	arm_compute/core/utils/misc/CRTP.h	/^    T &impl()$/;"	f	struct:arm_compute::misc::CRTP
impl	arm_compute/core/utils/misc/CRTP.h	/^    const T &impl() const$/;"	f	struct:arm_compute::misc::CRTP
impl_tech	tests/framework/instruments/hwc.hpp	/^    uint8_t  impl_tech;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
import_lws_table	src/runtime/CL/CLTuner.cpp	/^void CLTuner::import_lws_table(const std::unordered_map<std::string, cl::NDRange> &lws_table)$/;"	f	class:CLTuner
import_memory	src/runtime/CL/CLTensorAllocator.cpp	/^arm_compute::Status CLTensorAllocator::import_memory(CLMemory memory)$/;"	f	class:CLTensorAllocator
import_memory	src/runtime/TensorAllocator.cpp	/^arm_compute::Status TensorAllocator::import_memory(Memory memory)$/;"	f	class:TensorAllocator
in_range	tests/validation/reference/FastCorners.cpp	/^inline bool in_range(const uint8_t low, const uint8_t high, const uint8_t val)$/;"	f	namespace:arm_compute::test::validation::reference::__anon535
index	arm_compute/graph/Types.h	/^    size_t index;   \/**< Index *\/$/;"	m	struct:arm_compute::graph::NodeIdxPair
index	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int index(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
index2coord	tests/Utils.h	/^inline Coordinates index2coord(const TensorShape &shape, int index)$/;"	f	namespace:arm_compute::test
index_	include/CL/cl.hpp	/^        int index_;$/;"	m	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
index_offset	src/runtime/CL/CLLut.cpp	/^uint32_t CLLut::index_offset() const$/;"	f	class:CLLut
index_offset	src/runtime/Lut.cpp	/^uint32_t Lut::index_offset() const$/;"	f	class:Lut
index_sequence	arm_compute/core/utils/misc/Utility.h	/^struct index_sequence$/;"	s	namespace:arm_compute::utility
index_sequence_generator	arm_compute/core/utils/misc/Utility.h	/^struct index_sequence_generator : index_sequence_generator < N - 1, N - 1, S... >$/;"	s	namespace:arm_compute::utility
index_sequence_generator	arm_compute/core/utils/misc/Utility.h	/^struct index_sequence_generator<0u, S...> : index_sequence<S...>$/;"	s	namespace:arm_compute::utility
info	src/graph/printers/DotGraphPrinter.cpp	/^const std::string &DotGraphVisitor::info() const$/;"	f	class:arm_compute::graph::DotGraphVisitor
info	src/runtime/CL/CLHOG.cpp	/^const HOGInfo *CLHOG::info() const$/;"	f	class:CLHOG
info	src/runtime/CL/CLMultiImage.cpp	/^const MultiImageInfo *CLMultiImage::info() const$/;"	f	class:CLMultiImage
info	src/runtime/CL/CLPyramid.cpp	/^const PyramidInfo *CLPyramid::info() const$/;"	f	class:CLPyramid
info	src/runtime/CL/CLSubTensor.cpp	/^ITensorInfo *CLSubTensor::info() const$/;"	f	class:CLSubTensor
info	src/runtime/CL/CLSubTensor.cpp	/^ITensorInfo *CLSubTensor::info()$/;"	f	class:CLSubTensor
info	src/runtime/CL/CLTensor.cpp	/^TensorInfo *CLTensor::info() const$/;"	f	class:CLTensor
info	src/runtime/CL/CLTensor.cpp	/^TensorInfo *CLTensor::info()$/;"	f	class:CLTensor
info	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^TensorInfo *GCTensor::info() const$/;"	f	class:GCTensor
info	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^TensorInfo *GCTensor::info()$/;"	f	class:GCTensor
info	src/runtime/HOG.cpp	/^const HOGInfo *HOG::info() const$/;"	f	class:HOG
info	src/runtime/ITensorAllocator.cpp	/^TensorInfo &ITensorAllocator::info()$/;"	f	class:ITensorAllocator
info	src/runtime/ITensorAllocator.cpp	/^const TensorInfo &ITensorAllocator::info() const$/;"	f	class:ITensorAllocator
info	src/runtime/MultiImage.cpp	/^const MultiImageInfo *MultiImage::info() const$/;"	f	class:MultiImage
info	src/runtime/Pyramid.cpp	/^const PyramidInfo *Pyramid::info() const$/;"	f	class:Pyramid
info	src/runtime/SubTensor.cpp	/^ITensorInfo *SubTensor::info() const$/;"	f	class:SubTensor
info	src/runtime/SubTensor.cpp	/^ITensorInfo *SubTensor::info()$/;"	f	class:SubTensor
info	src/runtime/Tensor.cpp	/^ITensorInfo *Tensor::info() const$/;"	f	class:Tensor
info	src/runtime/Tensor.cpp	/^ITensorInfo *Tensor::info()$/;"	f	class:Tensor
info	tests/validation/fixtures/ScharrFixture.h	/^struct info<CLScharr3x3>$/;"	s	namespace:arm_compute::test::validation::__anon529
info	tests/validation/fixtures/ScharrFixture.h	/^struct info<NEScharr3x3>$/;"	s	namespace:arm_compute::test::validation::__anon529
info	tests/validation/fixtures/SobelFixture.h	/^struct info<CLSobel3x3>$/;"	s	namespace:arm_compute::test::validation::__anon530
info	tests/validation/fixtures/SobelFixture.h	/^struct info<CLSobel5x5>$/;"	s	namespace:arm_compute::test::validation::__anon530
info	tests/validation/fixtures/SobelFixture.h	/^struct info<CLSobel7x7>$/;"	s	namespace:arm_compute::test::validation::__anon530
info	tests/validation/fixtures/SobelFixture.h	/^struct info<NESobel3x3>$/;"	s	namespace:arm_compute::test::validation::__anon530
info	tests/validation/fixtures/SobelFixture.h	/^struct info<NESobel5x5>$/;"	s	namespace:arm_compute::test::validation::__anon530
info	tests/validation/fixtures/SobelFixture.h	/^struct info<NESobel7x7>$/;"	s	namespace:arm_compute::test::validation::__anon530
information	src/runtime/Utils.cpp	/^static const std::string information =$/;"	v	file:
init	arm_compute/core/CL/CLKernelLibrary.h	/^    void init(std::string kernel_path = ".", cl::Context context = cl::Context::getDefault(), cl::Device device = cl::Device::getDefault())$/;"	f	class:arm_compute::CLKernelLibrary
init	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    void init(std::string shader_path = ".\/", EGLDisplay dpy = EGL_NO_DISPLAY, EGLContext ctx = EGL_NO_CONTEXT)$/;"	f	class:arm_compute::GCKernelLibrary
init	arm_compute/runtime/CL/CLScheduler.h	/^    void init(cl::Context context = cl::Context::getDefault(), cl::CommandQueue queue = cl::CommandQueue::getDefault(),$/;"	f	class:arm_compute::CLScheduler
init	src/core/GLES_COMPUTE/OpenGLES.cpp	/^    void init()$/;"	f	class:GLESSymbols	file:
init	src/core/HOGInfo.cpp	/^void HOGInfo::init(const Size2D &cell_size, const Size2D &block_size, const Size2D &detection_window_size, const Size2D &block_stride, size_t num_bins,$/;"	f	class:HOGInfo
init	src/core/MultiImageInfo.cpp	/^void MultiImageInfo::init(unsigned int width, unsigned int height, Format format)$/;"	f	class:MultiImageInfo
init	src/core/PyramidInfo.cpp	/^void PyramidInfo::init(size_t num_levels, float scale, const TensorShape &tensor_shape, Format format)$/;"	f	class:PyramidInfo
init	src/core/PyramidInfo.cpp	/^void PyramidInfo::init(size_t num_levels, float scale, size_t width, size_t height, Format format)$/;"	f	class:PyramidInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(Format format)$/;"	f	class:TensorInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(const HOGInfo &hog_info, unsigned int width, unsigned int height)$/;"	f	class:TensorInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(const TensorShape &tensor_shape, Format format)$/;"	f	class:TensorInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(const TensorShape &tensor_shape, Format format,$/;"	f	class:TensorInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(const TensorShape &tensor_shape, size_t num_channels, DataType data_type, int fixed_point_position)$/;"	f	class:TensorInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(const TensorShape &tensor_shape, size_t num_channels, DataType data_type,$/;"	f	class:TensorInfo
init	src/core/TensorInfo.cpp	/^void TensorInfo::init(size_t num_channels, DataType data_type, size_t fixed_point_position)$/;"	f	class:TensorInfo
init	src/runtime/CL/CLHOG.cpp	/^void CLHOG::init(const HOGInfo &input)$/;"	f	class:CLHOG
init	src/runtime/CL/CLMultiImage.cpp	/^void CLMultiImage::init(unsigned int width, unsigned int height, Format format)$/;"	f	class:CLMultiImage
init	src/runtime/CL/CLPyramid.cpp	/^void CLPyramid::init(const PyramidInfo &info)$/;"	f	class:CLPyramid
init	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^void GCScheduler::init(EGLDisplay dpy, EGLContext ctx)$/;"	f	class:GCScheduler
init	src/runtime/HOG.cpp	/^void HOG::init(const HOGInfo &input)$/;"	f	class:HOG
init	src/runtime/ILutAllocator.cpp	/^void ILutAllocator::init(size_t num_elements, DataType data_type)$/;"	f	class:ILutAllocator
init	src/runtime/ITensorAllocator.cpp	/^void ITensorAllocator::init(const TensorInfo &input)$/;"	f	class:ITensorAllocator
init	src/runtime/MultiImage.cpp	/^void MultiImage::init(unsigned int width, unsigned int height, Format format)$/;"	f	class:MultiImage
init	src/runtime/Pyramid.cpp	/^void Pyramid::init(const PyramidInfo &info)$/;"	f	class:Pyramid
init	src/runtime/TensorAllocator.cpp	/^void TensorAllocator::init(const TensorAllocator &allocator, const Coordinates &coords, TensorInfo sub_info)$/;"	f	class:TensorAllocator
init	tests/framework/Framework.cpp	/^void Framework::init(const std::vector<framework::InstrumentsDescription> &instruments, int num_iterations, DatasetMode mode, const std::string &name_filter, const std::string &id_filter,$/;"	f	class:arm_compute::test::framework::Framework
init	tests/framework/instruments/MaliCounter.cpp	/^void MaliCounter::init()$/;"	f	class:arm_compute::test::framework::MaliCounter
init	tests/networks/AlexNetNetwork.h	/^    void init(DataType data_type, int fixed_point_position, int batches, bool reshaped_weights = false)$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
init	tests/networks/LeNet5Network.h	/^    void init(int batches)$/;"	f	class:arm_compute::test::networks::LeNet5Network
init	tests/networks/MobileNetNetwork.h	/^    void init(int batches)$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
init	tests/networks/MobileNetV1Network.h	/^    void init(unsigned int input_spatial_size, int batches)$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
initNavTree	documentation/navtree.js	/^function initNavTree(toroot,relpath)$/;"	f
initResizable	documentation/resize.js	/^function initResizable()$/;"	f
init_auto_padding	src/core/TensorInfo.cpp	/^size_t TensorInfo::init_auto_padding(const HOGInfo &hog_info, unsigned int width, unsigned int height)$/;"	f	class:TensorInfo
init_auto_padding	src/core/TensorInfo.cpp	/^size_t TensorInfo::init_auto_padding(const TensorShape &tensor_shape, Format format)$/;"	f	class:TensorInfo
init_auto_padding	src/core/TensorInfo.cpp	/^size_t TensorInfo::init_auto_padding(const TensorShape &tensor_shape, size_t num_channels, DataType data_type, int fixed_point_position)$/;"	f	class:TensorInfo
init_auto_padding	src/runtime/CL/CLMultiImage.cpp	/^void CLMultiImage::init_auto_padding(unsigned int width, unsigned int height, Format format)$/;"	f	class:CLMultiImage
init_auto_padding	src/runtime/CL/CLPyramid.cpp	/^void CLPyramid::init_auto_padding(const PyramidInfo &info)$/;"	f	class:CLPyramid
init_auto_padding	src/runtime/MultiImage.cpp	/^void MultiImage::init_auto_padding(unsigned int width, unsigned int height, Format format)$/;"	f	class:MultiImage
init_auto_padding	src/runtime/Pyramid.cpp	/^void Pyramid::init_auto_padding(const PyramidInfo &info)$/;"	f	class:Pyramid
init_image	utils/Utils.h	/^    void init_image(T &image, arm_compute::Format format)$/;"	f	class:arm_compute::utils::PPMLoader
init_keypoints	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^void NELKTrackerKernel::init_keypoints(int start, int end)$/;"	f	class:NELKTrackerKernel
init_search	documentation/search/search.js	/^function init_search()$/;"	f
init_sgemm_output	utils/Utils.h	/^void init_sgemm_output(T &dst, T &src0, T &src1, arm_compute::DataType dt)$/;"	f	namespace:arm_compute::utils
init_tensor	utils/Utils.h	/^    void init_tensor(T &tensor, arm_compute::DataType dt)$/;"	f	class:arm_compute::utils::NPYLoader
initialize_backend	src/graph/backends/CL/CLDeviceBackend.cpp	/^void CLDeviceBackend::initialize_backend()$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
initialize_backend	src/graph/backends/GLES/GCDeviceBackend.cpp	/^void GCDeviceBackend::initialize_backend()$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
initialize_backend	src/graph/backends/NEON/NEDeviceBackend.cpp	/^void NEDeviceBackend::initialize_backend()$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
initialize_batch	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^    void initialize_batch(const std::vector<HOGInfo> &models, MultiHOGType &multi_hog,$/;"	f	class:arm_compute::test::validation::HOGMultiDetectionValidationFixture
initialize_matrix_transform	tests/validation/reference/Winograd.cpp	/^void initialize_matrix_transform(SimpleTensor<T> &src, const Size2D &output_tile_size, const Size2D &kernel_size, WinogradTransformType winograd_transform_type)$/;"	f	namespace:arm_compute::test::validation::reference::__anon549
inner_tile_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int inner_tile_cols = stride_cols * (output_tile_cols - 1) + kernel_cols;$/;"	m	class:depthwise::DepthwiseConvolution
inner_tile_cols	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int inner_tile_cols = output_tile_cols + kernel_cols - 1;$/;"	m	class:winograd::WinogradGEMM
inner_tile_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int inner_tile_rows = stride_rows * (output_tile_rows - 1) + kernel_rows;$/;"	m	class:depthwise::DepthwiseConvolution
inner_tile_rows	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int inner_tile_rows = output_tile_rows + kernel_rows - 1;$/;"	m	class:winograd::WinogradGEMM
inptr	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const T* const inptr;         \/** Fixed pointer to input data. *\/$/;"	m	struct:winograd::WinogradGEMM::WeightsTransform
input	src/graph/INode.cpp	/^Tensor *INode::input(size_t idx) const$/;"	f	class:arm_compute::graph::INode
input_edge	src/graph/INode.cpp	/^Edge *INode::input_edge(size_t idx) const$/;"	f	class:arm_compute::graph::INode
input_edge_id	src/graph/INode.cpp	/^EdgeID INode::input_edge_id(size_t idx) const$/;"	f	class:arm_compute::graph::INode
input_edges	src/graph/INode.cpp	/^const std::vector<EdgeID> &INode::input_edges() const$/;"	f	class:arm_compute::graph::INode
input_gate_bias	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *input_gate_bias() const$/;"	f	class:arm_compute::LSTMParams
input_handles	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^    std::vector<std::pair<ITensorHandle *, IMemoryGroup *>> input_handles  = {}; \/**< Input handles to a task *\/$/;"	m	struct:arm_compute::graph::detail::__anon309::TaskHandles	file:
input_id	src/graph/INode.cpp	/^TensorID INode::input_id(size_t idx) const$/;"	f	class:arm_compute::graph::INode
input_to_input_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *input_to_input_weights() const$/;"	f	class:arm_compute::LSTMParams
inputs	arm_compute/graph/Workload.h	/^    std::vector<Tensor *>      inputs  = {};          \/**< Input handles *\/$/;"	m	struct:arm_compute::graph::ExecutionWorkload
inputs	src/graph/Graph.cpp	/^const std::vector<NodeID> &Graph::inputs()$/;"	f	class:arm_compute::graph::Graph
insert_memory_management_ctx	src/graph/GraphContext.cpp	/^bool GraphContext::insert_memory_management_ctx(MemoryManagerContext &&memory_ctx)$/;"	f	class:arm_compute::graph::GraphContext
instrument_type_from_name	tests/framework/instruments/Instruments.cpp	/^InstrumentsDescription instrument_type_from_name(const std::string &name)$/;"	f	namespace:arm_compute::test::framework
instruments	tests/framework/command_line/CommonOptions.h	/^    EnumListOption<InstrumentsDescription>     *instruments;    \/**< Instruments option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
int2half	include/half/half.hpp	/^		template<std::float_round_style R,typename T> uint16 int2half(T value)$/;"	f	namespace:half_float
int2half_impl	include/half/half.hpp	/^		template<std::float_round_style R,bool S,typename T> uint16 int2half_impl(T value)$/;"	f	namespace:half_float
integer	tests/framework/instruments/Measurement.h	/^                long long int integer;$/;"	m	union:arm_compute::test::framework::Measurement::Value::__anon388
integral__image_8cl	documentation/integral__image_8cl.js	/^var integral__image_8cl =$/;"	v
integral_image	tests/validation/reference/IntegralImage.cpp	/^SimpleTensor<uint32_t> integral_image(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
internal_get_input_shape	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^inline Tensor4DShape internal_get_input_shape(const arm_compute::ITensor *input)$/;"	f	namespace:arm_compute::__anon326
internal_init	src/runtime/CL/CLMultiImage.cpp	/^void CLMultiImage::internal_init(unsigned int width, unsigned int height, Format format, bool auto_padding)$/;"	f	class:CLMultiImage
internal_init	src/runtime/CL/CLPyramid.cpp	/^void CLPyramid::internal_init(const PyramidInfo &info, bool auto_padding)$/;"	f	class:CLPyramid
internal_init	src/runtime/MultiImage.cpp	/^void MultiImage::internal_init(unsigned int width, unsigned int height, Format format, bool auto_padding)$/;"	f	class:MultiImage
internal_init	src/runtime/Pyramid.cpp	/^void Pyramid::internal_init(const PyramidInfo &info, bool auto_padding)$/;"	f	class:Pyramid
internal_throw_on_error	src/core/Error.cpp	/^void Status::internal_throw_on_error() const$/;"	f	class:Status
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float16x8_t internal_vdupq_n(float16_t v)$/;"	f	namespace:__anon256
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4_t internal_vdupq_n(float v)$/;"	f	namespace:__anon256
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline qint16x8_t internal_vdupq_n(qint16_t v)$/;"	f	namespace:__anon256
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline qint8x8_t internal_vdupq_n(qint8_t v)$/;"	f	namespace:__anon256
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline float16x8_t internal_vdupq_n(float16_t v)$/;"	f	namespace:__anon257
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline float32x4_t internal_vdupq_n(float v)$/;"	f	namespace:__anon257
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint16x8_t internal_vdupq_n(qint16_t v)$/;"	f	namespace:__anon257
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint32x4_t internal_vdupq_n(qint32_t v)$/;"	f	namespace:__anon257
internal_vdupq_n	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint8x16_t internal_vdupq_n(qint8_t v)$/;"	f	namespace:__anon257
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float16x8_t internal_vld1q<1>(const float16_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float16x8_t internal_vld1q<2>(const float16_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float16x8_t internal_vld1q<3>(const float16_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float32x4_t internal_vld1q<1>(const float *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float32x4_t internal_vld1q<2>(const float *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float32x4_t internal_vld1q<3>(const float *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint16x8_t internal_vld1q<1>(const qint16_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint16x8_t internal_vld1q<2>(const qint16_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint16x8_t internal_vld1q<3>(const qint16_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint32x4x2_t internal_vld1q<1>(const qint32_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint8x8_t internal_vld1q<1>(const qint8_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint8x8_t internal_vld1q<2>(const qint8_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^qint8x8_t internal_vld1q<3>(const qint8_t *in)$/;"	f	namespace:__anon256
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline float16x8_t internal_vld1q(const float16_t *in)$/;"	f	namespace:__anon257
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline float32x4_t internal_vld1q(const float *in)$/;"	f	namespace:__anon257
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint16x8_t internal_vld1q(const qint16_t *in)$/;"	f	namespace:__anon257
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint32x4_t internal_vld1q(const qint32_t *in)$/;"	f	namespace:__anon257
internal_vld1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint8x16_t internal_vld1q(const qint8_t *in)$/;"	f	namespace:__anon257
internal_vmlal	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float16x8_t internal_vmlal(const float16x8_t &x, const float16x8_t &y, const float16x8_t &z, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmlal	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4_t internal_vmlal(const float32x4_t &x, const float32x4_t &y, const float32x4_t &z, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmlal	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline qint16x8_t internal_vmlal(const qint16x8_t &x, const qint8x8_t &y, const qint8x8_t &z, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmlal	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline qint32x4x2_t internal_vmlal(const qint32x4x2_t &x, const qint16x8_t &y, const qint16x8_t &z, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmull	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float16x8_t internal_vmull(const float16x8_t &x, const float16x8_t &y, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmull	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^float32x4_t internal_vmull(const float32x4_t &x, const float32x4_t &y, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmull	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline qint16x8_t internal_vmull(const qint8x8_t &x, const qint8x8_t &y, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vmull	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline qint32x4x2_t internal_vmull(const qint16x8_t &x, const qint16x8_t &y, int fixed_point_position)$/;"	f	namespace:__anon256
internal_vqaddq	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline float16x8_t internal_vqaddq(const float16x8_t &x, const float16x8_t &y)$/;"	f	namespace:__anon257
internal_vqaddq	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline float32x4_t internal_vqaddq(const float32x4_t &x, const float32x4_t &y)$/;"	f	namespace:__anon257
internal_vqaddq	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint16x8_t internal_vqaddq(const qint16x8_t &x, const qint16x8_t &y)$/;"	f	namespace:__anon257
internal_vqaddq	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint32x4_t internal_vqaddq(const qint32x4_t &x, const qint32x4_t &y)$/;"	f	namespace:__anon257
internal_vqaddq	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline qint8x16_t internal_vqaddq(const qint8x16_t &x, const qint8x16_t &y)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void internal_vst1q(float *p, const float32x4_t &v)$/;"	f	namespace:__anon256
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void internal_vst1q(float16_t *p, const float16x8_t &v)$/;"	f	namespace:__anon256
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void internal_vst1q(int32_t *p, const qint32x4x2_t &v)$/;"	f	namespace:__anon256
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline void internal_vst1q(qint16_t *p, const qint16x8_t &v)$/;"	f	namespace:__anon256
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(float *p, const float32x4_t &v)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(float16_t *p, const float16x8_t &v)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(qint16_t *p, const qint16x8_t &v)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(qint16_t *p, const qint32x4_t &v)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(qint32_t *p, const qint32x4_t &v)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(qint8_t *p, const qint16x8_t &v)$/;"	f	namespace:__anon257
internal_vst1q	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^inline void internal_vst1q(qint8_t *p, const qint8x16_t &v)$/;"	f	namespace:__anon257
interpolation_types	tests/benchmark/CL/Scale.cpp	/^const auto interpolation_types = framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR });$/;"	m	namespace:arm_compute::test::benchmark::__anon349	file:
interpolation_types	tests/benchmark/NEON/Scale.cpp	/^const auto interpolation_types = framework::dataset::make("InterpolationPolicy", { InterpolationPolicy::NEAREST_NEIGHBOR, InterpolationPolicy::BILINEAR });$/;"	m	namespace:arm_compute::test::benchmark::__anon384	file:
intersect_valid_regions	arm_compute/core/Helpers.h	/^ValidRegion intersect_valid_regions(const Ts &... regions)$/;"	f	namespace:arm_compute
intra_mm	arm_compute/graph/GraphContext.h	/^    std::shared_ptr<arm_compute::IMemoryManager> intra_mm    = { nullptr };             \/**< Intra-function memory manager *\/$/;"	m	struct:arm_compute::graph::MemoryManagerContext
inv	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float16x8_t inv(float16x8_t x)$/;"	f	namespace:fp16
inv	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t inv(float32x4_t x)$/;"	f	namespace:__anon278
inv_sqrt	tests/validation/FixedPoint.h	/^    static fixed_point<T> inv_sqrt(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
inv_sqrt	tests/validation/FixedPoint.h	/^inline fixed_point<T> inv_sqrt(fixed_point<T> x)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
invalidate_graph	src/graph/GraphManager.cpp	/^void GraphManager::invalidate_graph(Graph &graph)$/;"	f	class:arm_compute::graph::GraphManager
invsqrtv	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t invsqrtv(float32x4_t x)$/;"	f	namespace:__anon278
invsqrtv	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t invsqrtv(float32x4_t x)$/;"	f	namespace:fp16
io	arm_compute/core/utils/io/FileHandler.h	/^namespace io$/;"	n	namespace:arm_compute
ion_filedesc	include/CL/cl_ext.h	/^    int                  ion_filedesc;$/;"	m	struct:_cl_mem_ion_host_ptr
ion_hostptr	include/CL/cl_ext.h	/^    void*                ion_hostptr;$/;"	m	struct:_cl_mem_ion_host_ptr
isReferenceCountable	include/CL/cl.hpp	/^    static bool isReferenceCountable(cl_device_id device)$/;"	f	class:cl::detail::Wrapper
isReferenceCountable	include/CL/cl2.hpp	/^    static bool isReferenceCountable(cl_device_id device)$/;"	f	class:cl::detail::Wrapper
is_a_corner	tests/validation/reference/FastCorners.cpp	/^bool is_a_corner(const Coordinates &candidate, const SimpleTensor<T> &src, uint8_t threshold, BorderMode border_mode, T constant_border_value, F intensity_at)$/;"	f	namespace:arm_compute::test::validation::reference::__anon535
is_a_reshaped	arm_compute/core/Types.h	/^    bool is_a_reshaped() const$/;"	f	class:arm_compute::HOGNormType::GEMMInfo
is_available	src/runtime/Scheduler.cpp	/^bool Scheduler::is_available(Type t)$/;"	f	class:Scheduler
is_b_reshaped	arm_compute/core/Types.h	/^    bool is_b_reshaped() const$/;"	f	class:arm_compute::HOGNormType::GEMMInfo
is_backend_supported	src/graph/backends/CL/CLDeviceBackend.cpp	/^bool CLDeviceBackend::is_backend_supported()$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
is_backend_supported	src/graph/backends/GLES/GCDeviceBackend.cpp	/^bool GCDeviceBackend::is_backend_supported()$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
is_backend_supported	src/graph/backends/NEON/NEDeviceBackend.cpp	/^bool NEDeviceBackend::is_backend_supported()$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
is_contained	arm_compute/core/Helpers.h	/^struct is_contained<T, std::tuple<>> : std::false_type$/;"	s	namespace:arm_compute::traits
is_contained	arm_compute/core/Helpers.h	/^struct is_contained<T, std::tuple<T, Ts...>> : std::true_type$/;"	s	namespace:arm_compute::traits
is_contained	arm_compute/core/Helpers.h	/^struct is_contained<T, std::tuple<U, Ts...>> : is_contained<T, std::tuple<Ts...>>$/;"	s	namespace:arm_compute::traits
is_container	tests/framework/datasets/ContainerDataset.h	/^struct is_container : public std::false_type$/;"	s	namespace:arm_compute::test::framework::dataset
is_container	tests/framework/datasets/ContainerDataset.h	/^struct is_container<std::vector<V, A>> : public std::true_type$/;"	s	namespace:arm_compute::test::framework::dataset
is_cross_map	arm_compute/core/Types.h	/^    bool is_cross_map() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
is_data_type_fixed_point	arm_compute/core/Utils.h	/^inline bool is_data_type_fixed_point(DataType dt)$/;"	f	namespace:arm_compute
is_data_type_float	arm_compute/core/Utils.h	/^inline bool is_data_type_float(DataType dt)$/;"	f	namespace:arm_compute
is_data_type_quantized	arm_compute/core/Utils.h	/^inline bool is_data_type_quantized(DataType dt)$/;"	f	namespace:arm_compute
is_data_type_quantized_asymmetric	arm_compute/core/Utils.h	/^inline bool is_data_type_quantized_asymmetric(DataType dt)$/;"	f	namespace:arm_compute
is_enabled	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^bool DepthConcatenateLayerNode::is_enabled() const$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
is_finalized	src/runtime/MemoryManagerOnDemand.cpp	/^bool MemoryManagerOnDemand::is_finalized() const$/;"	f	class:MemoryManagerOnDemand
is_float	include/half/half.hpp	/^		template<typename T> struct is_float : std::is_floating_point<T> {};$/;"	s	namespace:half_float::detail
is_floating_point	tests/framework/instruments/Measurement.h	/^            : v{ 0 }, is_floating_point(is_floating)$/;"	f	struct:arm_compute::test::framework::Measurement::Value
is_floating_point	tests/framework/instruments/Measurement.h	/^        bool is_floating_point; \/**< Is the stored value floating point or integer ? *\/$/;"	m	struct:arm_compute::test::framework::Measurement::Value
is_floating_point	tests/validation/Helpers.h	/^struct is_floating_point : public std::is_floating_point<T>$/;"	s	namespace:arm_compute::test::validation
is_floating_point	tests/validation/Helpers.h	/^struct is_floating_point<half> : public std::true_type$/;"	s	namespace:arm_compute::test::validation
is_floating_point	tests/validation/reference/PixelWiseMultiplication.cpp	/^struct is_floating_point$/;"	s	namespace:arm_compute::test::validation::reference	file:
is_fortran	utils/Utils.h	/^    bool is_fortran()$/;"	f	class:arm_compute::utils::NPYLoader
is_global_pooling	arm_compute/core/Types.h	/^    bool is_global_pooling() const$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
is_in_map	arm_compute/core/Types.h	/^    bool is_in_map() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
is_in_place_operation	arm_compute/graph/backends/Utils.h	/^inline bool is_in_place_operation(void *input, void *output)$/;"	f	namespace:arm_compute::graph::backends
is_in_valid_region	tests/Utils.h	/^inline bool is_in_valid_region(const ValidRegion &valid_region, Coordinates coord)$/;"	f	namespace:arm_compute::test
is_initialised	arm_compute/runtime/CL/CLScheduler.h	/^    bool is_initialised() const$/;"	f	class:arm_compute::CLScheduler
is_interleaved_transposed	src/runtime/CL/functions/CLGEMM.cpp	/^inline bool is_interleaved_transposed(int m, int n, int k, DataType data_type, bool reshape_b_only_on_first_run, GPUTarget gpu_target)$/;"	f	namespace:__anon313
is_interleaved_transposed	src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp	/^inline bool is_interleaved_transposed(int m, int n, int k, bool reshape_b_only_on_first_run, GPUTarget gpu_target)$/;"	f	namespace:__anon314
is_invalid_keypoint	tests/validation/reference/OpticalFlow.cpp	/^bool is_invalid_keypoint(const InternalKeyPoint &keypoint, const ValidRegion &valid_region, size_t window_dimension)$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
is_loggable	src/core/utils/logging/Logger.cpp	/^bool Logger::is_loggable(LogLevel log_level)$/;"	f	class:Logger
is_open	utils/Utils.h	/^    bool is_open()$/;"	f	class:arm_compute::utils::NPYLoader
is_open	utils/Utils.h	/^    bool is_open()$/;"	f	class:arm_compute::utils::PPMLoader
is_optimized_execution_possible	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^bool NEDepthwiseConvolutionLayer3x3Kernel::is_optimized_execution_possible(TensorShape input_shape, PadStrideInfo conv_info, DataType dt, unsigned int depth_multiplier, DataLayout data_layout)$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
is_parallel_reduction	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^CLLogits1DMaxShiftExpSumKernel::ParallelReductionInfo CLLogits1DMaxShiftExpSumKernel::is_parallel_reduction(size_t size)$/;"	f	class:CLLogits1DMaxShiftExpSumKernel
is_parallelisable	src/core/CL/kernels/CLFillBorderKernel.cpp	/^bool CLFillBorderKernel::is_parallelisable() const$/;"	f	class:CLFillBorderKernel
is_parallelisable	src/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.cpp	/^bool CPPDetectionWindowNonMaximaSuppressionKernel::is_parallelisable() const$/;"	f	class:CPPDetectionWindowNonMaximaSuppressionKernel
is_parallelisable	src/core/CPP/kernels/CPPSortEuclideanDistanceKernel.cpp	/^bool CPPSortEuclideanDistanceKernel::is_parallelisable() const$/;"	f	class:CPPSortEuclideanDistanceKernel
is_parallelisable	src/core/CPP/kernels/CPPUpsampleKernel.cpp	/^bool CPPUpsampleKernel::is_parallelisable() const$/;"	f	class:CPPUpsampleKernel
is_parallelisable	src/core/GLES_COMPUTE/kernels/GCFillBorderKernel.cpp	/^bool GCFillBorderKernel::is_parallelisable() const$/;"	f	class:GCFillBorderKernel
is_parallelisable	src/core/IKernel.cpp	/^bool IKernel::is_parallelisable() const$/;"	f	class:IKernel
is_parallelisable	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^bool NEEdgeTraceKernel::is_parallelisable() const$/;"	f	class:NEEdgeTraceKernel
is_parallelisable	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^bool NEChannelCombineKernel::is_parallelisable() const$/;"	f	class:NEChannelCombineKernel
is_parallelisable	src/core/NEON/kernels/NECumulativeDistributionKernel.cpp	/^bool NECumulativeDistributionKernel::is_parallelisable() const$/;"	f	class:NECumulativeDistributionKernel
is_parallelisable	src/core/NEON/kernels/NEFillArrayKernel.cpp	/^bool NEFillArrayKernel::is_parallelisable() const$/;"	f	class:NEFillArrayKernel
is_parallelisable	src/core/NEON/kernels/NEIntegralImageKernel.cpp	/^bool NEIntegralImageKernel::is_parallelisable() const$/;"	f	class:NEIntegralImageKernel
is_parallelisable	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^bool NEMinMaxLocationKernel::is_parallelisable() const$/;"	f	class:arm_compute::NEMinMaxLocationKernel
is_parallelisable	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^bool NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::is_parallelisable() const$/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
is_permutation_brighter	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline bool is_permutation_brighter(const uint8x16_t &permutation, const uint8x16_t &pg)$/;"	f	namespace:__anon258
is_permutation_corner	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline bool is_permutation_corner(const uint8x16_t &permutation, const uint8x16_t &pg, const uint8x16_t &pl)$/;"	f	namespace:__anon258
is_permutation_darker	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline bool is_permutation_darker(const uint8x16_t &permutation, const uint8x16_t &pl)$/;"	f	namespace:__anon258
is_required	tests/framework/command_line/Option.cpp	/^bool Option::is_required() const$/;"	f	class:arm_compute::test::framework::Option
is_selected	tests/framework/TestFilter.cpp	/^bool TestFilter::is_selected(const TestInfo &info) const$/;"	f	class:arm_compute::test::framework::TestFilter
is_set	tests/framework/command_line/Option.cpp	/^bool Option::is_set() const$/;"	f	class:arm_compute::test::framework::Option
is_subtensor	src/graph/backends/CL/CLSubTensorHandle.cpp	/^bool CLSubTensorHandle::is_subtensor() const$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
is_subtensor	src/graph/backends/CL/CLTensorHandle.cpp	/^bool CLTensorHandle::is_subtensor() const$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
is_subtensor	src/graph/backends/GLES/GCTensorHandle.cpp	/^bool GCTensorHandle::is_subtensor() const$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
is_subtensor	src/graph/backends/NEON/NESubTensorHandle.cpp	/^bool NESubTensorHandle::is_subtensor() const$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
is_subtensor	src/graph/backends/NEON/NETensorHandle.cpp	/^bool NETensorHandle::is_subtensor() const$/;"	f	class:arm_compute::graph::backends::NETensorHandle
is_target_supported	src/graph/Utils.cpp	/^bool is_target_supported(Target target)$/;"	f	namespace:arm_compute::graph
is_used	src/core/ITensor.cpp	/^bool ITensor::is_used() const$/;"	f	class:ITensor
is_valid_pixel	tests/validation/reference/Convolution3d.h	/^inline bool is_valid_pixel(int i, int min, int max)$/;"	f	namespace:arm_compute::test::convolution_3d::detail
is_valid_pixel_index	tests/validation/reference/Utils.h	/^inline bool is_valid_pixel_index(int x, int y, int width, int height, int border_size)$/;"	f	namespace:arm_compute::test::validation
isequal	include/half/half.hpp	/^			static bool isequal(half x, half y) { return (x.data_==y.data_ || !((x.data_|y.data_)&0x7FFF)) && !isnan(x); }$/;"	f	struct:detail::functions
isequal	tests/validation/FixedPoint.h	/^    static bool isequal(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
isfinite	include/half/half.hpp	/^			static bool isfinite(half arg) { return (arg.data_&0x7C00) != 0x7C00; }$/;"	f	struct:detail::functions
isfinite	include/half/half.hpp	/^		inline bool isfinite(expr arg) { return functions::isfinite(arg); }$/;"	f	namespace:detail
isfinite	include/half/half.hpp	/^		inline bool isfinite(half arg) { return functions::isfinite(arg); }$/;"	f	namespace:detail
isfinite	support/ToolchainSupport.h	/^inline bool isfinite(T value)$/;"	f	namespace:arm_compute::support::cpp11
isfinite	support/ToolchainSupport.h	/^inline bool isfinite(half_float::half value)$/;"	f	namespace:arm_compute::support::cpp11
isgreater	include/half/half.hpp	/^			static bool isgreater(half x, half y)$/;"	f	struct:detail::functions
isgreater	include/half/half.hpp	/^		inline bool isgreater(expr x, expr y) { return functions::isgreater(x, y); }$/;"	f	namespace:detail
isgreater	include/half/half.hpp	/^		inline bool isgreater(expr x, half y) { return functions::isgreater(x, y); }$/;"	f	namespace:detail
isgreater	include/half/half.hpp	/^		inline bool isgreater(half x, expr y) { return functions::isgreater(x, y); }$/;"	f	namespace:detail
isgreater	include/half/half.hpp	/^		inline bool isgreater(half x, half y) { return functions::isgreater(x, y); }$/;"	f	namespace:detail
isgreater	tests/validation/FixedPoint.h	/^    static bool isgreater(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
isgreaterequal	include/half/half.hpp	/^			static bool isgreaterequal(half x, half y)$/;"	f	struct:detail::functions
isgreaterequal	include/half/half.hpp	/^		inline bool isgreaterequal(expr x, expr y) { return functions::isgreaterequal(x, y); }$/;"	f	namespace:detail
isgreaterequal	include/half/half.hpp	/^		inline bool isgreaterequal(expr x, half y) { return functions::isgreaterequal(x, y); }$/;"	f	namespace:detail
isgreaterequal	include/half/half.hpp	/^		inline bool isgreaterequal(half x, expr y) { return functions::isgreaterequal(x, y); }$/;"	f	namespace:detail
isgreaterequal	include/half/half.hpp	/^		inline bool isgreaterequal(half x, half y) { return functions::isgreaterequal(x, y); }$/;"	f	namespace:detail
isgreaterequal	tests/validation/FixedPoint.h	/^    static bool isgreaterequal(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
isinf	include/half/half.hpp	/^			static bool isinf(half arg) { return (arg.data_&0x7FFF) == 0x7C00; }$/;"	f	struct:detail::functions
isinf	include/half/half.hpp	/^		inline bool isinf(expr arg) { return functions::isinf(arg); }$/;"	f	namespace:detail
isinf	include/half/half.hpp	/^		inline bool isinf(half arg) { return functions::isinf(arg); }$/;"	f	namespace:detail
isless	include/half/half.hpp	/^			static bool isless(half x, half y)$/;"	f	struct:detail::functions
isless	include/half/half.hpp	/^		inline bool isless(expr x, expr y) { return functions::isless(x, y); }$/;"	f	namespace:detail
isless	include/half/half.hpp	/^		inline bool isless(expr x, half y) { return functions::isless(x, y); }$/;"	f	namespace:detail
isless	include/half/half.hpp	/^		inline bool isless(half x, expr y) { return functions::isless(x, y); }$/;"	f	namespace:detail
isless	include/half/half.hpp	/^		inline bool isless(half x, half y) { return functions::isless(x, y); }$/;"	f	namespace:detail
isless	tests/validation/FixedPoint.h	/^    static bool isless(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
islessequal	include/half/half.hpp	/^			static bool islessequal(half x, half y)$/;"	f	struct:detail::functions
islessequal	include/half/half.hpp	/^		inline bool islessequal(expr x, expr y) { return functions::islessequal(x, y); }$/;"	f	namespace:detail
islessequal	include/half/half.hpp	/^		inline bool islessequal(expr x, half y) { return functions::islessequal(x, y); }$/;"	f	namespace:detail
islessequal	include/half/half.hpp	/^		inline bool islessequal(half x, expr y) { return functions::islessequal(x, y); }$/;"	f	namespace:detail
islessequal	include/half/half.hpp	/^		inline bool islessequal(half x, half y) { return functions::islessequal(x, y); }$/;"	f	namespace:detail
islessequal	tests/validation/FixedPoint.h	/^    static bool islessequal(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
islessgreater	include/half/half.hpp	/^			static bool islessgreater(half x, half y)$/;"	f	struct:detail::functions
islessgreater	include/half/half.hpp	/^		inline bool islessgreater(expr x, expr y) { return functions::islessgreater(x, y); }$/;"	f	namespace:detail
islessgreater	include/half/half.hpp	/^		inline bool islessgreater(expr x, half y) { return functions::islessgreater(x, y); }$/;"	f	namespace:detail
islessgreater	include/half/half.hpp	/^		inline bool islessgreater(half x, expr y) { return functions::islessgreater(x, y); }$/;"	f	namespace:detail
islessgreater	include/half/half.hpp	/^		inline bool islessgreater(half x, half y) { return functions::islessgreater(x, y); }$/;"	f	namespace:detail
islessgreater	tests/validation/FixedPoint.h	/^    static bool islessgreater(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
isnan	include/half/half.hpp	/^			static bool isnan(half arg) { return (arg.data_&0x7FFF) > 0x7C00; }$/;"	f	struct:detail::functions
isnan	include/half/half.hpp	/^		inline bool isnan(expr arg) { return functions::isnan(arg); }$/;"	f	namespace:detail
isnan	include/half/half.hpp	/^		inline bool isnan(half arg) { return functions::isnan(arg); }$/;"	f	namespace:detail
isnormal	include/half/half.hpp	/^			static bool isnormal(half arg) { return ((arg.data_&0x7C00)!=0) & ((arg.data_&0x7C00)!=0x7C00); }$/;"	f	struct:detail::functions
isnormal	include/half/half.hpp	/^		inline bool isnormal(expr arg) { return functions::isnormal(arg); }$/;"	f	namespace:detail
isnormal	include/half/half.hpp	/^		inline bool isnormal(half arg) { return functions::isnormal(arg); }$/;"	f	namespace:detail
isnotequal	include/half/half.hpp	/^			static bool isnotequal(half x, half y) { return (x.data_!=y.data_ && ((x.data_|y.data_)&0x7FFF)) || isnan(x); }$/;"	f	struct:detail::functions
isnotequal	tests/validation/FixedPoint.h	/^    static bool isnotequal(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
isunordered	include/half/half.hpp	/^			static bool isunordered(half x, half y) { return isnan(x) || isnan(y); }$/;"	f	struct:detail::functions
isunordered	include/half/half.hpp	/^		inline bool isunordered(expr x, expr y) { return functions::isunordered(x, y); }$/;"	f	namespace:detail
isunordered	include/half/half.hpp	/^		inline bool isunordered(expr x, half y) { return functions::isunordered(x, y); }$/;"	f	namespace:detail
isunordered	include/half/half.hpp	/^		inline bool isunordered(half x, expr y) { return functions::isunordered(x, y); }$/;"	f	namespace:detail
isunordered	include/half/half.hpp	/^		inline bool isunordered(half x, half y) { return functions::isunordered(x, y); }$/;"	f	namespace:detail
iterable	arm_compute/core/utils/misc/Iterable.h	/^namespace iterable$/;"	n	namespace:arm_compute::utils
iterations	tests/framework/command_line/CommonOptions.h	/^    SimpleOption<int>                          *iterations;     \/**< Number of iterations option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
iterator	include/CL/cl.hpp	/^        iterator (const vector<T,N> &vec, int index) :$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
iterator	include/CL/cl.hpp	/^        iterator(const iterator& rhs) :$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
iterator	include/CL/cl.hpp	/^        iterator(void) : $/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
iterator	include/CL/cl.hpp	/^    class iterator$/;"	c	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
iterator	tests/datasets/BatchNormalizationLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator tensor_it,$/;"	f	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
iterator	tests/datasets/BatchNormalizationLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::BatchNormalizationLayerDataset
iterator	tests/datasets/ChannelShuffleLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator tensor_it,$/;"	f	struct:arm_compute::test::datasets::ChannelShuffleLayerDataset::iterator
iterator	tests/datasets/ChannelShuffleLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ChannelShuffleLayerDataset
iterator	tests/datasets/ConvolutionLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator   src_it,$/;"	f	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
iterator	tests/datasets/ConvolutionLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ConvolutionLayerDataset
iterator	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator   src_it,$/;"	f	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
iterator	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset
iterator	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator   src_it,$/;"	f	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
iterator	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset
iterator	tests/datasets/FullyConnectedLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator src_it,$/;"	f	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
iterator	tests/datasets/FullyConnectedLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::FullyConnectedLayerDataset
iterator	tests/datasets/GEMMDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator a_it,$/;"	f	struct:arm_compute::test::datasets::GEMMDataset::iterator
iterator	tests/datasets/GEMMDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::GEMMDataset
iterator	tests/datasets/GEMMLowpDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator a_it,$/;"	f	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
iterator	tests/datasets/GEMMLowpDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::GEMMLowpDataset
iterator	tests/datasets/HOGDescriptorDataset.h	/^        iterator(std::vector<std::string>::const_iterator image_it,$/;"	f	struct:arm_compute::test::datasets::HOGDescriptorDataset::iterator
iterator	tests/datasets/HOGDescriptorDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::HOGDescriptorDataset
iterator	tests/datasets/HOGMultiDetectionDataset.h	/^        iterator(std::vector<std::string>::const_iterator          image_it,$/;"	f	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
iterator	tests/datasets/HOGMultiDetectionDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::HOGMultiDetectionDataset
iterator	tests/datasets/ImageFileDatasets.h	/^        iterator(std::vector<std::string>::const_iterator name_it)$/;"	f	struct:arm_compute::test::datasets::ImageFileDataset::iterator
iterator	tests/datasets/ImageFileDatasets.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ImageFileDataset
iterator	tests/datasets/LSTMLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator         src_it,$/;"	f	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
iterator	tests/datasets/LSTMLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::LSTMLayerDataset
iterator	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator tensor_it,$/;"	f	struct:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset::iterator
iterator	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset
iterator	tests/datasets/OpticalFlowDataset.h	/^        iterator(std::vector<std::string>::const_iterator           old_image_it,$/;"	f	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
iterator	tests/datasets/OpticalFlowDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::OpticalFlowDataset
iterator	tests/datasets/PoolingLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator      src_it,$/;"	f	struct:arm_compute::test::datasets::PoolingLayerDataset::iterator
iterator	tests/datasets/PoolingLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::PoolingLayerDataset
iterator	tests/datasets/RNNLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator         src_it,$/;"	f	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
iterator	tests/datasets/RNNLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::RNNLayerDataset
iterator	tests/datasets/ROIPoolingLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator         tensor_shape_it,$/;"	f	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
iterator	tests/datasets/ROIPoolingLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ROIPoolingLayerDataset
iterator	tests/datasets/ReshapeLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator in_it, std::vector<TensorShape>::const_iterator out_it)$/;"	f	struct:arm_compute::test::datasets::ReshapeLayerDataset::iterator
iterator	tests/datasets/ReshapeLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ReshapeLayerDataset
iterator	tests/datasets/ScaleLayerDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator         src_it,$/;"	f	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
iterator	tests/datasets/ScaleLayerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ScaleLayerDataset
iterator	tests/datasets/ThresholdDataset.h	/^        iterator(std::vector<uint8_t>::const_iterator       threshold_it,$/;"	f	struct:arm_compute::test::datasets::ThresholdDataset::iterator
iterator	tests/datasets/ThresholdDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::ThresholdDataset
iterator	tests/datasets/WinogradInputTransformDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator in_it, std::vector<WinogradInfo>::const_iterator info_it)$/;"	f	struct:arm_compute::test::datasets::WinogradInputTransformDataset::iterator
iterator	tests/datasets/WinogradInputTransformDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::WinogradInputTransformDataset
iterator	tests/datasets/WinogradOutputTransformDataset.h	/^        iterator(std::vector<TensorShape>::const_iterator  a_it,$/;"	f	struct:arm_compute::test::datasets::WinogradOutputTransformDataset::iterator
iterator	tests/datasets/WinogradOutputTransformDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::datasets::WinogradOutputTransformDataset
iterator	tests/framework/datasets/CartesianProductDataset.h	/^        iterator(const T_noref *dataset1, const U_noref *dataset2)$/;"	f	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
iterator	tests/framework/datasets/CartesianProductDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::CartesianProductDataset
iterator	tests/framework/datasets/ContainerDataset.h	/^        iterator(std::string name, container_const_iterator iterator)$/;"	f	struct:arm_compute::test::framework::dataset::ContainerDataset::iterator
iterator	tests/framework/datasets/ContainerDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::ContainerDataset
iterator	tests/framework/datasets/InitializerListDataset.h	/^        iterator(std::string name, data_const_iterator iterator)$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
iterator	tests/framework/datasets/InitializerListDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::final
iterator	tests/framework/datasets/JoinDataset.h	/^        iterator(const T_noref *dataset1, const U_noref *dataset2)$/;"	f	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
iterator	tests/framework/datasets/JoinDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::JoinDataset
iterator	tests/framework/datasets/RangeDataset.h	/^        iterator(std::string name, T start, T step)$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
iterator	tests/framework/datasets/RangeDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::final
iterator	tests/framework/datasets/SingletonDataset.h	/^        iterator(std::string name, const T *value)$/;"	f	struct:arm_compute::test::framework::dataset::SingletonDataset::iterator
iterator	tests/framework/datasets/SingletonDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::SingletonDataset
iterator	tests/framework/datasets/ZipDataset.h	/^        iterator(iter1_type iter1, iter2_type iter2)$/;"	f	struct:arm_compute::test::framework::dataset::ZipDataset::iterator
iterator	tests/framework/datasets/ZipDataset.h	/^    struct iterator$/;"	s	class:arm_compute::test::framework::dataset::ZipDataset
ival	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    int16_t ival;  \/**< ival extracts from old image *\/$/;"	m	struct:arm_compute::CLOldValue
ixval	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    int16_t ixval; \/**< ixval extracts from scharr Gx image *\/$/;"	m	struct:arm_compute::CLOldValue
iyval	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    int16_t iyval; \/**< iyval extracts from scharr Gy image *\/$/;"	m	struct:arm_compute::CLOldValue
jm_bm	tests/framework/instruments/hwc.hpp	/^    uint32_t jm_bm;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup
join	tests/framework/Utils.h	/^std::string join(T && first, T && last, const std::string &separator)$/;"	f	namespace:arm_compute::test::framework
join	tests/framework/Utils.h	/^std::string join(T &&first, T &&last, const std::string &separator, UnaryOp &&op)$/;"	f	namespace:arm_compute::test::framework
join	tests/framework/Utils.h	/^std::string join(T first, T last, const std::string &separator)$/;"	f	namespace:arm_compute::test::framework
js_features	tests/framework/instruments/hwc.hpp	/^    uint32_t js_features[GPU_MAX_JOB_SLOTS];$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
js_present	tests/framework/instruments/hwc.hpp	/^    uint32_t js_present;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
json_file	tests/framework/command_line/CommonOptions.h	/^    SimpleOption<std::string>                  *json_file;      \/**< JSON output file option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
k	arm_compute/core/Types.h	/^    int k() const$/;"	f	class:arm_compute::HOGNormType::final
k0	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int k0(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
k_block	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    unsigned int k_block = 0;$/;"	m	class:arm_gemm::GemmNative
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int k_unroll   = 1;$/;"	m	class:arm_gemm::sgemm_8x6
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int k_unroll   = 1;$/;"	m	class:arm_gemm::gemm_s16_12x8
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int k_unroll   = 4;$/;"	m	class:arm_gemm::gemm_s8_12x8
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int k_unroll   = 16;$/;"	m	class:arm_gemm::gemm_s8_4x4
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int k_unroll   = 1;$/;"	m	class:arm_gemm::gemm_u16_12x8
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int k_unroll   = 4;$/;"	m	class:arm_gemm::gemm_u8_12x8
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int k_unroll   = 16;$/;"	m	class:arm_gemm::gemm_u8_4x4
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int k_unroll   = 1;$/;"	m	class:arm_gemm::hgemm_24x8
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int k_unroll   = 1;$/;"	m	class:arm_gemm::sgemm_12x8
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    static const int k_unroll   = 1;$/;"	m	class:arm_gemm::sgemm_native_16x4
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    static const int k_unroll  = 1;$/;"	m	class:arm_gemm::sgemv_pretransposed
k_unroll	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    static const int k_unroll  = 1;$/;"	m	class:arm_gemm::sgemv_trans
kappa	arm_compute/core/Types.h	/^    float kappa() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
kbase_hwcnt_reader_metadata	tests/framework/instruments/hwc.hpp	/^struct kbase_hwcnt_reader_metadata$/;"	s	namespace:mali_userspace
kbase_ioctl_get_gpuprops	tests/framework/instruments/hwc.hpp	/^struct kbase_ioctl_get_gpuprops$/;"	s	namespace:mali_userspace::__anon390
kbase_pointer	tests/framework/instruments/hwc.hpp	/^union kbase_pointer$/;"	u	namespace:mali_userspace::__anon390
kbase_uk_gpuprops	tests/framework/instruments/hwc.hpp	/^struct kbase_uk_gpuprops$/;"	s	namespace:mali_userspace
kbase_uk_hwcnt_header	tests/framework/instruments/hwc.hpp	/^union kbase_uk_hwcnt_header$/;"	u	namespace:mali_userspace::__anon390
kbase_uk_hwcnt_reader_set_flags	tests/framework/instruments/hwc.hpp	/^struct kbase_uk_hwcnt_reader_set_flags$/;"	s	namespace:mali_userspace::__anon390
kbase_uk_hwcnt_reader_setup	tests/framework/instruments/hwc.hpp	/^struct kbase_uk_hwcnt_reader_setup$/;"	s	namespace:mali_userspace::__anon390
kbase_uk_hwcnt_reader_version_check_args	tests/framework/instruments/hwc.hpp	/^struct kbase_uk_hwcnt_reader_version_check_args$/;"	s	namespace:mali_userspace::__anon390
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    typedef void (*kern_type)(const float *, const float *, float *, int, int, int);$/;"	t	class:arm_gemm::sgemm_8x6
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    typedef void (*kern_type)(const int16_t *, const int16_t *, int32_t *, int, int, int);$/;"	t	class:arm_gemm::gemm_s16_12x8
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    typedef void (*kern_type)(const int8_t *, const int8_t *, int32_t *, int, int, int);$/;"	t	class:arm_gemm::gemm_s8_12x8
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    typedef void (*kern_type)(const int8_t *, const int8_t *, int32_t *, int, int, int);$/;"	t	class:arm_gemm::gemm_s8_4x4
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    typedef void (*kern_type)(const uint16_t *, const uint16_t *, uint32_t *, int, int, int);$/;"	t	class:arm_gemm::gemm_u16_12x8
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    typedef void (*kern_type)(const uint8_t *, const uint8_t *, uint32_t *, int, int, int);$/;"	t	class:arm_gemm::gemm_u8_12x8
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    typedef void (*kern_type)(const uint8_t *, const uint8_t *, uint32_t *, int, int, int);$/;"	t	class:arm_gemm::gemm_u8_4x4
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    typedef void (*kern_type)(const __fp16 *, const __fp16 *, __fp16 *, int, int, int);$/;"	t	class:arm_gemm::hgemm_24x8
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    typedef void (*kern_type)(const float *, const float *, float *, int, int, int);$/;"	t	class:arm_gemm::sgemm_12x8
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    typedef void (*kern_type)(const float *, int, const float *, int, float *, int, float, int, int, int);$/;"	t	class:arm_gemm::sgemm_native_16x4
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    typedef void (*kern_type)(const float *, int, const float *, float *, float, int, int);$/;"	t	class:arm_gemm::sgemv_pretransposed
kern_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    typedef void (*kern_type)(const float *, const float *, float *, float, int, int, int);$/;"	t	class:arm_gemm::sgemv_trans
kernel	arm_compute/core/CL/ICLKernel.h	/^    cl::Kernel &kernel()$/;"	f	class:arm_compute::ICLKernel
kernel	src/core/GLES_COMPUTE/IGCKernel.cpp	/^GCKernel &IGCKernel::kernel()$/;"	f	class:IGCKernel
kernel	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    kern_type kernel = a32_sgemm_8x6;$/;"	m	class:arm_gemm::sgemm_8x6
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    kern_type kernel = a64_gemm_s16_asimd_12x8;$/;"	m	class:arm_gemm::gemm_s16_12x8
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    kern_type kernel = a64_gemm_s8_12x8;$/;"	m	class:arm_gemm::gemm_s8_12x8
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    kern_type kernel = a64_gemm_s8_4x4;$/;"	m	class:arm_gemm::gemm_s8_4x4
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    kern_type kernel = a64_gemm_u16_asimd_12x8;$/;"	m	class:arm_gemm::gemm_u16_12x8
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    kern_type kernel = a64_gemm_u8_12x8;$/;"	m	class:arm_gemm::gemm_u8_12x8
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    kern_type kernel = nullptr;$/;"	m	class:arm_gemm::gemm_u8_4x4
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    kern_type kernel = a64_hgemm_asimd_24x8;$/;"	m	class:arm_gemm::hgemm_24x8
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    kern_type kernel = a64_sgemm_asimd_12x8;$/;"	m	class:arm_gemm::sgemm_12x8
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    kern_type kernel = a64_sgemm_native_16x4;$/;"	m	class:arm_gemm::sgemm_native_16x4
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    kern_type kernel = a64_sgemv_pretransposed;$/;"	m	class:arm_gemm::sgemv_pretransposed
kernel	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    kern_type kernel = a64_sgemv_trans;$/;"	m	class:arm_gemm::sgemv_trans
kernel_	include/CL/cl.hpp	/^    Kernel kernel_;$/;"	m	class:cl::detail::KernelFunctorGlobal
kernel_	include/CL/cl2.hpp	/^    Kernel kernel_;$/;"	m	class:cl::KernelFunctor
kernel_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int kernel_cols = KernelCols;$/;"	m	class:depthwise::DepthwiseConvolution
kernel_cols	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int kernel_cols = KernelCols;$/;"	m	class:winograd::WinogradGEMM
kernel_event_is_set	src/runtime/CL/CLTuner.cpp	/^bool CLTuner::kernel_event_is_set() const$/;"	f	class:CLTuner
kernel_info	tests/framework/instruments/OpenCLTimer.h	/^    struct kernel_info$/;"	s	class:arm_compute::test::framework::OpenCLTimer
kernel_info	tests/framework/instruments/SchedulerTimer.h	/^    struct kernel_info$/;"	s	class:arm_compute::test::framework::SchedulerTimer
kernel_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int kernel_rows = KernelRows;$/;"	m	class:depthwise::DepthwiseConvolution
kernel_rows	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int kernel_rows = KernelRows;$/;"	m	class:winograd::WinogradGEMM
kernel_size	arm_compute/core/Types.h	/^    std::pair<unsigned int, unsigned int> kernel_size() const$/;"	f	class:arm_compute::HOGNormType::WeightsInfo
keypoint_compare	src/core/CPP/kernels/CPPCornerCandidatesKernel.cpp	/^bool keypoint_compare(const InternalKeypoint &lhs, const InternalKeypoint &rhs)$/;"	f
keypoint_compare	src/core/CPP/kernels/CPPSortEuclideanDistanceKernel.cpp	/^bool keypoint_compare(const InternalKeypoint &lhs, const InternalKeypoint &rhs)$/;"	f	namespace:__anon231
khronos_boolean_enum_t	include/linux/KHR/khrplatform.h	/^} khronos_boolean_enum_t;$/;"	t	typeref:enum:__anon182
khronos_float_t	include/linux/KHR/khrplatform.h	/^typedef          float         khronos_float_t;$/;"	t
khronos_int16_t	include/linux/KHR/khrplatform.h	/^typedef signed   short int     khronos_int16_t;$/;"	t
khronos_int32_t	include/linux/KHR/khrplatform.h	/^typedef __int32                 khronos_int32_t;$/;"	t
khronos_int32_t	include/linux/KHR/khrplatform.h	/^typedef int                     khronos_int32_t;$/;"	t
khronos_int32_t	include/linux/KHR/khrplatform.h	/^typedef int32_t                 khronos_int32_t;$/;"	t
khronos_int64_t	include/linux/KHR/khrplatform.h	/^typedef __int64                 khronos_int64_t;$/;"	t
khronos_int64_t	include/linux/KHR/khrplatform.h	/^typedef int64_t                 khronos_int64_t;$/;"	t
khronos_int64_t	include/linux/KHR/khrplatform.h	/^typedef long int                khronos_int64_t;$/;"	t
khronos_int64_t	include/linux/KHR/khrplatform.h	/^typedef long long int           khronos_int64_t;$/;"	t
khronos_int8_t	include/linux/KHR/khrplatform.h	/^typedef signed   char          khronos_int8_t;$/;"	t
khronos_intptr_t	include/linux/KHR/khrplatform.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t
khronos_ssize_t	include/linux/KHR/khrplatform.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t
khronos_stime_nanoseconds_t	include/linux/KHR/khrplatform.h	/^typedef khronos_int64_t        khronos_stime_nanoseconds_t;$/;"	t
khronos_uint16_t	include/linux/KHR/khrplatform.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t
khronos_uint32_t	include/linux/KHR/khrplatform.h	/^typedef uint32_t                khronos_uint32_t;$/;"	t
khronos_uint32_t	include/linux/KHR/khrplatform.h	/^typedef unsigned __int32        khronos_uint32_t;$/;"	t
khronos_uint32_t	include/linux/KHR/khrplatform.h	/^typedef unsigned int            khronos_uint32_t;$/;"	t
khronos_uint64_t	include/linux/KHR/khrplatform.h	/^typedef uint64_t                khronos_uint64_t;$/;"	t
khronos_uint64_t	include/linux/KHR/khrplatform.h	/^typedef unsigned __int64        khronos_uint64_t;$/;"	t
khronos_uint64_t	include/linux/KHR/khrplatform.h	/^typedef unsigned long int       khronos_uint64_t;$/;"	t
khronos_uint64_t	include/linux/KHR/khrplatform.h	/^typedef unsigned long long int  khronos_uint64_t;$/;"	t
khronos_uint8_t	include/linux/KHR/khrplatform.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t
khronos_uintptr_t	include/linux/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_uintptr_t;$/;"	t
khronos_usize_t	include/linux/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_usize_t;$/;"	t
khronos_utime_nanoseconds_t	include/linux/KHR/khrplatform.h	/^typedef khronos_uint64_t       khronos_utime_nanoseconds_t;$/;"	t
kmax	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int kmax()$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
l1_norm	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void l1_norm(const float *__restrict input_row_ptr, float *__restrict output_ptr, size_t input_stride, size_t num_cells_per_block_height, size_t num_bins_block_x, size_t num_bins_block,$/;"	f	namespace:__anon271
l2__normalize_8cl	documentation/l2__normalize_8cl.js	/^var l2__normalize_8cl =$/;"	v
l2_features	tests/framework/instruments/hwc.hpp	/^    uint32_t l2_features;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
l2_hyst_threshold	src/core/HOGInfo.cpp	/^float HOGInfo::l2_hyst_threshold() const$/;"	f	class:HOGInfo
l2_norm	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void l2_norm(const float *__restrict input_row_ptr, float *__restrict output_ptr, size_t input_stride,$/;"	f	namespace:__anon271
l2_normalize	tests/validation/reference/L2NormalizeLayer.cpp	/^SimpleTensor<T> l2_normalize(const SimpleTensor<T> &src, unsigned int axis, float epsilon)$/;"	f	namespace:arm_compute::test::validation::reference
l2_normalize_X	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^void l2_normalize_X(const ITensor *in, const ITensor *sum, ITensor *out, float epsilon, const Window &window)$/;"	f	namespace:__anon274
l2_present	tests/framework/instruments/hwc.hpp	/^    uint64_t l2_present;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
l2_props	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_l2_cache_props      l2_props;$/;"	m	struct:mali_userspace::mali_base_gpu_props
l2hys_norm	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void l2hys_norm(const float *__restrict input_row_ptr, float *__restrict output_ptr, size_t input_stride, size_t num_cells_per_block_height, size_t num_bins_block_x, size_t num_bins_block,$/;"	f	namespace:__anon271
large_gaussian_pyramid_levels	tests/validation/CL/GaussianPyramid.cpp	/^const auto large_gaussian_pyramid_levels = combine(datasets::Large2DShapes(), datasets::BorderModes()) * framework::dataset::make("numlevels", 2, 5);$/;"	m	namespace:arm_compute::test::validation::__anon424	file:
large_gaussian_pyramid_levels	tests/validation/NEON/GaussianPyramid.cpp	/^const auto large_gaussian_pyramid_levels = combine(datasets::Large2DShapes(), datasets::BorderModes()) * framework::dataset::make("numlevels", 2, 5);$/;"	m	namespace:arm_compute::test::validation::__anon500	file:
ldexp	include/half/half.hpp	/^		inline half ldexp(expr arg, int exp) { return functions::scalbln(arg, exp); }$/;"	f	namespace:detail
ldexp	include/half/half.hpp	/^		inline half ldexp(half arg, int exp) { return functions::scalbln(arg, exp); }$/;"	f	namespace:detail
left	arm_compute/core/Types.h	/^    unsigned int left;   \/**< left of the border *\/$/;"	m	struct:arm_compute::BorderSize
legal	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^        bool      legal = false;$/;"	m	class:arm_gemm::profiler::ScopedProfilerClass
len	include/libnpy/npy.hpp	/^    int  len;$/;"	m	struct:npy::Typestring
level	tests/framework/Exceptions.cpp	/^LogLevel TestError::level() const$/;"	f	class:arm_compute::test::framework::TestError
lgamma	include/half/half.hpp	/^			static double lgamma(double arg)$/;"	f	struct:detail::functions
lgamma	include/half/half.hpp	/^			static expr lgamma(float arg)$/;"	f	struct:detail::functions
lgamma	include/half/half.hpp	/^		inline expr lgamma(expr arg) { return functions::lgamma(arg); }$/;"	f	namespace:detail
lgamma	include/half/half.hpp	/^		inline expr lgamma(half arg) { return functions::lgamma(arg); }$/;"	f	namespace:detail
library	tests/main.cpp	/^std::unique_ptr<AssetsLibrary> library;$/;"	m	namespace:arm_compute::test	file:
lifetime_manager	src/runtime/MemoryManagerOnDemand.cpp	/^ILifetimeManager *MemoryManagerOnDemand::lifetime_manager()$/;"	f	class:MemoryManagerOnDemand
limit	arm_compute/core/Types.h	/^    void limit(const BorderSize &limit)$/;"	f	struct:arm_compute::BorderSize
linear_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float linear_op(float x)$/;"	f
linearize_volume	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^inline void linearize_volume(const uint8_t *const in_ptr,$/;"	f	namespace:__anon273
linkProgram	include/CL/cl.hpp	/^inline Program linkProgram($/;"	f	namespace:cl
linkProgram	include/CL/cl2.hpp	/^inline Program linkProgram($/;"	f	namespace:cl
link_program	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GLuint GCProgram::link_program(GLuint shader)$/;"	f	class:GCProgram
literal	include/half/half.hpp	/^	namespace literal$/;"	n
literal	include/half/half.hpp	/^	namespace literal$/;"	n	namespace:half_float
little_endian_char	include/libnpy/npy.hpp	/^const char little_endian_char = '<';$/;"	m	namespace:npy
llrint	include/half/half.hpp	/^			static long long llrint(half arg) { return detail::half2int<half::round_style,long long>(arg.data_); }$/;"	f	struct:detail::functions
llrint	include/half/half.hpp	/^		inline long long llrint(expr arg) { return functions::llrint(arg); }$/;"	f	namespace:detail
llrint	include/half/half.hpp	/^		inline long long llrint(half arg) { return functions::llrint(arg); }$/;"	f	namespace:detail
llround	include/half/half.hpp	/^			static long long llround(half arg) { return detail::half2int_up<long long>(arg.data_); }$/;"	f	struct:detail::functions
llround	include/half/half.hpp	/^		inline long long llround(expr arg) { return functions::llround(arg); }$/;"	f	namespace:detail
llround	include/half/half.hpp	/^		inline long long llround(half arg) { return functions::llround(arg); }$/;"	f	namespace:detail
lo	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  lo, hi; };$/;"	m	struct:__anon69::__anon72
lo	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half2 lo, hi; };$/;"	m	struct:__anon73::__anon76
lo	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half4 lo, hi; };$/;"	m	struct:__anon77::__anon80
lo	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half8 lo, hi; };$/;"	m	struct:__anon81::__anon84
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  lo, hi; };$/;"	m	struct:__anon5::__anon8
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char2 lo, hi; };$/;"	m	struct:__anon9::__anon12
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char4 lo, hi; };$/;"	m	struct:__anon13::__anon16
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char8 lo, hi; };$/;"	m	struct:__anon17::__anon20
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double lo, hi; };$/;"	m	struct:__anon165::__anon168
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double2 lo, hi; };$/;"	m	struct:__anon169::__anon172
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double4 lo, hi; };$/;"	m	struct:__anon173::__anon176
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double8 lo, hi; };$/;"	m	struct:__anon177::__anon180
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  lo, hi; };$/;"	m	struct:__anon149::__anon152
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float2  lo, hi; };$/;"	m	struct:__anon153::__anon156
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float4  lo, hi; };$/;"	m	struct:__anon157::__anon160
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float8 lo, hi; };$/;"	m	struct:__anon161::__anon164
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  lo, hi; };$/;"	m	struct:__anon85::__anon88
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int2 lo, hi; };$/;"	m	struct:__anon89::__anon92
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int4 lo, hi; };$/;"	m	struct:__anon93::__anon96
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int8 lo, hi; };$/;"	m	struct:__anon97::__anon100
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  lo, hi; };$/;"	m	struct:__anon117::__anon120
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long2 lo, hi; };$/;"	m	struct:__anon121::__anon124
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long4 lo, hi; };$/;"	m	struct:__anon125::__anon128
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long8 lo, hi; };$/;"	m	struct:__anon129::__anon132
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  lo, hi; };$/;"	m	struct:__anon37::__anon40
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short2 lo, hi; };$/;"	m	struct:__anon41::__anon44
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short4 lo, hi; };$/;"	m	struct:__anon45::__anon48
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short8 lo, hi; };$/;"	m	struct:__anon49::__anon52
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  lo, hi; };$/;"	m	struct:__anon21::__anon24
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar2 lo, hi; };$/;"	m	struct:__anon25::__anon28
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar4 lo, hi; };$/;"	m	struct:__anon29::__anon32
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar8 lo, hi; };$/;"	m	struct:__anon33::__anon36
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  lo, hi; };$/;"	m	struct:__anon101::__anon104
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint2 lo, hi; };$/;"	m	struct:__anon105::__anon108
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint4 lo, hi; };$/;"	m	struct:__anon109::__anon112
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint8 lo, hi; };$/;"	m	struct:__anon113::__anon116
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  lo, hi; };$/;"	m	struct:__anon133::__anon136
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong2 lo, hi; };$/;"	m	struct:__anon137::__anon140
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong4 lo, hi; };$/;"	m	struct:__anon141::__anon144
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong8 lo, hi; };$/;"	m	struct:__anon145::__anon148
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  lo, hi; };$/;"	m	struct:__anon53::__anon56
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort2 lo, hi; };$/;"	m	struct:__anon57::__anon60
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort4 lo, hi; };$/;"	m	struct:__anon61::__anon64
lo	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort8 lo, hi; };$/;"	m	struct:__anon65::__anon68
load	src/core/CL/OpenCL.cpp	/^bool CLSymbols::load(const std::string &library)$/;"	f	class:arm_compute::CLSymbols
load_8h	documentation/load_8h.js	/^var load_8h =$/;"	v
load_array_from_numpy	tests/validation/UNIT/FixedPoint.cpp	/^void load_array_from_numpy(const std::string &file, std::vector<unsigned long> &shape, std::vector<T> &data) \/\/ NOLINT$/;"	f	namespace:arm_compute::test::validation::__anon526
load_default	src/core/CL/OpenCL.cpp	/^bool CLSymbols::load_default()$/;"	f	class:arm_compute::CLSymbols
load_from_file	src/runtime/CL/CLTuner.cpp	/^void CLTuner::load_from_file(const std::string &filename)$/;"	f	class:CLTuner
load_image	tests/AssetsLibrary.cpp	/^RawTensor AssetsLibrary::load_image(const std::string &name) const$/;"	f	class:arm_compute::test::AssetsLibrary
load_input	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4x3_t load_input(const float *const in)$/;"	f	namespace:__anon256
load_matrix_hi	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4x3_t load_matrix_hi(const float *const m0, const float *const m1, const float *const m2)$/;"	f	namespace:__anon256
load_matrix_lo	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline float32x4x2_t load_matrix_lo(const float *const m3, const float *const m4)$/;"	f	namespace:__anon256
load_matrix_row	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^inline float32x4x3_t load_matrix_row(const float *ptr)$/;"	f	namespace:arm_compute::detail
load_matrix_row	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float16x8x3_t load_matrix_row(const float16_t *ptr)$/;"	f	namespace:arm_compute::detail
load_matrix_row	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline float32x4x3_t load_matrix_row(const float *ptr, int weights_offset = 0)$/;"	f	namespace:arm_compute::detail
load_matrix_row	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline int32x4x3_t load_matrix_row(const uint8_t *ptr, int weights_offset = 0)$/;"	f	namespace:arm_compute::detail
load_matrix_row	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline qint8x8x3_t load_matrix_row(const qint8_t *ptr, int weights_offset = 0)$/;"	f	namespace:arm_compute::detail
load_pgm	tests/AssetsLibrary.cpp	/^RawTensor load_pgm(const std::string &path)$/;"	f	namespace:arm_compute::test::__anon328
load_ppm	tests/AssetsLibrary.cpp	/^RawTensor load_ppm(const std::string &path)$/;"	f	namespace:arm_compute::test::__anon328
load_program	src/core/CL/CLKernelLibrary.cpp	/^const Program &CLKernelLibrary::load_program(const std::string &program_name) const$/;"	f	class:CLKernelLibrary
load_program	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^const GCProgram &GCKernelLibrary::load_program(const std::string &program_name) const$/;"	f	class:GCKernelLibrary
load_trained_data	utils/Utils.h	/^void load_trained_data(T &tensor, const std::string &filename)$/;"	f	namespace:arm_compute::utils
load_unpack_swizzle_stride1	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	/^vec4[3] load_unpack_swizzle_stride1(uint offset)$/;"	m
load_unpack_swizzle_stride2	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	/^vec4[3] load_unpack_swizzle_stride2(uint offset)$/;"	m
load_unpack_swizzle_stride3	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	/^vec4[3] load_unpack_swizzle_stride3(uint offset)$/;"	m
loadq	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^uint16x8_t loadq(const uint16_t *ptr)$/;"	f	namespace:__anon252
loadq	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^uint32x4_t loadq(const uint32_t *ptr)$/;"	f	namespace:__anon252
loadq	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^uint8x16_t loadq(const uint8_t *ptr)$/;"	f	namespace:__anon252
localStorageSupported	documentation/navtree.js	/^function localStorageSupported()$/;"	f
local_	include/CL/cl.hpp	/^    const NDRange local_;$/;"	m	struct:cl::EnqueueArgs
local_	include/CL/cl2.hpp	/^    const NDRange local_;$/;"	m	class:cl::EnqueueArgs
local_x_size	src/core/CL/kernels/CLHistogramKernel.cpp	/^constexpr unsigned int local_x_size = 16;$/;"	v
locally_connected	tests/validation/reference/LocallyConnected.cpp	/^SimpleTensor<T> locally_connected(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<TB> &bias, const TensorShape &output_shape, const PadStrideInfo &info)$/;"	f	namespace:arm_compute::test::validation::reference
lock	src/runtime/CL/CLLutAllocator.cpp	/^uint8_t *CLLutAllocator::lock()$/;"	f	class:CLLutAllocator
lock	src/runtime/CL/CLTensorAllocator.cpp	/^uint8_t *CLTensorAllocator::lock()$/;"	f	class:CLTensorAllocator
lock	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^uint8_t *GCTensorAllocator::lock()$/;"	f	class:GCTensorAllocator
lock	src/runtime/LutAllocator.cpp	/^uint8_t *LutAllocator::lock()$/;"	f	class:LutAllocator
lock	src/runtime/TensorAllocator.cpp	/^uint8_t *TensorAllocator::lock()$/;"	f	class:TensorAllocator
lock_pool	src/runtime/PoolManager.cpp	/^IMemoryPool *PoolManager::lock_pool()$/;"	f	class:PoolManager
log	arm_compute/core/utils/logging/Logger.h	/^inline void Logger::log(LogLevel log_level, const std::string &fmt, Ts &&... args)$/;"	f	class:arm_compute::logging::Logger
log	include/half/half.hpp	/^			static expr log(float arg) { return expr(std::log(arg)); }$/;"	f	struct:detail::functions
log	include/half/half.hpp	/^		inline expr log(expr arg) { return functions::log(arg); }$/;"	f	namespace:detail
log	include/half/half.hpp	/^		inline expr log(half arg) { return functions::log(arg); }$/;"	f	namespace:detail
log	src/core/utils/logging/Logger.cpp	/^void Logger::log(LogLevel log_level, const std::string &msg)$/;"	f	class:Logger
log	tests/validation/FixedPoint.h	/^    static fixed_point<T> log(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
log	tests/validation/FixedPoint.h	/^inline fixed_point<T> log(fixed_point<T> x)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
log10	include/half/half.hpp	/^			static expr log10(float arg) { return expr(std::log10(arg)); }$/;"	f	struct:detail::functions
log10	include/half/half.hpp	/^		inline expr log10(expr arg) { return functions::log10(arg); }$/;"	f	namespace:detail
log10	include/half/half.hpp	/^		inline expr log10(half arg) { return functions::log10(arg); }$/;"	f	namespace:detail
log1p	include/half/half.hpp	/^			static expr log1p(float arg)$/;"	f	struct:detail::functions
log1p	include/half/half.hpp	/^		inline expr log1p(expr arg) { return functions::log1p(arg); }$/;"	f	namespace:detail
log1p	include/half/half.hpp	/^		inline expr log1p(half arg) { return functions::log1p(arg); }$/;"	f	namespace:detail
log2	include/half/half.hpp	/^			static expr log2(float arg)$/;"	f	struct:detail::functions
log2	include/half/half.hpp	/^		inline expr log2(expr arg) { return functions::log2(arg); }$/;"	f	namespace:detail
log2	include/half/half.hpp	/^		inline expr log2(half arg) { return functions::log2(arg); }$/;"	f	namespace:detail
log2_cache_size	tests/framework/instruments/hwc.hpp	/^    uint8_t log2_cache_size;$/;"	m	struct:mali_userspace::mali_base_gpu_l2_cache_props
log2_line_size	tests/framework/instruments/hwc.hpp	/^    uint8_t log2_line_size;$/;"	m	struct:mali_userspace::mali_base_gpu_l2_cache_props
log2_program_counter_size	tests/framework/instruments/hwc.hpp	/^    uint32_t log2_program_counter_size;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
log_failed_expectation	tests/framework/Framework.cpp	/^void Framework::log_failed_expectation(const TestError &error)$/;"	f	class:arm_compute::test::framework::Framework
log_file	tests/framework/command_line/CommonOptions.h	/^    SimpleOption<std::string>                  *log_file;       \/**< Log file option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
log_format	tests/framework/command_line/CommonOptions.h	/^    EnumOption<LogFormat>                      *log_format;     \/**< Log format option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
log_format_from_name	tests/framework/printers/Printers.cpp	/^LogFormat log_format_from_name(const std::string &name)$/;"	f	namespace:arm_compute::test::framework
log_info	tests/framework/Framework.cpp	/^void Framework::log_info(const std::string &info)$/;"	f	class:arm_compute::test::framework::Framework
log_level	src/core/utils/logging/Logger.cpp	/^LogLevel Logger::log_level() const$/;"	f	class:Logger
log_level	tests/framework/Framework.cpp	/^LogLevel Framework::log_level() const$/;"	f	class:arm_compute::test::framework::Framework
log_level	tests/framework/command_line/CommonOptions.h	/^    EnumOption<LogLevel>                       *log_level;      \/**< Logging level option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
log_level_	arm_compute/core/utils/logging/Types.h	/^    LogLevel log_level_;$/;"	m	struct:arm_compute::logging::LogMsg
log_level_from_name	tests/framework/Exceptions.cpp	/^LogLevel log_level_from_name(const std::string &name)$/;"	f	namespace:arm_compute::test::framework
log_streams	tests/framework/command_line/CommonOptions.h	/^    std::vector<std::shared_ptr<std::ofstream>> log_streams;    \/**< Log streams *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
log_test_end	tests/framework/Framework.cpp	/^void Framework::log_test_end(const TestInfo &info)$/;"	f	class:arm_compute::test::framework::Framework
log_test_skipped	tests/framework/Framework.cpp	/^void Framework::log_test_skipped(const TestInfo &info)$/;"	f	class:arm_compute::test::framework::Framework
log_test_start	tests/framework/Framework.cpp	/^void Framework::log_test_start(const TestInfo &info)$/;"	f	class:arm_compute::test::framework::Framework
logb	include/half/half.hpp	/^			static half logb(half arg)$/;"	f	struct:detail::functions
logb	include/half/half.hpp	/^		inline half logb(expr arg) { return functions::logb(arg); }$/;"	f	namespace:detail
logb	include/half/half.hpp	/^		inline half logb(half arg) { return functions::logb(arg); }$/;"	f	namespace:detail
logger	src/core/utils/logging/LoggerRegistry.cpp	/^std::shared_ptr<Logger> LoggerRegistry::logger(const std::string &name)$/;"	f	class:LoggerRegistry
logging	arm_compute/core/utils/logging/FilePrinter.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/Helpers.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/IPrinter.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/LogMsgDecorators.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/Logger.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/LoggerRegistry.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/StdPrinter.h	/^namespace logging$/;"	n	namespace:arm_compute
logging	arm_compute/core/utils/logging/Types.h	/^namespace logging$/;"	n	namespace:arm_compute
logistic_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float logistic_op(float x)$/;"	f
logistic_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^vec4 logistic_op(vec4 x)$/;"	f
logits_1d_max	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void logits_1d_max(const ITensor &in, ITensor &out, const Window &window)$/;"	f	namespace:arm_compute::__anon296
logits_1d_softmax_fixed_point	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void logits_1d_softmax_fixed_point(const ITensor &in, const ITensor &max, void *const tmp,$/;"	f	namespace:arm_compute::__anon297
logits_1d_softmax_float	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void logits_1d_softmax_float(const ITensor &in, const ITensor &max, void *const tmp,$/;"	f	namespace:arm_compute::__anon297
logits_1d_softmax_qasymm8	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void logits_1d_softmax_qasymm8(const ITensor &in, const ITensor &max, void *const tmp, ITensor &out, const float beta, const Window &window)$/;"	f	namespace:arm_compute::__anon297
lower_string	src/core/Utils.cpp	/^std::string arm_compute::lower_string(const std::string &val)$/;"	f	class:arm_compute
lrelu_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float lrelu_op(float x)$/;"	f
lrint	include/half/half.hpp	/^			static long lrint(half arg) { return detail::half2int<half::round_style,long>(arg.data_); }$/;"	f	struct:detail::functions
lrint	include/half/half.hpp	/^		inline long lrint(expr arg) { return functions::lrint(arg); }$/;"	f	namespace:detail
lrint	include/half/half.hpp	/^		inline long lrint(half arg) { return functions::lrint(arg); }$/;"	f	namespace:detail
lround	include/half/half.hpp	/^			static long lround(half arg) { return detail::half2int_up<long>(arg.data_); }$/;"	f	struct:detail::functions
lround	include/half/half.hpp	/^		inline long lround(expr arg) { return functions::lround(arg); }$/;"	f	namespace:detail
lround	include/half/half.hpp	/^		inline long lround(half arg) { return functions::lround(arg); }$/;"	f	namespace:detail
lu_brelu_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float lu_brelu_op(float x)$/;"	f
lubrelu	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    explicit lubrelu(ActivationLayerInfo act_info)$/;"	f	struct:arm_compute::detail::lubrelu
lubrelu	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^struct lubrelu$/;"	s	namespace:arm_compute::detail
luminance_size	include/linux/EGL/fbdev_window.h	/^	unsigned char luminance_size;$/;"	m	struct:fbdev_pixmap
lws_hint	arm_compute/core/CL/ICLKernel.h	/^    cl::NDRange lws_hint() const$/;"	f	class:arm_compute::ICLKernel
lws_table	src/runtime/CL/CLTuner.cpp	/^const std::unordered_map<std::string, cl::NDRange> &CLTuner::lws_table() const$/;"	f	class:CLTuner
m	arm_compute/core/Types.h	/^    int m() const$/;"	f	class:arm_compute::HOGNormType::final
m_block	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    unsigned int m_block = 0;$/;"	m	class:arm_gemm::GemvNativeTransposed
m_block	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    unsigned int m_block = 0;$/;"	m	class:arm_gemm::GemvPretransposed
mag_l1_S16_S16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint16x8_t mag_l1_S16_S16(int16x8_t gx, int16x8_t gy)$/;"	f	namespace:__anon249
mag_l1_S16_S16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint16x8_t mag_l1_S16_S16(int16x8_t gx, int16x8_t gy)$/;"	f	namespace:fp16
mag_l1_S32_S32	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint32x4x2_t mag_l1_S32_S32(const int32x4x2_t &gx, const int32x4x2_t &gy)$/;"	f	namespace:__anon249
mag_l1_S32_S32	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint32x4x2_t mag_l1_S32_S32(const int32x4x2_t &gx, const int32x4x2_t &gy)$/;"	f	namespace:fp16
mag_l2	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline float16x8_t mag_l2(float16x8_t gx, float16x8_t gy)$/;"	f	namespace:fp16
mag_l2	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline float32x4x2_t mag_l2(const float32x4x2_t &gx, const float32x4x2_t &gy)$/;"	f	namespace:__anon249
mag_l2	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline float32x4x2_t mag_l2(const float32x4x2_t &gx, const float32x4x2_t &gy)$/;"	f	namespace:fp16
mag_l2_S16_S16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint16x8_t mag_l2_S16_S16(int16x8_t gx, int16x8_t gy)$/;"	f	namespace:__anon249
mag_l2_S16_S16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint16x8_t mag_l2_S16_S16(int16x8_t gx, int16x8_t gy)$/;"	f	namespace:fp16
mag_l2_S32_S32	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint32x4x2_t mag_l2_S32_S32(const int32x4x2_t &gx, const int32x4x2_t &gy)$/;"	f	namespace:__anon249
mag_l2_S32_S32	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint32x4x2_t mag_l2_S32_S32(const int32x4x2_t &gx, const int32x4x2_t &gy)$/;"	f	namespace:fp16
mag_phase_l1norm_S16_S16_U16_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l1norm_S16_S16_U16_U8(const void *__restrict gx_ptr, const void *__restrict gy_ptr, void *__restrict magnitude_ptr, void *__restrict phase_ptr)$/;"	f	namespace:__anon249
mag_phase_l1norm_S16_S16_U16_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l1norm_S16_S16_U16_U8(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out1_ptr, void *__restrict out2_ptr)$/;"	f	namespace:fp16
mag_phase_l1norm_S32_S32_U32_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l1norm_S32_S32_U32_U8(const void *__restrict gx_ptr, const void *__restrict gy_ptr, void *__restrict magnitude_ptr, void *__restrict phase_ptr)$/;"	f	namespace:__anon249
mag_phase_l1norm_S32_S32_U32_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l1norm_S32_S32_U32_U8(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out1_ptr, void *__restrict out2_ptr)$/;"	f	namespace:fp16
mag_phase_l2norm_S16_S16_U16_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l2norm_S16_S16_U16_U8(const void *__restrict gx_ptr, const void *__restrict gy_ptr, void *__restrict magnitude_ptr, void *__restrict phase_ptr)$/;"	f	namespace:__anon249
mag_phase_l2norm_S16_S16_U16_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l2norm_S16_S16_U16_U8(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out1_ptr, void *__restrict out2_ptr)$/;"	f	namespace:fp16
mag_phase_l2norm_S32_S32_U32_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l2norm_S32_S32_U32_U8(const void *__restrict gx_ptr, const void *__restrict gy_ptr, void *__restrict magnitude_ptr, void *__restrict phase_ptr)$/;"	f	namespace:__anon249
mag_phase_l2norm_S32_S32_U32_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void mag_phase_l2norm_S32_S32_U32_U8(const void *__restrict in1_ptr, const void *__restrict in2_ptr, void *__restrict out1_ptr, void *__restrict out2_ptr)$/;"	f	namespace:fp16
magic_string	include/libnpy/npy.hpp	/^const char magic_string[] = "\\x93NUMPY";$/;"	m	namespace:npy
magic_string_length	include/libnpy/npy.hpp	/^const size_t magic_string_length = 6;$/;"	m	namespace:npy
magnitude	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseFP16Kernel<mag_type, phase_type>::magnitude(const Window &window)$/;"	f	class:NEMagnitudePhaseFP16Kernel
magnitude	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseKernel<mag_type, phase_type>::magnitude(const Window &window)$/;"	f	class:NEMagnitudePhaseKernel
magnitude	tests/validation/reference/Magnitude.cpp	/^SimpleTensor<T> magnitude(const SimpleTensor<T> &gx, const SimpleTensor<T> &gy, MagnitudeType magnitude_type)$/;"	f	namespace:arm_compute::test::validation::reference
magnitude__phase_8cl	documentation/magnitude__phase_8cl.js	/^var magnitude__phase_8cl =$/;"	v
magnitude_l1	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline int16x8_t magnitude_l1(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:__anon278
magnitude_l1	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline int16x8_t magnitude_l1(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:fp16
magnitude_l2	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline int16x8_t magnitude_l2(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:__anon278
magnitude_l2	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline int16x8_t magnitude_l2(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:fp16
magnitude_phase	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseFP16Kernel<mag_type, phase_type>::magnitude_phase(const Window &window)$/;"	f	class:NEMagnitudePhaseFP16Kernel
magnitude_phase	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseKernel<mag_type, phase_type>::magnitude_phase(const Window &window)$/;"	f	class:NEMagnitudePhaseKernel
magnitude_types	tests/benchmark/CL/Magnitude.cpp	/^const auto magnitude_types = framework::dataset::make("MagnitudeType", { MagnitudeType::L1NORM, MagnitudeType::L2NORM });$/;"	m	namespace:arm_compute::test::benchmark::__anon342	file:
magnitude_types	tests/benchmark/NEON/Magnitude.cpp	/^const auto magnitude_types = framework::dataset::make("MagnitudeType", { MagnitudeType::L1NORM, MagnitudeType::L2NORM });$/;"	m	namespace:arm_compute::test::benchmark::__anon376	file:
main	examples/cl_convolution.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/cl_events.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/cl_sgemm.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/gc_absdiff.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/gc_dc.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_alexnet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_googlenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_inception_v3.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_inception_v4.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_lenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_mobilenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_mobilenet_qasymm8.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_resnet50.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_resnext50.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_squeezenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_squeezenet_v1_1.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_vgg16.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/graph_vgg19.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/neon_cartoon_effect.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/neon_cnn.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/neon_convolution.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/neon_copy_objects.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/neon_scale.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/neoncl_scale_median_gaussian.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_alexnet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_googlenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_inception_v4.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_mobilenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_resnet50.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_squeezenet.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_vgg16.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples_mod/graph_vgg19.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/core/GLES_COMPUTE/cs_shaders/absdiff.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/activation_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/arithmetic_add.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/batchnormalization_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/concatenate.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/convolution_layer.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/convolution_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/depthwise_convolution3x3.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/direct_convolution1x1.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/direct_convolution5x5.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/dropout.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/fill_border.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/gemm.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/gemm.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/normalization_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/normalize_planar_yuv_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/pixelwise_mul_float.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/pooling_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/scale.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	/^void main(void)$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/tensor_shift.cs	/^void main()$/;"	m
main	src/core/GLES_COMPUTE/cs_shaders/transpose.cs	/^void main(void)$/;"	m
main	tests/main.cpp	/^int main(int argc, char **argv)$/;"	f
main_8cpp	documentation/main_8cpp.js	/^var main_8cpp =$/;"	v
major	tests/framework/instruments/hwc.hpp	/^    uint16_t  major;$/;"	m	struct:mali_userspace::__anon390::uku_version_check_args
major	tests/framework/instruments/hwc.hpp	/^    uint16_t major;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_version_check_args
major_revision	tests/framework/instruments/hwc.hpp	/^    uint16_t major_revision;$/;"	m	struct:mali_userspace::gpu_props
major_revision	tests/framework/instruments/hwc.hpp	/^    uint16_t major_revision;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
make	tests/framework/TestCaseFactory.h	/^inline std::unique_ptr<TestCase> DataTestCaseFactory<T, D>::make() const$/;"	f	class:arm_compute::test::framework::DataTestCaseFactory
make	tests/framework/TestCaseFactory.h	/^inline std::unique_ptr<TestCase> SimpleTestCaseFactory<T>::make() const$/;"	f	class:arm_compute::test::framework::SimpleTestCaseFactory
make	tests/framework/datasets/ContainerDataset.h	/^typename std::enable_if<is_container<T>::value, ContainerDataset<T>>::type make(std::string name, T &&values)$/;"	f	namespace:arm_compute::test::framework::dataset
make	tests/framework/datasets/InitializerListDataset.h	/^InitializerListDataset<T> make(std::string name, std::initializer_list<T> &&list)$/;"	f	namespace:arm_compute::test::framework::dataset
make	tests/framework/datasets/RangeDataset.h	/^RangeDataset<T> make(std::string name, T start, T end, T step = 1)$/;"	f	namespace:arm_compute::test::framework::dataset
make	tests/framework/datasets/SingletonDataset.h	/^typename std::enable_if < !is_container<T>::value, SingletonDataset<T >>::type make(std::string name, T &&value)$/;"	f	namespace:arm_compute::test::framework::dataset
makeDefault	include/CL/cl2.hpp	/^    static DeviceCommandQueue makeDefault($/;"	f	class:cl::DeviceCommandQueue
makeDefault	include/CL/cl2.hpp	/^    static void makeDefault() {$/;"	f	class:cl::Context
makeDefault	include/CL/cl2.hpp	/^    static void makeDefault() {$/;"	f	class:cl::Platform
makeDefault	include/CL/cl2.hpp	/^    static void makeDefault()$/;"	f	class:cl::CommandQueue
makeDefault	include/CL/cl2.hpp	/^inline void Device::makeDefault()$/;"	f	class:cl::Device
makeDefaultProvided	include/CL/cl2.hpp	/^    static void makeDefaultProvided(const CommandQueue &c) {$/;"	f	class:cl::CommandQueue
makeDefaultProvided	include/CL/cl2.hpp	/^    static void makeDefaultProvided(const Context &c) {$/;"	f	class:cl::Context
makeDefaultProvided	include/CL/cl2.hpp	/^    static void makeDefaultProvided(const Device &p) {$/;"	f	class:cl::Device
makeDefaultProvided	include/CL/cl2.hpp	/^    static void makeDefaultProvided(const Platform &p) {$/;"	f	class:cl::Platform
make_array	arm_compute/core/utils/misc/Utility.h	/^T make_array(Iterator first, index_sequence<S...>)$/;"	f	namespace:arm_compute::utility::detail
make_array	arm_compute/core/utils/misc/Utility.h	/^std::array<typename std::iterator_traits<Iterator>::value_type, N> make_array(Iterator first, Iterator last)$/;"	f	namespace:arm_compute::utility
make_instrument	tests/framework/instruments/Instrument.h	/^inline std::unique_ptr<Instrument> Instrument::make_instrument()$/;"	f	class:arm_compute::test::framework::Instrument
make_kernel	include/CL/cl.hpp	/^    make_kernel($/;"	f	struct:cl::make_kernel
make_kernel	include/CL/cl.hpp	/^struct make_kernel :$/;"	s	namespace:cl
make_kernel	include/CL/cl2.hpp	/^        make_kernel($/;"	f	struct:cl::compatibility::make_kernel
make_kernel	include/CL/cl2.hpp	/^    struct make_kernel$/;"	s	namespace:cl::compatibility
make_printable	tests/framework/Asserts.h	/^inline T make_printable(T &&value)$/;"	f	namespace:arm_compute::test::framework
make_printable	tests/framework/Asserts.h	/^inline int make_printable(int8_t value)$/;"	f	namespace:arm_compute::test::framework
make_printable	tests/framework/Asserts.h	/^inline unsigned int make_printable(uint8_t value)$/;"	f	namespace:arm_compute::test::framework
make_region	src/runtime/Allocator.cpp	/^std::unique_ptr<IMemoryRegion> Allocator::make_region(size_t size, size_t alignment)$/;"	f	class:Allocator
make_region	src/runtime/CL/CLBufferAllocator.cpp	/^std::unique_ptr<IMemoryRegion> CLBufferAllocator::make_region(size_t size, size_t alignment)$/;"	f	class:CLBufferAllocator
make_region	src/runtime/GLES_COMPUTE/GCBufferAllocator.cpp	/^std::unique_ptr<IMemoryRegion> GCBufferAllocator::make_region(size_t size, size_t alignment)$/;"	f	class:arm_compute::GCBufferAllocator
make_unique	support/ToolchainSupport.h	/^make_unique(Args &&... args)$/;"	f	namespace:arm_compute::support::cpp14
make_unique	support/ToolchainSupport.h	/^make_unique(size_t n)$/;"	f	namespace:arm_compute::support::cpp14
mali_base_gpu_coherent_group	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_coherent_group$/;"	s	namespace:mali_userspace
mali_base_gpu_coherent_group_info	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_coherent_group_info$/;"	s	namespace:mali_userspace
mali_base_gpu_core_props	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_core_props$/;"	s	namespace:mali_userspace
mali_base_gpu_l2_cache_props	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_l2_cache_props$/;"	s	namespace:mali_userspace
mali_base_gpu_props	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_props$/;"	s	namespace:mali_userspace
mali_base_gpu_thread_props	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_thread_props$/;"	s	namespace:mali_userspace
mali_base_gpu_tiler_props	tests/framework/instruments/hwc.hpp	/^struct mali_base_gpu_tiler_props$/;"	s	namespace:mali_userspace
mali_ioctl	tests/framework/instruments/hwc.hpp	/^static inline int mali_ioctl(int fd, T &arg)$/;"	f	namespace:mali_userspace
mali_userspace	tests/framework/instruments/hwc.hpp	/^namespace mali_userspace$/;"	n
mali_userspace	tests/framework/instruments/hwc_names.hpp	/^namespace mali_userspace$/;"	n
manage	arm_compute/runtime/MemoryGroupBase.h	/^inline void MemoryGroupBase<TensorType>::manage(TensorType *obj)$/;"	f	class:arm_compute::MemoryGroupBase
manage	src/graph/backends/CL/CLSubTensorHandle.cpp	/^void CLSubTensorHandle::manage(IMemoryGroup *mg)$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
manage	src/graph/backends/CL/CLTensorHandle.cpp	/^void CLTensorHandle::manage(IMemoryGroup *mg)$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
manage	src/graph/backends/GLES/GCTensorHandle.cpp	/^void GCTensorHandle::manage(IMemoryGroup *mg)$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
manage	src/graph/backends/NEON/NESubTensorHandle.cpp	/^void NESubTensorHandle::manage(IMemoryGroup *mg)$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
manage	src/graph/backends/NEON/NETensorHandle.cpp	/^void NETensorHandle::manage(IMemoryGroup *mg)$/;"	f	class:arm_compute::graph::backends::NETensorHandle
map	arm_compute/core/CL/ICLArray.h	/^    void map(cl::CommandQueue &q, bool blocking = true)$/;"	f	class:arm_compute::ICLArray
map	arm_compute/runtime/CL/CLArray.h	/^    void map(bool blocking = true)$/;"	f	class:arm_compute::CLArray
map	src/core/CL/ICLDistribution1D.cpp	/^void ICLDistribution1D::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:ICLDistribution1D
map	src/core/CL/ICLHOG.cpp	/^void ICLHOG::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:ICLHOG
map	src/core/CL/ICLLut.cpp	/^void ICLLut::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:ICLLut
map	src/core/CL/ICLTensor.cpp	/^void ICLTensor::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:ICLTensor
map	src/core/GLES_COMPUTE/IGCTensor.cpp	/^void IGCTensor::map(bool blocking)$/;"	f	class:IGCTensor
map	src/graph/backends/CL/CLSubTensorHandle.cpp	/^void CLSubTensorHandle::map(bool blocking)$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
map	src/graph/backends/CL/CLTensorHandle.cpp	/^void CLTensorHandle::map(bool blocking)$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
map	src/graph/backends/GLES/GCTensorHandle.cpp	/^void GCTensorHandle::map(bool blocking)$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
map	src/graph/backends/NEON/NESubTensorHandle.cpp	/^void NESubTensorHandle::map(bool blocking)$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
map	src/graph/backends/NEON/NETensorHandle.cpp	/^void NETensorHandle::map(bool blocking)$/;"	f	class:arm_compute::graph::backends::NETensorHandle
map	src/runtime/CL/CLDistribution1D.cpp	/^void CLDistribution1D::map(bool blocking)$/;"	f	class:CLDistribution1D
map	src/runtime/CL/CLHOG.cpp	/^void CLHOG::map(bool blocking)$/;"	f	class:CLHOG
map	src/runtime/CL/CLLut.cpp	/^void CLLut::map(bool blocking)$/;"	f	class:CLLut
map	src/runtime/CL/CLLutAllocator.cpp	/^uint8_t *CLLutAllocator::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLLutAllocator
map	src/runtime/CL/CLMemoryRegion.cpp	/^void *CLBufferMemoryRegion::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:arm_compute::CLBufferMemoryRegion
map	src/runtime/CL/CLMemoryRegion.cpp	/^void *CLCoarseSVMMemoryRegion::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:arm_compute::CLCoarseSVMMemoryRegion
map	src/runtime/CL/CLMemoryRegion.cpp	/^void *CLFineSVMMemoryRegion::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:arm_compute::CLFineSVMMemoryRegion
map	src/runtime/CL/CLSubTensor.cpp	/^void CLSubTensor::map(bool blocking)$/;"	f	class:CLSubTensor
map	src/runtime/CL/CLTensor.cpp	/^void CLTensor::map(bool blocking)$/;"	f	class:CLTensor
map	src/runtime/CL/CLTensorAllocator.cpp	/^uint8_t *CLTensorAllocator::map(cl::CommandQueue &q, bool blocking)$/;"	f	class:CLTensorAllocator
map	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^void GCTensor::map(bool blocking)$/;"	f	class:GCTensor
map	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^uint8_t *GCTensorAllocator::map(bool blocking)$/;"	f	class:GCTensorAllocator
map	utils/Utils.h	/^inline void map(CLDistribution1D &distribution, bool blocking)$/;"	f	namespace:arm_compute::utils
map	utils/Utils.h	/^inline void map(CLTensor &tensor, bool blocking)$/;"	f	namespace:arm_compute::utils
map	utils/Utils.h	/^inline void map(GCTensor &tensor, bool blocking)$/;"	f	namespace:arm_compute::utils
map	utils/Utils.h	/^inline void map(T &tensor, bool blocking)$/;"	f	namespace:arm_compute::utils
mapSVM	include/CL/cl2.hpp	/^inline cl_int mapSVM(cl::vector<T, Alloc> &container)$/;"	f	namespace:cl
mapping_type	src/runtime/BlobLifetimeManager.cpp	/^MappingType BlobLifetimeManager::mapping_type() const$/;"	f	class:BlobLifetimeManager
mapping_type	src/runtime/BlobMemoryPool.cpp	/^MappingType BlobMemoryPool::mapping_type() const$/;"	f	class:BlobMemoryPool
mapping_type	src/runtime/OffsetLifetimeManager.cpp	/^MappingType OffsetLifetimeManager::mapping_type() const$/;"	f	class:OffsetLifetimeManager
mapping_type	src/runtime/OffsetMemoryPool.cpp	/^MappingType OffsetMemoryPool::mapping_type() const$/;"	f	class:OffsetMemoryPool
mappings	arm_compute/runtime/MemoryGroupBase.h	/^inline MemoryMappings &MemoryGroupBase<TensorType>::mappings()$/;"	f	class:arm_compute::MemoryGroupBase
mark_as_unused	src/core/ITensor.cpp	/^void ITensor::mark_as_unused() const$/;"	f	class:ITensor
mask_bottom	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void mask_bottom(const float16x8_t &vc, const float16x8_t &in0, const float16x8_t &in1, uint16x8_t &mask)$/;"	f	namespace:fp16
mask_middle	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void mask_middle(const float16x8_t &vc, const float16x8_t &in0, const float16x8_t &in1, uint16x8_t &mask)$/;"	f	namespace:fp16
mask_top	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void mask_top(const float16x8_t &vc, const float16x8_t &in0, const float16x8_t &in1, uint16x8_t &mask)$/;"	f	namespace:fp16
matrix_addition_f16	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^void matrix_addition_f16(const ITensor *input, ITensor *output, const Window &window, float beta)$/;"	f	namespace:__anon268
matrix_addition_f32	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^void matrix_addition_f32(const ITensor *input, ITensor *output, const Window &window, float beta)$/;"	f	namespace:__anon268
matrix_addition_qs16	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^void matrix_addition_qs16(const ITensor *input, ITensor *output, const Window &window, float beta)$/;"	f	namespace:__anon268
matrix_addition_qs8	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^void matrix_addition_qs8(const ITensor *input, ITensor *output, const Window &window, float beta)$/;"	f	namespace:__anon268
matrix_matrix_multiply_f16	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void matrix_matrix_multiply_f16(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, float alpha)$/;"	f	namespace:__anon269
matrix_matrix_multiply_f32	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void matrix_matrix_multiply_f32(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, float alpha)$/;"	f	namespace:__anon269
matrix_matrix_multiply_qs16	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void matrix_matrix_multiply_qs16(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, float alpha)$/;"	f	namespace:__anon269
matrix_matrix_multiply_qs8	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void matrix_matrix_multiply_qs8(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, float alpha)$/;"	f	namespace:__anon269
matrix_multiply	tests/validation/Helpers.cpp	/^void matrix_multiply(const SimpleTensor<float> &a, const SimpleTensor<float> &b, SimpleTensor<float> &out)$/;"	f	namespace:arm_compute::test::validation
matrix_multiply_s8	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^void inline matrix_multiply_s8(Iterator &ina, Iterator &inb, Iterator &out, int width_b, size_t out_stride, const Window &window)$/;"	f	namespace:arm_compute::__anon261
matrix_multiply_u8	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^void inline matrix_multiply_u8(Iterator &ina, Iterator &inb, Iterator &out, int width_b, size_t out_stride, const Window &window)$/;"	f	namespace:arm_compute::__anon261
matrix_row_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int matrix_row_stride;  \/** Stride within output matrices. *\/$/;"	m	struct:winograd::WinogradGEMM::WeightsTransform
matrix_stride	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int matrix_stride;      \/** Stride between output matrices. *\/$/;"	m	struct:winograd::WinogradGEMM::WeightsTransform
matrix_vector_multiply	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^void NEGEMMMatrixVectorMultiplyKernel::matrix_vector_multiply(const Window &window_in, const Window &window_w, const Window &window_out)$/;"	f	class:NEGEMMMatrixVectorMultiplyKernel
matrix_vector_multiply	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^void NEGEMMMatrixVectorMultiplyKernel::matrix_vector_multiply<float, float, float>(const Window &window_in,$/;"	f	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
matrix_vector_multiply	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^void NEGEMMMatrixVectorMultiplyKernel::matrix_vector_multiply<uint8_t, uint8_t, int32_t>(const Window &window_in,$/;"	f	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
max	include/CL/cl.hpp	160;"	d
max	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement &max() const$/;"	f	class:arm_compute::test::framework::InstrumentsStats
max	tests/validation/FixedPoint.h	/^inline fixed_point<T> max(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
max_8h	documentation/max_8h.js	/^var max_8h =$/;"	v
max_8h.xhtml#a5305cd57eda646455fa9e5638d828db9	documentation/navtreeindex45.js	/^"max_8h.xhtml#a5305cd57eda646455fa9e5638d828db9":[6,0,0,0,3,1,0,4,13],$/;"	p	class:NAVTREEINDEX45
max_active_levels	tests/framework/instruments/hwc.hpp	/^    uint32_t max_active_levels;$/;"	m	struct:mali_userspace::mali_base_gpu_tiler_props
max_barrier_size	tests/framework/instruments/hwc.hpp	/^    uint32_t max_barrier_size;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
max_cl_vector_width	arm_compute/core/CL/CLHelpers.h	/^static constexpr unsigned int max_cl_vector_width = 16;$/;"	m	namespace:arm_compute
max_consecutive_elements_display_width	src/core/Utils.cpp	/^int arm_compute::max_consecutive_elements_display_width(std::ostream &s, DataType dt, const uint8_t *ptr, unsigned int n)$/;"	f	class:arm_compute
max_consecutive_elements_display_width_impl	arm_compute/core/Utils.h	/^int max_consecutive_elements_display_width_impl(std::ostream &s, const T *ptr, unsigned int n)$/;"	f	namespace:arm_compute
max_filter_box	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::max_filter_box(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
max_filter_cross	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::max_filter_cross(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
max_filter_disk	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::max_filter_disk<5, 5>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
max_gc_vector_width	arm_compute/core/GLES_COMPUTE/GCHelpers.h	/^static constexpr unsigned int max_gc_vector_width = 16;$/;"	m	namespace:arm_compute
max_in_pad_bottom	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int max_in_pad_bottom = inner_tile_rows;$/;"	m	class:depthwise::DepthwiseConvolution
max_in_pad_left	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int max_in_pad_left = (kernel_cols - 1) \/ 2;$/;"	m	class:depthwise::DepthwiseConvolution
max_in_pad_right	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int max_in_pad_right = inner_tile_cols;$/;"	m	class:depthwise::DepthwiseConvolution
max_in_pad_top	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int max_in_pad_top = (kernel_rows - 1) \/ 2;$/;"	m	class:depthwise::DepthwiseConvolution
max_int16	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^const uint16x8_t max_int16 = vdupq_n_u16(INT16_MAX);$/;"	m	namespace:arm_compute::__anon251	file:
max_int_u16	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^const static uint16x8_t max_int_u16 = vdupq_n_u16(static_cast<uint16_t>(INT16_MAX));$/;"	v	file:
max_local_workgroup_size	src/core/CL/CLKernelLibrary.cpp	/^size_t CLKernelLibrary::max_local_workgroup_size(const cl::Kernel &kernel) const$/;"	f	class:CLKernelLibrary
max_num_values	arm_compute/core/IArray.h	/^    size_t max_num_values() const$/;"	f	class:arm_compute::IArray
max_out_pad_bottom	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int max_out_pad_bottom = output_tile_rows;$/;"	m	class:depthwise::DepthwiseConvolution
max_out_pad_right	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int max_out_pad_right = output_tile_cols;$/;"	m	class:depthwise::DepthwiseConvolution
max_pad_bottom	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static constexpr int max_pad_bottom = inner_tile_rows - 1;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
max_pad_bottom	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static constexpr int max_pad_bottom = output_tile_rows;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
max_pad_right	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static constexpr int max_pad_right = inner_tile_cols - 1;$/;"	m	struct:winograd::WinogradGEMM::InputTransform
max_pad_right	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static constexpr int max_pad_right = output_tile_cols;$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
max_range	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    static const uint32_t   max_range = 256;          \/**< Histogram range of the internal histograms. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
max_registers	tests/framework/instruments/hwc.hpp	/^    uint16_t max_registers;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
max_row	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline uint8x8_t max_row(uint8x16_t row_data)$/;"	f	namespace:arm_compute::__anon282
max_size	arm_compute/runtime/ISimpleLifetimeManager.h	/^        size_t           max_size;$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Blob
max_size	include/CL/cl.hpp	/^    unsigned int max_size (void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
max_task_queue	tests/framework/instruments/hwc.hpp	/^    uint8_t  max_task_queue;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
max_thread_group_split	tests/framework/instruments/hwc.hpp	/^    uint8_t  max_thread_group_split;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
max_threads	tests/framework/instruments/hwc.hpp	/^    uint32_t max_threads;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
max_workgroup_size	tests/framework/instruments/hwc.hpp	/^    uint32_t max_workgroup_size;$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
maxevents	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    static const int maxevents         = 100000;$/;"	m	class:arm_gemm::profiler
mb_block_type	include/CL/cl_ext_intel.h	/^    cl_uint mb_block_type;$/;"	m	struct:_cl_motion_estimation_desc_intel
mean	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement::Value &mean() const$/;"	f	class:arm_compute::test::framework::InstrumentsStats
mean__stddev_8cl	documentation/mean__stddev_8cl.js	/^var mean__stddev_8cl =$/;"	v
mean_and_standard_deviation	tests/validation/reference/MeanStdDev.cpp	/^std::pair<float, float> mean_and_standard_deviation(const SimpleTensor<T> &in)$/;"	f	namespace:arm_compute::test::validation::reference
measurements	tests/framework/Profiler.cpp	/^const Profiler::MeasurementsMap &Profiler::measurements() const$/;"	f	class:arm_compute::test::framework::Profiler
measurements	tests/framework/instruments/Instrument.h	/^    virtual MeasurementsMap measurements() const$/;"	f	class:arm_compute::test::framework::Instrument
measurements	tests/framework/instruments/MaliCounter.cpp	/^Instrument::MeasurementsMap MaliCounter::measurements() const$/;"	f	class:arm_compute::test::framework::MaliCounter
measurements	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^Instrument::MeasurementsMap OpenCLMemoryUsage::measurements() const$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
measurements	tests/framework/instruments/OpenCLTimer.cpp	/^Instrument::MeasurementsMap OpenCLTimer::measurements() const$/;"	f	class:arm_compute::test::framework::OpenCLTimer
measurements	tests/framework/instruments/PMUCounter.cpp	/^Instrument::MeasurementsMap PMUCounter::measurements() const$/;"	f	class:arm_compute::test::framework::PMUCounter
measurements	tests/framework/instruments/SchedulerTimer.cpp	/^Instrument::MeasurementsMap SchedulerTimer::measurements() const$/;"	f	class:arm_compute::test::framework::SchedulerTimer
measurements	tests/framework/instruments/WallClockTimer.cpp	/^Instrument::MeasurementsMap WallClockTimer::measurements() const$/;"	f	class:arm_compute::test::framework::WallClockTimer
median	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement &median() const$/;"	f	class:arm_compute::test::framework::InstrumentsStats
median3x3	tests/validation/reference/Median3x3.cpp	/^SimpleTensor<T> median3x3(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
median_filter_box	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::median_filter_box<3, 3>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
median_filter_box	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::median_filter_box<5, 5>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
median_filter_cross	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::median_filter_cross<3, 3>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
median_filter_cross	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::median_filter_cross<5, 5>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
median_filter_disk	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::median_filter_disk<5, 5>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
mem_features	tests/framework/instruments/hwc.hpp	/^    uint32_t mem_features;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
mem_object	include/CL/cl.h	/^      cl_mem                  mem_object;$/;"	m	union:_cl_image_desc::__anon4
memory_barrier	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^void GCScheduler::memory_barrier()$/;"	f	class:GCScheduler
memory_management_ctx	src/graph/GraphContext.cpp	/^MemoryManagerContext *GraphContext::memory_management_ctx(Target target)$/;"	f	class:arm_compute::graph::GraphContext
memory_managers	src/graph/GraphContext.cpp	/^std::map<Target, MemoryManagerContext> &GraphContext::memory_managers()$/;"	f	class:arm_compute::graph::GraphContext
merge_histogram	src/core/NEON/kernels/NEHistogramKernel.cpp	/^inline void NEHistogramKernel::merge_histogram(uint32_t *global_hist, const uint32_t *local_hist, size_t bins)$/;"	f	class:NEHistogramKernel
midr	src/runtime/CPUUtils.cpp	/^    unsigned int midr      = 0;$/;"	m	struct:__anon319::PerCPUData	file:
midr_to_model	src/runtime/CPUUtils.cpp	/^CPUModel midr_to_model(const unsigned int midr)$/;"	f	namespace:__anon319
min	tests/framework/instruments/InstrumentsStats.h	/^    const Measurement &min() const$/;"	f	class:arm_compute::test::framework::InstrumentsStats
min	tests/validation/FixedPoint.h	/^inline fixed_point<T> min(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
min_8h	documentation/min_8h.js	/^var min_8h =$/;"	v
min_dist	tests/benchmark/CL/HarrisCorners.cpp	/^const auto min_dist      = framework::dataset::make("MinDist", { 2.f });$/;"	m	namespace:arm_compute::test::benchmark::__anon340	file:
min_dist	tests/benchmark/NEON/HarrisCorners.cpp	/^const auto min_dist      = framework::dataset::make("MinDist", { 2.f });$/;"	m	namespace:arm_compute::test::benchmark::__anon374	file:
min_eig	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    float min_eig; \/**< Minimum eigenvalue *\/$/;"	m	struct:arm_compute::CLCoefficientTable
min_filter_box	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::min_filter_box(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
min_filter_cross	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::min_filter_cross(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
min_filter_disk	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::min_filter_disk<5, 5>(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
min_in_pad_left	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int min_in_pad_left = (kernel_cols - stride_cols) \/ 2;$/;"	m	class:depthwise::DepthwiseConvolution
min_in_pad_top	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int min_in_pad_top = (kernel_rows - stride_rows) \/ 2;$/;"	m	class:depthwise::DepthwiseConvolution
min_max_location	tests/validation/reference/MinMaxLocation.cpp	/^MinMaxLocationValues<T> min_max_location(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
min_row	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline uint8x8_t min_row(uint8x16_t row_data)$/;"	f	namespace:arm_compute::__anon282
minmax_F32	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::minmax_F32(Window win)$/;"	f	class:arm_compute::NEMinMaxKernel
minmax_S16	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::minmax_S16(Window win)$/;"	f	class:arm_compute::NEMinMaxKernel
minmax_U8	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::minmax_U8(Window win)$/;"	f	class:arm_compute::NEMinMaxKernel
minmax_loc	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxLocationKernel::minmax_loc(const Window &win)$/;"	f	class:arm_compute::NEMinMaxLocationKernel
minmaxloc_8cl	documentation/minmaxloc_8cl.js	/^var minmaxloc_8cl =$/;"	v
minor	tests/framework/instruments/hwc.hpp	/^    uint16_t  minor;$/;"	m	struct:mali_userspace::__anon390::uku_version_check_args
minor	tests/framework/instruments/hwc.hpp	/^    uint16_t minor;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_version_check_args
minor_revision	tests/framework/instruments/hwc.hpp	/^    uint16_t minor_revision;$/;"	m	struct:mali_userspace::gpu_props
minor_revision	tests/framework/instruments/hwc.hpp	/^    uint16_t minor_revision;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
minus	include/half/half.hpp	/^			static expr minus(float x, float y) { return expr(x-y); }$/;"	f	struct:detail::functions
minus_ten	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^const int16x8_t minus_ten   = vdupq_n_s16(-10);$/;"	m	namespace:__anon294	file:
minus_three	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^const int16x8_t minus_three = vdupq_n_s16(-3);$/;"	m	namespace:__anon294	file:
minusfive	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t minusfive = vdupq_n_s32(-5);$/;"	m	namespace:__anon295	file:
minusfour	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t minusfour = vdupq_n_s32(-4);$/;"	m	namespace:__anon295	file:
misc	arm_compute/core/utils/misc/CRTP.h	/^namespace misc$/;"	n	namespace:arm_compute
misc	arm_compute/core/utils/misc/ICloneable.h	/^namespace misc$/;"	n	namespace:arm_compute
misc	arm_compute/core/utils/misc/ShapeCalculator.h	/^namespace misc$/;"	n	namespace:arm_compute
mmu_features	tests/framework/instruments/hwc.hpp	/^    uint32_t mmu_features;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
mmu_l2_bm	tests/framework/instruments/hwc.hpp	/^    uint32_t mmu_l2_bm;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup
mode	tests/framework/Framework.h	/^    DatasetMode             mode;   \/**< Test data set mode *\/$/;"	m	struct:arm_compute::test::framework::TestInfo
mode	tests/framework/TestCaseFactory.h	/^inline DatasetMode TestCaseFactory::mode() const$/;"	f	class:arm_compute::test::framework::TestCaseFactory
model	src/core/CL/ICLMultiHOG.cpp	/^IHOG *ICLMultiHOG::model(size_t index)$/;"	f	class:ICLMultiHOG
model	src/core/CL/ICLMultiHOG.cpp	/^const IHOG *ICLMultiHOG::model(size_t index) const$/;"	f	class:ICLMultiHOG
model	src/runtime/CPUUtils.cpp	/^    CPUModel     model     = CPUModel::GENERIC;$/;"	m	struct:__anon319::PerCPUData	file:
model	src/runtime/MultiHOG.cpp	/^IHOG *MultiHOG::model(size_t index)$/;"	f	class:MultiHOG
model	src/runtime/MultiHOG.cpp	/^const IHOG *MultiHOG::model(size_t index) const$/;"	f	class:MultiHOG
model_set	src/runtime/CPUUtils.cpp	/^    bool         model_set = false;$/;"	m	struct:__anon319::PerCPUData	file:
modf	include/half/half.hpp	/^			static half modf(half arg, half *iptr)$/;"	f	struct:detail::functions
modf	include/half/half.hpp	/^		inline half modf(expr arg, half *iptr) { return functions::modf(arg, iptr); }$/;"	f	namespace:detail
modf	include/half/half.hpp	/^		inline half modf(half arg, half *iptr) { return functions::modf(arg, iptr); }$/;"	f	namespace:detail
move	include/CL/cl2.hpp	/^    Buffer(Buffer&& buf) CL_HPP_NOEXCEPT_ : Memory(std::move(buf)) {}$/;"	f	class:cl::Buffer
move	include/CL/cl2.hpp	/^    BufferD3D10(BufferD3D10&& buf) CL_HPP_NOEXCEPT_ : Buffer(std::move(buf)) {}$/;"	f	class:cl::BufferD3D10
move	include/CL/cl2.hpp	/^    BufferGL(BufferGL&& buf) CL_HPP_NOEXCEPT_ : Buffer(std::move(buf)) {}$/;"	f	class:cl::BufferGL
move	include/CL/cl2.hpp	/^    BufferRenderGL(BufferRenderGL&& buf) CL_HPP_NOEXCEPT_ : Buffer(std::move(buf)) {}$/;"	f	class:cl::BufferRenderGL
move	include/CL/cl2.hpp	/^    CommandQueue(CommandQueue&& queue) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(queue)) {}$/;"	f	class:cl::CommandQueue::detail
move	include/CL/cl2.hpp	/^    Context(Context&& ctx) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(ctx)) {}$/;"	f	class:cl::Context::detail
move	include/CL/cl2.hpp	/^    Device(Device&& dev) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(dev)) {}$/;"	f	class:cl::Device::detail
move	include/CL/cl2.hpp	/^    DeviceCommandQueue(DeviceCommandQueue&& queue) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(queue)) {}$/;"	f	class:cl::DeviceCommandQueue::detail
move	include/CL/cl2.hpp	/^    Image(Image&& img) CL_HPP_NOEXCEPT_ : Memory(std::move(img)) {}$/;"	f	class:cl::Image
move	include/CL/cl2.hpp	/^    Image1D(Image1D&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::Image1D
move	include/CL/cl2.hpp	/^    Image1DArray(Image1DArray&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::Image1DArray
move	include/CL/cl2.hpp	/^    Image1DBuffer(Image1DBuffer&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::Image1DBuffer
move	include/CL/cl2.hpp	/^    Image2D(Image2D&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::Image2D
move	include/CL/cl2.hpp	/^    Image2DArray(Image2DArray&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::Image2DArray
move	include/CL/cl2.hpp	/^    Image2DGL(Image2DGL&& img) CL_HPP_NOEXCEPT_ : Image2D(std::move(img)) {}$/;"	f	class:cl::Image2DGL
move	include/CL/cl2.hpp	/^    Image3D(Image3D&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::Image3D
move	include/CL/cl2.hpp	/^    Image3DGL(Image3DGL&& img) CL_HPP_NOEXCEPT_ : Image3D(std::move(img)) {}$/;"	f	class:cl::Image3DGL
move	include/CL/cl2.hpp	/^    ImageGL(ImageGL&& img) CL_HPP_NOEXCEPT_ : Image(std::move(img)) {}$/;"	f	class:cl::ImageGL
move	include/CL/cl2.hpp	/^    Kernel(Kernel&& kernel) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(kernel)) {}$/;"	f	class:cl::Kernel::detail
move	include/CL/cl2.hpp	/^    Memory(Memory&& mem) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(mem)) {}$/;"	f	class:cl::Memory::detail
move	include/CL/cl2.hpp	/^    Pipe(Pipe&& pipe) CL_HPP_NOEXCEPT_ : Memory(std::move(pipe)) {}$/;"	f	class:cl::Pipe
move	include/CL/cl2.hpp	/^    Program(Program&& program) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(program)) {}$/;"	f	class:cl::Program::detail
move	include/CL/cl2.hpp	/^    Sampler(Sampler&& sam) CL_HPP_NOEXCEPT_ : detail::Wrapper<cl_type>(std::move(sam)) {}$/;"	f	class:cl::Sampler::detail
moveblock_1x1	src/core/NEON/kernels/arm_gemm/transforms/a32_transpose_interleave_8way_32bit.hpp	/^inline void TransposeInterleaveCommon<16, uint16_t, uint16_t>::moveblock_1x1(const uint16_t *&in0, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x1	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_16bit.hpp	/^inline void TransposeInterleaveCommon<12, uint16_t, uint16_t>::moveblock_1x1(const uint16_t *&in0, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x1	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_half_to_float.hpp	/^inline void TransposeInterleaveCommon<12, __fp16, float>::moveblock_1x1(const __fp16 *&in0, float *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x1	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_24way_16bit.hpp	/^inline void TransposeInterleaveCommon<24, uint16_t, uint16_t>::moveblock_1x1(const uint16_t *&in0, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x1	src/core/NEON/kernels/arm_gemm/transforms/transpose_interleave_common.hpp	/^    static inline void moveblock_1x1(const TIn *&in0, TOut *out)$/;"	f	struct:TransposeInterleaveCommon
moveblock_1x2	src/core/NEON/kernels/arm_gemm/transforms/a32_transpose_interleave_8way_32bit.hpp	/^inline void TransposeInterleaveCommon<16, uint16_t, uint16_t>::moveblock_1x2(const uint16_t *&in0, const uint16_t *&in1, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x2	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_16bit.hpp	/^inline void TransposeInterleaveCommon<12, uint16_t, uint16_t>::moveblock_1x2(const uint16_t *&in0, const uint16_t *&in1, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x2	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_half_to_float.hpp	/^inline void TransposeInterleaveCommon<12, __fp16, float>::moveblock_1x2(const __fp16 *&in0, const __fp16 *&in1, float *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x2	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_24way_16bit.hpp	/^inline void TransposeInterleaveCommon<24, uint16_t, uint16_t>::moveblock_1x2(const uint16_t *&in0, const uint16_t *&in1, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x2	src/core/NEON/kernels/arm_gemm/transforms/transpose_interleave_common.hpp	/^    static inline void moveblock_1x2(const TIn *&in0, const TIn *&in1, TOut *out)$/;"	f	struct:TransposeInterleaveCommon
moveblock_1x4	src/core/NEON/kernels/arm_gemm/transforms/a32_transpose_interleave_8way_32bit.hpp	/^inline void TransposeInterleaveCommon<16, uint16_t, uint16_t>::moveblock_1x4(const uint16_t *&in0, const uint16_t *&in1, const uint16_t *&in2, const uint16_t *&in3, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x4	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_16bit.hpp	/^inline void TransposeInterleaveCommon<12, uint16_t, uint16_t>::moveblock_1x4(const uint16_t *&in0, const uint16_t *&in1, const uint16_t *&in2, const uint16_t *&in3, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x4	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_12way_half_to_float.hpp	/^inline void TransposeInterleaveCommon<12, __fp16, float>::moveblock_1x4(const __fp16 *&in0, const __fp16 *&in1, const __fp16 *&in2, const __fp16 *&in3, float *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x4	src/core/NEON/kernels/arm_gemm/transforms/a64_transpose_interleave_24way_16bit.hpp	/^inline void TransposeInterleaveCommon<24, uint16_t, uint16_t>::moveblock_1x4(const uint16_t *&in0, const uint16_t *&in1, const uint16_t *&in2, const uint16_t *&in3, uint16_t *out)$/;"	f	class:TransposeInterleaveCommon
moveblock_1x4	src/core/NEON/kernels/arm_gemm/transforms/transpose_interleave_common.hpp	/^    static inline void moveblock_1x4(const TIn *&in0, const TIn *&in1, const TIn *&in2, const TIn *&in3, TOut *out)$/;"	f	struct:TransposeInterleaveCommon
mp_count	tests/framework/instruments/MaliCounter.cpp	/^    unsigned mp_count;$/;"	m	struct:arm_compute::test::framework::__anon387::MaliHWInfo	file:
mul	tests/validation/FixedPoint.h	/^    static fixed_point<T> mul(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
mul	tests/validation/FixedPoint.h	/^inline fixed_point<T> mul(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
mul	tests/validation/reference/PixelWiseMultiplication.cpp	/^T2 mul(const T1 src1, const T2 src2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)$/;"	f	namespace:arm_compute::test::validation::reference::__anon545
mul_F16_F16_F16_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_F16_F16_F16_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, float scale)$/;"	f	namespace:__anon287
mul_F32_F32_F32_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_F32_F32_F32_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, float scale)$/;"	f	namespace:__anon287
mul_QS16_QS16_QS16_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_QS16_QS16_QS16_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n, int fixed_point_position)$/;"	f	namespace:__anon287
mul_QS8_QS8_QS8_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_QS8_QS8_QS8_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n, int fixed_point_position)$/;"	f	namespace:__anon287
mul_S16_S16_S16_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_S16_S16_S16_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n)$/;"	f	namespace:__anon287
mul_S16_S16_S16_n_k	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^inline int16x8x2_t mul_S16_S16_S16_n_k(const int16x8x2_t &input1, const int16x8x2_t &input2, int n)$/;"	f	namespace:__anon287
mul_S16_S16_S16_n_loop	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^inline int16x8_t mul_S16_S16_S16_n_loop(const int16x8_t &input1, const int16x8_t &input2, int n)$/;"	f	namespace:__anon287
mul_S16_U8_S16_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_S16_U8_S16_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n)$/;"	f	namespace:__anon287
mul_U8_S16_S16_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_U8_S16_S16_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n)$/;"	f	namespace:__anon287
mul_U8_U8_S16_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_U8_U8_S16_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n)$/;"	f	namespace:__anon287
mul_U8_U8_U8_n	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void mul_U8_U8_U8_n(const void *__restrict input1_ptr, const void *__restrict input2_ptr, void *__restrict output_ptr, int n)$/;"	f	namespace:__anon287
mult_interleave4x4_height	arm_compute/core/Types.h	/^    int mult_interleave4x4_height() const$/;"	f	class:arm_compute::HOGNormType::final
mult_transpose1xW_width	arm_compute/core/Types.h	/^    int mult_transpose1xW_width() const$/;"	f	class:arm_compute::HOGNormType::final
multi	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int multi(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
multiplies	include/half/half.hpp	/^			static expr multiplies(float x, float y) { return expr(x*y); }$/;"	f	struct:detail::functions
mutate	src/graph/mutators/DepthConcatSubTensorMutator.cpp	/^void DepthConcatSubTensorMutator::mutate(Graph &g)$/;"	f	class:arm_compute::graph::DepthConcatSubTensorMutator
mutate	src/graph/mutators/InPlaceOperationMutator.cpp	/^void InPlaceOperationMutator::mutate(Graph &g)$/;"	f	class:arm_compute::graph::InPlaceOperationMutator
mutate	src/graph/mutators/NodeFusionMutator.cpp	/^void NodeFusionMutator::mutate(Graph &g)$/;"	f	class:arm_compute::graph::NodeFusionMutator
mutate	src/graph/mutators/SplitLayerSubTensorMutator.cpp	/^void SplitLayerSubTensorMutator::mutate(Graph &g)$/;"	f	class:arm_compute::graph::SplitLayerSubTensorMutator
n	arm_compute/core/Types.h	/^    int n() const$/;"	f	class:arm_compute::HOGNormType::final
n_batches	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_batches, n_rows, n_cols, n_channels;$/;"	m	struct:Tensor4DShape
n_block	src/core/NEON/kernels/arm_gemm/gemm_native.hpp	/^    unsigned int n_block = 0;$/;"	m	class:arm_gemm::GemmNative
n_block	src/core/NEON/kernels/arm_gemm/gemv_native_transposed.hpp	/^    unsigned int n_block = 0;$/;"	m	class:arm_gemm::GemvNativeTransposed
n_block	src/core/NEON/kernels/arm_gemm/gemv_pretransposed.hpp	/^    unsigned int n_block = 0;$/;"	m	class:arm_gemm::GemvPretransposed
n_channels	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_batches, n_rows, n_cols, n_channels;$/;"	m	struct:Tensor4DShape
n_cols	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_batches, n_rows, n_cols, n_channels;$/;"	m	struct:Tensor4DShape
n_cols	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_output_channels, n_rows, n_cols, n_input_channels;$/;"	m	struct:KernelShape
n_gemms	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^    const unsigned int n_gemms;$/;"	m	class:winograd::BatchedBlockedGemm
n_in_pad_bottom_fns	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int n_in_pad_bottom_fns = max_in_pad_bottom + 1;$/;"	m	class:depthwise::DepthwiseConvolution
n_in_pad_left_fns	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int n_in_pad_left_fns = (max_in_pad_left - min_in_pad_left) + 1;$/;"	m	class:depthwise::DepthwiseConvolution
n_in_pad_right_fns	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int n_in_pad_right_fns = max_in_pad_right + 1;$/;"	m	class:depthwise::DepthwiseConvolution
n_in_pad_top_fns	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int n_in_pad_top_fns = (max_in_pad_top - min_in_pad_top) + 1;$/;"	m	class:depthwise::DepthwiseConvolution
n_input_channels	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_output_channels, n_rows, n_cols, n_input_channels;$/;"	m	struct:KernelShape
n_input_channels	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int n_input_channels;   \/** Number of channels in each filter. *\/$/;"	m	struct:winograd::WinogradGEMM::WeightsTransform
n_out_pad_bottom_fns	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int n_out_pad_bottom_fns = max_out_pad_bottom + 1;$/;"	m	class:depthwise::DepthwiseConvolution
n_out_pad_right_fns	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int n_out_pad_right_fns = max_out_pad_right + 1;$/;"	m	class:depthwise::DepthwiseConvolution
n_output_channels	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_output_channels, n_rows, n_cols, n_input_channels;$/;"	m	struct:KernelShape
n_output_channels	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        const int n_output_channels;  \/** Number of filters. *\/$/;"	m	struct:winograd::WinogradGEMM::WeightsTransform
n_rows	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_batches, n_rows, n_cols, n_channels;$/;"	m	struct:Tensor4DShape
n_rows	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  int n_output_channels, n_rows, n_cols, n_input_channels;$/;"	m	struct:KernelShape
name	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string name() const$/;"	f	class:arm_compute::Kernel
name	arm_compute/core/CL/CLKernelLibrary.h	/^    std::string name() const$/;"	f	class:arm_compute::Program
name	arm_compute/core/CL/CLTypes.h	/^    std::string name;        \/**< Device name *\/$/;"	m	struct:arm_compute::CLDeviceOptions
name	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::string name() const$/;"	f	class:arm_compute::GCKernel
name	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    std::string name() const$/;"	f	class:arm_compute::GCProgram
name	arm_compute/graph/Types.h	/^    std::string name;   \/**< Node name *\/$/;"	m	struct:arm_compute::graph::NodeParams
name	arm_compute/graph/frontend/ILayer.h	/^    const std::string &name() const$/;"	f	class:arm_compute::graph::frontend::ILayer
name	src/core/utils/logging/Logger.cpp	/^std::string Logger::name() const$/;"	f	class:Logger
name	src/graph/Graph.cpp	/^std::string Graph::name() const$/;"	f	class:arm_compute::graph::Graph
name	src/graph/INode.cpp	/^std::string INode::name() const$/;"	f	class:arm_compute::graph::INode
name	src/graph/mutators/DepthConcatSubTensorMutator.cpp	/^const char *DepthConcatSubTensorMutator::name()$/;"	f	class:arm_compute::graph::DepthConcatSubTensorMutator
name	src/graph/mutators/InPlaceOperationMutator.cpp	/^const char *InPlaceOperationMutator::name()$/;"	f	class:arm_compute::graph::InPlaceOperationMutator
name	src/graph/mutators/NodeFusionMutator.cpp	/^const char *NodeFusionMutator::name()$/;"	f	class:arm_compute::graph::NodeFusionMutator
name	src/graph/mutators/SplitLayerSubTensorMutator.cpp	/^const char *SplitLayerSubTensorMutator::name()$/;"	f	class:arm_compute::graph::SplitLayerSubTensorMutator
name	tests/framework/Framework.h	/^    std::string             name;   \/**< Test name *\/$/;"	m	struct:arm_compute::test::framework::TestInfo
name	tests/framework/TestCaseFactory.h	/^inline std::string TestCaseFactory::name() const$/;"	f	class:arm_compute::test::framework::TestCaseFactory
name	tests/framework/command_line/Option.cpp	/^std::string Option::name() const$/;"	f	class:arm_compute::test::framework::Option
name	tests/framework/datasets/Dataset.h	/^    std::string name() const$/;"	f	class:arm_compute::test::framework::dataset::NamedDataset
name	tests/framework/instruments/MaliCounter.h	/^        std::string name;$/;"	m	struct:arm_compute::test::framework::MaliCounter::core_counters
names_lut	tests/framework/instruments/hwc_names.hpp	/^    const char *const *names_lut;$/;"	m	struct:mali_userspace::CounterMapping
namespacearm__compute	documentation/namespacearm__compute.js	/^var namespacearm__compute =$/;"	v
namespacearm__compute_1_1detail	documentation/namespacearm__compute_1_1detail.js	/^var namespacearm__compute_1_1detail =$/;"	v
namespacearm__compute_1_1gles	documentation/namespacearm__compute_1_1gles.js	/^var namespacearm__compute_1_1gles =$/;"	v
namespacearm__compute_1_1graph	documentation/namespacearm__compute_1_1graph.js	/^var namespacearm__compute_1_1graph =$/;"	v
namespacearm__compute_1_1graph_1_1backends	documentation/namespacearm__compute_1_1graph_1_1backends.js	/^var namespacearm__compute_1_1graph_1_1backends =$/;"	v
namespacearm__compute_1_1graph_1_1backends_1_1detail	documentation/namespacearm__compute_1_1graph_1_1backends_1_1detail.js	/^var namespacearm__compute_1_1graph_1_1backends_1_1detail =$/;"	v
namespacearm__compute_1_1graph_1_1frontend	documentation/namespacearm__compute_1_1graph_1_1frontend.js	/^var namespacearm__compute_1_1graph_1_1frontend =$/;"	v
namespacearm__compute_1_1graph__utils	documentation/namespacearm__compute_1_1graph__utils.js	/^var namespacearm__compute_1_1graph__utils =$/;"	v
namespacearm__compute_1_1io	documentation/namespacearm__compute_1_1io.js	/^var namespacearm__compute_1_1io =$/;"	v
namespacearm__compute_1_1logging	documentation/namespacearm__compute_1_1logging.js	/^var namespacearm__compute_1_1logging =$/;"	v
namespacearm__compute_1_1misc	documentation/namespacearm__compute_1_1misc.js	/^var namespacearm__compute_1_1misc =$/;"	v
namespacearm__compute_1_1strong__type	documentation/namespacearm__compute_1_1strong__type.js	/^var namespacearm__compute_1_1strong__type =$/;"	v
namespacearm__compute_1_1support	documentation/namespacearm__compute_1_1support.js	/^var namespacearm__compute_1_1support =$/;"	v
namespacearm__compute_1_1support_1_1cpp14	documentation/namespacearm__compute_1_1support_1_1cpp14.js	/^var namespacearm__compute_1_1support_1_1cpp14 =$/;"	v
namespacearm__compute_1_1test	documentation/namespacearm__compute_1_1test.js	/^var namespacearm__compute_1_1test =$/;"	v
namespacearm__compute_1_1test_1_1benchmark	documentation/namespacearm__compute_1_1test_1_1benchmark.js	/^var namespacearm__compute_1_1test_1_1benchmark =$/;"	v
namespacearm__compute_1_1test_1_1benchmark_1_1_c_l_suite	documentation/namespacearm__compute_1_1test_1_1benchmark_1_1_c_l_suite.js	/^var namespacearm__compute_1_1test_1_1benchmark_1_1_c_l_suite =$/;"	v
namespacearm__compute_1_1test_1_1convolution__3d	documentation/namespacearm__compute_1_1test_1_1convolution__3d.js	/^var namespacearm__compute_1_1test_1_1convolution__3d =$/;"	v
namespacearm__compute_1_1test_1_1fixed__point__arithmetic	documentation/namespacearm__compute_1_1test_1_1fixed__point__arithmetic.js	/^var namespacearm__compute_1_1test_1_1fixed__point__arithmetic =$/;"	v
namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail	documentation/namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail.js	/^var namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1detail =$/;"	v
namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits	documentation/namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits.js	/^var namespacearm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits =$/;"	v
namespacearm__compute_1_1test_1_1framework	documentation/namespacearm__compute_1_1test_1_1framework.js	/^var namespacearm__compute_1_1test_1_1framework =$/;"	v
namespacearm__compute_1_1test_1_1framework_1_1dataset	documentation/namespacearm__compute_1_1test_1_1framework_1_1dataset.js	/^var namespacearm__compute_1_1test_1_1framework_1_1dataset =$/;"	v
namespacearm__compute_1_1test_1_1framework_1_1detail	documentation/namespacearm__compute_1_1test_1_1framework_1_1detail.js	/^var namespacearm__compute_1_1test_1_1framework_1_1detail =$/;"	v
namespacearm__compute_1_1test_1_1networks	documentation/namespacearm__compute_1_1test_1_1networks.js	/^var namespacearm__compute_1_1test_1_1networks =$/;"	v
namespacearm__compute_1_1test_1_1traits	documentation/namespacearm__compute_1_1test_1_1traits.js	/^var namespacearm__compute_1_1test_1_1traits =$/;"	v
namespacearm__compute_1_1test_1_1validation	documentation/namespacearm__compute_1_1test_1_1validation.js	/^var namespacearm__compute_1_1test_1_1validation =$/;"	v
namespacearm__compute_1_1traits	documentation/namespacearm__compute_1_1traits.js	/^var namespacearm__compute_1_1traits =$/;"	v
namespacearm__compute_1_1tuners	documentation/namespacearm__compute_1_1tuners.js	/^var namespacearm__compute_1_1tuners =$/;"	v
namespacearm__compute_1_1utility	documentation/namespacearm__compute_1_1utility.js	/^var namespacearm__compute_1_1utility =$/;"	v
namespacearm__compute_1_1utils	documentation/namespacearm__compute_1_1utils.js	/^var namespacearm__compute_1_1utils =$/;"	v
namespacearm__compute_1_1utils_1_1iterable	documentation/namespacearm__compute_1_1utils_1_1iterable.js	/^var namespacearm__compute_1_1utils_1_1iterable =$/;"	v
namespacearm__compute_1_1utils_1_1signal	documentation/namespacearm__compute_1_1utils_1_1signal.js	/^var namespacearm__compute_1_1utils_1_1signal =$/;"	v
namespacearm__compute_1_1utils_1_1signal_1_1detail	documentation/namespacearm__compute_1_1utils_1_1signal_1_1detail.js	/^var namespacearm__compute_1_1utils_1_1signal_1_1detail =$/;"	v
namespacearm__compute_1_1wrapper	documentation/namespacearm__compute_1_1wrapper.js	/^var namespacearm__compute_1_1wrapper =$/;"	v
namespacearm__compute_1_1wrapper_1_1traits	documentation/namespacearm__compute_1_1wrapper_1_1traits.js	/^var namespacearm__compute_1_1wrapper_1_1traits =$/;"	v
namespacemembers_dup	documentation/namespacemembers_dup.js	/^var namespacemembers_dup =$/;"	v
namespacemembers_func	documentation/namespacemembers_func.js	/^var namespacemembers_func =$/;"	v
namespacemembers_type	documentation/namespacemembers_type.js	/^var namespacemembers_type =$/;"	v
namespaces	documentation/namespaces.js	/^var namespaces =$/;"	v
nanh	include/half/half.hpp	/^			static half nanh() { return half(binary, 0x7FFF); }$/;"	f	struct:detail::functions
nanh	include/half/half.hpp	/^		inline half nanh(const char*) { return functions::nanh(); }$/;"	f	namespace:detail
navTo	documentation/navtree.js	/^function navTo(o,root,hash,relpath)$/;"	f
nchw_to_nhwc	arm_compute/core/NEON/kernels/convolution/common/shims.hpp	/^inline void nchw_to_nhwc($/;"	f	namespace:reorder
ndarray_len_t	include/libnpy/npy.hpp	/^typedef unsigned long int ndarray_len_t;$/;"	t	namespace:npy
nearbyint	include/half/half.hpp	/^		inline half nearbyint(expr arg) { return functions::rint(arg); }$/;"	f	namespace:detail
nearbyint	include/half/half.hpp	/^		inline half nearbyint(half arg) { return functions::rint(arg); }$/;"	f	namespace:detail
nearest_interpolation	src/core/NEON/kernels/NEWarpKernel.cpp	/^inline uint8_t nearest_interpolation(const uint8_t *in_ptr, int x, int y, size_t stride)$/;"	f	namespace:__anon299
needs_shifting	src/core/GLES_COMPUTE/IGCTensor.cpp	/^bool IGCTensor::needs_shifting() const$/;"	f	class:IGCTensor
negate	include/half/half.hpp	/^			static HALF_CONSTEXPR expr negate(float arg) { return expr(-arg); }$/;"	f	struct:detail::unary_specialized
negate	include/half/half.hpp	/^			static HALF_CONSTEXPR half negate(half arg) { return half(binary, arg.data_^0x8000); }$/;"	f	struct:detail::unary_specialized
negate	tests/validation/FixedPoint.h	/^    static fixed_point<T> negate(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
neon__cartoon__effect_8cpp	documentation/neon__cartoon__effect_8cpp.js	/^var neon__cartoon__effect_8cpp =$/;"	v
neon__cnn_8cpp	documentation/neon__cnn_8cpp.js	/^var neon__cnn_8cpp =$/;"	v
neon__convolution_8cpp	documentation/neon__convolution_8cpp.js	/^var neon__convolution_8cpp =$/;"	v
neon__copy__objects_8cpp	documentation/neon__copy__objects_8cpp.js	/^var neon__copy__objects_8cpp =$/;"	v
neon__scale_8cpp	documentation/neon__scale_8cpp.js	/^var neon__scale_8cpp =$/;"	v
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<float_t, 2>{ using type = float32x2_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<float_t, 4>{ using type = float32x4_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int16_t, 4>{ using type = int16x4_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int16_t, 8>{ using type = int16x8_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int32_t, 2>{ using type = int32x2_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int32_t, 4>{ using type = int32x4_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int64_t, 1>{ using type = int64x1_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int64_t, 2>{ using type = int64x2_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int8_t, 16>{ using type = int8x16_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<int8_t, 8>{ using type = int8x8_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint16_t, 4>{ using type = uint16x4_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint16_t, 8>{ using type = uint16x8_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint32_t, 2>{ using type = uint32x2_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint32_t, 4>{ using type = uint32x4_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint64_t, 1>{ using type = uint64x1_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint64_t, 2>{ using type = uint64x2_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint8_t, 16>{ using type = uint8x16_t; using tag_type = vector_128_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neon_vector	arm_compute/core/NEON/wrapper/traits.h	/^template <> struct neon_vector<uint8_t, 8>{ using type = uint8x8_t; using tag_type = vector_64_tag; };$/;"	s	namespace:arm_compute::wrapper::traits
neoncl__scale__median__gaussian_8cpp	documentation/neoncl__scale__median__gaussian_8cpp.js	/^var neoncl__scale__median__gaussian_8cpp =$/;"	v
net	scripts/caffe_data_extractor.py	/^    net = caffe.Net(args.netFile, 1, weights=args.modelFile)$/;"	v
networks	tests/networks/AlexNetNetwork.h	/^namespace networks$/;"	n	namespace:arm_compute::test
networks	tests/networks/LeNet5Network.h	/^namespace networks$/;"	n	namespace:arm_compute::test
networks	tests/networks/MobileNetNetwork.h	/^namespace networks$/;"	n	namespace:arm_compute::test
networks	tests/networks/MobileNetV1Network.h	/^namespace networks$/;"	n	namespace:arm_compute::test
newNode	documentation/navtree.js	/^function newNode(o, po, text, link, childrenData, lastNode)$/;"	f
newkblock	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        bool newkblock(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
nextafter	include/half/half.hpp	/^			static half nextafter(half from, half to)$/;"	f	struct:detail::functions
nextafter	include/half/half.hpp	/^		inline half nextafter(expr from, expr to) { return functions::nextafter(from, to); }$/;"	f	namespace:detail
nextafter	include/half/half.hpp	/^		inline half nextafter(expr from, half to) { return functions::nextafter(from, to); }$/;"	f	namespace:detail
nextafter	include/half/half.hpp	/^		inline half nextafter(half from, expr to) { return functions::nextafter(from, to); }$/;"	f	namespace:detail
nextafter	include/half/half.hpp	/^		inline half nextafter(half from, half to) { return functions::nextafter(from, to); }$/;"	f	namespace:detail
nexttoward	include/half/half.hpp	/^			static half nexttoward(half from, long double to)$/;"	f	struct:detail::functions
nexttoward	include/half/half.hpp	/^		inline half nexttoward(expr from, long double to) { return functions::nexttoward(from, to); }$/;"	f	namespace:detail
nexttoward	include/half/half.hpp	/^		inline half nexttoward(half from, long double to) { return functions::nexttoward(from, to); }$/;"	f	namespace:detail
nhwc_to_nchw	arm_compute/core/NEON/kernels/convolution/common/shims.hpp	/^inline void nhwc_to_nchw($/;"	f	namespace:reorder
no_endian_char	include/libnpy/npy.hpp	/^const char no_endian_char = '|';$/;"	m	namespace:npy
node	arm_compute/graph/Workload.h	/^    INode                                  *node = {}; \/**< Node bound to this workload *\/$/;"	m	struct:arm_compute::graph::ExecutionTask
node	src/graph/Graph.cpp	/^INode *Graph::node(NodeID id)$/;"	f	class:arm_compute::graph::Graph
node	src/graph/Graph.cpp	/^const INode *Graph::node(NodeID id) const$/;"	f	class:arm_compute::graph::Graph
node.expandToggle.onclick	documentation/navtree.js	/^    node.expandToggle.onclick = function() {$/;"	f
node.getChildrenUL	documentation/navtree.js	/^  node.getChildrenUL = function() {$/;"	f
node_id	arm_compute/graph/Types.h	/^    NodeID node_id; \/**< Node ID *\/$/;"	m	struct:arm_compute::graph::NodeIdxPair
nodes	src/graph/Graph.cpp	/^const std::vector<std::unique_ptr<INode>> &Graph::nodes() const$/;"	f	class:arm_compute::graph::Graph
nodes	src/graph/Graph.cpp	/^std::vector<std::unique_ptr<INode>> &Graph::nodes()$/;"	f	class:arm_compute::graph::Graph
noexcept	arm_compute/runtime/CL/CLMemory.h	/^    CLMemory &operator=(CLMemory &&) noexcept = default;$/;"	m	class:arm_compute::CLMemory
noexcept	arm_compute/runtime/CL/CLMemory.h	/^    CLMemory(CLMemory &&) noexcept = default;$/;"	m	class:arm_compute::CLMemory
noexcept	arm_compute/runtime/Memory.h	/^    Memory &operator=(Memory &&) noexcept = default;$/;"	m	class:arm_compute::Memory
noexcept	arm_compute/runtime/Memory.h	/^    Memory(Memory &&) noexcept = default;$/;"	m	class:arm_compute::Memory
noexcept	arm_compute/runtime/TensorAllocator.h	/^    TensorAllocator &operator=(TensorAllocator &&) noexcept;$/;"	m	class:arm_compute::TensorAllocator
noexcept	arm_compute/runtime/TensorAllocator.h	/^    TensorAllocator(TensorAllocator &&) noexcept;$/;"	m	class:arm_compute::TensorAllocator
non__linear__filter3x3_8cl	documentation/non__linear__filter3x3_8cl.js	/^var non__linear__filter3x3_8cl =$/;"	v
non__linear__filter5x5_8cl	documentation/non__linear__filter5x5_8cl.js	/^var non__linear__filter5x5_8cl =$/;"	v
non__linear__filter__helpers_8h	documentation/non__linear__filter__helpers_8h.js	/^var non__linear__filter__helpers_8h =$/;"	v
non_linear_filter	tests/validation/reference/NonLinearFilter.cpp	/^SimpleTensor<T> non_linear_filter(const SimpleTensor<T> &src, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, const uint8_t *mask, BorderMode border_mode,$/;"	f	namespace:arm_compute::test::validation::reference
non_linear_filter_generic	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::non_linear_filter_generic(const Window &win)$/;"	f	class:arm_compute::NENonLinearFilterKernel
non_max_U32_helper	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint16x4_t non_max_U32_helper(const uint32_t *in, const uint16x4_t pc, const uint32_t stride_mag, const int32_t lower_thr, const int32_t upper_thr)$/;"	f	namespace:fp16
non_max_U32_helper	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint16x4_t non_max_U32_helper(const uint32_t *input, const uint16x4_t pc, const uint32_t stride_mag, const int32_t lower_thr, const int32_t upper_thr)$/;"	f	namespace:__anon249
non_max_suppression_U16_U8_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void non_max_suppression_U16_U8_U8(const void *__restrict magnitude_ptr, const void *__restrict phase_ptr, void *__restrict output_ptr, const uint32_t stride_mag, const int32_t lower_thr,$/;"	f	namespace:__anon249
non_max_suppression_U32_U8_U8	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void non_max_suppression_U32_U8_U8(const void *__restrict magnitude_ptr, const void *__restrict phase_ptr, void *__restrict output_ptr, const uint32_t stride_mag, const int32_t lower_thr,$/;"	f	namespace:__anon249
non_maxima_suppression	tests/validation/reference/NonMaximaSuppression.cpp	/^SimpleTensor<T> non_maxima_suppression(const SimpleTensor<T> &src, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
non_maxima_suppression3x3_F32_F32	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void non_maxima_suppression3x3_F32_F32(const void *__restrict in_ptr, void *__restrict out_ptr, const uint32_t in_stride)$/;"	f	namespace:fp16
non_maxima_suppression3x3_FLOAT_FLOAT	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void non_maxima_suppression3x3_FLOAT_FLOAT(const void *__restrict input_ptr, void *__restrict output_ptr, const uint32_t input_stride)$/;"	f	namespace:__anon283
non_maxima_suppression3x3_U8_U8	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void non_maxima_suppression3x3_U8_U8(const void *__restrict in_ptr, void *__restrict out_ptr, const uint32_t in_stride)$/;"	f	namespace:fp16
non_maxima_suppression3x3_U8_U8	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^inline void non_maxima_suppression3x3_U8_U8(const void *__restrict input_ptr, void *__restrict output_ptr, const uint32_t input_stride)$/;"	f	namespace:__anon283
nonmax_8cl	documentation/nonmax_8cl.js	/^var nonmax_8cl =$/;"	v
norm_size	arm_compute/core/Types.h	/^    uint32_t norm_size() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
normalization__layer_8cl	documentation/normalization__layer_8cl.js	/^var normalization__layer_8cl =$/;"	v
normalization__layer_8cl.xhtml#a7db22b7ddf8f433e02ede3bd9c56d9d9	documentation/navtreeindex46.js	/^"normalization__layer_8cl.xhtml#a7db22b7ddf8f433e02ede3bd9c56d9d9":[6,0,2,0,0,0,58,7],$/;"	p	class:NAVTREEINDEX46
normalization_info	src/graph/nodes/NormalizationLayerNode.cpp	/^NormalizationLayerInfo NormalizationLayerNode::normalization_info() const$/;"	f	class:arm_compute::graph::NormalizationLayerNode
normalization_layer	tests/validation/reference/NormalizationLayer.cpp	/^SimpleTensor<T> normalization_layer(const SimpleTensor<T> &src, NormalizationLayerInfo info)$/;"	f	namespace:arm_compute::test::validation::reference
normalization_type	src/core/HOGInfo.cpp	/^HOGNormType HOGInfo::normalization_type() const$/;"	f	class:HOGInfo
normalize_fixed_point	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^void NENormalizationLayerKernel::normalize_fixed_point(const Window &window)$/;"	f	class:NENormalizationLayerKernel
normalize_float	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^void NENormalizationLayerKernel::normalize_float(const Window &window)$/;"	f	class:NENormalizationLayerKernel
normalize_planar_yuv_layer	tests/validation/reference/NormalizePlanarYUVLayer.cpp	/^SimpleTensor<T> normalize_planar_yuv_layer(const SimpleTensor<T> &src, const SimpleTensor<T> &mean, const SimpleTensor<T> &sd)$/;"	f	namespace:arm_compute::test::validation::reference
npy	include/libnpy/npy.hpp	/^namespace npy {$/;"	n
nr_bins	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    static const uint32_t   nr_bins   = 256;          \/**< Histogram bins of the internal histograms. *\/$/;"	m	class:arm_compute::CLEqualizeHistogram
nullptr	src/core/CL/kernels/CLChannelCombineKernel.cpp	/^    : _planes{ { nullptr } }, _output(nullptr), _output_multi(nullptr), _x_subsampling{ { 1, 1, 1 } }, _y_subsampling{ { 1, 1, 1 } }$/;"	v
nullptr	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^    : _func(nullptr), _planes{ { nullptr } }, _output(nullptr), _output_multi(nullptr), _x_subsampling{ { 1, 1, 1 } }, _y_subsampling{ { 1, 1, 1 } }, _num_elems_processed_per_iteration(8),$/;"	v
num_arguments_per_1D_array	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_1D_array()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_1D_tensor	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_1D_tensor()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_1D_tensor	src/core/GLES_COMPUTE/IGCKernel.cpp	/^unsigned int IGCKernel::num_arguments_per_1D_tensor() const$/;"	f	class:IGCKernel
num_arguments_per_2D_tensor	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_2D_tensor()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_2D_tensor	src/core/GLES_COMPUTE/IGCKernel.cpp	/^unsigned int IGCKernel::num_arguments_per_2D_tensor() const$/;"	f	class:IGCKernel
num_arguments_per_3D_tensor	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_3D_tensor()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_3D_tensor	src/core/GLES_COMPUTE/IGCKernel.cpp	/^unsigned int IGCKernel::num_arguments_per_3D_tensor() const$/;"	f	class:IGCKernel
num_arguments_per_4D_tensor	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_4D_tensor()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_array	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_array()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_tensor	arm_compute/core/CL/ICLKernel.h	/^    constexpr static unsigned int num_arguments_per_tensor()$/;"	f	class:arm_compute::ICLKernel
num_arguments_per_tensor	src/core/GLES_COMPUTE/IGCKernel.cpp	/^unsigned int           IGCKernel::num_arguments_per_tensor() const$/;"	f	class:IGCKernel
num_bins	src/core/HOGInfo.cpp	/^size_t HOGInfo::num_bins() const$/;"	f	class:HOGInfo
num_bins	src/core/IDistribution1D.cpp	/^size_t IDistribution1D::num_bins() const$/;"	f	class:IDistribution1D
num_block_positions_per_image	src/core/HOGInfo.cpp	/^Size2D HOGInfo::num_block_positions_per_image(const Size2D &image_size) const$/;"	f	class:HOGInfo
num_cells_per_block	src/core/HOGInfo.cpp	/^Size2D HOGInfo::num_cells_per_block() const$/;"	f	class:HOGInfo
num_cells_per_block_stride	src/core/HOGInfo.cpp	/^Size2D HOGInfo::num_cells_per_block_stride() const$/;"	f	class:HOGInfo
num_channels	tests/CL/CLAccessor.h	/^inline int CLAccessor::num_channels() const$/;"	f	class:arm_compute::test::CLAccessor
num_channels	tests/GLES_COMPUTE/GCAccessor.h	/^inline int GCAccessor::num_channels() const$/;"	f	class:arm_compute::test::GCAccessor
num_channels	tests/NEON/Accessor.h	/^inline int Accessor::num_channels() const$/;"	f	class:arm_compute::test::Accessor
num_channels	tests/SimpleTensor.h	/^int SimpleTensor<T>::num_channels() const$/;"	f	class:arm_compute::test::SimpleTensor
num_channels_from_format	arm_compute/core/Utils.h	/^inline size_t num_channels_from_format(Format format)$/;"	f	namespace:arm_compute
num_core_groups	tests/framework/instruments/hwc.hpp	/^    uint32_t                     num_core_groups;$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group_info
num_core_groups	tests/framework/instruments/hwc.hpp	/^    uint32_t num_core_groups;$/;"	m	struct:mali_userspace::gpu_props
num_cores	arm_compute/core/CL/CLTypes.h	/^    size_t      num_cores;   \/**< Number of cores *\/$/;"	m	struct:arm_compute::CLDeviceOptions
num_cores	tests/framework/instruments/hwc.hpp	/^    uint16_t num_cores;$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group
num_detection_windows	tests/validation/reference/HOGDetector.cpp	/^Size2D num_detection_windows(const TensorShape &shape, const Size2D &window_step, const HOGInfo &hog_info)$/;"	f	namespace:arm_compute::test::validation::reference::__anon539
num_dimensions	arm_compute/core/Dimensions.h	/^    unsigned int num_dimensions() const$/;"	f	class:arm_compute::Dimensions
num_elements	src/runtime/CL/CLLut.cpp	/^size_t CLLut::num_elements() const$/;"	f	class:CLLut
num_elements	src/runtime/ILutAllocator.cpp	/^size_t ILutAllocator::num_elements() const$/;"	f	class:ILutAllocator
num_elements	src/runtime/Lut.cpp	/^size_t Lut::num_elements() const$/;"	f	class:Lut
num_elements	tests/CL/CLAccessor.h	/^inline int CLAccessor::num_elements() const$/;"	f	class:arm_compute::test::CLAccessor
num_elements	tests/GLES_COMPUTE/GCAccessor.h	/^inline int GCAccessor::num_elements() const$/;"	f	class:arm_compute::test::GCAccessor
num_elements	tests/NEON/Accessor.h	/^inline int Accessor::num_elements() const$/;"	f	class:arm_compute::test::Accessor
num_elements	tests/SimpleTensor.h	/^int SimpleTensor<T>::num_elements() const$/;"	f	class:arm_compute::test::SimpleTensor
num_elems_processed	src/core/NEON/kernels/NETransposeKernel.cpp	/^unsigned int num_elems_processed(size_t element_size)$/;"	f	namespace:__anon298
num_elems_processed_per_iteration	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^constexpr unsigned int num_elems_processed_per_iteration = 16;$/;"	m	namespace:__anon184	file:
num_elems_processed_per_iteration	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^constexpr unsigned int num_elems_processed_per_iteration = 16;$/;"	m	namespace:__anon215	file:
num_elems_processed_per_iteration	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^constexpr unsigned int num_elems_processed_per_iteration = 16;$/;"	m	namespace:__anon241	file:
num_elems_processed_per_iteration	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^constexpr unsigned int num_elems_processed_per_iteration = 16;$/;"	m	namespace:__anon287	file:
num_groups	tests/framework/instruments/hwc.hpp	/^    uint32_t                     num_groups;$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group_info
num_groups	tests/framework/instruments/hwc.hpp	/^    uint32_t num_groups;$/;"	m	struct:mali_userspace::gpu_props
num_inputs	src/graph/INode.cpp	/^size_t INode::num_inputs() const$/;"	f	class:arm_compute::graph::INode
num_iterations	tests/Types.h	/^    size_t      num_iterations;$/;"	m	struct:arm_compute::OpticalFlowParameters
num_iterations	tests/framework/Framework.cpp	/^int Framework::num_iterations() const$/;"	f	class:arm_compute::test::framework::Framework
num_kernels	arm_compute/core/Types.h	/^    unsigned int num_kernels() const$/;"	f	class:arm_compute::HOGNormType::WeightsInfo
num_l2_slices	tests/framework/instruments/hwc.hpp	/^    uint8_t num_l2_slices;$/;"	m	struct:mali_userspace::mali_base_gpu_l2_cache_props
num_levels	src/core/PyramidInfo.cpp	/^size_t PyramidInfo::num_levels() const$/;"	f	class:PyramidInfo
num_max_dimensions	arm_compute/core/Dimensions.h	/^    static constexpr size_t num_max_dimensions = MAX_DIMS;$/;"	m	class:arm_compute::Dimensions
num_mip_levels	include/CL/cl.h	/^    cl_uint                 num_mip_levels;$/;"	m	struct:_cl_image_desc
num_models	src/runtime/CL/CLMultiHOG.cpp	/^size_t CLMultiHOG::num_models() const$/;"	f	class:CLMultiHOG
num_models	src/runtime/MultiHOG.cpp	/^size_t MultiHOG::num_models() const$/;"	f	class:MultiHOG
num_num_elems_processed_per_iteration	src/core/NEON/kernels/NETableLookupKernel.cpp	/^constexpr unsigned int num_num_elems_processed_per_iteration = 16;$/;"	m	namespace:arm_compute	file:
num_outputs	src/graph/INode.cpp	/^size_t INode::num_outputs() const$/;"	f	class:arm_compute::graph::INode
num_planes_from_format	arm_compute/core/Utils.h	/^inline size_t num_planes_from_format(Format format)$/;"	f	namespace:arm_compute
num_pools	src/runtime/PoolManager.cpp	/^size_t PoolManager::num_pools() const$/;"	f	class:PoolManager
num_samples	include/CL/cl.h	/^    cl_uint                 num_samples;$/;"	m	struct:_cl_image_desc
num_splits	src/graph/nodes/SplitLayerNode.cpp	/^unsigned int SplitLayerNode::num_splits() const$/;"	f	class:arm_compute::graph::SplitLayerNode
num_threads	src/runtime/CPP/CPPScheduler.cpp	/^unsigned int CPPScheduler::num_threads() const$/;"	f	class:arm_compute::CPPScheduler
num_threads	src/runtime/CPP/SingleThreadScheduler.cpp	/^unsigned int SingleThreadScheduler::num_threads() const$/;"	f	class:arm_compute::SingleThreadScheduler
num_threads	src/runtime/OMP/OMPScheduler.cpp	/^unsigned int OMPScheduler::num_threads() const$/;"	f	class:OMPScheduler
num_threads_hint	src/runtime/IScheduler.cpp	/^unsigned int IScheduler::num_threads_hint() const$/;"	f	class:arm_compute::IScheduler
num_values	arm_compute/core/IArray.h	/^    size_t num_values() const$/;"	f	class:arm_compute::IArray
o.node.getChildrenUL	documentation/navtree.js	/^  o.node.getChildrenUL = function() { return o.node.childrenUL; };$/;"	f
object_	include/CL/cl.hpp	/^    cl_type object_;$/;"	m	class:cl::detail::Wrapper
object_	include/CL/cl2.hpp	/^    cl_type object_;$/;"	m	class:cl::detail::Wrapper
offset	arm_compute/core/Types.h	/^    int   offset; \/**< offset *\/$/;"	m	struct:arm_compute::QuantizationInfo
offset	src/core/CL/cl_kernels/helpers.h	/^__global inline uchar *offset(const Image *img, int x, int y)$/;"	f
offset	src/core/IDistribution1D.cpp	/^int32_t IDistribution1D::offset() const$/;"	f	class:IDistribution1D
offset	tests/framework/instruments/hwc.hpp	/^    size_t   offset;$/;"	m	struct:mali_userspace::__anon389
offset_	include/CL/cl.hpp	/^    const NDRange offset_;$/;"	m	struct:cl::EnqueueArgs
offset_	include/CL/cl2.hpp	/^    const NDRange offset_;$/;"	m	class:cl::EnqueueArgs
offset_element_in_bytes	src/core/SubTensorInfo.cpp	/^size_t SubTensorInfo::offset_element_in_bytes(const Coordinates &pos) const$/;"	f	class:SubTensorInfo
offset_element_in_bytes	src/core/TensorInfo.cpp	/^size_t TensorInfo::offset_element_in_bytes(const Coordinates &pos) const$/;"	f	class:TensorInfo
offset_first_element_in_bytes	src/core/CL/cl_kernels/helpers.h	/^    int             offset_first_element_in_bytes; \/**< The offset of the first element in the source image *\/$/;"	m	struct:Image
offset_first_element_in_bytes	src/core/CL/cl_kernels/helpers.h	/^    int             offset_first_element_in_bytes; \/**< The offset of the first element in the source image *\/$/;"	m	struct:Tensor3D
offset_first_element_in_bytes	src/core/CL/cl_kernels/helpers.h	/^    int             offset_first_element_in_bytes; \/**< The offset of the first element in the source image *\/$/;"	m	struct:Tensor4D
offset_first_element_in_bytes	src/core/CL/cl_kernels/helpers.h	/^    int             offset_first_element_in_bytes; \/**< The offset of the first element in the source image *\/$/;"	m	struct:Vector
offset_first_element_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint offset_first_element_in_bytes; \/**< The offset of the first element in the image (in bytes) *\/$/;"	m	struct:ImageAttributes
offset_first_element_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint offset_first_element_in_bytes; \/**< The offset of the first element in the tensor (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
offset_first_element_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint offset_first_element_in_bytes; \/**< The offset of the first element in the vector (in bytes) *\/$/;"	m	struct:VectorAttributes
offset_nearest_interpolation	src/core/NEON/kernels/NERemapKernel.cpp	/^inline int32x4_t offset_nearest_interpolation(const float *mapx_ptr, const float *mapy_ptr, const float32x4_t &width, const float32x4_t &height, const int32x4_t &stride)$/;"	f	namespace:__anon291
ofm_ifm_h_w_to_h_w_ifm_ofm	arm_compute/core/NEON/kernels/convolution/common/shims.hpp	/^inline void ofm_ifm_h_w_to_h_w_ifm_ofm($/;"	f	namespace:reorder
open	src/core/utils/io/FileHandler.cpp	/^void FileHandler::open(const std::string &filename, std::ios_base::openmode mode)$/;"	f	class:FileHandler
open	tests/framework/instruments/PMU.cpp	/^void PMU::open(const perf_event_attr &perf_config)$/;"	f	class:arm_compute::test::framework::PMU
open	tests/framework/instruments/PMU.cpp	/^void PMU::open(uint64_t config)$/;"	f	class:arm_compute::test::framework::PMU
open	utils/Utils.h	/^    void open(const std::string &npy_filename)$/;"	f	class:arm_compute::utils::NPYLoader
open	utils/Utils.h	/^    void open(const std::string &ppm_filename)$/;"	f	class:arm_compute::utils::PPMLoader
opencl_is_available	src/core/CL/OpenCL.cpp	/^bool opencl_is_available()$/;"	f	namespace:arm_compute
opengles31_is_available	src/core/GLES_COMPUTE/OpenGLES.cpp	/^bool arm_compute::opengles31_is_available()$/;"	f	class:arm_compute
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    typedef float operand_type;$/;"	t	class:arm_gemm::sgemm_8x6
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    typedef int16_t operand_type;$/;"	t	class:arm_gemm::gemm_s16_12x8
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    typedef int8_t  operand_type;$/;"	t	class:arm_gemm::gemm_s8_12x8
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    typedef int8_t  operand_type;$/;"	t	class:arm_gemm::gemm_s8_4x4
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    typedef uint16_t operand_type;$/;"	t	class:arm_gemm::gemm_u16_12x8
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    typedef uint8_t  operand_type;$/;"	t	class:arm_gemm::gemm_u8_12x8
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    typedef uint8_t  operand_type;$/;"	t	class:arm_gemm::gemm_u8_4x4
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    typedef __fp16 operand_type;$/;"	t	class:arm_gemm::hgemm_24x8
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    typedef float operand_type;$/;"	t	class:arm_gemm::sgemm_12x8
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    typedef float operand_type;$/;"	t	class:arm_gemm::sgemm_native_16x4
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    typedef float operand_type;$/;"	t	class:arm_gemm::sgemv_pretransposed
operand_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    typedef float operand_type;$/;"	t	class:arm_gemm::sgemv_trans
operator !=	arm_compute/core/Dimensions.h	/^inline bool operator!=(const Dimensions<T> &lhs, const Dimensions<T> &rhs)$/;"	f	namespace:arm_compute
operator !=	arm_compute/core/Size2D.h	/^    bool operator!=(const Size2D &other) const$/;"	f	class:arm_compute::Size2D
operator !=	arm_compute/core/Types.h	/^    bool operator!=(const QuantizationInfo &other)$/;"	f	struct:arm_compute::QuantizationInfo
operator !=	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^    bool operator!=(T const &other) const$/;"	f	struct:arm_compute::strong_type::Comparable
operator !=	include/CL/cl.hpp	/^        bool operator!=(iterator i)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator !=	include/CL/cl2.hpp	/^    inline bool operator!=(SVMAllocator const& a)$/;"	f	class:cl::SVMAllocator
operator !=	include/CL/cl2.hpp	/^inline bool operator!=(const Wrapper<T> &lhs, const Wrapper<T> &rhs)$/;"	f	namespace:cl::detail
operator !=	include/half/half.hpp	/^		template<typename T,typename U> typename enable<bool,T,U>::type operator!=(T x, U y) { return functions::isnotequal(x, y); }$/;"	f	namespace:detail
operator !=	tests/validation/FixedPoint.h	/^bool operator!=(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator &	arm_compute/core/Helpers.h	/^typename std::enable_if<enable_bitwise_ops<T>::value, T>::type operator&(T lhs, T rhs)$/;"	f	namespace:arm_compute
operator &	tests/framework/DatasetModes.h	/^inline DatasetMode operator&(DatasetMode t1, DatasetMode t2)$/;"	f	class:arm_compute::test::framework::DatasetMode
operator ()	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    void operator()(ExactType &vval)$/;"	f	struct:arm_compute::detail::brelu
operator ()	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    void operator()(ExactType &vval)$/;"	f	struct:arm_compute::detail::dummy
operator ()	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    void operator()(ExactType &vval)$/;"	f	struct:arm_compute::detail::lubrelu
operator ()	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    void operator()(ExactType &vval)$/;"	f	struct:arm_compute::detail::relu
operator ()	arm_compute/core/Validate.h	/^    ITensorInfo *operator()(const ITensor *tensor)$/;"	f	struct:arm_compute::detail::get_tensor_info_t
operator ()	arm_compute/core/Validate.h	/^    arm_compute::Status operator()(const Dimensions<T> &dim)$/;"	f	class:arm_compute::detail::compare_dimension
operator ()	arm_compute/core/utils/misc/Signal.h	/^    void operator()(Args &&... args)$/;"	f	class:arm_compute::utils::signal::detail::SignalImpl
operator ()	include/CL/cl.hpp	/^	Event operator()($/;"	f	struct:cl::detail::functionImplementation_
operator ()	include/CL/cl.hpp	/^    Event operator() ($/;"	f	class:cl::detail::KernelFunctorGlobal
operator ()	include/CL/cl.hpp	/^    cl_int operator ()($/;"	f	struct:cl::detail::GetInfoFunctor0
operator ()	include/CL/cl.hpp	/^    cl_int operator ()($/;"	f	struct:cl::detail::GetInfoFunctor1
operator ()	include/CL/cl.hpp	/^    cl_type operator ()() const { return object_; }$/;"	f	class:cl::detail::Wrapper
operator ()	include/CL/cl.hpp	/^    cl_type& operator ()() { return object_; }$/;"	f	class:cl::detail::Wrapper
operator ()	include/CL/cl2.hpp	/^        Event operator()($/;"	f	struct:cl::compatibility::make_kernel
operator ()	include/CL/cl2.hpp	/^        void operator()(pointer ptr) const {$/;"	f	class:cl::detail::Deleter
operator ()	include/CL/cl2.hpp	/^    Event operator() ($/;"	f	class:cl::KernelFunctor
operator ()	include/CL/cl2.hpp	/^    cl_int operator ()($/;"	f	struct:cl::detail::GetInfoFunctor0
operator ()	include/CL/cl2.hpp	/^    cl_int operator ()($/;"	f	struct:cl::detail::GetInfoFunctor1
operator ()	include/CL/cl2.hpp	/^    cl_type& operator ()() { return object_; }$/;"	f	class:cl::detail::Wrapper
operator ()	include/CL/cl2.hpp	/^    const cl_type& operator ()() const { return object_; }$/;"	f	class:cl::detail::Wrapper
operator ()	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^    inline void operator()(Iterator &input, Iterator &output, Window &in_slice, Window &out_slice)$/;"	f	struct:__anon290::SumsqOpX
operator ()	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    void operator()(int i, unsigned long u, T func)$/;"	f	class:arm_gemm::profiler
operator ()	src/graph/Workload.cpp	/^void ExecutionTask::operator()()$/;"	f	class:arm_compute::graph::ExecutionTask
operator ()	tests/CL/CLAccessor.h	/^inline const void *CLAccessor::operator()(const Coordinates &coord) const$/;"	f	class:arm_compute::test::CLAccessor
operator ()	tests/CL/CLAccessor.h	/^inline void *CLAccessor::operator()(const Coordinates &coord)$/;"	f	class:arm_compute::test::CLAccessor
operator ()	tests/GLES_COMPUTE/GCAccessor.h	/^inline const void *GCAccessor::operator()(const Coordinates &coord) const$/;"	f	class:arm_compute::test::GCAccessor
operator ()	tests/GLES_COMPUTE/GCAccessor.h	/^inline void *GCAccessor::operator()(const Coordinates &coord)$/;"	f	class:arm_compute::test::GCAccessor
operator ()	tests/NEON/Accessor.h	/^inline const void *Accessor::operator()(const Coordinates &coord) const$/;"	f	class:arm_compute::test::Accessor
operator ()	tests/NEON/Accessor.h	/^inline void *Accessor::operator()(const Coordinates &coord)$/;"	f	class:arm_compute::test::Accessor
operator ()	tests/RawTensor.cpp	/^const void *RawTensor::operator()(const Coordinates &coord) const$/;"	f	class:arm_compute::test::RawTensor
operator ()	tests/RawTensor.cpp	/^void *RawTensor::operator()(const Coordinates &coord)$/;"	f	class:arm_compute::test::RawTensor
operator ()	tests/SimpleTensor.h	/^const void *SimpleTensor<T>::operator()(const Coordinates &coord) const$/;"	f	class:arm_compute::test::SimpleTensor
operator ()	tests/SimpleTensor.h	/^void *SimpleTensor<T>::operator()(const Coordinates &coord)$/;"	f	class:arm_compute::test::SimpleTensor
operator ()	tests/validation/reference/ReductionOperation.cpp	/^    T operator()(const T &lhs, const T &rhs) const$/;"	f	struct:arm_compute::test::validation::reference::__anon546::square
operator *	arm_compute/core/Types.h	/^    BorderSize operator*(float scale)$/;"	f	struct:arm_compute::BorderSize
operator *	include/CL/cl.hpp	/^        const T& operator *() const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator *	include/half/half.hpp	/^		template<typename T,typename U> typename enable<expr,T,U>::type operator*(T x, U y) { return functions::multiplies(x, y); }$/;"	f	namespace:detail
operator *	tests/datasets/BatchNormalizationLayerDataset.h	/^        BatchNormalizationLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
operator *	tests/datasets/ChannelShuffleLayerDataset.h	/^        ChannelShuffleLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::ChannelShuffleLayerDataset::iterator
operator *	tests/datasets/ConvolutionLayerDataset.h	/^        ConvolutionLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
operator *	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        DepthwiseConvolutionLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
operator *	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        DepthwiseSeparableConvolutionLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
operator *	tests/datasets/FullyConnectedLayerDataset.h	/^        FullyConnectedLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
operator *	tests/datasets/GEMMDataset.h	/^        GEMMDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::GEMMDataset::iterator
operator *	tests/datasets/GEMMLowpDataset.h	/^        GEMMLowpDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
operator *	tests/datasets/HOGDescriptorDataset.h	/^        HOGDescriptorDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::HOGDescriptorDataset::iterator
operator *	tests/datasets/HOGMultiDetectionDataset.h	/^        HOGMultiDetectionDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
operator *	tests/datasets/ImageFileDatasets.h	/^        std::tuple<std::string> operator*() const$/;"	f	struct:arm_compute::test::datasets::ImageFileDataset::iterator
operator *	tests/datasets/LSTMLayerDataset.h	/^        LSTMLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
operator *	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^        NormalizePlanarYUVLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset::iterator
operator *	tests/datasets/OpticalFlowDataset.h	/^        OpticalFlowDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
operator *	tests/datasets/PoolingLayerDataset.h	/^        PoolingLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::PoolingLayerDataset::iterator
operator *	tests/datasets/RNNLayerDataset.h	/^        RNNLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
operator *	tests/datasets/ROIPoolingLayerDataset.h	/^        ROIPoolingLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
operator *	tests/datasets/ReshapeLayerDataset.h	/^        ReshapeLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::ReshapeLayerDataset::iterator
operator *	tests/datasets/ScaleLayerDataset.h	/^        ScaleLayerDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
operator *	tests/datasets/ThresholdDataset.h	/^        ThresholdDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::ThresholdDataset::iterator
operator *	tests/datasets/WinogradInputTransformDataset.h	/^        WinogradInputTransformDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::WinogradInputTransformDataset::iterator
operator *	tests/datasets/WinogradOutputTransformDataset.h	/^        WinogradOutputTransformDataset::type operator*() const$/;"	f	struct:arm_compute::test::datasets::WinogradOutputTransformDataset::iterator
operator *	tests/framework/datasets/CartesianProductDataset.h	/^        CartesianProductDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
operator *	tests/framework/datasets/CartesianProductDataset.h	/^operator*(T &&dataset1, U &&dataset2)$/;"	f	namespace:arm_compute::test::framework::dataset
operator *	tests/framework/datasets/ContainerDataset.h	/^        ContainerDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::ContainerDataset::iterator
operator *	tests/framework/datasets/InitializerListDataset.h	/^        InitializerListDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
operator *	tests/framework/datasets/JoinDataset.h	/^        JoinDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
operator *	tests/framework/datasets/RangeDataset.h	/^        RangeDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
operator *	tests/framework/datasets/SingletonDataset.h	/^        SingletonDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::SingletonDataset::iterator
operator *	tests/framework/datasets/ZipDataset.h	/^        ZipDataset::type operator*() const$/;"	f	struct:arm_compute::test::framework::dataset::ZipDataset::iterator
operator *	tests/framework/instruments/Measurement.h	/^        Value operator*(Value b) const$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator *	tests/validation/FixedPoint.h	/^fixed_point<T> operator*(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator *=	arm_compute/core/Types.h	/^    BorderSize &operator*=(float scale)$/;"	f	struct:arm_compute::BorderSize
operator *=	include/half/half.hpp	/^		half& operator*=(float rhs) { data_ = detail::float2half<round_style>(detail::half2float<float>(data_)*rhs); return *this; }$/;"	f	class:half
operator *=	include/half/half.hpp	/^		template<typename T> typename detail::enable<half&,T>::type operator*=(T rhs) { return *this *= static_cast<float>(rhs); }$/;"	f	class:half
operator +	include/half/half.hpp	/^		template<typename T,typename U> typename enable<expr,T,U>::type operator+(T x, U y) { return functions::plus(x, y); }$/;"	f	namespace:detail
operator +	include/half/half.hpp	/^		template<typename T> HALF_CONSTEXPR typename enable<T,T>::type operator+(T arg) { return arg; }$/;"	f	namespace:detail
operator +	tests/framework/instruments/Measurement.h	/^        Value operator+(Value b) const$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator +	tests/validation/FixedPoint.h	/^fixed_point<T> operator+(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator ++	include/CL/cl.hpp	/^        iterator operator++(int)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator ++	include/CL/cl.hpp	/^        iterator& operator++()$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator ++	include/half/half.hpp	/^		half operator++(int) { half out(*this); ++*this; return out; }$/;"	f	class:half
operator ++	include/half/half.hpp	/^		half& operator++() { return *this += 1.0f; }$/;"	f	class:half
operator ++	tests/datasets/BatchNormalizationLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::BatchNormalizationLayerDataset::iterator
operator ++	tests/datasets/ChannelShuffleLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ChannelShuffleLayerDataset::iterator
operator ++	tests/datasets/ConvolutionLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ConvolutionLayerDataset::iterator
operator ++	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset::iterator
operator ++	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset::iterator
operator ++	tests/datasets/FullyConnectedLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::FullyConnectedLayerDataset::iterator
operator ++	tests/datasets/GEMMDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::GEMMDataset::iterator
operator ++	tests/datasets/GEMMLowpDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::GEMMLowpDataset::iterator
operator ++	tests/datasets/HOGDescriptorDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::HOGDescriptorDataset::iterator
operator ++	tests/datasets/HOGMultiDetectionDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::HOGMultiDetectionDataset::iterator
operator ++	tests/datasets/ImageFileDatasets.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ImageFileDataset::iterator
operator ++	tests/datasets/LSTMLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::LSTMLayerDataset::iterator
operator ++	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset::iterator
operator ++	tests/datasets/OpticalFlowDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::OpticalFlowDataset::iterator
operator ++	tests/datasets/PoolingLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::PoolingLayerDataset::iterator
operator ++	tests/datasets/RNNLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::RNNLayerDataset::iterator
operator ++	tests/datasets/ROIPoolingLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ROIPoolingLayerDataset::iterator
operator ++	tests/datasets/ReshapeLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ReshapeLayerDataset::iterator
operator ++	tests/datasets/ScaleLayerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ScaleLayerDataset::iterator
operator ++	tests/datasets/ThresholdDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::ThresholdDataset::iterator
operator ++	tests/datasets/WinogradInputTransformDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::WinogradInputTransformDataset::iterator
operator ++	tests/datasets/WinogradOutputTransformDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::datasets::WinogradOutputTransformDataset::iterator
operator ++	tests/framework/datasets/CartesianProductDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::CartesianProductDataset::iterator
operator ++	tests/framework/datasets/ContainerDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::ContainerDataset::iterator
operator ++	tests/framework/datasets/InitializerListDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
operator ++	tests/framework/datasets/JoinDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::JoinDataset::iterator
operator ++	tests/framework/datasets/RangeDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::final::iterator
operator ++	tests/framework/datasets/SingletonDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::SingletonDataset::iterator
operator ++	tests/framework/datasets/ZipDataset.h	/^        iterator &operator++()$/;"	f	struct:arm_compute::test::framework::dataset::ZipDataset::iterator
operator +=	include/half/half.hpp	/^		half& operator+=(float rhs) { data_ = detail::float2half<round_style>(detail::half2float<float>(data_)+rhs); return *this; }$/;"	f	class:half
operator +=	include/half/half.hpp	/^		template<typename T> typename detail::enable<half&,T>::type operator+=(T rhs) { return *this += static_cast<float>(rhs); }$/;"	f	class:half
operator +=	tests/validation/FixedPoint.h	/^    fixed_point<T> &operator+=(const fixed_point<U> &rhs)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
operator -	include/half/half.hpp	/^		template<typename T,typename U> typename enable<expr,T,U>::type operator-(T x, U y) { return functions::minus(x, y); }$/;"	f	namespace:detail
operator -	include/half/half.hpp	/^		template<typename T> HALF_CONSTEXPR typename enable<T,T>::type operator-(T arg) { return unary_specialized<T>::negate(arg); }$/;"	f	namespace:detail
operator -	tests/framework/instruments/Measurement.h	/^        Value operator-(Value b) const$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator -	tests/validation/FixedPoint.h	/^fixed_point<T> operator-(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator -	tests/validation/FixedPoint.h	/^fixed_point<T> operator-(const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator --	include/CL/cl.hpp	/^        iterator operator--(int)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator --	include/CL/cl.hpp	/^        iterator& operator--()$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator --	include/half/half.hpp	/^		half operator--(int) { half out(*this); --*this; return out; }$/;"	f	class:half
operator --	include/half/half.hpp	/^		half& operator--() { return *this -= 1.0f; }$/;"	f	class:half
operator -=	include/half/half.hpp	/^		half& operator-=(float rhs) { data_ = detail::float2half<round_style>(detail::half2float<float>(data_)-rhs); return *this; }$/;"	f	class:half
operator -=	include/half/half.hpp	/^		template<typename T> typename detail::enable<half&,T>::type operator-=(T rhs) { return *this -= static_cast<float>(rhs); }$/;"	f	class:half
operator -=	tests/framework/instruments/Measurement.h	/^        Value &operator-=(const Value &b)$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator -=	tests/validation/FixedPoint.h	/^    fixed_point<T> &operator-=(const fixed_point<U> &rhs)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
operator /	include/half/half.hpp	/^		template<typename T,typename U> typename enable<expr,T,U>::type operator\/(T x, U y) { return functions::divides(x, y); }$/;"	f	namespace:detail
operator /	tests/framework/instruments/Measurement.h	/^        Value operator\/(int b) const$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator /	tests/validation/FixedPoint.h	/^fixed_point<T> operator\/(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator /=	include/half/half.hpp	/^		half& operator\/=(float rhs) { data_ = detail::float2half<round_style>(detail::half2float<float>(data_)\/rhs); return *this; }$/;"	f	class:half
operator /=	include/half/half.hpp	/^		template<typename T> typename detail::enable<half&,T>::type operator\/=(T rhs) { return *this \/= static_cast<float>(rhs); }$/;"	f	class:half
operator <	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^    bool operator<(T const &other) const$/;"	f	struct:arm_compute::strong_type::Comparable
operator <	include/half/half.hpp	/^		template<typename T,typename U> typename enable<bool,T,U>::type operator<(T x, U y) { return functions::isless(x, y); }$/;"	f	namespace:detail
operator <	tests/framework/Framework.h	/^inline bool operator<(const TestInfo &lhs, const TestInfo &rhs)$/;"	f	namespace:arm_compute::test::framework
operator <	tests/framework/instruments/Measurement.h	/^        bool operator<(const Value &b) const$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator <	tests/framework/instruments/Measurement.h	/^    bool operator<(const Measurement &b) const$/;"	f	struct:arm_compute::test::framework::Measurement
operator <	tests/validation/FixedPoint.h	/^bool operator<(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ActivationLayerInfo::ActivationFunction &act_function)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ConvolutionMethod &method)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const DataLayout &data_layout)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const DataType &data_type)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const DepthwiseConvolutionMethod &method)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const EltwiseOperation &eltwise_op)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const FastMathHint &hint)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const NormType &norm_type)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const PadStrideInfo &pad_stride_info)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const PoolingType &pool_type)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const QuantizationInfo &quantization_info)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Size2D &size)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Target &target)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const arm_compute::Dimensions<T> &dimensions)$/;"	f	namespace:arm_compute::graph
operator <<	arm_compute/graph/frontend/IStreamOperators.h	/^inline IStream &operator<<(IStream &s, ConvolutionMethod convolution_method_hint)$/;"	f	namespace:arm_compute::graph::frontend
operator <<	arm_compute/graph/frontend/IStreamOperators.h	/^inline IStream &operator<<(IStream &s, DepthwiseConvolutionMethod depthwise_convolution_method_hint)$/;"	f	namespace:arm_compute::graph::frontend
operator <<	arm_compute/graph/frontend/IStreamOperators.h	/^inline IStream &operator<<(IStream &s, FastMathHint fast_math_hint)$/;"	f	namespace:arm_compute::graph::frontend
operator <<	arm_compute/graph/frontend/IStreamOperators.h	/^inline IStream &operator<<(IStream &s, ILayer &&layer)$/;"	f	namespace:arm_compute::graph::frontend
operator <<	arm_compute/graph/frontend/IStreamOperators.h	/^inline IStream &operator<<(IStream &s, ILayer &layer)$/;"	f	namespace:arm_compute::graph::frontend
operator <<	arm_compute/graph/frontend/IStreamOperators.h	/^inline IStream &operator<<(IStream &s, Target target_hint)$/;"	f	namespace:arm_compute::graph::frontend
operator <<	include/half/half.hpp	/^			operator<<(std::basic_ostream<charT,traits> &out, T arg) { return functions::write(out, arg); }$/;"	f	namespace:detail
operator <<	tests/framework/DatasetModes.h	/^inline ::std::ostream &operator<<(::std::ostream &stream, DatasetMode mode)$/;"	f	class:arm_compute::test::framework::DatasetMode
operator <<	tests/framework/Exceptions.cpp	/^::std::ostream &operator<<(::std::ostream &stream, LogLevel level)$/;"	f	namespace:arm_compute::test::framework
operator <<	tests/framework/TestCaseFactory.h	/^inline ::std::ostream &operator<<(::std::ostream &stream, TestCaseFactory::Status status)$/;"	f	namespace:arm_compute::test::framework
operator <<	tests/framework/instruments/Instruments.h	/^inline ::std::stringstream &operator<<(::std::stringstream &stream, InstrumentsDescription instrument)$/;"	f	namespace:arm_compute::test::framework
operator <<	tests/framework/instruments/Measurement.h	/^        friend std::ostream &operator<<(std::ostream &os, const Value &value)$/;"	f	struct:arm_compute::test::framework::Measurement::Value
operator <<	tests/framework/instruments/Measurement.h	/^    friend inline std::ostream &operator<<(std::ostream &os, const Measurement &measurement)$/;"	f	struct:arm_compute::test::framework::Measurement
operator <<	tests/framework/printers/Printers.h	/^inline ::std::stringstream &operator<<(::std::stringstream &stream, LogFormat format)$/;"	f	namespace:arm_compute::test::framework
operator <<	tests/validation/FixedPoint.h	/^fixed_point<T> operator<<(fixed_point<T> x, size_t shift)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator <<	tests/validation/FixedPoint.h	/^std::basic_ostream<T, traits> &operator<<(std::basic_ostream<T, traits> &s, fixed_point<U> x)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator <<	tests/validation/Validation.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const AbsoluteTolerance<T> &tolerance)$/;"	f	namespace:arm_compute::test::validation
operator <<	tests/validation/Validation.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const RelativeTolerance<T> &tolerance)$/;"	f	namespace:arm_compute::test::validation
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ActivationLayerInfo::ActivationFunction &act_function)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const BorderMode &mode)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const BorderSize &border)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Channel &channel)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ConvertPolicy &policy)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ConvolutionMethod &conv_method)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const DataLayout &data_layout)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const DataType &data_type)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const DetectionWindow &detection_window)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Dimensions<T> &dimensions)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const FixedPointOp &op)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Format &format)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const GPUTarget &gpu_target)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const GradientDimension &dim)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const HOGInfo &hog_info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const HOGNormType &norm_type)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const InterpolationPolicy &policy)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const KeyPoint &point)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const MagnitudeType &magnitude_type)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const MatrixPattern &pattern)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const NonLinearFilterFunction &function)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const NormType &norm_type)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const NormalizationLayerInfo &info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const PadStrideInfo &pad_stride_info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const PhaseType &phase_type)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const PoolingLayerInfo &info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const PoolingType &pool_type)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const QuantizationInfo &quantization_info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ROIPoolingLayerInfo &pool_info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Rectangle &rect)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const ReductionOperation &op)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const RoundingPolicy &rounding_policy)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const SamplingPolicy &policy)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Size2D &size)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const Termination &termination)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const WeightsInfo &weights_info)$/;"	f	namespace:arm_compute
operator <<	utils/TypePrinter.h	/^inline ::std::ostream &operator<<(::std::ostream &os, const WinogradInfo &info)$/;"	f	namespace:arm_compute
operator <=	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^    bool operator<=(T const &other) const$/;"	f	struct:arm_compute::strong_type::Comparable
operator <=	include/half/half.hpp	/^		template<typename T,typename U> typename enable<bool,T,U>::type operator<=(T x, U y) { return functions::islessequal(x, y); }$/;"	f	namespace:detail
operator <=	tests/validation/FixedPoint.h	/^bool operator<=(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator =	include/CL/cl.hpp	/^    Buffer& operator = (const Buffer& rhs)$/;"	f	class:cl::Buffer
operator =	include/CL/cl.hpp	/^    Buffer& operator = (const cl_mem& rhs)$/;"	f	class:cl::Buffer
operator =	include/CL/cl.hpp	/^    BufferD3D10& operator = (const BufferD3D10& rhs)$/;"	f	class:cl::BufferD3D10
operator =	include/CL/cl.hpp	/^    BufferD3D10& operator = (const cl_mem& rhs)$/;"	f	class:cl::BufferD3D10
operator =	include/CL/cl.hpp	/^    BufferGL& operator = (const BufferGL& rhs)$/;"	f	class:cl::BufferGL
operator =	include/CL/cl.hpp	/^    BufferGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::BufferGL
operator =	include/CL/cl.hpp	/^    BufferRenderGL& operator = (const BufferRenderGL& rhs)$/;"	f	class:cl::BufferRenderGL
operator =	include/CL/cl.hpp	/^    BufferRenderGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::BufferRenderGL
operator =	include/CL/cl.hpp	/^    CommandQueue& operator = (const CommandQueue& rhs)$/;"	f	class:cl::CommandQueue
operator =	include/CL/cl.hpp	/^    CommandQueue& operator = (const cl_command_queue& rhs)$/;"	f	class:cl::CommandQueue
operator =	include/CL/cl.hpp	/^    Context& operator = (const Context& rhs)$/;"	f	class:cl::Context
operator =	include/CL/cl.hpp	/^    Context& operator = (const cl_context& rhs)$/;"	f	class:cl::Context
operator =	include/CL/cl.hpp	/^    Device& operator = (const Device& rhs)$/;"	f	class:cl::Device
operator =	include/CL/cl.hpp	/^    Device& operator = (const cl_device_id& rhs)$/;"	f	class:cl::Device
operator =	include/CL/cl.hpp	/^    Event& operator = (const Event& rhs)$/;"	f	class:cl::Event
operator =	include/CL/cl.hpp	/^    Event& operator = (const cl_event& rhs)$/;"	f	class:cl::Event
operator =	include/CL/cl.hpp	/^    Image& operator = (const Image& rhs)$/;"	f	class:cl::Image
operator =	include/CL/cl.hpp	/^    Image& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image
operator =	include/CL/cl.hpp	/^    Image1D& operator = (const Image1D& rhs)$/;"	f	class:cl::Image1D
operator =	include/CL/cl.hpp	/^    Image1D& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image1D
operator =	include/CL/cl.hpp	/^    Image1DArray& operator = (const Image1DArray& rhs)$/;"	f	class:cl::Image1DArray
operator =	include/CL/cl.hpp	/^    Image1DArray& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image1DArray
operator =	include/CL/cl.hpp	/^    Image1DBuffer& operator = (const Image1DBuffer& rhs)$/;"	f	class:cl::Image1DBuffer
operator =	include/CL/cl.hpp	/^    Image1DBuffer& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image1DBuffer
operator =	include/CL/cl.hpp	/^    Image2D& operator = (const Image2D& rhs)$/;"	f	class:cl::Image2D
operator =	include/CL/cl.hpp	/^    Image2D& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image2D
operator =	include/CL/cl.hpp	/^    Image2DArray& operator = (const Image2DArray& rhs)$/;"	f	class:cl::Image2DArray
operator =	include/CL/cl.hpp	/^    Image2DArray& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image2DArray
operator =	include/CL/cl.hpp	/^    Image2DGL& operator = (const Image2DGL& rhs)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator =	include/CL/cl.hpp	/^    Image2DGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator =	include/CL/cl.hpp	/^    Image3D& operator = (const Image3D& rhs)$/;"	f	class:cl::Image3D
operator =	include/CL/cl.hpp	/^    Image3D& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image3D
operator =	include/CL/cl.hpp	/^    Image3DGL& operator = (const Image3DGL& rhs)$/;"	f	class:cl::Image3DGL
operator =	include/CL/cl.hpp	/^    Image3DGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image3DGL
operator =	include/CL/cl.hpp	/^    ImageFormat& operator = (const ImageFormat& rhs)$/;"	f	struct:cl::ImageFormat
operator =	include/CL/cl.hpp	/^    ImageGL& operator = (const ImageGL& rhs)$/;"	f	class:cl::ImageGL
operator =	include/CL/cl.hpp	/^    ImageGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::ImageGL
operator =	include/CL/cl.hpp	/^    Kernel& operator = (const Kernel& rhs)$/;"	f	class:cl::Kernel
operator =	include/CL/cl.hpp	/^    Kernel& operator = (const cl_kernel& rhs)$/;"	f	class:cl::Kernel
operator =	include/CL/cl.hpp	/^    Memory& operator = (const Memory& rhs)$/;"	f	class:cl::Memory
operator =	include/CL/cl.hpp	/^    Memory& operator = (const cl_mem& rhs)$/;"	f	class:cl::Memory
operator =	include/CL/cl.hpp	/^    Platform& operator = (const Platform& rhs)$/;"	f	class:cl::Platform
operator =	include/CL/cl.hpp	/^    Platform& operator = (const cl_platform_id& rhs)$/;"	f	class:cl::Platform
operator =	include/CL/cl.hpp	/^    Program& operator = (const Program& rhs)$/;"	f	class:cl::Program
operator =	include/CL/cl.hpp	/^    Program& operator = (const cl_program& rhs)$/;"	f	class:cl::Program
operator =	include/CL/cl.hpp	/^    Sampler& operator = (const Sampler& rhs)$/;"	f	class:cl::Sampler
operator =	include/CL/cl.hpp	/^    Sampler& operator = (const cl_sampler& rhs)$/;"	f	class:cl::Sampler
operator =	include/CL/cl.hpp	/^    UserEvent& operator = (const UserEvent& rhs)$/;"	f	class:cl::UserEvent
operator =	include/CL/cl.hpp	/^    Wrapper<cl_type>& operator = (const Wrapper<cl_type>& rhs)$/;"	f	class:cl::detail::Wrapper
operator =	include/CL/cl.hpp	/^    Wrapper<cl_type>& operator = (const cl_type &rhs)$/;"	f	class:cl::detail::Wrapper
operator =	include/CL/cl.hpp	/^    vector<T, N>& operator=(const vector<T, N>& rhs)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator =	include/CL/cl2.hpp	/^    Buffer& operator = (Buffer &&buf)$/;"	f	class:cl::Buffer
operator =	include/CL/cl2.hpp	/^    Buffer& operator = (const Buffer &buf)$/;"	f	class:cl::Buffer
operator =	include/CL/cl2.hpp	/^    Buffer& operator = (const cl_mem& rhs)$/;"	f	class:cl::Buffer
operator =	include/CL/cl2.hpp	/^    BufferD3D10& operator = (BufferD3D10 &&buf)$/;"	f	class:cl::BufferD3D10
operator =	include/CL/cl2.hpp	/^    BufferD3D10& operator = (const BufferD3D10 &buf)$/;"	f	class:cl::BufferD3D10
operator =	include/CL/cl2.hpp	/^    BufferD3D10& operator = (const cl_mem& rhs)$/;"	f	class:cl::BufferD3D10
operator =	include/CL/cl2.hpp	/^    BufferGL& operator = (BufferGL &&buf)$/;"	f	class:cl::BufferGL
operator =	include/CL/cl2.hpp	/^    BufferGL& operator = (const BufferGL &buf)$/;"	f	class:cl::BufferGL
operator =	include/CL/cl2.hpp	/^    BufferGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::BufferGL
operator =	include/CL/cl2.hpp	/^    BufferRenderGL& operator = (BufferRenderGL &&buf)$/;"	f	class:cl::BufferRenderGL
operator =	include/CL/cl2.hpp	/^    BufferRenderGL& operator = (const BufferRenderGL &buf)$/;"	f	class:cl::BufferRenderGL
operator =	include/CL/cl2.hpp	/^    BufferRenderGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::BufferRenderGL
operator =	include/CL/cl2.hpp	/^    CommandQueue& operator = (CommandQueue &&queue)$/;"	f	class:cl::CommandQueue
operator =	include/CL/cl2.hpp	/^    CommandQueue& operator = (const CommandQueue &queue)$/;"	f	class:cl::CommandQueue
operator =	include/CL/cl2.hpp	/^    CommandQueue& operator = (const cl_command_queue& rhs)$/;"	f	class:cl::CommandQueue
operator =	include/CL/cl2.hpp	/^    Context& operator = (Context &&ctx)$/;"	f	class:cl::Context
operator =	include/CL/cl2.hpp	/^    Context& operator = (const Context &ctx)$/;"	f	class:cl::Context
operator =	include/CL/cl2.hpp	/^    Context& operator = (const cl_context& rhs)$/;"	f	class:cl::Context
operator =	include/CL/cl2.hpp	/^    Device& operator = (Device &&dev)$/;"	f	class:cl::Device
operator =	include/CL/cl2.hpp	/^    Device& operator = (const Device &dev)$/;"	f	class:cl::Device
operator =	include/CL/cl2.hpp	/^    Device& operator = (const cl_device_id& rhs)$/;"	f	class:cl::Device
operator =	include/CL/cl2.hpp	/^    DeviceCommandQueue& operator = (DeviceCommandQueue &&queue)$/;"	f	class:cl::DeviceCommandQueue
operator =	include/CL/cl2.hpp	/^    DeviceCommandQueue& operator = (const DeviceCommandQueue &queue)$/;"	f	class:cl::DeviceCommandQueue
operator =	include/CL/cl2.hpp	/^    DeviceCommandQueue& operator = (const cl_command_queue& rhs)$/;"	f	class:cl::DeviceCommandQueue
operator =	include/CL/cl2.hpp	/^    Event& operator = (const cl_event& rhs)$/;"	f	class:cl::Event
operator =	include/CL/cl2.hpp	/^    Image& operator = (Image &&img)$/;"	f	class:cl::Image
operator =	include/CL/cl2.hpp	/^    Image& operator = (const Image &img)$/;"	f	class:cl::Image
operator =	include/CL/cl2.hpp	/^    Image& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image
operator =	include/CL/cl2.hpp	/^    Image1D& operator = (Image1D &&img)$/;"	f	class:cl::Image1D
operator =	include/CL/cl2.hpp	/^    Image1D& operator = (const Image1D &img)$/;"	f	class:cl::Image1D
operator =	include/CL/cl2.hpp	/^    Image1D& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image1D
operator =	include/CL/cl2.hpp	/^    Image1DArray& operator = (Image1DArray &&img)$/;"	f	class:cl::Image1DArray
operator =	include/CL/cl2.hpp	/^    Image1DArray& operator = (const Image1DArray &img)$/;"	f	class:cl::Image1DArray
operator =	include/CL/cl2.hpp	/^    Image1DArray& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image1DArray
operator =	include/CL/cl2.hpp	/^    Image1DBuffer& operator = (Image1DBuffer &&img)$/;"	f	class:cl::Image1DBuffer
operator =	include/CL/cl2.hpp	/^    Image1DBuffer& operator = (const Image1DBuffer &img)$/;"	f	class:cl::Image1DBuffer
operator =	include/CL/cl2.hpp	/^    Image1DBuffer& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image1DBuffer
operator =	include/CL/cl2.hpp	/^    Image2D& operator = (Image2D &&img)$/;"	f	class:cl::Image2D
operator =	include/CL/cl2.hpp	/^    Image2D& operator = (const Image2D &img)$/;"	f	class:cl::Image2D
operator =	include/CL/cl2.hpp	/^    Image2D& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image2D
operator =	include/CL/cl2.hpp	/^    Image2DArray& operator = (Image2DArray &&img)$/;"	f	class:cl::Image2DArray
operator =	include/CL/cl2.hpp	/^    Image2DArray& operator = (const Image2DArray &img)$/;"	f	class:cl::Image2DArray
operator =	include/CL/cl2.hpp	/^    Image2DArray& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image2DArray
operator =	include/CL/cl2.hpp	/^    Image2DGL& operator = (Image2DGL &&img)$/;"	f	class:cl::Image2DGL
operator =	include/CL/cl2.hpp	/^    Image2DGL& operator = (const Image2DGL &img)$/;"	f	class:cl::Image2DGL
operator =	include/CL/cl2.hpp	/^    Image2DGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image2DGL
operator =	include/CL/cl2.hpp	/^    Image3D& operator = (Image3D &&img)$/;"	f	class:cl::Image3D
operator =	include/CL/cl2.hpp	/^    Image3D& operator = (const Image3D &img)$/;"	f	class:cl::Image3D
operator =	include/CL/cl2.hpp	/^    Image3D& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image3D
operator =	include/CL/cl2.hpp	/^    Image3DGL& operator = (Image3DGL &&img)$/;"	f	class:cl::Image3DGL
operator =	include/CL/cl2.hpp	/^    Image3DGL& operator = (const Image3DGL &img)$/;"	f	class:cl::Image3DGL
operator =	include/CL/cl2.hpp	/^    Image3DGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::Image3DGL
operator =	include/CL/cl2.hpp	/^    ImageFormat& operator = (const ImageFormat& rhs)$/;"	f	struct:cl::ImageFormat
operator =	include/CL/cl2.hpp	/^    ImageGL& operator = (ImageGL &&img)$/;"	f	class:cl::ImageGL
operator =	include/CL/cl2.hpp	/^    ImageGL& operator = (const ImageGL &img)$/;"	f	class:cl::ImageGL
operator =	include/CL/cl2.hpp	/^    ImageGL& operator = (const cl_mem& rhs)$/;"	f	class:cl::ImageGL
operator =	include/CL/cl2.hpp	/^    Kernel& operator = (Kernel &&kernel)$/;"	f	class:cl::Kernel
operator =	include/CL/cl2.hpp	/^    Kernel& operator = (const Kernel &kernel)$/;"	f	class:cl::Kernel
operator =	include/CL/cl2.hpp	/^    Kernel& operator = (const cl_kernel& rhs)$/;"	f	class:cl::Kernel
operator =	include/CL/cl2.hpp	/^    Memory& operator = (Memory &&mem)$/;"	f	class:cl::Memory
operator =	include/CL/cl2.hpp	/^    Memory& operator = (const Memory &mem)$/;"	f	class:cl::Memory
operator =	include/CL/cl2.hpp	/^    Memory& operator = (const cl_mem& rhs)$/;"	f	class:cl::Memory
operator =	include/CL/cl2.hpp	/^    Pipe& operator = (Pipe &&pipe)$/;"	f	class:cl::Pipe
operator =	include/CL/cl2.hpp	/^    Pipe& operator = (const Pipe &pipe)$/;"	f	class:cl::Pipe
operator =	include/CL/cl2.hpp	/^    Pipe& operator = (const cl_mem& rhs)$/;"	f	class:cl::Pipe
operator =	include/CL/cl2.hpp	/^    Platform& operator = (const cl_platform_id& rhs)$/;"	f	class:cl::Platform
operator =	include/CL/cl2.hpp	/^    Program& operator = (Program &&program)$/;"	f	class:cl::Program
operator =	include/CL/cl2.hpp	/^    Program& operator = (const Program &program)$/;"	f	class:cl::Program
operator =	include/CL/cl2.hpp	/^    Program& operator = (const cl_program& rhs)$/;"	f	class:cl::Program
operator =	include/CL/cl2.hpp	/^    Sampler& operator = (Sampler &&sam)$/;"	f	class:cl::Sampler
operator =	include/CL/cl2.hpp	/^    Sampler& operator = (const Sampler &sam)$/;"	f	class:cl::Sampler
operator =	include/CL/cl2.hpp	/^    Sampler& operator = (const cl_sampler& rhs)$/;"	f	class:cl::Sampler
operator =	include/CL/cl2.hpp	/^    Wrapper<cl_type>& operator = (Wrapper<cl_type>&& rhs)$/;"	f	class:cl::detail::Wrapper
operator =	include/CL/cl2.hpp	/^    Wrapper<cl_type>& operator = (const Wrapper<cl_type>& rhs)$/;"	f	class:cl::detail::Wrapper
operator =	include/CL/cl2.hpp	/^    Wrapper<cl_type>& operator = (const cl_type &rhs)$/;"	f	class:cl::detail::Wrapper
operator =	include/half/half.hpp	/^		half& operator=(detail::expr rhs) { return *this = static_cast<float>(rhs); }$/;"	f	class:half
operator =	include/half/half.hpp	/^		half& operator=(float rhs) { data_ = detail::float2half<round_style>(rhs); return *this; }$/;"	f	class:half
operator =	tests/RawTensor.cpp	/^RawTensor &RawTensor::operator=(RawTensor tensor)$/;"	f	class:arm_compute::test::RawTensor
operator =	tests/SimpleTensor.h	/^SimpleTensor<T> &SimpleTensor<T>::operator=(SimpleTensor tensor)$/;"	f	class:arm_compute::test::SimpleTensor
operator ==	arm_compute/core/Dimensions.h	/^inline bool operator==(const Dimensions<T> &lhs, const Dimensions<T> &rhs)$/;"	f	namespace:arm_compute
operator ==	arm_compute/core/Size2D.h	/^    bool operator==(const Size2D &other) const$/;"	f	class:arm_compute::Size2D
operator ==	arm_compute/core/Types.h	/^    bool operator==(const QuantizationInfo &other)$/;"	f	struct:arm_compute::QuantizationInfo
operator ==	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^    bool operator==(T const &other) const$/;"	f	struct:arm_compute::strong_type::Comparable
operator ==	include/CL/cl.hpp	/^        bool operator==(iterator i)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
operator ==	include/CL/cl.hpp	/^    bool operator==(vector<T,N> &vec)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator ==	include/CL/cl2.hpp	/^    inline bool operator==(SVMAllocator const& rhs)$/;"	f	class:cl::SVMAllocator
operator ==	include/CL/cl2.hpp	/^inline bool operator==(const Wrapper<T> &lhs, const Wrapper<T> &rhs)$/;"	f	namespace:cl::detail
operator ==	include/half/half.hpp	/^		template<typename T,typename U> typename enable<bool,T,U>::type operator==(T x, U y) { return functions::isequal(x, y); }$/;"	f	namespace:detail
operator ==	tests/validation/FixedPoint.h	/^bool operator==(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator >	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^    bool operator>(T const &other) const$/;"	f	struct:arm_compute::strong_type::Comparable
operator >	include/half/half.hpp	/^		template<typename T,typename U> typename enable<bool,T,U>::type operator>(T x, U y) { return functions::isgreater(x, y); }$/;"	f	namespace:detail
operator >	tests/validation/FixedPoint.h	/^bool operator>(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator >=	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^    bool operator>=(T const &other) const$/;"	f	struct:arm_compute::strong_type::Comparable
operator >=	include/half/half.hpp	/^		template<typename T,typename U> typename enable<bool,T,U>::type operator>=(T x, U y) { return functions::isgreaterequal(x, y); }$/;"	f	namespace:detail
operator >=	tests/validation/FixedPoint.h	/^bool operator>=(const fixed_point<T> &lhs, const fixed_point<T> &rhs)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator >>	include/half/half.hpp	/^			operator>>(std::basic_istream<charT,traits> &in, half &arg) { return functions::read(in, arg); }$/;"	f	namespace:detail
operator >>	tests/TypeReader.h	/^inline ::std::istream &operator>>(::std::istream &is, BorderMode &mode)$/;"	f	namespace:arm_compute
operator >>	tests/framework/DatasetModes.h	/^inline ::std::istream &operator>>(::std::istream &stream, DatasetMode &mode)$/;"	f	class:arm_compute::test::framework::DatasetMode
operator >>	tests/framework/Exceptions.cpp	/^::std::istream &operator>>(::std::istream &stream, LogLevel &level)$/;"	f	namespace:arm_compute::test::framework
operator >>	tests/framework/instruments/Instruments.h	/^inline ::std::stringstream &operator>>(::std::stringstream &stream, InstrumentsDescription &instrument)$/;"	f	namespace:arm_compute::test::framework
operator >>	tests/framework/printers/Printers.h	/^inline ::std::stringstream &operator>>(::std::stringstream &stream, LogFormat &format)$/;"	f	namespace:arm_compute::test::framework
operator >>	tests/validation/FixedPoint.h	/^fixed_point<T> operator>>(fixed_point<T> x, size_t shift)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
operator SimpleTensor<T>	tests/RawTensor.h	/^    operator SimpleTensor<T>()$/;"	f	class:arm_compute::test::RawTensor
operator T	tests/validation/Validation.h	/^    constexpr operator T() const$/;"	f	class:arm_compute::test::validation::AbsoluteTolerance
operator T*	include/CL/cl.hpp	/^    operator T* ()             { return data_; }$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator U	tests/validation/FixedPoint.h	/^    operator U() const$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
operator []	arm_compute/core/Dimensions.h	/^    T &operator[](size_t dimension)$/;"	f	class:arm_compute::Dimensions
operator []	arm_compute/core/Dimensions.h	/^    const T &operator[](size_t dimension) const$/;"	f	class:arm_compute::Dimensions
operator []	include/CL/cl.hpp	/^    ::size_t& operator[](int index)$/;"	f	class:cl::size_t
operator []	include/CL/cl.hpp	/^    T& operator[](int index)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator []	include/CL/cl.hpp	/^    const ::size_t& operator[](int index) const$/;"	f	class:cl::size_t
operator []	include/CL/cl.hpp	/^    const T& operator[](int index) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator []	include/CL/cl2.hpp	/^            const size_type& operator[](int index) const$/;"	f	class:cl::compatibility::size_t
operator []	include/CL/cl2.hpp	/^            size_type& operator[](int index)$/;"	f	class:cl::compatibility::size_t
operator []	tests/SimpleTensor.h	/^T &SimpleTensor<T>::operator[](size_t offset)$/;"	f	class:arm_compute::test::SimpleTensor
operator []	tests/SimpleTensor.h	/^const T &SimpleTensor<T>::operator[](size_t offset) const$/;"	f	class:arm_compute::test::SimpleTensor
operator array<size_type, N>	include/CL/cl2.hpp	/^            operator array<size_type, N>() const$/;"	f	class:cl::compatibility::size_t
operator bool	tests/validation/Validation.h	/^    operator bool() const$/;"	f	struct:arm_compute::test::validation::compare
operator cl::Kernel	arm_compute/core/CL/CLKernelLibrary.h	/^    explicit operator cl::Kernel() const$/;"	f	class:arm_compute::Kernel
operator cl::Program	src/core/CL/CLKernelLibrary.cpp	/^Program::operator cl::Program() const$/;"	f	class:Program
operator const ::size_t*	include/CL/cl.hpp	/^    operator const ::size_t* () const { return data_; }$/;"	f	class:cl::size_t
operator const ::size_t*	include/CL/cl.hpp	/^    operator const ::size_t*() const { $/;"	f	class:cl::NDRange
operator const T*	include/CL/cl.hpp	/^    operator const T* () const { return data_; }$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
operator const size_t *	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    operator const size_t *() const$/;"	f	class:arm_compute::gles::NDRange
operator const size_type*	include/CL/cl2.hpp	/^            operator const size_type* () const { return data_; }$/;"	f	class:cl::compatibility::size_t
operator const size_type*	include/CL/cl2.hpp	/^    operator const size_type*() const { $/;"	f	class:cl::NDRange
operator fixed_point<U>	tests/validation/FixedPoint.h	/^    operator fixed_point<U>()$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
operator float	include/half/half.hpp	/^		operator float() const { return detail::half2float<float>(data_); }$/;"	f	class:half
operator float	tests/validation/FixedPoint.h	/^    operator float() const$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
operator size_type*	include/CL/cl2.hpp	/^            operator size_type* ()             { return data_; }$/;"	f	class:cl::compatibility::size_t
operator value_type	tests/validation/Validation.h	/^    constexpr operator value_type() const$/;"	f	class:arm_compute::test::validation::RelativeTolerance
operator |	include/CL/cl2.hpp	/^inline DeviceQueueProperties operator|(DeviceQueueProperties lhs, DeviceQueueProperties rhs)$/;"	f	namespace:cl
operator |	include/CL/cl2.hpp	/^inline QueueProperties operator|(QueueProperties lhs, QueueProperties rhs)$/;"	f	namespace:cl
operator |	tests/framework/DatasetModes.h	/^inline DatasetMode operator|(DatasetMode t1, DatasetMode t2)$/;"	f	class:arm_compute::test::framework::DatasetMode
operator |=	tests/framework/DatasetModes.h	/^inline DatasetMode &operator|=(DatasetMode &t1, DatasetMode t2)$/;"	f	class:arm_compute::test::framework::DatasetMode
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_3x3_fp32.cpp	/^int Transform::ops_performed(const Tensor4DShape &input_shape)$/;"	f	class:winograd::Transform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_5x5_fp32.cpp	/^int Transform::ops_performed(const Tensor4DShape &input_shape)$/;"	f	class:winograd::Transform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/input_4x4_3x3_fp32.cpp	/^int Transform::ops_performed(const Tensor4DShape &input_shape)$/;"	f	class:winograd::Transform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_3x3_fp32.cpp	/^int Transform::ops_performed(const Tensor4DShape &shape)$/;"	f	class:winograd::Transform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_5x5_fp32.cpp	/^int Transform::ops_performed(const Tensor4DShape &shape)$/;"	f	class:winograd::Transform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/output_4x4_3x3_fp32.cpp	/^int Transform::ops_performed(const Tensor4DShape &shape)$/;"	f	class:winograd::Transform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_3x3_fp32.cpp	/^  int WinogradGEMM<2, 2, 3, 3>::WeightsTransform<float>::ops_performed(const KernelShape &shape)$/;"	f	class:winograd::WinogradGEMM::WeightsTransform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_5x5_fp32.cpp	/^  int WinogradGEMM<2, 2, 5, 5>::WeightsTransform<float>::ops_performed(const KernelShape &shape)$/;"	f	class:winograd::WinogradGEMM::WeightsTransform
ops_performed	src/core/NEON/kernels/convolution/winograd/transforms/weights_4x4_3x3_fp32.cpp	/^  int WinogradGEMM<4, 4, 3, 3>::WeightsTransform<float>::ops_performed(const KernelShape &shape)$/;"	f	class:winograd::WinogradGEMM::WeightsTransform
optical__flow__pyramid__lk_8cl	documentation/optical__flow__pyramid__lk_8cl.js	/^var optical__flow__pyramid__lk_8cl =$/;"	v
optical_flow	tests/validation/reference/OpticalFlow.cpp	/^std::vector<KeyPoint> optical_flow(const SimpleTensor<T> &old_input, const SimpleTensor<T> &new_input,$/;"	f	namespace:arm_compute::test::validation::reference
options	src/core/CL/CLKernelLibrary.cpp	/^const CLBuildOptions::StringSet &CLBuildOptions::options() const$/;"	f	class:CLBuildOptions
options_add_matrix	src/core/CL/kernels/CLWarpAffineKernel.cpp	/^void options_add_matrix(std::set<std::string> &options, const float *matrix, size_t size)$/;"	f	namespace:__anon221
options_add_matrix	src/core/CL/kernels/CLWarpPerspectiveKernel.cpp	/^inline void options_add_matrix(std::set<std::string> &options, const float *matrix, size_t size)$/;"	f	namespace:__anon222
ordering	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  TensorOrder ordering;$/;"	m	struct:Tensor4DShape
ordering	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  WeightOrder ordering;$/;"	m	struct:KernelShape
orientation	src/core/CL/cl_kernels/types.h	/^    float orientation;     \/**< Initialized to 0 by corner detectors. *\/$/;"	m	struct:Keypoint
origin	include/CL/cl.h	/^    size_t                  origin;$/;"	m	struct:_cl_buffer_region
other	include/CL/cl2.hpp	/^        typedef SVMAllocator<U, SVMTrait> other;$/;"	t	struct:cl::SVMAllocator::rebind
out_height	src/core/NEON/kernels/arm_gemm/gemm_fp16.cpp	/^const int hgemm_24x8::out_height;$/;"	m	class:arm_gemm::hgemm_24x8	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^const int sgemm_12x8::out_height;$/;"	m	class:arm_gemm::sgemm_12x8	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^const int sgemm_8x6::out_height;$/;"	m	class:arm_gemm::sgemm_8x6	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^const int sgemm_native_16x4::out_height;$/;"	m	class:arm_gemm::sgemm_native_16x4	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_int16.cpp	/^const int gemm_s16_12x8::out_height;$/;"	m	class:arm_gemm::gemm_s16_12x8	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_int8.cpp	/^const int gemm_s8_12x8::out_height;$/;"	m	class:arm_gemm::gemm_s8_12x8	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_int8.cpp	/^const int gemm_s8_4x4::out_height;$/;"	m	class:arm_gemm::gemm_s8_4x4	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_uint16.cpp	/^const int gemm_u16_12x8::out_height;$/;"	m	class:arm_gemm::gemm_u16_12x8	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp	/^const int gemm_u8_12x8::out_height;$/;"	m	class:arm_gemm::gemm_u8_12x8	file:
out_height	src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp	/^const int gemm_u8_4x4::out_height;$/;"	m	class:arm_gemm::gemm_u8_4x4	file:
out_height	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int out_height = 6;$/;"	m	class:arm_gemm::sgemm_8x6
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int out_height = 8;$/;"	m	class:arm_gemm::gemm_s16_12x8
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int out_height = 8;$/;"	m	class:arm_gemm::gemm_s8_12x8
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int out_height = 4;$/;"	m	class:arm_gemm::gemm_s8_4x4
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int out_height = 8;$/;"	m	class:arm_gemm::gemm_u16_12x8
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int out_height = 8;$/;"	m	class:arm_gemm::gemm_u8_12x8
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int out_height = 4;$/;"	m	class:arm_gemm::gemm_u8_4x4
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int out_height = 8;$/;"	m	class:arm_gemm::hgemm_24x8
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int out_height = 8;$/;"	m	class:arm_gemm::sgemm_12x8
out_height	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    static const int out_height = 4;$/;"	m	class:arm_gemm::sgemm_native_16x4
out_width	src/core/NEON/kernels/arm_gemm/gemm_fp16.cpp	/^const int hgemm_24x8::out_width;$/;"	m	class:arm_gemm::hgemm_24x8	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^const int sgemm_12x8::out_width;$/;"	m	class:arm_gemm::sgemm_12x8	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^const int sgemm_8x6::out_width;$/;"	m	class:arm_gemm::sgemm_8x6	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_fp32.cpp	/^const int sgemm_native_16x4::out_width;$/;"	m	class:arm_gemm::sgemm_native_16x4	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_int16.cpp	/^const int gemm_s16_12x8::out_width;$/;"	m	class:arm_gemm::gemm_s16_12x8	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_int8.cpp	/^const int gemm_s8_12x8::out_width;$/;"	m	class:arm_gemm::gemm_s8_12x8	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_int8.cpp	/^const int gemm_s8_4x4::out_width;$/;"	m	class:arm_gemm::gemm_s8_4x4	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_uint16.cpp	/^const int gemm_u16_12x8::out_width;$/;"	m	class:arm_gemm::gemm_u16_12x8	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp	/^const int gemm_u8_12x8::out_width;$/;"	m	class:arm_gemm::gemm_u8_12x8	file:
out_width	src/core/NEON/kernels/arm_gemm/gemm_uint8.cpp	/^const int gemm_u8_4x4::out_width;$/;"	m	class:arm_gemm::gemm_u8_4x4	file:
out_width	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    static const int out_width  = 8;$/;"	m	class:arm_gemm::sgemm_8x6
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    static const int out_width  = 12;$/;"	m	class:arm_gemm::gemm_s16_12x8
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    static const int out_width  = 12;$/;"	m	class:arm_gemm::gemm_s8_12x8
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    static const int out_width  = 4;$/;"	m	class:arm_gemm::gemm_s8_4x4
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    static const int out_width  = 12;$/;"	m	class:arm_gemm::gemm_u16_12x8
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    static const int out_width  = 12;$/;"	m	class:arm_gemm::gemm_u8_12x8
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    static const int out_width  = 4;$/;"	m	class:arm_gemm::gemm_u8_4x4
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    static const int out_width  = 24;$/;"	m	class:arm_gemm::hgemm_24x8
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    static const int out_width  = 12;$/;"	m	class:arm_gemm::sgemm_12x8
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    static const int out_width  = 16;$/;"	m	class:arm_gemm::sgemm_native_16x4
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    static const int out_width = 32;$/;"	m	class:arm_gemm::sgemv_pretransposed
out_width	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    static const int out_width = 96;$/;"	m	class:arm_gemm::sgemv_trans
outname	scripts/caffe_data_extractor.py	/^                outname = name + "_b"$/;"	v
outname	scripts/caffe_data_extractor.py	/^                outname = name + "_w"$/;"	v
outptr	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        T* const outptr;              \/** Fixed pointer to output memory. *\/$/;"	m	struct:winograd::WinogradGEMM::WeightsTransform
output	src/graph/INode.cpp	/^Tensor *INode::output(size_t idx) const$/;"	f	class:arm_compute::graph::INode
output_edges	src/graph/INode.cpp	/^const std::set<EdgeID> &INode::output_edges() const$/;"	f	class:arm_compute::graph::INode
output_handles	src/graph/detail/CrossLayerMemoryManagerHelpers.cpp	/^    std::vector<std::pair<ITensorHandle *, IMemoryGroup *>> output_handles = {}; \/**< Output handles of a task *\/$/;"	m	struct:arm_compute::graph::detail::__anon309::TaskHandles	file:
output_id	src/graph/INode.cpp	/^TensorID INode::output_id(size_t idx) const$/;"	f	class:arm_compute::graph::INode
output_stage	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^void output_stage(ITensor *input, const ITensor *bias, const Window &window, ITensor *output,$/;"	f	namespace:__anon257
output_stage	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^void output_stage<int32_t, uint8_t, false, false>(ITensor *input, const ITensor *bias, const Window &window, ITensor *output,$/;"	f	namespace:__anon257
output_stage	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^void output_stage<int32_t, uint8_t, false, true>(ITensor *input, const ITensor *bias, const Window &window, ITensor *output,$/;"	f	namespace:__anon257
output_stage_nhwc	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^void output_stage_nhwc(ITensor *input, const ITensor *bias, const Window &window, ITensor *output,$/;"	f	namespace:__anon257
output_tile_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int output_tile_cols = OutputTileCols;$/;"	m	class:depthwise::DepthwiseConvolution
output_tile_cols	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int output_tile_cols = OutputTileCols;$/;"	m	class:winograd::WinogradGEMM
output_tile_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int output_tile_rows = OutputTileRows;$/;"	m	class:depthwise::DepthwiseConvolution
output_tile_rows	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^    static constexpr int output_tile_rows = OutputTileRows;$/;"	m	class:winograd::WinogradGEMM
outputs	arm_compute/graph/Workload.h	/^    std::vector<Tensor *>      outputs = {};          \/**< Output handles *\/$/;"	m	struct:arm_compute::graph::ExecutionWorkload
outputs	src/graph/INode.cpp	/^const std::vector<TensorID> &INode::outputs() const$/;"	f	class:arm_compute::graph::INode
overflow	arm_compute/core/IArray.h	/^    bool overflow() const$/;"	f	class:arm_compute::IArray
override	arm_compute/core/AccessWindowAutoPadding.h	/^    ValidRegion compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const override;$/;"	m	class:arm_compute::AccessWindowAutoPadding
override	arm_compute/core/AccessWindowAutoPadding.h	/^    bool update_padding_if_needed(const Window &window) override;$/;"	m	class:arm_compute::AccessWindowAutoPadding
override	arm_compute/core/AccessWindowAutoPadding.h	/^    bool update_window_if_needed(Window &window) const override;$/;"	m	class:arm_compute::AccessWindowAutoPadding
override	arm_compute/core/AccessWindowStatic.h	/^    ValidRegion compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const override;$/;"	m	class:arm_compute::AccessWindowStatic
override	arm_compute/core/AccessWindowStatic.h	/^    bool update_padding_if_needed(const Window &window) override;$/;"	m	class:arm_compute::AccessWindowStatic
override	arm_compute/core/AccessWindowStatic.h	/^    bool update_window_if_needed(Window &window) const override;$/;"	m	class:arm_compute::AccessWindowStatic
override	arm_compute/core/AccessWindowTranspose.h	/^    ValidRegion compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const override;$/;"	m	class:arm_compute::AccessWindowTranspose
override	arm_compute/core/AccessWindowTranspose.h	/^    bool update_padding_if_needed(const Window &window) override;$/;"	m	class:arm_compute::AccessWindowTranspose
override	arm_compute/core/AccessWindowTranspose.h	/^    bool update_window_if_needed(Window &window) const override;$/;"	m	class:arm_compute::AccessWindowTranspose
override	arm_compute/core/CL/ICLDistribution1D.h	/^    uint32_t *buffer() const override;$/;"	m	class:arm_compute::ICLDistribution1D
override	arm_compute/core/CL/ICLHOG.h	/^    float *descriptor() const override;$/;"	m	class:arm_compute::ICLHOG
override	arm_compute/core/CL/ICLLut.h	/^    uint8_t *buffer() const override;$/;"	m	class:arm_compute::ICLLut
override	arm_compute/core/CL/ICLMultiHOG.h	/^    IHOG *model(size_t index) override;$/;"	m	class:arm_compute::ICLMultiHOG
override	arm_compute/core/CL/ICLMultiHOG.h	/^    const IHOG *model(size_t index) const override;$/;"	m	class:arm_compute::ICLMultiHOG
override	arm_compute/core/CL/ICLMultiImage.h	/^    IImage *plane(unsigned int index) override;$/;"	m	class:arm_compute::ICLMultiImage
override	arm_compute/core/CL/ICLMultiImage.h	/^    const IImage *plane(unsigned int index) const override;$/;"	m	class:arm_compute::ICLMultiImage
override	arm_compute/core/CL/ICLSimple2DKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::ICLSimple2DKernel
override	arm_compute/core/CL/ICLSimple3DKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::ICLSimple3DKernel
override	arm_compute/core/CL/ICLTensor.h	/^    uint8_t *buffer() const override;$/;"	m	class:arm_compute::ICLTensor
override	arm_compute/core/CL/kernels/CLAbsoluteDifferenceKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLAbsoluteDifferenceKernel
override	arm_compute/core/CL/kernels/CLActivationLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLActivationLayerKernel
override	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLArithmeticAdditionKernel
override	arm_compute/core/CL/kernels/CLArithmeticAdditionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLArithmeticAdditionKernel
override	arm_compute/core/CL/kernels/CLArithmeticSubtractionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLArithmeticSubtractionKernel
override	arm_compute/core/CL/kernels/CLBatchNormalizationLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLBatchNormalizationLayerKernel
override	arm_compute/core/CL/kernels/CLBitwiseAndKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLBitwiseAndKernel
override	arm_compute/core/CL/kernels/CLBitwiseOrKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLBitwiseOrKernel
override	arm_compute/core/CL/kernels/CLBitwiseXorKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLBitwiseXorKernel
override	arm_compute/core/CL/kernels/CLBox3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLBox3x3Kernel
override	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLEdgeNonMaxSuppressionKernel
override	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLEdgeNonMaxSuppressionKernel
override	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLEdgeTraceKernel
override	arm_compute/core/CL/kernels/CLCannyEdgeKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGradientKernel
override	arm_compute/core/CL/kernels/CLChannelCombineKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLChannelCombineKernel
override	arm_compute/core/CL/kernels/CLChannelExtractKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLChannelExtractKernel
override	arm_compute/core/CL/kernels/CLChannelShuffleLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLChannelShuffleLayerKernel
override	arm_compute/core/CL/kernels/CLCol2ImKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLCol2ImKernel
override	arm_compute/core/CL/kernels/CLColorConvertKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLColorConvertKernel
override	arm_compute/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLConvertFullyConnectedWeightsKernel
override	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLConvolutionKernel
override	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLConvolutionRectangleKernel
override	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSeparableConvolutionHorKernel
override	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSeparableConvolutionVertKernel
override	arm_compute/core/CL/kernels/CLConvolutionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLConvolutionRectangleKernel
override	arm_compute/core/CL/kernels/CLCopyKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLCopyKernel
override	arm_compute/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsampleKernel
override	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
override	arm_compute/core/CL/kernels/CLDepthConcatenateLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDepthConcatenateLayerKernel
override	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^                   ActivationLayerInfo act_info) override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NCHWKernel
override	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NCHWKernel
override	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NCHWKernel
override	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	/^                   ActivationLayerInfo act_info) override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NHWCKernel
override	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NHWCKernel
override	arm_compute/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3NHWCKernel
override	arm_compute/core/CL/kernels/CLDepthwiseIm2ColKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDepthwiseIm2ColKernel
override	arm_compute/core/CL/kernels/CLDepthwiseVectorToTensorKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDepthwiseVectorToTensorKernel
override	arm_compute/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDepthwiseWeightsReshapeKernel
override	arm_compute/core/CL/kernels/CLDequantizationLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDequantizationLayerKernel
override	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLDerivativeKernel
override	arm_compute/core/CL/kernels/CLDerivativeKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDerivativeKernel
override	arm_compute/core/CL/kernels/CLDilateKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLDilateKernel
override	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
override	arm_compute/core/CL/kernels/CLDirectConvolutionLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDirectConvolutionLayerKernel
override	arm_compute/core/CL/kernels/CLDirectConvolutionLayerOutputStageKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLDirectConvolutionLayerOutputStageKernel
override	arm_compute/core/CL/kernels/CLErodeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLErodeKernel
override	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLFastCornersKernel
override	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLCopyToArrayKernel
override	arm_compute/core/CL/kernels/CLFastCornersKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLFastCornersKernel
override	arm_compute/core/CL/kernels/CLFillBorderKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::CLFillBorderKernel
override	arm_compute/core/CL/kernels/CLFillBorderKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLFillBorderKernel
override	arm_compute/core/CL/kernels/CLFloorKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLFloorKernel
override	arm_compute/core/CL/kernels/CLGEMMInterleave4x4Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMInterleave4x4Kernel
override	arm_compute/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMLowpOffsetContributionKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^    void configure(const ICLTensor *mtx_a, ICLTensor *vector_sum_row) override;$/;"	m	class:arm_compute::CLGEMMLowpMatrixAReductionKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^    void configure(const ICLTensor *mtx_b, ICLTensor *vector_sum_col) override;$/;"	m	class:arm_compute::CLGEMMLowpMatrixBReductionKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMLowpMatrixAReductionKernel
override	arm_compute/core/CL/kernels/CLGEMMLowpReductionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMLowpMatrixBReductionKernel
override	arm_compute/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMMatrixAccumulateBiasesKernel
override	arm_compute/core/CL/kernels/CLGEMMMatrixAdditionKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMMatrixAdditionKernel
override	arm_compute/core/CL/kernels/CLGEMMMatrixMultiplyKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMMatrixMultiplyKernel
override	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
override	arm_compute/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMMatrixVectorMultiplyKernel
override	arm_compute/core/CL/kernels/CLGEMMTranspose1xWKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGEMMTranspose1xWKernel
override	arm_compute/core/CL/kernels/CLGaussian3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLGaussian3x3Kernel
override	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLGaussianPyramidHorKernel
override	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLGaussianPyramidVertKernel
override	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGaussianPyramidHorKernel
override	arm_compute/core/CL/kernels/CLGaussianPyramidKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLGaussianPyramidVertKernel
override	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLHOGBlockNormalizationKernel
override	arm_compute/core/CL/kernels/CLHOGDescriptorKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLHOGOrientationBinningKernel
override	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLHarrisScoreKernel
override	arm_compute/core/CL/kernels/CLHarrisCornersKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLHarrisScoreKernel
override	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLHistogramBorderKernel
override	arm_compute/core/CL/kernels/CLHistogramKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLHistogramKernel
override	arm_compute/core/CL/kernels/CLIm2ColKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLIm2ColKernel
override	arm_compute/core/CL/kernels/CLIntegralImageKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLIntegralImageVertKernel
override	arm_compute/core/CL/kernels/CLL2NormalizeLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLL2NormalizeLayerKernel
override	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLKTrackerFinalizeKernel
override	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLKTrackerInitKernel
override	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLKTrackerStage0Kernel
override	arm_compute/core/CL/kernels/CLLKTrackerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLKTrackerStage1Kernel
override	arm_compute/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLocallyConnectedMatrixMultiplyKernel
override	arm_compute/core/CL/kernels/CLMagnitudePhaseKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLMagnitudePhaseKernel
override	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLMeanStdDevKernel
override	arm_compute/core/CL/kernels/CLMeanStdDevKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLMeanStdDevKernel
override	arm_compute/core/CL/kernels/CLMedian3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLMedian3x3Kernel
override	arm_compute/core/CL/kernels/CLMinMaxLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLMinMaxLayerKernel
override	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLMinMaxKernel
override	arm_compute/core/CL/kernels/CLMinMaxLocationKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLMinMaxLocationKernel
override	arm_compute/core/CL/kernels/CLNonLinearFilterKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLNonLinearFilterKernel
override	arm_compute/core/CL/kernels/CLNonMaximaSuppression3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLNonMaximaSuppression3x3Kernel
override	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLNormalizationLayerKernel
override	arm_compute/core/CL/kernels/CLNormalizationLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLNormalizationLayerKernel
override	arm_compute/core/CL/kernels/CLPermuteKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLPermuteKernel
override	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLPixelWiseMultiplicationKernel
override	arm_compute/core/CL/kernels/CLPixelWiseMultiplicationKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLPixelWiseMultiplicationKernel
override	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLPoolingLayerKernel
override	arm_compute/core/CL/kernels/CLPoolingLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLPoolingLayerKernel
override	arm_compute/core/CL/kernels/CLQuantizationLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLQuantizationLayerKernel
override	arm_compute/core/CL/kernels/CLROIPoolingLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLROIPoolingLayerKernel
override	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLReductionOperationKernel
override	arm_compute/core/CL/kernels/CLReductionOperationKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLReductionOperationKernel
override	arm_compute/core/CL/kernels/CLRemapKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLRemapKernel
override	arm_compute/core/CL/kernels/CLRemapKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLRemapKernel
override	arm_compute/core/CL/kernels/CLReshapeLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLReshapeLayerKernel
override	arm_compute/core/CL/kernels/CLScaleKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLScaleKernel
override	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLScharr3x3Kernel
override	arm_compute/core/CL/kernels/CLScharr3x3Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLScharr3x3Kernel
override	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSobel3x3Kernel
override	arm_compute/core/CL/kernels/CLSobel3x3Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLSobel3x3Kernel
override	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSobel5x5HorKernel
override	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSobel5x5VertKernel
override	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLSobel5x5HorKernel
override	arm_compute/core/CL/kernels/CLSobel5x5Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLSobel5x5VertKernel
override	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSobel7x7HorKernel
override	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLSobel7x7VertKernel
override	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLSobel7x7HorKernel
override	arm_compute/core/CL/kernels/CLSobel7x7Kernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLSobel7x7VertKernel
override	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLogits1DMaxShiftExpSumKernel
override	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLogits1DNormKernel
override	arm_compute/core/CL/kernels/CLSoftmaxLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLLogits1DShiftExpSumKernel
override	arm_compute/core/CL/kernels/CLWarpAffineKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLWarpAffineKernel
override	arm_compute/core/CL/kernels/CLWarpPerspectiveKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLWarpPerspectiveKernel
override	arm_compute/core/CL/kernels/CLWeightsReshapeKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLWeightsReshapeKernel
override	arm_compute/core/CL/kernels/CLWidthConcatenateLayerKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLWidthConcatenateLayerKernel
override	arm_compute/core/CL/kernels/CLWinogradFilterTransformKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLWinogradFilterTransformKernel
override	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
override	arm_compute/core/CL/kernels/CLWinogradInputTransformKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLWinogradInputTransformKernel
override	arm_compute/core/CL/kernels/CLWinogradOutputTransformKernel.h	/^    void run(const Window &window, cl::CommandQueue &queue) override;$/;"	m	class:arm_compute::CLWinogradOutputTransformKernel
override	arm_compute/core/CPP/kernels/CPPCornerCandidatesKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::CPPCornerCandidatesKernel
override	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::CPPDetectionWindowNonMaximaSuppressionKernel
override	arm_compute/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::CPPDetectionWindowNonMaximaSuppressionKernel
override	arm_compute/core/CPP/kernels/CPPPermuteKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::CPPPermuteKernel
override	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::CPPSortEuclideanDistanceKernel
override	arm_compute/core/CPP/kernels/CPPSortEuclideanDistanceKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::CPPSortEuclideanDistanceKernel
override	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::CPPUpsampleKernel
override	arm_compute/core/CPP/kernels/CPPUpsampleKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::CPPUpsampleKernel
override	arm_compute/core/GLES_COMPUTE/IGCSimple2DKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::IGCSimple2DKernel
override	arm_compute/core/GLES_COMPUTE/IGCSimple3DKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::IGCSimple3DKernel
override	arm_compute/core/GLES_COMPUTE/IGCTensor.h	/^    uint8_t *buffer() const override;$/;"	m	class:arm_compute::IGCTensor
override	arm_compute/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCAbsoluteDifferenceKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCActivationLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCArithmeticAdditionKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCBatchNormalizationLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCCol2ImKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCCol2ImKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCDepthConcatenateLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCDepthwiseConvolutionLayer3x3Kernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCDirectConvolutionLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCDropoutLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCFillBorderKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::GCFillBorderKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCFillBorderKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCFillBorderKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCGEMMInterleave4x4Kernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCGEMMMatrixAccumulateBiasesKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCGEMMMatrixAdditionKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCGEMMMatrixMultiplyKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCGEMMTranspose1xWKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCGEMMTranspose1xWKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCIm2ColKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCIm2ColKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::GCNormalizationLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCNormalizationLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCPixelWiseMultiplicationKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::GCPoolingLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCPoolingLayerKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCScaleKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::GCScaleKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCScaleKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCScaleKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCLogits1DNormKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCLogits1DShiftExpSumKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCTensorShiftKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCTransposeKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCTransposeKernel
override	arm_compute/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.h	/^    void run(const Window &window) override;$/;"	m	class:arm_compute::GCWeightsReshapeKernel
override	arm_compute/core/IAccessWindow.h	/^    ValidRegion compute_valid_region(const Window &window, ValidRegion input_valid_region, bool border_undefined, BorderSize border_size) const override;$/;"	m	class:arm_compute::AccessWindowRectangle
override	arm_compute/core/IAccessWindow.h	/^    bool update_padding_if_needed(const Window &window) override;$/;"	m	class:arm_compute::AccessWindowRectangle
override	arm_compute/core/IAccessWindow.h	/^    bool update_window_if_needed(Window &window) const override;$/;"	m	class:arm_compute::AccessWindowRectangle
override	arm_compute/core/IDistribution1D.h	/^    size_t dimensions() const override;$/;"	m	class:arm_compute::IDistribution1D
override	arm_compute/core/IDistribution1D.h	/^    size_t size() const override;$/;"	m	class:arm_compute::IDistribution1D
override	arm_compute/core/NEON/kernels/NEAbsoluteDifferenceKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEAbsoluteDifferenceKernel
override	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEAccumulateKernel
override	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEAccumulateSquaredKernel
override	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEAccumulateWeightedFP16Kernel
override	arm_compute/core/NEON/kernels/NEAccumulateKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEAccumulateWeightedKernel
override	arm_compute/core/NEON/kernels/NEActivationLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEActivationLayerKernel
override	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEArithmeticAdditionKernel
override	arm_compute/core/NEON/kernels/NEArithmeticAdditionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEArithmeticAdditionKernel
override	arm_compute/core/NEON/kernels/NEArithmeticSubtractionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEArithmeticSubtractionKernel
override	arm_compute/core/NEON/kernels/NEBatchNormalizationLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBatchNormalizationLayerKernel
override	arm_compute/core/NEON/kernels/NEBitwiseAndKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBitwiseAndKernel
override	arm_compute/core/NEON/kernels/NEBitwiseNotKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBitwiseNotKernel
override	arm_compute/core/NEON/kernels/NEBitwiseOrKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBitwiseOrKernel
override	arm_compute/core/NEON/kernels/NEBitwiseXorKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBitwiseXorKernel
override	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEBox3x3Kernel
override	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBox3x3FP16Kernel
override	arm_compute/core/NEON/kernels/NEBox3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEBox3x3Kernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEEdgeTraceKernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    bool       is_parallelisable() const override;$/;"	m	class:arm_compute::NEEdgeTraceKernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    void configure(const ITensor *gx, const ITensor *gy, ITensor *magnitude, ITensor *phase, int32_t norm_type) override;$/;"	m	class:arm_compute::NEGradientFP16Kernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEEdgeNonMaxSuppressionKernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEEdgeTraceKernel
override	arm_compute/core/NEON/kernels/NECannyEdgeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGradientKernel
override	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::NEChannelCombineKernel
override	arm_compute/core/NEON/kernels/NEChannelCombineKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEChannelCombineKernel
override	arm_compute/core/NEON/kernels/NEChannelExtractKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEChannelExtractKernel
override	arm_compute/core/NEON/kernels/NECol2ImKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NECol2ImKernel
override	arm_compute/core/NEON/kernels/NEColorConvertKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEColorConvertKernel
override	arm_compute/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEConvertFullyConnectedWeightsKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEConvolutionKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESeparableConvolutionHorKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESeparableConvolutionVertKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEConvolutionKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEConvolutionRectangleKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESeparableConvolutionHorKernel
override	arm_compute/core/NEON/kernels/NEConvolutionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESeparableConvolutionVertKernel
override	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::NECumulativeDistributionKernel
override	arm_compute/core/NEON/kernels/NECumulativeDistributionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NECumulativeDistributionKernel
override	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
override	arm_compute/core/NEON/kernels/NEDepthConcatenateLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDepthConcatenateLayerKernel
override	arm_compute/core/NEON/kernels/NEDepthConvertLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDepthConvertLayerKernel
override	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
override	arm_compute/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3Kernel
override	arm_compute/core/NEON/kernels/NEDepthwiseIm2ColKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDepthwiseIm2ColKernel
override	arm_compute/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDepthwiseVectorToTensorKernel
override	arm_compute/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDepthwiseWeightsReshapeKernel
override	arm_compute/core/NEON/kernels/NEDequantizationLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDequantizationLayerKernel
override	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEDerivativeKernel
override	arm_compute/core/NEON/kernels/NEDerivativeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDerivativeKernel
override	arm_compute/core/NEON/kernels/NEDilateKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEDilateKernel
override	arm_compute/core/NEON/kernels/NEDilateKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDilateKernel
override	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
override	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDirectConvolutionLayerKernel
override	arm_compute/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEDirectConvolutionLayerOutputStageKernel
override	arm_compute/core/NEON/kernels/NEErodeKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEErodeKernel
override	arm_compute/core/NEON/kernels/NEErodeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEErodeKernel
override	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEFastCornersKernel
override	arm_compute/core/NEON/kernels/NEFastCornersKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEFastCornersKernel
override	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::NEFillArrayKernel
override	arm_compute/core/NEON/kernels/NEFillArrayKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEFillArrayKernel
override	arm_compute/core/NEON/kernels/NEFillBorderKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEFillBorderKernel
override	arm_compute/core/NEON/kernels/NEFillInnerBorderKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEFillInnerBorderKernel
override	arm_compute/core/NEON/kernels/NEFloorKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEFloorKernel
override	arm_compute/core/NEON/kernels/NEGEMMInterleave4x4Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMInterleave4x4Kernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMLowpOffsetContributionKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    void configure(const ITensor *mtx_a, ITensor *vector_sum_row, int32_t num_mtx_a_cols, bool is_interleaved4x4) override;$/;"	m	class:arm_compute::NEGEMMLowpMatrixAReductionKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    void configure(const ITensor *mtx_b, ITensor *vector_sum_col, int32_t num_mtx_b_rows, bool is_transposed1xW) override;$/;"	m	class:arm_compute::NEGEMMLowpMatrixBReductionKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMLowpMatrixAReductionKernel
override	arm_compute/core/NEON/kernels/NEGEMMLowpReductionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMLowpMatrixBReductionKernel
override	arm_compute/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMMatrixAccumulateBiasesKernel
override	arm_compute/core/NEON/kernels/NEGEMMMatrixAdditionKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMMatrixAdditionKernel
override	arm_compute/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMMatrixMultiplyKernel
override	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
override	arm_compute/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMMatrixVectorMultiplyKernel
override	arm_compute/core/NEON/kernels/NEGEMMTranspose1xWKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGEMMTranspose1xWKernel
override	arm_compute/core/NEON/kernels/NEGaussian3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEGaussian3x3Kernel
override	arm_compute/core/NEON/kernels/NEGaussian3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGaussian3x3Kernel
override	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEGaussian5x5HorKernel
override	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEGaussian5x5VertKernel
override	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGaussian5x5HorKernel
override	arm_compute/core/NEON/kernels/NEGaussian5x5Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGaussian5x5VertKernel
override	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEGaussianPyramidHorKernel
override	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEGaussianPyramidVertKernel
override	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGaussianPyramidHorKernel
override	arm_compute/core/NEON/kernels/NEGaussianPyramidKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEGaussianPyramidVertKernel
override	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEHOGBlockNormalizationKernel
override	arm_compute/core/NEON/kernels/NEHOGDescriptorKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEHOGOrientationBinningKernel
override	arm_compute/core/NEON/kernels/NEHOGDetectorKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEHOGDetectorKernel
override	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEHarrisScoreFP16Kernel
override	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEHarrisScoreKernel
override	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    void configure(const IImage *input1, const IImage *input2, IImage *output, float norm_factor, float strength_thresh, float sensitivity, bool border_undefined) override;$/;"	m	class:arm_compute::NEHarrisScoreFP16Kernel
override	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    void configure(const IImage *input1, const IImage *input2, IImage *output, float norm_factor, float strength_thresh, float sensitivity, bool border_undefined) override;$/;"	m	class:arm_compute::NEHarrisScoreKernel
override	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEHarrisScoreFP16Kernel
override	arm_compute/core/NEON/kernels/NEHarrisCornersKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEHarrisScoreKernel
override	arm_compute/core/NEON/kernels/NEHistogramKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEHistogramKernel
override	arm_compute/core/NEON/kernels/NEIm2ColKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEIm2ColKernel
override	arm_compute/core/NEON/kernels/NEIntegralImageKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEIntegralImageKernel
override	arm_compute/core/NEON/kernels/NEIntegralImageKernel.h	/^    bool       is_parallelisable() const override;$/;"	m	class:arm_compute::NEIntegralImageKernel
override	arm_compute/core/NEON/kernels/NEIntegralImageKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEIntegralImageKernel
override	arm_compute/core/NEON/kernels/NEL2NormalizeLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEL2NormalizeLayerKernel
override	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NELKTrackerKernel
override	arm_compute/core/NEON/kernels/NELKTrackerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NELKTrackerKernel
override	arm_compute/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NELocallyConnectedMatrixMultiplyKernel
override	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMagnitudePhaseFP16Kernel
override	arm_compute/core/NEON/kernels/NEMagnitudePhaseKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMagnitudePhaseKernel
override	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEMeanStdDevKernel
override	arm_compute/core/NEON/kernels/NEMeanStdDevKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMeanStdDevKernel
override	arm_compute/core/NEON/kernels/NEMedian3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEMedian3x3Kernel
override	arm_compute/core/NEON/kernels/NEMedian3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMedian3x3Kernel
override	arm_compute/core/NEON/kernels/NEMinMaxLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMinMaxLayerKernel
override	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::NEMinMaxLocationKernel
override	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMinMaxKernel
override	arm_compute/core/NEON/kernels/NEMinMaxLocationKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEMinMaxLocationKernel
override	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NENonLinearFilterKernel
override	arm_compute/core/NEON/kernels/NENonLinearFilterKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NENonLinearFilterKernel
override	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NENonMaximaSuppression3x3Kernel
override	arm_compute/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NENonMaximaSuppression3x3Kernel
override	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NENormalizationLayerKernel
override	arm_compute/core/NEON/kernels/NENormalizationLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NENormalizationLayerKernel
override	arm_compute/core/NEON/kernels/NEPermuteKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEPermuteKernel
override	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
override	arm_compute/core/NEON/kernels/NEPixelWiseMultiplicationKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEPixelWiseMultiplicationKernel
override	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEPoolingLayerKernel
override	arm_compute/core/NEON/kernels/NEPoolingLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEPoolingLayerKernel
override	arm_compute/core/NEON/kernels/NEQuantizationLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEQuantizationLayerKernel
override	arm_compute/core/NEON/kernels/NEROIPoolingLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEROIPoolingLayerKernel
override	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEReductionOperationKernel
override	arm_compute/core/NEON/kernels/NEReductionOperationKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEReductionOperationKernel
override	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NERemapKernel
override	arm_compute/core/NEON/kernels/NERemapKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NERemapKernel
override	arm_compute/core/NEON/kernels/NEReshapeLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEReshapeLayerKernel
override	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEScaleKernel
override	arm_compute/core/NEON/kernels/NEScaleKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEScaleKernel
override	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NEScharr3x3Kernel
override	arm_compute/core/NEON/kernels/NEScharr3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEScharr3x3Kernel
override	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESobel3x3Kernel
override	arm_compute/core/NEON/kernels/NESobel3x3Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESobel3x3Kernel
override	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESobel5x5HorKernel
override	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESobel5x5VertKernel
override	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESobel5x5HorKernel
override	arm_compute/core/NEON/kernels/NESobel5x5Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESobel5x5VertKernel
override	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESobel7x7HorKernel
override	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NESobel7x7VertKernel
override	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESobel7x7HorKernel
override	arm_compute/core/NEON/kernels/NESobel7x7Kernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NESobel7x7VertKernel
override	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::NELogits1DMaxKernel
override	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NELogits1DMaxKernel
override	arm_compute/core/NEON/kernels/NESoftmaxLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NELogits1DSoftmaxKernel
override	arm_compute/core/NEON/kernels/NETableLookupKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NETableLookupKernel
override	arm_compute/core/NEON/kernels/NEThresholdKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEThresholdKernel
override	arm_compute/core/NEON/kernels/NETransposeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NETransposeKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    BorderSize border_size() const override;$/;"	m	class:arm_compute::INEWarpKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::INEWarpKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void warp_constant(const Window &window) override;$/;"	m	class:arm_compute::NEWarpAffineKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void warp_constant(const Window &window) override;$/;"	m	class:arm_compute::NEWarpPerspectiveKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void warp_replicate(const Window &window) override;$/;"	m	class:arm_compute::NEWarpAffineKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void warp_replicate(const Window &window) override;$/;"	m	class:arm_compute::NEWarpPerspectiveKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void warp_undefined(const Window &window) override;$/;"	m	class:arm_compute::NEWarpAffineKernel
override	arm_compute/core/NEON/kernels/NEWarpKernel.h	/^    void warp_undefined(const Window &window) override;$/;"	m	class:arm_compute::NEWarpPerspectiveKernel
override	arm_compute/core/NEON/kernels/NEWeightsReshapeKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEWeightsReshapeKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^        TOut *const      c_ptr) override;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^        bool same_padding) const override;$/;"	m	class:arm_compute::NEWinogradLayerTransformInputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^        const int         matrix_stride) override;$/;"	m	class:arm_compute::NEWinogradLayerTransformInputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^        const int      n_channels) override;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    Tensor4DShape get_output_shape(const KernelShape &kernel_shape, const Tensor4DShape &in_shape, const PaddingType padding) const override;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    bool is_parallelisable() const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int          get_number_blocks() const override;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int          get_output_tile_cols() const override;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int          get_output_tile_rows() const override;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int get_matrix_stride(const KernelShape &kernel_shape) const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int get_matrix_stride(const KernelShape &kernel_shape, const Tensor4DShape &input_shape, const PaddingType padding_type) const override;$/;"	m	class:arm_compute::NEWinogradLayerTransformInputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    int get_matrix_stride(const KernelShape &kernel_shape, const Tensor4DShape &input_shape, const PaddingType padding_type) const override;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    unsigned int get_number_gemms() const override;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    unsigned int get_output_storage_size(int n_batches, int n_rows, int n_cols, int n_output_channels, bool same_padding) const override;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    unsigned int get_weight_storage_size(int n_output_channels, int n_input_channels) const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    void configure(const ITensor *weights_hwio, T *const output, const int matrix_stride, const int n_output_channels, const int n_input_channels) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEWinogradLayerTransformInputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::NEWinogradLayerTransformOutputKernel
override	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    void run(const Window &window, const ThreadInfo &info) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    unsigned int get_window(void) const override;$/;"	m	class:depthwise::DepthwiseConvolution
override	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    void run(const unsigned int start, const unsigned int stop) override;$/;"	m	class:depthwise::DepthwiseConvolution
override	arm_compute/core/SubTensorInfo.h	/^    ITensorInfo &set_tensor_shape(const TensorShape &shape) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/SubTensorInfo.h	/^    bool extend_padding(const PaddingSize &padding) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/SubTensorInfo.h	/^    size_t offset_element_in_bytes(const Coordinates &pos) const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/SubTensorInfo.h	/^    std::unique_ptr<ITensorInfo> clone() const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &reset_padding() override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_data_layout(const DataLayout &data_layout) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_data_type(DataType data_type) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_fixed_point_position(int fixed_point_position) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_format(Format format) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_num_channels(int num_channels) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_quantization_info(const QuantizationInfo &quantization_info) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    ITensorInfo &set_tensor_shape(const TensorShape &shape) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    bool         auto_padding() override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    bool extend_padding(const PaddingSize &padding) override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    size_t offset_element_in_bytes(const Coordinates &pos) const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/TensorInfo.h	/^    std::unique_ptr<ITensorInfo> clone() const override;$/;"	m	class:arm_compute::final
override	arm_compute/core/utils/logging/FilePrinter.h	/^    void print_internal(const std::string &msg) override;$/;"	m	class:arm_compute::logging::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    IAllocator                    *backend_allocator() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    Status validate_node(INode &node) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    bool                           is_backend_supported() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    std::shared_ptr<arm_compute::IMemoryManager> create_memory_manager(MemoryManagerAffinity affinity) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    std::unique_ptr<ITensorHandle> create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    std::unique_ptr<ITensorHandle> create_tensor(const Tensor &tensor) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    std::unique_ptr<arm_compute::IFunction> configure_node(INode &node, GraphContext &ctx) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    void initialize_backend() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLDeviceBackend.h	/^    void setup_backend_context(GraphContext &ctx) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    ITensorHandle              *parent_handle() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    Target                      target() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    arm_compute::ITensor       &tensor() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    bool                        is_subtensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    const arm_compute::ITensor &tensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    void                        release_if_unused() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    void                        unmap() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    void allocate() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    void free() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    void manage(IMemoryGroup *mg) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLSubTensorHandle.h	/^    void map(bool blocking) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    ITensorHandle              *parent_handle() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    Target                      target() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    arm_compute::ITensor       &tensor() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    bool                        is_subtensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    const arm_compute::ITensor &tensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    void                        release_if_unused() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    void                        unmap() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    void allocate() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    void free() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    void manage(IMemoryGroup *mg) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/CL/CLTensorHandle.h	/^    void map(bool blocking) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    IAllocator                    *backend_allocator() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    Status validate_node(INode &node) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    bool                           is_backend_supported() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    std::shared_ptr<arm_compute::IMemoryManager> create_memory_manager(MemoryManagerAffinity affinity) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    std::unique_ptr<ITensorHandle> create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    std::unique_ptr<ITensorHandle> create_tensor(const Tensor &tensor) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    std::unique_ptr<arm_compute::IFunction> configure_node(INode &node, GraphContext &ctx) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    void initialize_backend() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCDeviceBackend.h	/^    void setup_backend_context(GraphContext &ctx) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    ITensorHandle              *parent_handle() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    Target                      target() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    arm_compute::ITensor       &tensor() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    bool                        is_subtensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    const arm_compute::ITensor &tensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    void                        release_if_unused() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    void                        unmap() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    void allocate() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    void free() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    void manage(IMemoryGroup *mg) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/GLES/GCTensorHandle.h	/^    void map(bool blocking) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    IAllocator                    *backend_allocator() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    Status validate_node(INode &node) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    bool                           is_backend_supported() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    std::shared_ptr<arm_compute::IMemoryManager> create_memory_manager(MemoryManagerAffinity affinity) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    std::unique_ptr<ITensorHandle> create_subtensor(ITensorHandle *parent, TensorShape shape, Coordinates coords, bool extend_parent) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    std::unique_ptr<ITensorHandle> create_tensor(const Tensor &tensor) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    std::unique_ptr<arm_compute::IFunction> configure_node(INode &node, GraphContext &ctx) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    void initialize_backend() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NEDeviceBackend.h	/^    void setup_backend_context(GraphContext &ctx) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    ITensorHandle              *parent_handle() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    Target                      target() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    arm_compute::ITensor       &tensor() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    bool                        is_subtensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    const arm_compute::ITensor &tensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    void                        release_if_unused() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    void                        unmap() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    void allocate() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    void free() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    void manage(IMemoryGroup *mg) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NESubTensorHandle.h	/^    void map(bool blocking) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    ITensorHandle              *parent_handle() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    Target                      target() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    arm_compute::ITensor       &tensor() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    bool                        is_subtensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    const arm_compute::ITensor &tensor() const override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    void                        release_if_unused() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    void                        unmap() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    void allocate() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    void free() override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    void manage(IMemoryGroup *mg) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/backends/NEON/NETensorHandle.h	/^    void map(bool blocking) override;$/;"	m	class:arm_compute::graph::backends::final
override	arm_compute/graph/frontend/Stream.h	/^    Graph       &graph() override;$/;"	m	class:arm_compute::graph::frontend::final
override	arm_compute/graph/frontend/Stream.h	/^    const Graph &graph() const override;$/;"	m	class:arm_compute::graph::frontend::final
override	arm_compute/graph/frontend/Stream.h	/^    void add_layer(ILayer &layer) override;$/;"	m	class:arm_compute::graph::frontend::final
override	arm_compute/graph/frontend/SubStream.h	/^    Graph       &graph() override;$/;"	m	class:arm_compute::graph::frontend::final
override	arm_compute/graph/frontend/SubStream.h	/^    const Graph &graph() const override;$/;"	m	class:arm_compute::graph::frontend::final
override	arm_compute/graph/frontend/SubStream.h	/^    void add_layer(ILayer &layer) override;$/;"	m	class:arm_compute::graph::frontend::final
override	arm_compute/graph/mutators/DepthConcatSubTensorMutator.h	/^    const char *name() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/DepthConcatSubTensorMutator.h	/^    virtual void mutate(Graph &g) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/InPlaceOperationMutator.h	/^    const char *name() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/InPlaceOperationMutator.h	/^    virtual void mutate(Graph &g) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/NodeFusionMutator.h	/^    const char *name() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/NodeFusionMutator.h	/^    virtual void mutate(Graph &g) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/SplitLayerSubTensorMutator.h	/^    const char *name() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/mutators/SplitLayerSubTensorMutator.h	/^    virtual void mutate(Graph &g) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ActivationLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ActivationLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ActivationLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ActivationLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/BatchNormalizationLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConstNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConstNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConstNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConstNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ConvolutionLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthConcatenateLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/DepthwiseConvolutionLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/EltwiseLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FlattenLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FlattenLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FlattenLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FlattenLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/FullyConnectedLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/InputNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/InputNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/InputNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/InputNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/NormalizationLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/NormalizationLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/NormalizationLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/NormalizationLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/OutputNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/OutputNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/OutputNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/OutputNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/PoolingLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/PoolingLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/PoolingLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/PoolingLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ReshapeLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ReshapeLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ReshapeLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/ReshapeLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SoftmaxLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SplitLayerNode.h	/^    NodeType         type() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SplitLayerNode.h	/^    Status           validate() const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SplitLayerNode.h	/^    TensorDescriptor configure_output(size_t idx) const override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SplitLayerNode.h	/^    bool             forward_descriptors() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/nodes/SplitLayerNode.h	/^    void accept(INodeVisitor &v) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void default_visit() override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void print(const Graph &g, std::ostream &os) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(ActivationLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(BatchNormalizationLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(ConvolutionLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(DepthConcatenateLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(DepthwiseConvolutionLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(EltwiseLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(NormalizationLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/graph/printers/DotGraphPrinter.h	/^    void visit(PoolingLayerNode &n) override;$/;"	m	class:arm_compute::graph::final
override	arm_compute/runtime/Allocator.h	/^    std::unique_ptr<IMemoryRegion> make_region(size_t size, size_t alignment) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/Allocator.h	/^    void *allocate(size_t size, size_t alignment) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/Allocator.h	/^    void free(void *ptr) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/BlobLifetimeManager.h	/^    MappingType mapping_type() const override;$/;"	m	class:arm_compute::BlobLifetimeManager
override	arm_compute/runtime/BlobLifetimeManager.h	/^    std::unique_ptr<IMemoryPool> create_pool(IAllocator *allocator) override;$/;"	m	class:arm_compute::BlobLifetimeManager
override	arm_compute/runtime/BlobLifetimeManager.h	/^    void update_blobs_and_mappings() override;$/;"	m	class:arm_compute::BlobLifetimeManager
override	arm_compute/runtime/BlobMemoryPool.h	/^    MappingType                  mapping_type() const override;$/;"	m	class:arm_compute::BlobMemoryPool
override	arm_compute/runtime/BlobMemoryPool.h	/^    std::unique_ptr<IMemoryPool> duplicate() override;$/;"	m	class:arm_compute::BlobMemoryPool
override	arm_compute/runtime/BlobMemoryPool.h	/^    void acquire(MemoryMappings &handles) override;$/;"	m	class:arm_compute::BlobMemoryPool
override	arm_compute/runtime/BlobMemoryPool.h	/^    void release(MemoryMappings &handles) override;$/;"	m	class:arm_compute::BlobMemoryPool
override	arm_compute/runtime/CL/CLBufferAllocator.h	/^    std::unique_ptr<IMemoryRegion> make_region(size_t size, size_t alignment) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/CL/CLBufferAllocator.h	/^    void *allocate(size_t size, size_t alignment) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/CL/CLBufferAllocator.h	/^    void free(void *ptr) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/CL/CLDistribution1D.h	/^    cl::Buffer &cl_buffer() override;$/;"	m	class:arm_compute::CLDistribution1D
override	arm_compute/runtime/CL/CLDistribution1D.h	/^    uint32_t *do_map(cl::CommandQueue &q, bool blocking) override;$/;"	m	class:arm_compute::CLDistribution1D
override	arm_compute/runtime/CL/CLDistribution1D.h	/^    void do_unmap(cl::CommandQueue &q) override;$/;"	m	class:arm_compute::CLDistribution1D
override	arm_compute/runtime/CL/CLHOG.h	/^    const HOGInfo    *info() const override;$/;"	m	class:arm_compute::CLHOG
override	arm_compute/runtime/CL/CLHOG.h	/^    const cl::Buffer &cl_buffer() const override;$/;"	m	class:arm_compute::CLHOG
override	arm_compute/runtime/CL/CLHOG.h	/^    uint8_t *do_map(cl::CommandQueue &q, bool blocking) override;$/;"	m	class:arm_compute::CLHOG
override	arm_compute/runtime/CL/CLHOG.h	/^    void              free() override;$/;"	m	class:arm_compute::CLHOG
override	arm_compute/runtime/CL/CLHOG.h	/^    void do_unmap(cl::CommandQueue &q) override;$/;"	m	class:arm_compute::CLHOG
override	arm_compute/runtime/CL/CLLut.h	/^    DataType          type() const override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    const cl::Buffer &cl_buffer() const override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    size_t            num_elements() const override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    size_t            size_in_bytes() const override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    uint32_t          index_offset() const override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    uint8_t *do_map(cl::CommandQueue &q, bool blocking) override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    void              clear() override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLut.h	/^    void do_unmap(cl::CommandQueue &q) override;$/;"	m	class:arm_compute::CLLut
override	arm_compute/runtime/CL/CLLutAllocator.h	/^    uint8_t *lock() override;$/;"	m	class:arm_compute::CLLutAllocator
override	arm_compute/runtime/CL/CLLutAllocator.h	/^    void allocate() override;$/;"	m	class:arm_compute::CLLutAllocator
override	arm_compute/runtime/CL/CLLutAllocator.h	/^    void unlock() override;$/;"	m	class:arm_compute::CLLutAllocator
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void **handle() override;$/;"	m	class:arm_compute::ICLMemoryRegion
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void *buffer() const override;$/;"	m	class:arm_compute::ICLMemoryRegion
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void *buffer() override;$/;"	m	class:arm_compute::ICLMemoryRegion
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void *map(cl::CommandQueue &q, bool blocking) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void *ptr() override;$/;"	m	class:arm_compute::ICLSVMMemoryRegion
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void *ptr() override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/CL/CLMemoryRegion.h	/^    void unmap(cl::CommandQueue &q) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/CL/CLMultiHOG.h	/^    ICLHOG *cl_model(size_t index) override;$/;"	m	class:arm_compute::CLMultiHOG
override	arm_compute/runtime/CL/CLMultiHOG.h	/^    const ICLHOG *cl_model(size_t index) const override;$/;"	m	class:arm_compute::CLMultiHOG
override	arm_compute/runtime/CL/CLMultiHOG.h	/^    size_t  num_models() const override;$/;"	m	class:arm_compute::CLMultiHOG
override	arm_compute/runtime/CL/CLMultiImage.h	/^    CLImage *cl_plane(unsigned int index) override;$/;"	m	class:arm_compute::CLMultiImage
override	arm_compute/runtime/CL/CLMultiImage.h	/^    const CLImage *cl_plane(unsigned int index) const override;$/;"	m	class:arm_compute::CLMultiImage
override	arm_compute/runtime/CL/CLMultiImage.h	/^    const MultiImageInfo *info() const override;$/;"	m	class:arm_compute::CLMultiImage
override	arm_compute/runtime/CL/CLPyramid.h	/^    CLTensor *get_pyramid_level(size_t index) const override;$/;"	m	class:arm_compute::CLPyramid
override	arm_compute/runtime/CL/CLPyramid.h	/^    const PyramidInfo *info() const override;$/;"	m	class:arm_compute::CLPyramid
override	arm_compute/runtime/CL/CLSubTensor.h	/^    ITensorInfo      *info() const override;$/;"	m	class:arm_compute::CLSubTensor
override	arm_compute/runtime/CL/CLSubTensor.h	/^    ITensorInfo      *info() override;$/;"	m	class:arm_compute::CLSubTensor
override	arm_compute/runtime/CL/CLSubTensor.h	/^    const cl::Buffer &cl_buffer() const override;$/;"	m	class:arm_compute::CLSubTensor
override	arm_compute/runtime/CL/CLSubTensor.h	/^    uint8_t *do_map(cl::CommandQueue &q, bool blocking) override;$/;"	m	class:arm_compute::CLSubTensor
override	arm_compute/runtime/CL/CLSubTensor.h	/^    void do_unmap(cl::CommandQueue &q) override;$/;"	m	class:arm_compute::CLSubTensor
override	arm_compute/runtime/CL/CLTensor.h	/^    TensorInfo       *info() const override;$/;"	m	class:arm_compute::CLTensor
override	arm_compute/runtime/CL/CLTensor.h	/^    TensorInfo       *info() override;$/;"	m	class:arm_compute::CLTensor
override	arm_compute/runtime/CL/CLTensor.h	/^    const cl::Buffer &cl_buffer() const override;$/;"	m	class:arm_compute::CLTensor
override	arm_compute/runtime/CL/CLTensor.h	/^    uint8_t *do_map(cl::CommandQueue &q, bool blocking) override;$/;"	m	class:arm_compute::CLTensor
override	arm_compute/runtime/CL/CLTensor.h	/^    void do_unmap(cl::CommandQueue &q) override;$/;"	m	class:arm_compute::CLTensor
override	arm_compute/runtime/CL/CLTensorAllocator.h	/^    uint8_t *lock() override;$/;"	m	class:arm_compute::CLTensorAllocator
override	arm_compute/runtime/CL/CLTensorAllocator.h	/^    void allocate() override;$/;"	m	class:arm_compute::CLTensorAllocator
override	arm_compute/runtime/CL/CLTensorAllocator.h	/^    void free() override;$/;"	m	class:arm_compute::CLTensorAllocator
override	arm_compute/runtime/CL/CLTensorAllocator.h	/^    void unlock() override;$/;"	m	class:arm_compute::CLTensorAllocator
override	arm_compute/runtime/CL/CLTuner.h	/^    void tune_kernel_dynamic(ICLKernel &kernel) override;$/;"	m	class:arm_compute::CLTuner
override	arm_compute/runtime/CL/CLTuner.h	/^    void tune_kernel_static(ICLKernel &kernel) override;$/;"	m	class:arm_compute::CLTuner
override	arm_compute/runtime/CL/functions/CLBatchNormalizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLBatchNormalizationLayer
override	arm_compute/runtime/CL/functions/CLCannyEdge.h	/^    virtual void run() override;$/;"	m	class:arm_compute::CLCannyEdge
override	arm_compute/runtime/CL/functions/CLConvolution.h	/^    void run() override;$/;"	m	class:arm_compute::CLConvolutionSquare
override	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	/^    void prepare() override;$/;"	m	class:arm_compute::CLConvolutionLayer
override	arm_compute/runtime/CL/functions/CLConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLConvolutionLayer
override	arm_compute/runtime/CL/functions/CLDeconvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDeconvolutionLayer
override	arm_compute/runtime/CL/functions/CLDeconvolutionLayerUpsample.h	/^    void run() override;$/;"	m	class:arm_compute::CLDeconvolutionLayerUpsample
override	arm_compute/runtime/CL/functions/CLDepthConcatenateLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDepthConcatenateLayer
override	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer
override	arm_compute/runtime/CL/functions/CLDepthwiseConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDepthwiseConvolutionLayer3x3
override	arm_compute/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDepthwiseSeparableConvolutionLayer
override	arm_compute/runtime/CL/functions/CLDequantizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDequantizationLayer
override	arm_compute/runtime/CL/functions/CLDirectConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLDirectConvolutionLayer
override	arm_compute/runtime/CL/functions/CLEqualizeHistogram.h	/^    void run() override;$/;"	m	class:arm_compute::CLEqualizeHistogram
override	arm_compute/runtime/CL/functions/CLFastCorners.h	/^    void run() override;$/;"	m	class:arm_compute::CLFastCorners
override	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    void prepare() override;$/;"	m	class:arm_compute::CLFullyConnectedLayer
override	arm_compute/runtime/CL/functions/CLFullyConnectedLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLFullyConnectedLayer
override	arm_compute/runtime/CL/functions/CLGEMM.h	/^    void prepare() override;$/;"	m	class:arm_compute::CLGEMM
override	arm_compute/runtime/CL/functions/CLGEMM.h	/^    void run() override;$/;"	m	class:arm_compute::CLGEMM
override	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    void prepare() override;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
override	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLConvolutionLayerReshapeWeights
override	arm_compute/runtime/CL/functions/CLGEMMConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLGEMMConvolutionLayer
override	arm_compute/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.h	/^    void run() override;$/;"	m	class:arm_compute::CLGEMMLowpMatrixMultiplyCore
override	arm_compute/runtime/CL/functions/CLGaussian5x5.h	/^    void run() override;$/;"	m	class:arm_compute::CLGaussian5x5
override	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    void configure(ICLTensor *input, CLPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value) override;$/;"	m	class:arm_compute::CLGaussianPyramidHalf
override	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    void configure(ICLTensor *input, CLPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value) override;$/;"	m	class:arm_compute::CLGaussianPyramidOrb
override	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    void run() override;$/;"	m	class:arm_compute::CLGaussianPyramidHalf
override	arm_compute/runtime/CL/functions/CLGaussianPyramid.h	/^    void run() override;$/;"	m	class:arm_compute::CLGaussianPyramidOrb
override	arm_compute/runtime/CL/functions/CLHOGDescriptor.h	/^    void run() override;$/;"	m	class:arm_compute::CLHOGDescriptor
override	arm_compute/runtime/CL/functions/CLHOGDetector.h	/^    void run() override;$/;"	m	class:arm_compute::CLHOGDetector
override	arm_compute/runtime/CL/functions/CLHOGGradient.h	/^    void run() override;$/;"	m	class:arm_compute::CLHOGGradient
override	arm_compute/runtime/CL/functions/CLHOGMultiDetection.h	/^    void run() override;$/;"	m	class:arm_compute::CLHOGMultiDetection
override	arm_compute/runtime/CL/functions/CLHarrisCorners.h	/^    void run() override;$/;"	m	class:arm_compute::CLHarrisCorners
override	arm_compute/runtime/CL/functions/CLHistogram.h	/^    void run() override;$/;"	m	class:arm_compute::CLHistogram
override	arm_compute/runtime/CL/functions/CLIntegralImage.h	/^    void run() override;$/;"	m	class:arm_compute::CLIntegralImage
override	arm_compute/runtime/CL/functions/CLL2NormalizeLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLL2NormalizeLayer
override	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLLSTMLayer
override	arm_compute/runtime/CL/functions/CLLaplacianPyramid.h	/^    void run() override;$/;"	m	class:arm_compute::CLLaplacianPyramid
override	arm_compute/runtime/CL/functions/CLLaplacianReconstruct.h	/^    void run() override;$/;"	m	class:arm_compute::CLLaplacianReconstruct
override	arm_compute/runtime/CL/functions/CLLocallyConnectedLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLLocallyConnectedLayer
override	arm_compute/runtime/CL/functions/CLMeanStdDev.h	/^    void run() override;$/;"	m	class:arm_compute::CLMeanStdDev
override	arm_compute/runtime/CL/functions/CLMinMaxLocation.h	/^    void run() override;$/;"	m	class:arm_compute::CLMinMaxLocation
override	arm_compute/runtime/CL/functions/CLNormalizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLNormalizationLayer
override	arm_compute/runtime/CL/functions/CLOpticalFlow.h	/^    void run() override;$/;"	m	class:arm_compute::CLOpticalFlow
override	arm_compute/runtime/CL/functions/CLQuantizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLQuantizationLayer
override	arm_compute/runtime/CL/functions/CLRNNLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLRNNLayer
override	arm_compute/runtime/CL/functions/CLReductionOperation.h	/^    void run() override;$/;"	m	class:arm_compute::CLReductionOperation
override	arm_compute/runtime/CL/functions/CLSobel5x5.h	/^    void run() override;$/;"	m	class:arm_compute::CLSobel5x5
override	arm_compute/runtime/CL/functions/CLSobel7x7.h	/^    void run() override;$/;"	m	class:arm_compute::CLSobel7x7
override	arm_compute/runtime/CL/functions/CLSoftmaxLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLSoftmaxLayer
override	arm_compute/runtime/CL/functions/CLWidthConcatenateLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLWidthConcatenateLayer
override	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    void prepare() override;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
override	arm_compute/runtime/CL/functions/CLWinogradConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::CLWinogradConvolutionLayer
override	arm_compute/runtime/CL/tuners/BifrostTuner.h	/^    void tune_kernel_dynamic(ICLKernel &kernel) override;$/;"	m	class:arm_compute::tuners::final
override	arm_compute/runtime/CL/tuners/BifrostTuner.h	/^    void tune_kernel_static(ICLKernel &kernel) override;$/;"	m	class:arm_compute::tuners::final
override	arm_compute/runtime/CPP/CPPScheduler.h	/^    unsigned int num_threads() const override;$/;"	m	class:arm_compute::CPPScheduler
override	arm_compute/runtime/CPP/CPPScheduler.h	/^    void schedule(ICPPKernel *kernel, unsigned int split_dimension) override;$/;"	m	class:arm_compute::CPPScheduler
override	arm_compute/runtime/CPP/CPPScheduler.h	/^    void set_num_threads(unsigned int num_threads) override;$/;"	m	class:arm_compute::CPPScheduler
override	arm_compute/runtime/Distribution1D.h	/^    uint32_t *buffer() const override;$/;"	m	class:arm_compute::Distribution1D
override	arm_compute/runtime/GLES_COMPUTE/GCBufferAllocator.h	/^    std::unique_ptr<IMemoryRegion> make_region(size_t size, size_t alignment) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/GLES_COMPUTE/GCBufferAllocator.h	/^    void *allocate(size_t size, size_t alignment) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/GLES_COMPUTE/GCBufferAllocator.h	/^    void free(void *ptr) override;$/;"	m	class:arm_compute::final
override	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    GLuint      gc_buffer() const override;$/;"	m	class:arm_compute::GCTensor
override	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    TensorInfo *info() const override;$/;"	m	class:arm_compute::GCTensor
override	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    TensorInfo *info() override;$/;"	m	class:arm_compute::GCTensor
override	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    uint8_t    *buffer() const override;$/;"	m	class:arm_compute::GCTensor
override	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    uint8_t *do_map(bool blocking) override;$/;"	m	class:arm_compute::GCTensor
override	arm_compute/runtime/GLES_COMPUTE/GCTensor.h	/^    void do_unmap() override;$/;"	m	class:arm_compute::GCTensor
override	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    uint8_t *lock() override;$/;"	m	class:arm_compute::GCTensorAllocator
override	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    void allocate() override;$/;"	m	class:arm_compute::GCTensorAllocator
override	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    void free() override;$/;"	m	class:arm_compute::GCTensorAllocator
override	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    void unlock() override;$/;"	m	class:arm_compute::GCTensorAllocator
override	arm_compute/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCBatchNormalizationLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCConvolutionLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCConvolutionLayerReshapeWeights
override	arm_compute/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCDepthConcatenateLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCDropoutLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCDropoutLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCFullyConnectedLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCGEMM.h	/^    void run() override;$/;"	m	class:arm_compute::GCGEMM
override	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCNormalizationLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCNormalizePlanarYUVLayer
override	arm_compute/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.h	/^    void run() override;$/;"	m	class:arm_compute::GCSoftmaxLayer
override	arm_compute/runtime/HOG.h	/^    const HOGInfo *info() const override;$/;"	m	class:arm_compute::HOG
override	arm_compute/runtime/HOG.h	/^    float         *descriptor() const override;$/;"	m	class:arm_compute::HOG
override	arm_compute/runtime/ISimpleLifetimeManager.h	/^    bool are_all_finalized() const override;$/;"	m	class:arm_compute::ISimpleLifetimeManager
override	arm_compute/runtime/ISimpleLifetimeManager.h	/^    void end_lifetime(void *obj, void **handle, size_t size) override;$/;"	m	class:arm_compute::ISimpleLifetimeManager
override	arm_compute/runtime/ISimpleLifetimeManager.h	/^    void register_group(IMemoryGroup *group) override;$/;"	m	class:arm_compute::ISimpleLifetimeManager
override	arm_compute/runtime/ISimpleLifetimeManager.h	/^    void start_lifetime(void *obj) override;$/;"	m	class:arm_compute::ISimpleLifetimeManager
override	arm_compute/runtime/Lut.h	/^    DataType type() const override;$/;"	m	class:arm_compute::Lut
override	arm_compute/runtime/Lut.h	/^    size_t   num_elements() const override;$/;"	m	class:arm_compute::Lut
override	arm_compute/runtime/Lut.h	/^    size_t   size_in_bytes() const override;$/;"	m	class:arm_compute::Lut
override	arm_compute/runtime/Lut.h	/^    uint32_t index_offset() const override;$/;"	m	class:arm_compute::Lut
override	arm_compute/runtime/Lut.h	/^    uint8_t *buffer() const override;$/;"	m	class:arm_compute::Lut
override	arm_compute/runtime/Lut.h	/^    void     clear() override;$/;"	m	class:arm_compute::Lut
override	arm_compute/runtime/LutAllocator.h	/^    uint8_t *lock() override;$/;"	m	class:arm_compute::LutAllocator
override	arm_compute/runtime/LutAllocator.h	/^    void allocate() override;$/;"	m	class:arm_compute::LutAllocator
override	arm_compute/runtime/LutAllocator.h	/^    void unlock() override;$/;"	m	class:arm_compute::LutAllocator
override	arm_compute/runtime/MemoryGroupBase.h	/^    MemoryMappings &mappings() override;$/;"	m	class:arm_compute::MemoryGroupBase
override	arm_compute/runtime/MemoryGroupBase.h	/^    void            acquire() override;$/;"	m	class:arm_compute::MemoryGroupBase
override	arm_compute/runtime/MemoryGroupBase.h	/^    void            release() override;$/;"	m	class:arm_compute::MemoryGroupBase
override	arm_compute/runtime/MemoryManagerOnDemand.h	/^    ILifetimeManager *lifetime_manager() override;$/;"	m	class:arm_compute::MemoryManagerOnDemand
override	arm_compute/runtime/MemoryManagerOnDemand.h	/^    IPoolManager     *pool_manager() override;$/;"	m	class:arm_compute::MemoryManagerOnDemand
override	arm_compute/runtime/MemoryManagerOnDemand.h	/^    void              finalize() override;$/;"	m	class:arm_compute::MemoryManagerOnDemand
override	arm_compute/runtime/MultiHOG.h	/^    IHOG *model(size_t index) override;$/;"	m	class:arm_compute::MultiHOG
override	arm_compute/runtime/MultiHOG.h	/^    const IHOG *model(size_t index) const override;$/;"	m	class:arm_compute::MultiHOG
override	arm_compute/runtime/MultiHOG.h	/^    size_t num_models() const override;$/;"	m	class:arm_compute::MultiHOG
override	arm_compute/runtime/MultiImage.h	/^    Image *plane(unsigned int index) override;$/;"	m	class:arm_compute::MultiImage
override	arm_compute/runtime/MultiImage.h	/^    const Image *plane(unsigned int index) const override;$/;"	m	class:arm_compute::MultiImage
override	arm_compute/runtime/MultiImage.h	/^    const MultiImageInfo *info() const override;$/;"	m	class:arm_compute::MultiImage
override	arm_compute/runtime/NEON/functions/NEBatchNormalizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEBatchNormalizationLayer
override	arm_compute/runtime/NEON/functions/NECannyEdge.h	/^    void run() override;$/;"	m	class:arm_compute::NECannyEdge
override	arm_compute/runtime/NEON/functions/NEConvertFullyConnectedWeights.h	/^    void run() override;$/;"	m	class:arm_compute::NEConvertFullyConnectedWeights
override	arm_compute/runtime/NEON/functions/NEConvolution.h	/^    void run() override;$/;"	m	class:arm_compute::NEConvolutionSquare
override	arm_compute/runtime/NEON/functions/NEConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEConvolutionLayer
override	arm_compute/runtime/NEON/functions/NEDeconvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDeconvolutionLayer
override	arm_compute/runtime/NEON/functions/NEDepthConcatenateLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDepthConcatenateLayer
override	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer
override	arm_compute/runtime/NEON/functions/NEDepthwiseConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDepthwiseConvolutionLayer3x3
override	arm_compute/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDepthwiseSeparableConvolutionLayer
override	arm_compute/runtime/NEON/functions/NEDequantizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDequantizationLayer
override	arm_compute/runtime/NEON/functions/NEDerivative.h	/^    void run() override;$/;"	m	class:arm_compute::NEDerivative
override	arm_compute/runtime/NEON/functions/NEDirectConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEDirectConvolutionLayer
override	arm_compute/runtime/NEON/functions/NEEqualizeHistogram.h	/^    void run() override;$/;"	m	class:arm_compute::NEEqualizeHistogram
override	arm_compute/runtime/NEON/functions/NEFastCorners.h	/^    void run() override;$/;"	m	class:arm_compute::NEFastCorners
override	arm_compute/runtime/NEON/functions/NEFillBorder.h	/^    void run() override;$/;"	m	class:arm_compute::NEFillBorder
override	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEFullyConnectedLayer
override	arm_compute/runtime/NEON/functions/NEFullyConnectedLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEFullyConnectedLayerReshapeWeights
override	arm_compute/runtime/NEON/functions/NEGEMM.h	/^    void run() override;$/;"	m	class:arm_compute::NEGEMM
override	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEConvolutionLayerReshapeWeights
override	arm_compute/runtime/NEON/functions/NEGEMMConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEGEMMConvolutionLayer
override	arm_compute/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.h	/^    void run() override;$/;"	m	class:arm_compute::NEGEMMLowpAssemblyMatrixMultiplyCore
override	arm_compute/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.h	/^    void run() override;$/;"	m	class:arm_compute::NEGEMMLowpMatrixMultiplyCore
override	arm_compute/runtime/NEON/functions/NEGaussian5x5.h	/^    void run() override;$/;"	m	class:arm_compute::NEGaussian5x5
override	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    void configure(const ITensor *input, IPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value) override;$/;"	m	class:arm_compute::NEGaussianPyramidHalf
override	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    void configure(const ITensor *input, IPyramid *pyramid, BorderMode border_mode, uint8_t constant_border_value) override;$/;"	m	class:arm_compute::NEGaussianPyramidOrb
override	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    void run() override;$/;"	m	class:arm_compute::NEGaussianPyramidHalf
override	arm_compute/runtime/NEON/functions/NEGaussianPyramid.h	/^    void run() override;$/;"	m	class:arm_compute::NEGaussianPyramidOrb
override	arm_compute/runtime/NEON/functions/NEHOGDescriptor.h	/^    void run() override;$/;"	m	class:arm_compute::NEHOGDescriptor
override	arm_compute/runtime/NEON/functions/NEHOGGradient.h	/^    void run() override;$/;"	m	class:arm_compute::NEHOGGradient
override	arm_compute/runtime/NEON/functions/NEHOGMultiDetection.h	/^    void run() override;$/;"	m	class:arm_compute::NEHOGMultiDetection
override	arm_compute/runtime/NEON/functions/NEHarrisCorners.h	/^    void run() override;$/;"	m	class:arm_compute::NEHarrisCorners
override	arm_compute/runtime/NEON/functions/NEHistogram.h	/^    void run() override;$/;"	m	class:arm_compute::NEHistogram
override	arm_compute/runtime/NEON/functions/NEIm2Col.h	/^    void run() override;$/;"	m	class:arm_compute::NEIm2Col
override	arm_compute/runtime/NEON/functions/NEL2NormalizeLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEL2NormalizeLayer
override	arm_compute/runtime/NEON/functions/NELaplacianPyramid.h	/^    void run() override;$/;"	m	class:arm_compute::NELaplacianPyramid
override	arm_compute/runtime/NEON/functions/NELaplacianReconstruct.h	/^    void run() override;$/;"	m	class:arm_compute::NELaplacianReconstruct
override	arm_compute/runtime/NEON/functions/NELocallyConnectedLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NELocallyConnectedLayer
override	arm_compute/runtime/NEON/functions/NEMeanStdDev.h	/^    void run() override;$/;"	m	class:arm_compute::NEMeanStdDev
override	arm_compute/runtime/NEON/functions/NEMinMaxLocation.h	/^    void run() override;$/;"	m	class:arm_compute::NEMinMaxLocation
override	arm_compute/runtime/NEON/functions/NENormalizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NENormalizationLayer
override	arm_compute/runtime/NEON/functions/NEOpticalFlow.h	/^    void run() override;$/;"	m	class:arm_compute::NEOpticalFlow
override	arm_compute/runtime/NEON/functions/NEPoolingLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEPoolingLayer
override	arm_compute/runtime/NEON/functions/NEQuantizationLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEQuantizationLayer
override	arm_compute/runtime/NEON/functions/NEROIPoolingLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEROIPoolingLayer
override	arm_compute/runtime/NEON/functions/NEReductionOperation.h	/^    void run() override;$/;"	m	class:arm_compute::NEReductionOperation
override	arm_compute/runtime/NEON/functions/NEScale.h	/^    void run() override;$/;"	m	class:arm_compute::NEScale
override	arm_compute/runtime/NEON/functions/NESobel5x5.h	/^    void run() override;$/;"	m	class:arm_compute::NESobel5x5
override	arm_compute/runtime/NEON/functions/NESobel7x7.h	/^    void run() override;$/;"	m	class:arm_compute::NESobel7x7
override	arm_compute/runtime/NEON/functions/NESoftmaxLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NESoftmaxLayer
override	arm_compute/runtime/NEON/functions/NEWinogradConvolutionLayer.h	/^    void run() override;$/;"	m	class:arm_compute::NEWinogradConvolutionLayer
override	arm_compute/runtime/OMP/OMPScheduler.h	/^    unsigned int num_threads() const override;$/;"	m	class:arm_compute::OMPScheduler
override	arm_compute/runtime/OMP/OMPScheduler.h	/^    void schedule(ICPPKernel *kernel, unsigned int split_dimension) override;$/;"	m	class:arm_compute::OMPScheduler
override	arm_compute/runtime/OMP/OMPScheduler.h	/^    void set_num_threads(unsigned int num_threads) override;$/;"	m	class:arm_compute::OMPScheduler
override	arm_compute/runtime/OffsetLifetimeManager.h	/^    MappingType mapping_type() const override;$/;"	m	class:arm_compute::OffsetLifetimeManager
override	arm_compute/runtime/OffsetLifetimeManager.h	/^    std::unique_ptr<IMemoryPool> create_pool(IAllocator *allocator) override;$/;"	m	class:arm_compute::OffsetLifetimeManager
override	arm_compute/runtime/OffsetLifetimeManager.h	/^    void update_blobs_and_mappings() override;$/;"	m	class:arm_compute::OffsetLifetimeManager
override	arm_compute/runtime/OffsetMemoryPool.h	/^    MappingType                  mapping_type() const override;$/;"	m	class:arm_compute::OffsetMemoryPool
override	arm_compute/runtime/OffsetMemoryPool.h	/^    std::unique_ptr<IMemoryPool> duplicate() override;$/;"	m	class:arm_compute::OffsetMemoryPool
override	arm_compute/runtime/OffsetMemoryPool.h	/^    void acquire(MemoryMappings &handles) override;$/;"	m	class:arm_compute::OffsetMemoryPool
override	arm_compute/runtime/OffsetMemoryPool.h	/^    void release(MemoryMappings &handles) override;$/;"	m	class:arm_compute::OffsetMemoryPool
override	arm_compute/runtime/PoolManager.h	/^    IMemoryPool *lock_pool() override;$/;"	m	class:arm_compute::PoolManager
override	arm_compute/runtime/PoolManager.h	/^    size_t num_pools() const override;$/;"	m	class:arm_compute::PoolManager
override	arm_compute/runtime/PoolManager.h	/^    void register_pool(std::unique_ptr<IMemoryPool> pool) override;$/;"	m	class:arm_compute::PoolManager
override	arm_compute/runtime/PoolManager.h	/^    void unlock_pool(IMemoryPool *pool) override;$/;"	m	class:arm_compute::PoolManager
override	arm_compute/runtime/Pyramid.h	/^    Tensor *get_pyramid_level(size_t index) const override;$/;"	m	class:arm_compute::Pyramid
override	arm_compute/runtime/Pyramid.h	/^    const PyramidInfo *info() const override;$/;"	m	class:arm_compute::Pyramid
override	arm_compute/runtime/SingleThreadScheduler.h	/^    unsigned int num_threads() const override;$/;"	m	class:arm_compute::SingleThreadScheduler
override	arm_compute/runtime/SingleThreadScheduler.h	/^    void schedule(ICPPKernel *kernel, unsigned int split_dimension) override;$/;"	m	class:arm_compute::SingleThreadScheduler
override	arm_compute/runtime/SingleThreadScheduler.h	/^    void set_num_threads(unsigned int num_threads) override;$/;"	m	class:arm_compute::SingleThreadScheduler
override	arm_compute/runtime/SubTensor.h	/^    ITensorInfo *info() const override;$/;"	m	class:arm_compute::SubTensor
override	arm_compute/runtime/SubTensor.h	/^    ITensorInfo *info() override;$/;"	m	class:arm_compute::SubTensor
override	arm_compute/runtime/SubTensor.h	/^    uint8_t     *buffer() const override;$/;"	m	class:arm_compute::SubTensor
override	arm_compute/runtime/Tensor.h	/^    ITensorInfo *info() const override;$/;"	m	class:arm_compute::Tensor
override	arm_compute/runtime/Tensor.h	/^    ITensorInfo *info() override;$/;"	m	class:arm_compute::Tensor
override	arm_compute/runtime/Tensor.h	/^    uint8_t     *buffer() const override;$/;"	m	class:arm_compute::Tensor
override	arm_compute/runtime/TensorAllocator.h	/^    uint8_t *lock() override;$/;"	m	class:arm_compute::TensorAllocator
override	arm_compute/runtime/TensorAllocator.h	/^    void allocate() override;$/;"	m	class:arm_compute::TensorAllocator
override	arm_compute/runtime/TensorAllocator.h	/^    void free() override;$/;"	m	class:arm_compute::TensorAllocator
override	arm_compute/runtime/TensorAllocator.h	/^    void unlock() override;$/;"	m	class:arm_compute::TensorAllocator
override	tests/CL/CLAccessor.h	/^    DataLayout       data_layout() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    DataType         data_type() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    Format           format() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    PaddingSize      padding() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    QuantizationInfo quantization_info() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    TensorShape      shape() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    const void *operator()(const Coordinates &coord) const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    int              fixed_point_position() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    int              num_channels() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    int              num_elements() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    size_t           element_size() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    size_t           size() const override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/CL/CLAccessor.h	/^    void *operator()(const Coordinates &coord) override;$/;"	m	class:arm_compute::test::CLAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    DataLayout       data_layout() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    DataType         data_type() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    Format           format() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    PaddingSize      padding() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    QuantizationInfo quantization_info() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    TensorShape      shape() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    const void *operator()(const Coordinates &coord) const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    int              fixed_point_position() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    int              num_channels() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    int              num_elements() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    size_t           element_size() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    size_t           size() const override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/GLES_COMPUTE/GCAccessor.h	/^    void *operator()(const Coordinates &coord) override;$/;"	m	class:arm_compute::test::GCAccessor
override	tests/NEON/Accessor.h	/^    DataLayout       data_layout() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    DataType         data_type() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    Format           format() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    PaddingSize      padding() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    QuantizationInfo quantization_info() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    TensorShape      shape() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    const void *operator()(const Coordinates &coord) const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    int              fixed_point_position() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    int              num_channels() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    int              num_elements() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    size_t           element_size() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    size_t           size() const override;$/;"	m	class:arm_compute::test::Accessor
override	tests/NEON/Accessor.h	/^    void *operator()(const Coordinates &coord) override;$/;"	m	class:arm_compute::test::Accessor
override	tests/RawTensor.h	/^    const void *operator()(const Coordinates &coord) const override;$/;"	m	class:arm_compute::test::RawTensor
override	tests/RawTensor.h	/^    void *operator()(const Coordinates &coord) override;$/;"	m	class:arm_compute::test::RawTensor
override	tests/SimpleTensor.h	/^    DataLayout data_layout() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    DataType data_type() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    Format format() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    PaddingSize padding() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    QuantizationInfo quantization_info() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    TensorShape shape() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    const void *operator()(const Coordinates &coord) const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    int fixed_point_position() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    int num_channels() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    int num_elements() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    size_t element_size() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    size_t size() const override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/SimpleTensor.h	/^    void *operator()(const Coordinates &coord) override;$/;"	m	class:arm_compute::test::SimpleTensor
override	tests/framework/Exceptions.h	/^    const char *what() const noexcept override;$/;"	m	class:arm_compute::test::framework::TestError
override	tests/framework/TestCaseFactory.h	/^    std::unique_ptr<TestCase> make() const override;$/;"	m	class:arm_compute::test::framework::final
override	tests/framework/command_line/EnumListOption.h	/^    bool parse(std::string value) override;$/;"	m	class:arm_compute::test::framework::EnumListOption
override	tests/framework/command_line/EnumListOption.h	/^    std::string help() const override;$/;"	m	class:arm_compute::test::framework::EnumListOption
override	tests/framework/command_line/EnumOption.h	/^    bool parse(std::string value) override;$/;"	m	class:arm_compute::test::framework::EnumOption
override	tests/framework/command_line/EnumOption.h	/^    std::string help() const override;$/;"	m	class:arm_compute::test::framework::EnumOption
override	tests/framework/command_line/ListOption.h	/^    bool parse(std::string value) override;$/;"	m	class:arm_compute::test::framework::ListOption
override	tests/framework/command_line/ListOption.h	/^    std::string help() const override;$/;"	m	class:arm_compute::test::framework::ListOption
override	tests/framework/command_line/SimpleOption.h	/^    bool parse(std::string value) override;$/;"	m	class:arm_compute::test::framework::SimpleOption
override	tests/framework/command_line/SimpleOption.h	/^    std::string help() const override;$/;"	m	class:arm_compute::test::framework::SimpleOption
override	tests/framework/command_line/ToggleOption.h	/^    bool parse(std::string value) override;$/;"	m	class:arm_compute::test::framework::ToggleOption
override	tests/framework/command_line/ToggleOption.h	/^    std::string help() const override;$/;"	m	class:arm_compute::test::framework::ToggleOption
override	tests/framework/instruments/MaliCounter.h	/^    MeasurementsMap measurements() const override;$/;"	m	class:arm_compute::test::framework::MaliCounter
override	tests/framework/instruments/MaliCounter.h	/^    std::string     id() const override;$/;"	m	class:arm_compute::test::framework::MaliCounter
override	tests/framework/instruments/MaliCounter.h	/^    void            start() override;$/;"	m	class:arm_compute::test::framework::MaliCounter
override	tests/framework/instruments/MaliCounter.h	/^    void            stop() override;$/;"	m	class:arm_compute::test::framework::MaliCounter
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    MeasurementsMap measurements() const override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    MeasurementsMap test_measurements() const override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::string     id() const override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    void            start() override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    void            stop() override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    void            test_start() override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLMemoryUsage.h	/^    void            test_stop() override;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
override	tests/framework/instruments/OpenCLTimer.h	/^    MeasurementsMap measurements() const override;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
override	tests/framework/instruments/OpenCLTimer.h	/^    std::string     id() const override;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
override	tests/framework/instruments/OpenCLTimer.h	/^    void            start() override;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
override	tests/framework/instruments/OpenCLTimer.h	/^    void            stop() override;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
override	tests/framework/instruments/OpenCLTimer.h	/^    void            test_start() override;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
override	tests/framework/instruments/OpenCLTimer.h	/^    void            test_stop() override;$/;"	m	class:arm_compute::test::framework::OpenCLTimer
override	tests/framework/instruments/PMUCounter.h	/^    MeasurementsMap measurements() const override;$/;"	m	class:arm_compute::test::framework::PMUCounter
override	tests/framework/instruments/PMUCounter.h	/^    std::string     id() const override;$/;"	m	class:arm_compute::test::framework::PMUCounter
override	tests/framework/instruments/PMUCounter.h	/^    void            start() override;$/;"	m	class:arm_compute::test::framework::PMUCounter
override	tests/framework/instruments/PMUCounter.h	/^    void            stop() override;$/;"	m	class:arm_compute::test::framework::PMUCounter
override	tests/framework/instruments/SchedulerTimer.h	/^    Instrument::MeasurementsMap measurements() const override;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
override	tests/framework/instruments/SchedulerTimer.h	/^    std::string                 id() const override;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
override	tests/framework/instruments/SchedulerTimer.h	/^    void                        start() override;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
override	tests/framework/instruments/SchedulerTimer.h	/^    void                        test_start() override;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
override	tests/framework/instruments/SchedulerTimer.h	/^    void                        test_stop() override;$/;"	m	class:arm_compute::test::framework::SchedulerTimer
override	tests/framework/instruments/WallClockTimer.h	/^    MeasurementsMap measurements() const override;$/;"	m	class:arm_compute::test::framework::WallClockTimer
override	tests/framework/instruments/WallClockTimer.h	/^    std::string     id() const override;$/;"	m	class:arm_compute::test::framework::WallClockTimer
override	tests/framework/instruments/WallClockTimer.h	/^    void            start() override;$/;"	m	class:arm_compute::test::framework::WallClockTimer
override	tests/framework/instruments/WallClockTimer.h	/^    void            stop() override;$/;"	m	class:arm_compute::test::framework::WallClockTimer
override	tests/framework/printers/JSONPrinter.h	/^    void print_entry(const std::string &name, const std::string &value) override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_error(const std::exception &error, bool expected) override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_errors_footer() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_errors_header() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_global_footer() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_global_header() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_info(const std::string &info) override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_list_tests(const std::vector<TestInfo> &infos) override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_measurements(const Profiler::MeasurementsMap &measurements) override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_run_footer() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_run_header() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_test_footer() override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/JSONPrinter.h	/^    void print_test_header(const TestInfo &info) override;$/;"	m	class:arm_compute::test::framework::JSONPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_entry(const std::string &name, const std::string &value) override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_error(const std::exception &error, bool expected) override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_errors_footer() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_errors_header() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_global_footer() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_global_header() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_info(const std::string &info) override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_list_tests(const std::vector<TestInfo> &infos) override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_measurements(const Profiler::MeasurementsMap &measurements) override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_run_footer() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_run_header() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_test_footer() override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	tests/framework/printers/PrettyPrinter.h	/^    void print_test_header(const TestInfo &info) override;$/;"	m	class:arm_compute::test::framework::PrettyPrinter
override	utils/GraphUtils.h	/^    bool access_tensor(ITensor &tensor) override;$/;"	m	class:arm_compute::graph_utils::PPMWriter
override	utils/GraphUtils.h	/^    bool access_tensor(ITensor &tensor) override;$/;"	m	class:arm_compute::graph_utils::final
override	utils/GraphUtils.h	/^    void preprocess(ITensor &tensor) override;$/;"	m	class:arm_compute::graph_utils::CaffePreproccessor
override	utils/GraphUtils.h	/^    void preprocess(ITensor &tensor) override;$/;"	m	class:arm_compute::graph_utils::TFPreproccessor
pData	include/linux/EGL/eglext.h	/^    void  *pData;$/;"	m	struct:EGLClientPixmapHI
p_value	tests/framework/instruments/MaliCounter.cpp	/^    unsigned p_value;$/;"	m	struct:arm_compute::test::framework::__anon387::MaliHWInfo	file:
pack4_half	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^highp uvec2 pack4_half(mediump vec4 data)$/;"	f
pack4_u8	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^highp uint pack4_u8(lowp uvec4 data)$/;"	f
pack8_half	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^highp uvec4 pack8_half(mediump vec4 data[2])$/;"	f
pad	arm_compute/core/Types.h	/^    std::pair<unsigned int, unsigned int> pad() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
pad_bottom	arm_compute/core/Types.h	/^    unsigned int pad_bottom() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
pad_left	arm_compute/core/Types.h	/^    unsigned int pad_left() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
pad_right	arm_compute/core/Types.h	/^    unsigned int pad_right() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
pad_stride_info	arm_compute/core/Types.h	/^    PadStrideInfo pad_stride_info() const$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
pad_top	arm_compute/core/Types.h	/^    unsigned int pad_top() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
padding	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint padding;                       \/**< The padding to rounding up the structure to a multiple of a vec4 *\/$/;"	m	struct:Tensor3DAttributes
padding	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint padding;                       \/**< The padding to rounding up the structure to a multiple of a vec4 *\/$/;"	m	struct:VectorAttributes
padding	tests/CL/CLAccessor.h	/^inline PaddingSize CLAccessor::padding() const$/;"	f	class:arm_compute::test::CLAccessor
padding	tests/GLES_COMPUTE/GCAccessor.h	/^inline PaddingSize GCAccessor::padding() const$/;"	f	class:arm_compute::test::GCAccessor
padding	tests/NEON/Accessor.h	/^inline PaddingSize Accessor::padding() const$/;"	f	class:arm_compute::test::Accessor
padding	tests/SimpleTensor.h	/^PaddingSize SimpleTensor<T>::padding() const$/;"	f	class:arm_compute::test::SimpleTensor
padding	tests/framework/instruments/hwc.hpp	/^    uint16_t padding;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
padding	tests/framework/instruments/hwc.hpp	/^    uint16_t padding[3];$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group
padding	tests/framework/instruments/hwc.hpp	/^    uint32_t                     padding;$/;"	m	struct:mali_userspace::mali_base_gpu_coherent_group_info
padding	tests/framework/instruments/hwc.hpp	/^    uint32_t padding;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_set_flags
padding	tests/framework/instruments/hwc.hpp	/^    uint8_t   padding[4];$/;"	m	struct:mali_userspace::__anon390::uku_version_check_args
padding	tests/framework/instruments/hwc.hpp	/^    uint8_t  padding[4];$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_version_check_args
padding	tests/framework/instruments/hwc.hpp	/^    uint8_t  padding[7];$/;"	m	struct:mali_userspace::mali_base_gpu_thread_props
padding	tests/framework/instruments/hwc.hpp	/^    uint8_t padding[5];$/;"	m	struct:mali_userspace::mali_base_gpu_l2_cache_props
padding1	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint padding1;                      \/**< The padding to rounding up the structure to a multiple of a vec4 *\/$/;"	m	struct:ImageAttributes
padding2	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint padding2;                      \/**< The padding to rounding up the structure to a multiple of a vec4 *\/$/;"	m	struct:ImageAttributes
padding3	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint padding3;                      \/**< The padding to rounding up the structure to a multiple of a vec4 *\/$/;"	m	struct:ImageAttributes
padding_is_symmetric	arm_compute/core/Types.h	/^    bool padding_is_symmetric() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
param_traits	include/CL/cl.hpp	/^struct param_traits {};$/;"	s	namespace:cl::detail
param_traits	include/CL/cl2.hpp	/^struct param_traits {};$/;"	s	namespace:cl::detail
params	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^auto params = combine(framework::dataset::make("WeightsWidth", { 16, 32, 64 }), framework::dataset::make("DataLayout", { DataLayout::NCHW, DataLayout::NHWC }));$/;"	m	namespace:arm_compute::test::validation::__anon406	file:
params	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^auto params = combine(framework::dataset::make("WeightsWidth", { 16, 32, 64 }), framework::dataset::make("DataLayout", { DataLayout::NCHW, DataLayout::NHWC }));$/;"	m	namespace:arm_compute::test::validation::__anon479	file:
parent	src/runtime/CL/CLSubTensor.cpp	/^ICLTensor *CLSubTensor::parent()$/;"	f	class:CLSubTensor
parent	src/runtime/SubTensor.cpp	/^ITensor *SubTensor::parent()$/;"	f	class:SubTensor
parent_handle	src/graph/backends/CL/CLSubTensorHandle.cpp	/^ITensorHandle *CLSubTensorHandle::parent_handle()$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
parent_handle	src/graph/backends/CL/CLTensorHandle.cpp	/^ITensorHandle *CLTensorHandle::parent_handle()$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
parent_handle	src/graph/backends/GLES/GCTensorHandle.cpp	/^ITensorHandle *GCTensorHandle::parent_handle()$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
parent_handle	src/graph/backends/NEON/NESubTensorHandle.cpp	/^ITensorHandle *NESubTensorHandle::parent_handle()$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
parent_handle	src/graph/backends/NEON/NETensorHandle.cpp	/^ITensorHandle *NETensorHandle::parent_handle()$/;"	f	class:arm_compute::graph::backends::NETensorHandle
parse	tests/framework/command_line/CommandLineParser.cpp	/^void CommandLineParser::parse(int argc, char **argv)$/;"	f	class:arm_compute::test::framework::CommandLineParser
parse	tests/framework/command_line/EnumListOption.h	/^bool EnumListOption<T>::parse(std::string value)$/;"	f	class:arm_compute::test::framework::EnumListOption
parse	tests/framework/command_line/EnumOption.h	/^bool EnumOption<T>::parse(std::string value)$/;"	f	class:arm_compute::test::framework::EnumOption
parse	tests/framework/command_line/ListOption.h	/^bool ListOption<T>::parse(std::string value)$/;"	f	class:arm_compute::test::framework::ListOption
parse	tests/framework/command_line/SimpleOption.h	/^bool SimpleOption<T>::parse(std::string value)$/;"	f	class:arm_compute::test::framework::SimpleOption
parse	tests/framework/command_line/SimpleOption.h	/^inline bool SimpleOption<std::string>::parse(std::string value)$/;"	f	class:arm_compute::test::framework::SimpleOption
parse	tests/framework/command_line/ToggleOption.cpp	/^bool ToggleOption::parse(std::string value)$/;"	f	class:arm_compute::test::framework::ToggleOption
parse_bool	include/libnpy/npy.hpp	/^inline bool parse_bool(const std::string& in) {$/;"	f	namespace:npy::pyparse
parse_dict	include/libnpy/npy.hpp	/^inline std::unordered_map<std::string, std::string> parse_dict(std::string in, std::vector<std::string>& keys) {$/;"	f	namespace:npy::pyparse
parse_header	include/libnpy/npy.hpp	/^inline void parse_header(std::string header, std::string& descr, bool& fortran_order, std::vector<ndarray_len_t>& shape) {$/;"	f	namespace:npy
parse_id_filter	tests/framework/TestFilter.cpp	/^TestFilter::Ranges TestFilter::parse_id_filter(const std::string &id_filter) const$/;"	f	class:arm_compute::test::framework::TestFilter
parse_netpbm_format_header	tests/AssetsLibrary.cpp	/^std::tuple<unsigned int, unsigned int, int> parse_netpbm_format_header(std::ifstream &fs, char number)$/;"	f	namespace:arm_compute::test::__anon328
parse_npy_header	utils/Utils.cpp	/^std::tuple<std::vector<unsigned long>, bool, std::string> parse_npy_header(std::ifstream &fs) \/\/NOLINT$/;"	f	namespace:arm_compute::utils
parse_pgm_header	tests/AssetsLibrary.cpp	/^std::tuple<unsigned int, unsigned int, int> parse_pgm_header(std::ifstream &fs)$/;"	f	namespace:arm_compute::test::__anon328
parse_ppm_header	tests/AssetsLibrary.cpp	/^std::tuple<unsigned int, unsigned int, int> parse_ppm_header(std::ifstream &fs)$/;"	f	namespace:arm_compute::test::__anon328
parse_ppm_header	utils/Utils.cpp	/^std::tuple<unsigned int, unsigned int, int> parse_ppm_header(std::ifstream &fs)$/;"	f	namespace:arm_compute::utils
parse_str	include/libnpy/npy.hpp	/^inline std::string parse_str(const std::string& in) {$/;"	f	namespace:npy::pyparse
parse_tuple	include/libnpy/npy.hpp	/^inline std::vector<std::string> parse_tuple(std::string in) {$/;"	f	namespace:npy::pyparse
parse_typestring	include/libnpy/npy.hpp	/^inline void parse_typestring( std::string typestring){$/;"	f	namespace:npy
parser	scripts/caffe_data_extractor.py	/^    parser = argparse.ArgumentParser('Extract Caffe net parameters')$/;"	v
parser	scripts/tensorflow_data_extractor.py	/^    parser = argparse.ArgumentParser('Extract Tensorflow net parameters')$/;"	v
pass	src/graph/PassManager.cpp	/^IGraphMutator *PassManager::pass(size_t index)$/;"	f	class:arm_compute::graph::PassManager
passes	src/graph/PassManager.cpp	/^const std::vector<std::unique_ptr<IGraphMutator>> &PassManager::passes() const$/;"	f	class:arm_compute::graph::PassManager
path	tests/AssetsLibrary.cpp	/^std::string AssetsLibrary::path() const$/;"	f	class:arm_compute::test::AssetsLibrary
pathName	documentation/navtree.js	/^function pathName()$/;"	f
permute	arm_compute/core/Helpers.h	/^inline void permute(Dimensions<T> &dimensions, const PermutationVector &perm)$/;"	f	namespace:arm_compute
permute	arm_compute/core/Helpers.h	/^inline void permute(TensorShape &shape, const PermutationVector &perm)$/;"	f	namespace:arm_compute
permute	tests/validation/reference/Permute.cpp	/^SimpleTensor<T> permute(const SimpleTensor<T> &src, PermutationVector perm)$/;"	f	namespace:arm_compute::test::validation::reference
permute_strides	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^inline void permute_strides(Dimensions<T> &dimensions, const PermutationVector &perm)$/;"	f	namespace:__anon230
phase	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseFP16Kernel<mag_type, phase_type>::phase(const Window &window)$/;"	f	class:NEMagnitudePhaseFP16Kernel
phase	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseKernel<mag_type, phase_type>::phase(const Window &window)$/;"	f	class:NEMagnitudePhaseKernel
phase	tests/validation/reference/Phase.cpp	/^SimpleTensor<uint8_t> phase(const SimpleTensor<T> &gx, const SimpleTensor<T> &gy, PhaseType phase_type)$/;"	f	namespace:arm_compute::test::validation::reference
phase_quantization	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization(const float32x4x2_t &gx, const float32x4x2_t &gy)$/;"	f	namespace:__anon249
phase_quantization	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization(const float32x4x2_t &gx, const float32x4x2_t &gy)$/;"	f	namespace:fp16
phase_quantization	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization(float16x8_t gx, float16x8_t gy)$/;"	f	namespace:fp16
phase_quantization_S16_S16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization_S16_S16(int16x8_t gx, int16x8_t gy)$/;"	f	namespace:__anon249
phase_quantization_S16_S16	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization_S16_S16(int16x8_t gx, int16x8_t gy)$/;"	f	namespace:fp16
phase_quantization_S32_S32	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization_S32_S32(const int32x4x2_t &gx, const int32x4x2_t &gy)$/;"	f	namespace:__anon249
phase_quantization_S32_S32	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^inline uint8x8_t phase_quantization_S32_S32(const int32x4x2_t &gx, const int32x4x2_t &gy)$/;"	f	namespace:fp16
phase_signed	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline uint8x8_t phase_signed(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:__anon278
phase_signed	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline uint8x8_t phase_signed(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:fp16
phase_type	src/core/HOGInfo.cpp	/^PhaseType HOGInfo::phase_type() const$/;"	f	class:HOGInfo
phase_types	tests/benchmark/CL/Phase.cpp	/^const auto phase_types = framework::dataset::make("PhaseType", { PhaseType::SIGNED, PhaseType::UNSIGNED });$/;"	m	namespace:arm_compute::test::benchmark::__anon345	file:
phase_types	tests/benchmark/NEON/Phase.cpp	/^const auto phase_types = framework::dataset::make("PhaseType", { PhaseType::SIGNED, PhaseType::UNSIGNED });$/;"	m	namespace:arm_compute::test::benchmark::__anon379	file:
phase_unsigned	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline uint8x8_t phase_unsigned(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:__anon278
phase_unsigned	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline uint8x8_t phase_unsigned(int16x8_t input1, int16x8_t input2)$/;"	f	namespace:fp16
pixel_bilinear_c1	arm_compute/core/Helpers.h	/^inline T pixel_bilinear_c1(const T *first_pixel_ptr, size_t stride, float x, float y)$/;"	f	namespace:arm_compute
pixel_bilinear_c1_clamp	arm_compute/core/Helpers.h	/^inline uint8_t pixel_bilinear_c1_clamp(const T *first_pixel_ptr, size_t stride, size_t width, size_t height, float x, float y)$/;"	f	namespace:arm_compute
pixel_size_from_format	arm_compute/core/Utils.h	/^inline size_t pixel_size_from_format(Format format)$/;"	f	namespace:arm_compute
pixel_wise_multiplication	tests/validation/reference/PixelWiseMultiplication.cpp	/^SimpleTensor<T2> pixel_wise_multiplication(const SimpleTensor<T1> &src1, const SimpleTensor<T2> &src2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)$/;"	f	namespace:arm_compute::test::validation::reference
pixels_per_item	src/core/CL/kernels/CLHistogramKernel.cpp	/^constexpr signed int pixels_per_item = 16;$/;"	v
pixelwise__mul__float_8cl	documentation/pixelwise__mul__float_8cl.js	/^var pixelwise__mul__float_8cl =$/;"	v
pixelwise__mul__int_8cl	documentation/pixelwise__mul__int_8cl.js	/^var pixelwise__mul__int_8cl =$/;"	v
plane	src/core/CL/ICLMultiImage.cpp	/^IImage *ICLMultiImage::plane(unsigned int index)$/;"	f	class:ICLMultiImage
plane	src/core/CL/ICLMultiImage.cpp	/^const IImage *ICLMultiImage::plane(unsigned int index) const$/;"	f	class:ICLMultiImage
plane	src/runtime/MultiImage.cpp	/^Image *MultiImage::plane(unsigned int index)$/;"	f	class:MultiImage
plane	src/runtime/MultiImage.cpp	/^const Image *MultiImage::plane(unsigned int index) const$/;"	f	class:MultiImage
plane_idx_from_channel	arm_compute/core/Utils.h	/^inline int plane_idx_from_channel(Format format, Channel channel)$/;"	f	namespace:arm_compute
plus	include/half/half.hpp	/^			static expr plus(float x, float y) { return expr(x+y); }$/;"	f	struct:detail::functions
point_is_fast_corner	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^inline bool point_is_fast_corner(uint8_t p, uint8_t threshold, const uint8x8x2_t &tbl_circle_texels, uint8x8x2_t perm_indices[PERMUTATIONS])$/;"	f	namespace:__anon258
pointer	include/CL/cl2.hpp	/^        typedef typename std::allocator_traits<Alloc>::pointer pointer;$/;"	t	class:cl::detail::Deleter
pointer	include/CL/cl2.hpp	/^    typedef value_type* pointer;$/;"	t	class:cl::SVMAllocator
poll_data_t	tests/framework/instruments/hwc.hpp	/^typedef char poll_data_t;$/;"	t	namespace:mali_userspace::__anon390
polymorphic_cast	arm_compute/core/utils/misc/Cast.h	/^inline Target polymorphic_cast(Source *v)$/;"	f	namespace:arm_compute::utils::cast
polymorphic_downcast	arm_compute/core/utils/misc/Cast.h	/^inline Target polymorphic_downcast(Source *v)$/;"	f	namespace:arm_compute::utils::cast
pool_manager	src/runtime/MemoryManagerOnDemand.cpp	/^IPoolManager *MemoryManagerOnDemand::pool_manager()$/;"	f	class:MemoryManagerOnDemand
pool_size	arm_compute/core/Types.h	/^    const Size2D &pool_size() const$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
pool_type	arm_compute/core/Types.h	/^    PoolingType pool_type() const$/;"	f	class:arm_compute::HOGNormType::PoolingLayerInfo
pooled_height	arm_compute/core/Types.h	/^    unsigned int pooled_height() const$/;"	f	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
pooled_width	arm_compute/core/Types.h	/^    unsigned int pooled_width() const$/;"	f	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
pooling2_f16_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling2_f16_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling2_f32_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling2_f32_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling2_q16_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling2_q16_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling2_q8_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling2_q8_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling2_qasymm8_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling2_qasymm8_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling3_f16_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling3_f16_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling3_f32_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling3_f32_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling3_q16_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling3_q16_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling3_q8_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling3_q8_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling3_qasymm8_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling3_qasymm8_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling7_f32_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::pooling7_f32_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_f16_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_f16_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_f16_nhwc	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_f16_nhwc(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_f32_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_f32_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_f32_nhwc	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_f32_nhwc(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_q16_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_q16_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_q8_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_q8_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_qasymm8_nchw	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_qasymm8_nchw(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
poolingMxN_qasymm8_nhwc	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::poolingMxN_qasymm8_nhwc(const Window &window_input, const Window &window)$/;"	f	class:NEPoolingLayerKernel
pooling__layer_8cl	documentation/pooling__layer_8cl.js	/^var pooling__layer_8cl =$/;"	v
pooling__layer__quantized_8cl	documentation/pooling__layer__quantized_8cl.js	/^var pooling__layer__quantized_8cl =$/;"	v
pooling_info	src/graph/nodes/PoolingLayerNode.cpp	/^PoolingLayerInfo PoolingLayerNode::pooling_info() const$/;"	f	class:arm_compute::graph::PoolingLayerNode
pooling_layer	tests/validation/reference/PoolingLayer.cpp	/^SimpleTensor<T> pooling_layer(const SimpleTensor<T> &src, const PoolingLayerInfo &info)$/;"	f	namespace:arm_compute::test::validation::reference
pooling_layer	tests/validation/reference/PoolingLayer.cpp	/^SimpleTensor<uint8_t> pooling_layer<uint8_t>(const SimpleTensor<uint8_t> &src, const PoolingLayerInfo &info)$/;"	f	namespace:arm_compute::test::validation::reference
pop_back	include/CL/cl.hpp	/^    void pop_back(void)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
pop_suite	tests/framework/Framework.cpp	/^void Framework::pop_suite()$/;"	f	class:arm_compute::test::framework::Framework
populate_buffer	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void populate_buffer(T func)$/;"	f	class:arm_gemm::Buffer
populate_models_cpuid	src/runtime/CPUUtils.cpp	/^void populate_models_cpuid(std::vector<PerCPUData> &cpusv)$/;"	f	namespace:__anon319
populate_models_cpuinfo	src/runtime/CPUUtils.cpp	/^void populate_models_cpuinfo(std::vector<PerCPUData> &cpusv)$/;"	f	namespace:__anon319
positive_round_f32q	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^const float32x4_t positive_round_f32q    = vdupq_n_f32(0.5f);$/;"	m	namespace:__anon287	file:
pow	include/half/half.hpp	/^			static expr pow(float base, float exp) { return expr(std::pow(base, exp)); }$/;"	f	struct:detail::functions
pow	include/half/half.hpp	/^		inline expr pow(expr base, expr exp) { return functions::pow(base, exp); }$/;"	f	namespace:detail
pow	include/half/half.hpp	/^		inline expr pow(expr base, half exp) { return functions::pow(base, exp); }$/;"	f	namespace:detail
pow	include/half/half.hpp	/^		inline expr pow(half base, expr exp) { return functions::pow(base, exp); }$/;"	f	namespace:detail
pow	include/half/half.hpp	/^		inline expr pow(half base, half exp) { return functions::pow(base, exp); }$/;"	f	namespace:detail
pow	tests/validation/FixedPoint.h	/^    static fixed_point<T> pow(fixed_point<T> x, fixed_point<T> a)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
pow	tests/validation/FixedPoint.h	/^inline fixed_point<T> pow(fixed_point<T> x, fixed_point<T> a)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
precision	arm_compute/core/Types.h	/^    unsigned int precision;$/;"	m	struct:arm_compute::HOGNormType::IOFormatInfo
precision	tests/validation/FixedPoint.h	/^    uint8_t precision() const$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
precision_type	arm_compute/core/Types.h	/^    PrecisionType precision_type;$/;"	m	struct:arm_compute::HOGNormType::IOFormatInfo
precompute_dx_dy_offsets	src/runtime/NEON/functions/NEScale.cpp	/^void precompute_dx_dy_offsets(ITensor *dx, ITensor *dy, ITensor *offsets, float wr, float hr, size_t input_element_size, SamplingPolicy sampling_policy)$/;"	f	namespace:__anon325
prefetch_1x	src/core/NEON/kernels/arm_gemm/asmlib.hpp	/^static inline void prefetch_1x(const T *pfp)$/;"	f
prefetch_2x	src/core/NEON/kernels/arm_gemm/asmlib.hpp	/^static inline void prefetch_2x(const T *pfp)$/;"	f
prefetch_3x	src/core/NEON/kernels/arm_gemm/asmlib.hpp	/^static inline void prefetch_3x(const T *pfp)$/;"	f
prefetch_4x	src/core/NEON/kernels/arm_gemm/asmlib.hpp	/^static inline void prefetch_4x(const T *pfp)$/;"	f
prefetch_5x	src/core/NEON/kernels/arm_gemm/asmlib.hpp	/^static inline void prefetch_5x(const T *pfp)$/;"	f
prefetch_6x	src/core/NEON/kernels/arm_gemm/asmlib.hpp	/^static inline void prefetch_6x(const T *pfp)$/;"	f
prepare	arm_compute/runtime/IFunction.h	/^    virtual void prepare()$/;"	f	class:arm_compute::IFunction
prepare	src/graph/Workload.cpp	/^void ExecutionTask::prepare()$/;"	f	class:arm_compute::graph::ExecutionTask
prepare	src/runtime/CL/functions/CLConvolutionLayer.cpp	/^void CLConvolutionLayer::prepare()$/;"	f	class:CLConvolutionLayer
prepare	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayer::prepare()$/;"	f	class:CLFullyConnectedLayer
prepare	src/runtime/CL/functions/CLGEMM.cpp	/^void CLGEMM::prepare()$/;"	f	class:CLGEMM
prepare	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^void CLGEMMConvolutionLayer::prepare()$/;"	f	class:CLGEMMConvolutionLayer
prepare	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^void CLWinogradConvolutionLayer::prepare()$/;"	f	class:CLWinogradConvolutionLayer
prepare_all_tasks	src/graph/detail/ExecutionHelpers.cpp	/^void prepare_all_tasks(ExecutionWorkload &workload)$/;"	f	namespace:arm_compute::graph::detail
prepare_quantized_softmax_build_options	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^CLBuildOptions prepare_quantized_softmax_build_options(float input_scale, float beta)$/;"	f	namespace:__anon219
preprocess	utils/GraphUtils.cpp	/^void CaffePreproccessor::preprocess(ITensor &tensor)$/;"	f	class:CaffePreproccessor
preprocess	utils/GraphUtils.cpp	/^void TFPreproccessor::preprocess(ITensor &tensor)$/;"	f	class:TFPreproccessor
preprocess_shader	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^const std::string GCKernelLibrary::preprocess_shader(const std::string &shader_source) const$/;"	f	class:GCKernelLibrary
pretranspose_B_array	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual void pretranspose_B_array(void *buffer, const To *B, const int ldb, const int B_multi_stride) { };$/;"	f	class:arm_gemm::GemmCommon
pretty_console	tests/framework/command_line/CommonOptions.h	/^    ToggleOption                               *pretty_console; \/**< Pretty console option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
pretty_file	tests/framework/command_line/CommonOptions.h	/^    SimpleOption<std::string>                  *pretty_file;    \/**< Pretty output file option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
print	arm_compute/core/utils/logging/IPrinter.h	/^    inline void print(const std::string &msg)$/;"	f	class:arm_compute::logging::Printer
print	src/core/ITensor.cpp	/^void ITensor::print(std::ostream &s, IOFormatInfo io_fmt) const$/;"	f	class:ITensor
print	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphPrinter::print(const Graph &g, std::ostream &os)$/;"	f	class:arm_compute::graph::DotGraphPrinter
print	tests/framework/printers/Printer.cpp	/^void Printer::print(const std::string &str)$/;"	f	class:arm_compute::test::framework::Printer
print_all	src/core/utils/logging/Logger.cpp	/^void Logger::print_all(const std::string &msg)$/;"	f	class:Logger
print_consecutive_elements	src/core/Utils.cpp	/^void arm_compute::print_consecutive_elements(std::ostream &s, DataType dt, const uint8_t *ptr, unsigned int n, int stream_width, const std::string &element_delim)$/;"	f	class:arm_compute
print_consecutive_elements_impl	arm_compute/core/Utils.h	/^void print_consecutive_elements_impl(std::ostream &s, const T *ptr, unsigned int n, int stream_width = 0, const std::string &element_delim = " ")$/;"	f	namespace:arm_compute
print_edges	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphPrinter::print_edges(const Graph &g, std::ostream &os)$/;"	f	class:arm_compute::graph::DotGraphPrinter
print_entry	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_entry(const std::string &name, const std::string &value)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_entry	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_entry(const std::string &name, const std::string &value)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_error	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_error(const std::exception &error, bool expected)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_error	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_error(const std::exception &error, bool expected)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_errors_footer	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_errors_footer()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_errors_footer	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_errors_footer()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_errors_header	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_errors_header()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_errors_header	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_errors_header()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_footer	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphPrinter::print_footer(const Graph &g, std::ostream &os)$/;"	f	class:arm_compute::graph::DotGraphPrinter
print_global_footer	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_global_footer()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_global_footer	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_global_footer()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_global_header	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_global_header()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_global_header	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_global_header()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_header	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphPrinter::print_header(const Graph &g, std::ostream &os)$/;"	f	class:arm_compute::graph::DotGraphPrinter
print_help	tests/framework/command_line/CommandLineParser.cpp	/^void CommandLineParser::print_help(const std::string &program_name) const$/;"	f	class:arm_compute::test::framework::CommandLineParser
print_info	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_info(const std::string &info)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_info	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_info(const std::string &info)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_internal	src/core/utils/logging/FilePrinter.cpp	/^void FilePrinter::print_internal(const std::string &msg)$/;"	f	class:FilePrinter
print_list_tests	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_list_tests(const std::vector<TestInfo> &infos)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_list_tests	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_list_tests(const std::vector<TestInfo> &infos)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_measurements	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_measurements(const Profiler::MeasurementsMap &measurements)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_measurements	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_measurements(const Profiler::MeasurementsMap &measurements)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_nodes	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphPrinter::print_nodes(const Graph &g, std::ostream &os)$/;"	f	class:arm_compute::graph::DotGraphPrinter
print_region	arm_compute/core/Types.h	/^    PrintRegion print_region;$/;"	m	struct:arm_compute::HOGNormType::IOFormatInfo
print_run_footer	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_run_footer()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_run_footer	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_run_footer()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_run_header	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_run_header()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_run_header	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_run_header()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_separator	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_separator(bool &flag)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_strings	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_strings(T &&first, T &&last)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_tensor	tests/GLES_COMPUTE/Helper.h	/^inline void print_tensor(ITensor &tensor, const std::string &name, IOFormatInfo info = IOFormatInfo(IOFormatInfo::PrintRegion::Full))$/;"	f	namespace:arm_compute::test
print_test_footer	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_test_footer()$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_test_footer	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_test_footer()$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_test_header	tests/framework/printers/JSONPrinter.cpp	/^void JSONPrinter::print_test_header(const TestInfo &info)$/;"	f	class:arm_compute::test::framework::JSONPrinter
print_test_header	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::print_test_header(const TestInfo &info)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
print_test_info	tests/framework/Framework.cpp	/^void Framework::print_test_info(std::ostream &os) const$/;"	f	class:arm_compute::test::framework::Framework
print_test_results	tests/framework/Framework.cpp	/^void Framework::print_test_results(Printer &printer) const$/;"	f	class:arm_compute::test::framework::Framework
printf_callback	arm_compute/runtime/CL/CLScheduler.h	/^void printf_callback(const char *buffer, unsigned int len, size_t complete, void *user_data)$/;"	f	namespace:__anon2
process_tile	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^void DepthwiseConvolutionImpl<OTR, OTC, KR, KC, SR, SC, TIn, TOut>::process_tile($/;"	f	class:depthwise::DepthwiseConvolutionImpl
process_tile	arm_compute/core/NEON/kernels/convolution/depthwise/impl_fp32_fp32.hpp	/^void DepthwiseConvolutionImpl<OTR, OTC, KR, KC, SR, SC, float, float>::process_tile($/;"	f	class:depthwise::DepthwiseConvolutionImpl
process_tile	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^void ConvImpl::process_tile<true, 0, 0, 0, 0, 0, 0>($/;"	f	class:depthwise::ConvImpl
process_tile	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^void ConvImpl::process_tile<true, 0, 0, 0, 0, 0, 0>($/;"	f	class:depthwise::ConvImpl
process_tile	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^void ConvImpl::process_tile<true, 0, 0, 0, 0, 0, 0>($/;"	f	class:depthwise::ConvImpl
process_tile	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^void ConvImpl::process_tile<true, 0, 0, 0, 0, 0, 0>($/;"	f	class:depthwise::ConvImpl
process_tile	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_3x3_fp32.cpp	/^void Transform::process_tile($/;"	f	class:winograd::Transform
process_tile	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_5x5_fp32.cpp	/^void Transform::process_tile($/;"	f	class:winograd::Transform
process_tile	src/core/NEON/kernels/convolution/winograd/transforms/input_4x4_3x3_fp32.cpp	/^void Transform::process_tile($/;"	f	class:winograd::Transform
process_tile	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_3x3_fp32.cpp	/^void Transform::process_tile($/;"	f	class:winograd::Transform
process_tile	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_5x5_fp32.cpp	/^void Transform::process_tile($/;"	f	class:winograd::Transform
process_tile	src/core/NEON/kernels/convolution/winograd/transforms/output_4x4_3x3_fp32.cpp	/^void Transform::process_tile($/;"	f	class:winograd::Transform
process_tile_row	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^void DepthwiseConvolution<OTR, OTC, KR, KC, SR, SC, TIn, TOut>::process_tile_row($/;"	f	class:depthwise::DepthwiseConvolution
process_tile_row	arm_compute/core/NEON/kernels/convolution/winograd/transforms/input.hpp	/^  void WinogradGEMM<output_tile_rows, output_tile_cols, kernel_rows, kernel_cols>::InputTransform<T>::process_tile_row($/;"	f	class:winograd::WinogradGEMM::InputTransform
process_tile_row	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  void WinogradGEMM<output_tile_rows, output_tile_cols, kernel_rows, kernel_cols>::OutputTransform<T>::process_tile_row($/;"	f	class:winograd::WinogradGEMM::OutputTransform
producer	arm_compute/graph/Edge.h	/^    INode *producer() const$/;"	f	class:arm_compute::graph::final
producer_id	arm_compute/graph/Edge.h	/^    NodeID producer_id() const$/;"	f	class:arm_compute::graph::final
producer_idx	arm_compute/graph/Edge.h	/^    unsigned int producer_idx() const$/;"	f	class:arm_compute::graph::final
product_id	tests/framework/instruments/hwc.hpp	/^    uint32_t product_id;$/;"	m	struct:mali_userspace::gpu_props
product_id	tests/framework/instruments/hwc.hpp	/^    uint32_t product_id;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
product_id	tests/framework/instruments/hwc_names.hpp	/^    uint32_t           product_id;$/;"	m	struct:mali_userspace::CounterMapping
product_mask	tests/framework/instruments/hwc_names.hpp	/^    uint32_t           product_mask;$/;"	m	struct:mali_userspace::CounterMapping
products	tests/framework/instruments/hwc_names.hpp	/^static const CounterMapping products[] =$/;"	m	namespace:mali_userspace
profiler	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    profiler()$/;"	f	class:arm_gemm::profiler
profiler	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^class profiler$/;"	c	namespace:arm_gemm
projection_bias	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *projection_bias() const$/;"	f	class:arm_compute::LSTMParams
projection_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *projection_weights() const$/;"	f	class:arm_compute::LSTMParams
promote	tests/Utils.h	/^template <> struct promote<float> { using type = float; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<half> { using type = half; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<int16_t> { using type = int32_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<int32_t> { using type = int64_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<int8_t> { using type = int16_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<uint16_t> { using type = uint32_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<uint32_t> { using type = uint64_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <> struct promote<uint8_t> { using type = uint16_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::traits
promote	tests/Utils.h	/^template <typename T> struct promote { };$/;"	s	namespace:arm_compute::test::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<float> { using type = float; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<half> { using type = half; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<int16_t> { using type = int32_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<int32_t> { using type = int64_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<int8_t> { using type = int16_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<uint16_t> { using type = uint32_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<uint32_t> { using type = uint64_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <> struct promote<uint8_t> { using type = uint16_t; \/**< Promoted type *\/ };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
promote	tests/validation/FixedPoint.h	/^template <typename T> struct promote { };$/;"	s	namespace:arm_compute::test::fixed_point_arithmetic::traits
props	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_props props;$/;"	m	struct:mali_userspace::kbase_uk_gpuprops
ptr	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    inline T* ptr() const {$/;"	f	class:final
ptr	include/CL/cl.hpp	/^    static T* ptr(T& value) { return &value; }$/;"	f	struct:cl::detail::KernelArgumentHandler
ptr	include/CL/cl.hpp	/^    static void* ptr(LocalSpaceArg&) { return NULL; }$/;"	f	struct:cl::detail::KernelArgumentHandler
ptr	include/CL/cl2.hpp	/^        static const cl_command_queue* ptr(const cl::DeviceCommandQueue& value) { return &(value()); }$/;"	f	struct:cl::detail::KernelArgumentHandler
ptr	include/CL/cl2.hpp	/^    static const T* ptr(const T& value) { return &value; }$/;"	f	struct:cl::detail::KernelArgumentHandler
ptr	include/CL/cl2.hpp	/^    static const cl_mem* ptr(const T& value) { return &(value()); }$/;"	f	struct:cl::detail::KernelArgumentHandler
ptr	include/CL/cl2.hpp	/^    static const void* ptr(const LocalSpaceArg&) { return NULL; }$/;"	f	struct:cl::detail::KernelArgumentHandler
ptr	src/core/CL/cl_kernels/helpers.h	/^    __global uchar *ptr;                           \/**< Pointer to the starting postion of the buffer *\/$/;"	m	struct:Image
ptr	src/core/CL/cl_kernels/helpers.h	/^    __global uchar *ptr;                           \/**< Pointer to the starting postion of the buffer *\/$/;"	m	struct:Tensor3D
ptr	src/core/CL/cl_kernels/helpers.h	/^    __global uchar *ptr;                           \/**< Pointer to the starting postion of the buffer *\/$/;"	m	struct:Tensor4D
ptr	src/core/CL/cl_kernels/helpers.h	/^    __global uchar *ptr;                           \/**< Pointer to the starting postion of the buffer *\/$/;"	m	struct:Vector
ptr	src/runtime/CL/CLMemoryRegion.cpp	/^void *CLBufferMemoryRegion::ptr()$/;"	f	class:arm_compute::CLBufferMemoryRegion
ptr	src/runtime/CL/CLMemoryRegion.cpp	/^void *ICLSVMMemoryRegion::ptr()$/;"	f	class:arm_compute::ICLSVMMemoryRegion
ptr_to_element	arm_compute/core/ITensor.h	/^    inline uint8_t *ptr_to_element(const Coordinates &id) const$/;"	f	class:arm_compute::ITensor
push_back	arm_compute/core/IArray.h	/^    bool push_back(const T &val)$/;"	f	class:arm_compute::IArray
push_back	include/CL/cl.hpp	/^    void push_back (const T& x)$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
push_suite	tests/framework/Framework.cpp	/^void Framework::push_suite(std::string name)$/;"	f	class:arm_compute::test::framework::Framework
pyparse	include/libnpy/npy.hpp	/^namespace pyparse {$/;"	n	namespace:npy
qs16_MAX	src/core/CL/cl_kernels/fixed_point.h	43;"	d
qs16_MIN	src/core/CL/cl_kernels/fixed_point.h	42;"	d
qs16_SHIFT	src/core/CL/cl_kernels/fixed_point.h	83;"	d
qs16_TYPE	src/core/CL/cl_kernels/fixed_point.h	62;"	d
qs16x16_TYPE	src/core/CL/cl_kernels/fixed_point.h	68;"	d
qs16x1_TYPE	src/core/CL/cl_kernels/fixed_point.h	63;"	d
qs16x2_TYPE	src/core/CL/cl_kernels/fixed_point.h	64;"	d
qs16x3_TYPE	src/core/CL/cl_kernels/fixed_point.h	65;"	d
qs16x4_TYPE	src/core/CL/cl_kernels/fixed_point.h	66;"	d
qs16x8_TYPE	src/core/CL/cl_kernels/fixed_point.h	67;"	d
qs32_MAX	src/core/CL/cl_kernels/fixed_point.h	45;"	d
qs32_MIN	src/core/CL/cl_kernels/fixed_point.h	44;"	d
qs32_TYPE	src/core/CL/cl_kernels/fixed_point.h	70;"	d
qs32x16_TYPE	src/core/CL/cl_kernels/fixed_point.h	76;"	d
qs32x1_TYPE	src/core/CL/cl_kernels/fixed_point.h	71;"	d
qs32x2_TYPE	src/core/CL/cl_kernels/fixed_point.h	72;"	d
qs32x3_TYPE	src/core/CL/cl_kernels/fixed_point.h	73;"	d
qs32x4_TYPE	src/core/CL/cl_kernels/fixed_point.h	74;"	d
qs32x8_TYPE	src/core/CL/cl_kernels/fixed_point.h	75;"	d
qs8_MAX	src/core/CL/cl_kernels/fixed_point.h	41;"	d
qs8_MIN	src/core/CL/cl_kernels/fixed_point.h	40;"	d
qs8_SHIFT	src/core/CL/cl_kernels/fixed_point.h	82;"	d
qs8_TYPE	src/core/CL/cl_kernels/fixed_point.h	54;"	d
qs8x16_TYPE	src/core/CL/cl_kernels/fixed_point.h	60;"	d
qs8x1_TYPE	src/core/CL/cl_kernels/fixed_point.h	55;"	d
qs8x2_TYPE	src/core/CL/cl_kernels/fixed_point.h	56;"	d
qs8x3_TYPE	src/core/CL/cl_kernels/fixed_point.h	57;"	d
qs8x4_TYPE	src/core/CL/cl_kernels/fixed_point.h	58;"	d
qs8x8_TYPE	src/core/CL/cl_kernels/fixed_point.h	59;"	d
qu16_MAX	src/core/CL/cl_kernels/fixed_point.h	50;"	d
qu16_MIN	src/core/CL/cl_kernels/fixed_point.h	49;"	d
qu32_MAX	src/core/CL/cl_kernels/fixed_point.h	52;"	d
qu32_MIN	src/core/CL/cl_kernels/fixed_point.h	51;"	d
qu8_MAX	src/core/CL/cl_kernels/fixed_point.h	48;"	d
qu8_MIN	src/core/CL/cl_kernels/fixed_point.h	47;"	d
quantization	arm_compute/core/utils/quantization/AsymmHelpers.h	/^namespace quantization$/;"	n	namespace:arm_compute
quantization__layer_8cl	documentation/quantization__layer_8cl.js	/^var quantization__layer_8cl =$/;"	v
quantization_info	tests/CL/CLAccessor.h	/^inline QuantizationInfo CLAccessor::quantization_info() const$/;"	f	class:arm_compute::test::CLAccessor
quantization_info	tests/GLES_COMPUTE/GCAccessor.h	/^inline QuantizationInfo GCAccessor::quantization_info() const$/;"	f	class:arm_compute::test::GCAccessor
quantization_info	tests/NEON/Accessor.h	/^inline QuantizationInfo Accessor::quantization_info() const$/;"	f	class:arm_compute::test::Accessor
quantization_info	tests/SimpleTensor.h	/^QuantizationInfo SimpleTensor<T>::quantization_info() const$/;"	f	class:arm_compute::test::SimpleTensor
quantization_layer	tests/validation/reference/QuantizationLayer.cpp	/^SimpleTensor<uint8_t> quantization_layer(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
quantize	arm_compute/core/Types.h	/^    qasymm8_t quantize(float value, RoundingPolicy rounding_policy) const$/;"	f	struct:arm_compute::QuantizationInfo
quantize_down_int32_to_uint8_scale	tests/validation/reference/GEMMLowp.cpp	/^void quantize_down_int32_to_uint8_scale(const SimpleTensor<T> *in, const SimpleTensor<T> *bias, SimpleTensor<uint8_t> *dst, int32_t result_offset, int32_t result_mult_int, int32_t result_shift,$/;"	f	namespace:arm_compute::test::validation::reference::__anon537
quantize_down_int32_to_uint8_scale_by_fixedpoint	tests/validation/reference/GEMMLowp.cpp	/^void quantize_down_int32_to_uint8_scale_by_fixedpoint(const SimpleTensor<T> *in, const SimpleTensor<T> *bias, SimpleTensor<uint8_t> *dst, int32_t result_fixedpoint_multiplier, int32_t result_shift,$/;"	f	namespace:arm_compute::test::validation::reference::__anon537
quantize_down_int32_to_uint8_scale_by_fixedpoint_cases	tests/validation/CL/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_by_fixedpoint_cases = framework::dataset::make("result_fixedpoint_multiplier", 254601600, 254601602) * framework::dataset::make("result_shift", 1,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_by_fixedpoint_cases	tests/validation/NEON/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_by_fixedpoint_cases = framework::dataset::make("result_fixedpoint_multiplier", 254601600, 254601602) * framework::dataset::make("result_shift", 1,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_by_fixedpoint_relu_cases	tests/validation/CL/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_by_fixedpoint_relu_cases = framework::dataset::make("result_fixedpoint_multiplier", 254601600, 254601602) * framework::dataset::make("result_shift", 1,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_by_fixedpoint_relu_cases	tests/validation/NEON/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_by_fixedpoint_relu_cases = framework::dataset::make("result_fixedpoint_multiplier", 254601600, 254601602) * framework::dataset::make("result_shift", 1,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_cases	tests/validation/CL/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_cases = framework::dataset::make("result_offset", -2, 1) * framework::dataset::make("result_mult_int", 1, 2) * framework::dataset::make("result_shift", 2,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_cases	tests/validation/NEON/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_cases = framework::dataset::make("result_offset", -2, 1) * framework::dataset::make("result_mult_int", 1, 2) * framework::dataset::make("result_shift", 2,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_relu_cases	tests/validation/CL/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_relu_cases = framework::dataset::make("result_offset", -2, 1) * framework::dataset::make("result_mult_int", 1,$/;"	m	namespace:arm_compute::test::validation	file:
quantize_down_int32_to_uint8_scale_relu_cases	tests/validation/NEON/GEMMLowp.cpp	/^const auto quantize_down_int32_to_uint8_scale_relu_cases = framework::dataset::make("result_offset", -2, 1) * framework::dataset::make("result_mult_int", 1,$/;"	m	namespace:arm_compute::test::validation	file:
queue	arm_compute/runtime/CL/CLScheduler.h	/^    cl::CommandQueue &queue()$/;"	f	class:arm_compute::CLScheduler
queue_	include/CL/cl.hpp	/^    CommandQueue queue_;$/;"	m	struct:cl::EnqueueArgs
queue_	include/CL/cl2.hpp	/^    CommandQueue queue_;$/;"	m	class:cl::EnqueueArgs
r_value	tests/framework/instruments/MaliCounter.cpp	/^    unsigned r_value;$/;"	m	struct:arm_compute::test::framework::__anon387::MaliHWInfo	file:
rand	src/core/GLES_COMPUTE/cs_shaders/dropout.cs	/^float rand(vec3 v, float seed)$/;"	m
range	src/core/IDistribution1D.cpp	/^uint32_t IDistribution1D::range() const$/;"	f	class:IDistribution1D
raw	tests/validation/FixedPoint.h	/^    T raw() const$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
raw_	arm_compute/core/utils/logging/Types.h	/^    std::string raw_;$/;"	m	struct:arm_compute::logging::LogMsg
raw_data	tests/framework/instruments/Measurement.h	/^    const std::list<std::string> &raw_data() const$/;"	f	struct:arm_compute::test::framework::Measurement
raw_props	tests/framework/instruments/hwc.hpp	/^    gpu_raw_gpu_props                 raw_props;$/;"	m	struct:mali_userspace::mali_base_gpu_props
read	include/half/half.hpp	/^			template<typename charT,typename traits> static std::basic_istream<charT,traits>& read(std::basic_istream<charT,traits> &in, half &arg)$/;"	f	struct:detail::functions
readCookie	documentation/resize.js	/^function readCookie(cookie) $/;"	f
read_file	src/core/Utils.cpp	/^std::string arm_compute::read_file(const std::string &filename, bool binary)$/;"	f	class:arm_compute
read_header	include/libnpy/npy.hpp	/^inline std::string read_header(std::istream& istream) {$/;"	f	namespace:npy
read_image_buffer	tests/AssetsLibrary.cpp	/^void read_image_buffer(std::ifstream &fs, RawTensor &raw)$/;"	f	namespace:arm_compute::test::__anon328
read_magic	include/libnpy/npy.hpp	/^inline void read_magic(std::istream& istream, unsigned char& v_major, unsigned char& v_minor) {$/;"	f	namespace:npy
read_texels4	src/core/CL/cl_kernels/warp_helpers.h	/^inline const VEC_DATA_TYPE(DATA_TYPE, 4) read_texels4(const Image *in, const int8 coords)$/;"	f
real_clCreateBuffer	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::function<decltype(clCreateBuffer)>     real_clCreateBuffer;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
real_clEnqueueNDRangeKernel	arm_compute/runtime/CL/CLTuner.h	/^    std::function<decltype(clEnqueueNDRangeKernel)> real_clEnqueueNDRangeKernel;$/;"	m	class:arm_compute::CLTuner
real_clReleaseMemObject	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::function<decltype(clReleaseMemObject)> real_clReleaseMemObject;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
real_clRetainMemObject	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::function<decltype(clRetainMemObject)>  real_clRetainMemObject;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
real_clSVMAlloc	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::function<decltype(clSVMAlloc)>         real_clSVMAlloc;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
real_clSVMFree	tests/framework/instruments/OpenCLMemoryUsage.h	/^    std::function<decltype(clSVMFree)>          real_clSVMFree;$/;"	m	class:arm_compute::test::framework::OpenCLMemoryUsage
rebind	include/CL/cl2.hpp	/^    struct rebind$/;"	s	class:cl::SVMAllocator
rect	arm_compute/core/Types.h	/^    Rectangle rect;      \/**< Rectangle specifying the region of interest *\/$/;"	m	struct:arm_compute::ROI
recurrent_to_input_weights	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    const T *recurrent_to_input_weights() const$/;"	f	class:arm_compute::LSTMParams
red_size	include/linux/EGL/fbdev_window.h	/^	unsigned char red_size;$/;"	m	struct:fbdev_pixmap
reduce	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^    static T reduce(F \/*add_fn*\/, vec_n_t<T, N> vec)$/;"	f	struct:arm_compute::__anon297::reduce_add_impl
reduce	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^    static T reduce(F add_fn, vec_n_t<T, N> vec)$/;"	f	struct:arm_compute::__anon297::reduce_add_impl
reduceX	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^    static void reduceX(const Window &window, const ITensor *input, ITensor *output, F f)$/;"	f	class:__anon290::Reducer
reduce_add	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^elem_type_t<V> reduce_add(F add_fn, V vec)$/;"	f	namespace:arm_compute::__anon297
reduce_add_impl	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^struct reduce_add_impl$/;"	s	namespace:arm_compute::__anon297	file:
reduce_add_impl	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^struct reduce_add_impl<T, N, I, I>$/;"	s	namespace:arm_compute::__anon297	file:
reduce_operation	tests/validation/reference/ReductionOperation.cpp	/^T reduce_operation(T *ptr, int reduce_elements, ReductionOperation op)$/;"	f	namespace:arm_compute::test::validation::reference::__anon546
reduce_sumsq	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^void reduce_sumsq(const Window &window, const ITensor *input, ITensor *output, unsigned int axis)$/;"	f	namespace:__anon290
reduction__operation_8cl	documentation/reduction__operation_8cl.js	/^var reduction__operation_8cl =$/;"	v
reduction_operation	tests/validation/reference/ReductionOperation.cpp	/^SimpleTensor<T> reduction_operation(const SimpleTensor<T> &src, const TensorShape &dst_shape, unsigned int axis, ReductionOperation op)$/;"	f	namespace:arm_compute::test::validation::reference
reduction_operation_border_mode	src/runtime/NEON/functions/NEReductionOperation.cpp	/^BorderMode reduction_operation_border_mode(ReductionOperation op)$/;"	f	namespace:__anon324
reduction_window_split_dimension	src/runtime/NEON/functions/NEReductionOperation.cpp	/^size_t reduction_window_split_dimension(unsigned int axis)$/;"	f	namespace:__anon324
reference	include/CL/cl2.hpp	/^    typedef value_type& reference;$/;"	t	class:cl::SVMAllocator
reference	tests/validation/reference/AbsoluteDifference.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/AbsoluteDifference.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Accumulate.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Accumulate.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ActivationLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ActivationLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ArithmeticAddition.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ArithmeticAddition.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ArithmeticSubtraction.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ArithmeticSubtraction.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/BatchNormalizationLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/BatchNormalizationLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/BitwiseAnd.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/BitwiseAnd.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/BitwiseNot.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/BitwiseNot.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/BitwiseOr.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/BitwiseOr.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/BitwiseXor.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/BitwiseXor.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Box3x3.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Box3x3.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ChannelCombine.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ChannelCombine.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ChannelExtract.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ChannelExtract.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ChannelShuffle.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ChannelShuffle.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ConvertFullyConnectedWeights.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ConvertFullyConnectedWeights.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Convolution.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Convolution.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ConvolutionLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ConvolutionLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Copy.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Copy.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/DeconvolutionLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/DeconvolutionLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/DepthConcatenateLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/DepthConcatenateLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/DepthConvertLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/DepthConvertLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/DepthwiseConvolutionLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/DepthwiseConvolutionLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/DepthwiseSeparableConvolutionLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/DepthwiseSeparableConvolutionLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/DequantizationLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/DequantizationLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Derivative.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Derivative.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Dilate.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Dilate.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/EqualizeHistogram.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/EqualizeHistogram.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Erode.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Erode.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/FastCorners.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/FastCorners.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/FixedPoint.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/FixedPoint.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/FixedPointPixelWiseMultiplication.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/FixedPointPixelWiseMultiplication.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/FlattenLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/FlattenLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Floor.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Floor.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/FullyConnectedLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/FullyConnectedLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/GEMM.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/GEMM.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/GEMMInterleave4x4.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/GEMMInterleaveBlocked.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/GEMMLowp.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/GEMMLowp.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/GEMMTranspose1xW.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Gaussian3x3.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Gaussian3x3.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Gaussian5x5.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Gaussian5x5.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/GaussianPyramidHalf.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/GaussianPyramidHalf.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/HOGDescriptor.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/HOGDescriptor.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/HOGDetector.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/HOGDetector.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/HOGMultiDetection.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/HOGMultiDetection.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/HarrisCornerDetector.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/HarrisCornerDetector.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Histogram.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Histogram.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Im2Col.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Im2Col.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/IntegralImage.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/IntegralImage.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/L2NormalizeLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/L2NormalizeLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/LocallyConnected.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/LocallyConnected.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Magnitude.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Magnitude.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/MeanStdDev.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/MeanStdDev.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Median3x3.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Median3x3.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/MinMaxLocation.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/MinMaxLocation.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/NonLinearFilter.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/NonLinearFilter.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/NonMaximaSuppression.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/NonMaximaSuppression.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/NormalizationLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/NormalizationLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/NormalizePlanarYUVLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/NormalizePlanarYUVLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/OpticalFlow.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/OpticalFlow.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Permute.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Permute.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Phase.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Phase.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/PixelWiseMultiplication.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/PixelWiseMultiplication.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/PoolingLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/PoolingLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/QuantizationLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/QuantizationLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ReductionOperation.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ReductionOperation.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Remap.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Remap.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/ReshapeLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/ReshapeLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Scale.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Scale.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Scharr.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Scharr.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Sobel.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Sobel.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/SoftmaxLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/SoftmaxLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/TableLookup.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/TableLookup.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Threshold.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Threshold.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Transpose.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Transpose.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/WarpAffine.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/WarpAffine.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/WarpPerspective.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/WarpPerspective.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/WidthConcatenateLayer.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/WidthConcatenateLayer.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
reference	tests/validation/reference/Winograd.cpp	/^namespace reference$/;"	n	namespace:arm_compute::test::validation	file:
reference	tests/validation/reference/Winograd.h	/^namespace reference$/;"	n	namespace:arm_compute::test::validation
referenceCountable_	include/CL/cl.hpp	/^    bool referenceCountable_;$/;"	m	class:cl::detail::Wrapper
referenceCountable_	include/CL/cl2.hpp	/^    bool referenceCountable_;$/;"	m	class:cl::detail::Wrapper
reference_2_absolute_difference_8cpp	documentation/reference_2_absolute_difference_8cpp.js	/^var reference_2_absolute_difference_8cpp =$/;"	v
reference_2_accumulate_8cpp	documentation/reference_2_accumulate_8cpp.js	/^var reference_2_accumulate_8cpp =$/;"	v
reference_2_arithmetic_addition_8cpp	documentation/reference_2_arithmetic_addition_8cpp.js	/^var reference_2_arithmetic_addition_8cpp =$/;"	v
reference_2_arithmetic_subtraction_8cpp	documentation/reference_2_arithmetic_subtraction_8cpp.js	/^var reference_2_arithmetic_subtraction_8cpp =$/;"	v
reference_2_bitwise_and_8cpp	documentation/reference_2_bitwise_and_8cpp.js	/^var reference_2_bitwise_and_8cpp =$/;"	v
reference_2_bitwise_not_8cpp	documentation/reference_2_bitwise_not_8cpp.js	/^var reference_2_bitwise_not_8cpp =$/;"	v
reference_2_bitwise_or_8cpp	documentation/reference_2_bitwise_or_8cpp.js	/^var reference_2_bitwise_or_8cpp =$/;"	v
reference_2_bitwise_xor_8cpp	documentation/reference_2_bitwise_xor_8cpp.js	/^var reference_2_bitwise_xor_8cpp =$/;"	v
reference_2_box3x3_8cpp	documentation/reference_2_box3x3_8cpp.js	/^var reference_2_box3x3_8cpp =$/;"	v
reference_2_channel_combine_8cpp	documentation/reference_2_channel_combine_8cpp.js	/^var reference_2_channel_combine_8cpp =$/;"	v
reference_2_channel_extract_8cpp	documentation/reference_2_channel_extract_8cpp.js	/^var reference_2_channel_extract_8cpp =$/;"	v
reference_2_channel_shuffle_8cpp	documentation/reference_2_channel_shuffle_8cpp.js	/^var reference_2_channel_shuffle_8cpp =$/;"	v
reference_2_convert_fully_connected_weights_8cpp	documentation/reference_2_convert_fully_connected_weights_8cpp.js	/^var reference_2_convert_fully_connected_weights_8cpp =$/;"	v
reference_2_convolution_8cpp	documentation/reference_2_convolution_8cpp.js	/^var reference_2_convolution_8cpp =$/;"	v
reference_2_copy_8cpp	documentation/reference_2_copy_8cpp.js	/^var reference_2_copy_8cpp =$/;"	v
reference_2_deconvolution_layer_8cpp	documentation/reference_2_deconvolution_layer_8cpp.js	/^var reference_2_deconvolution_layer_8cpp =$/;"	v
reference_2_depth_convert_layer_8cpp	documentation/reference_2_depth_convert_layer_8cpp.js	/^var reference_2_depth_convert_layer_8cpp =$/;"	v
reference_2_derivative_8cpp	documentation/reference_2_derivative_8cpp.js	/^var reference_2_derivative_8cpp =$/;"	v
reference_2_dilate_8cpp	documentation/reference_2_dilate_8cpp.js	/^var reference_2_dilate_8cpp =$/;"	v
reference_2_erode_8cpp	documentation/reference_2_erode_8cpp.js	/^var reference_2_erode_8cpp =$/;"	v
reference_2_fast_corners_8cpp	documentation/reference_2_fast_corners_8cpp.js	/^var reference_2_fast_corners_8cpp =$/;"	v
reference_2_fixed_point_8cpp	documentation/reference_2_fixed_point_8cpp.js	/^var reference_2_fixed_point_8cpp =$/;"	v
reference_2_fixed_point_pixel_wise_multiplication_8cpp	documentation/reference_2_fixed_point_pixel_wise_multiplication_8cpp.js	/^var reference_2_fixed_point_pixel_wise_multiplication_8cpp =$/;"	v
reference_2_gaussian3x3_8cpp	documentation/reference_2_gaussian3x3_8cpp.js	/^var reference_2_gaussian3x3_8cpp =$/;"	v
reference_2_gaussian5x5_8cpp	documentation/reference_2_gaussian5x5_8cpp.js	/^var reference_2_gaussian5x5_8cpp =$/;"	v
reference_2_h_o_g_detector_8cpp	documentation/reference_2_h_o_g_detector_8cpp.js	/^var reference_2_h_o_g_detector_8cpp =$/;"	v
reference_2_h_o_g_multi_detection_8cpp	documentation/reference_2_h_o_g_multi_detection_8cpp.js	/^var reference_2_h_o_g_multi_detection_8cpp =$/;"	v
reference_2_im2_col_8cpp	documentation/reference_2_im2_col_8cpp.js	/^var reference_2_im2_col_8cpp =$/;"	v
reference_2_locally_connected_8cpp	documentation/reference_2_locally_connected_8cpp.js	/^var reference_2_locally_connected_8cpp =$/;"	v
reference_2_non_linear_filter_8cpp	documentation/reference_2_non_linear_filter_8cpp.js	/^var reference_2_non_linear_filter_8cpp =$/;"	v
reference_2_optical_flow_8cpp	documentation/reference_2_optical_flow_8cpp.js	/^var reference_2_optical_flow_8cpp =$/;"	v
reference_2_permute_8cpp	documentation/reference_2_permute_8cpp.js	/^var reference_2_permute_8cpp =$/;"	v
reference_2_pixel_wise_multiplication_8cpp	documentation/reference_2_pixel_wise_multiplication_8cpp.js	/^var reference_2_pixel_wise_multiplication_8cpp =$/;"	v
reference_2_reduction_operation_8cpp	documentation/reference_2_reduction_operation_8cpp.js	/^var reference_2_reduction_operation_8cpp =$/;"	v
reference_2_reduction_operation_8cpp_source.xhtml	documentation/navtreeindex47.js	/^"reference_2_reduction_operation_8cpp_source.xhtml":[6,0,4,6,4,128],$/;"	p	class:NAVTREEINDEX47
reference_2_remap_8cpp	documentation/reference_2_remap_8cpp.js	/^var reference_2_remap_8cpp =$/;"	v
reference_2_scharr_8cpp	documentation/reference_2_scharr_8cpp.js	/^var reference_2_scharr_8cpp =$/;"	v
reference_2_sobel_8cpp	documentation/reference_2_sobel_8cpp.js	/^var reference_2_sobel_8cpp =$/;"	v
reference_2_table_lookup_8cpp	documentation/reference_2_table_lookup_8cpp.js	/^var reference_2_table_lookup_8cpp =$/;"	v
reference_2_threshold_8cpp	documentation/reference_2_threshold_8cpp.js	/^var reference_2_threshold_8cpp =$/;"	v
reference_2_warp_affine_8cpp	documentation/reference_2_warp_affine_8cpp.js	/^var reference_2_warp_affine_8cpp =$/;"	v
reference_2_warp_perspective_8cpp	documentation/reference_2_warp_perspective_8cpp.js	/^var reference_2_warp_perspective_8cpp =$/;"	v
reference_2_width_concatenate_layer_8cpp	documentation/reference_2_width_concatenate_layer_8cpp.js	/^var reference_2_width_concatenate_layer_8cpp =$/;"	v
reference_2_winograd_8cpp	documentation/reference_2_winograd_8cpp.js	/^var reference_2_winograd_8cpp =$/;"	v
region	src/runtime/CL/CLMemory.cpp	/^ICLMemoryRegion *CLMemory::region() const$/;"	f	class:arm_compute::CLMemory
region	src/runtime/CL/CLMemory.cpp	/^ICLMemoryRegion *CLMemory::region()$/;"	f	class:arm_compute::CLMemory
region	src/runtime/Memory.cpp	/^IMemoryRegion *Memory::region() const$/;"	f	class:arm_compute::Memory
region	src/runtime/Memory.cpp	/^IMemoryRegion *Memory::region()$/;"	f	class:arm_compute::Memory
register_group	src/runtime/ISimpleLifetimeManager.cpp	/^void ISimpleLifetimeManager::register_group(IMemoryGroup *group)$/;"	f	class:ISimpleLifetimeManager
register_pool	src/runtime/PoolManager.cpp	/^void PoolManager::register_pool(std::unique_ptr<IMemoryPool> pool)$/;"	f	class:PoolManager
relative_standard_deviation	tests/framework/instruments/InstrumentsStats.h	/^    double relative_standard_deviation() const$/;"	f	class:arm_compute::test::framework::InstrumentsStats
relative_standard_deviation	tests/framework/instruments/Measurement.h	/^        static double relative_standard_deviation(const Value &variance, const Value &mean)$/;"	f	struct:arm_compute::test::framework::Measurement::Value
release	arm_compute/runtime/MemoryGroupBase.h	/^inline void MemoryGroupBase<TensorType>::release()$/;"	f	class:arm_compute::MemoryGroupBase
release	include/CL/cl.hpp	/^    cl_int release() const$/;"	f	class:cl::detail::Wrapper
release	include/CL/cl.hpp	/^    static cl_int release(cl_command_queue queue)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_context context)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_device_id device)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_device_id)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_event event)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_kernel kernel)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_mem memory)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_platform_id)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_program program)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl.hpp	/^    static cl_int release(cl_sampler sampler)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    cl_int release() const$/;"	f	class:cl::detail::Wrapper
release	include/CL/cl2.hpp	/^    static cl_int release(cl_command_queue queue)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_context context)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_device_id device)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_device_id)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_event event)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_kernel kernel)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_mem memory)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_platform_id)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_program program)$/;"	f	struct:cl::detail::ReferenceHandler
release	include/CL/cl2.hpp	/^    static cl_int release(cl_sampler sampler)$/;"	f	struct:cl::detail::ReferenceHandler
release	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void release(const int index)$/;"	f	class:arm_gemm::BufferManager
release	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void release(void)$/;"	f	class:arm_gemm::Buffer
release	src/runtime/BlobMemoryPool.cpp	/^void BlobMemoryPool::release(MemoryMappings &handles)$/;"	f	class:BlobMemoryPool
release	src/runtime/OffsetMemoryPool.cpp	/^void OffsetMemoryPool::release(MemoryMappings &handles)$/;"	f	class:OffsetMemoryPool
release_if_unused	src/graph/backends/CL/CLSubTensorHandle.cpp	/^void CLSubTensorHandle::release_if_unused()$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
release_if_unused	src/graph/backends/CL/CLTensorHandle.cpp	/^void CLTensorHandle::release_if_unused()$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
release_if_unused	src/graph/backends/GLES/GCTensorHandle.cpp	/^void GCTensorHandle::release_if_unused()$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
release_if_unused	src/graph/backends/NEON/NESubTensorHandle.cpp	/^void NESubTensorHandle::release_if_unused()$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
release_if_unused	src/graph/backends/NEON/NETensorHandle.cpp	/^void NETensorHandle::release_if_unused()$/;"	f	class:arm_compute::graph::backends::NETensorHandle
release_unused_tensors	src/graph/detail/ExecutionHelpers.cpp	/^void release_unused_tensors(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
relu	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    explicit relu(ActivationLayerInfo act_info)$/;"	f	struct:arm_compute::detail::relu
relu	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^struct relu$/;"	s	namespace:arm_compute::detail
relu_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float relu_op(float x)$/;"	f
relu_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^vec4 relu_op(vec4 x)$/;"	f
remainder	include/half/half.hpp	/^			static expr remainder(float x, float y)$/;"	f	struct:detail::functions
remainder	include/half/half.hpp	/^		inline expr remainder(expr x, expr y) { return functions::remainder(x, y); }$/;"	f	namespace:detail
remainder	include/half/half.hpp	/^		inline expr remainder(expr x, half y) { return functions::remainder(x, y); }$/;"	f	namespace:detail
remainder	include/half/half.hpp	/^		inline expr remainder(half x, expr y) { return functions::remainder(x, y); }$/;"	f	namespace:detail
remainder	include/half/half.hpp	/^		inline expr remainder(half x, half y) { return functions::remainder(x, y); }$/;"	f	namespace:detail
remap	tests/validation/reference/Remap.cpp	/^SimpleTensor<T> remap(const SimpleTensor<T> &in, SimpleTensor<float> &map_x, SimpleTensor<float> &map_y, SimpleTensor<T> &valid_mask, InterpolationPolicy policy, BorderMode border_mode,$/;"	f	namespace:arm_compute::test::validation::reference
remap_8cl	documentation/remap_8cl.js	/^var remap_8cl =$/;"	v
remap_bilinear	src/core/NEON/kernels/NERemapKernel.cpp	/^void NERemapKernel::remap_bilinear(const Window &window)$/;"	f	class:NERemapKernel
remap_nearest	src/core/NEON/kernels/NERemapKernel.cpp	/^void NERemapKernel::remap_nearest(const Window &window)$/;"	f	class:NERemapKernel
removeToInsertLater	documentation/navtree.js	/^function removeToInsertLater(element) {$/;"	f
remove_connection	src/graph/Graph.cpp	/^bool Graph::remove_connection(EdgeID eid)$/;"	f	class:arm_compute::graph::Graph
remove_dimension	arm_compute/core/TensorShape.h	/^    void remove_dimension(size_t n)$/;"	f	class:arm_compute::TensorShape
remove_logger	src/core/utils/logging/LoggerRegistry.cpp	/^void LoggerRegistry::remove_logger(const std::string &name)$/;"	f	class:LoggerRegistry
remove_node	src/graph/Graph.cpp	/^bool Graph::remove_node(NodeID nid)$/;"	f	class:arm_compute::graph::Graph
remquo	include/half/half.hpp	/^			static expr remquo(float x, float y, int *quo)$/;"	f	struct:detail::functions
remquo	include/half/half.hpp	/^		inline expr remquo(expr x, expr y, int *quo) { return functions::remquo(x, y, quo); }$/;"	f	namespace:detail
remquo	include/half/half.hpp	/^		inline expr remquo(expr x, half y, int *quo) { return functions::remquo(x, y, quo); }$/;"	f	namespace:detail
remquo	include/half/half.hpp	/^		inline expr remquo(half x, expr y, int *quo) { return functions::remquo(x, y, quo); }$/;"	f	namespace:detail
remquo	include/half/half.hpp	/^		inline expr remquo(half x, half y, int *quo) { return functions::remquo(x, y, quo); }$/;"	f	namespace:detail
reorder	arm_compute/core/NEON/kernels/convolution/common/shims.hpp	/^namespace reorder {$/;"	n
requested_target	src/graph/INode.cpp	/^Target INode::requested_target() const$/;"	f	class:arm_compute::graph::INode
required_padding	tests/PaddingCalculator.h	/^inline PaddingSize PaddingCalculator::required_padding() const$/;"	f	class:arm_compute::test::PaddingCalculator
required_padding	tests/PaddingCalculator.h	/^inline PaddingSize PaddingCalculator::required_padding(Option option) const$/;"	f	class:arm_compute::test::PaddingCalculator
rescale	tests/validation/FixedPoint.h	/^    void rescale(uint8_t p)$/;"	f	class:arm_compute::test::fixed_point_arithmetic::fixed_point
reset	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^void CLMinMaxLayerKernel::reset(cl::CommandQueue &queue)$/;"	f	class:CLMinMaxLayerKernel
reset	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^void NEMinMaxLayerKernel::reset()$/;"	f	class:arm_compute::NEMinMaxLayerKernel
reset	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::reset()$/;"	f	class:arm_compute::NEMinMaxKernel
reset	tests/framework/instruments/PMU.cpp	/^void PMU::reset()$/;"	f	class:arm_compute::test::framework::PMU
reset_padding	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::reset_padding()$/;"	f	class:TensorInfo
reshape__layer_8cl	documentation/reshape__layer_8cl.js	/^var reshape__layer_8cl =$/;"	v
reshape_b_only_on_first_run	arm_compute/core/Types.h	/^    bool reshape_b_only_on_first_run() const$/;"	f	class:arm_compute::HOGNormType::GEMMInfo
reshape_b_only_once	tests/benchmark/CL/GEMM.cpp	/^const auto reshape_b_only_once = framework::dataset::make("ReshapeBOnlyOnce", { false, true });$/;"	m	namespace:arm_compute::test::benchmark::__anon338	file:
reshape_b_only_once	tests/benchmark/GLES_COMPUTE/GEMM.cpp	/^const auto reshape_b_only_once = framework::dataset::make("ReshapeBOnlyOnce", { false });$/;"	m	namespace:arm_compute::test::benchmark::__anon357	file:
reshape_b_only_once	tests/benchmark/NEON/GEMM.cpp	/^const auto reshape_b_only_once = framework::dataset::make("ReshapeBOnlyOnce", { false, true });$/;"	m	namespace:arm_compute::test::benchmark::__anon372	file:
reshape_info	arm_compute/core/Types.h	/^    const GEMMReshapeInfo &reshape_info() const$/;"	f	class:arm_compute::HOGNormType::GEMMInfo
reshape_layer	tests/validation/reference/ReshapeLayer.cpp	/^SimpleTensor<T> reshape_layer(const SimpleTensor<T> &src, const TensorShape &output_shape)$/;"	f	namespace:arm_compute::test::validation::reference
reshape_tensor	src/core/NEON/kernels/NEReshapeLayerKernel.cpp	/^inline void reshape_tensor(const Window &window, const ITensor *input, ITensor *output)$/;"	f	namespace:__anon292
resize	arm_compute/core/IArray.h	/^    void resize(size_t num)$/;"	f	class:arm_compute::IArray
resizeHeight	documentation/resize.js	/^function resizeHeight() $/;"	f
resizeWidth	documentation/resize.js	/^function resizeWidth() $/;"	f
resource	include/CL/cl_dx9_media_sharing.h	/^    IDirect3DSurface9 *resource;$/;"	m	struct:_cl_dx9_surface_info_khr
restoreWidth	documentation/resize.js	/^function restoreWidth(navWidth)$/;"	f
result	include/half/half.hpp	/^		template<> struct result<half,half> { typedef half type; };$/;"	s	namespace:half_float
result	include/half/half.hpp	/^		template<typename T,typename U> struct result : enable<expr,T,U> {};$/;"	s	namespace:half_float
result_type	include/CL/cl.hpp	/^	typedef Event result_type;$/;"	t	struct:cl::detail::functionImplementation_
result_type	include/CL/cl2.hpp	/^        typedef Event result_type;$/;"	t	struct:cl::compatibility::make_kernel
result_type	include/CL/cl2.hpp	/^    typedef Event result_type;$/;"	t	class:cl::KernelFunctor
result_type	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    typedef float result_type;$/;"	t	class:arm_gemm::sgemm_8x6
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s16_12x8.hpp	/^    typedef int32_t result_type;$/;"	t	class:arm_gemm::gemm_s16_12x8
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_12x8.hpp	/^    typedef int32_t result_type;$/;"	t	class:arm_gemm::gemm_s8_12x8
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_s8_4x4.hpp	/^    typedef int32_t result_type;$/;"	t	class:arm_gemm::gemm_s8_4x4
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u16_12x8.hpp	/^    typedef uint32_t result_type;$/;"	t	class:arm_gemm::gemm_u16_12x8
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_12x8.hpp	/^    typedef uint32_t result_type;$/;"	t	class:arm_gemm::gemm_u8_12x8
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_gemm_u8_4x4.hpp	/^    typedef uint32_t result_type;$/;"	t	class:arm_gemm::gemm_u8_4x4
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_hgemm_24x8.hpp	/^    typedef __fp16 result_type;$/;"	t	class:arm_gemm::hgemm_24x8
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    typedef float result_type;$/;"	t	class:arm_gemm::sgemm_12x8
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    typedef float result_type;$/;"	t	class:arm_gemm::sgemm_native_16x4
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    typedef float result_type;$/;"	t	class:arm_gemm::sgemv_pretransposed
result_type	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    typedef float result_type;$/;"	t	class:arm_gemm::sgemv_trans
ret	tests/framework/instruments/hwc.hpp	/^    uint32_t ret;$/;"	m	union:mali_userspace::__anon390::kbase_uk_hwcnt_header
ret	tests/framework/instruments/hwc.hpp	/^    uint32_t ret;$/;"	m	union:mali_userspace::uk_header
retain	include/CL/cl.hpp	/^    cl_int retain() const$/;"	f	class:cl::detail::Wrapper
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_command_queue queue)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_context context)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_device_id device)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_device_id)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_event event)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_kernel kernel)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_mem memory)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_platform_id)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_program program)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl.hpp	/^    static cl_int retain(cl_sampler sampler)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    cl_int retain() const$/;"	f	class:cl::detail::Wrapper
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_command_queue queue)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_context context)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_device_id device)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_device_id)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_event event)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_kernel kernel)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_mem memory)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_platform_id)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_program program)$/;"	f	struct:cl::detail::ReferenceHandler
retain	include/CL/cl2.hpp	/^    static cl_int retain(cl_sampler sampler)$/;"	f	struct:cl::detail::ReferenceHandler
reverse_iterable	arm_compute/core/utils/misc/Iterable.h	/^    explicit reverse_iterable(T &it)$/;"	f	class:arm_compute::utils::iterable::reverse_iterable
reverse_iterable	arm_compute/core/utils/misc/Iterable.h	/^class reverse_iterable$/;"	c	namespace:arm_compute::utils::iterable
reverse_iterate	arm_compute/core/utils/misc/Iterable.h	/^reverse_iterable<T> reverse_iterate(T &val)$/;"	f	namespace:arm_compute::utils::iterable
rgb	arm_compute/core/PixelValue.h	/^            uint8_t  rgb[3];  \/**< 3 channels: RGB888 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
rgb_to_luminance	tests/AssetsLibrary.cpp	/^void rgb_to_luminance(const RawTensor &src, RawTensor &dst)$/;"	f	namespace:arm_compute::test::__anon328
rgbx	arm_compute/core/PixelValue.h	/^            uint8_t  rgbx[4]; \/**< 4 channels: RGBX8888 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
right	arm_compute/core/Types.h	/^    unsigned int right;  \/**< right of the border *\/$/;"	m	struct:arm_compute::BorderSize
rint	include/half/half.hpp	/^			static half rint(half arg) { return half(binary, round_half<half::round_style>(arg.data_)); }$/;"	f	struct:detail::functions
rint	include/half/half.hpp	/^		inline half rint(expr arg) { return functions::rint(arg); }$/;"	f	namespace:detail
rint	include/half/half.hpp	/^		inline half rint(half arg) { return functions::rint(arg); }$/;"	f	namespace:detail
roi__pooling__layer_8cl	documentation/roi__pooling__layer_8cl.js	/^var roi__pooling__layer_8cl =$/;"	v
round	arm_compute/core/Types.h	/^    DimensionRoundingType round() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
round	include/half/half.hpp	/^			static half round(half arg) { return half(binary, round_half_up(arg.data_)); }$/;"	f	struct:detail::functions
round	include/half/half.hpp	/^		inline half round(expr arg) { return functions::round(arg); }$/;"	f	namespace:detail
round	include/half/half.hpp	/^		inline half round(half arg) { return functions::round(arg); }$/;"	f	namespace:detail
round	src/core/Rounding.cpp	/^int arm_compute::round(float x, RoundingPolicy rounding_policy)$/;"	f	class:arm_compute
round	support/ToolchainSupport.h	/^inline T round(T value)$/;"	f	namespace:arm_compute::support::cpp11
round_half	include/half/half.hpp	/^		template<std::float_round_style R> uint16 round_half(uint16 value) { return round_half_impl<R,HALF_ROUND_TIES_TO_EVEN>(value); }$/;"	f	namespace:half_float
round_half_even	tests/Utils.h	/^inline T round_half_even(T value, T epsilon = std::numeric_limits<T>::epsilon())$/;"	f	namespace:arm_compute::test
round_half_impl	include/half/half.hpp	/^		template<std::float_round_style R,bool E> uint16 round_half_impl(uint16 value)$/;"	f	namespace:half_float
round_half_up	include/half/half.hpp	/^		inline uint16 round_half_up(uint16 value) { return round_half_impl<std::round_to_nearest,0>(value); }$/;"	f	namespace:half_float
round_half_up	tests/Utils.h	/^inline T round_half_up(T value)$/;"	f	namespace:arm_compute::test
round_style	include/half/half.hpp	/^		static const std::float_round_style round_style = (std::float_round_style)(HALF_ROUND_STYLE);$/;"	m	class:half
rounding_policy	src/graph/nodes/EltwiseLayerNode.cpp	/^RoundingPolicy EltwiseLayerNode::rounding_policy() const$/;"	f	class:arm_compute::graph::EltwiseLayerNode
roundup	arm_compute/core/NEON/kernels/convolution/common/utils.hpp	/^inline T roundup(const T a, const T b)$/;"	f
roundup	src/core/NEON/kernels/arm_gemm/utils.hpp	/^inline T roundup(const T a, const T b)$/;"	f
row_delim	arm_compute/core/Types.h	/^    std::string row_delim;$/;"	m	struct:arm_compute::HOGNormType::IOFormatInfo
row_reduce_max_3	src/core/CL/cl_kernels/non_linear_filter_helpers.h	/^inline uchar8 row_reduce_max_3(uchar16 val)$/;"	f
row_reduce_max_5	src/core/CL/cl_kernels/non_linear_filter_helpers.h	/^inline uchar8 row_reduce_max_5(uchar16 val)$/;"	f
row_reduce_min_3	src/core/CL/cl_kernels/non_linear_filter_helpers.h	/^inline uchar8 row_reduce_min_3(uchar16 val)$/;"	f
row_reduce_min_5	src/core/CL/cl_kernels/non_linear_filter_helpers.h	/^inline uchar8 row_reduce_min_5(uchar16 val)$/;"	f
run	arm_compute/core/NEON/kernels/convolution/depthwise/impl_base.hpp	/^void DepthwiseConvolution<OTR, OTC, KR, KC, SR, SC, TIn, TOut>::run($/;"	f	class:depthwise::DepthwiseConvolution
run	arm_compute/core/NEON/kernels/convolution/winograd/transforms/input.hpp	/^  void WinogradGEMM<otr, otc, kr, kc>::InputTransform<T>::run($/;"	f	class:winograd::WinogradGEMM::InputTransform
run	arm_compute/core/NEON/kernels/convolution/winograd/transforms/kernel.hpp	/^void WinogradGEMM<otr, otc, kr, kc>::WeightsTransform<T>::run($/;"	f	class:WinogradGEMM::WeightsTransform
run	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^  void WinogradGEMM<otr, otc, kr, kc>::OutputTransform<T>::run($/;"	f	class:winograd::WinogradGEMM::OutputTransform
run	arm_compute/runtime/NEON/AssemblyHelper.h	/^    inline void run()$/;"	f	class:arm_compute::final
run	src/core/CL/ICLSimple2DKernel.cpp	/^void ICLSimple2DKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:ICLSimple2DKernel
run	src/core/CL/ICLSimple3DKernel.cpp	/^void ICLSimple3DKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:ICLSimple3DKernel
run	src/core/CL/kernels/CLAbsoluteDifferenceKernel.cpp	/^void CLAbsoluteDifferenceKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLAbsoluteDifferenceKernel
run	src/core/CL/kernels/CLActivationLayerKernel.cpp	/^void CLActivationLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLActivationLayerKernel
run	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^void CLArithmeticAdditionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLArithmeticAdditionKernel
run	src/core/CL/kernels/CLArithmeticSubtractionKernel.cpp	/^void CLArithmeticSubtractionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLArithmeticSubtractionKernel
run	src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp	/^void CLBatchNormalizationLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLBatchNormalizationLayerKernel
run	src/core/CL/kernels/CLBitwiseAndKernel.cpp	/^void CLBitwiseAndKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLBitwiseAndKernel
run	src/core/CL/kernels/CLBitwiseOrKernel.cpp	/^void CLBitwiseOrKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLBitwiseOrKernel
run	src/core/CL/kernels/CLBitwiseXorKernel.cpp	/^void CLBitwiseXorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLBitwiseXorKernel
run	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^void CLEdgeNonMaxSuppressionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLEdgeNonMaxSuppressionKernel
run	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^void CLEdgeTraceKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLEdgeTraceKernel
run	src/core/CL/kernels/CLCannyEdgeKernel.cpp	/^void CLGradientKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGradientKernel
run	src/core/CL/kernels/CLChannelCombineKernel.cpp	/^void CLChannelCombineKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLChannelCombineKernel
run	src/core/CL/kernels/CLChannelExtractKernel.cpp	/^void CLChannelExtractKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLChannelExtractKernel
run	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^void CLChannelShuffleLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:arm_compute::CLChannelShuffleLayerKernel
run	src/core/CL/kernels/CLCol2ImKernel.cpp	/^void CLCol2ImKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLCol2ImKernel
run	src/core/CL/kernels/CLColorConvertKernel.cpp	/^void CLColorConvertKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLColorConvertKernel
run	src/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.cpp	/^void CLConvertFullyConnectedWeightsKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:arm_compute::CLConvertFullyConnectedWeightsKernel
run	src/core/CL/kernels/CLConvolutionKernel.cpp	/^void CLConvolutionRectangleKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLConvolutionRectangleKernel
run	src/core/CL/kernels/CLCopyKernel.cpp	/^void CLCopyKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLCopyKernel
run	src/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.cpp	/^void CLDeconvolutionLayerUpsampleKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDeconvolutionLayerUpsampleKernel
run	src/core/CL/kernels/CLDepthConcatenateLayerKernel.cpp	/^void CLDepthConcatenateLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDepthConcatenateLayerKernel
run	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^void CLDepthwiseConvolutionLayer3x3NCHWKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDepthwiseConvolutionLayer3x3NCHWKernel
run	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^void CLDepthwiseConvolutionLayer3x3NHWCKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDepthwiseConvolutionLayer3x3NHWCKernel
run	src/core/CL/kernels/CLDepthwiseIm2ColKernel.cpp	/^void CLDepthwiseIm2ColKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDepthwiseIm2ColKernel
run	src/core/CL/kernels/CLDepthwiseVectorToTensorKernel.cpp	/^void CLDepthwiseVectorToTensorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDepthwiseVectorToTensorKernel
run	src/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.cpp	/^void CLDepthwiseWeightsReshapeKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDepthwiseWeightsReshapeKernel
run	src/core/CL/kernels/CLDequantizationLayerKernel.cpp	/^void CLDequantizationLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDequantizationLayerKernel
run	src/core/CL/kernels/CLDerivativeKernel.cpp	/^void CLDerivativeKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDerivativeKernel
run	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^void CLDirectConvolutionLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDirectConvolutionLayerKernel
run	src/core/CL/kernels/CLDirectConvolutionOutputStageKernel.cpp	/^void CLDirectConvolutionLayerOutputStageKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLDirectConvolutionLayerOutputStageKernel
run	src/core/CL/kernels/CLFastCornersKernel.cpp	/^void CLCopyToArrayKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLCopyToArrayKernel
run	src/core/CL/kernels/CLFastCornersKernel.cpp	/^void CLFastCornersKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLFastCornersKernel
run	src/core/CL/kernels/CLFillBorderKernel.cpp	/^void CLFillBorderKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLFillBorderKernel
run	src/core/CL/kernels/CLFloorKernel.cpp	/^void CLFloorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLFloorKernel
run	src/core/CL/kernels/CLGEMMInterleave4x4Kernel.cpp	/^void CLGEMMInterleave4x4Kernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMInterleave4x4Kernel
run	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^void CLGEMMLowpMatrixMultiplyKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMLowpMatrixMultiplyKernel
run	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^void CLGEMMLowpOffsetContributionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMLowpOffsetContributionKernel
run	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^void CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
run	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^void CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
run	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^void CLGEMMLowpMatrixAReductionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMLowpMatrixAReductionKernel
run	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^void CLGEMMLowpMatrixBReductionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMLowpMatrixBReductionKernel
run	src/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.cpp	/^void CLGEMMMatrixAccumulateBiasesKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMMatrixAccumulateBiasesKernel
run	src/core/CL/kernels/CLGEMMMatrixAdditionKernel.cpp	/^void CLGEMMMatrixAdditionKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMMatrixAdditionKernel
run	src/core/CL/kernels/CLGEMMMatrixMultiplyKernel.cpp	/^void CLGEMMMatrixMultiplyKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMMatrixMultiplyKernel
run	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^void CLGEMMMatrixVectorMultiplyKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMMatrixVectorMultiplyKernel
run	src/core/CL/kernels/CLGEMMTranspose1xWKernel.cpp	/^void CLGEMMTranspose1xWKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGEMMTranspose1xWKernel
run	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^void CLGaussianPyramidHorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGaussianPyramidHorKernel
run	src/core/CL/kernels/CLGaussianPyramidKernel.cpp	/^void CLGaussianPyramidVertKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLGaussianPyramidVertKernel
run	src/core/CL/kernels/CLHOGDescriptorKernel.cpp	/^void CLHOGBlockNormalizationKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLHOGBlockNormalizationKernel
run	src/core/CL/kernels/CLHOGDescriptorKernel.cpp	/^void CLHOGOrientationBinningKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLHOGOrientationBinningKernel
run	src/core/CL/kernels/CLHOGDetectorKernel.cpp	/^void CLHOGDetectorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLHOGDetectorKernel
run	src/core/CL/kernels/CLHarrisCornersKernel.cpp	/^void CLHarrisScoreKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLHarrisScoreKernel
run	src/core/CL/kernels/CLHistogramKernel.cpp	/^void CLHistogramBorderKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLHistogramBorderKernel
run	src/core/CL/kernels/CLHistogramKernel.cpp	/^void CLHistogramKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLHistogramKernel
run	src/core/CL/kernels/CLIm2ColKernel.cpp	/^void CLIm2ColKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLIm2ColKernel
run	src/core/CL/kernels/CLIntegralImageKernel.cpp	/^void CLIntegralImageVertKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLIntegralImageVertKernel
run	src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp	/^void CLL2NormalizeLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLL2NormalizeLayerKernel
run	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerFinalizeKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLKTrackerFinalizeKernel
run	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerInitKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLKTrackerInitKernel
run	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerStage0Kernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLKTrackerStage0Kernel
run	src/core/CL/kernels/CLLKTrackerKernel.cpp	/^void CLLKTrackerStage1Kernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLKTrackerStage1Kernel
run	src/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.cpp	/^void CLLocallyConnectedMatrixMultiplyKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLocallyConnectedMatrixMultiplyKernel
run	src/core/CL/kernels/CLMagnitudePhaseKernel.cpp	/^void CLMagnitudePhaseKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLMagnitudePhaseKernel
run	src/core/CL/kernels/CLMeanStdDevKernel.cpp	/^void CLMeanStdDevKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLMeanStdDevKernel
run	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^void CLMinMaxLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLMinMaxLayerKernel
run	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^void CLMinMaxKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:arm_compute::CLMinMaxKernel
run	src/core/CL/kernels/CLMinMaxLocationKernel.cpp	/^void CLMinMaxLocationKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:arm_compute::CLMinMaxLocationKernel
run	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^void CLNormalizationLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLNormalizationLayerKernel
run	src/core/CL/kernels/CLPermuteKernel.cpp	/^void CLPermuteKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLPermuteKernel
run	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^void CLPixelWiseMultiplicationKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLPixelWiseMultiplicationKernel
run	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^void CLPoolingLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLPoolingLayerKernel
run	src/core/CL/kernels/CLQuantizationLayerKernel.cpp	/^void CLQuantizationLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLQuantizationLayerKernel
run	src/core/CL/kernels/CLROIPoolingLayerKernel.cpp	/^void CLROIPoolingLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLROIPoolingLayerKernel
run	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^void CLReductionOperationKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLReductionOperationKernel
run	src/core/CL/kernels/CLRemapKernel.cpp	/^void CLRemapKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLRemapKernel
run	src/core/CL/kernels/CLReshapeLayerKernel.cpp	/^void CLReshapeLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLReshapeLayerKernel
run	src/core/CL/kernels/CLScharr3x3Kernel.cpp	/^void CLScharr3x3Kernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLScharr3x3Kernel
run	src/core/CL/kernels/CLSobel3x3Kernel.cpp	/^void CLSobel3x3Kernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLSobel3x3Kernel
run	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^void CLSobel5x5HorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLSobel5x5HorKernel
run	src/core/CL/kernels/CLSobel5x5Kernel.cpp	/^void CLSobel5x5VertKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLSobel5x5VertKernel
run	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^void CLSobel7x7HorKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLSobel7x7HorKernel
run	src/core/CL/kernels/CLSobel7x7Kernel.cpp	/^void CLSobel7x7VertKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLSobel7x7VertKernel
run	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^void CLLogits1DMaxShiftExpSumKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLogits1DMaxShiftExpSumKernel
run	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^void CLLogits1DNormKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLLogits1DNormKernel
run	src/core/CL/kernels/CLWeightsReshapeKernel.cpp	/^void CLWeightsReshapeKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLWeightsReshapeKernel
run	src/core/CL/kernels/CLWidthConcatenateLayerKernel.cpp	/^void CLWidthConcatenateLayerKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLWidthConcatenateLayerKernel
run	src/core/CL/kernels/CLWinogradFilterTransformKernel.cpp	/^void CLWinogradFilterTransformKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLWinogradFilterTransformKernel
run	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^void CLWinogradInputTransformKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLWinogradInputTransformKernel
run	src/core/CL/kernels/CLWinogradOutputTransformKernel.cpp	/^void CLWinogradOutputTransformKernel::run(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLWinogradOutputTransformKernel
run	src/core/CPP/kernels/CPPCornerCandidatesKernel.cpp	/^void CPPCornerCandidatesKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:CPPCornerCandidatesKernel
run	src/core/CPP/kernels/CPPDetectionWindowNonMaximaSuppressionKernel.cpp	/^void CPPDetectionWindowNonMaximaSuppressionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:CPPDetectionWindowNonMaximaSuppressionKernel
run	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^void CPPPermuteKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:CPPPermuteKernel
run	src/core/CPP/kernels/CPPSortEuclideanDistanceKernel.cpp	/^void CPPSortEuclideanDistanceKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:CPPSortEuclideanDistanceKernel
run	src/core/CPP/kernels/CPPUpsampleKernel.cpp	/^void CPPUpsampleKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:CPPUpsampleKernel
run	src/core/GLES_COMPUTE/IGCSimple2DKernel.cpp	/^void IGCSimple2DKernel::run(const Window &window)$/;"	f	class:IGCSimple2DKernel
run	src/core/GLES_COMPUTE/IGCSimple3DKernel.cpp	/^void IGCSimple3DKernel::run(const Window &window)$/;"	f	class:IGCSimple3DKernel
run	src/core/GLES_COMPUTE/kernels/GCAbsoluteDifferenceKernel.cpp	/^void GCAbsoluteDifferenceKernel::run(const Window &window)$/;"	f	class:GCAbsoluteDifferenceKernel
run	src/core/GLES_COMPUTE/kernels/GCActivationLayerKernel.cpp	/^void GCActivationLayerKernel::run(const Window &window)$/;"	f	class:GCActivationLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.cpp	/^void GCArithmeticAdditionKernel::run(const Window &window)$/;"	f	class:GCArithmeticAdditionKernel
run	src/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.cpp	/^void GCBatchNormalizationLayerKernel::run(const Window &window)$/;"	f	class:GCBatchNormalizationLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCCol2ImKernel.cpp	/^void GCCol2ImKernel::run(const Window &window)$/;"	f	class:GCCol2ImKernel
run	src/core/GLES_COMPUTE/kernels/GCDepthConcatenateLayerKernel.cpp	/^void GCDepthConcatenateLayerKernel::run(const Window &window)$/;"	f	class:GCDepthConcatenateLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCDepthwiseConvolutionLayer3x3Kernel.cpp	/^void GCDepthwiseConvolutionLayer3x3Kernel::run(const Window &window)$/;"	f	class:GCDepthwiseConvolutionLayer3x3Kernel
run	src/core/GLES_COMPUTE/kernels/GCDirectConvolutionLayerKernel.cpp	/^void GCDirectConvolutionLayerKernel<kernel_size>::run(const Window &window)$/;"	f	class:GCDirectConvolutionLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCDropoutLayerKernel.cpp	/^void GCDropoutLayerKernel::run(const Window &window)$/;"	f	class:GCDropoutLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCFillBorderKernel.cpp	/^void GCFillBorderKernel::run(const Window &window)$/;"	f	class:GCFillBorderKernel
run	src/core/GLES_COMPUTE/kernels/GCGEMMInterleave4x4Kernel.cpp	/^void GCGEMMInterleave4x4Kernel::run(const Window &window)$/;"	f	class:GCGEMMInterleave4x4Kernel
run	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAccumulateBiasesKernel.cpp	/^void GCGEMMMatrixAccumulateBiasesKernel::run(const Window &window)$/;"	f	class:GCGEMMMatrixAccumulateBiasesKernel
run	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixAdditionKernel.cpp	/^void GCGEMMMatrixAdditionKernel::run(const Window &window)$/;"	f	class:GCGEMMMatrixAdditionKernel
run	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.cpp	/^void GCGEMMMatrixMultiplyKernel::run(const Window &window)$/;"	f	class:GCGEMMMatrixMultiplyKernel
run	src/core/GLES_COMPUTE/kernels/GCGEMMTranspose1xWKernel.cpp	/^void GCGEMMTranspose1xWKernel::run(const Window &window)$/;"	f	class:GCGEMMTranspose1xWKernel
run	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^void GCIm2ColKernel::run(const Window &window)$/;"	f	class:GCIm2ColKernel
run	src/core/GLES_COMPUTE/kernels/GCNormalizationLayerKernel.cpp	/^void GCNormalizationLayerKernel::run(const Window &window)$/;"	f	class:GCNormalizationLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCNormalizePlanarYUVLayerKernel.cpp	/^void GCNormalizePlanarYUVLayerKernel::run(const Window &window)$/;"	f	class:GCNormalizePlanarYUVLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCPixelWiseMultiplicationKernel.cpp	/^void GCPixelWiseMultiplicationKernel::run(const Window &window)$/;"	f	class:GCPixelWiseMultiplicationKernel
run	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^void GCPoolingLayerKernel::run(const Window &window)$/;"	f	class:GCPoolingLayerKernel
run	src/core/GLES_COMPUTE/kernels/GCScaleKernel.cpp	/^void GCScaleKernel::run(const Window &window)$/;"	f	class:GCScaleKernel
run	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^void GCLogits1DNormKernel::run(const Window &window)$/;"	f	class:GCLogits1DNormKernel
run	src/core/GLES_COMPUTE/kernels/GCSoftmaxLayerKernel.cpp	/^void GCLogits1DShiftExpSumKernel::run(const Window &window)$/;"	f	class:GCLogits1DShiftExpSumKernel
run	src/core/GLES_COMPUTE/kernels/GCTensorShiftKernel.cpp	/^void GCTensorShiftKernel::run(const Window &window)$/;"	f	class:GCTensorShiftKernel
run	src/core/GLES_COMPUTE/kernels/GCTransposeKernel.cpp	/^void GCTransposeKernel::run(const Window &window)$/;"	f	class:GCTransposeKernel
run	src/core/GLES_COMPUTE/kernels/GCWeightsReshapeKernel.cpp	/^void GCWeightsReshapeKernel::run(const Window &window)$/;"	f	class:GCWeightsReshapeKernel
run	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^void NEAbsoluteDifferenceKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEAbsoluteDifferenceKernel
run	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEAccumulateKernel
run	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateSquaredKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEAccumulateSquaredKernel
run	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateWeightedFP16Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEAccumulateWeightedFP16Kernel
run	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^void NEAccumulateWeightedKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEAccumulateWeightedKernel
run	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^void NEActivationLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEActivationLayerKernel
run	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^void NEArithmeticAdditionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEArithmeticAdditionKernel
run	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void NEArithmeticSubtractionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEArithmeticSubtractionKernel
run	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^void NEBatchNormalizationLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBatchNormalizationLayerKernel
run	src/core/NEON/kernels/NEBitwiseAndKernel.cpp	/^void NEBitwiseAndKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBitwiseAndKernel
run	src/core/NEON/kernels/NEBitwiseNotKernel.cpp	/^void NEBitwiseNotKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBitwiseNotKernel
run	src/core/NEON/kernels/NEBitwiseOrKernel.cpp	/^void NEBitwiseOrKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBitwiseOrKernel
run	src/core/NEON/kernels/NEBitwiseXorKernel.cpp	/^void NEBitwiseXorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBitwiseXorKernel
run	src/core/NEON/kernels/NEBox3x3Kernel.cpp	/^void NEBox3x3FP16Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBox3x3FP16Kernel
run	src/core/NEON/kernels/NEBox3x3Kernel.cpp	/^void NEBox3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEBox3x3Kernel
run	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEEdgeNonMaxSuppressionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEEdgeNonMaxSuppressionKernel
run	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEEdgeTraceKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEEdgeTraceKernel
run	src/core/NEON/kernels/NECannyEdgeKernel.cpp	/^void NEGradientKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGradientKernel
run	src/core/NEON/kernels/NEChannelCombineKernel.cpp	/^void NEChannelCombineKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEChannelCombineKernel
run	src/core/NEON/kernels/NEChannelExtractKernel.cpp	/^void NEChannelExtractKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEChannelExtractKernel
run	src/core/NEON/kernels/NECol2ImKernel.cpp	/^void NECol2ImKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NECol2ImKernel
run	src/core/NEON/kernels/NEColorConvertKernel.cpp	/^void NEColorConvertKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEColorConvertKernel
run	src/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.cpp	/^void NEConvertFullyConnectedWeightsKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEConvertFullyConnectedWeightsKernel
run	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionKernel<matrix_size>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEConvolutionKernel
run	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NEConvolutionRectangleKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEConvolutionRectangleKernel
run	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionHorKernel<matrix_size>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NESeparableConvolutionHorKernel
run	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^void NESeparableConvolutionVertKernel<matrix_size>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NESeparableConvolutionVertKernel
run	src/core/NEON/kernels/NECumulativeDistributionKernel.cpp	/^void NECumulativeDistributionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NECumulativeDistributionKernel
run	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^void NEDepthConcatenateLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthConcatenateLayerKernel
run	src/core/NEON/kernels/NEDepthConvertLayerKernel.cpp	/^void NEDepthConvertLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthConvertLayerKernel
run	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
run	src/core/NEON/kernels/NEDepthwiseIm2ColKernel.cpp	/^void NEDepthwiseIm2ColKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthwiseIm2ColKernel
run	src/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.cpp	/^void NEDepthwiseVectorToTensorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthwiseVectorToTensorKernel
run	src/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.cpp	/^void NEDepthwiseWeightsReshapeKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthwiseWeightsReshapeKernel
run	src/core/NEON/kernels/NEDequantizationLayerKernel.cpp	/^void NEDequantizationLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDequantizationLayerKernel
run	src/core/NEON/kernels/NEDerivativeKernel.cpp	/^void NEDerivativeKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDerivativeKernel
run	src/core/NEON/kernels/NEDilateKernel.cpp	/^void NEDilateKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDilateKernel
run	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^void NEDirectConvolutionLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDirectConvolutionLayerKernel
run	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^void NEDirectConvolutionLayerOutputStageKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDirectConvolutionLayerOutputStageKernel
run	src/core/NEON/kernels/NEErodeKernel.cpp	/^void NEErodeKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEErodeKernel
run	src/core/NEON/kernels/NEFastCornersKernel.cpp	/^void NEFastCornersKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEFastCornersKernel
run	src/core/NEON/kernels/NEFillArrayKernel.cpp	/^void NEFillArrayKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEFillArrayKernel
run	src/core/NEON/kernels/NEFillBorderKernel.cpp	/^void NEFillBorderKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEFillBorderKernel
run	src/core/NEON/kernels/NEFillInnerBorderKernel.cpp	/^void NEFillInnerBorderKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEFillInnerBorderKernel
run	src/core/NEON/kernels/NEFloorKernel.cpp	/^void NEFloorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEFloorKernel
run	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^void NEGEMMInterleave4x4Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMInterleave4x4Kernel
run	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^void NEGEMMLowpMatrixMultiplyKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMLowpMatrixMultiplyKernel
run	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^void NEGEMMLowpOffsetContributionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMLowpOffsetContributionKernel
run	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::run(const Window &window)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
run	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
run	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::run(const Window &window)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
run	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^void NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
run	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^void NEGEMMLowpMatrixAReductionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMLowpMatrixAReductionKernel
run	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^void NEGEMMLowpMatrixBReductionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMLowpMatrixBReductionKernel
run	src/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.cpp	/^void NEGEMMMatrixAccumulateBiasesKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMMatrixAccumulateBiasesKernel
run	src/core/NEON/kernels/NEGEMMMatrixAdditionKernel.cpp	/^void NEGEMMMatrixAdditionKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMMatrixAdditionKernel
run	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void NEGEMMMatrixMultiplyKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMMatrixMultiplyKernel
run	src/core/NEON/kernels/NEGEMMMatrixVectorMultiplyKernel.cpp	/^void NEGEMMMatrixVectorMultiplyKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMMatrixVectorMultiplyKernel
run	src/core/NEON/kernels/NEGEMMTranspose1xWKernel.cpp	/^void NEGEMMTranspose1xWKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGEMMTranspose1xWKernel
run	src/core/NEON/kernels/NEGaussian3x3Kernel.cpp	/^void NEGaussian3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGaussian3x3Kernel
run	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^void NEGaussian5x5HorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGaussian5x5HorKernel
run	src/core/NEON/kernels/NEGaussian5x5Kernel.cpp	/^void NEGaussian5x5VertKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGaussian5x5VertKernel
run	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^void NEGaussianPyramidHorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGaussianPyramidHorKernel
run	src/core/NEON/kernels/NEGaussianPyramidKernel.cpp	/^void NEGaussianPyramidVertKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEGaussianPyramidVertKernel
run	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void NEHOGBlockNormalizationKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEHOGBlockNormalizationKernel
run	src/core/NEON/kernels/NEHOGDescriptorKernel.cpp	/^void NEHOGOrientationBinningKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEHOGOrientationBinningKernel
run	src/core/NEON/kernels/NEHOGDetectorKernel.cpp	/^void NEHOGDetectorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEHOGDetectorKernel
run	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^void NEHarrisScoreFP16Kernel<block_size>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEHarrisScoreFP16Kernel
run	src/core/NEON/kernels/NEHarrisCornersKernel.cpp	/^void NEHarrisScoreKernel<block_size>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEHarrisScoreKernel
run	src/core/NEON/kernels/NEHistogramKernel.cpp	/^void NEHistogramKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEHistogramKernel
run	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^void NEIm2ColKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEIm2ColKernel
run	src/core/NEON/kernels/NEIntegralImageKernel.cpp	/^void NEIntegralImageKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEIntegralImageKernel
run	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^void NEL2NormalizeLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEL2NormalizeLayerKernel
run	src/core/NEON/kernels/NELKTrackerKernel.cpp	/^void NELKTrackerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NELKTrackerKernel
run	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^void NELocallyConnectedMatrixMultiplyKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NELocallyConnectedMatrixMultiplyKernel
run	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseFP16Kernel<mag_type, phase_type>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEMagnitudePhaseFP16Kernel
run	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^void NEMagnitudePhaseKernel<mag_type, phase_type>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEMagnitudePhaseKernel
run	src/core/NEON/kernels/NEMeanStdDevKernel.cpp	/^void NEMeanStdDevKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEMeanStdDevKernel
run	src/core/NEON/kernels/NEMedian3x3Kernel.cpp	/^void NEMedian3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEMedian3x3Kernel
run	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^void NEMinMaxLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEMinMaxLayerKernel
run	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEMinMaxKernel
run	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxLocationKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEMinMaxLocationKernel
run	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^void NENonLinearFilterKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NENonLinearFilterKernel
run	src/core/NEON/kernels/NENonMaximaSuppression3x3Kernel.cpp	/^void NENonMaximaSuppression3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NENonMaximaSuppression3x3Kernel
run	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^void NENormalizationLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NENormalizationLayerKernel
run	src/core/NEON/kernels/NEPermuteKernel.cpp	/^void NEPermuteKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEPermuteKernel
run	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^void NEPixelWiseMultiplicationKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEPixelWiseMultiplicationKernel
run	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^void NEPoolingLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEPoolingLayerKernel
run	src/core/NEON/kernels/NEQuantizationLayerKernel.cpp	/^void NEQuantizationLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEQuantizationLayerKernel
run	src/core/NEON/kernels/NEROIPoolingLayerKernel.cpp	/^void NEROIPoolingLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEROIPoolingLayerKernel
run	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^void NEReductionOperationKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEReductionOperationKernel
run	src/core/NEON/kernels/NERemapKernel.cpp	/^void NERemapKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NERemapKernel
run	src/core/NEON/kernels/NEReshapeLayerKernel.cpp	/^void NEReshapeLayerKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEReshapeLayerKernel
run	src/core/NEON/kernels/NEScaleKernel.cpp	/^void NEScaleKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEScaleKernel
run	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^void NEScharr3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEScharr3x3Kernel
run	src/core/NEON/kernels/NESobel3x3Kernel.cpp	/^void NESobel3x3Kernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NESobel3x3Kernel
run	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^void NESobel5x5HorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NESobel5x5HorKernel
run	src/core/NEON/kernels/NESobel5x5Kernel.cpp	/^void NESobel5x5VertKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NESobel5x5VertKernel
run	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^void NESobel7x7HorKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NESobel7x7HorKernel
run	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^void NESobel7x7VertKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NESobel7x7VertKernel
run	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void NELogits1DMaxKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NELogits1DMaxKernel
run	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^void NELogits1DSoftmaxKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NELogits1DSoftmaxKernel
run	src/core/NEON/kernels/NETableLookupKernel.cpp	/^void NETableLookupKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NETableLookupKernel
run	src/core/NEON/kernels/NEThresholdKernel.cpp	/^void NEThresholdKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEThresholdKernel
run	src/core/NEON/kernels/NETransposeKernel.cpp	/^void NETransposeKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NETransposeKernel
run	src/core/NEON/kernels/NEWarpKernel.cpp	/^void INEWarpKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:INEWarpKernel
run	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^void NEWeightsReshapeKernel::run(const Window &window, const ThreadInfo &info)$/;"	f	class:NEWeightsReshapeKernel
run	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
run	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerTransformInputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEWinogradLayerTransformInputKernel
run	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
run	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^void NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::run(const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
run	src/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.cpp	/^void BatchedBlockedGemm<MBlock, NBlock, TIn, TOut>::run($/;"	f	class:BatchedBlockedGemm
run	src/graph/PassManager.cpp	/^void PassManager::run(Graph &g, size_t index)$/;"	f	class:arm_compute::graph::PassManager
run	src/graph/frontend/Stream.cpp	/^void Stream::run()$/;"	f	class:arm_compute::graph::frontend::Stream
run	src/runtime/CL/ICLSimpleFunction.cpp	/^void ICLSimpleFunction::run()$/;"	f	class:ICLSimpleFunction
run	src/runtime/CL/functions/CLBatchNormalizationLayer.cpp	/^void CLBatchNormalizationLayer::run()$/;"	f	class:CLBatchNormalizationLayer
run	src/runtime/CL/functions/CLCannyEdge.cpp	/^void CLCannyEdge::run()$/;"	f	class:CLCannyEdge
run	src/runtime/CL/functions/CLConvolution.cpp	/^void                   CLConvolutionSquare<matrix_size>::run()$/;"	f	class:CLConvolutionSquare
run	src/runtime/CL/functions/CLConvolutionLayer.cpp	/^void CLConvolutionLayer::run()$/;"	f	class:CLConvolutionLayer
run	src/runtime/CL/functions/CLDeconvolutionLayer.cpp	/^void CLDeconvolutionLayer::run()$/;"	f	class:CLDeconvolutionLayer
run	src/runtime/CL/functions/CLDeconvolutionLayerUpsample.cpp	/^void CLDeconvolutionLayerUpsample::run()$/;"	f	class:CLDeconvolutionLayerUpsample
run	src/runtime/CL/functions/CLDepthConcatenateLayer.cpp	/^void CLDepthConcatenateLayer::run()$/;"	f	class:CLDepthConcatenateLayer
run	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^void CLDepthwiseConvolutionLayer3x3::run()$/;"	f	class:CLDepthwiseConvolutionLayer3x3
run	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^void CLDepthwiseConvolutionLayer::run()$/;"	f	class:CLDepthwiseConvolutionLayer
run	src/runtime/CL/functions/CLDepthwiseSeparableConvolutionLayer.cpp	/^void CLDepthwiseSeparableConvolutionLayer::run()$/;"	f	class:CLDepthwiseSeparableConvolutionLayer
run	src/runtime/CL/functions/CLDequantizationLayer.cpp	/^void CLDequantizationLayer::run()$/;"	f	class:CLDequantizationLayer
run	src/runtime/CL/functions/CLDirectConvolutionLayer.cpp	/^void CLDirectConvolutionLayer::run()$/;"	f	class:CLDirectConvolutionLayer
run	src/runtime/CL/functions/CLEqualizeHistogram.cpp	/^void CLEqualizeHistogram::run()$/;"	f	class:CLEqualizeHistogram
run	src/runtime/CL/functions/CLFastCorners.cpp	/^void CLFastCorners::run()$/;"	f	class:CLFastCorners
run	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^void CLFullyConnectedLayer::run()$/;"	f	class:CLFullyConnectedLayer
run	src/runtime/CL/functions/CLGEMM.cpp	/^void CLGEMM::run()$/;"	f	class:CLGEMM
run	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^void CLConvolutionLayerReshapeWeights::run()$/;"	f	class:CLConvolutionLayerReshapeWeights
run	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^void CLGEMMConvolutionLayer::run()$/;"	f	class:CLGEMMConvolutionLayer
run	src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp	/^void CLGEMMLowpMatrixMultiplyCore::run()$/;"	f	class:CLGEMMLowpMatrixMultiplyCore
run	src/runtime/CL/functions/CLGaussian5x5.cpp	/^void CLGaussian5x5::run()$/;"	f	class:CLGaussian5x5
run	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^void CLGaussianPyramidHalf::run()$/;"	f	class:CLGaussianPyramidHalf
run	src/runtime/CL/functions/CLGaussianPyramid.cpp	/^void CLGaussianPyramidOrb::run()$/;"	f	class:CLGaussianPyramidOrb
run	src/runtime/CL/functions/CLHOGDescriptor.cpp	/^void CLHOGDescriptor::run()$/;"	f	class:CLHOGDescriptor
run	src/runtime/CL/functions/CLHOGDetector.cpp	/^void CLHOGDetector::run()$/;"	f	class:CLHOGDetector
run	src/runtime/CL/functions/CLHOGGradient.cpp	/^void CLHOGGradient::run()$/;"	f	class:CLHOGGradient
run	src/runtime/CL/functions/CLHOGMultiDetection.cpp	/^void CLHOGMultiDetection::run()$/;"	f	class:CLHOGMultiDetection
run	src/runtime/CL/functions/CLHarrisCorners.cpp	/^void CLHarrisCorners::run()$/;"	f	class:CLHarrisCorners
run	src/runtime/CL/functions/CLHistogram.cpp	/^void CLHistogram::run()$/;"	f	class:CLHistogram
run	src/runtime/CL/functions/CLIntegralImage.cpp	/^void CLIntegralImage::run()$/;"	f	class:CLIntegralImage
run	src/runtime/CL/functions/CLL2NormalizeLayer.cpp	/^void CLL2NormalizeLayer::run()$/;"	f	class:CLL2NormalizeLayer
run	src/runtime/CL/functions/CLLSTMLayer.cpp	/^void CLLSTMLayer::run()$/;"	f	class:CLLSTMLayer
run	src/runtime/CL/functions/CLLaplacianPyramid.cpp	/^void CLLaplacianPyramid::run()$/;"	f	class:CLLaplacianPyramid
run	src/runtime/CL/functions/CLLaplacianReconstruct.cpp	/^void CLLaplacianReconstruct::run()$/;"	f	class:CLLaplacianReconstruct
run	src/runtime/CL/functions/CLLocallyConnectedLayer.cpp	/^void CLLocallyConnectedLayer::run()$/;"	f	class:CLLocallyConnectedLayer
run	src/runtime/CL/functions/CLMeanStdDev.cpp	/^void CLMeanStdDev::run()$/;"	f	class:CLMeanStdDev
run	src/runtime/CL/functions/CLMinMaxLocation.cpp	/^void CLMinMaxLocation::run()$/;"	f	class:arm_compute::CLMinMaxLocation
run	src/runtime/CL/functions/CLNormalizationLayer.cpp	/^void CLNormalizationLayer::run()$/;"	f	class:CLNormalizationLayer
run	src/runtime/CL/functions/CLOpticalFlow.cpp	/^void CLOpticalFlow::run()$/;"	f	class:CLOpticalFlow
run	src/runtime/CL/functions/CLQuantizationLayer.cpp	/^void CLQuantizationLayer::run()$/;"	f	class:CLQuantizationLayer
run	src/runtime/CL/functions/CLRNNLayer.cpp	/^void CLRNNLayer::run()$/;"	f	class:CLRNNLayer
run	src/runtime/CL/functions/CLReductionOperation.cpp	/^void CLReductionOperation::run()$/;"	f	class:CLReductionOperation
run	src/runtime/CL/functions/CLSobel5x5.cpp	/^void CLSobel5x5::run()$/;"	f	class:CLSobel5x5
run	src/runtime/CL/functions/CLSobel7x7.cpp	/^void CLSobel7x7::run()$/;"	f	class:CLSobel7x7
run	src/runtime/CL/functions/CLSoftmaxLayer.cpp	/^void CLSoftmaxLayer::run()$/;"	f	class:CLSoftmaxLayer
run	src/runtime/CL/functions/CLWidthConcatenateLayer.cpp	/^void CLWidthConcatenateLayer::run()$/;"	f	class:CLWidthConcatenateLayer
run	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^void CLWinogradConvolutionLayer::run()$/;"	f	class:CLWinogradConvolutionLayer
run	src/runtime/CPP/ICPPSimpleFunction.cpp	/^void ICPPSimpleFunction::run()$/;"	f	class:ICPPSimpleFunction
run	src/runtime/GLES_COMPUTE/IGCSimpleFunction.cpp	/^void IGCSimpleFunction::run()$/;"	f	class:IGCSimpleFunction
run	src/runtime/GLES_COMPUTE/functions/GCBatchNormalizationLayer.cpp	/^void GCBatchNormalizationLayer::run()$/;"	f	class:GCBatchNormalizationLayer
run	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^void GCConvolutionLayer::run()$/;"	f	class:GCConvolutionLayer
run	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^void GCConvolutionLayerReshapeWeights::run()$/;"	f	class:GCConvolutionLayerReshapeWeights
run	src/runtime/GLES_COMPUTE/functions/GCDepthConcatenateLayer.cpp	/^void GCDepthConcatenateLayer::run()$/;"	f	class:GCDepthConcatenateLayer
run	src/runtime/GLES_COMPUTE/functions/GCDepthwiseConvolutionLayer.cpp	/^void GCDepthwiseConvolutionLayer3x3::run()$/;"	f	class:GCDepthwiseConvolutionLayer3x3
run	src/runtime/GLES_COMPUTE/functions/GCDirectConvolutionLayer.cpp	/^void GCDirectConvolutionLayer::run()$/;"	f	class:GCDirectConvolutionLayer
run	src/runtime/GLES_COMPUTE/functions/GCDropoutLayer.cpp	/^void GCDropoutLayer::run()$/;"	f	class:GCDropoutLayer
run	src/runtime/GLES_COMPUTE/functions/GCFullyConnectedLayer.cpp	/^void GCFullyConnectedLayer::run()$/;"	f	class:GCFullyConnectedLayer
run	src/runtime/GLES_COMPUTE/functions/GCGEMM.cpp	/^void GCGEMM::run()$/;"	f	class:GCGEMM
run	src/runtime/GLES_COMPUTE/functions/GCNormalizationLayer.cpp	/^void GCNormalizationLayer::run()$/;"	f	class:GCNormalizationLayer
run	src/runtime/GLES_COMPUTE/functions/GCNormalizePlanarYUVLayer.cpp	/^void GCNormalizePlanarYUVLayer::run()$/;"	f	class:GCNormalizePlanarYUVLayer
run	src/runtime/GLES_COMPUTE/functions/GCPoolingLayer.cpp	/^void GCPoolingLayer::run()$/;"	f	class:GCPoolingLayer
run	src/runtime/GLES_COMPUTE/functions/GCSoftmaxLayer.cpp	/^void GCSoftmaxLayer::run()$/;"	f	class:GCSoftmaxLayer
run	src/runtime/NEON/INESimpleFunction.cpp	/^void INESimpleFunction::run()$/;"	f	class:INESimpleFunction
run	src/runtime/NEON/functions/NEBatchNormalizationLayer.cpp	/^void NEBatchNormalizationLayer::run()$/;"	f	class:NEBatchNormalizationLayer
run	src/runtime/NEON/functions/NECannyEdge.cpp	/^void NECannyEdge::run()$/;"	f	class:NECannyEdge
run	src/runtime/NEON/functions/NEConvertFullyConnectedWeights.cpp	/^void NEConvertFullyConnectedWeights::run()$/;"	f	class:NEConvertFullyConnectedWeights
run	src/runtime/NEON/functions/NEConvolution.cpp	/^void                   NEConvolutionSquare<matrix_size>::run()$/;"	f	class:NEConvolutionSquare
run	src/runtime/NEON/functions/NEConvolutionLayer.cpp	/^void NEConvolutionLayer::run()$/;"	f	class:arm_compute::NEConvolutionLayer
run	src/runtime/NEON/functions/NEDeconvolutionLayer.cpp	/^void NEDeconvolutionLayer::run()$/;"	f	class:NEDeconvolutionLayer
run	src/runtime/NEON/functions/NEDepthConcatenateLayer.cpp	/^void NEDepthConcatenateLayer::run()$/;"	f	class:NEDepthConcatenateLayer
run	src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp	/^void NEDepthwiseConvolutionLayer3x3::run()$/;"	f	class:NEDepthwiseConvolutionLayer3x3
run	src/runtime/NEON/functions/NEDepthwiseConvolutionLayer.cpp	/^void NEDepthwiseConvolutionLayer::run()$/;"	f	class:NEDepthwiseConvolutionLayer
run	src/runtime/NEON/functions/NEDepthwiseSeparableConvolutionLayer.cpp	/^void NEDepthwiseSeparableConvolutionLayer::run()$/;"	f	class:NEDepthwiseSeparableConvolutionLayer
run	src/runtime/NEON/functions/NEDequantizationLayer.cpp	/^void NEDequantizationLayer::run()$/;"	f	class:NEDequantizationLayer
run	src/runtime/NEON/functions/NEDerivative.cpp	/^void NEDerivative::run()$/;"	f	class:NEDerivative
run	src/runtime/NEON/functions/NEDirectConvolutionLayer.cpp	/^void NEDirectConvolutionLayer::run()$/;"	f	class:NEDirectConvolutionLayer
run	src/runtime/NEON/functions/NEEqualizeHistogram.cpp	/^void NEEqualizeHistogram::run()$/;"	f	class:NEEqualizeHistogram
run	src/runtime/NEON/functions/NEFastCorners.cpp	/^void NEFastCorners::run()$/;"	f	class:NEFastCorners
run	src/runtime/NEON/functions/NEFillBorder.cpp	/^void NEFillBorder::run()$/;"	f	class:NEFillBorder
run	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^void NEFullyConnectedLayer::run()$/;"	f	class:NEFullyConnectedLayer
run	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^void NEFullyConnectedLayerReshapeWeights::run()$/;"	f	class:NEFullyConnectedLayerReshapeWeights
run	src/runtime/NEON/functions/NEGEMM.cpp	/^void NEGEMM::run()$/;"	f	class:arm_compute::NEGEMM
run	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^void NEConvolutionLayerReshapeWeights::run()$/;"	f	class:arm_compute::NEConvolutionLayerReshapeWeights
run	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^void NEGEMMConvolutionLayer::run()$/;"	f	class:arm_compute::NEGEMMConvolutionLayer
run	src/runtime/NEON/functions/NEGEMMLowpAssemblyMatrixMultiplyCore.cpp	/^void NEGEMMLowpAssemblyMatrixMultiplyCore::run()$/;"	f	class:NEGEMMLowpAssemblyMatrixMultiplyCore
run	src/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.cpp	/^void NEGEMMLowpMatrixMultiplyCore::run()$/;"	f	class:NEGEMMLowpMatrixMultiplyCore
run	src/runtime/NEON/functions/NEGaussian5x5.cpp	/^void NEGaussian5x5::run()$/;"	f	class:NEGaussian5x5
run	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^void NEGaussianPyramidHalf::run()$/;"	f	class:NEGaussianPyramidHalf
run	src/runtime/NEON/functions/NEGaussianPyramid.cpp	/^void NEGaussianPyramidOrb::run()$/;"	f	class:NEGaussianPyramidOrb
run	src/runtime/NEON/functions/NEHOGDescriptor.cpp	/^void NEHOGDescriptor::run()$/;"	f	class:NEHOGDescriptor
run	src/runtime/NEON/functions/NEHOGGradient.cpp	/^void NEHOGGradient::run()$/;"	f	class:NEHOGGradient
run	src/runtime/NEON/functions/NEHOGMultiDetection.cpp	/^void NEHOGMultiDetection::run()$/;"	f	class:NEHOGMultiDetection
run	src/runtime/NEON/functions/NEHarrisCorners.cpp	/^void NEHarrisCorners::run()$/;"	f	class:NEHarrisCorners
run	src/runtime/NEON/functions/NEHistogram.cpp	/^void NEHistogram::run()$/;"	f	class:NEHistogram
run	src/runtime/NEON/functions/NEIm2Col.cpp	/^void NEIm2Col::run()$/;"	f	class:NEIm2Col
run	src/runtime/NEON/functions/NEL2NormalizeLayer.cpp	/^void NEL2NormalizeLayer::run()$/;"	f	class:NEL2NormalizeLayer
run	src/runtime/NEON/functions/NELaplacianPyramid.cpp	/^void NELaplacianPyramid::run()$/;"	f	class:NELaplacianPyramid
run	src/runtime/NEON/functions/NELaplacianReconstruct.cpp	/^void NELaplacianReconstruct::run()$/;"	f	class:NELaplacianReconstruct
run	src/runtime/NEON/functions/NELocallyConnectedLayer.cpp	/^void NELocallyConnectedLayer::run()$/;"	f	class:NELocallyConnectedLayer
run	src/runtime/NEON/functions/NEMeanStdDev.cpp	/^void NEMeanStdDev::run()$/;"	f	class:NEMeanStdDev
run	src/runtime/NEON/functions/NEMinMaxLocation.cpp	/^void NEMinMaxLocation::run()$/;"	f	class:NEMinMaxLocation
run	src/runtime/NEON/functions/NENormalizationLayer.cpp	/^void NENormalizationLayer::run()$/;"	f	class:NENormalizationLayer
run	src/runtime/NEON/functions/NEOpticalFlow.cpp	/^void NEOpticalFlow::run()$/;"	f	class:NEOpticalFlow
run	src/runtime/NEON/functions/NEPoolingLayer.cpp	/^void NEPoolingLayer::run()$/;"	f	class:NEPoolingLayer
run	src/runtime/NEON/functions/NEQuantizationLayer.cpp	/^void NEQuantizationLayer::run()$/;"	f	class:NEQuantizationLayer
run	src/runtime/NEON/functions/NEROIPoolingLayer.cpp	/^void NEROIPoolingLayer::run()$/;"	f	class:NEROIPoolingLayer
run	src/runtime/NEON/functions/NEReductionOperation.cpp	/^void NEReductionOperation::run()$/;"	f	class:NEReductionOperation
run	src/runtime/NEON/functions/NEScale.cpp	/^void NEScale::run()$/;"	f	class:NEScale
run	src/runtime/NEON/functions/NESobel5x5.cpp	/^void NESobel5x5::run()$/;"	f	class:NESobel5x5
run	src/runtime/NEON/functions/NESobel7x7.cpp	/^void NESobel7x7::run()$/;"	f	class:NESobel7x7
run	src/runtime/NEON/functions/NESoftmaxLayer.cpp	/^void NESoftmaxLayer::run()$/;"	f	class:NESoftmaxLayer
run	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^void NEWinogradConvolutionLayer::run()$/;"	f	class:arm_compute::NEWinogradConvolutionLayer
run	tests/benchmark/fixtures/ActivationLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::ActivationLayerFixture
run	tests/benchmark/fixtures/AlexNetFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::AlexNetFixture
run	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::BatchNormalizationLayerFixture
run	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::ConvolutionLayerFixture
run	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::DepthConcatenateLayerFixture
run	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::DepthwiseConvolutionLayerFixture
run	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::DepthwiseSeparableConvolutionLayerFixture
run	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::DequantizationLayerFixture
run	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::DirectConvolutionLayerFixture
run	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::EqualizeHistogramFixture
run	tests/benchmark/fixtures/FlattenLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::FlattenLayerFixture
run	tests/benchmark/fixtures/FloorFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::FloorFixture
run	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::FullyConnectedLayerFixture
run	tests/benchmark/fixtures/GEMMFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::GEMMFixture
run	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::GEMMInterleave4x4Fixture
run	tests/benchmark/fixtures/GEMMLowpFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::GEMMLowpMatrixMultiplyCoreFixture
run	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::HOGDescriptorFixture
run	tests/benchmark/fixtures/HarrisCornersFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::HarrisCornersFixture
run	tests/benchmark/fixtures/HistogramFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::HistogramFixture
run	tests/benchmark/fixtures/IntegralImageFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::IntegralImageFixture
run	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::L2NormalizeLayerFixture
run	tests/benchmark/fixtures/LeNet5Fixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::LeNet5Fixture
run	tests/benchmark/fixtures/MagnitudeFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::MagnitudeFixture
run	tests/benchmark/fixtures/MeanStdDevFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::MeanStdDevFixture
run	tests/benchmark/fixtures/Median3x3Fixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::Median3x3Fixture
run	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::MinMaxLocationFixture
run	tests/benchmark/fixtures/MobileNetFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::MobileNetFixture
run	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::MobileNetV1Fixture
run	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::NormalizationLayerFixture
run	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::NormalizePlanarYUVLayerFixture
run	tests/benchmark/fixtures/PhaseFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::PhaseFixture
run	tests/benchmark/fixtures/PoolingLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::PoolingLayerFixture
run	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::QuantizationLayerFixture
run	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::ROIPoolingLayerFixture
run	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::ReshapeLayerFixture
run	tests/benchmark/fixtures/ScaleFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::ScaleFixture
run	tests/benchmark/fixtures/ScaleLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::ScaleLayerFixture
run	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::SoftmaxLayerFixture
run	tests/benchmark/fixtures/TransposeFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::TransposeFixture
run	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^    void run()$/;"	f	class:arm_compute::test::benchmark::WinogradConvolutionLayerFixture
run	tests/framework/Framework.cpp	/^bool Framework::run()$/;"	f	class:arm_compute::test::framework::Framework
run	tests/networks/AlexNetNetwork.h	/^        void run()$/;"	f	struct:arm_compute::test::networks::AlexNetNetwork::DirectConv
run	tests/networks/AlexNetNetwork.h	/^    void run()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
run	tests/networks/LeNet5Network.h	/^    void run()$/;"	f	class:arm_compute::test::networks::LeNet5Network
run	tests/networks/MobileNetNetwork.h	/^    void run()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
run	tests/networks/MobileNetV1Network.h	/^    void run()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
run_all	src/graph/PassManager.cpp	/^void PassManager::run_all(Graph &g)$/;"	f	class:arm_compute::graph::PassManager
run_binary	src/core/NEON/kernels/NEThresholdKernel.cpp	/^inline void NEThresholdKernel::run_binary(const Window &window)$/;"	f	class:NEThresholdKernel
run_col2im	src/core/NEON/kernels/NECol2ImKernel.cpp	/^void NECol2ImKernel::run_col2im(const Window &window)$/;"	f	class:NECol2ImKernel
run_convert_fc_weights	src/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.cpp	/^void NEConvertFullyConnectedWeightsKernel::run_convert_fc_weights(const Window &window)$/;"	f	class:NEConvertFullyConnectedWeightsKernel
run_example	utils/Utils.cpp	/^int run_example(int argc, char **argv, std::unique_ptr<Example> example)$/;"	f	namespace:arm_compute::utils
run_example	utils/Utils.h	/^int run_example(int argc, char **argv)$/;"	f	namespace:arm_compute::utils
run_generic	src/core/CL/kernels/CLIm2ColKernel.cpp	/^void CLIm2ColKernel::run_generic(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLIm2ColKernel
run_generic	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^void GCIm2ColKernel::run_generic(const Window &window)$/;"	f	class:GCIm2ColKernel
run_generic	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::run_generic(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
run_generic	src/core/NEON/kernels/NEDepthwiseIm2ColKernel.cpp	/^void NEDepthwiseIm2ColKernel::run_generic(const Window &window)$/;"	f	class:NEDepthwiseIm2ColKernel
run_generic	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^void NEIm2ColKernel::run_generic(const Window &window)$/;"	f	class:NEIm2ColKernel
run_optim_small_tensor	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline bool run_optim_small_tensor(const ITensor *t)$/;"	f	namespace:__anon256
run_optim_small_tensor_info	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^inline bool run_optim_small_tensor_info(const ITensorInfo *t)$/;"	f	namespace:__anon256
run_optimized	src/core/NEON/kernels/NEDepthwiseConvolutionLayer3x3Kernel.cpp	/^void NEDepthwiseConvolutionLayer3x3Kernel::run_optimized(const Window &window, const ThreadInfo &info)$/;"	f	class:NEDepthwiseConvolutionLayer3x3Kernel
run_permute	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^void CPPPermuteKernel::run_permute(const Window &window)$/;"	f	class:CPPPermuteKernel
run_permute	src/core/NEON/kernels/NEPermuteKernel.cpp	/^void NEPermuteKernel::run_permute(const Window &window)$/;"	f	class:NEPermuteKernel
run_range	src/core/NEON/kernels/NEThresholdKernel.cpp	/^inline void NEThresholdKernel::run_range(const Window &window)$/;"	f	class:NEThresholdKernel
run_reduced	src/core/CL/kernels/CLIm2ColKernel.cpp	/^void CLIm2ColKernel::run_reduced(const Window &window, cl::CommandQueue &queue)$/;"	f	class:CLIm2ColKernel
run_reduced	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^void GCIm2ColKernel::run_reduced(const Window &window)$/;"	f	class:GCIm2ColKernel
run_reduced	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^void NEIm2ColKernel::run_reduced(const Window &window)$/;"	f	class:NEIm2ColKernel
run_test	tests/framework/Framework.cpp	/^void Framework::run_test(const TestInfo &info, TestCaseFactory &test_factory)$/;"	f	class:arm_compute::test::framework::Framework
runtime_2_tensor_8h	documentation/runtime_2_tensor_8h.js	/^var runtime_2_tensor_8h =$/;"	v
s	include/CL/cl_platform.h	/^    cl_char   CL_ALIGNED(8) s[8];$/;"	m	union:__anon13
s	include/CL/cl_platform.h	/^    cl_char  CL_ALIGNED(16) s[16];$/;"	m	union:__anon17
s	include/CL/cl_platform.h	/^    cl_char  CL_ALIGNED(2) s[2];$/;"	m	union:__anon5
s	include/CL/cl_platform.h	/^    cl_char  CL_ALIGNED(4) s[4];$/;"	m	union:__anon9
s	include/CL/cl_platform.h	/^    cl_double   CL_ALIGNED(64) s[8];$/;"	m	union:__anon173
s	include/CL/cl_platform.h	/^    cl_double  CL_ALIGNED(128) s[16];$/;"	m	union:__anon177
s	include/CL/cl_platform.h	/^    cl_double  CL_ALIGNED(16) s[2];$/;"	m	union:__anon165
s	include/CL/cl_platform.h	/^    cl_double  CL_ALIGNED(32) s[4];$/;"	m	union:__anon169
s	include/CL/cl_platform.h	/^    cl_float   CL_ALIGNED(32) s[8];$/;"	m	union:__anon157
s	include/CL/cl_platform.h	/^    cl_float  CL_ALIGNED(16) s[4];$/;"	m	union:__anon153
s	include/CL/cl_platform.h	/^    cl_float  CL_ALIGNED(64) s[16];$/;"	m	union:__anon161
s	include/CL/cl_platform.h	/^    cl_float  CL_ALIGNED(8) s[2];$/;"	m	union:__anon149
s	include/CL/cl_platform.h	/^    cl_half   CL_ALIGNED(16) s[8];$/;"	m	union:__anon77
s	include/CL/cl_platform.h	/^    cl_half  CL_ALIGNED(32) s[16];$/;"	m	union:__anon81
s	include/CL/cl_platform.h	/^    cl_half  CL_ALIGNED(4) s[2];$/;"	m	union:__anon69
s	include/CL/cl_platform.h	/^    cl_half  CL_ALIGNED(8) s[4];$/;"	m	union:__anon73
s	include/CL/cl_platform.h	/^    cl_int   CL_ALIGNED(32) s[8];$/;"	m	union:__anon93
s	include/CL/cl_platform.h	/^    cl_int  CL_ALIGNED(16) s[4];$/;"	m	union:__anon89
s	include/CL/cl_platform.h	/^    cl_int  CL_ALIGNED(64) s[16];$/;"	m	union:__anon97
s	include/CL/cl_platform.h	/^    cl_int  CL_ALIGNED(8) s[2];$/;"	m	union:__anon85
s	include/CL/cl_platform.h	/^    cl_long   CL_ALIGNED(64) s[8];$/;"	m	union:__anon125
s	include/CL/cl_platform.h	/^    cl_long  CL_ALIGNED(128) s[16];$/;"	m	union:__anon129
s	include/CL/cl_platform.h	/^    cl_long  CL_ALIGNED(16) s[2];$/;"	m	union:__anon117
s	include/CL/cl_platform.h	/^    cl_long  CL_ALIGNED(32) s[4];$/;"	m	union:__anon121
s	include/CL/cl_platform.h	/^    cl_short   CL_ALIGNED(16) s[8];$/;"	m	union:__anon45
s	include/CL/cl_platform.h	/^    cl_short  CL_ALIGNED(32) s[16];$/;"	m	union:__anon49
s	include/CL/cl_platform.h	/^    cl_short  CL_ALIGNED(4) s[2];$/;"	m	union:__anon37
s	include/CL/cl_platform.h	/^    cl_short  CL_ALIGNED(8) s[4];$/;"	m	union:__anon41
s	include/CL/cl_platform.h	/^    cl_uchar   CL_ALIGNED(8) s[8];$/;"	m	union:__anon29
s	include/CL/cl_platform.h	/^    cl_uchar  CL_ALIGNED(16) s[16];$/;"	m	union:__anon33
s	include/CL/cl_platform.h	/^    cl_uchar  CL_ALIGNED(2) s[2];$/;"	m	union:__anon21
s	include/CL/cl_platform.h	/^    cl_uchar  CL_ALIGNED(4) s[4];$/;"	m	union:__anon25
s	include/CL/cl_platform.h	/^    cl_uint   CL_ALIGNED(32) s[8];$/;"	m	union:__anon109
s	include/CL/cl_platform.h	/^    cl_uint  CL_ALIGNED(16) s[4];$/;"	m	union:__anon105
s	include/CL/cl_platform.h	/^    cl_uint  CL_ALIGNED(64) s[16];$/;"	m	union:__anon113
s	include/CL/cl_platform.h	/^    cl_uint  CL_ALIGNED(8) s[2];$/;"	m	union:__anon101
s	include/CL/cl_platform.h	/^    cl_ulong   CL_ALIGNED(64) s[8];$/;"	m	union:__anon141
s	include/CL/cl_platform.h	/^    cl_ulong  CL_ALIGNED(128) s[16];$/;"	m	union:__anon145
s	include/CL/cl_platform.h	/^    cl_ulong  CL_ALIGNED(16) s[2];$/;"	m	union:__anon133
s	include/CL/cl_platform.h	/^    cl_ulong  CL_ALIGNED(32) s[4];$/;"	m	union:__anon137
s	include/CL/cl_platform.h	/^    cl_ushort   CL_ALIGNED(16) s[8];$/;"	m	union:__anon61
s	include/CL/cl_platform.h	/^    cl_ushort  CL_ALIGNED(32) s[16];$/;"	m	union:__anon65
s	include/CL/cl_platform.h	/^    cl_ushort  CL_ALIGNED(4) s[2];$/;"	m	union:__anon53
s	include/CL/cl_platform.h	/^    cl_ushort  CL_ALIGNED(8) s[4];$/;"	m	union:__anon57
s0	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s0	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s0	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3; };$/;"	m	struct:__anon73::__anon75
s0	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1; };$/;"	m	struct:__anon69::__anon71
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3; };$/;"	m	struct:__anon9::__anon11
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1; };$/;"	m	struct:__anon5::__anon7
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3; };$/;"	m	struct:__anon169::__anon171
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double s0, s1; };$/;"	m	struct:__anon165::__anon167
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3; };$/;"	m	struct:__anon153::__anon155
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1; };$/;"	m	struct:__anon149::__anon151
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3; };$/;"	m	struct:__anon89::__anon91
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1; };$/;"	m	struct:__anon85::__anon87
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3; };$/;"	m	struct:__anon121::__anon123
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1; };$/;"	m	struct:__anon117::__anon119
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3; };$/;"	m	struct:__anon41::__anon43
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1; };$/;"	m	struct:__anon37::__anon39
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3; };$/;"	m	struct:__anon25::__anon27
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1; };$/;"	m	struct:__anon21::__anon23
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3; };$/;"	m	struct:__anon105::__anon107
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1; };$/;"	m	struct:__anon101::__anon103
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3; };$/;"	m	struct:__anon137::__anon139
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1; };$/;"	m	struct:__anon133::__anon135
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3; };$/;"	m	struct:__anon57::__anon59
s0	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1; };$/;"	m	struct:__anon53::__anon55
s1	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s1	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s1	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3; };$/;"	m	struct:__anon73::__anon75
s1	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1; };$/;"	m	struct:__anon69::__anon71
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3; };$/;"	m	struct:__anon9::__anon11
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1; };$/;"	m	struct:__anon5::__anon7
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3; };$/;"	m	struct:__anon169::__anon171
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double s0, s1; };$/;"	m	struct:__anon165::__anon167
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3; };$/;"	m	struct:__anon153::__anon155
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1; };$/;"	m	struct:__anon149::__anon151
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3; };$/;"	m	struct:__anon89::__anon91
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1; };$/;"	m	struct:__anon85::__anon87
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3; };$/;"	m	struct:__anon121::__anon123
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1; };$/;"	m	struct:__anon117::__anon119
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3; };$/;"	m	struct:__anon41::__anon43
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1; };$/;"	m	struct:__anon37::__anon39
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3; };$/;"	m	struct:__anon25::__anon27
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1; };$/;"	m	struct:__anon21::__anon23
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3; };$/;"	m	struct:__anon105::__anon107
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1; };$/;"	m	struct:__anon101::__anon103
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3; };$/;"	m	struct:__anon137::__anon139
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1; };$/;"	m	struct:__anon133::__anon135
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3; };$/;"	m	struct:__anon57::__anon59
s1	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1; };$/;"	m	struct:__anon53::__anon55
s16	arm_compute/core/PixelValue.h	/^            int16_t  s16;     \/**< Single channel S16 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
s2	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s2	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s2	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3; };$/;"	m	struct:__anon73::__anon75
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3; };$/;"	m	struct:__anon9::__anon11
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3; };$/;"	m	struct:__anon169::__anon171
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3; };$/;"	m	struct:__anon153::__anon155
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3; };$/;"	m	struct:__anon89::__anon91
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3; };$/;"	m	struct:__anon121::__anon123
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3; };$/;"	m	struct:__anon41::__anon43
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3; };$/;"	m	struct:__anon25::__anon27
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3; };$/;"	m	struct:__anon105::__anon107
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3; };$/;"	m	struct:__anon137::__anon139
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s2	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3; };$/;"	m	struct:__anon57::__anon59
s3	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s3	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s3	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3; };$/;"	m	struct:__anon73::__anon75
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3; };$/;"	m	struct:__anon9::__anon11
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3; };$/;"	m	struct:__anon169::__anon171
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3; };$/;"	m	struct:__anon153::__anon155
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3; };$/;"	m	struct:__anon89::__anon91
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3; };$/;"	m	struct:__anon121::__anon123
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3; };$/;"	m	struct:__anon41::__anon43
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3; };$/;"	m	struct:__anon25::__anon27
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3; };$/;"	m	struct:__anon105::__anon107
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3; };$/;"	m	struct:__anon137::__anon139
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s3	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3; };$/;"	m	struct:__anon57::__anon59
s32	arm_compute/core/PixelValue.h	/^            int32_t  s32;     \/**< Single channel S32 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
s4	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s4	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s4	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s5	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s5	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s5	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s6	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s6	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s6	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s64	arm_compute/core/PixelValue.h	/^            int64_t  s64;     \/**< Single channel S64 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
s7	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s7	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon77::__anon79
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon13::__anon15
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon173::__anon175
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon157::__anon159
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon93::__anon95
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon125::__anon127
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon45::__anon47
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon29::__anon31
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon109::__anon111
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon141::__anon143
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s7	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7; };$/;"	m	struct:__anon61::__anon63
s8	arm_compute/core/PixelValue.h	/^            int8_t   s8;      \/**< Single channel S8 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
s8	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s8	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
s9	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
s9	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sA	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
sA	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sB	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
sB	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sC	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
sC	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sD	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
sD	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sE	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
sE	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sF	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon81::__anon83
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon17::__anon19
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon177::__anon179
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon161::__anon163
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon97::__anon99
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon129::__anon131
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon49::__anon51
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon33::__anon35
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon113::__anon115
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon145::__anon147
sF	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, sA, sB, sC, sD, sE, sF; };$/;"	m	struct:__anon65::__anon67
sa	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
sa	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
sad_adjust_mode	include/CL/cl_ext_intel.h	/^    cl_uint sad_adjust_mode;$/;"	m	struct:_cl_motion_estimation_desc_intel
safe_read	tests/validation/reference/GEMMInterleaveBlocked.h	/^T safe_read(const SimpleTensor<T> &t, int y, int x)$/;"	f	namespace:arm_compute::test::validation::reference
sample_counters	tests/framework/instruments/MaliCounter.cpp	/^void MaliCounter::sample_counters()$/;"	f	class:arm_compute::test::framework::MaliCounter
saturate_cast	arm_compute/core/utils/misc/Utility.h	/^T saturate_cast(U val)$/;"	f	namespace:arm_compute::utility
saturate_cast	tests/Utils.h	/^T saturate_cast(T val)$/;"	f	namespace:arm_compute::test
saturate_cast	tests/validation/FixedPoint.h	/^    static constexpr T saturate_cast(U val)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
save_to_file	src/runtime/CL/CLTuner.cpp	/^void CLTuner::save_to_file(const std::string &filename) const$/;"	f	class:CLTuner
save_to_npy	utils/Utils.h	/^void save_to_npy(T &tensor, const std::string &npy_filename, bool fortran_order)$/;"	f	namespace:arm_compute::utils
save_to_ppm	utils/Utils.h	/^void save_to_ppm(T &tensor, const std::string &ppm_filename)$/;"	f	namespace:arm_compute::utils
saver	scripts/tensorflow_data_extractor.py	/^    saver = tf.train.import_meta_graph(args.netFile)$/;"	v
sb	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
sb	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
sc	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
sc	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
scalbln	include/half/half.hpp	/^			static half scalbln(half arg, long exp)$/;"	f	struct:detail::functions
scalbln	include/half/half.hpp	/^		inline half scalbln(expr arg, long exp) { return functions::scalbln(arg, exp); }$/;"	f	namespace:detail
scalbln	include/half/half.hpp	/^		inline half scalbln(half arg, long exp) { return functions::scalbln(arg, exp); }$/;"	f	namespace:detail
scalbn	include/half/half.hpp	/^		inline half scalbn(expr arg, int exp) { return functions::scalbln(arg, exp); }$/;"	f	namespace:detail
scalbn	include/half/half.hpp	/^		inline half scalbn(half arg, int exp) { return functions::scalbln(arg, exp); }$/;"	f	namespace:detail
scale	arm_compute/core/Types.h	/^    float scale;  \/**< scale *\/$/;"	m	struct:arm_compute::QuantizationInfo
scale	src/core/CL/cl_kernels/types.h	/^    float scale;           \/**< Initialized to 0 by corner detectors. *\/$/;"	m	struct:Keypoint
scale	src/core/PyramidInfo.cpp	/^float PyramidInfo::scale() const$/;"	f	class:PyramidInfo
scale	tests/validation/reference/Scale.cpp	/^SimpleTensor<T> scale(const SimpleTensor<T> &in, float scale_x, float scale_y, InterpolationPolicy policy, BorderMode border_mode, T constant_border_value,$/;"	f	namespace:arm_compute::test::validation::reference
scale255_S32_S32	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^inline int32x4_t scale255_S32_S32(int32x4_t in)$/;"	f	namespace:__anon287
scale255_U16_U16	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^inline uint16x8_t scale255_U16_U16(uint16x8_t in)$/;"	f	namespace:__anon287
scale255_constant	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^const float       scale255_constant      = 1.f \/ 255.f;$/;"	m	namespace:__anon287	file:
scale255_constant_f32q	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^const float32x4_t scale255_constant_f32q = vdupq_n_f32(scale255_constant);$/;"	m	namespace:__anon287	file:
scale_255	tests/validation/CL/PixelWiseMultiplication.cpp	/^const float scale_255   = 1.f \/ 255.f;$/;"	m	namespace:arm_compute::test::validation::__anon439	file:
scale_255	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	/^const float scale_255   = 1.f \/ 255.f;$/;"	m	namespace:arm_compute::test::validation::__anon494	file:
scale_255	tests/validation/NEON/PixelWiseMultiplication.cpp	/^const float scale_255   = 1.f \/ 255.f;$/;"	m	namespace:arm_compute::test::validation::__anon515	file:
scale_8cl	documentation/scale_8cl.js	/^var scale_8cl =$/;"	v
scale_area_nchw	src/core/NEON/kernels/NEScaleKernel.cpp	/^void NEScaleKernel::scale_area_nchw(const Window &window)$/;"	f	class:arm_compute::NEScaleKernel
scale_bilinear_nchw	src/core/NEON/kernels/NEScaleKernel.cpp	/^void NEScaleKernel::scale_bilinear_nchw(const Window &window)$/;"	f	class:arm_compute::NEScaleKernel
scale_bilinear_nhwc_core	src/core/NEON/kernels/NEScaleKernel.cpp	/^inline void scale_bilinear_nhwc_core(const ITensor *input, const ITensor *offsets, const ITensor *dx, const ITensor *dy, ITensor *output,$/;"	f	namespace:arm_compute::__anon293
scale_coeff	arm_compute/core/Types.h	/^    float scale_coeff() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
scale_input	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^inline void scale_input(int32x4x4_t &in_s32, int32x4_t result_offset_s32, int32_t result_mult_int)$/;"	f	namespace:__anon265
scale_nearest_nchw	src/core/NEON/kernels/NEScaleKernel.cpp	/^void NEScaleKernel::scale_nearest_nchw(const Window &window)$/;"	f	class:arm_compute::NEScaleKernel
scale_nearest_nhwc_core	src/core/NEON/kernels/NEScaleKernel.cpp	/^inline void scale_nearest_nhwc_core(const ITensor *input, const ITensor *offsets, ITensor *output,$/;"	f	namespace:arm_compute::__anon293
scale_nhwc	src/core/NEON/kernels/NEScaleKernel.cpp	/^void NEScaleKernel::scale_nhwc(const Window &window)$/;"	f	class:arm_compute::NEScaleKernel
scale_other	tests/validation/NEON/PixelWiseMultiplication.cpp	/^const float scale_other = 1.f \/ 32768.f;$/;"	m	namespace:arm_compute::test::validation::__anon515	file:
scale_tracked_points	tests/validation/reference/OpticalFlow.cpp	/^void scale_tracked_points(size_t level, size_t num_levels, bool use_initial_estimate,$/;"	f	namespace:arm_compute::test::validation::reference::__anon544
scale_unity	tests/validation/CL/PixelWiseMultiplication.cpp	/^const float scale_unity = 1.f;$/;"	m	namespace:arm_compute::test::validation::__anon439	file:
scale_unity	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	/^const float scale_unity = 1.f;$/;"	m	namespace:arm_compute::test::validation::__anon494	file:
scale_unity	tests/validation/NEON/PixelWiseMultiplication.cpp	/^const float scale_unity = 1.f;$/;"	m	namespace:arm_compute::test::validation::__anon515	file:
scale_vector_s16x8	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^inline void scale_vector_s16x8(uint16x8_t &v, const Coordinates &id, int id_offset, int step,$/;"	f	namespace:__anon288
scaled_dimensions	src/core/Utils.cpp	/^const std::pair<unsigned int, unsigned int> arm_compute::scaled_dimensions(unsigned int width, unsigned int height,$/;"	f	class:arm_compute
scharr	tests/validation/reference/Scharr.cpp	/^std::pair<SimpleTensor<T>, SimpleTensor<T>> scharr(const SimpleTensor<U> &src, int filter_size, BorderMode border_mode, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	namespace:arm_compute::test::validation::reference
scharr__filter_8cl	documentation/scharr__filter_8cl.js	/^var scharr__filter_8cl =$/;"	v
scharr_x	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^inline int16x8_t scharr_x(const int16x8x2_t &top, const int16x8x2_t &middle, const int16x8x2_t &bottom)$/;"	f	namespace:__anon294
scharr_y	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^inline int16x8_t scharr_y(const int16x8x2_t &top, const int16x8x2_t &bottom)$/;"	f	namespace:__anon294
schedule	src/runtime/CPP/CPPScheduler.cpp	/^void CPPScheduler::schedule(ICPPKernel *kernel, unsigned int split_dimension)$/;"	f	class:arm_compute::CPPScheduler
schedule	src/runtime/CPP/SingleThreadScheduler.cpp	/^void SingleThreadScheduler::schedule(ICPPKernel *kernel, unsigned int split_dimension)$/;"	f	class:arm_compute::SingleThreadScheduler
schedule	src/runtime/OMP/OMPScheduler.cpp	/^void OMPScheduler::schedule(ICPPKernel *kernel, unsigned int split_dimension)$/;"	f	class:OMPScheduler
score	src/core/CL/cl_kernels/types.h	/^    float  score;     \/**< Confidence value for the detection window *\/$/;"	m	struct:DetectionWindow
script.onreadystatechange	documentation/navtree.js	/^    script.onreadystatechange = function() {$/;"	f
sd	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
sd	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
se	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
se	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
searchData	documentation/search/all_0.js	/^var searchData=$/;"	v
searchData	documentation/search/all_1.js	/^var searchData=$/;"	v
searchData	documentation/search/all_10.js	/^var searchData=$/;"	v
searchData	documentation/search/all_11.js	/^var searchData=$/;"	v
searchData	documentation/search/all_12.js	/^var searchData=$/;"	v
searchData	documentation/search/all_13.js	/^var searchData=$/;"	v
searchData	documentation/search/all_14.js	/^var searchData=$/;"	v
searchData	documentation/search/all_15.js	/^var searchData=$/;"	v
searchData	documentation/search/all_16.js	/^var searchData=$/;"	v
searchData	documentation/search/all_17.js	/^var searchData=$/;"	v
searchData	documentation/search/all_18.js	/^var searchData=$/;"	v
searchData	documentation/search/all_19.js	/^var searchData=$/;"	v
searchData	documentation/search/all_1a.js	/^var searchData=$/;"	v
searchData	documentation/search/all_1b.js	/^var searchData=$/;"	v
searchData	documentation/search/all_1c.js	/^var searchData=$/;"	v
searchData	documentation/search/all_2.js	/^var searchData=$/;"	v
searchData	documentation/search/all_3.js	/^var searchData=$/;"	v
searchData	documentation/search/all_4.js	/^var searchData=$/;"	v
searchData	documentation/search/all_5.js	/^var searchData=$/;"	v
searchData	documentation/search/all_6.js	/^var searchData=$/;"	v
searchData	documentation/search/all_7.js	/^var searchData=$/;"	v
searchData	documentation/search/all_8.js	/^var searchData=$/;"	v
searchData	documentation/search/all_9.js	/^var searchData=$/;"	v
searchData	documentation/search/all_a.js	/^var searchData=$/;"	v
searchData	documentation/search/all_b.js	/^var searchData=$/;"	v
searchData	documentation/search/all_c.js	/^var searchData=$/;"	v
searchData	documentation/search/all_d.js	/^var searchData=$/;"	v
searchData	documentation/search/all_e.js	/^var searchData=$/;"	v
searchData	documentation/search/all_f.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_0.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_1.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_10.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_11.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_12.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_13.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_14.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_15.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_16.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_17.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_2.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_3.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_4.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_5.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_6.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_7.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_8.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_9.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_a.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_b.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_c.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_d.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_e.js	/^var searchData=$/;"	v
searchData	documentation/search/classes_f.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_0.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_1.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_10.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_11.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_12.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_13.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_14.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_2.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_3.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_4.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_5.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_6.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_7.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_8.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_9.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_a.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_b.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_c.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_d.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_e.js	/^var searchData=$/;"	v
searchData	documentation/search/defines_f.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_0.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_1.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_10.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_11.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_2.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_3.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_4.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_5.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_6.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_7.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_8.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_9.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_a.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_b.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_c.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_d.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_e.js	/^var searchData=$/;"	v
searchData	documentation/search/enums_f.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_0.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_1.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_10.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_11.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_12.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_13.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_14.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_15.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_16.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_2.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_3.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_4.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_5.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_6.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_7.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_8.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_9.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_a.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_b.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_c.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_d.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_e.js	/^var searchData=$/;"	v
searchData	documentation/search/enumvalues_f.js	/^var searchData=$/;"	v
searchData	documentation/search/files_0.js	/^var searchData=$/;"	v
searchData	documentation/search/files_1.js	/^var searchData=$/;"	v
searchData	documentation/search/files_10.js	/^var searchData=$/;"	v
searchData	documentation/search/files_11.js	/^var searchData=$/;"	v
searchData	documentation/search/files_12.js	/^var searchData=$/;"	v
searchData	documentation/search/files_13.js	/^var searchData=$/;"	v
searchData	documentation/search/files_14.js	/^var searchData=$/;"	v
searchData	documentation/search/files_15.js	/^var searchData=$/;"	v
searchData	documentation/search/files_16.js	/^var searchData=$/;"	v
searchData	documentation/search/files_17.js	/^var searchData=$/;"	v
searchData	documentation/search/files_2.js	/^var searchData=$/;"	v
searchData	documentation/search/files_3.js	/^var searchData=$/;"	v
searchData	documentation/search/files_4.js	/^var searchData=$/;"	v
searchData	documentation/search/files_5.js	/^var searchData=$/;"	v
searchData	documentation/search/files_6.js	/^var searchData=$/;"	v
searchData	documentation/search/files_7.js	/^var searchData=$/;"	v
searchData	documentation/search/files_8.js	/^var searchData=$/;"	v
searchData	documentation/search/files_9.js	/^var searchData=$/;"	v
searchData	documentation/search/files_a.js	/^var searchData=$/;"	v
searchData	documentation/search/files_b.js	/^var searchData=$/;"	v
searchData	documentation/search/files_c.js	/^var searchData=$/;"	v
searchData	documentation/search/files_d.js	/^var searchData=$/;"	v
searchData	documentation/search/files_e.js	/^var searchData=$/;"	v
searchData	documentation/search/files_f.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_0.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_1.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_10.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_11.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_12.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_13.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_14.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_15.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_16.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_17.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_18.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_19.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_1a.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_2.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_3.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_4.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_5.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_6.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_7.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_8.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_9.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_a.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_b.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_c.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_d.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_e.js	/^var searchData=$/;"	v
searchData	documentation/search/functions_f.js	/^var searchData=$/;"	v
searchData	documentation/search/namespaces_0.js	/^var searchData=$/;"	v
searchData	documentation/search/namespaces_1.js	/^var searchData=$/;"	v
searchData	documentation/search/pages_0.js	/^var searchData=$/;"	v
searchData	documentation/search/pages_1.js	/^var searchData=$/;"	v
searchData	documentation/search/pages_2.js	/^var searchData=$/;"	v
searchData	documentation/search/related_0.js	/^var searchData=$/;"	v
searchData	documentation/search/related_1.js	/^var searchData=$/;"	v
searchData	documentation/search/related_2.js	/^var searchData=$/;"	v
searchData	documentation/search/related_3.js	/^var searchData=$/;"	v
searchData	documentation/search/related_4.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_0.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_1.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_10.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_11.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_12.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_13.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_14.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_15.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_2.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_3.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_4.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_5.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_6.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_7.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_8.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_9.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_a.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_b.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_c.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_d.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_e.js	/^var searchData=$/;"	v
searchData	documentation/search/typedefs_f.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_0.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_1.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_10.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_11.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_12.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_13.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_14.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_15.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_16.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_17.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_18.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_19.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_1a.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_2.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_3.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_4.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_5.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_6.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_7.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_8.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_9.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_a.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_b.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_c.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_d.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_e.js	/^var searchData=$/;"	v
searchData	documentation/search/variables_f.js	/^var searchData=$/;"	v
search_path_type	include/CL/cl_ext_intel.h	/^    cl_uint search_path_type;$/;"	m	struct:_cl_motion_estimation_desc_intel
seed	tests/AssetsLibrary.cpp	/^std::random_device::result_type AssetsLibrary::seed() const$/;"	f	class:arm_compute::test::AssetsLibrary
selectAndHighlight	documentation/navtree.js	/^function selectAndHighlight(hash,n)$/;"	f
sensitivity	tests/benchmark/CL/HarrisCorners.cpp	/^const auto sensitivity   = framework::dataset::make("Sensitivity", { 0.04f });$/;"	m	namespace:arm_compute::test::benchmark::__anon340	file:
sensitivity	tests/benchmark/NEON/HarrisCorners.cpp	/^const auto sensitivity   = framework::dataset::make("Sensitivity", { 0.04f });$/;"	m	namespace:arm_compute::test::benchmark::__anon374	file:
separate_matrix	arm_compute/core/Utils.h	/^inline bool separate_matrix(const int16_t *conv, int16_t *conv_col, int16_t *conv_row, uint8_t size)$/;"	f	namespace:arm_compute
sequence	tests/framework/Utils.h	/^struct sequence$/;"	s	namespace:arm_compute::test::framework::detail
sequence_generator	tests/framework/Utils.h	/^struct sequence_generator : sequence_generator < N - 1, N - 1, Ns... >$/;"	s	namespace:arm_compute::test::framework::detail
sequence_generator	tests/framework/Utils.h	/^struct sequence_generator<0, Ns...>$/;"	s	namespace:arm_compute::test::framework::detail
set	arm_compute/core/Dimensions.h	/^    void set(size_t dimension, T value)$/;"	f	class:arm_compute::Dimensions
set	arm_compute/core/TensorShape.h	/^    TensorShape &set(size_t dimension, size_t value, bool apply_dim_correction = true)$/;"	f	class:arm_compute::TensorShape
set	arm_compute/core/Types.h	/^    ValidRegion &set(size_t dimension, int start, size_t size)$/;"	f	struct:arm_compute::ValidRegion
set	include/CL/cl.hpp	/^    static void set (Kernel kernel, T0 arg)$/;"	f	struct:cl::detail::SetArg
set	include/CL/cl.hpp	/^    static void set (Kernel, NullType)$/;"	f	struct:cl::detail::SetArg
set	src/runtime/Scheduler.cpp	/^void Scheduler::set(Type t)$/;"	f	class:Scheduler
set	src/runtime/Scheduler.cpp	/^void Scheduler::set(std::shared_ptr<IScheduler> scheduler)$/;"	f	class:Scheduler
setArg	include/CL/cl.hpp	/^    cl_int setArg(cl_uint index, ::size_t size, void* argPtr)$/;"	f	class:cl::Kernel
setArg	include/CL/cl.hpp	/^    cl_int setArg(cl_uint index, T value)$/;"	f	class:cl::Kernel
setArg	include/CL/cl2.hpp	/^        setArg(cl_uint index, const T &value)$/;"	f	class:cl::Kernel
setArg	include/CL/cl2.hpp	/^        setArg(cl_uint index, const T argPtr)$/;"	f	class:cl::Kernel
setArg	include/CL/cl2.hpp	/^    cl_int setArg(cl_uint index, const cl::pointer<T, D> &argPtr)$/;"	f	class:cl::Kernel
setArg	include/CL/cl2.hpp	/^    cl_int setArg(cl_uint index, const cl::vector<T, Alloc> &argPtr)$/;"	f	class:cl::Kernel
setArg	include/CL/cl2.hpp	/^    cl_int setArg(cl_uint index, size_type size, const void* argPtr)$/;"	f	class:cl::Kernel
setArgs	include/CL/cl2.hpp	/^    void setArgs()$/;"	f	class:cl::KernelFunctor
setArgs	include/CL/cl2.hpp	/^    void setArgs(T0&& t0)$/;"	f	class:cl::KernelFunctor
setArgs	include/CL/cl2.hpp	/^    void setArgs(T0&& t0, T1s&&... t1s)$/;"	f	class:cl::KernelFunctor
setCallback	include/CL/cl.hpp	/^    cl_int setCallback($/;"	f	class:cl::Event
setCallback	include/CL/cl2.hpp	/^    cl_int setCallback($/;"	f	class:cl::Event
setClassAttr	documentation/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setDefault	include/CL/cl2.hpp	/^    static CommandQueue setDefault(const CommandQueue &default_queue)$/;"	f	class:cl::CommandQueue
setDefault	include/CL/cl2.hpp	/^    static Context setDefault(const Context &default_context)$/;"	f	class:cl::Context
setDefault	include/CL/cl2.hpp	/^    static Device setDefault(const Device &default_device)$/;"	f	class:cl::Device
setDefault	include/CL/cl2.hpp	/^    static Platform setDefault(const Platform &default_platform)$/;"	f	class:cl::Platform
setDestructorCallback	include/CL/cl.hpp	/^    cl_int setDestructorCallback($/;"	f	class:cl::Memory
setDestructorCallback	include/CL/cl2.hpp	/^    cl_int setDestructorCallback($/;"	f	class:cl::Memory
setKeyActions	documentation/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setSVMPointers	include/CL/cl2.hpp	/^    cl_int setSVMPointers(const T0 &t0, T1s... ts)$/;"	f	class:cl::KernelFunctor
setSVMPointers	include/CL/cl2.hpp	/^    cl_int setSVMPointers(const T0 &t0, Ts... ts)$/;"	f	class:cl::Kernel
setSVMPointers	include/CL/cl2.hpp	/^    cl_int setSVMPointers(const std::array<void*, ArrayLength> &pointerList)$/;"	f	class:cl::Kernel
setSVMPointers	include/CL/cl2.hpp	/^    cl_int setSVMPointers(const vector<void*> &pointerList)$/;"	f	class:cl::Kernel
setSVMPointers	include/CL/cl2.hpp	/^    cl_int setSVMPointers(const vector<void*> &pointerList)$/;"	f	class:cl::KernelFunctor
setSVMPointersHelper	include/CL/cl2.hpp	/^    setSVMPointersHelper(std::array<void*, ArrayLength> &pointerList, T0 t0)$/;"	f	class:cl::Kernel
setSVMPointersHelper	include/CL/cl2.hpp	/^    setSVMPointersHelper(std::array<void*, ArrayLength> &pointerList, T0 t0, Ts... ts)$/;"	f	class:cl::Kernel
setSVMPointersHelper	include/CL/cl2.hpp	/^    void setSVMPointersHelper(std::array<void*, ArrayLength> &pointerList, const pointer<T0, D> &t0)$/;"	f	class:cl::Kernel
setSVMPointersHelper	include/CL/cl2.hpp	/^    void setSVMPointersHelper(std::array<void*, ArrayLength> &pointerList, const pointer<T0, D> &t0, Ts... ts)$/;"	f	class:cl::Kernel
setStatus	include/CL/cl.hpp	/^    cl_int setStatus(cl_int status)$/;"	f	class:cl::UserEvent
setStatus	include/CL/cl2.hpp	/^    cl_int setStatus(cl_int status)$/;"	f	class:cl::UserEvent
set_L1_cache_size	src/core/CPP/CPPTypes.cpp	/^void CPUInfo::set_L1_cache_size(unsigned int size)$/;"	f	class:CPUInfo
set_L2_cache_size	src/core/CPP/CPPTypes.cpp	/^void CPUInfo::set_L2_cache_size(unsigned int size)$/;"	f	class:CPUInfo
set_access_offset	tests/PaddingCalculator.h	/^inline void PaddingCalculator::set_access_offset(int offset)$/;"	f	class:arm_compute::test::PaddingCalculator
set_accessed_elements	tests/PaddingCalculator.h	/^inline void PaddingCalculator::set_accessed_elements(int elements)$/;"	f	class:arm_compute::test::PaddingCalculator
set_accessor	src/graph/Tensor.cpp	/^void Tensor::set_accessor(std::unique_ptr<ITensorAccessor> accessor)$/;"	f	class:arm_compute::graph::Tensor
set_accessor_on_node	src/graph/GraphBuilder.cpp	/^Status set_accessor_on_node(Graph &g, NodeID nid, bool is_output, size_t idx, ITensorAccessorUPtr accessor)$/;"	f	namespace:arm_compute::graph::__anon303
set_allocator	src/runtime/MemoryManagerOnDemand.cpp	/^void MemoryManagerOnDemand::set_allocator(IAllocator *allocator)$/;"	f	class:MemoryManagerOnDemand
set_argument	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    void set_argument(unsigned int idx, T value)$/;"	f	class:arm_compute::GCKernel
set_arrays	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual void set_arrays(const To *A, const int lda, const int A_batch_stride, const int A_multi_stride,$/;"	f	class:arm_gemm::GemmCommon
set_assigned_target	src/graph/INode.cpp	/^void INode::set_assigned_target(Target target)$/;"	f	class:arm_compute::graph::INode
set_associated_memory_group	src/runtime/CL/CLTensorAllocator.cpp	/^void CLTensorAllocator::set_associated_memory_group(CLMemoryGroup *associated_memory_group)$/;"	f	class:CLTensorAllocator
set_associated_memory_group	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^void GCTensorAllocator::set_associated_memory_group(GCMemoryGroup *associated_memory_group)$/;"	f	class:GCTensorAllocator
set_associated_memory_group	src/runtime/TensorAllocator.cpp	/^void TensorAllocator::set_associated_memory_group(MemoryGroup *associated_memory_group)$/;"	f	class:TensorAllocator
set_border_mode	tests/PaddingCalculator.h	/^inline void PaddingCalculator::set_border_mode(BorderMode mode)$/;"	f	class:arm_compute::test::PaddingCalculator
set_border_size	tests/PaddingCalculator.h	/^inline void PaddingCalculator::set_border_size(int size)$/;"	f	class:arm_compute::test::PaddingCalculator
set_cifg_params	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    LSTMParams &set_cifg_params(const T *input_to_input_weights, const T *recurrent_to_input_weights, const T *cell_to_input_weights, const T *input_gate_bias)$/;"	f	class:arm_compute::LSTMParams
set_cl_kernel_event	src/runtime/CL/CLTuner.cpp	/^void CLTuner::set_cl_kernel_event(cl_event kernel_event)$/;"	f	class:CLTuner
set_color_output	tests/framework/printers/PrettyPrinter.cpp	/^void PrettyPrinter::set_color_output(bool color_output)$/;"	f	class:arm_compute::test::framework::PrettyPrinter
set_common_node_parameters	src/graph/INode.cpp	/^void INode::set_common_node_parameters(NodeParams common_params)$/;"	f	class:arm_compute::graph::INode
set_config	src/graph/GraphContext.cpp	/^void GraphContext::set_config(const GraphConfig &config)$/;"	f	class:arm_compute::graph::GraphContext
set_constant	src/core/GLES_COMPUTE/cs_shaders/fill_border.cs	/^void set_constant(uint offset, int pos)$/;"	m
set_constant_border	src/core/CL/kernels/CLFillBorderKernel.cpp	/^void CLFillBorderKernel::set_constant_border(unsigned int idx, const PixelValue &constant_border_value)$/;"	f	class:CLFillBorderKernel
set_constant_border	src/core/GLES_COMPUTE/kernels/GCFillBorderKernel.cpp	/^void GCFillBorderKernel::set_constant_border(unsigned int idx, const PixelValue &constant_border_value)$/;"	f	class:GCFillBorderKernel
set_context	arm_compute/core/CL/CLKernelLibrary.h	/^    void set_context(cl::Context context)$/;"	f	class:arm_compute::CLKernelLibrary
set_context	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    void set_context(EGLDisplay dpy, EGLContext ctx)$/;"	f	class:arm_compute::GCKernelLibrary
set_context	arm_compute/runtime/CL/CLScheduler.h	/^    void set_context(cl::Context context)$/;"	f	class:arm_compute::CLScheduler
set_convolution_method	src/graph/nodes/ConvolutionLayerNode.cpp	/^void ConvolutionLayerNode::set_convolution_method(ConvolutionMethod method)$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
set_cpu_model	src/core/CPP/CPPTypes.cpp	/^void CPUInfo::set_cpu_model(unsigned int cpuid, CPUModel model)$/;"	f	class:CPUInfo
set_cpu_num	src/core/CPP/CPPTypes.cpp	/^void CPUInfo::set_cpu_num(unsigned int cpu_count)$/;"	f	class:CPUInfo
set_data_layout	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_data_layout(const DataLayout &data_layout)$/;"	f	class:TensorInfo
set_data_type	arm_compute/graph/TensorDescriptor.h	/^    TensorDescriptor &set_data_type(DataType tensor_data_type)$/;"	f	struct:arm_compute::graph::final
set_data_type	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_data_type(DataType data_type)$/;"	f	class:TensorInfo
set_default_decorators	src/core/utils/logging/Logger.cpp	/^void Logger::set_default_decorators()$/;"	f	class:Logger
set_depthwise_convolution_method	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^void DepthwiseConvolutionLayerNode::set_depthwise_convolution_method(DepthwiseConvolutionMethod method)$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
set_device	arm_compute/core/CL/CLKernelLibrary.h	/^    void set_device(cl::Device device)$/;"	f	class:arm_compute::CLKernelLibrary
set_dotprod	src/core/CPP/CPPTypes.cpp	/^void CPUInfo::set_dotprod(const bool dotprod)$/;"	f	class:CPUInfo
set_enabled	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^void DepthConcatenateLayerNode::set_enabled(bool is_enabled)$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
set_end	arm_compute/core/Window.h	/^        void set_end(int end)$/;"	f	class:arm_compute::Window::Dimension
set_error_on_missing_assets	tests/framework/Framework.cpp	/^void Framework::set_error_on_missing_assets(bool error_on_missing_assets)$/;"	f	class:arm_compute::test::framework::Framework
set_fast_math_hint	src/graph/nodes/ConvolutionLayerNode.cpp	/^void ConvolutionLayerNode::set_fast_math_hint(FastMathHint hint)$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
set_fixed_point_position	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_fixed_point_position(int fixed_point_position)$/;"	f	class:TensorInfo
set_format	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_format(Format format)$/;"	f	class:TensorInfo
set_fp16	src/core/CPP/CPPTypes.cpp	/^void CPUInfo::set_fp16(const bool fp16)$/;"	f	class:CPUInfo
set_fused_activation	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^void BatchNormalizationLayerNode::set_fused_activation(ActivationLayerInfo fused_activation)$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
set_graph	src/graph/INode.cpp	/^void INode::set_graph(Graph *g)$/;"	f	class:arm_compute::graph::INode
set_handle	src/graph/Tensor.cpp	/^void Tensor::set_handle(std::unique_ptr<ITensorHandle> backend_tensor)$/;"	f	class:arm_compute::graph::Tensor
set_help	tests/framework/command_line/Option.cpp	/^void Option::set_help(std::string help)$/;"	f	class:arm_compute::test::framework::Option
set_id	src/graph/INode.cpp	/^void INode::set_id(NodeID id)$/;"	f	class:arm_compute::graph::INode
set_kernel_path	arm_compute/core/CL/CLKernelLibrary.h	/^    void set_kernel_path(const std::string &kernel_path)$/;"	f	class:arm_compute::CLKernelLibrary
set_kernel_tuning	src/graph/backends/CL/CLDeviceBackend.cpp	/^void CLDeviceBackend::set_kernel_tuning(bool enable_tuning)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
set_layout	arm_compute/graph/TensorDescriptor.h	/^    TensorDescriptor &set_layout(DataLayout data_layout)$/;"	f	struct:arm_compute::graph::final
set_log_level	src/core/utils/logging/Logger.cpp	/^void Logger::set_log_level(LogLevel log_level)$/;"	f	class:Logger
set_lws_hint	arm_compute/core/CL/ICLKernel.h	/^    void set_lws_hint(const cl::NDRange &lws_hint)$/;"	f	class:arm_compute::ICLKernel
set_lws_hint	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^    void set_lws_hint(gles::NDRange &lws_hint)$/;"	f	class:arm_compute::IGCKernel
set_name	arm_compute/graph/frontend/ILayer.h	/^    ILayer &set_name(std::string name)$/;"	f	class:arm_compute::graph::frontend::ILayer
set_needs_shifting	src/core/GLES_COMPUTE/IGCTensor.cpp	/^void IGCTensor::set_needs_shifting(bool needs_shifting)$/;"	f	class:IGCTensor
set_node_params	src/graph/GraphBuilder.cpp	/^Status set_node_params(Graph &g, NodeID nid, NodeParams &params)$/;"	f	namespace:arm_compute::graph::__anon303
set_nthreads	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual void set_nthreads(int nthreads) { };$/;"	f	class:arm_gemm::GemmCommon
set_nthreads	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void set_nthreads(int threads)$/;"	f	class:arm_gemm::BufferManager
set_num_channels	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_num_channels(int num_channels)$/;"	f	class:TensorInfo
set_num_dimensions	arm_compute/core/Dimensions.h	/^    void set_num_dimensions(size_t num_dimensions)$/;"	f	class:arm_compute::Dimensions
set_num_iterations	tests/framework/Framework.cpp	/^void Framework::set_num_iterations(int num_iterations)$/;"	f	class:arm_compute::test::framework::Framework
set_num_pools	src/runtime/MemoryManagerOnDemand.cpp	/^void MemoryManagerOnDemand::set_num_pools(unsigned int num_pools)$/;"	f	class:MemoryManagerOnDemand
set_num_threads	src/runtime/CPP/CPPScheduler.cpp	/^void CPPScheduler::set_num_threads(unsigned int num_threads)$/;"	f	class:arm_compute::CPPScheduler
set_num_threads	src/runtime/CPP/SingleThreadScheduler.cpp	/^void SingleThreadScheduler::set_num_threads(unsigned int num_threads)$/;"	f	class:arm_compute::SingleThreadScheduler
set_num_threads	src/runtime/OMP/OMPScheduler.cpp	/^void OMPScheduler::set_num_threads(unsigned int num_threads)$/;"	f	class:OMPScheduler
set_numusers	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void set_numusers(int numusers)$/;"	f	class:arm_gemm::Buffer
set_output_tensor	src/graph/INode.cpp	/^void INode::set_output_tensor(TensorID tid, size_t idx)$/;"	f	class:arm_compute::graph::INode
set_peephole_params	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    LSTMParams &set_peephole_params(const T *cell_to_input_weights, const T *cell_to_forget_weights, const T *cell_to_output_weights)$/;"	f	class:arm_compute::LSTMParams
set_prefix	tests/framework/instruments/SchedulerTimer.cpp	/^    void set_prefix(std::string prefix)$/;"	f	class:arm_compute::test::framework::final
set_pretransposed_B_data	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual void set_pretransposed_B_data(void *buffer) { }$/;"	f	class:arm_gemm::GemmCommon
set_processed_elements	tests/PaddingCalculator.h	/^inline void PaddingCalculator::set_processed_elements(int elements)$/;"	f	class:arm_compute::test::PaddingCalculator
set_projection_params	arm_compute/runtime/CL/functions/CLLSTMLayer.h	/^    LSTMParams &set_projection_params(const T *projection_weights, const T *projection_bias)$/;"	f	class:arm_compute::LSTMParams
set_quantization_info	arm_compute/graph/TensorDescriptor.h	/^    TensorDescriptor &set_quantization_info(QuantizationInfo tensor_quant_info)$/;"	f	struct:arm_compute::graph::final
set_quantization_info	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_quantization_info(const QuantizationInfo &quantization_info)$/;"	f	class:TensorInfo
set_queue	arm_compute/runtime/CL/CLScheduler.h	/^    void set_queue(cl::CommandQueue queue)$/;"	f	class:arm_compute::CLScheduler
set_range	src/core/IDistribution1D.cpp	/^void IDistribution1D::set_range(uint32_t range)$/;"	f	class:IDistribution1D
set_replicate	src/core/GLES_COMPUTE/cs_shaders/fill_border.cs	/^void set_replicate(uint offset, int pos, vec2 replicate_value)$/;"	m
set_requested_target	src/graph/INode.cpp	/^void INode::set_requested_target(Target target)$/;"	f	class:arm_compute::graph::INode
set_required	tests/framework/command_line/Option.cpp	/^void Option::set_required(bool is_required)$/;"	f	class:arm_compute::test::framework::Option
set_shader_params_binding_point	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    void set_shader_params_binding_point(unsigned int binding)$/;"	f	class:arm_compute::GCKernel
set_shader_path	arm_compute/core/GLES_COMPUTE/GCKernelLibrary.h	/^    void set_shader_path(const std::string &shader_path)$/;"	f	class:arm_compute::GCKernelLibrary
set_shape	arm_compute/graph/TensorDescriptor.h	/^    TensorDescriptor &set_shape(TensorShape &tensor_shape)$/;"	f	struct:arm_compute::graph::final
set_size	arm_compute/runtime/IMemoryRegion.h	/^    void set_size(size_t size)$/;"	f	class:arm_compute::IMemoryRegion
set_step	arm_compute/core/Window.h	/^        void set_step(int step)$/;"	f	class:arm_compute::Window::Dimension
set_stop_on_error	tests/framework/Framework.cpp	/^void Framework::set_stop_on_error(bool stop_on_error)$/;"	f	class:arm_compute::test::framework::Framework
set_stream	tests/framework/printers/Printer.cpp	/^void Printer::set_stream(std::ostream &stream)$/;"	f	class:arm_compute::test::framework::Printer
set_target	arm_compute/core/CL/ICLKernel.h	/^    void set_target(GPUTarget target)$/;"	f	class:arm_compute::ICLKernel
set_target	arm_compute/core/GLES_COMPUTE/IGCKernel.h	/^    void set_target(GPUTarget target)$/;"	f	class:arm_compute::IGCKernel
set_target	arm_compute/runtime/CL/CLScheduler.h	/^    void set_target(GPUTarget target)$/;"	f	class:arm_compute::CLScheduler
set_target	arm_compute/runtime/GLES_COMPUTE/GCScheduler.h	/^    void set_target(GPUTarget target)$/;"	f	class:arm_compute::GCScheduler
set_target	src/core/CL/ICLKernel.cpp	/^void ICLKernel::set_target(cl::Device &device)$/;"	f	class:ICLKernel
set_target_hint	utils/GraphUtils.h	/^inline graph::Target set_target_hint(int target)$/;"	f	namespace:arm_compute::graph_utils
set_tensor_accessor	arm_compute/graph/Utils.h	/^inline Status set_tensor_accessor(Tensor *tensor, std::unique_ptr<ITensorAccessor> accessor)$/;"	f	namespace:arm_compute::graph
set_tensor_shape	src/core/SubTensorInfo.cpp	/^ITensorInfo &SubTensorInfo::set_tensor_shape(const TensorShape &shape)$/;"	f	class:SubTensorInfo
set_tensor_shape	src/core/TensorInfo.cpp	/^ITensorInfo &TensorInfo::set_tensor_shape(const TensorShape &shape)$/;"	f	class:TensorInfo
set_test_result	tests/framework/Framework.cpp	/^void Framework::set_test_result(TestInfo info, TestResult result)$/;"	f	class:arm_compute::test::framework::Framework
set_throw_errors	tests/framework/Framework.cpp	/^void Framework::set_throw_errors(bool throw_errors)$/;"	f	class:arm_compute::test::framework::Framework
set_tune_new_kernels	src/runtime/CL/CLTuner.cpp	/^void CLTuner::set_tune_new_kernels(bool tune_new_kernels)$/;"	f	class:CLTuner
set_valid_region	src/core/AccessWindowAutoPadding.cpp	/^void AccessWindowAutoPadding::set_valid_region()$/;"	f	class:AccessWindowAutoPadding
set_valid_region	src/core/AccessWindowStatic.cpp	/^void AccessWindowStatic::set_valid_region(const Window &window, const ValidRegion &input_valid_region)$/;"	f	class:AccessWindowStatic
set_valid_region	src/core/IAccessWindow.cpp	/^void AccessWindowRectangle::set_valid_region(const Window &window, const ValidRegion &input_valid_region, bool border_undefined, const BorderSize &border_size)$/;"	f	class:AccessWindowRectangle
set_working_space	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual void set_working_space(void *) { };$/;"	f	class:arm_gemm::GemmCommon
setup	tests/benchmark/fixtures/ActivationLayerFixture.h	/^    void setup(TensorShape shape, ActivationLayerInfo info, DataType data_type, int batches)$/;"	f	class:arm_compute::test::benchmark::ActivationLayerFixture
setup	tests/benchmark/fixtures/AlexNetFixture.h	/^    void setup(DataType data_type, int batches)$/;"	f	class:arm_compute::test::benchmark::AlexNetFixture
setup	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^    void setup(TensorShape tensor_shape, TensorShape param_shape, float epsilon, bool use_gamma, bool use_beta, ActivationLayerInfo act_info, DataType data_type, DataLayout data_layout, int batches)$/;"	f	class:arm_compute::test::benchmark::BatchNormalizationLayerFixture
setup	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^    void setup(TensorShape src_shape, TensorShape weights_shape, TensorShape biases_shape, TensorShape dst_shape, PadStrideInfo info, Size2D dilation, ActivationLayerInfo act_info, DataType data_type,$/;"	f	class:arm_compute::test::benchmark::ConvolutionLayerFixture
setup	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::DepthConcatenateLayerFixture
setup	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void setup(TensorShape src_shape, Size2D kernel_size, PadStrideInfo info, DataType data_type, int batches)$/;"	f	class:arm_compute::test::benchmark::DepthwiseConvolutionLayerFixture
setup	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    void setup(TensorShape src_shape, TensorShape depthwise_weights_shape, TensorShape depthwise_biases_shape, TensorShape depthwise_out_shape, TensorShape pointwise_weights_shape,$/;"	f	class:arm_compute::test::benchmark::DepthwiseSeparableConvolutionLayerFixture
setup	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type_src, DataType data_type_dst)$/;"	f	class:arm_compute::test::benchmark::DequantizationLayerFixture
setup	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape src_shape, TensorShape weights_shape, TensorShape biases_shape, TensorShape dst_shape, PadStrideInfo info, Size2D dilation, ActivationLayerInfo act_info, DataType data_type,$/;"	f	class:arm_compute::test::benchmark::DirectConvolutionLayerFixture
setup	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^    void setup(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::benchmark::EqualizeHistogramFixture
setup	tests/benchmark/fixtures/FlattenLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::FlattenLayerFixture
setup	tests/benchmark/fixtures/FloorFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::FloorFixture
setup	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^    void setup(TensorShape src_shape, TensorShape weights_shape, TensorShape biases_shape, TensorShape dst_shape, DataType data_type, int batches)$/;"	f	class:arm_compute::test::benchmark::FullyConnectedLayerFixture
setup	tests/benchmark/fixtures/GEMMFixture.h	/^    void setup(TensorShape shape_a, TensorShape shape_b, TensorShape shape_c, TensorShape shape_dst, float alpha, float beta, DataType data_type, bool reshape_b_only_on_first_run)$/;"	f	class:arm_compute::test::benchmark::GEMMFixture
setup	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^    void setup(size_t x, size_t y, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::GEMMInterleave4x4Fixture
setup	tests/benchmark/fixtures/GEMMLowpFixture.h	/^    void setup(TensorShape shape_a, TensorShape shape_b, TensorShape shape_c, TensorShape shape_dst, float alpha, float beta)$/;"	f	class:arm_compute::test::benchmark::GEMMLowpMatrixMultiplyCoreFixture
setup	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^    void setup(std::string image, HOGInfo hog_info, Format format, BorderMode border_mode)$/;"	f	class:arm_compute::test::benchmark::HOGDescriptorFixture
setup	tests/benchmark/fixtures/HarrisCornersFixture.h	/^    void setup(std::string image, Format format, float threshold, float min_dist, float sensitivity,$/;"	f	class:arm_compute::test::benchmark::HarrisCornersFixture
setup	tests/benchmark/fixtures/HistogramFixture.h	/^    void setup(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::benchmark::HistogramFixture
setup	tests/benchmark/fixtures/IntegralImageFixture.h	/^    void setup(const TensorShape &shape)$/;"	f	class:arm_compute::test::benchmark::IntegralImageFixture
setup	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type, unsigned int axis)$/;"	f	class:arm_compute::test::benchmark::L2NormalizeLayerFixture
setup	tests/benchmark/fixtures/LeNet5Fixture.h	/^    void setup(int batches)$/;"	f	class:arm_compute::test::benchmark::LeNet5Fixture
setup	tests/benchmark/fixtures/MagnitudeFixture.h	/^    void setup(const TensorShape &shape, Format format, MagnitudeType magnitude_type, bool use_fp16)$/;"	f	class:arm_compute::test::benchmark::MagnitudeFixture
setup	tests/benchmark/fixtures/MeanStdDevFixture.h	/^    void setup(const TensorShape &shape, Format format)$/;"	f	class:arm_compute::test::benchmark::MeanStdDevFixture
setup	tests/benchmark/fixtures/Median3x3Fixture.h	/^    void setup(const TensorShape &shape, BorderMode border_mode)$/;"	f	class:arm_compute::test::benchmark::Median3x3Fixture
setup	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^    void setup(const TensorShape &shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::MinMaxLocationFixture
setup	tests/benchmark/fixtures/MobileNetFixture.h	/^    void setup(int batches)$/;"	f	class:arm_compute::test::benchmark::MobileNetFixture
setup	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^    void setup(int batches)$/;"	f	class:arm_compute::test::benchmark::MobileNetV1Fixture
setup	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^    void setup(TensorShape shape, NormalizationLayerInfo info, DataType data_type, int batches)$/;"	f	class:arm_compute::test::benchmark::NormalizationLayerFixture
setup	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void setup(TensorShape tensor_shape, TensorShape param_shape, DataType data_type, int batches)$/;"	f	class:arm_compute::test::NormalizePlanarYUVLayerFixture
setup	tests/benchmark/fixtures/PhaseFixture.h	/^    void setup(const TensorShape &shape, Format format, PhaseType phase_type)$/;"	f	class:arm_compute::test::benchmark::PhaseFixture
setup	tests/benchmark/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape src_shape, PoolingLayerInfo info, DataType data_type, DataLayout data_layout, int batches)$/;"	f	class:arm_compute::test::benchmark::PoolingLayerFixture
setup	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::QuantizationLayerFixture
setup	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^    void setup(TensorShape shape, const ROIPoolingLayerInfo pool_info, unsigned int num_rois, DataType data_type, int batches)$/;"	f	class:arm_compute::test::benchmark::ROIPoolingLayerFixture
setup	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::ReshapeLayerFixture
setup	tests/benchmark/fixtures/ScaleFixture.h	/^    void setup(TensorShape shape, DataType data_type, DataLayout data_layout, InterpolationPolicy policy, BorderMode border_mode, SamplingPolicy sampling_policy)$/;"	f	class:arm_compute::test::benchmark::ScaleFixture
setup	tests/benchmark/fixtures/ScaleLayerFixture.h	/^    void setup(TensorShape shape, InterpolationPolicy policy, BorderMode border_mode, SamplingPolicy sampling_policy, float sx, float sy, DataType data_type)$/;"	f	class:arm_compute::test::ScaleLayerFixture
setup	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::SoftmaxLayerFixture
setup	tests/benchmark/fixtures/TransposeFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::benchmark::TransposeFixture
setup	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^    void setup(TensorShape src_shape, TensorShape weights_shape, TensorShape biases_shape, TensorShape dst_shape, PadStrideInfo info, Size2D dilation, ActivationLayerInfo act_info, DataType data_type,$/;"	f	class:arm_compute::test::benchmark::WinogradConvolutionLayerFixture
setup	tests/framework/Fixture.h	/^    void setup() {};$/;"	f	class:arm_compute::test::framework::Fixture
setup	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^    void setup(TensorShape shape, DataType data_type0, DataType data_type1, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AbsoluteDifferenceValidationFixture
setup	tests/validation/fixtures/AccumulateFixture.h	/^    void setup(TensorShape shape, DataType data_type, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AccumulateBaseValidationFixture
setup	tests/validation/fixtures/AccumulateFixture.h	/^    void setup(TensorShape shape, DataType data_type, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AccumulateSquaredValidationFixture
setup	tests/validation/fixtures/AccumulateFixture.h	/^    void setup(TensorShape shape, DataType data_type, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AccumulateValidationFixture
setup	tests/validation/fixtures/AccumulateFixture.h	/^    void setup(TensorShape shape, DataType data_type, DataType output_data_type)$/;"	f	class:arm_compute::test::validation::AccumulateWeightedValidationFixture
setup	tests/validation/fixtures/ActivationLayerFixture.h	/^    void setup(TensorShape shape, bool in_place, ActivationLayerInfo::ActivationFunction function, float alpha_beta, DataType data_type)$/;"	f	class:arm_compute::test::validation::ActivationValidationFixture
setup	tests/validation/fixtures/ActivationLayerFixture.h	/^    void setup(TensorShape shape, bool in_place, ActivationLayerInfo::ActivationFunction function, float alpha_beta, DataType data_type, QuantizationInfo quantization_info)$/;"	f	class:arm_compute::test::validation::ActivationValidationQuantizedFixture
setup	tests/validation/fixtures/ActivationLayerFixture.h	/^    void setup(TensorShape shape, bool in_place, ActivationLayerInfo::ActivationFunction function, float alpha_beta, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::ActivationValidationFixedPointFixture
setup	tests/validation/fixtures/ActivationLayerFixture.h	/^    void setup(TensorShape shape, bool in_place, ActivationLayerInfo::ActivationFunction function, float alpha_beta, DataType data_type, int fractional_bits, QuantizationInfo quantization_info)$/;"	f	class:arm_compute::test::validation::ActivationValidationGenericFixture
setup	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    void setup(const TensorShape &shape, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy)$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionValidationFixture
setup	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    void setup(const TensorShape &shape, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy, int fractional_bits)$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionValidationFixedPointFixture
setup	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    void setup(const TensorShape &shape0, const TensorShape &shape1, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy)$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionBroadcastValidationFixture
setup	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^    void setup(const TensorShape &shape0, const TensorShape &shape1, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy, int fractional_bits)$/;"	f	class:arm_compute::test::validation::ArithmeticAdditionBroadcastValidationFixedPointFixture
setup	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^    void setup(TensorShape shape, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy)$/;"	f	class:arm_compute::test::validation::ArithmeticSubtractionValidationFixture
setup	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^    void setup(TensorShape shape, DataType data_type0, DataType data_type1, DataType output_data_type, ConvertPolicy convert_policy, int fractional_bits)$/;"	f	class:arm_compute::test::validation::ArithmeticSubtractionValidationFixedPointFixture
setup	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^    void setup(TensorShape shape0, TensorShape shape1, float epsilon, bool use_beta, bool use_gamma, ActivationLayerInfo act_info, DataType dt, DataLayout data_layout)$/;"	f	class:arm_compute::test::validation::BatchNormalizationLayerValidationFixture
setup	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^    void setup(TensorShape shape0, TensorShape shape1, float epsilon, bool use_beta, bool use_gamma, ActivationLayerInfo act_info, DataType dt, DataLayout data_layout, int fractional_bits)$/;"	f	class:arm_compute::test::validation::BatchNormalizationLayerValidationFixedPointFixture
setup	tests/validation/fixtures/BitwiseAndFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseAndValidationFixture
setup	tests/validation/fixtures/BitwiseNotFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseNotValidationFixture
setup	tests/validation/fixtures/BitwiseOrFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseOrValidationFixture
setup	tests/validation/fixtures/BitwiseXorFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::BitwiseXorValidationFixture
setup	tests/validation/fixtures/Box3x3Fixture.h	/^    void setup(TensorShape shape, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::Box3x3ValidationFixture
setup	tests/validation/fixtures/ChannelCombineFixture.h	/^    void setup(TensorShape shape, Format format)$/;"	f	class:arm_compute::test::validation::ChannelCombineValidationFixture
setup	tests/validation/fixtures/ChannelExtractFixture.h	/^    void setup(TensorShape shape, Format format, Channel channel)$/;"	f	class:arm_compute::test::validation::ChannelExtractValidationFixture
setup	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^    void setup(TensorShape shape, unsigned int num_groups, DataType data_type)$/;"	f	class:arm_compute::test::validation::ChannelShuffleLayerValidationFixture
setup	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^    void setup(TensorShape input_shape, unsigned int weights_w, DataLayout training_data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::ConvertFullyConnectedWeightsValidationFixture
setup	tests/validation/fixtures/ConvolutionFixture.h	/^    void setup(TensorShape shape, DataType output_data_type, BorderMode border_mode, const unsigned int width)$/;"	f	class:arm_compute::test::validation::ConvolutionSeparableValidationFixture
setup	tests/validation/fixtures/ConvolutionFixture.h	/^    void setup(TensorShape shape, DataType output_data_type, BorderMode border_mode, const unsigned int width)$/;"	f	class:arm_compute::test::validation::ConvolutionSquareValidationFixture
setup	tests/validation/fixtures/ConvolutionFixture.h	/^    void setup(TensorShape shape, DataType output_data_type, BorderMode border_mode, const unsigned int width, const unsigned int height)$/;"	f	class:arm_compute::test::validation::ConvolutionRectangleValidationFixture
setup	tests/validation/fixtures/ConvolutionFixture.h	/^    void setup(TensorShape shape, DataType output_data_type, BorderMode border_mode, const unsigned int width, const unsigned int height, const bool is_separable = false)$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixture
setup	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, bool reshape_weights, DataType data_type,$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixedPointFixture
setup	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, bool reshape_weights, DataType data_type,$/;"	f	class:arm_compute::test::validation::ConvolutionValidationFixture
setup	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, bool reshape_weights, DataType data_type,$/;"	f	class:arm_compute::test::validation::ConvolutionValidationQuantizedFixture
setup	tests/validation/fixtures/ConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, bool reshape_weights,$/;"	f	class:arm_compute::test::validation::ConvolutionValidationGenericFixture
setup	tests/validation/fixtures/CopyFixture.h	/^    void setup(TensorShape input_shape, TensorShape output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::CopyFixture
setup	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info,$/;"	f	class:arm_compute::test::validation::DeconvolutionLayerFixtureBase
setup	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, unsigned int sx, unsigned int sy, unsigned int padx, unsigned int pady,$/;"	f	class:arm_compute::test::validation::DeconvolutionValidationFixture
setup	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::DepthConcatenateLayerValidationFixture
setup	tests/validation/fixtures/DepthConvertLayerFixture.h	/^    void setup(TensorShape shape, DataType dt_in, DataType dt_out, ConvertPolicy policy, uint32_t fractional_bits)$/;"	f	class:arm_compute::test::validation::DepthConvertLayerValidationFractionalBitsFixture
setup	tests/validation/fixtures/DepthConvertLayerFixture.h	/^    void setup(TensorShape shape, DataType dt_in, DataType dt_out, ConvertPolicy policy, uint32_t shift)$/;"	f	class:arm_compute::test::validation::DepthConvertLayerValidationFixture
setup	tests/validation/fixtures/DepthConvertLayerFixture.h	/^    void setup(TensorShape shape, DataType dt_in, DataType dt_out, ConvertPolicy policy, uint32_t shift, uint32_t fractional_bits)$/;"	f	class:arm_compute::test::validation::DepthConvertLayerValidationFixedPointFixture
setup	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void setup(TensorShape in_shape, Size2D kernel_size, PadStrideInfo pad_stride_info, unsigned int depth_multiplier, DataType data_type, DataLayout data_layout)$/;"	f	class:arm_compute::test::validation::DepthwiseConvolutionLayerValidationFixture
setup	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void setup(TensorShape in_shape, Size2D kernel_size, PadStrideInfo pad_stride_info, unsigned int depth_multiplier, DataType data_type, QuantizationInfo quantization_info, DataLayout data_layout)$/;"	f	class:arm_compute::test::validation::DepthwiseConvolutionLayerValidationGenericFixture
setup	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void setup(TensorShape in_shape, Size2D kernel_size, PadStrideInfo pad_stride_info, unsigned int depth_multiplier, DataType data_type, QuantizationInfo quantization_info, DataLayout data_layout)$/;"	f	class:arm_compute::test::validation::DepthwiseConvolutionLayerValidationQuantizedFixture
setup	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    void setup(TensorShape in_shape, TensorShape depthwise_weights_shape, TensorShape depthwise_biases_shape, TensorShape depthwise_out_shape, TensorShape pointwise_weights_shape,$/;"	f	class:arm_compute::test::validation::DepthwiseSeparableConvolutionValidationFixture
setup	tests/validation/fixtures/DequantizationLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::DequantizationValidationFixedPointFixture
setup	tests/validation/fixtures/DequantizationLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::DequantizationValidationFixture
setup	tests/validation/fixtures/DerivativeFixture.h	/^    void setup(TensorShape shape, BorderMode border_mode, Format format, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::DerivativeValidationFixture
setup	tests/validation/fixtures/DilateFixture.h	/^    void setup(TensorShape shape, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::DilateValidationFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationWithTensorShapesFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationWithTensorShapesQuantizedFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels, DataType data_type, ActivationLayerInfo act_info,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels, DataType data_type, QuantizationInfo quantization_info,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationQuantizedFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels, DataType data_type, int fractional_bits,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationFixedPointFixture
setup	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, unsigned int dilation_x, unsigned int dilation_y,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericTensorShiftFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, unsigned int dilation_x, unsigned int dilation_y,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationWithTensorShapesQuantizedTensorShiftFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, unsigned int dilation_x, unsigned int dilation_y,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationWithTensorShapesTensorShiftFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels, DataType data_type)$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationTensorShiftFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels, DataType data_type, QuantizationInfo quantization_info)$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationQuantizedTensorShiftFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationFixedPointTensorShiftFixture
setup	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^    void setup(TensorShape input_shape, int stride_x, int stride_y, int pad_x, int pad_y, unsigned int kernel_size, unsigned int num_kernels,$/;"	f	class:arm_compute::test::validation::DirectConvolutionValidationGenericTensorShiftFixture
setup	tests/validation/fixtures/DropoutLayerFixture.h	/^    void setup(TensorShape shape, float ratio, bool forward, DataType data_type)$/;"	f	class:arm_compute::test::validation::DropoutLayerValidationFixture
setup	tests/validation/fixtures/EqualizeHistogramFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::EqualizeHistogramValidationFixture
setup	tests/validation/fixtures/ErodeFixture.h	/^    void setup(TensorShape shape, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::ErodeValidationFixture
setup	tests/validation/fixtures/FastCornersFixture.h	/^    void setup(std::string image, Format format, bool suppress_nonmax, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::FastCornersValidationFixture
setup	tests/validation/fixtures/FixedPointFixture.h	/^    void setup(TensorShape shape, DataType dt, FixedPointOp op, int fractional_bits)$/;"	f	class:arm_compute::test::validation::FixedPointValidationFixture
setup	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^    void setup(TensorShape    shape,$/;"	f	class:arm_compute::test::validation::FixedPointPixelWiseMultiplicationValidationFixture
setup	tests/validation/fixtures/FlattenLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::FlattenLayerValidationFixture
setup	tests/validation/fixtures/FloorFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::FloorValidationFixture
setup	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, bool transpose_weights, bool reshape_weights, DataType data_type)$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationFixture
setup	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, bool transpose_weights, bool reshape_weights, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationFixedPointFixture
setup	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, bool transpose_weights, bool reshape_weights, DataType data_type,$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationQuantizedFixture
setup	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, bool transpose_weights, bool reshape_weights,$/;"	f	class:arm_compute::test::validation::FullyConnectedLayerValidationGenericFixture
setup	tests/validation/fixtures/GEMMFixture.h	/^    void setup(TensorShape shape_a, TensorShape shape_b, TensorShape shape_c, TensorShape output_shape, float alpha, float beta, DataType data_type)$/;"	f	class:arm_compute::test::validation::GEMMValidationFixture
setup	tests/validation/fixtures/GEMMFixture.h	/^    void setup(TensorShape shape_a, TensorShape shape_b, TensorShape shape_c, TensorShape output_shape, float alpha, float beta, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::GEMMValidationFixedPointFixture
setup	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^    void setup(size_t x, size_t y, DataType data_type)$/;"	f	class:arm_compute::test::validation::GEMMInterleave4x4ValidationFixture
setup	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^    void setup(size_t x, size_t y, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::GEMMInterleave4x4ValidationFixedPointFixture
setup	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^    void setup(size_t m, size_t n, size_t k)$/;"	f	class:arm_compute::test::validation::GEMMLowpAssemblyFixture
setup	tests/validation/fixtures/GEMMLowpFixture.h	/^    void setup(TensorShape shape, int32_t result_fixedpoint_multiplier, int32_t result_shift, int32_t result_offset_after_shift, int32_t min, int32_t max, bool add_bias)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointValidationFixture
setup	tests/validation/fixtures/GEMMLowpFixture.h	/^    void setup(TensorShape shape, int32_t result_offset, int32_t result_mult_int, int32_t result_shift, int32_t min, int32_t max, bool add_bias)$/;"	f	class:arm_compute::test::validation::GEMMLowpQuantizeDownInt32ToUint8ScaleValidationFixture
setup	tests/validation/fixtures/GEMMLowpFixture.h	/^    void setup(TensorShape shape_a, TensorShape shape_b, TensorShape shape_c, int32_t a_offset, int32_t b_offset)$/;"	f	class:arm_compute::test::validation::GEMMLowpMatrixMultiplyCoreValidationFixture
setup	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^    void setup(size_t x, size_t y, DataType data_type)$/;"	f	class:arm_compute::test::validation::GEMMTranspose1xWValidationFixture
setup	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^    void setup(size_t x, size_t y, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::GEMMTranspose1xWValidationFixedPointFixture
setup	tests/validation/fixtures/Gaussian3x3Fixture.h	/^    void setup(TensorShape shape, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::Gaussian3x3ValidationFixture
setup	tests/validation/fixtures/Gaussian5x5Fixture.h	/^    void setup(TensorShape shape, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::Gaussian5x5ValidationFixture
setup	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^    void setup(TensorShape shape, BorderMode border_mode, size_t num_levels)$/;"	f	class:arm_compute::test::validation::GaussianPyramidHalfValidationFixture
setup	tests/validation/fixtures/HOGDescriptorFixture.h	/^    void setup(std::string image, HOGInfo hog_info, Format format, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::HOGDescriptorValidationFixture
setup	tests/validation/fixtures/HOGDetectorFixture.h	/^    void setup(Size2D detection_window_stride, std::string image, HOGInfo hog_info, Format format, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::HOGDetectorValidationFixture
setup	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^    void setup(std::string image, std::vector<HOGInfo> models, Format format, BorderMode border_mode, bool non_maxima_suppression)$/;"	f	class:arm_compute::test::validation::HOGMultiDetectionValidationFixture
setup	tests/validation/fixtures/HarrisCornersFixture.h	/^    void setup(std::string image, int gradient_size, int block_size, BorderMode border_mode, bool use_fp16, Format format)$/;"	f	class:arm_compute::test::validation::HarrisCornersValidationFixture
setup	tests/validation/fixtures/HistogramFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::HistogramValidationFixture
setup	tests/validation/fixtures/Im2ColFixture.h	/^    void setup(TensorShape input_shape, DataType data_type, const Size2D &kernel_dims, const PadStrideInfo &conv_info, const QuantizationInfo &quant_info, const DataLayout &data_layout)$/;"	f	class:arm_compute::test::validation::Im2ColValidationFixture
setup	tests/validation/fixtures/IntegralImageFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::IntegralImageValidationFixture
setup	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type, unsigned int axis, float epsilon)$/;"	f	class:arm_compute::test::validation::L2NormalizeLayerValidationFixture
setup	tests/validation/fixtures/LSTMLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape input_weights_shape, TensorShape recurrent_weights_shape, TensorShape cell_bias_shape, TensorShape output_cell_shape, TensorShape output_shape,$/;"	f	class:arm_compute::test::validation::LSTMLayerValidationFixture
setup	tests/validation/fixtures/LocallyConnectedFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, DataType data_type)$/;"	f	class:arm_compute::test::validation::LocallyConnectedValidationFixture
setup	tests/validation/fixtures/MagnitudeFixture.h	/^    void setup(TensorShape shape, Format format, MagnitudeType magnitude_type, bool use_fp16)$/;"	f	class:arm_compute::test::validation::MagnitudeValidationFixture
setup	tests/validation/fixtures/MeanStdDevFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::MeanStdDevValidationFixture
setup	tests/validation/fixtures/Median3x3Fixture.h	/^    void setup(TensorShape shape, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::Median3x3ValidationFixture
setup	tests/validation/fixtures/MinMaxLocationFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::MinMaxLocationValidationFixture
setup	tests/validation/fixtures/NonLinearFilterFixture.h	/^    void setup(TensorShape shape, NonLinearFilterFunction function, unsigned int mask_size, MatrixPattern pattern, BorderMode border_mode, DataType data_type)$/;"	f	class:arm_compute::test::validation::NonLinearFilterValidationFixture
setup	tests/validation/fixtures/NormalizationLayerFixture.h	/^    void setup(TensorShape shape, NormType norm_type, int norm_size, float beta, bool is_scaled, DataType data_type)$/;"	f	class:arm_compute::test::validation::NormalizationValidationFixture
setup	tests/validation/fixtures/NormalizationLayerFixture.h	/^    void setup(TensorShape shape, NormType norm_type, int norm_size, float beta, bool is_scaled, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::NormalizationValidationFixedPointFixture
setup	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void setup(TensorShape shape0, TensorShape shape1, DataType dt)$/;"	f	class:arm_compute::test::validation::NormalizePlanarYUVLayerValidationFixedPointFixture
setup	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void setup(TensorShape shape0, TensorShape shape1, DataType dt)$/;"	f	class:arm_compute::test::validation::NormalizePlanarYUVLayerValidationFixture
setup	tests/validation/fixtures/OpticalFlowFixture.h	/^    void setup(std::string old_image_name, std::string new_image_name, OpticalFlowParameters params,$/;"	f	class:arm_compute::test::validation::OpticalFlowValidationFixture
setup	tests/validation/fixtures/PermuteFixture.h	/^    void setup(TensorShape shape, PermutationVector perm, DataType data_type)$/;"	f	class:arm_compute::test::validation::PermuteValidationFixture
setup	tests/validation/fixtures/PhaseFixture.h	/^    void setup(TensorShape shape, Format format, PhaseType phase_type)$/;"	f	class:arm_compute::test::validation::PhaseValidationFixture
setup	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^    void setup(const TensorShape &shape, DataType dt_in1, DataType dt_in2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)$/;"	f	class:arm_compute::test::validation::PixelWiseMultiplicationValidationFixture
setup	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^    void setup(const TensorShape &shape0,$/;"	f	class:arm_compute::test::validation::PixelWiseMultiplicationBroadcastValidationFixture
setup	tests/validation/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape shape, PoolingLayerInfo pool_info, DataType data_type, DataLayout data_layout, int fractional_bits, QuantizationInfo quantization_info)$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationGenericFixture
setup	tests/validation/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape shape, PoolingType pool_type, DataType data_type, DataLayout data_layout = DataLayout::NCHW)$/;"	f	class:arm_compute::test::validation::GlobalPoolingLayerValidationFixture
setup	tests/validation/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape shape, PoolingType pool_type, Size2D pool_size, PadStrideInfo pad_stride_info, bool exclude_padding, DataType data_type, DataLayout data_layout)$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationFixture
setup	tests/validation/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape shape, PoolingType pool_type, Size2D pool_size, PadStrideInfo pad_stride_info, bool exclude_padding, DataType data_type, int fractional_bits)$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationFixedPointFixture
setup	tests/validation/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape shape, PoolingType pool_type, Size2D pool_size, PadStrideInfo pad_stride_info, bool exclude_padding, DataType data_type,$/;"	f	class:arm_compute::test::validation::PoolingLayerValidationQuantizedFixture
setup	tests/validation/fixtures/PoolingLayerFixture.h	/^    void setup(TensorShape src_shape, PoolingLayerInfo pool_info, DataType data_type)$/;"	f	class:arm_compute::test::validation::SpecialPoolingLayerValidationFixture
setup	tests/validation/fixtures/QuantizationLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::QuantizationValidationFixedPointFixture
setup	tests/validation/fixtures/QuantizationLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::QuantizationValidationFixture
setup	tests/validation/fixtures/RNNLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape recurrent_weights_shape, TensorShape bias_shape, TensorShape output_shape, ActivationLayerInfo info,$/;"	f	class:arm_compute::test::validation::RNNLayerValidationFixture
setup	tests/validation/fixtures/ReductionOperationFixture.h	/^    void setup(TensorShape shape, DataType data_type, unsigned int axis, ReductionOperation op)$/;"	f	class:arm_compute::test::validation::ReductionOperationValidationFixture
setup	tests/validation/fixtures/RemapFixture.h	/^    void setup(TensorShape shape, InterpolationPolicy policy, DataType data_type, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::RemapValidationFixture
setup	tests/validation/fixtures/ReshapeLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape output_shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::ReshapeLayerValidationFixture
setup	tests/validation/fixtures/ScaleFixture.h	/^    void setup(TensorShape shape, DataType data_type, DataLayout data_layout, InterpolationPolicy policy, BorderMode border_mode, SamplingPolicy sampling_policy)$/;"	f	class:arm_compute::test::validation::ScaleValidationFixture
setup	tests/validation/fixtures/ScharrFixture.h	/^    void setup(TensorShape shape, BorderMode border_mode, Format format, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::ScharrValidationFixture
setup	tests/validation/fixtures/SobelFixture.h	/^    void setup(TensorShape shape, BorderMode border_mode, Format format, GradientDimension gradient_dimension)$/;"	f	class:arm_compute::test::validation::SobelValidationFixture
setup	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type, QuantizationInfo quantization_info, float beta)$/;"	f	class:arm_compute::test::validation::SoftmaxValidationQuantizedFixture
setup	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type, float beta)$/;"	f	class:arm_compute::test::validation::SoftmaxValidationFixture
setup	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type, int fixed_point_position)$/;"	f	class:arm_compute::test::validation::SoftmaxValidationFixedPointFixture
setup	tests/validation/fixtures/SoftmaxLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type, int fractional_bits, QuantizationInfo quantization_info, float beta)$/;"	f	class:arm_compute::test::validation::SoftmaxValidationGenericFixture
setup	tests/validation/fixtures/TableLookupFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::TableLookupValidationFixture
setup	tests/validation/fixtures/ThresholdFixture.h	/^    void setup(TensorShape shape, uint8_t threshold, uint8_t false_value, uint8_t true_value, ThresholdType type, uint8_t upper, DataType data_type)$/;"	f	class:arm_compute::test::validation::ThresholdValidationFixture
setup	tests/validation/fixtures/TransposeFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::TransposeValidationFixture
setup	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    void setup()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigure2TestCaseFixture
setup	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    void setup()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerReconfigureTestCaseFixture
setup	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^    void setup()$/;"	f	class:arm_compute::test::validation::BlobMemoryManagerSimpleTestCaseFixture
setup	tests/validation/fixtures/WarpAffineFixture.h	/^    void setup(TensorShape shape, DataType data_type, InterpolationPolicy policy, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::WarpAffineValidationFixture
setup	tests/validation/fixtures/WarpPerspectiveFixture.h	/^    void setup(TensorShape input_shape, DataType data_type, InterpolationPolicy policy, BorderMode border_mode)$/;"	f	class:arm_compute::test::validation::WarpPerspectiveValidationFixture
setup	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^    void setup(TensorShape shape, DataType data_type)$/;"	f	class:arm_compute::test::validation::WidthConcatenateLayerValidationFixture
setup	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, Size2D output_tile, DataLayout data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradFilterTransformValidationFixture
setup	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, DataType data_type, ActivationLayerInfo act_info)$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerFastMathValidationFixture
setup	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, TensorShape weights_shape, TensorShape bias_shape, TensorShape output_shape, PadStrideInfo info, Size2D dilation, DataType data_type, ActivationLayerInfo act_info)$/;"	f	class:arm_compute::test::validation::WinogradConvolutionLayerValidationFixture
setup	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, WinogradInfo winograd_info, DataLayout data_layout, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradInputTransformValidationFixture
setup	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^    void setup(TensorShape input_shape, WinogradInfo winograd_info, DataType data_type)$/;"	f	class:arm_compute::test::validation::WinogradOutputTransformValidationFixture
setup_assembly_kernel	arm_compute/runtime/NEON/AssemblyHelper.h	/^inline bool setup_assembly_kernel(const ITensor *a, const ITensor *b, ITensor *d, float alpha, float beta, bool pretranspose_hint,$/;"	f	namespace:arm_compute
setup_backend_context	src/graph/backends/CL/CLDeviceBackend.cpp	/^void CLDeviceBackend::setup_backend_context(GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
setup_backend_context	src/graph/backends/GLES/GCDeviceBackend.cpp	/^void GCDeviceBackend::setup_backend_context(GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
setup_backend_context	src/graph/backends/NEON/NEDeviceBackend.cpp	/^void NEDeviceBackend::setup_backend_context(GraphContext &ctx)$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
setup_context	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^void GCScheduler::setup_context()$/;"	f	class:GCScheduler
setup_default_graph_context	src/graph/Utils.cpp	/^void setup_default_graph_context(GraphContext &ctx)$/;"	f	namespace:arm_compute::graph
setup_dummy_fbo	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^void GCKernelLibrary::setup_dummy_fbo()$/;"	f	class:GCKernelLibrary
sf	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
sf	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
sgemm_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^    sgemm_12x8(const CPUInfo *ci)$/;"	f	class:arm_gemm::sgemm_12x8
sgemm_12x8	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_12x8.hpp	/^class sgemm_12x8$/;"	c	namespace:arm_gemm
sgemm_4x16_impl	arm_compute/core/NEON/kernels/convolution/winograd/gemm/a64_sgemm_4x16.hpp	/^inline void sgemm_4x16_impl<0>($/;"	f
sgemm_4x16_impl	arm_compute/core/NEON/kernels/convolution/winograd/gemm/a64_sgemm_4x16.hpp	/^inline void sgemm_4x16_impl<1>($/;"	f
sgemm_4x16_impl	arm_compute/core/NEON/kernels/convolution/winograd/gemm/a64_sgemm_4x16.hpp	/^inline void sgemm_4x16_impl<2>($/;"	f
sgemm_4x16_impl	arm_compute/core/NEON/kernels/convolution/winograd/gemm/a64_sgemm_4x16.hpp	/^inline void sgemm_4x16_impl<3>($/;"	f
sgemm_8x6	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^    sgemm_8x6(const CPUInfo *ci)$/;"	f	class:arm_gemm::sgemm_8x6
sgemm_8x6	src/core/NEON/kernels/arm_gemm/kernels/a32_sgemm_8x6.hpp	/^class sgemm_8x6$/;"	c	namespace:arm_gemm
sgemm_native_16x4	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^    sgemm_native_16x4(const CPUInfo *ci)$/;"	f	class:arm_gemm::sgemm_native_16x4
sgemm_native_16x4	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemm_native_16x4.hpp	/^class sgemm_native_16x4$/;"	c	namespace:arm_gemm
sgemv_pretransposed	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^    sgemv_pretransposed(const CPUInfo *ci)$/;"	f	class:arm_gemm::sgemv_pretransposed
sgemv_pretransposed	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_pretransposed.hpp	/^class sgemv_pretransposed$/;"	c	namespace:arm_gemm
sgemv_trans	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^    sgemv_trans(const CPUInfo *ci)$/;"	f	class:arm_gemm::sgemv_trans
sgemv_trans	src/core/NEON/kernels/arm_gemm/kernels/a64_sgemv_trans.hpp	/^class sgemv_trans$/;"	c	namespace:arm_gemm
shader_bm	tests/framework/instruments/hwc.hpp	/^    uint32_t shader_bm;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup
shader_present	tests/framework/instruments/hwc.hpp	/^    uint64_t shader_present;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
shape	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    const ShapeT shape;$/;"	m	class:final
shape	arm_compute/core/Types.h	/^    TensorShape shape;  \/**< Shape of the valid region. *\/$/;"	m	struct:arm_compute::ValidRegion
shape	tests/CL/CLAccessor.h	/^inline TensorShape CLAccessor::shape() const$/;"	f	class:arm_compute::test::CLAccessor
shape	tests/GLES_COMPUTE/GCAccessor.h	/^inline TensorShape GCAccessor::shape() const$/;"	f	class:arm_compute::test::GCAccessor
shape	tests/NEON/Accessor.h	/^inline TensorShape Accessor::shape() const$/;"	f	class:arm_compute::test::Accessor
shape	tests/SimpleTensor.h	/^TensorShape SimpleTensor<T>::shape() const$/;"	f	class:arm_compute::test::SimpleTensor
shape_calculator	arm_compute/core/utils/misc/ShapeCalculator.h	/^namespace shape_calculator$/;"	n	namespace:arm_compute::misc
shape_to_valid_region	tests/Utils.h	/^inline ValidRegion shape_to_valid_region(const TensorShape &a_shape, bool border_undefined = false, BorderSize border_size = BorderSize(0))$/;"	f	namespace:arm_compute::test
shape_to_valid_region_gaussian_pyramid_half	tests/Utils.h	/^inline ValidRegion shape_to_valid_region_gaussian_pyramid_half(const TensorShape &a_shape, const ValidRegion &a_valid_region, bool border_undefined = false)$/;"	f	namespace:arm_compute::test
shared_handle	include/CL/cl_dx9_media_sharing.h	/^    HANDLE shared_handle;$/;"	m	struct:_cl_dx9_surface_info_khr
shift_left	tests/validation/FixedPoint.h	/^    static fixed_point<T> shift_left(fixed_point<T> x, size_t shift)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
shift_right	tests/validation/FixedPoint.h	/^    static fixed_point<T> shift_right(fixed_point<T> x, size_t shift)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
showNode	documentation/navtree.js	/^function showNode(o, node, index, hash)$/;"	f
showRoot	documentation/navtree.js	/^function showRoot()$/;"	f
showSyncOff	documentation/navtree.js	/^function showSyncOff(n,relpath)$/;"	f
showSyncOn	documentation/navtree.js	/^function showSyncOn(n,relpath)$/;"	f
sidenav	documentation/resize.js	/^var sidenav,navtree,content,header;$/;"	v
signal	arm_compute/core/utils/misc/Signal.h	/^namespace signal$/;"	n	namespace:arm_compute::utils
signal	support/Semaphore.h	/^    inline void signal()$/;"	f	class:arm_compute::Semaphore
signbit	include/half/half.hpp	/^			static bool signbit(half arg) { return (arg.data_&0x8000) != 0; }$/;"	f	struct:detail::functions
signbit	include/half/half.hpp	/^		inline bool signbit(expr arg) { return functions::signbit(arg); }$/;"	f	namespace:detail
signbit	include/half/half.hpp	/^		inline bool signbit(half arg) { return functions::signbit(arg); }$/;"	f	namespace:detail
signbit	tests/validation/FixedPoint.h	/^    static bool signbit(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
sin	include/half/half.hpp	/^			static expr sin(float arg) { return expr(std::sin(arg)); }$/;"	f	struct:detail::functions
sin	include/half/half.hpp	/^		inline expr sin(expr arg) { return functions::sin(arg); }$/;"	f	namespace:detail
sin	include/half/half.hpp	/^		inline expr sin(half arg) { return functions::sin(arg); }$/;"	f	namespace:detail
sinh	include/half/half.hpp	/^			static expr sinh(float arg) { return expr(std::sinh(arg)); }$/;"	f	struct:detail::functions
sinh	include/half/half.hpp	/^		inline expr sinh(expr arg) { return functions::sinh(arg); }$/;"	f	namespace:detail
sinh	include/half/half.hpp	/^		inline expr sinh(half arg) { return functions::sinh(arg); }$/;"	f	namespace:detail
six	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t six       = vdupq_n_s32(6);$/;"	m	namespace:__anon295	file:
size	arm_compute/core/GLES_COMPUTE/OpenGLES.h	/^    size_t size() const$/;"	f	class:arm_compute::gles::NDRange
size	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  inline int size() const$/;"	f	struct:Tensor4DShape
size	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^  inline int size(void) const$/;"	f	struct:KernelShape
size	arm_compute/runtime/IMemoryRegion.h	/^    size_t size()$/;"	f	class:arm_compute::IMemoryRegion
size	arm_compute/runtime/ISimpleLifetimeManager.h	/^        size_t size;   \/**< Element's size *\/$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Element
size	include/CL/cl.h	/^    size_t                  size;$/;"	m	struct:_cl_buffer_region
size	include/CL/cl.hpp	/^    static ::size_t size(const LocalSpaceArg& value) { return value.size_; }$/;"	f	struct:cl::detail::KernelArgumentHandler
size	include/CL/cl.hpp	/^    static ::size_t size(const T&) { return sizeof(T); }$/;"	f	struct:cl::detail::KernelArgumentHandler
size	include/CL/cl.hpp	/^    unsigned int size(void) const$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
size	include/CL/cl2.hpp	/^        static size_type size(const cl::DeviceCommandQueue&) { return sizeof(cl_command_queue); }$/;"	f	struct:cl::detail::KernelArgumentHandler
size	include/CL/cl2.hpp	/^    size_type size() const$/;"	f	class:cl::NDRange
size	include/CL/cl2.hpp	/^    static size_type size(const LocalSpaceArg& value) { return value.size_; }$/;"	f	struct:cl::detail::KernelArgumentHandler
size	include/CL/cl2.hpp	/^    static size_type size(const T&) { return sizeof(T); }$/;"	f	struct:cl::detail::KernelArgumentHandler
size	include/CL/cl2.hpp	/^    static size_type size(const T&) { return sizeof(cl_mem); }$/;"	f	struct:cl::detail::KernelArgumentHandler
size	src/core/IDistribution1D.cpp	/^size_t IDistribution1D::size() const$/;"	f	class:IDistribution1D
size	src/runtime/ILutAllocator.cpp	/^size_t ILutAllocator::size() const$/;"	f	class:ILutAllocator
size	tests/CL/CLAccessor.h	/^inline size_t CLAccessor::size() const$/;"	f	class:arm_compute::test::CLAccessor
size	tests/GLES_COMPUTE/GCAccessor.h	/^inline size_t GCAccessor::size() const$/;"	f	class:arm_compute::test::GCAccessor
size	tests/NEON/Accessor.h	/^inline size_t Accessor::size() const$/;"	f	class:arm_compute::test::Accessor
size	tests/SimpleTensor.h	/^size_t SimpleTensor<T>::size() const$/;"	f	class:arm_compute::test::SimpleTensor
size	tests/datasets/BatchNormalizationLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::BatchNormalizationLayerDataset
size	tests/datasets/ChannelShuffleLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ChannelShuffleLayerDataset
size	tests/datasets/ConvolutionLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ConvolutionLayerDataset
size	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::DepthwiseConvolutionLayerDataset
size	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::DepthwiseSeparableConvolutionLayerDataset
size	tests/datasets/FullyConnectedLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::FullyConnectedLayerDataset
size	tests/datasets/GEMMDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::GEMMDataset
size	tests/datasets/GEMMLowpDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::GEMMLowpDataset
size	tests/datasets/HOGDescriptorDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::HOGDescriptorDataset
size	tests/datasets/HOGMultiDetectionDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::HOGMultiDetectionDataset
size	tests/datasets/ImageFileDatasets.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ImageFileDataset
size	tests/datasets/LSTMLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::LSTMLayerDataset
size	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::NormalizePlanarYUVLayerDataset
size	tests/datasets/OpticalFlowDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::OpticalFlowDataset
size	tests/datasets/PoolingLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::PoolingLayerDataset
size	tests/datasets/RNNLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::RNNLayerDataset
size	tests/datasets/ROIPoolingLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ROIPoolingLayerDataset
size	tests/datasets/ReshapeLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ReshapeLayerDataset
size	tests/datasets/ScaleLayerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ScaleLayerDataset
size	tests/datasets/ThresholdDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::ThresholdDataset
size	tests/datasets/WinogradInputTransformDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::WinogradInputTransformDataset
size	tests/datasets/WinogradOutputTransformDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::datasets::WinogradOutputTransformDataset
size	tests/framework/datasets/CartesianProductDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::CartesianProductDataset
size	tests/framework/datasets/ContainerDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::ContainerDataset
size	tests/framework/datasets/InitializerListDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::final
size	tests/framework/datasets/JoinDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::JoinDataset
size	tests/framework/datasets/RangeDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::final
size	tests/framework/datasets/SingletonDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::SingletonDataset
size	tests/framework/datasets/ZipDataset.h	/^    int size() const$/;"	f	class:arm_compute::test::framework::dataset::ZipDataset
size	tests/framework/instruments/hwc.hpp	/^    int      size;$/;"	m	struct:mali_userspace::__anon389
size	tests/framework/instruments/hwc.hpp	/^    uint32_t      size;$/;"	m	struct:mali_userspace::__anon390::kbase_ioctl_get_gpuprops
size_	include/CL/cl.hpp	/^    ::size_t size_;$/;"	m	struct:cl::LocalSpaceArg
size_	include/CL/cl.hpp	/^    unsigned int size_;$/;"	m	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
size_	include/CL/cl2.hpp	/^    size_type size_;$/;"	m	struct:cl::LocalSpaceArg
size_bytes	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    inline size_t size_bytes() const {$/;"	f	class:final
size_in_bytes	src/runtime/CL/CLLut.cpp	/^size_t CLLut::size_in_bytes() const$/;"	f	class:CLLut
size_in_bytes	src/runtime/Lut.cpp	/^size_t Lut::size_in_bytes() const$/;"	f	class:Lut
size_t	include/CL/cl.hpp	/^    size_t()$/;"	f	class:cl::size_t
size_t	include/CL/cl.hpp	/^class size_t$/;"	c	namespace:cl
size_t	include/CL/cl2.hpp	/^            size_t()$/;"	f	class:cl::compatibility::size_t
size_t	include/CL/cl2.hpp	/^            size_t(const array<size_type, N> &rhs)$/;"	f	class:cl::compatibility::size_t
size_t	include/CL/cl2.hpp	/^        class size_t$/;"	c	namespace:cl::compatibility
size_type	include/CL/cl2.hpp	/^    typedef std::size_t size_type;$/;"	t	class:cl::SVMAllocator
sizer	tests/framework/instruments/hwc.hpp	/^    uint64_t sizer;$/;"	m	union:mali_userspace::__anon390::kbase_pointer
sizer	tests/framework/instruments/hwc.hpp	/^    uint64_t sizer;$/;"	m	union:mali_userspace::__anon390::kbase_uk_hwcnt_header
sizer	tests/framework/instruments/hwc.hpp	/^    uint64_t sizer;$/;"	m	union:mali_userspace::uk_header
sizes_	include/CL/cl.hpp	/^    size_t<3> sizes_;$/;"	m	class:cl::NDRange
sizes_	include/CL/cl2.hpp	/^    size_type sizes_[3];$/;"	m	class:cl::NDRange
slide_window_slice_1D	arm_compute/core/Window.h	/^    bool slide_window_slice_1D(Window &slice) const$/;"	f	class:arm_compute::Window
slide_window_slice_2D	arm_compute/core/Window.h	/^    bool slide_window_slice_2D(Window &slice) const$/;"	f	class:arm_compute::Window
slide_window_slice_3D	arm_compute/core/Window.h	/^    bool slide_window_slice_3D(Window &slice) const$/;"	f	class:arm_compute::Window
slide_window_slice_4D	arm_compute/core/Window.h	/^    bool slide_window_slice_4D(Window &slice) const$/;"	f	class:arm_compute::Window
small_gaussian_pyramid_levels	tests/validation/CL/GaussianPyramid.cpp	/^const auto small_gaussian_pyramid_levels = combine(datasets::Medium2DShapes(), datasets::BorderModes()) * framework::dataset::make("numlevels", 2, 4);$/;"	m	namespace:arm_compute::test::validation::__anon424	file:
small_gaussian_pyramid_levels	tests/validation/NEON/GaussianPyramid.cpp	/^const auto small_gaussian_pyramid_levels = combine(datasets::Medium2DShapes(), datasets::BorderModes()) * framework::dataset::make("numlevels", 2, 4);$/;"	m	namespace:arm_compute::test::validation::__anon500	file:
small_tensor_size_optim	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^constexpr int small_tensor_size_optim = 8;$/;"	m	namespace:__anon256	file:
snprintf	support/ToolchainSupport.h	/^inline int snprintf(char *s, size_t n, const char *fmt, Ts &&... args)$/;"	f	namespace:arm_compute::support::cpp11
sobel	tests/validation/reference/Sobel.cpp	/^std::pair<SimpleTensor<T>, SimpleTensor<T>> sobel(const SimpleTensor<U> &src, int filter_size, BorderMode border_mode, uint8_t constant_border_value, GradientDimension gradient_dimension)$/;"	f	namespace:arm_compute::test::validation::reference
sobel__filter_8cl	documentation/sobel__filter_8cl.js	/^var sobel__filter_8cl =$/;"	v
softmax__layer_8cl	documentation/softmax__layer_8cl.js	/^var softmax__layer_8cl =$/;"	v
softmax__layer__quantized_8cl	documentation/softmax__layer__quantized_8cl.js	/^var softmax__layer__quantized_8cl =$/;"	v
softmax_layer	tests/validation/reference/SoftmaxLayer.cpp	/^SimpleTensor<T> softmax_layer(const SimpleTensor<T> &src, float beta)$/;"	f	namespace:arm_compute::test::validation::reference
softmax_layer	tests/validation/reference/SoftmaxLayer.cpp	/^SimpleTensor<uint8_t> softmax_layer<uint8_t>(const SimpleTensor<uint8_t> &src, float beta)$/;"	f	namespace:arm_compute::test::validation::reference
sort	src/core/NEON/kernels/NEMedian3x3Kernel.cpp	/^inline void sort(uint8x8_t &a, uint8x8_t &b)$/;"	f	namespace:__anon280
sort	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline void sort(uint8x8_t &a, uint8x8_t &b)$/;"	f	namespace:arm_compute::__anon282
sort21	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline void sort21(uint8x8_t p[21])$/;"	f	namespace:arm_compute::__anon282
sort25	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline void sort25(uint8x8_t p[25])$/;"	f	namespace:arm_compute::__anon282
sort5	src/core/CL/cl_kernels/non_linear_filter_helpers.h	/^inline uchar8 sort5(uchar8 p0, uchar8 p1, uchar8 p2, uchar8 p3, uchar8 p4)$/;"	f
sort5	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline void sort5(uint8x8_t &p0, uint8x8_t &p1, uint8x8_t &p2, uint8x8_t &p3, uint8x8_t &p4)$/;"	f	namespace:arm_compute::__anon282
sort9	src/core/CL/cl_kernels/non_linear_filter_helpers.h	/^inline uchar8 sort9(uchar8 p0, uchar8 p1, uchar8 p2, uchar8 p3, uchar8 p4, uchar8 p5, uchar8 p6, uchar8 p7, uchar8 p8)$/;"	f
sort9	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^inline void sort9(uint8x8_t &p0, uint8x8_t &p1, uint8x8_t &p2,$/;"	f	namespace:arm_compute::__anon282
sort_indices	arm_compute/core/utils/misc/Utility.h	/^std::vector<size_t> sort_indices(const std::vector<T> &v)$/;"	f	namespace:arm_compute::utility
spatial_scale	arm_compute/core/Types.h	/^    float spatial_scale() const$/;"	f	class:arm_compute::HOGNormType::ROIPoolingLayerInfo
sqrt	include/half/half.hpp	/^			static expr sqrt(float arg) { return expr(std::sqrt(arg)); }$/;"	f	struct:detail::functions
sqrt	include/half/half.hpp	/^		inline expr sqrt(expr arg) { return functions::sqrt(arg); }$/;"	f	namespace:detail
sqrt	include/half/half.hpp	/^		inline expr sqrt(half arg) { return functions::sqrt(arg); }$/;"	f	namespace:detail
sqrt_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float sqrt_op(float x)$/;"	f
sqrtv	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t sqrtv(float32x4_t x)$/;"	f	namespace:__anon278
sqrtv	src/core/NEON/kernels/NEMagnitudePhaseKernel.cpp	/^inline float32x4_t sqrtv(float32x4_t x)$/;"	f	namespace:fp16
square	tests/validation/reference/ReductionOperation.cpp	/^struct square$/;"	s	namespace:arm_compute::test::validation::reference::__anon546	file:
square_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float square_op(float x)$/;"	f
srelu_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float srelu_op(float x)$/;"	f
start	arm_compute/core/Types.h	/^    int start(unsigned int d) const$/;"	f	struct:arm_compute::ValidRegion
start	arm_compute/core/Window.h	/^        constexpr int start() const$/;"	f	class:arm_compute::Window::Dimension
start	src/runtime/CPP/CPPScheduler.cpp	/^void Thread::start(ICPPKernel *kernel, const Window &window, const ThreadInfo &info)$/;"	f	class:arm_compute::Thread
start	tests/framework/Profiler.cpp	/^void Profiler::start()$/;"	f	class:arm_compute::test::framework::Profiler
start	tests/framework/instruments/Instrument.h	/^    virtual void start()$/;"	f	class:arm_compute::test::framework::Instrument
start	tests/framework/instruments/MaliCounter.cpp	/^void MaliCounter::start()$/;"	f	class:arm_compute::test::framework::MaliCounter
start	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^void OpenCLMemoryUsage::start()$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
start	tests/framework/instruments/OpenCLTimer.cpp	/^void OpenCLTimer::start()$/;"	f	class:arm_compute::test::framework::OpenCLTimer
start	tests/framework/instruments/PMUCounter.cpp	/^void PMUCounter::start()$/;"	f	class:arm_compute::test::framework::PMUCounter
start	tests/framework/instruments/SchedulerTimer.cpp	/^void SchedulerTimer::start()$/;"	f	class:arm_compute::test::framework::SchedulerTimer
start	tests/framework/instruments/WallClockTimer.cpp	/^void WallClockTimer::start()$/;"	f	class:arm_compute::test::framework::WallClockTimer
start_lifetime	src/runtime/ISimpleLifetimeManager.cpp	/^void ISimpleLifetimeManager::start_lifetime(void *obj)$/;"	f	class:ISimpleLifetimeManager
status	arm_compute/runtime/ISimpleLifetimeManager.h	/^        bool   status; \/**< Lifetime status *\/$/;"	m	struct:arm_compute::ISimpleLifetimeManager::Element
status	tests/framework/Framework.h	/^    TestCaseFactory::Status status; \/**< Test status *\/$/;"	m	struct:arm_compute::test::framework::TestInfo
status	tests/framework/TestCaseFactory.h	/^inline TestCaseFactory::Status TestCaseFactory::status() const$/;"	f	class:arm_compute::test::framework::TestCaseFactory
step	arm_compute/core/Window.h	/^        constexpr int step() const$/;"	f	class:arm_compute::Window::Dimension
step_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint step_x;                        \/**< stride_x * number of elements along X processed per workitem (in bytes) *\/$/;"	m	struct:ImageAttributes
step_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint step_x;                        \/**< stride_x * number of elements along X processed per workitem (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
step_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint step_x;                        \/**< stride_x * number of elements along X processed per workitem (in bytes) *\/$/;"	m	struct:VectorAttributes
step_y	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint step_y;                        \/**< stride_y * number of elements along Y processed per workitem (in bytes) *\/$/;"	m	struct:ImageAttributes
step_y	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint step_y;                        \/**< stride_y * number of elements along Y processed per workitem (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
step_z	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint step_z;                        \/**< stride_z * number of elements along Z processed per workitem (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
stof	support/ToolchainSupport.h	/^inline float stof(const std::string &str)$/;"	f	namespace:arm_compute::support::cpp11
stoi	support/ToolchainSupport.h	/^inline int stoi(const std::string &str, std::size_t *pos = 0, int base = 10)$/;"	f	namespace:arm_compute::support::cpp11
stop	tests/framework/Profiler.cpp	/^void Profiler::stop()$/;"	f	class:arm_compute::test::framework::Profiler
stop	tests/framework/instruments/Instrument.h	/^    virtual void stop()$/;"	f	class:arm_compute::test::framework::Instrument
stop	tests/framework/instruments/MaliCounter.cpp	/^void MaliCounter::stop()$/;"	f	class:arm_compute::test::framework::MaliCounter
stop	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^void OpenCLMemoryUsage::stop()$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
stop	tests/framework/instruments/OpenCLTimer.cpp	/^void OpenCLTimer::stop()$/;"	f	class:arm_compute::test::framework::OpenCLTimer
stop	tests/framework/instruments/PMUCounter.cpp	/^void PMUCounter::stop()$/;"	f	class:arm_compute::test::framework::PMUCounter
stop	tests/framework/instruments/WallClockTimer.cpp	/^void WallClockTimer::stop()$/;"	f	class:arm_compute::test::framework::WallClockTimer
stop_on_error	tests/framework/Framework.cpp	/^bool Framework::stop_on_error() const$/;"	f	class:arm_compute::test::framework::Framework
storeLink	documentation/navtree.js	/^function storeLink(link)$/;"	f
store_8h	documentation/store_8h.js	/^var store_8h =$/;"	v
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^void store_results<1>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^void store_results<2>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolution3x3.h	/^void store_results<3>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<1>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<1>(float16_t *buffer, const float16x8x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<1>(int32_t *buffer, const int32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<1>(qint16_t *buffer, const qint16x8x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<2>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<2>(float16_t *buffer, const float16x8x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<2>(int32_t *buffer, const int32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<2>(qint16_t *buffer, const qint16x8x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<3>(float *buffer, const float32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<3>(float16_t *buffer, const float16x8x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<3>(int32_t *buffer, const int32x4x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	arm_compute/core/NEON/kernels/detail/NEDirectConvolutionDetail.h	/^inline void store_results<3>(qint16_t *buffer, const qint16x8x2_t &values)$/;"	f	namespace:arm_compute::detail
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const int16x8_t &out, const int16x8_t &out2, int16_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const int16x8_t &out, const int16x8_t &out2, uint8_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const int32x4_t &out, const int32x4_t &out2, int16_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const int32x4_t &out, const int32x4_t &out2, uint8_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const uint16x8_t &out, const uint16x8_t &out2, int16_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const uint16x8_t &out, const uint16x8_t &out2, uint8_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const uint32x4_t &out, const uint32x4_t &out2, int16_t *output)$/;"	f	namespace:arm_compute::__anon251
store_results	src/core/NEON/kernels/NEConvolutionKernel.cpp	/^inline void store_results(const uint32x4_t &out, const uint32x4_t &out2, uint8_t *output)$/;"	f	namespace:arm_compute::__anon251
store_value_with_data_type	tests/Utils.h	/^void store_value_with_data_type(void *ptr, T value, DataType data_type)$/;"	f	namespace:arm_compute::test
storeq	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^void storeq(uint16_t *ptr, uint16x8_t val)$/;"	f	namespace:__anon252
storeq	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^void storeq(uint32_t *ptr, uint32x4_t val)$/;"	f	namespace:__anon252
storeq	src/core/NEON/kernels/NEDepthConcatenateLayerKernel.cpp	/^void storeq(uint8_t *ptr, uint8x16_t val)$/;"	f	namespace:__anon252
stoul	support/ToolchainSupport.h	/^inline unsigned long stoul(const std::string &str, std::size_t *pos = 0, int base = 10)$/;"	f	namespace:arm_compute::support::cpp11
str	include/libnpy/npy.hpp	/^    inline std::string str() {$/;"	f	struct:npy::Typestring
stream	src/core/utils/io/FileHandler.cpp	/^std::fstream &FileHandler::stream()$/;"	f	class:FileHandler
strength	src/core/CL/cl_kernels/types.h	/^    float strength;        \/**< The strength of the keypoint. Its definition is specific to the corner detector. *\/$/;"	m	struct:Keypoint
stride	arm_compute/core/Types.h	/^    std::pair<unsigned int, unsigned int> stride() const$/;"	f	class:arm_compute::HOGNormType::PadStrideInfo
stride_cols	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int stride_cols = StrideCols;$/;"	m	class:depthwise::DepthwiseConvolution
stride_rows	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static constexpr int stride_rows = StrideRows;$/;"	m	class:depthwise::DepthwiseConvolution
stride_w	src/core/CL/cl_kernels/helpers.h	/^    int             stride_w;                      \/**< Stride of the image in W dimension (in bytes) *\/$/;"	m	struct:Tensor4D
stride_x	src/core/CL/cl_kernels/helpers.h	/^    int             stride_x;                      \/**< Stride of the image in X dimension (in bytes) *\/$/;"	m	struct:Image
stride_x	src/core/CL/cl_kernels/helpers.h	/^    int             stride_x;                      \/**< Stride of the image in X dimension (in bytes) *\/$/;"	m	struct:Tensor3D
stride_x	src/core/CL/cl_kernels/helpers.h	/^    int             stride_x;                      \/**< Stride of the image in X dimension (in bytes) *\/$/;"	m	struct:Tensor4D
stride_x	src/core/CL/cl_kernels/helpers.h	/^    int             stride_x;                      \/**< Stride of the image in X dimension (in bytes) *\/$/;"	m	struct:Vector
stride_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int stride_x;                \/**< Stride of the image in X dimension (in bytes) *\/$/;"	m	struct:ImageIterator
stride_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int stride_x;                \/**< Stride of the tensor in X dimension (in bytes) *\/$/;"	m	struct:Tensor3DIterator
stride_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int stride_x;                \/**< Stride of the vector in X dimension (in bytes) *\/$/;"	m	struct:VectorIterator
stride_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint stride_x;                      \/**< Stride of the image in X dimension (in bytes) *\/$/;"	m	struct:ImageAttributes
stride_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint stride_x;                      \/**< Stride of the tensor in X dimension (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
stride_x	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint stride_x;                      \/**< Stride of the vector in X dimension (in bytes) *\/$/;"	m	struct:VectorAttributes
stride_y	src/core/CL/cl_kernels/helpers.h	/^    int             stride_y;                      \/**< Stride of the image in Y dimension (in bytes) *\/$/;"	m	struct:Image
stride_y	src/core/CL/cl_kernels/helpers.h	/^    int             stride_y;                      \/**< Stride of the image in Y dimension (in bytes) *\/$/;"	m	struct:Tensor3D
stride_y	src/core/CL/cl_kernels/helpers.h	/^    int             stride_y;                      \/**< Stride of the image in Y dimension (in bytes) *\/$/;"	m	struct:Tensor4D
stride_y	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int stride_y;                \/**< Stride of the image in Y dimension (in bytes) *\/$/;"	m	struct:ImageIterator
stride_y	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int stride_y;                \/**< Stride of the tensor in Y dimension (in bytes) *\/$/;"	m	struct:Tensor3DIterator
stride_y	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint stride_y;                      \/**< Stride of the image in Y dimension (in bytes) *\/$/;"	m	struct:ImageAttributes
stride_y	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint stride_y;                      \/**< Stride of the tensor in Y dimension (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
stride_z	src/core/CL/cl_kernels/helpers.h	/^    int             stride_z;                      \/**< Stride of the image in Z dimension (in bytes) *\/$/;"	m	struct:Tensor3D
stride_z	src/core/CL/cl_kernels/helpers.h	/^    int             stride_z;                      \/**< Stride of the image in Z dimension (in bytes) *\/$/;"	m	struct:Tensor4D
stride_z	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    int stride_z;                \/**< Stride of the tensor in Z dimension (in bytes) *\/$/;"	m	struct:Tensor3DIterator
stride_z	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^    uint stride_z;                      \/**< Stride of the tensor in Z dimension (in bytes) *\/$/;"	m	struct:Tensor3DAttributes
string_from_activation_func	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_activation_func(ActivationLayerInfo::ActivationFunction act)$/;"	f	class:arm_compute
string_from_border_mode	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_border_mode(BorderMode border_mode)$/;"	f	class:arm_compute
string_from_channel	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_channel(Channel channel)$/;"	f	class:arm_compute
string_from_data_layout	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_data_layout(DataLayout dl)$/;"	f	class:arm_compute
string_from_data_type	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_data_type(DataType dt)$/;"	f	class:arm_compute
string_from_format	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_format(Format format)$/;"	f	class:arm_compute
string_from_interpolation_policy	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_interpolation_policy(InterpolationPolicy policy)$/;"	f	class:arm_compute
string_from_log_level	src/core/utils/logging/Helpers.cpp	/^const std::string &arm_compute::logging::string_from_log_level(LogLevel log_level)$/;"	f	class:arm_compute::logging
string_from_matrix_pattern	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_matrix_pattern(MatrixPattern pattern)$/;"	f	class:arm_compute
string_from_non_linear_filter_function	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_non_linear_filter_function(NonLinearFilterFunction function)$/;"	f	class:arm_compute
string_from_norm_type	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_norm_type(NormType type)$/;"	f	class:arm_compute
string_from_pooling_type	src/core/Utils.cpp	/^const std::string &arm_compute::string_from_pooling_type(PoolingType type)$/;"	f	class:arm_compute
string_from_scheduler_type	src/runtime/Utils.cpp	/^const std::string &arm_compute::string_from_scheduler_type(Scheduler::Type t)$/;"	f	class:arm_compute
string_from_target	src/core/GPUTarget.cpp	/^const std::string &string_from_target(GPUTarget target)$/;"	f	namespace:arm_compute
string_with_format	arm_compute/core/utils/logging/Helpers.h	/^inline std::string string_with_format(const std::string &fmt, Ts &&... args)$/;"	f	namespace:arm_compute::logging
stringify_set	src/core/CL/CLKernelLibrary.cpp	/^std::string CLKernelLibrary::stringify_set(const StringSet &s) const$/;"	f	class:CLKernelLibrary
stringify_set	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^std::string GCKernelLibrary::stringify_set(const StringSet &s) const$/;"	f	class:GCKernelLibrary
stripPath	documentation/navtree.js	/^function stripPath(uri)$/;"	f
stripPath2	documentation/navtree.js	/^function stripPath2(uri)$/;"	f
strong_type	arm_compute/core/utils/strong_type/StrongType.h	/^namespace strong_type$/;"	n	namespace:arm_compute
strong_type	arm_compute/core/utils/strong_type/StrongTypeAttributes.h	/^namespace strong_type$/;"	n	namespace:arm_compute
struct_coordinates2_d	documentation/struct_coordinates2_d.js	/^var struct_coordinates2_d =$/;"	v
struct_detection_window	documentation/struct_detection_window.js	/^var struct_detection_window =$/;"	v
struct_image	documentation/struct_image.js	/^var struct_image =$/;"	v
struct_internal_keypoint	documentation/struct_internal_keypoint.js	/^var struct_internal_keypoint =$/;"	v
struct_keypoint	documentation/struct_keypoint.js	/^var struct_keypoint =$/;"	v
struct_tensor3_d	documentation/struct_tensor3_d.js	/^var struct_tensor3_d =$/;"	v
struct_tensor4_d	documentation/struct_tensor4_d.js	/^var struct_tensor4_d =$/;"	v
struct_vector	documentation/struct_vector.js	/^var struct_vector =$/;"	v
structarm__compute_1_1_border_size	documentation/structarm__compute_1_1_border_size.js	/^var structarm__compute_1_1_border_size =$/;"	v
structarm__compute_1_1_c_l_coefficient_table	documentation/structarm__compute_1_1_c_l_coefficient_table.js	/^var structarm__compute_1_1_c_l_coefficient_table =$/;"	v
structarm__compute_1_1_c_l_device_options	documentation/structarm__compute_1_1_c_l_device_options.js	/^var structarm__compute_1_1_c_l_device_options =$/;"	v
structarm__compute_1_1_c_l_l_k_internal_keypoint	documentation/structarm__compute_1_1_c_l_l_k_internal_keypoint.js	/^var structarm__compute_1_1_c_l_l_k_internal_keypoint =$/;"	v
structarm__compute_1_1_c_l_old_value	documentation/structarm__compute_1_1_c_l_old_value.js	/^var structarm__compute_1_1_c_l_old_value =$/;"	v
structarm__compute_1_1_coordinates2_d	documentation/structarm__compute_1_1_coordinates2_d.js	/^var structarm__compute_1_1_coordinates2_d =$/;"	v
structarm__compute_1_1_coordinates3_d	documentation/structarm__compute_1_1_coordinates3_d.js	/^var structarm__compute_1_1_coordinates3_d =$/;"	v
structarm__compute_1_1_detection_window	documentation/structarm__compute_1_1_detection_window.js	/^var structarm__compute_1_1_detection_window =$/;"	v
structarm__compute_1_1_i_o_format_info	documentation/structarm__compute_1_1_i_o_format_info.js	/^var structarm__compute_1_1_i_o_format_info =$/;"	v
structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6a90589c47f06eb971d548591f23c285af	documentation/navtreeindex48.js	/^"structarm__compute_1_1_i_o_format_info.xhtml#a36c28b28da4e04d698d6b598fb1eaca6a90589c47f06eb971d548591f23c285af":[5,0,0,400,0,1],$/;"	p	class:NAVTREEINDEX48
structarm__compute_1_1_internal_key_point	documentation/structarm__compute_1_1_internal_key_point.js	/^var structarm__compute_1_1_internal_key_point =$/;"	v
structarm__compute_1_1_key_point	documentation/structarm__compute_1_1_key_point.js	/^var structarm__compute_1_1_key_point =$/;"	v
structarm__compute_1_1_min_max_location_values	documentation/structarm__compute_1_1_min_max_location_values.js	/^var structarm__compute_1_1_min_max_location_values =$/;"	v
structarm__compute_1_1_n_e_l_k_internal_keypoint	documentation/structarm__compute_1_1_n_e_l_k_internal_keypoint.js	/^var structarm__compute_1_1_n_e_l_k_internal_keypoint =$/;"	v
structarm__compute_1_1_optical_flow_parameters	documentation/structarm__compute_1_1_optical_flow_parameters.js	/^var structarm__compute_1_1_optical_flow_parameters =$/;"	v
structarm__compute_1_1_quantization_info	documentation/structarm__compute_1_1_quantization_info.js	/^var structarm__compute_1_1_quantization_info =$/;"	v
structarm__compute_1_1_r_o_i	documentation/structarm__compute_1_1_r_o_i.js	/^var structarm__compute_1_1_r_o_i =$/;"	v
structarm__compute_1_1_rectangle	documentation/structarm__compute_1_1_rectangle.js	/^var structarm__compute_1_1_rectangle =$/;"	v
structarm__compute_1_1_thread_info	documentation/structarm__compute_1_1_thread_info.js	/^var structarm__compute_1_1_thread_info =$/;"	v
structarm__compute_1_1_valid_region	documentation/structarm__compute_1_1_valid_region.js	/^var structarm__compute_1_1_valid_region =$/;"	v
structarm__compute_1_1_winograd_info	documentation/structarm__compute_1_1_winograd_info.js	/^var structarm__compute_1_1_winograd_info =$/;"	v
structarm__compute_1_1detail_1_1brelu	documentation/structarm__compute_1_1detail_1_1brelu.js	/^var structarm__compute_1_1detail_1_1brelu =$/;"	v
structarm__compute_1_1detail_1_1dummy	documentation/structarm__compute_1_1detail_1_1dummy.js	/^var structarm__compute_1_1detail_1_1dummy =$/;"	v
structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4	documentation/structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4.js	/^var structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4 =$/;"	v
structarm__compute_1_1detail_1_1lubrelu	documentation/structarm__compute_1_1detail_1_1lubrelu.js	/^var structarm__compute_1_1detail_1_1lubrelu =$/;"	v
structarm__compute_1_1detail_1_1relu	documentation/structarm__compute_1_1detail_1_1relu.js	/^var structarm__compute_1_1detail_1_1relu =$/;"	v
structarm__compute_1_1graph_1_1_execution_task	documentation/structarm__compute_1_1graph_1_1_execution_task.js	/^var structarm__compute_1_1graph_1_1_execution_task =$/;"	v
structarm__compute_1_1graph_1_1_execution_workload	documentation/structarm__compute_1_1graph_1_1_execution_workload.js	/^var structarm__compute_1_1graph_1_1_execution_workload =$/;"	v
structarm__compute_1_1graph_1_1_graph_config	documentation/structarm__compute_1_1graph_1_1_graph_config.js	/^var structarm__compute_1_1graph_1_1_graph_config =$/;"	v
structarm__compute_1_1graph_1_1_memory_manager_context	documentation/structarm__compute_1_1graph_1_1_memory_manager_context.js	/^var structarm__compute_1_1graph_1_1_memory_manager_context =$/;"	v
structarm__compute_1_1graph_1_1_node_idx_pair	documentation/structarm__compute_1_1graph_1_1_node_idx_pair.js	/^var structarm__compute_1_1graph_1_1_node_idx_pair =$/;"	v
structarm__compute_1_1graph_1_1_node_params	documentation/structarm__compute_1_1graph_1_1_node_params.js	/^var structarm__compute_1_1graph_1_1_node_params =$/;"	v
structarm__compute_1_1graph_1_1_tensor_descriptor	documentation/structarm__compute_1_1graph_1_1_tensor_descriptor.js	/^var structarm__compute_1_1graph_1_1_tensor_descriptor =$/;"	v
structarm__compute_1_1graph_1_1frontend_1_1_stream_hints	documentation/structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.js	/^var structarm__compute_1_1graph_1_1frontend_1_1_stream_hints =$/;"	v
structarm__compute_1_1logging_1_1_log_msg	documentation/structarm__compute_1_1logging_1_1_log_msg.js	/^var structarm__compute_1_1logging_1_1_log_msg =$/;"	v
structarm__compute_1_1misc_1_1_c_r_t_p	documentation/structarm__compute_1_1misc_1_1_c_r_t_p.js	/^var structarm__compute_1_1misc_1_1_c_r_t_p =$/;"	v
structarm__compute_1_1support_1_1cpp14_1_1___unique__if	documentation/structarm__compute_1_1support_1_1cpp14_1_1___unique__if.js	/^var structarm__compute_1_1support_1_1cpp14_1_1___unique__if =$/;"	v
structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t	documentation/structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4.js	/^var structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[]_4 =$/;"	v
structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t	documentation/structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4.js	/^var structarm__compute_1_1support_1_1cpp14_1_1___unique__if_3_01_t[_n]_4 =$/;"	v
structarm__compute_1_1test_1_1common__promoted__signed__type	documentation/structarm__compute_1_1test_1_1common__promoted__signed__type.js	/^var structarm__compute_1_1test_1_1common__promoted__signed__type =$/;"	v
structarm__compute_1_1test_1_1common__promoted__unsigned__type	documentation/structarm__compute_1_1test_1_1common__promoted__unsigned__type.js	/^var structarm__compute_1_1test_1_1common__promoted__unsigned__type =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01float_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01float_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01float_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01half_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01half_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01half_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int16__t_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int16__t_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int16__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int32__t_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int32__t_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int32__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int8__t_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int8__t_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01int8__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint16__t_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint16__t_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint16__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint32__t_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint32__t_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint32__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint8__t_01_4	documentation/structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint8__t_01_4.js	/^var structarm__compute_1_1test_1_1fixed__point__arithmetic_1_1traits_1_1promote_3_01uint8__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1framework_1_1_measurement	documentation/structarm__compute_1_1test_1_1framework_1_1_measurement.js	/^var structarm__compute_1_1test_1_1framework_1_1_measurement =$/;"	v
structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value	documentation/structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value.js	/^var structarm__compute_1_1test_1_1framework_1_1_measurement_1_1_value =$/;"	v
structarm__compute_1_1test_1_1framework_1_1_scheduler_timer_1_1kernel__info	documentation/structarm__compute_1_1test_1_1framework_1_1_scheduler_timer_1_1kernel__info.js	/^var structarm__compute_1_1test_1_1framework_1_1_scheduler_timer_1_1kernel__info =$/;"	v
structarm__compute_1_1test_1_1framework_1_1_test_info	documentation/structarm__compute_1_1test_1_1framework_1_1_test_info.js	/^var structarm__compute_1_1test_1_1framework_1_1_test_info =$/;"	v
structarm__compute_1_1test_1_1framework_1_1_test_result	documentation/structarm__compute_1_1test_1_1framework_1_1_test_result.js	/^var structarm__compute_1_1test_1_1framework_1_1_test_result =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset_1_1iterator.xhtml#af1b1c7856a59f34c7d3570f946a2ff00	documentation/navtreeindex49.js	/^"structarm__compute_1_1test_1_1framework_1_1dataset_1_1_cartesian_product_dataset_1_1iterator.xhtml#af1b1c7856a59f34c7d3570f946a2ff00":[5,0,0,9,3,0,0,0,6],$/;"	p	class:NAVTREEINDEX49
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_container_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_initializer_list_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_join_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_range_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_singleton_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset_1_1iterator	documentation/structarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset_1_1iterator.js	/^var structarm__compute_1_1test_1_1framework_1_1dataset_1_1_zip_dataset_1_1iterator =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01float_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01half_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01half_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01half_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01int16__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01int32__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01int8__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01uint16__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01uint32__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4	documentation/structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4.js	/^var structarm__compute_1_1test_1_1traits_1_1promote_3_01uint8__t_01_4 =$/;"	v
structarm__compute_1_1test_1_1validation_1_1_harris_corners_parameters	documentation/structarm__compute_1_1test_1_1validation_1_1_harris_corners_parameters.js	/^var structarm__compute_1_1test_1_1validation_1_1_harris_corners_parameters =$/;"	v
structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4	documentation/structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4.js	/^var structarm__compute_1_1test_1_1validation_1_1compare_3_01_absolute_tolerance_3_01_u_01_4_01_4 =$/;"	v
structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4	documentation/structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4.js	/^var structarm__compute_1_1test_1_1validation_1_1compare_3_01_relative_tolerance_3_01_u_01_4_01_4 =$/;"	v
structarm__compute_1_1test_1_1validation_1_1compare__base	documentation/structarm__compute_1_1test_1_1validation_1_1compare__base.js	/^var structarm__compute_1_1test_1_1validation_1_1compare__base =$/;"	v
sub	tests/validation/FixedPoint.h	/^    static fixed_point<T> sub(fixed_point<T> x, fixed_point<T> y)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
sub	tests/validation/FixedPoint.h	/^inline fixed_point<T> sub(fixed_point<T> x, fixed_point<T> y)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
sub_F16_F16_F16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_F16_F16_F16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_F32_F32_F32	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_F32_F32_F32(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_saturate_QS8_QS8_QS8	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_saturate_QS8_QS8_QS8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_saturate_S16_S16_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_saturate_S16_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_saturate_S16_U8_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_saturate_S16_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_saturate_U8_S16_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_saturate_U8_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_saturate_U8_U8_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_saturate_U8_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_saturate_U8_U8_U8	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_saturate_U8_U8_U8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_wrap_QS8_QS8_QS8	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_wrap_QS8_QS8_QS8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_wrap_S16_S16_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_wrap_S16_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_wrap_S16_U8_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_wrap_S16_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_wrap_U8_S16_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_wrap_U8_S16_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_wrap_U8_U8_S16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_wrap_U8_U8_S16(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
sub_wrap_U8_U8_U8	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^void sub_wrap_U8_U8_U8(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &window)$/;"	f	namespace:__anon242
subpixel_mode	include/CL/cl_ext_intel.h	/^    cl_uint subpixel_mode;$/;"	m	struct:_cl_motion_estimation_desc_intel
support	support/ToolchainSupport.h	/^namespace support$/;"	n	namespace:arm_compute
suspend_size	tests/framework/instruments/hwc.hpp	/^    uint32_t suspend_size;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
swap	tests/SimpleTensor.h	/^void swap(SimpleTensor<U> &tensor1, SimpleTensor<U> &tensor2)$/;"	f	namespace:arm_compute::test
sync	arm_compute/runtime/CL/CLScheduler.h	/^    void sync()$/;"	f	class:arm_compute::CLScheduler
sync	tests/benchmark/fixtures/ActivationLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::ActivationLayerFixture
sync	tests/benchmark/fixtures/AlexNetFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::AlexNetFixture
sync	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::BatchNormalizationLayerFixture
sync	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::ConvolutionLayerFixture
sync	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::DepthConcatenateLayerFixture
sync	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::DepthwiseConvolutionLayerFixture
sync	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::DepthwiseSeparableConvolutionLayerFixture
sync	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::DequantizationLayerFixture
sync	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::DirectConvolutionLayerFixture
sync	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::EqualizeHistogramFixture
sync	tests/benchmark/fixtures/FlattenLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::FlattenLayerFixture
sync	tests/benchmark/fixtures/FloorFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::FloorFixture
sync	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::FullyConnectedLayerFixture
sync	tests/benchmark/fixtures/GEMMFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::GEMMFixture
sync	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::GEMMInterleave4x4Fixture
sync	tests/benchmark/fixtures/GEMMLowpFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::GEMMLowpMatrixMultiplyCoreFixture
sync	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::HOGDescriptorFixture
sync	tests/benchmark/fixtures/HarrisCornersFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::HarrisCornersFixture
sync	tests/benchmark/fixtures/HistogramFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::HistogramFixture
sync	tests/benchmark/fixtures/IntegralImageFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::IntegralImageFixture
sync	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::L2NormalizeLayerFixture
sync	tests/benchmark/fixtures/LeNet5Fixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::LeNet5Fixture
sync	tests/benchmark/fixtures/MagnitudeFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::MagnitudeFixture
sync	tests/benchmark/fixtures/MeanStdDevFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::MeanStdDevFixture
sync	tests/benchmark/fixtures/Median3x3Fixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::Median3x3Fixture
sync	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::MinMaxLocationFixture
sync	tests/benchmark/fixtures/MobileNetFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::MobileNetFixture
sync	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::MobileNetV1Fixture
sync	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::NormalizationLayerFixture
sync	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::NormalizePlanarYUVLayerFixture
sync	tests/benchmark/fixtures/PhaseFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::PhaseFixture
sync	tests/benchmark/fixtures/PoolingLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::PoolingLayerFixture
sync	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::QuantizationLayerFixture
sync	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::ROIPoolingLayerFixture
sync	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::ReshapeLayerFixture
sync	tests/benchmark/fixtures/ScaleFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::ScaleFixture
sync	tests/benchmark/fixtures/ScaleLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::ScaleLayerFixture
sync	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::SoftmaxLayerFixture
sync	tests/benchmark/fixtures/TransposeFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::TransposeFixture
sync	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^    void sync()$/;"	f	class:arm_compute::test::benchmark::WinogradConvolutionLayerFixture
sync	tests/networks/AlexNetNetwork.h	/^    void sync()$/;"	f	class:arm_compute::test::networks::AlexNetNetwork
sync	tests/networks/LeNet5Network.h	/^    void sync()$/;"	f	class:arm_compute::test::networks::LeNet5Network
sync	tests/networks/MobileNetNetwork.h	/^    void sync()$/;"	f	class:arm_compute::test::networks::MobileNetNetwork
sync	tests/networks/MobileNetV1Network.h	/^    void sync()$/;"	f	class:arm_compute::test::networks::MobileNetV1Network
sync_if_necessary	tests/Utils.h	/^inline void sync_if_necessary()$/;"	f	namespace:arm_compute::test
sync_tensor_if_necessary	tests/Utils.h	/^inline void sync_tensor_if_necessary(TensorType &tensor)$/;"	f	namespace:arm_compute::test
tableLookup	src/core/NEON/kernels/NETableLookupKernel.cpp	/^void NETableLookupKernel::tableLookup(const Window &window)$/;"	f	class:NETableLookupKernel
tableLookup	src/core/NEON/kernels/NETableLookupKernel.cpp	/^void NETableLookupKernel::tableLookup<uint8_t>(const Window &window)$/;"	f	class:arm_compute::NETableLookupKernel
table_lookup	tests/validation/reference/TableLookup.cpp	/^SimpleTensor<T> table_lookup(const SimpleTensor<T> &src, const std::map<T, T> &rawlut)$/;"	f	namespace:arm_compute::test::validation::reference
tablelookup_8cl	documentation/tablelookup_8cl.js	/^var tablelookup_8cl =$/;"	v
tail_node	arm_compute/graph/frontend/IStream.h	/^    NodeID tail_node()$/;"	f	class:arm_compute::graph::frontend::IStream
tan	include/half/half.hpp	/^			static expr tan(float arg) { return expr(std::tan(arg)); }$/;"	f	struct:detail::functions
tan	include/half/half.hpp	/^		inline expr tan(expr arg) { return functions::tan(arg); }$/;"	f	namespace:detail
tan	include/half/half.hpp	/^		inline expr tan(half arg) { return functions::tan(arg); }$/;"	f	namespace:detail
tanh	include/half/half.hpp	/^			static expr tanh(float arg) { return expr(std::tanh(arg)); }$/;"	f	struct:detail::functions
tanh	include/half/half.hpp	/^		inline expr tanh(expr arg) { return functions::tanh(arg); }$/;"	f	namespace:detail
tanh	include/half/half.hpp	/^		inline expr tanh(half arg) { return functions::tanh(arg); }$/;"	f	namespace:detail
tanh	tests/validation/FixedPoint.h	/^    static fixed_point<T> tanh(fixed_point<T> x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
tanh	tests/validation/FixedPoint.h	/^inline fixed_point<T> tanh(fixed_point<T> x)$/;"	f	namespace:arm_compute::test::fixed_point_arithmetic::detail
tanh_op	src/core/GLES_COMPUTE/cs_shaders/activation_layer_helpers_cs.h	/^float tanh_op(float x)$/;"	f
target	arm_compute/graph/GraphContext.h	/^    Target                                       target      = { Target::UNSPECIFIED }; \/**< Target *\/$/;"	m	struct:arm_compute::graph::MemoryManagerContext
target	arm_compute/graph/Types.h	/^    Target      target; \/**< Node target *\/$/;"	m	struct:arm_compute::graph::NodeParams
target	arm_compute/runtime/CL/CLScheduler.h	/^    GPUTarget target() const$/;"	f	class:arm_compute::CLScheduler
target	src/graph/backends/CL/CLSubTensorHandle.cpp	/^Target CLSubTensorHandle::target() const$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
target	src/graph/backends/CL/CLTensorHandle.cpp	/^Target CLTensorHandle::target() const$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
target	src/graph/backends/GLES/GCTensorHandle.cpp	/^Target GCTensorHandle::target() const$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
target	src/graph/backends/NEON/NESubTensorHandle.cpp	/^Target NESubTensorHandle::target() const$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
target	src/graph/backends/NEON/NETensorHandle.cpp	/^Target NETensorHandle::target() const$/;"	f	class:arm_compute::graph::backends::NETensorHandle
target_hint	arm_compute/graph/frontend/Types.h	/^    Target                     target_hint                       = { Target::UNSPECIFIED };                 \/**< Target execution hint *\/$/;"	m	struct:arm_compute::graph::frontend::StreamHints
task	arm_compute/graph/Workload.h	/^    std::unique_ptr<arm_compute::IFunction> task = {}; \/**< Task to execute *\/$/;"	m	struct:arm_compute::graph::ExecutionTask
tasks	arm_compute/graph/Workload.h	/^    std::vector<ExecutionTask> tasks   = {};          \/**< Execution workload *\/$/;"	m	struct:arm_compute::graph::ExecutionWorkload
teardown	tests/benchmark/fixtures/ActivationLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::ActivationLayerFixture
teardown	tests/benchmark/fixtures/AlexNetFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::AlexNetFixture
teardown	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::BatchNormalizationLayerFixture
teardown	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::ConvolutionLayerFixture
teardown	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::DepthConcatenateLayerFixture
teardown	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::DepthwiseConvolutionLayerFixture
teardown	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::DepthwiseSeparableConvolutionLayerFixture
teardown	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::DequantizationLayerFixture
teardown	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::DirectConvolutionLayerFixture
teardown	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::EqualizeHistogramFixture
teardown	tests/benchmark/fixtures/FlattenLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::FlattenLayerFixture
teardown	tests/benchmark/fixtures/FloorFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::FloorFixture
teardown	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::FullyConnectedLayerFixture
teardown	tests/benchmark/fixtures/GEMMFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::GEMMFixture
teardown	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::GEMMInterleave4x4Fixture
teardown	tests/benchmark/fixtures/GEMMLowpFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::GEMMLowpMatrixMultiplyCoreFixture
teardown	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::HOGDescriptorFixture
teardown	tests/benchmark/fixtures/HarrisCornersFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::HarrisCornersFixture
teardown	tests/benchmark/fixtures/HistogramFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::HistogramFixture
teardown	tests/benchmark/fixtures/IntegralImageFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::IntegralImageFixture
teardown	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::L2NormalizeLayerFixture
teardown	tests/benchmark/fixtures/LeNet5Fixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::LeNet5Fixture
teardown	tests/benchmark/fixtures/MagnitudeFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::MagnitudeFixture
teardown	tests/benchmark/fixtures/MeanStdDevFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::MeanStdDevFixture
teardown	tests/benchmark/fixtures/Median3x3Fixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::Median3x3Fixture
teardown	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::MinMaxLocationFixture
teardown	tests/benchmark/fixtures/MobileNetFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::MobileNetFixture
teardown	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::MobileNetV1Fixture
teardown	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::NormalizationLayerFixture
teardown	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::NormalizePlanarYUVLayerFixture
teardown	tests/benchmark/fixtures/PhaseFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::PhaseFixture
teardown	tests/benchmark/fixtures/PoolingLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::PoolingLayerFixture
teardown	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::QuantizationLayerFixture
teardown	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::ROIPoolingLayerFixture
teardown	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::ReshapeLayerFixture
teardown	tests/benchmark/fixtures/ScaleFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::ScaleFixture
teardown	tests/benchmark/fixtures/ScaleLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::ScaleLayerFixture
teardown	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::SoftmaxLayerFixture
teardown	tests/benchmark/fixtures/TransposeFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::TransposeFixture
teardown	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^    void teardown()$/;"	f	class:arm_compute::test::benchmark::WinogradConvolutionLayerFixture
teardown	tests/framework/Fixture.h	/^    void teardown() {};$/;"	f	class:arm_compute::test::framework::Fixture
ten	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^const int16x8_t ten         = vdupq_n_s16(10);$/;"	m	namespace:__anon294	file:
tensor	arm_compute/graph/Edge.h	/^    Tensor *tensor() const$/;"	f	class:arm_compute::graph::final
tensor	src/graph/Graph.cpp	/^Tensor *Graph::tensor(TensorID id)$/;"	f	class:arm_compute::graph::Graph
tensor	src/graph/Graph.cpp	/^const Tensor *Graph::tensor(TensorID id) const$/;"	f	class:arm_compute::graph::Graph
tensor	src/graph/backends/CL/CLSubTensorHandle.cpp	/^arm_compute::ITensor &CLSubTensorHandle::tensor()$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
tensor	src/graph/backends/CL/CLSubTensorHandle.cpp	/^const arm_compute::ITensor &CLSubTensorHandle::tensor() const$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
tensor	src/graph/backends/CL/CLTensorHandle.cpp	/^arm_compute::ITensor &CLTensorHandle::tensor()$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
tensor	src/graph/backends/CL/CLTensorHandle.cpp	/^const arm_compute::ITensor &CLTensorHandle::tensor() const$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
tensor	src/graph/backends/GLES/GCTensorHandle.cpp	/^arm_compute::ITensor &GCTensorHandle::tensor()$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
tensor	src/graph/backends/GLES/GCTensorHandle.cpp	/^const arm_compute::ITensor &GCTensorHandle::tensor() const$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
tensor	src/graph/backends/NEON/NESubTensorHandle.cpp	/^arm_compute::ITensor &NESubTensorHandle::tensor()$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
tensor	src/graph/backends/NEON/NESubTensorHandle.cpp	/^const arm_compute::ITensor &NESubTensorHandle::tensor() const$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
tensor	src/graph/backends/NEON/NETensorHandle.cpp	/^arm_compute::ITensor &NETensorHandle::tensor()$/;"	f	class:arm_compute::graph::backends::NETensorHandle
tensor	src/graph/backends/NEON/NETensorHandle.cpp	/^const arm_compute::ITensor &NETensorHandle::tensor() const$/;"	f	class:arm_compute::graph::backends::NETensorHandle
tensor3D_offset	src/core/CL/cl_kernels/helpers.h	/^__global inline const uchar *tensor3D_offset(const Tensor3D *tensor, int x, int y, int z)$/;"	f
tensor3D_offset_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^uint tensor3D_offset_in_bytes(Tensor3DIterator tensor_iter, int x, int y, int z)$/;"	f
tensor4D_offset	src/core/CL/cl_kernels/helpers.h	/^__global inline const uchar *tensor4D_offset(const Tensor4D *tensor, int x, int y, int z, int w)$/;"	f
tensor_elem_at	tests/validation/reference/Utils.h	/^T tensor_elem_at(const SimpleTensor<T> &src, Coordinates coord, BorderMode border_mode, T constant_border_value)$/;"	f	namespace:arm_compute::test::validation
tensor_id	arm_compute/graph/Edge.h	/^    TensorID tensor_id() const$/;"	f	class:arm_compute::graph::final
tensor_shape	src/core/PyramidInfo.cpp	/^const TensorShape &PyramidInfo::tensor_shape() const$/;"	f	class:PyramidInfo
tensors	src/graph/Graph.cpp	/^const std::vector<std::unique_ptr<Tensor>> &Graph::tensors() const$/;"	f	class:arm_compute::graph::Graph
tensors	src/graph/Graph.cpp	/^std::vector<std::unique_ptr<Tensor>> &Graph::tensors()$/;"	f	class:arm_compute::graph::Graph
term	tests/framework/instruments/MaliCounter.cpp	/^void MaliCounter::term()$/;"	f	class:arm_compute::test::framework::MaliCounter
termination	tests/Types.h	/^    Termination termination;$/;"	m	struct:arm_compute::OpticalFlowParameters
test	tests/AssetsLibrary.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/AssetsLibrary.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/CL/CLAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/CL/CLArrayAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/CL/CLHOGAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/CL/CLLutAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/CL/Helper.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/GLES_COMPUTE/GCAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/GLES_COMPUTE/Helper.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/Globals.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/IAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/IArrayAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/IHOGAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/ILutAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/NEON/Accessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/NEON/ArrayAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/NEON/HOGAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/NEON/Helper.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/NEON/LutAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/PaddingCalculator.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/RawLutAccessor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/RawTensor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/RawTensor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/SimpleTensor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/TensorCache.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/Utils.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/CL/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/DepthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/DepthwiseConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/DepthwiseSeparableConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/DequantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/DirectConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/EqualizeHistogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/FlattenLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Floor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/GEMMInterleave4x4.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/GEMMLowp.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/HOGDescriptor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/HarrisCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Histogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/IntegralImage.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/L2NormalizeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Magnitude.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/MeanStdDev.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Median3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/MinMaxLocation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/NormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Phase.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/QuantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/ROIPoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/ReshapeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/SYSTEM/AlexNet.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/SYSTEM/LeNet5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/SYSTEM/MobileNet.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/SYSTEM/MobileNetV1.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/CL/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/GLES_COMPUTE/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/DepthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/DequantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/DirectConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/EqualizeHistogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/FlattenLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Floor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/GEMMInterleave4x4.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/GEMMLowp.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/HOGDescriptor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/HarrisCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Histogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/IntegralImage.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/L2NormalizeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Magnitude.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/MeanStdDev.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Median3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/MinMaxLocation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/NormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Phase.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/QuantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/ROIPoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/ReshapeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/SYSTEM/AlexNet.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/SYSTEM/LeNet5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/NEON/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/benchmark/fixtures/ActivationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/AlexNetFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/BatchNormalizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/ConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/DepthConcatenateLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/DepthwiseConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/DequantizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/DirectConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/EqualizeHistogramFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/FlattenLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/FloorFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/FullyConnectedLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/GEMMFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/GEMMInterleave4x4Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/GEMMLowpFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/HOGDescriptorFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/HarrisCornersFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/HistogramFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/IntegralImageFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/L2NormalizeLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/LeNet5Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/MagnitudeFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/MeanStdDevFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/Median3x3Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/MinMaxLocationFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/MobileNetFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/MobileNetV1Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/NormalizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/NormalizePlanarYUVLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/PhaseFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/PoolingLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/QuantizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/ROIPoolingLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/ReshapeLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/ScaleFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/ScaleLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/SoftmaxLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/TransposeFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/benchmark/fixtures/WinogradConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ActivationFunctionsDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/AlexNetGEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/BatchNormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/BorderModeDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ChannelShuffleLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ConvertPolicyDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/DepthwiseConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/DepthwiseSeparableConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/DilatedConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/DirectConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/FullyConnectedLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/GEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/GEMMLowpDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/GoogleNetGEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/GradientDimensionDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/HOGDescriptorDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/HOGMultiDetectionDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ImageFileDatasets.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/InterpolationPolicyDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/LSTMLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/LargeConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/LargeGEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/LargeGEMMLowpDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/LocallyConnectedDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/MatrixMultiplyGEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/MatrixPatternDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/NonLinearFilterFunctionDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/NormalizationTypesDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/NormalizePlanarYUVLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/OpticalFlowDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/PoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/PoolingTypesDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/RNNLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ROIPoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/RandomBatchNormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/RandomNormalizePlanarYUVLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ReductionOperationDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ReshapeLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/SamplingPolicyDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ScaleLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ShapeDatasets.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/SmallConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/SmallGEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/SmallGEMMLowpDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/ThresholdDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/TinyConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/TinyGEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/WinogradInputTransformDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/WinogradOutputTransformDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/alexnet/AlexNetActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/alexnet/AlexNetConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/alexnet/AlexNetFullyConnectedLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/alexnet/AlexNetNormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/alexnet/AlexNetPoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1ConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1FullyConnectedLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1GEMMDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1NormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv1/GoogLeNetInceptionV1PoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4BatchNormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4ConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4FullyConnectedLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4NormalizePlanarYUVLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/googlenet/inceptionv4/GoogLeNetInceptionV4PoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/lenet5/LeNet5ActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/lenet5/LeNet5ConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/lenet5/LeNet5FullyConnectedLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/lenet5/LeNet5PoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/mobilenet/MobileNetActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/mobilenet/MobileNetBatchNormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/mobilenet/MobileNetConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/mobilenet/MobileNetDepthwiseSeparableConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/squeezenet/SqueezeNetActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/squeezenet/SqueezeNetConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/squeezenet/SqueezeNetPoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/vgg/vgg16/VGG16ActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/vgg/vgg16/VGG16ConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/vgg/vgg16/VGG16FullyConnectedLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/vgg/vgg16/VGG16PoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/yolo/v2/YOLOV2ActivationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/yolo/v2/YOLOV2BatchNormalizationLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/yolo/v2/YOLOV2ConvolutionLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/datasets/system_tests/yolo/v2/YOLOV2PoolingLayerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Asserts.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/DatasetModes.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/DatasetModes.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Exceptions.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/Exceptions.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Framework.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/Framework.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Profiler.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/Profiler.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Registrars.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/TestCase.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/TestCaseFactory.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/TestFilter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/TestFilter.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/TestResult.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/Utils.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/CommandLineParser.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/command_line/CommandLineParser.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/CommonOptions.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/command_line/CommonOptions.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/EnumListOption.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/EnumOption.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/ListOption.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/Option.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/command_line/Option.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/SimpleOption.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/command_line/ToggleOption.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/command_line/ToggleOption.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/CartesianProductDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/ContainerDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/Dataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/InitializerListDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/JoinDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/RangeDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/SingletonDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/datasets/ZipDataset.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/Instrument.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/Instruments.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/Instruments.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/InstrumentsStats.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/InstrumentsStats.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/MaliCounter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/MaliCounter.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/Measurement.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/OpenCLMemoryUsage.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/OpenCLTimer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/OpenCLTimer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/PMU.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/PMU.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/PMUCounter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/PMUCounter.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/SchedulerTimer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/SchedulerTimer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/instruments/WallClockTimer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/instruments/WallClockTimer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/printers/JSONPrinter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/printers/JSONPrinter.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/printers/PrettyPrinter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/printers/PrettyPrinter.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/printers/Printer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/printers/Printer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/framework/printers/Printers.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/framework/printers/Printers.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/main.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/networks/AlexNetNetwork.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/networks/LeNet5Network.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/networks/MobileNetNetwork.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/networks/MobileNetV1Network.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/CL/AbsoluteDifference.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Accumulate.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ArithmeticAddition.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ArithmeticSubtraction.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/BitwiseAnd.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/BitwiseNot.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/BitwiseOr.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/BitwiseXor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Box3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ChannelCombine.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ChannelExtract.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ChannelShuffle.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Convolution.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Copy.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DeconvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DepthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DepthConvertLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DepthwiseSeparableConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DequantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Derivative.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Dilate.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DilatedConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/DirectConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/EqualizeHistogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Erode.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/FastCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/FillBorder.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/FixedPoint/FixedPointTarget.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/CL/FixedPoint/FixedPoint_QS8.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Flatten.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Floor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/GEMMLowp.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Gaussian3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Gaussian5x5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/GaussianPyramid.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/GlobalPoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/HOGDescriptor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/HOGDetector.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/HOGMultiDetection.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/HarrisCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Histogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/IntegralImage.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/L2NormalizeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/LSTMLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/LocallyConnected.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Magnitude.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/MeanStdDev.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Median3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/MinMaxLocation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/NonLinearFilter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/NormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/OpticalFlow.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Permute.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Phase.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/PixelWiseMultiplication.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/QuantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/RNNLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ReductionOperation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Remap.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/ReshapeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/SYSTEM/AlexNet.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/SYSTEM/LeNet5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Scharr.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Sobel.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/TableLookup.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Threshold.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/UNIT/MemoryManager.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/UNIT/TensorAllocator.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/UNIT/Tuner.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/WarpAffine.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/WarpPerspective.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/WidthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CL/Winograd.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/CPP/Permute.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/FixedPoint.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/ArithmeticAddition.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/GlobalPoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/NormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/GLES_COMPUTE/UNIT/MemoryManager.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/Helpers.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/Helpers.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/NEON/AbsoluteDifference.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Accumulate.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ArithmeticAddition.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ArithmeticSubtraction.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/BitwiseAnd.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/BitwiseNot.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/BitwiseOr.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/BitwiseXor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Box3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ChannelCombine.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ChannelExtract.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Col2Im.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Convolution.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DeconvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DepthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DepthConvertLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DepthwiseSeparableConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DequantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Derivative.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Dilate.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/DirectConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/EqualizeHistogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Erode.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/FastCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/FillBorder.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/FixedPoint/FixedPoint.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/FixedPoint/FixedPointTarget.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Flatten.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Floor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/GEMMLowp.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Gaussian3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Gaussian5x5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/GaussianPyramid.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/GlobalPoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/HOGDescriptor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/HOGDetector.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/HOGMultiDetection.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/HarrisCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Histogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Im2Col.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/IntegralImage.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/L2NormalizeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/LocallyConnected.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Magnitude.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/MeanStdDev.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Median3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/MinMaxLocation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/NonLinearFilter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/NormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/OpticalFlow.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Permute.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Phase.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/PixelWiseMultiplication.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/QuantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ReductionOperation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Remap.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/ReshapeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/SYSTEM/AlexNet.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/SYSTEM/LeNet5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Schaar.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Sobel.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/TableLookup.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Threshold.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/UNIT/MemoryManager.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/UNIT/TensorAllocator.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/WarpAffine.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/NEON/WarpPerspective.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/UNIT/FixedPoint.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/UNIT/GPUTarget.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/UNIT/TensorInfo.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/UNIT/TensorShape.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/Validation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/Validation.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/AccumulateFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ActivationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/BitwiseAndFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/BitwiseNotFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/BitwiseOrFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/BitwiseXorFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/Box3x3Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ChannelCombineFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ChannelExtractFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ConvolutionFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/CopyFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DepthConvertLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DequantizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DerivativeFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DilateFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/DropoutLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/EqualizeHistogramFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ErodeFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/FastCornersFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/FixedPointFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/FlattenLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/FloorFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/GEMMFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/GEMMLowpFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/Gaussian3x3Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/Gaussian5x5Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/HOGDescriptorFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/HOGDetectorFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/HarrisCornersFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/HistogramFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/Im2ColFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/IntegralImageFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/LSTMLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/LocallyConnectedFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/MagnitudeFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/MeanStdDevFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/Median3x3Fixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/MinMaxLocationFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/NonLinearFilterFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/NormalizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/OpticalFlowFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/PermuteFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/PhaseFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/PoolingLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/QuantizationLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/RNNLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ReductionOperationFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/RemapFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ReshapeLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ScaleFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ScharrFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/SobelFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/SoftmaxLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/TableLookupFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/ThresholdFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/TransposeFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/WarpAffineFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/WarpPerspectiveFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/AbsoluteDifference.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/AbsoluteDifference.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Accumulate.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Accumulate.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ActivationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ActivationLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ArithmeticAddition.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ArithmeticAddition.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ArithmeticSubtraction.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ArithmeticSubtraction.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/BatchNormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/BatchNormalizationLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/BitwiseAnd.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/BitwiseAnd.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/BitwiseNot.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/BitwiseNot.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/BitwiseOr.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/BitwiseOr.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/BitwiseXor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/BitwiseXor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Box3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Box3x3.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ChannelCombine.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ChannelCombine.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ChannelExtract.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ChannelExtract.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ChannelShuffle.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ChannelShuffle.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ConvertFullyConnectedWeights.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ConvertFullyConnectedWeights.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Convolution.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Convolution.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Convolution3d.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ConvolutionLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Copy.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Copy.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/DeconvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/DeconvolutionLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/DepthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/DepthConcatenateLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/DepthConvertLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/DepthConvertLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/DepthwiseConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/DepthwiseConvolutionLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/DepthwiseSeparableConvolutionLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/DepthwiseSeparableConvolutionLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/DequantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/DequantizationLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Derivative.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Derivative.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Dilate.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Dilate.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/EqualizeHistogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/EqualizeHistogram.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Erode.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Erode.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/FastCorners.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/FastCorners.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/FixedPoint.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/FixedPoint.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/FixedPointPixelWiseMultiplication.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/FixedPointPixelWiseMultiplication.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/FlattenLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/FlattenLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Floor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Floor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/FullyConnectedLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/FullyConnectedLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/GEMM.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/GEMM.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/GEMMInterleave4x4.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/GEMMInterleaveBlocked.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/GEMMLowp.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/GEMMLowp.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/GEMMTranspose1xW.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Gaussian3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Gaussian3x3.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Gaussian5x5.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Gaussian5x5.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/GaussianPyramidHalf.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/GaussianPyramidHalf.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/HOGDescriptor.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/HOGDescriptor.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/HOGDetector.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/HOGDetector.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/HOGMultiDetection.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/HOGMultiDetection.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/HarrisCornerDetector.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/HarrisCornerDetector.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Histogram.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Histogram.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Im2Col.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Im2Col.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/IntegralImage.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/IntegralImage.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/L2NormalizeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/L2NormalizeLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/LocallyConnected.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/LocallyConnected.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Magnitude.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Magnitude.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/MeanStdDev.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/MeanStdDev.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Median3x3.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Median3x3.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/MinMaxLocation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/MinMaxLocation.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/NonLinearFilter.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/NonLinearFilter.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/NonMaximaSuppression.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/NonMaximaSuppression.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/NormalizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/NormalizationLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/NormalizePlanarYUVLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/NormalizePlanarYUVLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/OpticalFlow.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/OpticalFlow.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Permute.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Permute.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Phase.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Phase.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/PixelWiseMultiplication.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/PixelWiseMultiplication.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/PoolingLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/PoolingLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/QuantizationLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/QuantizationLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ReductionOperation.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ReductionOperation.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Remap.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Remap.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/ReshapeLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/ReshapeLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Scale.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Scale.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Scharr.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Scharr.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Sobel.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Sobel.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/SoftmaxLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/SoftmaxLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/TableLookup.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/TableLookup.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Threshold.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Threshold.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Transpose.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Transpose.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Utils.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Utils.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/UtilsQuantizedAsymm.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/WarpAffine.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/WarpAffine.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/WarpPerspective.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/WarpPerspective.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/WidthConcatenateLayer.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/WidthConcatenateLayer.h	/^namespace test$/;"	n	namespace:arm_compute
test	tests/validation/reference/Winograd.cpp	/^namespace test$/;"	n	namespace:arm_compute	file:
test	tests/validation/reference/Winograd.h	/^namespace test$/;"	n	namespace:arm_compute
test_infos	tests/framework/Framework.cpp	/^std::vector<TestInfo> Framework::test_infos() const$/;"	f	class:arm_compute::test::framework::Framework
test_measurements	tests/framework/instruments/Instrument.h	/^    virtual MeasurementsMap test_measurements() const$/;"	f	class:arm_compute::test::framework::Instrument
test_measurements	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^Instrument::MeasurementsMap OpenCLMemoryUsage::test_measurements() const$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
test_start	tests/framework/Profiler.cpp	/^void Profiler::test_start()$/;"	f	class:arm_compute::test::framework::Profiler
test_start	tests/framework/instruments/Instrument.h	/^    virtual void test_start()$/;"	f	class:arm_compute::test::framework::Instrument
test_start	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^void OpenCLMemoryUsage::test_start()$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
test_start	tests/framework/instruments/OpenCLTimer.cpp	/^void OpenCLTimer::test_start()$/;"	f	class:arm_compute::test::framework::OpenCLTimer
test_start	tests/framework/instruments/SchedulerTimer.cpp	/^void SchedulerTimer::test_start()$/;"	f	class:arm_compute::test::framework::SchedulerTimer
test_stop	tests/framework/Profiler.cpp	/^void Profiler::test_stop()$/;"	f	class:arm_compute::test::framework::Profiler
test_stop	tests/framework/instruments/Instrument.h	/^    virtual void test_stop()$/;"	f	class:arm_compute::test::framework::Instrument
test_stop	tests/framework/instruments/OpenCLMemoryUsage.cpp	/^void OpenCLMemoryUsage::test_stop()$/;"	f	class:arm_compute::test::framework::OpenCLMemoryUsage
test_stop	tests/framework/instruments/OpenCLTimer.cpp	/^void OpenCLTimer::test_stop()$/;"	f	class:arm_compute::test::framework::OpenCLTimer
test_stop	tests/framework/instruments/SchedulerTimer.cpp	/^void SchedulerTimer::test_stop()$/;"	f	class:arm_compute::test::framework::SchedulerTimer
tests_2_types_8h	documentation/tests_2_types_8h.js	/^var tests_2_types_8h =$/;"	v
tests_2_utils_8h	documentation/tests_2_utils_8h.js	/^var tests_2_utils_8h =$/;"	v
tests_2framework_2_macros_8h	documentation/tests_2framework_2_macros_8h.js	/^var tests_2framework_2_macros_8h =$/;"	v
tests_2framework_2_utils_8h	documentation/tests_2framework_2_utils_8h.js	/^var tests_2framework_2_utils_8h =$/;"	v
tests_2framework_2printers_2_printers_8h	documentation/tests_2framework_2printers_2_printers_8h.js	/^var tests_2framework_2printers_2_printers_8h =$/;"	v
tests_2validation_2_fixed_point_8h	documentation/tests_2validation_2_fixed_point_8h.js	/^var tests_2validation_2_fixed_point_8h =$/;"	v
tests_2validation_2_fixed_point_8h.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150	documentation/navtreeindex50.js	/^"tests_2validation_2_fixed_point_8h.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150":[6,0,4,6,6,15,1],$/;"	p	class:NAVTREEINDEX50
tests_2validation_2_helpers_8h	documentation/tests_2validation_2_helpers_8h.js	/^var tests_2validation_2_helpers_8h =$/;"	v
tests_2validation_2_u_n_i_t_2_utils_8cpp	documentation/tests_2validation_2_u_n_i_t_2_utils_8cpp.js	/^var tests_2validation_2_u_n_i_t_2_utils_8cpp =$/;"	v
tests_2validation_2reference_2_fixed_point_8h	documentation/tests_2validation_2reference_2_fixed_point_8h.js	/^var tests_2validation_2reference_2_fixed_point_8h =$/;"	v
tests_2validation_2reference_2_utils_8cpp	documentation/tests_2validation_2reference_2_utils_8cpp.js	/^var tests_2validation_2reference_2_utils_8cpp =$/;"	v
tests_2validation_2reference_2_utils_8h	documentation/tests_2validation_2reference_2_utils_8h.js	/^var tests_2validation_2reference_2_utils_8h =$/;"	v
texture_features	tests/framework/instruments/hwc.hpp	/^    uint32_t texture_features[3];$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
texture_features	tests/framework/instruments/hwc.hpp	/^    uint32_t texture_features[BASE_GPU_NUM_TEXTURE_FEATURES_REGISTERS];$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
tgamma	include/half/half.hpp	/^			static expr tgamma(float arg)$/;"	f	struct:detail::functions
tgamma	include/half/half.hpp	/^		inline expr tgamma(expr arg) { return functions::tgamma(arg); }$/;"	f	namespace:detail
tgamma	include/half/half.hpp	/^		inline expr tgamma(half arg) { return functions::tgamma(arg); }$/;"	f	namespace:detail
thread_features	tests/framework/instruments/hwc.hpp	/^    uint32_t thread_features;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
thread_max_barrier_size	tests/framework/instruments/hwc.hpp	/^    uint32_t thread_max_barrier_size;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
thread_max_threads	tests/framework/instruments/hwc.hpp	/^    uint32_t thread_max_threads;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
thread_max_workgroup_size	tests/framework/instruments/hwc.hpp	/^    uint32_t thread_max_workgroup_size;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
thread_props	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_thread_props        thread_props;$/;"	m	struct:mali_userspace::mali_base_gpu_props
threads	tests/framework/command_line/CommonOptions.h	/^    SimpleOption<int>                          *threads;        \/**< Number of threads option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
three	src/core/NEON/kernels/NEScharr3x3Kernel.cpp	/^const int16x8_t three       = vdupq_n_s16(3);$/;"	m	namespace:__anon294	file:
threshold	tests/benchmark/CL/HarrisCorners.cpp	/^const auto threshold     = framework::dataset::make("Threshold", { 0.00115f });$/;"	m	namespace:arm_compute::test::benchmark::__anon340	file:
threshold	tests/benchmark/NEON/HarrisCorners.cpp	/^const auto threshold     = framework::dataset::make("Threshold", { 0.00115f });$/;"	m	namespace:arm_compute::test::benchmark::__anon374	file:
threshold	tests/validation/reference/Threshold.cpp	/^SimpleTensor<T> threshold(const SimpleTensor<T> &src, T threshold, T false_value, T true_value, ThresholdType type, T upper)$/;"	f	namespace:arm_compute::test::validation::reference
threshold_8cl	documentation/threshold_8cl.js	/^var threshold_8cl =$/;"	v
throw_errors	tests/framework/Framework.cpp	/^bool Framework::throw_errors() const$/;"	f	class:arm_compute::test::framework::Framework
throw_errors	tests/framework/command_line/CommonOptions.h	/^    ToggleOption                               *throw_errors;   \/**< Throw errors option *\/$/;"	m	class:arm_compute::test::framework::CommonOptions
throw_if_error	arm_compute/core/Error.h	/^    void throw_if_error() const$/;"	f	class:arm_compute::Status
tile_fns	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static const TileFn tile_fns[2][2][max_pad_bottom][max_pad_right];$/;"	m	struct:winograd::WinogradGEMM::InputTransform
tile_fns	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^        static const TileFn tile_fns[max_pad_bottom][max_pad_right];$/;"	m	struct:winograd::WinogradGEMM::OutputTransform
tile_fns	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_3x3_fp32.cpp	/^const Transform::TileFn Transform::tile_fns[2][2][max_pad_bottom][max_pad_right] =$/;"	m	class:winograd::Transform	file:
tile_fns	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_5x5_fp32.cpp	/^const Transform::TileFn Transform::tile_fns[2][2][max_pad_bottom][max_pad_right] =$/;"	m	class:winograd::Transform	file:
tile_fns	src/core/NEON/kernels/convolution/winograd/transforms/input_4x4_3x3_fp32.cpp	/^const Transform::TileFn Transform::tile_fns[2][2][max_pad_bottom][max_pad_right] =$/;"	m	class:winograd::Transform	file:
tile_fns	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_3x3_fp32.cpp	/^const Transform::TileFn Transform::tile_fns[max_pad_bottom][max_pad_right] =$/;"	m	class:winograd::Transform	file:
tile_fns	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_5x5_fp32.cpp	/^const Transform::TileFn Transform::tile_fns[max_pad_bottom][max_pad_right] =$/;"	m	class:winograd::Transform	file:
tile_fns	src/core/NEON/kernels/convolution/winograd/transforms/output_4x4_3x3_fp32.cpp	/^const Transform::TileFn Transform::tile_fns[max_pad_bottom][max_pad_right] =$/;"	m	class:winograd::Transform	file:
tilefn_bottom	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static const TileFn tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns];$/;"	m	class:depthwise::DepthwiseConvolution
tilefn_bottom	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_bottom	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_bottom	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_bottom	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_bottom	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_bottom	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_bottom[n_in_pad_bottom_fns][n_out_pad_bottom_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_generic	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static const TileFn tilefn_generic;$/;"	m	class:depthwise::DepthwiseConvolution
tilefn_generic	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_generic = ConvImpl::template process_tile<false>;$/;"	m	class:depthwise::Conv	file:
tilefn_generic	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_generic = ConvImpl::template process_tile<false>;$/;"	m	class:depthwise::Conv	file:
tilefn_generic	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_generic = ConvImpl::template process_tile<false>;$/;"	m	class:depthwise::Conv	file:
tilefn_generic	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_generic = ConvImpl::template process_tile<false>;$/;"	m	class:depthwise::Conv	file:
tilefn_generic	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_generic = ConvImpl::template process_tile<false>;$/;"	m	class:depthwise::Conv	file:
tilefn_generic	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_generic = ConvImpl::template process_tile<false>;$/;"	m	class:depthwise::Conv	file:
tilefn_left	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static const TileFn tilefn_left[n_in_pad_left_fns];$/;"	m	class:depthwise::DepthwiseConvolution
tilefn_left	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_left[n_in_pad_left_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_left	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_left[n_in_pad_left_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_left	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_left[n_in_pad_left_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_left	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_left[n_in_pad_left_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_left	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_left[n_in_pad_left_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_left	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_left[n_in_pad_left_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_right	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static const TileFn tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns];$/;"	m	class:depthwise::DepthwiseConvolution
tilefn_right	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_right	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_right	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_right	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_right	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_right	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_right[n_in_pad_right_fns][n_out_pad_right_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_top	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static const TileFn tilefn_top[n_in_pad_top_fns];$/;"	m	class:depthwise::DepthwiseConvolution
tilefn_top	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_top[n_in_pad_top_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_top	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_top[n_in_pad_top_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_top	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_top[n_in_pad_top_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_top	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_top[n_in_pad_top_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_top	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_top[n_in_pad_top_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_top	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_top[n_in_pad_top_fns] = {$/;"	m	class:depthwise::Conv	file:
tilefn_unpadded	arm_compute/core/NEON/kernels/convolution/depthwise/depthwise.hpp	/^    static const TileFn tilefn_unpadded;$/;"	m	class:depthwise::DepthwiseConvolution
tilefn_unpadded	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_unpadded = ConvImpl::template process_tile<true, 0, 0, 0, 0, 0, 0>;$/;"	m	class:depthwise::Conv	file:
tilefn_unpadded	src/core/NEON/kernels/convolution/depthwise/depthwise_2x2_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_unpadded = ConvImpl::template process_tile<true, 0, 0, 0, 0, 0, 0>;$/;"	m	class:depthwise::Conv	file:
tilefn_unpadded	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_unpadded = ConvImpl::template process_tile<true, 0, 0, 0, 0, 0, 0>;$/;"	m	class:depthwise::Conv	file:
tilefn_unpadded	src/core/NEON/kernels/convolution/depthwise/depthwise_3x3_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_unpadded = ConvImpl::template process_tile<true, 0, 0, 0, 0, 0, 0>;$/;"	m	class:depthwise::Conv	file:
tilefn_unpadded	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_1x1_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_unpadded = ConvImpl::template process_tile<true, 0, 0, 0, 0, 0, 0>;$/;"	m	class:depthwise::Conv	file:
tilefn_unpadded	src/core/NEON/kernels/convolution/depthwise/depthwise_4x4_3x3_2x2_fp32_fp32.cpp	/^const Conv::TileFn Conv::tilefn_unpadded = ConvImpl::template process_tile<true, 0, 0, 0, 0, 0, 0>;$/;"	m	class:depthwise::Conv	file:
tiler_bm	tests/framework/instruments/hwc.hpp	/^    uint32_t tiler_bm;$/;"	m	struct:mali_userspace::__anon390::kbase_uk_hwcnt_reader_setup
tiler_features	tests/framework/instruments/hwc.hpp	/^    uint32_t tiler_features;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
tiler_present	tests/framework/instruments/hwc.hpp	/^    uint64_t tiler_present;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
tiler_props	tests/framework/instruments/hwc.hpp	/^    mali_base_gpu_tiler_props         tiler_props;$/;"	m	struct:mali_userspace::mali_base_gpu_props
times	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    unsigned long    times[maxevents]  = {};$/;"	m	class:arm_gemm::profiler
timestamp	tests/framework/instruments/hwc.hpp	/^    uint64_t timestamp  = 0;$/;"	m	struct:mali_userspace::kbase_hwcnt_reader_metadata
to_fixed	tests/validation/FixedPoint.h	/^    static constexpr T to_fixed(float val, uint8_t p)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
to_float	tests/validation/FixedPoint.h	/^    static constexpr float to_float(T val, uint8_t p)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
to_int	tests/validation/FixedPoint.h	/^    static constexpr T to_int(T val, uint8_t p)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::constant_expr
to_string	arm_compute/core/Size2D.h	/^    std::string to_string() const$/;"	f	class:arm_compute::Size2D
to_string	arm_compute/graph/TypePrinter.h	/^inline std::string to_string(const ActivationLayerInfo::ActivationFunction &act_function)$/;"	f	namespace:arm_compute::graph
to_string	support/ToolchainSupport.h	/^inline std::string to_string(T && value)$/;"	f	namespace:arm_compute::support::cpp11
to_string	support/ToolchainSupport.h	/^inline std::string to_string(bool value)$/;"	f	namespace:arm_compute::support::cpp11
to_string	tests/framework/DatasetModes.h	/^inline std::string to_string(DatasetMode mode)$/;"	f	class:arm_compute::test::framework::DatasetMode
to_string	tests/framework/Exceptions.cpp	/^std::string to_string(LogLevel level)$/;"	f	namespace:arm_compute::test::framework
to_string	tests/framework/instruments/Measurement.h	/^        std::string to_string() const$/;"	f	struct:arm_compute::test::framework::Measurement::Value
to_string	utils/TypePrinter.h	/^inline std::string to_string(const BorderMode &mode)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const BorderSize &border)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Channel &channel)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const ConvertPolicy &policy)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const ConvolutionMethod &conv_method)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Coordinates &coord)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const DetectionWindow &detection_window)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Dimensions<T> &dimensions)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const FixedPointOp &op)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Format &format)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const GPUTarget &gpu_target)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const HOGInfo &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const HOGNormType &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const InterpolationPolicy &policy)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const MatrixPattern &pattern)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const NonLinearFilterFunction &function)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const NormType &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const PadStrideInfo &pad_stride_info)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const PoolingLayerInfo &info)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const PoolingType &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const QuantizationInfo &quantization_info)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const ReductionOperation &op)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const RoundingPolicy &rounding_policy)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const SamplingPolicy &policy)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Size2D &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Strides &stride)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const TensorInfo &info)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const TensorShape &shape)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const Termination &termination)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const WinogradInfo &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::ActivationLayerInfo &info)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::ActivationLayerInfo::ActivationFunction &function)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::DataLayout &data_layout)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::DataType &data_type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::GradientDimension &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::MagnitudeType &type)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::NormalizationLayerInfo &info)$/;"	f	namespace:arm_compute
to_string	utils/TypePrinter.h	/^inline std::string to_string(const arm_compute::PhaseType &type)$/;"	f	namespace:arm_compute
toggleFolder	documentation/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	documentation/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	documentation/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleSyncButton	documentation/navtree.js	/^function toggleSyncButton(relpath)$/;"	f
toggleVisibility	documentation/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
tolerance	tests/validation/CL/ActivationLayer.cpp	/^AbsoluteTolerance<float> tolerance(ActivationLayerInfo::ActivationFunction activation, DataType data_type)$/;"	f	namespace:arm_compute::test::validation::__anon399
tolerance	tests/validation/CL/Magnitude.cpp	/^AbsoluteTolerance<T> tolerance(MagnitudeType magnitude_type)$/;"	f	namespace:arm_compute::test::validation::__anon433
tolerance	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^AbsoluteTolerance<float> tolerance(ActivationLayerInfo::ActivationFunction activation, DataType data_type)$/;"	f	namespace:arm_compute::test::validation::__anon454
tolerance	tests/validation/NEON/ActivationLayer.cpp	/^AbsoluteTolerance<float> tolerance(DataType data_type, ActivationLayerInfo::ActivationFunction activation)$/;"	f	namespace:arm_compute::test::validation::__anon472
tolerance	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	/^const float tolerance   = 1.f;$/;"	m	namespace:arm_compute::test::validation::__anon494	file:
tolerance	tests/validation/NEON/Magnitude.cpp	/^AbsoluteTolerance<T> tolerance(MagnitudeType magnitude_type)$/;"	f	namespace:arm_compute::test::validation::__anon509
tolerance	tests/validation/NEON/Magnitude.cpp	/^AbsoluteTolerance<half_float::half> tolerance(MagnitudeType magnitude_type)$/;"	f	namespace:arm_compute::test::validation::__anon509
tolerance_num	tests/validation/CL/ConvolutionLayer.cpp	/^constexpr float                     tolerance_num = 0.07f;                \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon407	file:
tolerance_num	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^constexpr float                      tolerance_num = 0.05f;                  \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon410	file:
tolerance_num	tests/validation/CL/DepthwiseSeparableConvolutionLayer.cpp	/^const float              tolerance_num = 0.001f;$/;"	m	namespace:arm_compute::test::validation::__anon411	file:
tolerance_num	tests/validation/CL/DilatedConvolutionLayer.cpp	/^constexpr float                     tolerance_num = 0.07f;                \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon414	file:
tolerance_num	tests/validation/CL/DirectConvolutionLayer.cpp	/^constexpr float          tolerance_num = 0.07f;     \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon415	file:
tolerance_num	tests/validation/CL/FullyConnectedLayer.cpp	/^constexpr float                     tolerance_num = 0.07f; \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon420	file:
tolerance_num	tests/validation/CL/GEMM.cpp	/^constexpr float                     tolerance_num   = 0.02f;  \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon421	file:
tolerance_num	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^constexpr float                     tolerance_num = 0.07f;                \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon457	file:
tolerance_num	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^constexpr float         tolerance_num = 0.07f;     \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon458	file:
tolerance_num	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^constexpr float          tolerance_num = 0.07f;     \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon459	file:
tolerance_num	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^constexpr float          tolerance_num = 0.07f;     \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon460	file:
tolerance_num	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^constexpr float                     tolerance_num = 0.07f; \/**< Tolerance number *\/$/;"	m	namespace:arm_compute::test::validation::__anon461	file:
tolerance_num	tests/validation/NEON/DepthwiseSeparableConvolutionLayer.cpp	/^const float              tolerance_num = 0.001f;$/;"	m	namespace:arm_compute::test::validation::__anon485	file:
tolerance_num_f32	tests/validation/NEON/Scale.cpp	/^constexpr float tolerance_num_f32 = 0.01f;$/;"	m	namespace:arm_compute::test::validation::__anon522	file:
tolerance_num_s16	tests/validation/NEON/Scale.cpp	/^constexpr float tolerance_num_s16 = 0.01f;$/;"	m	namespace:arm_compute::test::validation::__anon522	file:
tolerance_number	tests/validation/CL/Remap.cpp	/^constexpr float                      tolerance_number = 0.2f;$/;"	m	namespace:arm_compute::test::validation::__anon444	file:
tolerance_number	tests/validation/CL/WarpPerspective.cpp	/^constexpr float                      tolerance_number = 0.2f;$/;"	m	namespace:arm_compute::test::validation::__anon451	file:
tolerance_number	tests/validation/NEON/HOGDescriptor.cpp	/^constexpr float          tolerance_number = 0.05f;$/;"	m	namespace:arm_compute::test::validation::__anon502	file:
tolerance_number	tests/validation/NEON/Remap.cpp	/^constexpr float                      tolerance_number = 0.f;$/;"	m	namespace:arm_compute::test::validation::__anon519	file:
tolerance_number	tests/validation/NEON/WarpPerspective.cpp	/^constexpr float                      tolerance_number = 0.2f;$/;"	m	namespace:arm_compute::test::validation::__anon525	file:
tolower	tests/framework/Utils.h	/^inline std::string tolower(std::string string)$/;"	f	namespace:arm_compute::test::framework
top	arm_compute/core/Types.h	/^    unsigned int top;    \/**< top of the border *\/$/;"	m	struct:arm_compute::BorderSize
total_size	arm_compute/core/TensorShape.h	/^    size_t total_size() const$/;"	f	class:arm_compute::TensorShape
total_size_lower	arm_compute/core/TensorShape.h	/^    size_t total_size_lower(size_t dimension) const$/;"	f	class:arm_compute::TensorShape
total_size_upper	arm_compute/core/TensorShape.h	/^    size_t total_size_upper(size_t dimension) const$/;"	f	class:arm_compute::TensorShape
tracking_status	src/core/CL/cl_kernels/types.h	/^    int   tracking_status; \/**< A zero indicates a lost point. Initialized to 1 by corner detectors. *\/$/;"	m	struct:Keypoint
traits	arm_compute/core/Helpers.h	/^namespace traits$/;"	n	namespace:arm_compute
traits	arm_compute/core/NEON/wrapper/traits.h	/^namespace traits$/;"	n	namespace:arm_compute::wrapper
traits	tests/Utils.h	/^namespace traits$/;"	n	namespace:arm_compute::test
traits	tests/validation/FixedPoint.h	/^namespace traits$/;"	n	namespace:arm_compute::test::fixed_point_arithmetic
traits_8h	documentation/traits_8h.js	/^var traits_8h =$/;"	v
transform_nearest	src/core/GLES_COMPUTE/cs_shaders/scale.cs	/^vec4[2] transform_nearest(vec2 coord, vec2 scale)$/;"	m
transpose	tests/validation/reference/Transpose.cpp	/^SimpleTensor<T> transpose(const SimpleTensor<T> &src)$/;"	f	namespace:arm_compute::test::validation::reference
transpose	tests/validation/reference/Utils.cpp	/^RawTensor transpose(const RawTensor &src, int chunk_width)$/;"	f	namespace:arm_compute::test::validation
transpose_16bit_elements	src/core/NEON/kernels/NETransposeKernel.cpp	/^void transpose_16bit_elements(const ITensor *in, ITensor *out, const Window &window)$/;"	f	namespace:__anon298
transpose_32bit_elements	src/core/NEON/kernels/NETransposeKernel.cpp	/^void transpose_32bit_elements(const ITensor *in, ITensor *out, const Window &window)$/;"	f	namespace:__anon298
transpose_8bit_elements	src/core/NEON/kernels/NETransposeKernel.cpp	/^void transpose_8bit_elements(const ITensor *in, ITensor *out, const Window &window)$/;"	f	namespace:__anon298
transpose_8cl	documentation/transpose_8cl.js	/^var transpose_8cl =$/;"	v
transpose_matrix	tests/validation/Helpers.cpp	/^void transpose_matrix(const SimpleTensor<float> &in, SimpleTensor<float> &out)$/;"	f	namespace:arm_compute::test::validation
transposed_tensor_shape	src/core/CL/kernels/CLTransposeKernel.cpp	/^TensorShape transposed_tensor_shape(const TensorShape &in)$/;"	f	namespace:__anon220
transposed_tensor_shape	src/core/NEON/kernels/NETransposeKernel.cpp	/^TensorShape transposed_tensor_shape(const TensorShape &in)$/;"	f	namespace:__anon298
trim	include/libnpy/npy.hpp	/^inline std::string trim(const std::string& str) {$/;"	f	namespace:npy::pyparse
trunc	include/half/half.hpp	/^			static half trunc(half arg) { return half(binary, round_half<std::round_toward_zero>(arg.data_)); }$/;"	f	struct:detail::functions
trunc	include/half/half.hpp	/^		inline half trunc(expr arg) { return functions::trunc(arg); }$/;"	f	namespace:detail
trunc	include/half/half.hpp	/^		inline half trunc(half arg) { return functions::trunc(arg); }$/;"	f	namespace:detail
trunc	support/ToolchainSupport.h	/^inline T trunc(T value)$/;"	f	namespace:arm_compute::support::cpp11
try_populate	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void try_populate(const int index, T func)$/;"	f	class:arm_gemm::Buffer
try_populate	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    void try_populate(const int index, T func)$/;"	f	class:arm_gemm::BufferManager
tune_direct_convolution_kernel	src/runtime/CL/tuners/BifrostTuner.cpp	/^void tune_direct_convolution_kernel(CLDirectConvolutionLayerKernel &k)$/;"	f	namespace:arm_compute::tuners::__anon318
tune_kernel_dynamic	src/runtime/CL/CLTuner.cpp	/^void CLTuner::tune_kernel_dynamic(ICLKernel &kernel)$/;"	f	class:CLTuner
tune_kernel_dynamic	src/runtime/CL/tuners/BifrostTuner.cpp	/^void BifrostTuner::tune_kernel_dynamic(ICLKernel &kernel)$/;"	f	class:arm_compute::tuners::BifrostTuner
tune_kernel_static	arm_compute/runtime/CL/CLScheduler.h	/^    void tune_kernel_static(ICLKernel &kernel)$/;"	f	class:arm_compute::CLScheduler
tune_kernel_static	src/runtime/CL/CLTuner.cpp	/^void CLTuner::tune_kernel_static(ICLKernel &kernel)$/;"	f	class:CLTuner
tune_kernel_static	src/runtime/CL/tuners/BifrostTuner.cpp	/^void BifrostTuner::tune_kernel_static(ICLKernel &kernel)$/;"	f	class:arm_compute::tuners::BifrostTuner
tune_new_kernels	src/runtime/CL/CLTuner.cpp	/^bool CLTuner::tune_new_kernels() const$/;"	f	class:CLTuner
tuner_data_filename	src/graph/backends/CL/CLDeviceBackend.cpp	/^static const std::string tuner_data_filename = "acl_tuner.csv";$/;"	m	namespace:arm_compute::graph::backends	file:
tuners	arm_compute/runtime/CL/tuners/BifrostTuner.h	/^namespace tuners$/;"	n	namespace:arm_compute
tuners	src/runtime/CL/tuners/BifrostTuner.cpp	/^namespace tuners$/;"	n	namespace:arm_compute	file:
twenty	src/core/NEON/kernels/NESobel7x7Kernel.cpp	/^const int32x4_t twenty    = vdupq_n_s32(20);$/;"	m	namespace:__anon295	file:
type	arm_compute/core/Types.h	/^    NormType type() const$/;"	f	class:arm_compute::HOGNormType::NormalizationLayerInfo
type	include/half/half.hpp	/^			template<> struct bits<double> { typedef unsigned long type; };$/;"	t	struct:half_float::detail::bits
type	include/half/half.hpp	/^		template<> struct bits<double> { typedef std::uint_least64_t type; };$/;"	t	struct:half_float::detail::bits
type	include/half/half.hpp	/^		template<> struct bits<float> { typedef std::uint_least32_t type; };$/;"	t	struct:half_float::detail::bits
type	include/half/half.hpp	/^		template<> struct result<half,half> { typedef half type; };$/;"	t	struct:half_float::result
type	include/half/half.hpp	/^		template<typename T> struct bits { typedef unsigned char type; };$/;"	t	struct:half_float::detail::bits
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,expr,expr> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,expr,half> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,expr,void> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,half,expr> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,half,half> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,half,void> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,expr,void,void> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,expr,expr> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,expr,half> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,expr,void> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,half,expr> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,half,half> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,half,void> { typedef T type; };$/;"	t	struct:half_float::enable
type	include/half/half.hpp	/^		template<typename T> struct enable<T,half,void,void> { typedef T type; };$/;"	t	struct:half_float::enable
type	src/graph/nodes/ActivationLayerNode.cpp	/^NodeType ActivationLayerNode::type() const$/;"	f	class:arm_compute::graph::ActivationLayerNode
type	src/graph/nodes/BatchNormalizationLayerNode.cpp	/^NodeType BatchNormalizationLayerNode::type() const$/;"	f	class:arm_compute::graph::BatchNormalizationLayerNode
type	src/graph/nodes/ConstNode.cpp	/^NodeType ConstNode::type() const$/;"	f	class:arm_compute::graph::ConstNode
type	src/graph/nodes/ConvolutionLayerNode.cpp	/^NodeType ConvolutionLayerNode::type() const$/;"	f	class:arm_compute::graph::ConvolutionLayerNode
type	src/graph/nodes/DepthConcatenateLayerNode.cpp	/^NodeType DepthConcatenateLayerNode::type() const$/;"	f	class:arm_compute::graph::DepthConcatenateLayerNode
type	src/graph/nodes/DepthwiseConvolutionLayerNode.cpp	/^NodeType DepthwiseConvolutionLayerNode::type() const$/;"	f	class:arm_compute::graph::DepthwiseConvolutionLayerNode
type	src/graph/nodes/EltwiseLayerNode.cpp	/^NodeType EltwiseLayerNode::type() const$/;"	f	class:arm_compute::graph::EltwiseLayerNode
type	src/graph/nodes/FlattenLayerNode.cpp	/^NodeType FlattenLayerNode::type() const$/;"	f	class:arm_compute::graph::FlattenLayerNode
type	src/graph/nodes/FullyConnectedLayer.cpp	/^NodeType FullyConnectedLayerNode::type() const$/;"	f	class:arm_compute::graph::FullyConnectedLayerNode
type	src/graph/nodes/InputNode.cpp	/^NodeType InputNode::type() const$/;"	f	class:arm_compute::graph::InputNode
type	src/graph/nodes/NormalizationLayerNode.cpp	/^NodeType NormalizationLayerNode::type() const$/;"	f	class:arm_compute::graph::NormalizationLayerNode
type	src/graph/nodes/OutputNode.cpp	/^NodeType OutputNode::type() const$/;"	f	class:arm_compute::graph::OutputNode
type	src/graph/nodes/PoolingLayerNode.cpp	/^NodeType PoolingLayerNode::type() const$/;"	f	class:arm_compute::graph::PoolingLayerNode
type	src/graph/nodes/ReshapeLayer.cpp	/^NodeType ReshapeLayerNode::type() const$/;"	f	class:arm_compute::graph::ReshapeLayerNode
type	src/graph/nodes/SoftmaxLayerNode.cpp	/^NodeType SoftmaxLayerNode::type() const$/;"	f	class:arm_compute::graph::SoftmaxLayerNode
type	src/graph/nodes/SplitLayerNode.cpp	/^NodeType SplitLayerNode::type() const$/;"	f	class:arm_compute::graph::SplitLayerNode
type	src/runtime/CL/CLLut.cpp	/^DataType CLLut::type() const$/;"	f	class:CLLut
type	src/runtime/ILutAllocator.cpp	/^DataType ILutAllocator::type() const$/;"	f	class:ILutAllocator
type	src/runtime/Lut.cpp	/^DataType Lut::type() const$/;"	f	class:Lut
type	tests/framework/instruments/hwc.hpp	/^    uint32_t type;$/;"	m	struct:mali_userspace::__anon389
type_	include/CL/cl.hpp	/^	typedef Event type_($/;"	t	struct:cl::detail::functionImplementation_
type_	include/CL/cl2.hpp	/^        typedef Event type_($/;"	t	struct:cl::compatibility::make_kernel
types_8h	documentation/types_8h.js	/^var types_8h =$/;"	v
u16	arm_compute/core/PixelValue.h	/^            uint16_t u16;     \/**< Single channel U16 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
u32	arm_compute/core/PixelValue.h	/^            uint32_t u32;     \/**< Single channel U32 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
u64	arm_compute/core/PixelValue.h	/^            uint64_t u64;     \/**< Single channel U64 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
u8	arm_compute/core/PixelValue.h	/^            uint8_t  u8;      \/**< Single channel U8 *\/$/;"	m	union:arm_compute::PixelValue::__anon1
uint16	include/half/half.hpp	/^		typedef std::uint_least16_t uint16;$/;"	t	namespace:half_float::detail
uint16	include/half/half.hpp	/^		typedef unsigned short uint16;$/;"	t	namespace:half_float::detail
uk_header	tests/framework/instruments/hwc.hpp	/^union uk_header$/;"	u	namespace:mali_userspace
uku_version_check_args	tests/framework/instruments/hwc.hpp	/^struct uku_version_check_args$/;"	s	namespace:mali_userspace::__anon390
unary_specialized	include/half/half.hpp	/^		template<> struct unary_specialized<expr>$/;"	s	namespace:detail
unary_specialized	include/half/half.hpp	/^		template<typename T> struct unary_specialized$/;"	s	namespace:detail
unbind_edge	src/graph/Tensor.cpp	/^void Tensor::unbind_edge(EdgeID eid)$/;"	f	class:arm_compute::graph::Tensor
uniform	arm_compute/core/Types.h	/^    constexpr bool uniform() const$/;"	f	struct:arm_compute::BorderSize
unit	tests/framework/instruments/MaliCounter.h	/^        std::string unit;$/;"	m	struct:arm_compute::test::framework::MaliCounter::core_counters
unit	tests/framework/instruments/Measurement.h	/^    const std::string &unit() const$/;"	f	struct:arm_compute::test::framework::Measurement
unitTestClearDefault	include/CL/cl2.hpp	/^    static void unitTestClearDefault() {$/;"	f	class:cl::CommandQueue
unitTestClearDefault	include/CL/cl2.hpp	/^    static void unitTestClearDefault() {$/;"	f	class:cl::Context
unitTestClearDefault	include/CL/cl2.hpp	/^    static void unitTestClearDefault() {$/;"	f	class:cl::Device
unitTestClearDefault	include/CL/cl2.hpp	/^    static void unitTestClearDefault() {$/;"	f	class:cl::Platform
units	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    unsigned long    units[maxevents]  = {};$/;"	m	class:arm_gemm::profiler
unloadCompiler	include/CL/cl.hpp	/^    unloadCompiler()$/;"	f	class:cl::Platform
unloadCompiler	include/CL/cl2.hpp	/^    unloadCompiler()$/;"	f	class:cl::Platform
unlock	src/runtime/CL/CLLutAllocator.cpp	/^void CLLutAllocator::unlock()$/;"	f	class:CLLutAllocator
unlock	src/runtime/CL/CLTensorAllocator.cpp	/^void CLTensorAllocator::unlock()$/;"	f	class:CLTensorAllocator
unlock	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^void GCTensorAllocator::unlock()$/;"	f	class:GCTensorAllocator
unlock	src/runtime/LutAllocator.cpp	/^void LutAllocator::unlock()$/;"	f	class:LutAllocator
unlock	src/runtime/TensorAllocator.cpp	/^void TensorAllocator::unlock()$/;"	f	class:TensorAllocator
unlock_pool	src/runtime/PoolManager.cpp	/^void PoolManager::unlock_pool(IMemoryPool *pool)$/;"	f	class:PoolManager
unmap	arm_compute/core/CL/ICLArray.h	/^    void unmap(cl::CommandQueue &q)$/;"	f	class:arm_compute::ICLArray
unmap	arm_compute/runtime/CL/CLArray.h	/^    void unmap()$/;"	f	class:arm_compute::CLArray
unmap	src/core/CL/ICLDistribution1D.cpp	/^void ICLDistribution1D::unmap(cl::CommandQueue &q)$/;"	f	class:ICLDistribution1D
unmap	src/core/CL/ICLHOG.cpp	/^void ICLHOG::unmap(cl::CommandQueue &q)$/;"	f	class:ICLHOG
unmap	src/core/CL/ICLLut.cpp	/^void ICLLut::unmap(cl::CommandQueue &q)$/;"	f	class:ICLLut
unmap	src/core/CL/ICLTensor.cpp	/^void ICLTensor::unmap(cl::CommandQueue &q)$/;"	f	class:ICLTensor
unmap	src/core/GLES_COMPUTE/IGCTensor.cpp	/^void IGCTensor::unmap()$/;"	f	class:IGCTensor
unmap	src/graph/backends/CL/CLSubTensorHandle.cpp	/^void CLSubTensorHandle::unmap()$/;"	f	class:arm_compute::graph::backends::CLSubTensorHandle
unmap	src/graph/backends/CL/CLTensorHandle.cpp	/^void CLTensorHandle::unmap()$/;"	f	class:arm_compute::graph::backends::CLTensorHandle
unmap	src/graph/backends/GLES/GCTensorHandle.cpp	/^void GCTensorHandle::unmap()$/;"	f	class:arm_compute::graph::backends::GCTensorHandle
unmap	src/graph/backends/NEON/NESubTensorHandle.cpp	/^void NESubTensorHandle::unmap()$/;"	f	class:arm_compute::graph::backends::NESubTensorHandle
unmap	src/graph/backends/NEON/NETensorHandle.cpp	/^void NETensorHandle::unmap()$/;"	f	class:arm_compute::graph::backends::NETensorHandle
unmap	src/runtime/CL/CLDistribution1D.cpp	/^void CLDistribution1D::unmap()$/;"	f	class:CLDistribution1D
unmap	src/runtime/CL/CLHOG.cpp	/^void CLHOG::unmap()$/;"	f	class:CLHOG
unmap	src/runtime/CL/CLLut.cpp	/^void CLLut::unmap()$/;"	f	class:CLLut
unmap	src/runtime/CL/CLLutAllocator.cpp	/^void CLLutAllocator::unmap(cl::CommandQueue &q, uint8_t *mapping)$/;"	f	class:CLLutAllocator
unmap	src/runtime/CL/CLMemoryRegion.cpp	/^void CLBufferMemoryRegion::unmap(cl::CommandQueue &q)$/;"	f	class:arm_compute::CLBufferMemoryRegion
unmap	src/runtime/CL/CLMemoryRegion.cpp	/^void CLCoarseSVMMemoryRegion::unmap(cl::CommandQueue &q)$/;"	f	class:arm_compute::CLCoarseSVMMemoryRegion
unmap	src/runtime/CL/CLMemoryRegion.cpp	/^void CLFineSVMMemoryRegion::unmap(cl::CommandQueue &q)$/;"	f	class:arm_compute::CLFineSVMMemoryRegion
unmap	src/runtime/CL/CLSubTensor.cpp	/^void CLSubTensor::unmap()$/;"	f	class:CLSubTensor
unmap	src/runtime/CL/CLTensor.cpp	/^void CLTensor::unmap()$/;"	f	class:CLTensor
unmap	src/runtime/CL/CLTensorAllocator.cpp	/^void CLTensorAllocator::unmap(cl::CommandQueue &q, uint8_t *mapping)$/;"	f	class:CLTensorAllocator
unmap	src/runtime/GLES_COMPUTE/GCTensor.cpp	/^void GCTensor::unmap()$/;"	f	class:GCTensor
unmap	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^void GCTensorAllocator::unmap()$/;"	f	class:GCTensorAllocator
unmap	utils/Utils.h	/^inline void unmap(CLDistribution1D &distribution)$/;"	f	namespace:arm_compute::utils
unmap	utils/Utils.h	/^inline void unmap(CLTensor &tensor)$/;"	f	namespace:arm_compute::utils
unmap	utils/Utils.h	/^inline void unmap(GCTensor &tensor)$/;"	f	namespace:arm_compute::utils
unmap	utils/Utils.h	/^inline void unmap(T &tensor)$/;"	f	namespace:arm_compute::utils
unmapSVM	include/CL/cl2.hpp	/^inline cl_int unmapSVM(cl::vector<T, Alloc> &container)$/;"	f	namespace:cl
unpack12_half	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^mediump vec4[3] unpack12_half(highp uvec2[3] packed_data)$/;"	f
unpack4_half	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^mediump vec4 unpack4_half(highp uvec2 packed_data)$/;"	f
unpack4_u8	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^lowp uvec4 unpack4_u8(highp uint packed_data)$/;"	f
unpack6_half	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^mediump vec2[3] unpack6_half(highp uvec3 packed_data)$/;"	f
unpack8_half	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^mediump vec4[2] unpack8_half(highp uvec4 packed_data)$/;"	f
unroll	tests/validation/reference/ArithmeticAddition.cpp	/^    static void unroll(const SimpleTensor<T> &src1, const SimpleTensor<T> &src2, SimpleTensor<T> &dst,$/;"	f	struct:arm_compute::test::validation::reference::__anon531::BroadcastUnroll
unroll	tests/validation/reference/PixelWiseMultiplication.cpp	/^    static void unroll(const SimpleTensor<T1> &src1, const SimpleTensor<T2> &src2, SimpleTensor<T2> &dst,$/;"	f	struct:arm_compute::test::validation::reference::__anon545::BroadcastUnroll
unuse	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^void GCKernel::unuse()$/;"	f	class:GCKernel
unused	tests/framework/instruments/hwc.hpp	/^    uint64_t                          unused;$/;"	m	struct:mali_userspace::mali_base_gpu_props
unused_1	tests/framework/instruments/hwc.hpp	/^    uint64_t unused_1;$/;"	m	struct:mali_userspace::gpu_raw_gpu_props
updateStripes	documentation/dynsections.js	/^function updateStripes()$/;"	f
update_blobs_and_mappings	src/runtime/BlobLifetimeManager.cpp	/^void BlobLifetimeManager::update_blobs_and_mappings()$/;"	f	class:BlobLifetimeManager
update_blobs_and_mappings	src/runtime/OffsetLifetimeManager.cpp	/^void OffsetLifetimeManager::update_blobs_and_mappings()$/;"	f	class:OffsetLifetimeManager
update_bound_tensor	arm_compute/graph/Edge.h	/^    void update_bound_tensor(Tensor *tensor)$/;"	f	class:arm_compute::graph::final
update_image_from_tensor3D_iter_offset	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^ImageIterator update_image_from_tensor3D_iter_offset(uint element_shift, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)$/;"	f
update_image_from_tensor3D_workitem_ptr	src/core/CL/cl_kernels/helpers.h	/^Image inline update_image_from_tensor3D_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)$/;"	f
update_image_iter_offset	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^ImageIterator update_image_iter_offset(uint element_shift, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y)$/;"	f
update_image_workitem_ptr	src/core/CL/cl_kernels/helpers.h	/^Image inline update_image_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y)$/;"	f
update_min_max	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^void NEMinMaxLayerKernel::update_min_max(float *out_ptr, float min, float max)$/;"	f	class:arm_compute::NEMinMaxLayerKernel
update_min_max	src/core/NEON/kernels/NEMinMaxLocationKernel.cpp	/^void NEMinMaxKernel::update_min_max(const T min, const T max)$/;"	f	class:arm_compute::NEMinMaxKernel
update_padding_if_needed	src/core/AccessWindowAutoPadding.cpp	/^bool AccessWindowAutoPadding::update_padding_if_needed(const Window &window)$/;"	f	class:AccessWindowAutoPadding
update_padding_if_needed	src/core/AccessWindowStatic.cpp	/^bool AccessWindowStatic::update_padding_if_needed(const Window &window)$/;"	f	class:AccessWindowStatic
update_padding_if_needed	src/core/AccessWindowTranspose.cpp	/^bool AccessWindowTranspose::update_padding_if_needed(const Window &window)$/;"	f	class:AccessWindowTranspose
update_padding_if_needed	src/core/IAccessWindow.cpp	/^bool AccessWindowRectangle::update_padding_if_needed(const Window &window)$/;"	f	class:AccessWindowRectangle
update_shader_params	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^void GCKernel::update_shader_params()$/;"	f	class:GCKernel
update_tensor3D_iter_offset	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^Tensor3DIterator update_tensor3D_iter_offset(uint element_shift, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)$/;"	f
update_tensor3D_workitem_ptr	src/core/CL/cl_kernels/helpers.h	/^Tensor3D inline update_tensor3D_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)$/;"	f
update_tensor4D_workitem_ptr	src/core/CL/cl_kernels/helpers.h	/^Tensor4D inline update_tensor4D_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z, uint stride_w,$/;"	f
update_vector_iter_offset	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^VectorIterator update_vector_iter_offset(uint element_shift, uint offset_first_element_in_bytes, uint stride_x, uint step_x)$/;"	f
update_vector_workitem_ptr	src/core/CL/cl_kernels/helpers.h	/^Vector inline update_vector_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x)$/;"	f
update_window_and_padding	arm_compute/core/Helpers.h	/^bool update_window_and_padding(Window &win, Ts &&... patterns)$/;"	f	namespace:arm_compute
update_window_if_needed	src/core/AccessWindowAutoPadding.cpp	/^bool AccessWindowAutoPadding::update_window_if_needed(Window &window) const$/;"	f	class:AccessWindowAutoPadding
update_window_if_needed	src/core/AccessWindowStatic.cpp	/^bool AccessWindowStatic::update_window_if_needed(Window &window) const$/;"	f	class:AccessWindowStatic
update_window_if_needed	src/core/AccessWindowTranspose.cpp	/^bool AccessWindowTranspose::update_window_if_needed(Window &window) const$/;"	f	class:AccessWindowTranspose
update_window_if_needed	src/core/IAccessWindow.cpp	/^bool AccessWindowRectangle::update_window_if_needed(Window &window) const$/;"	f	class:AccessWindowRectangle
use	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^void GCKernel::use()$/;"	f	class:GCKernel
use_fp16	tests/validation/CL/HarrisCorners.cpp	/^const auto use_fp16 = framework::dataset::make("UseFP16",$/;"	m	namespace:arm_compute::test::validation::__anon429	file:
use_fp16	tests/validation/NEON/HarrisCorners.cpp	/^const auto use_fp16 = framework::dataset::make("UseFP16",$/;"	m	namespace:arm_compute::test::validation::__anon505	file:
use_initial_estimate	tests/Types.h	/^    bool        use_initial_estimate;$/;"	m	struct:arm_compute::OpticalFlowParameters
utility	arm_compute/core/utils/misc/Utility.h	/^namespace utility$/;"	n	namespace:arm_compute
utils	arm_compute/core/utils/misc/Cast.h	/^namespace utils$/;"	n	namespace:arm_compute
utils	arm_compute/core/utils/misc/Iterable.h	/^namespace utils$/;"	n	namespace:arm_compute
utils	arm_compute/core/utils/misc/Signal.h	/^namespace utils$/;"	n	namespace:arm_compute
utils	utils/Utils.cpp	/^namespace utils$/;"	n	namespace:arm_compute	file:
utils	utils/Utils.h	/^namespace utils$/;"	n	namespace:arm_compute
utils_2_type_printer_8h	documentation/utils_2_type_printer_8h.js	/^var utils_2_type_printer_8h =$/;"	v
utils_2_utils_8cpp	documentation/utils_2_utils_8cpp.js	/^var utils_2_utils_8cpp =$/;"	v
utils_2_utils_8h	documentation/utils_2_utils_8h.js	/^var utils_2_utils_8h =$/;"	v
v	tests/framework/instruments/Measurement.h	/^            } v;$/;"	m	struct:arm_compute::test::framework::Measurement::Value	typeref:union:arm_compute::test::framework::Measurement::Value::__anon388
v16	include/CL/cl_platform.h	/^    __cl_char16    v16;$/;"	m	union:__anon17
v16	include/CL/cl_platform.h	/^    __cl_double16    v16;$/;"	m	union:__anon177
v16	include/CL/cl_platform.h	/^    __cl_float16    v16;$/;"	m	union:__anon161
v16	include/CL/cl_platform.h	/^    __cl_half16    v16;$/;"	m	union:__anon81
v16	include/CL/cl_platform.h	/^    __cl_int16    v16;$/;"	m	union:__anon97
v16	include/CL/cl_platform.h	/^    __cl_long16    v16;$/;"	m	union:__anon129
v16	include/CL/cl_platform.h	/^    __cl_short16    v16;$/;"	m	union:__anon49
v16	include/CL/cl_platform.h	/^    __cl_uchar16    v16;$/;"	m	union:__anon33
v16	include/CL/cl_platform.h	/^    __cl_uint16    v16;$/;"	m	union:__anon113
v16	include/CL/cl_platform.h	/^    __cl_ulong16    v16;$/;"	m	union:__anon145
v16	include/CL/cl_platform.h	/^    __cl_ushort16    v16;$/;"	m	union:__anon65
v2	include/CL/cl_platform.h	/^    __cl_char2     v2;$/;"	m	union:__anon5
v2	include/CL/cl_platform.h	/^    __cl_char2     v2[2];$/;"	m	union:__anon9
v2	include/CL/cl_platform.h	/^    __cl_char2     v2[4];$/;"	m	union:__anon13
v2	include/CL/cl_platform.h	/^    __cl_char2     v2[8];$/;"	m	union:__anon17
v2	include/CL/cl_platform.h	/^    __cl_double2     v2;$/;"	m	union:__anon165
v2	include/CL/cl_platform.h	/^    __cl_double2     v2[2];$/;"	m	union:__anon169
v2	include/CL/cl_platform.h	/^    __cl_double2     v2[4];$/;"	m	union:__anon173
v2	include/CL/cl_platform.h	/^    __cl_double2     v2[8];$/;"	m	union:__anon177
v2	include/CL/cl_platform.h	/^    __cl_float2     v2;$/;"	m	union:__anon149
v2	include/CL/cl_platform.h	/^    __cl_float2     v2[2];$/;"	m	union:__anon153
v2	include/CL/cl_platform.h	/^    __cl_float2     v2[4];$/;"	m	union:__anon157
v2	include/CL/cl_platform.h	/^    __cl_float2     v2[8];$/;"	m	union:__anon161
v2	include/CL/cl_platform.h	/^    __cl_half2     v2;$/;"	m	union:__anon69
v2	include/CL/cl_platform.h	/^    __cl_half2     v2[2];$/;"	m	union:__anon73
v2	include/CL/cl_platform.h	/^    __cl_half2     v2[4];$/;"	m	union:__anon77
v2	include/CL/cl_platform.h	/^    __cl_half2     v2[8];$/;"	m	union:__anon81
v2	include/CL/cl_platform.h	/^    __cl_int2     v2;$/;"	m	union:__anon85
v2	include/CL/cl_platform.h	/^    __cl_int2     v2[2];$/;"	m	union:__anon89
v2	include/CL/cl_platform.h	/^    __cl_int2     v2[4];$/;"	m	union:__anon93
v2	include/CL/cl_platform.h	/^    __cl_int2     v2[8];$/;"	m	union:__anon97
v2	include/CL/cl_platform.h	/^    __cl_long2     v2;$/;"	m	union:__anon117
v2	include/CL/cl_platform.h	/^    __cl_long2     v2[2];$/;"	m	union:__anon121
v2	include/CL/cl_platform.h	/^    __cl_long2     v2[4];$/;"	m	union:__anon125
v2	include/CL/cl_platform.h	/^    __cl_long2     v2[8];$/;"	m	union:__anon129
v2	include/CL/cl_platform.h	/^    __cl_short2     v2;$/;"	m	union:__anon37
v2	include/CL/cl_platform.h	/^    __cl_short2     v2[2];$/;"	m	union:__anon41
v2	include/CL/cl_platform.h	/^    __cl_short2     v2[4];$/;"	m	union:__anon45
v2	include/CL/cl_platform.h	/^    __cl_short2     v2[8];$/;"	m	union:__anon49
v2	include/CL/cl_platform.h	/^    __cl_uchar2     v2;$/;"	m	union:__anon21
v2	include/CL/cl_platform.h	/^    __cl_uchar2     v2[2];$/;"	m	union:__anon25
v2	include/CL/cl_platform.h	/^    __cl_uchar2     v2[4];$/;"	m	union:__anon29
v2	include/CL/cl_platform.h	/^    __cl_uchar2     v2[8];$/;"	m	union:__anon33
v2	include/CL/cl_platform.h	/^    __cl_uint2     v2;$/;"	m	union:__anon101
v2	include/CL/cl_platform.h	/^    __cl_uint2     v2[2];$/;"	m	union:__anon105
v2	include/CL/cl_platform.h	/^    __cl_uint2     v2[4];$/;"	m	union:__anon109
v2	include/CL/cl_platform.h	/^    __cl_uint2     v2[8];$/;"	m	union:__anon113
v2	include/CL/cl_platform.h	/^    __cl_ulong2     v2;$/;"	m	union:__anon133
v2	include/CL/cl_platform.h	/^    __cl_ulong2     v2[2];$/;"	m	union:__anon137
v2	include/CL/cl_platform.h	/^    __cl_ulong2     v2[4];$/;"	m	union:__anon141
v2	include/CL/cl_platform.h	/^    __cl_ulong2     v2[8];$/;"	m	union:__anon145
v2	include/CL/cl_platform.h	/^    __cl_ushort2     v2;$/;"	m	union:__anon53
v2	include/CL/cl_platform.h	/^    __cl_ushort2     v2[2];$/;"	m	union:__anon57
v2	include/CL/cl_platform.h	/^    __cl_ushort2     v2[4];$/;"	m	union:__anon61
v2	include/CL/cl_platform.h	/^    __cl_ushort2     v2[8];$/;"	m	union:__anon65
v4	include/CL/cl_platform.h	/^    __cl_char4     v4;$/;"	m	union:__anon9
v4	include/CL/cl_platform.h	/^    __cl_char4     v4[2];$/;"	m	union:__anon13
v4	include/CL/cl_platform.h	/^    __cl_char4     v4[4];$/;"	m	union:__anon17
v4	include/CL/cl_platform.h	/^    __cl_double4     v4;$/;"	m	union:__anon169
v4	include/CL/cl_platform.h	/^    __cl_double4     v4[2];$/;"	m	union:__anon173
v4	include/CL/cl_platform.h	/^    __cl_double4     v4[4];$/;"	m	union:__anon177
v4	include/CL/cl_platform.h	/^    __cl_float4     v4;$/;"	m	union:__anon153
v4	include/CL/cl_platform.h	/^    __cl_float4     v4[2];$/;"	m	union:__anon157
v4	include/CL/cl_platform.h	/^    __cl_float4     v4[4];$/;"	m	union:__anon161
v4	include/CL/cl_platform.h	/^    __cl_half4     v4;$/;"	m	union:__anon73
v4	include/CL/cl_platform.h	/^    __cl_half4     v4[2];$/;"	m	union:__anon77
v4	include/CL/cl_platform.h	/^    __cl_half4     v4[4];$/;"	m	union:__anon81
v4	include/CL/cl_platform.h	/^    __cl_int4     v4;$/;"	m	union:__anon89
v4	include/CL/cl_platform.h	/^    __cl_int4     v4[2];$/;"	m	union:__anon93
v4	include/CL/cl_platform.h	/^    __cl_int4     v4[4];$/;"	m	union:__anon97
v4	include/CL/cl_platform.h	/^    __cl_long4     v4;$/;"	m	union:__anon121
v4	include/CL/cl_platform.h	/^    __cl_long4     v4[2];$/;"	m	union:__anon125
v4	include/CL/cl_platform.h	/^    __cl_long4     v4[4];$/;"	m	union:__anon129
v4	include/CL/cl_platform.h	/^    __cl_short4     v4;$/;"	m	union:__anon41
v4	include/CL/cl_platform.h	/^    __cl_short4     v4[2];$/;"	m	union:__anon45
v4	include/CL/cl_platform.h	/^    __cl_short4     v4[4];$/;"	m	union:__anon49
v4	include/CL/cl_platform.h	/^    __cl_uchar4     v4;$/;"	m	union:__anon25
v4	include/CL/cl_platform.h	/^    __cl_uchar4     v4[2];$/;"	m	union:__anon29
v4	include/CL/cl_platform.h	/^    __cl_uchar4     v4[4];$/;"	m	union:__anon33
v4	include/CL/cl_platform.h	/^    __cl_uint4     v4;$/;"	m	union:__anon105
v4	include/CL/cl_platform.h	/^    __cl_uint4     v4[2];$/;"	m	union:__anon109
v4	include/CL/cl_platform.h	/^    __cl_uint4     v4[4];$/;"	m	union:__anon113
v4	include/CL/cl_platform.h	/^    __cl_ulong4     v4;$/;"	m	union:__anon137
v4	include/CL/cl_platform.h	/^    __cl_ulong4     v4[2];$/;"	m	union:__anon141
v4	include/CL/cl_platform.h	/^    __cl_ulong4     v4[4];$/;"	m	union:__anon145
v4	include/CL/cl_platform.h	/^    __cl_ushort4     v4;$/;"	m	union:__anon57
v4	include/CL/cl_platform.h	/^    __cl_ushort4     v4[2];$/;"	m	union:__anon61
v4	include/CL/cl_platform.h	/^    __cl_ushort4     v4[4];$/;"	m	union:__anon65
v8	include/CL/cl_platform.h	/^    __cl_char8     v8;$/;"	m	union:__anon13
v8	include/CL/cl_platform.h	/^    __cl_char8     v8[2];$/;"	m	union:__anon17
v8	include/CL/cl_platform.h	/^    __cl_double8     v8;$/;"	m	union:__anon173
v8	include/CL/cl_platform.h	/^    __cl_double8     v8[2];$/;"	m	union:__anon177
v8	include/CL/cl_platform.h	/^    __cl_float8     v8;$/;"	m	union:__anon157
v8	include/CL/cl_platform.h	/^    __cl_float8     v8[2];$/;"	m	union:__anon161
v8	include/CL/cl_platform.h	/^    __cl_half8     v8;$/;"	m	union:__anon77
v8	include/CL/cl_platform.h	/^    __cl_half8     v8[2];$/;"	m	union:__anon81
v8	include/CL/cl_platform.h	/^    __cl_int8     v8;$/;"	m	union:__anon93
v8	include/CL/cl_platform.h	/^    __cl_int8     v8[2];$/;"	m	union:__anon97
v8	include/CL/cl_platform.h	/^    __cl_long8     v8;$/;"	m	union:__anon125
v8	include/CL/cl_platform.h	/^    __cl_long8     v8[2];$/;"	m	union:__anon129
v8	include/CL/cl_platform.h	/^    __cl_short8     v8;$/;"	m	union:__anon45
v8	include/CL/cl_platform.h	/^    __cl_short8     v8[2];$/;"	m	union:__anon49
v8	include/CL/cl_platform.h	/^    __cl_uchar8     v8;$/;"	m	union:__anon29
v8	include/CL/cl_platform.h	/^    __cl_uchar8     v8[2];$/;"	m	union:__anon33
v8	include/CL/cl_platform.h	/^    __cl_uint8     v8;$/;"	m	union:__anon109
v8	include/CL/cl_platform.h	/^    __cl_uint8     v8[2];$/;"	m	union:__anon113
v8	include/CL/cl_platform.h	/^    __cl_ulong8     v8;$/;"	m	union:__anon141
v8	include/CL/cl_platform.h	/^    __cl_ulong8     v8[2];$/;"	m	union:__anon145
v8	include/CL/cl_platform.h	/^    __cl_ushort8     v8;$/;"	m	union:__anon61
v8	include/CL/cl_platform.h	/^    __cl_ushort8     v8[2];$/;"	m	union:__anon65
vadd	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^float32x4x4_t vadd(float32x4x4_t a, float32x4x4_t b)$/;"	f	namespace:arm_compute
vadd2q_f16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^inline float16x8x2_t vadd2q_f16(const float16x8x2_t &a, const float16x8x2_t &b)$/;"	f	namespace:__anon241
vadd2q_s16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^inline int16x8x2_t vadd2q_s16(const int16x8x2_t &a, const int16x8x2_t &b)$/;"	f	namespace:__anon241
vadd4q_f32	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^inline float32x4x4_t vadd4q_f32(const float32x4x4_t &a, const float32x4x4_t &b)$/;"	f	namespace:__anon241
valid_bilinear_policy	tests/validation/reference/Utils.cpp	/^bool valid_bilinear_policy(float xn, float yn, int width, int height, BorderMode border_mode)$/;"	f	namespace:arm_compute::test::validation
valid_bilinear_policy	tests/validation/reference/WarpAffine.cpp	/^bool valid_bilinear_policy(float xn, float yn, int width, int height, BorderMode border_mode)$/;"	f	namespace:arm_compute::test::validation::reference
validate	src/core/CL/kernels/CLActivationLayerKernel.cpp	/^Status CLActivationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &act_info)$/;"	f	class:CLActivationLayerKernel
validate	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^Status CLArithmeticAdditionKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticAdditionKernel
validate	src/core/CL/kernels/CLArithmeticSubtractionKernel.cpp	/^Status CLArithmeticSubtractionKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticSubtractionKernel
validate	src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp	/^Status CLBatchNormalizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	class:CLBatchNormalizationLayerKernel
validate	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^Status CLChannelShuffleLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int num_groups)$/;"	f	class:arm_compute::CLChannelShuffleLayerKernel
validate	src/core/CL/kernels/CLCol2ImKernel.cpp	/^Status CLCol2ImKernel::validate(const ITensorInfo *input, const ITensorInfo *output, std::pair<unsigned int, unsigned int> convolved_dims)$/;"	f	class:CLCol2ImKernel
validate	src/core/CL/kernels/CLConvertFullyConnectedWeightsKernel.cpp	/^Status CLConvertFullyConnectedWeightsKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const TensorShape &original_input_shape,$/;"	f	class:arm_compute::CLConvertFullyConnectedWeightsKernel
validate	src/core/CL/kernels/CLDeconvolutionLayerUpsampleKernel.cpp	/^Status CLDeconvolutionLayerUpsampleKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const BorderSize &inner_border,$/;"	f	class:CLDeconvolutionLayerUpsampleKernel
validate	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^Status CLDepthwiseConvolutionLayer3x3NCHWKernel::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDepthwiseConvolutionLayer3x3NCHWKernel
validate	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^Status CLDepthwiseConvolutionLayer3x3NHWCKernel::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDepthwiseConvolutionLayer3x3NHWCKernel
validate	src/core/CL/kernels/CLDepthwiseIm2ColKernel.cpp	/^Status CLDepthwiseIm2ColKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, unsigned int depth_multiplier)$/;"	f	class:CLDepthwiseIm2ColKernel
validate	src/core/CL/kernels/CLDepthwiseVectorToTensorKernel.cpp	/^Status CLDepthwiseVectorToTensorKernel::validate(const ITensorInfo *input, const ITensorInfo *output, size_t conv_w, size_t conv_h)$/;"	f	class:CLDepthwiseVectorToTensorKernel
validate	src/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.cpp	/^Status CLDepthwiseWeightsReshapeKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *biases)$/;"	f	class:CLDepthwiseWeightsReshapeKernel
validate	src/core/CL/kernels/CLDequantizationLayerKernel.cpp	/^Status CLDequantizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	class:CLDequantizationLayerKernel
validate	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^Status CLDirectConvolutionLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDirectConvolutionLayerKernel
validate	src/core/CL/kernels/CLDirectConvolutionOutputStageKernel.cpp	/^Status CLDirectConvolutionLayerOutputStageKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output)$/;"	f	class:CLDirectConvolutionLayerOutputStageKernel
validate	src/core/CL/kernels/CLGEMMInterleave4x4Kernel.cpp	/^Status CLGEMMInterleave4x4Kernel::validate(const ITensorInfo *input, const ITensorInfo *output, int mult_interleave4x4_height)$/;"	f	class:CLGEMMInterleave4x4Kernel
validate	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^Status CLGEMMLowpMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	class:CLGEMMLowpMatrixMultiplyKernel
validate	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^Status CLGEMMLowpOffsetContributionKernel::validate(const ITensorInfo *mm_result, const ITensorInfo *vector_sum_col, const ITensorInfo *vector_sum_row,$/;"	f	class:CLGEMMLowpOffsetContributionKernel
validate	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^Status CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
validate	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^Status CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
validate	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^Status CLGEMMLowpMatrixAReductionKernel::validate(const ITensorInfo *mtx_a, const ITensorInfo *vector_sum_row)$/;"	f	class:CLGEMMLowpMatrixAReductionKernel
validate	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^Status CLGEMMLowpMatrixBReductionKernel::validate(const ITensorInfo *mtx_b, const ITensorInfo *vector_sum_col)$/;"	f	class:CLGEMMLowpMatrixBReductionKernel
validate	src/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.cpp	/^Status CLGEMMMatrixAccumulateBiasesKernel::validate(const ITensorInfo *accum, const ITensorInfo *biases, GPUTarget gpu_target)$/;"	f	class:CLGEMMMatrixAccumulateBiasesKernel
validate	src/core/CL/kernels/CLGEMMMatrixAdditionKernel.cpp	/^Status CLGEMMMatrixAdditionKernel::validate(const ITensorInfo *input, const ITensorInfo *output, float beta)$/;"	f	class:CLGEMMMatrixAdditionKernel
validate	src/core/CL/kernels/CLGEMMMatrixMultiplyKernel.cpp	/^Status CLGEMMMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, float alpha, bool is_interleaved_transposed,$/;"	f	class:CLGEMMMatrixMultiplyKernel
validate	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^Status CLGEMMMatrixVectorMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	class:CLGEMMMatrixVectorMultiplyKernel
validate	src/core/CL/kernels/CLGEMMTranspose1xWKernel.cpp	/^Status CLGEMMTranspose1xWKernel::validate(const ITensorInfo *input, const ITensorInfo *output, int mult_transpose1xW_width)$/;"	f	class:CLGEMMTranspose1xWKernel
validate	src/core/CL/kernels/CLIm2ColKernel.cpp	/^Status CLIm2ColKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, const Size2D &dilation)$/;"	f	class:CLIm2ColKernel
validate	src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp	/^Status CLL2NormalizeLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *sum, const ITensorInfo *output, unsigned int axis, float epsilon)$/;"	f	class:CLL2NormalizeLayerKernel
validate	src/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.cpp	/^Status CLLocallyConnectedMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	class:CLLocallyConnectedMatrixMultiplyKernel
validate	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^Status CLMinMaxLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:CLMinMaxLayerKernel
validate	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^Status CLNormalizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, NormalizationLayerInfo norm_info)$/;"	f	class:CLNormalizationLayerKernel
validate	src/core/CL/kernels/CLPermuteKernel.cpp	/^Status CLPermuteKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	class:CLPermuteKernel
validate	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^Status CLPixelWiseMultiplicationKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale,$/;"	f	class:CLPixelWiseMultiplicationKernel
validate	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^Status CLPoolingLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	class:CLPoolingLayerKernel
validate	src/core/CL/kernels/CLQuantizationLayerKernel.cpp	/^Status CLQuantizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	class:CLQuantizationLayerKernel
validate	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^Status CLReductionOperationKernel::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, ReductionOperation op)$/;"	f	class:CLReductionOperationKernel
validate	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^Status CLLogits1DMaxShiftExpSumKernel::validate(const ITensorInfo *input, const ITensorInfo *max, const ITensorInfo *output, const ITensorInfo *sum)$/;"	f	class:CLLogits1DMaxShiftExpSumKernel
validate	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^Status CLLogits1DNormKernel::validate(const ITensorInfo *input, const ITensorInfo *sum, const ITensorInfo *output)$/;"	f	class:CLLogits1DNormKernel
validate	src/core/CL/kernels/CLTransposeKernel.cpp	/^Status CLTransposeKernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:CLTransposeKernel
validate	src/core/CL/kernels/CLWeightsReshapeKernel.cpp	/^Status CLWeightsReshapeKernel::validate(const ITensorInfo *input, const ITensorInfo *biases, const ITensorInfo *output)$/;"	f	class:CLWeightsReshapeKernel
validate	src/core/CL/kernels/CLWidthConcatenateLayerKernel.cpp	/^Status CLWidthConcatenateLayerKernel::validate(const ITensorInfo *input, unsigned int width_offset, const ITensorInfo *output)$/;"	f	class:CLWidthConcatenateLayerKernel
validate	src/core/CL/kernels/CLWinogradFilterTransformKernel.cpp	/^Status CLWinogradFilterTransformKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradFilterTransformKernel
validate	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^Status CLWinogradInputTransformKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradInputTransformKernel
validate	src/core/CL/kernels/CLWinogradOutputTransformKernel.cpp	/^Status CLWinogradOutputTransformKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradOutputTransformKernel
validate	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^Status CPPPermuteKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	class:CPPPermuteKernel
validate	src/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.cpp	/^Status GCArithmeticAdditionKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:GCArithmeticAdditionKernel
validate	src/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.cpp	/^Status GCBatchNormalizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	class:GCBatchNormalizationLayerKernel
validate	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.cpp	/^Status GCGEMMMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, float alpha, bool is_interleaved_transposed,$/;"	f	class:GCGEMMMatrixMultiplyKernel
validate	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^Status GCIm2ColKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, const Size2D &dilation)$/;"	f	class:GCIm2ColKernel
validate	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^Status GCPoolingLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	class:GCPoolingLayerKernel
validate	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^Status NEActivationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &act_info)$/;"	f	class:NEActivationLayerKernel
validate	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^Status NEArithmeticAdditionKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticAdditionKernel
validate	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^Status NEArithmeticSubtractionKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticSubtractionKernel
validate	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^Status NEBatchNormalizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	class:NEBatchNormalizationLayerKernel
validate	src/core/NEON/kernels/NECol2ImKernel.cpp	/^Status NECol2ImKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &convolved_dims)$/;"	f	class:NECol2ImKernel
validate	src/core/NEON/kernels/NEConvertFullyConnectedWeightsKernel.cpp	/^Status NEConvertFullyConnectedWeightsKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const TensorShape &original_input_shape,$/;"	f	class:NEConvertFullyConnectedWeightsKernel
validate	src/core/NEON/kernels/NEDequantizationLayerKernel.cpp	/^Status NEDequantizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	class:NEDequantizationLayerKernel
validate	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^Status NEDirectConvolutionLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *output, const PadStrideInfo &conv_info)$/;"	f	class:NEDirectConvolutionLayerKernel
validate	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^Status NEDirectConvolutionLayerOutputStageKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output)$/;"	f	class:NEDirectConvolutionLayerOutputStageKernel
validate	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^Status NEGEMMInterleave4x4Kernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:NEGEMMInterleave4x4Kernel
validate	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^Status NEGEMMLowpMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	class:NEGEMMLowpMatrixMultiplyKernel
validate	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^Status NEGEMMLowpOffsetContributionKernel::validate(const ITensorInfo *mm_result, const ITensorInfo *vector_sum_col, const ITensorInfo *vector_sum_row,$/;"	f	class:NEGEMMLowpOffsetContributionKernel
validate	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^Status NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel
validate	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^Status NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel
validate	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^Status NEGEMMLowpMatrixAReductionKernel::validate(const ITensorInfo *mtx_a, const ITensorInfo *vector_sum_row, int32_t num_mtx_a_cols, bool is_interleaved4x4)$/;"	f	class:NEGEMMLowpMatrixAReductionKernel
validate	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^Status NEGEMMLowpMatrixBReductionKernel::validate(const ITensorInfo *mtx_b, const ITensorInfo *vector_sum_col, int32_t num_mtx_b_rows, bool is_transposed1xW)$/;"	f	class:NEGEMMLowpMatrixBReductionKernel
validate	src/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.cpp	/^Status NEGEMMMatrixAccumulateBiasesKernel::validate(const ITensorInfo *accum, const ITensorInfo *biases)$/;"	f	class:NEGEMMMatrixAccumulateBiasesKernel
validate	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^Status NEGEMMMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, float alpha, bool is_interleaved,$/;"	f	class:NEGEMMMatrixMultiplyKernel
validate	src/core/NEON/kernels/NEGEMMTranspose1xWKernel.cpp	/^Status NEGEMMTranspose1xWKernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:NEGEMMTranspose1xWKernel
validate	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^Status NEIm2ColKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info,$/;"	f	class:NEIm2ColKernel
validate	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^Status NEL2NormalizeLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *sum, const ITensorInfo *output, unsigned int axis, float epsilon)$/;"	f	class:NEL2NormalizeLayerKernel
validate	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^Status NELocallyConnectedMatrixMultiplyKernel::validate(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	class:NELocallyConnectedMatrixMultiplyKernel
validate	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^Status NEMinMaxLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:arm_compute::NEMinMaxLayerKernel
validate	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^Status NENormalizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *input_squared, const ITensorInfo *output, const NormalizationLayerInfo norm_info)$/;"	f	class:NENormalizationLayerKernel
validate	src/core/NEON/kernels/NEPermuteKernel.cpp	/^Status NEPermuteKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	class:NEPermuteKernel
validate	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^Status NEPixelWiseMultiplicationKernel::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale, ConvertPolicy overflow_policy,$/;"	f	class:NEPixelWiseMultiplicationKernel
validate	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^Status NEPoolingLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	class:NEPoolingLayerKernel
validate	src/core/NEON/kernels/NEQuantizationLayerKernel.cpp	/^Status NEQuantizationLayerKernel::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	class:NEQuantizationLayerKernel
validate	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^Status NEReductionOperationKernel::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, ReductionOperation op)$/;"	f	class:NEReductionOperationKernel
validate	src/core/NEON/kernels/NEScaleKernel.cpp	/^Status NEScaleKernel::validate(const ITensorInfo *input, const ITensorInfo *dx, const ITensorInfo *dy,$/;"	f	class:arm_compute::NEScaleKernel
validate	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^Status NELogits1DMaxKernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:arm_compute::NELogits1DMaxKernel
validate	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^Status NELogits1DSoftmaxKernel::validate(const ITensorInfo *input, const ITensorInfo *max,$/;"	f	class:arm_compute::NELogits1DSoftmaxKernel
validate	src/core/NEON/kernels/NETransposeKernel.cpp	/^Status NETransposeKernel::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:NETransposeKernel
validate	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^Status NEWeightsReshapeKernel::validate(const ITensorInfo *input, const ITensorInfo *biases, const ITensorInfo *output)$/;"	f	class:NEWeightsReshapeKernel
validate	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status NEWinogradLayerBatchedGEMMKernel<TIn, TOut, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::validate(const ITensorInfo *a, const ITensorInfo *b, const ITensor *c,$/;"	f	class:arm_compute::NEWinogradLayerBatchedGEMMKernel
validate	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status NEWinogradLayerTransformInputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::validate(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	class:arm_compute::NEWinogradLayerTransformInputKernel
validate	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status NEWinogradLayerTransformOutputKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output,$/;"	f	class:arm_compute::NEWinogradLayerTransformOutputKernel
validate	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status NEWinogradLayerTransformWeightsKernel<T, OutputTileRows, OutputTileCols, KernelRows, KernelCols>::validate(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	class:arm_compute::NEWinogradLayerTransformWeightsKernel
validate	src/graph/INode.cpp	/^Status INode::validate() const$/;"	f	class:arm_compute::graph::INode
validate	src/graph/backends/CL/CLNodeValidator.cpp	/^Status CLNodeValidator::validate(INode *node)$/;"	f	class:arm_compute::graph::backends::CLNodeValidator
validate	src/graph/backends/GLES/GCNodeValidator.cpp	/^Status GCNodeValidator::validate(INode *node)$/;"	f	class:arm_compute::graph::backends::GCNodeValidator
validate	src/graph/backends/NEON/NENodeValidator.cpp	/^Status NENodeValidator::validate(INode *node)$/;"	f	class:arm_compute::graph::backends::NENodeValidator
validate	src/graph/nodes/SplitLayerNode.cpp	/^Status SplitLayerNode::validate() const$/;"	f	class:arm_compute::graph::SplitLayerNode
validate	src/runtime/CL/functions/CLActivationLayer.cpp	/^Status CLActivationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &act_info)$/;"	f	class:CLActivationLayer
validate	src/runtime/CL/functions/CLArithmeticAddition.cpp	/^Status CLArithmeticAddition::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticAddition
validate	src/runtime/CL/functions/CLArithmeticSubtraction.cpp	/^Status CLArithmeticSubtraction::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:CLArithmeticSubtraction
validate	src/runtime/CL/functions/CLBatchNormalizationLayer.cpp	/^Status CLBatchNormalizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	class:CLBatchNormalizationLayer
validate	src/runtime/CL/functions/CLChannelShuffleLayer.cpp	/^Status CLChannelShuffleLayer::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int num_groups)$/;"	f	class:arm_compute::CLChannelShuffleLayer
validate	src/runtime/CL/functions/CLConvertFullyConnectedWeights.cpp	/^Status CLConvertFullyConnectedWeights::validate(const ITensorInfo *input, const ITensorInfo *output, const TensorShape &original_input_shape,$/;"	f	class:CLConvertFullyConnectedWeights
validate	src/runtime/CL/functions/CLConvolutionLayer.cpp	/^Status CLConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLConvolutionLayer
validate	src/runtime/CL/functions/CLDeconvolutionLayer.cpp	/^Status CLDeconvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *bias, ITensorInfo *output, const PadStrideInfo &info,$/;"	f	class:CLDeconvolutionLayer
validate	src/runtime/CL/functions/CLDeconvolutionLayerUpsample.cpp	/^Status CLDeconvolutionLayerUpsample::validate(const ITensorInfo *input, const ITensorInfo *output, const BorderSize &inner_border,$/;"	f	class:CLDeconvolutionLayerUpsample
validate	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^Status CLDepthwiseConvolutionLayer3x3::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDepthwiseConvolutionLayer3x3
validate	src/runtime/CL/functions/CLDepthwiseConvolutionLayer.cpp	/^Status CLDepthwiseConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDepthwiseConvolutionLayer
validate	src/runtime/CL/functions/CLDequantizationLayer.cpp	/^Status CLDequantizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	class:CLDequantizationLayer
validate	src/runtime/CL/functions/CLDirectConvolutionLayer.cpp	/^Status CLDirectConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLDirectConvolutionLayer
validate	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^Status CLFullyConnectedLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, bool transpose_weights, bool are_weights_reshaped)$/;"	f	class:CLFullyConnectedLayer
validate	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^Status CLFullyConnectedLayerReshapeWeights::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:CLFullyConnectedLayerReshapeWeights
validate	src/runtime/CL/functions/CLGEMM.cpp	/^Status CLGEMM::validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *output, float alpha, float beta, const GEMMInfo &gemm_info)$/;"	f	class:CLGEMM
validate	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^Status CLConvolutionLayerReshapeWeights::validate(const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output)$/;"	f	class:CLConvolutionLayerReshapeWeights
validate	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^Status CLGEMMConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLGEMMConvolutionLayer
validate	src/runtime/CL/functions/CLGEMMLowpMatrixMultiplyCore.cpp	/^Status CLGEMMLowpMatrixMultiplyCore::validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *output, const GEMMInfo &gemm_info)$/;"	f	class:CLGEMMLowpMatrixMultiplyCore
validate	src/runtime/CL/functions/CLGEMMLowpOutputStage.cpp	/^Status CLGEMMLowpQuantizeDownInt32ToUint8Scale::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8Scale
validate	src/runtime/CL/functions/CLGEMMLowpOutputStage.cpp	/^Status CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint
validate	src/runtime/CL/functions/CLL2NormalizeLayer.cpp	/^Status CLL2NormalizeLayer::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, float epsilon)$/;"	f	class:CLL2NormalizeLayer
validate	src/runtime/CL/functions/CLLSTMLayer.cpp	/^Status CLLSTMLayer::validate(const ITensorInfo *input, const ITensorInfo *input_to_forget_weights, const ITensorInfo *input_to_cell_weights, const ITensorInfo *input_to_output_weights,$/;"	f	class:CLLSTMLayer
validate	src/runtime/CL/functions/CLLocallyConnectedLayer.cpp	/^Status CLLocallyConnectedLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info)$/;"	f	class:CLLocallyConnectedLayer
validate	src/runtime/CL/functions/CLNormalizationLayer.cpp	/^Status CLNormalizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const NormalizationLayerInfo &norm_info)$/;"	f	class:CLNormalizationLayer
validate	src/runtime/CL/functions/CLPermute.cpp	/^Status CLPermute::validate(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	class:CLPermute
validate	src/runtime/CL/functions/CLPixelWiseMultiplication.cpp	/^Status CLPixelWiseMultiplication::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale,$/;"	f	class:CLPixelWiseMultiplication
validate	src/runtime/CL/functions/CLPoolingLayer.cpp	/^Status CLPoolingLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	class:CLPoolingLayer
validate	src/runtime/CL/functions/CLQuantizationLayer.cpp	/^Status CLQuantizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:CLQuantizationLayer
validate	src/runtime/CL/functions/CLRNNLayer.cpp	/^Status CLRNNLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *recurrent_weights, const ITensorInfo *bias, const ITensorInfo *hidden_state,$/;"	f	class:CLRNNLayer
validate	src/runtime/CL/functions/CLReductionOperation.cpp	/^Status CLReductionOperation::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, ReductionOperation op)$/;"	f	class:CLReductionOperation
validate	src/runtime/CL/functions/CLSoftmaxLayer.cpp	/^Status CLSoftmaxLayer::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:CLSoftmaxLayer
validate	src/runtime/CL/functions/CLTranspose.cpp	/^Status CLTranspose::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:CLTranspose
validate	src/runtime/CL/functions/CLWidthConcatenateLayer.cpp	/^Status CLWidthConcatenateLayer::validate(const std::vector<ITensorInfo *> &inputs_vector, const ITensorInfo *output) \/\/ NOLINT$/;"	f	class:CLWidthConcatenateLayer
validate	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^Status CLWinogradConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:CLWinogradConvolutionLayer
validate	src/runtime/CL/functions/CLWinogradInputTransform.cpp	/^Status CLWinogradInputTransform::validate(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	class:CLWinogradInputTransform
validate	src/runtime/CPP/functions/CPPPermute.cpp	/^Status CPPPermute::validate(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	class:CPPPermute
validate	src/runtime/GLES_COMPUTE/functions/GCArithmeticAddition.cpp	/^Status GCArithmeticAddition::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:GCArithmeticAddition
validate	src/runtime/GLES_COMPUTE/functions/GCGEMM.cpp	/^Status GCGEMM::validate(const ITensorInfo *a, const ITensorInfo *b, const IGCTensor *c, const ITensorInfo *output, const float alpha, const float beta, const GEMMInfo &gemm_info)$/;"	f	class:GCGEMM
validate	src/runtime/GLES_COMPUTE/functions/GCPoolingLayer.cpp	/^Status GCPoolingLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	class:GCPoolingLayer
validate	src/runtime/NEON/functions/NEActivationLayer.cpp	/^Status NEActivationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &act_info)$/;"	f	class:NEActivationLayer
validate	src/runtime/NEON/functions/NEArithmeticAddition.cpp	/^Status NEArithmeticAddition::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticAddition
validate	src/runtime/NEON/functions/NEArithmeticSubtraction.cpp	/^Status NEArithmeticSubtraction::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	class:NEArithmeticSubtraction
validate	src/runtime/NEON/functions/NEBatchNormalizationLayer.cpp	/^Status NEBatchNormalizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *mean, const ITensorInfo *var, const ITensorInfo *beta, const ITensorInfo *gamma,$/;"	f	class:NEBatchNormalizationLayer
validate	src/runtime/NEON/functions/NECol2Im.cpp	/^Status NECol2Im::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &convolved_dims)$/;"	f	class:NECol2Im
validate	src/runtime/NEON/functions/NEConvertFullyConnectedWeights.cpp	/^Status NEConvertFullyConnectedWeights::validate(const ITensorInfo *input, const ITensorInfo *output, const TensorShape &original_input_shape,$/;"	f	class:NEConvertFullyConnectedWeights
validate	src/runtime/NEON/functions/NEConvolutionLayer.cpp	/^Status NEConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:arm_compute::NEConvolutionLayer
validate	src/runtime/NEON/functions/NEDeconvolutionLayer.cpp	/^Status NEDeconvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *bias, const ITensorInfo *output, const PadStrideInfo &info,$/;"	f	class:NEDeconvolutionLayer
validate	src/runtime/NEON/functions/NEDequantizationLayer.cpp	/^Status NEDequantizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	class:NEDequantizationLayer
validate	src/runtime/NEON/functions/NEDirectConvolutionLayer.cpp	/^Status NEDirectConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *bias, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:NEDirectConvolutionLayer
validate	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^Status NEFullyConnectedLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, bool transpose_weights, bool are_weights_reshaped)$/;"	f	class:NEFullyConnectedLayer
validate	src/runtime/NEON/functions/NEFullyConnectedLayer.cpp	/^Status NEFullyConnectedLayerReshapeWeights::validate(const ITensorInfo *input, const ITensorInfo *output, bool transpose_weights, bool is_batched_fc_layer)$/;"	f	class:NEFullyConnectedLayerReshapeWeights
validate	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^Status NEConvolutionLayerReshapeWeights::validate(const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, bool transpose1xW)$/;"	f	class:arm_compute::NEConvolutionLayerReshapeWeights
validate	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^Status NEGEMMConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:arm_compute::NEGEMMConvolutionLayer
validate	src/runtime/NEON/functions/NEGEMMLowpMatrixMultiplyCore.cpp	/^Status NEGEMMLowpMatrixMultiplyCore::validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *output, const GEMMInfo &gemm_info)$/;"	f	class:NEGEMMLowpMatrixMultiplyCore
validate	src/runtime/NEON/functions/NEGEMMLowpOutputStage.cpp	/^Status NEGEMMLowpQuantizeDownInt32ToUint8Scale::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8Scale
validate	src/runtime/NEON/functions/NEGEMMLowpOutputStage.cpp	/^Status NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint::validate(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	class:NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPoint
validate	src/runtime/NEON/functions/NEGEMMTranspose1xW.cpp	/^Status NEGEMMTranspose1xW::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:NEGEMMTranspose1xW
validate	src/runtime/NEON/functions/NEIm2Col.cpp	/^Status NEIm2Col::validate(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, bool is_fully_connected, bool is_flatten)$/;"	f	class:NEIm2Col
validate	src/runtime/NEON/functions/NEL2NormalizeLayer.cpp	/^Status NEL2NormalizeLayer::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, float epsilon)$/;"	f	class:NEL2NormalizeLayer
validate	src/runtime/NEON/functions/NELocallyConnectedLayer.cpp	/^Status NELocallyConnectedLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info)$/;"	f	class:NELocallyConnectedLayer
validate	src/runtime/NEON/functions/NENormalizationLayer.cpp	/^Status NENormalizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const NormalizationLayerInfo &norm_info)$/;"	f	class:NENormalizationLayer
validate	src/runtime/NEON/functions/NEPermute.cpp	/^Status NEPermute::validate(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	class:NEPermute
validate	src/runtime/NEON/functions/NEPixelWiseMultiplication.cpp	/^Status NEPixelWiseMultiplication::validate(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy)$/;"	f	class:NEPixelWiseMultiplication
validate	src/runtime/NEON/functions/NEPoolingLayer.cpp	/^Status NEPoolingLayer::validate(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	class:NEPoolingLayer
validate	src/runtime/NEON/functions/NEQuantizationLayer.cpp	/^Status NEQuantizationLayer::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:NEQuantizationLayer
validate	src/runtime/NEON/functions/NEReductionOperation.cpp	/^Status NEReductionOperation::validate(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, ReductionOperation op)$/;"	f	class:NEReductionOperation
validate	src/runtime/NEON/functions/NEScale.cpp	/^Status NEScale::validate(const ITensorInfo *input, const ITensorInfo *output, InterpolationPolicy policy,$/;"	f	class:NEScale
validate	src/runtime/NEON/functions/NESoftmaxLayer.cpp	/^Status NESoftmaxLayer::validate(const ITensorInfo *input, const ITensorInfo *output, float beta)$/;"	f	class:NESoftmaxLayer
validate	src/runtime/NEON/functions/NETranspose.cpp	/^Status NETranspose::validate(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	class:NETranspose
validate	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^Status NEWinogradConvolutionLayer::validate(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info,$/;"	f	class:arm_compute::NEWinogradConvolutionLayer
validate	tests/framework/command_line/CommandLineParser.cpp	/^bool CommandLineParser::validate() const$/;"	f	class:arm_compute::test::framework::CommandLineParser
validate	tests/validation/Validation.cpp	/^void validate(const IAccessor &tensor, BorderSize border_size, const BorderMode &border_mode, const void *border_value)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.cpp	/^void validate(const IAccessor &tensor, const void *reference_value)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.cpp	/^void validate(const arm_compute::PaddingSize &padding, const arm_compute::PaddingSize &reference)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.cpp	/^void validate(const arm_compute::PaddingSize &padding, const arm_compute::PaddingSize &width_reference, const arm_compute::PaddingSize &height_reference)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.cpp	/^void validate(const arm_compute::ValidRegion &region, const arm_compute::ValidRegion &reference)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.cpp	/^void validate(std::vector<unsigned int> classified_labels, std::vector<unsigned int> expected_labels)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.h	/^bool validate(T target, T reference, U tolerance)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.h	/^void validate(const IAccessor &tensor, const SimpleTensor<T> &reference, U tolerance_value, float tolerance_number, float absolute_tolerance_value)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.h	/^void validate(const IAccessor &tensor, const SimpleTensor<T> &reference, const SimpleTensor<T> &valid_mask, U tolerance_value, float tolerance_number, float absolute_tolerance_value)$/;"	f	namespace:arm_compute::test::validation
validate	tests/validation/Validation.h	/^void validate(const IAccessor &tensor, const SimpleTensor<T> &reference, const ValidRegion &valid_region, U tolerance_value, float tolerance_number, float absolute_tolerance_value)$/;"	f	namespace:arm_compute::test::validation
validate_all_nodes	src/graph/detail/ExecutionHelpers.cpp	/^void validate_all_nodes(Graph &g)$/;"	f	namespace:arm_compute::graph::detail
validate_and_configure_window	src/core/CL/kernels/CLActivationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon183
validate_and_configure_window	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo &input1, ITensorInfo &input2, ITensorInfo &output)$/;"	f	namespace:__anon184
validate_and_configure_window	src/core/CL/kernels/CLArithmeticSubtractionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)$/;"	f	namespace:__anon185
validate_and_configure_window	src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output,$/;"	f	namespace:__anon186
validate_and_configure_window	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:arm_compute::__anon187
validate_and_configure_window	src/core/CL/kernels/CLCol2ImKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, std::pair<unsigned int, unsigned int> convolved_dims)$/;"	f	namespace:__anon188
validate_and_configure_window	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *weights, ITensorInfo *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier,$/;"	f	namespace:__anon189
validate_and_configure_window	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *weights, ITensorInfo *bias, ITensorInfo *output,$/;"	f	namespace:__anon190
validate_and_configure_window	src/core/CL/kernels/CLDequantizationLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, ITensorInfo *min_max)$/;"	f	namespace:__anon194
validate_and_configure_window	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *weights, ITensorInfo *output, const PadStrideInfo &conv_info, const GPUTarget target)$/;"	f	namespace:__anon195
validate_and_configure_window	src/core/CL/kernels/CLDirectConvolutionOutputStageKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output)$/;"	f	namespace:__anon196
validate_and_configure_window	src/core/CL/kernels/CLGEMMInterleave4x4Kernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, int mult_interleave4x4_height)$/;"	f	namespace:__anon197
validate_and_configure_window	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output, bool is_interleaved_transposed,$/;"	f	namespace:__anon198
validate_and_configure_window	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *mm_result, ITensorInfo *vector_sum_col, ITensorInfo *vector_sum_row,$/;"	f	namespace:__anon199
validate_and_configure_window	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output)$/;"	f	namespace:arm_compute::__anon200
validate_and_configure_window	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output)$/;"	f	namespace:arm_compute::__anon201
validate_and_configure_window	src/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *accum, ITensorInfo *biases, GPUTarget gpu_target,$/;"	f	namespace:__anon203
validate_and_configure_window	src/core/CL/kernels/CLGEMMMatrixAdditionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon204
validate_and_configure_window	src/core/CL/kernels/CLGEMMMatrixMultiplyKernel.cpp	/^inline std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output,$/;"	f	namespace:__anon206
validate_and_configure_window	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output)$/;"	f	namespace:__anon207
validate_and_configure_window	src/core/CL/kernels/CLGEMMTranspose1xWKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, unsigned int &num_elems_processed_per_iteration, int mult_transpose1xW_width)$/;"	f	namespace:__anon208
validate_and_configure_window	src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon210
validate_and_configure_window	src/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output)$/;"	f	namespace:__anon211
validate_and_configure_window	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon212
validate_and_configure_window	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, NormalizationLayerInfo norm_info)$/;"	f	namespace:__anon213
validate_and_configure_window	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)$/;"	f	namespace:__anon215
validate_and_configure_window	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^std::tuple<Status, Window, CLPoolingConfig> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	namespace:__anon216
validate_and_configure_window	src/core/CL/kernels/CLQuantizationLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, ITensorInfo *min_max)$/;"	f	namespace:__anon217
validate_and_configure_window	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, unsigned int axis)$/;"	f	namespace:__anon218
validate_and_configure_window	src/core/CL/kernels/CLTransposeKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon220
validate_and_configure_window	src/core/CL/kernels/CLWidthConcatenateLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, unsigned int width_offset, ITensorInfo *output)$/;"	f	namespace:__anon224
validate_and_configure_window	src/core/CL/kernels/CLWinogradFilterTransformKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon225
validate_and_configure_window	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:__anon226
validate_and_configure_window	src/core/CL/kernels/CLWinogradOutputTransformKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output, const Size2D &output_tile_size)$/;"	f	namespace:__anon227
validate_and_configure_window	src/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)$/;"	f	namespace:__anon232
validate_and_configure_window	src/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output,$/;"	f	namespace:__anon233
validate_and_configure_window	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.cpp	/^inline std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output,$/;"	f	namespace:__anon234
validate_and_configure_window	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^std::tuple<Status, Window, GCPoolingConfig> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	namespace:__anon236
validate_and_configure_window	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon240
validate_and_configure_window	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo &input1, ITensorInfo &input2, ITensorInfo &output)$/;"	f	namespace:__anon241
validate_and_configure_window	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^inline std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)$/;"	f	namespace:__anon242
validate_and_configure_window	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon243
validate_and_configure_window	src/core/NEON/kernels/NEDequantizationLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, ITensorInfo *min_max)$/;"	f	namespace:__anon255
validate_and_configure_window	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *weights, ITensorInfo *output, const PadStrideInfo &conv_info, unsigned int &num_weight_elems_read_per_row,$/;"	f	namespace:__anon256
validate_and_configure_window	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output)$/;"	f	namespace:__anon257
validate_and_configure_window	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon260
validate_and_configure_window	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output)$/;"	f	namespace:__anon262
validate_and_configure_window	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *mm_result, ITensorInfo *vector_sum_col, ITensorInfo *vector_sum_row,$/;"	f	namespace:__anon263
validate_and_configure_window	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output)$/;"	f	namespace:__anon264
validate_and_configure_window	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output)$/;"	f	namespace:__anon265
validate_and_configure_window	src/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.cpp	/^inline std::pair<Status, Window> validate_and_configure_window(ITensorInfo *accum, ITensorInfo *biases)$/;"	f	namespace:__anon267
validate_and_configure_window	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^inline std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output)$/;"	f	namespace:__anon269
validate_and_configure_window	src/core/NEON/kernels/NEGEMMTranspose1xWKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon270
validate_and_configure_window	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *sum, ITensorInfo *output, unsigned int axis)$/;"	f	namespace:__anon274
validate_and_configure_window	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input0, ITensorInfo *input1, ITensorInfo *output)$/;"	f	namespace:__anon276
validate_and_configure_window	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:arm_compute::__anon281
validate_and_configure_window	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *input_squared, ITensorInfo *output, const NormalizationLayerInfo &norm_info)$/;"	f	namespace:__anon284
validate_and_configure_window	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^inline std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input1, ITensorInfo *input2, ITensorInfo *output)$/;"	f	namespace:__anon287
validate_and_configure_window	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, const PoolingLayerInfo &pool_info, unsigned int &num_elems_processed_per_iteration,$/;"	f	namespace:__anon288
validate_and_configure_window	src/core/NEON/kernels/NEQuantizationLayerKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, ITensorInfo *min_max)$/;"	f	namespace:__anon289
validate_and_configure_window	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^std::tuple<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output, unsigned int axis)$/;"	f	namespace:__anon290
validate_and_configure_window	src/core/NEON/kernels/NEScaleKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *dx, ITensorInfo *dy, ITensorInfo *offsets, ITensorInfo *output,$/;"	f	namespace:arm_compute::__anon293
validate_and_configure_window	src/core/NEON/kernels/NETransposeKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon298
validate_and_configure_window	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon300
validate_and_configure_window_1DMaxShiftExpSum	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_1DMaxShiftExpSum(ITensorInfo *input, ITensorInfo *max, ITensorInfo *output, ITensorInfo *sum)$/;"	f	namespace:__anon219
validate_and_configure_window_1DNorm	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_1DNorm(ITensorInfo *input, ITensorInfo *output, ITensorInfo *sum)$/;"	f	namespace:__anon219
validate_and_configure_window_logits_1d_max	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_logits_1d_max(ITensorInfo &input, ITensorInfo &output)$/;"	f	namespace:arm_compute::__anon296
validate_and_configure_window_logits_softmax	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_logits_softmax(ITensorInfo &input, ITensorInfo &max,$/;"	f	namespace:arm_compute::__anon297
validate_and_configure_window_matrix_a_reduction	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_matrix_a_reduction(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon202
validate_and_configure_window_matrix_a_reduction	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_matrix_a_reduction(ITensorInfo *input, ITensorInfo *output, bool is_reshaped)$/;"	f	namespace:__anon266
validate_and_configure_window_matrix_b_reduction	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_matrix_b_reduction(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon202
validate_and_configure_window_matrix_b_reduction	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_matrix_b_reduction(ITensorInfo *input, ITensorInfo *output)$/;"	f	namespace:__anon266
validate_and_configure_window_nchw	src/core/NEON/kernels/NEScaleKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_nchw(ITensorInfo *input, ITensorInfo *dx, ITensorInfo *dy, ITensorInfo *offsets, ITensorInfo *output,$/;"	f	namespace:arm_compute::__anon293
validate_and_configure_window_nhwc	src/core/NEON/kernels/NEScaleKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_nhwc(ITensorInfo *input, ITensorInfo *output,$/;"	f	namespace:arm_compute::__anon293
validate_and_configure_window_winograd_input_trans	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_winograd_input_trans(ITensorInfo *input, ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::__anon301
validate_and_configure_window_winograd_output_trans	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_winograd_output_trans(ITensorInfo *input, ITensorInfo *bias, ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::__anon301
validate_and_configure_window_winograd_weight_trans	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^std::pair<Status, Window> validate_and_configure_window_winograd_weight_trans(ITensorInfo *input, ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::__anon301
validate_and_initialize_values	src/runtime/NEON/functions/NEGEMMConvolutionLayer.cpp	/^Status validate_and_initialize_values(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const PadStrideInfo &conv_info, const WeightsInfo &weights_info,$/;"	f	namespace:arm_compute::__anon322
validate_arguments	src/core/CL/kernels/CLActivationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ActivationLayerInfo &act_info)$/;"	f	namespace:__anon183
validate_arguments	src/core/CL/kernels/CLArithmeticAdditionKernel.cpp	/^Status validate_arguments(const ITensorInfo &input1, const ITensorInfo &input2, const ITensorInfo &output, ConvertPolicy policy)$/;"	f	namespace:__anon184
validate_arguments	src/core/CL/kernels/CLArithmeticSubtractionKernel.cpp	/^Status validate_arguments(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	namespace:__anon185
validate_arguments	src/core/CL/kernels/CLBatchNormalizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	namespace:__anon186
validate_arguments	src/core/CL/kernels/CLChannelShuffleLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, unsigned int num_groups)$/;"	f	namespace:arm_compute::__anon187
validate_arguments	src/core/CL/kernels/CLCol2ImKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, std::pair<unsigned int, unsigned int> convolved_dims)$/;"	f	namespace:__anon188
validate_arguments	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NCHWKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier,$/;"	f	namespace:__anon189
validate_arguments	src/core/CL/kernels/CLDepthwiseConvolutionLayer3x3NHWCKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info, unsigned int depth_multiplier,$/;"	f	namespace:__anon190
validate_arguments	src/core/CL/kernels/CLDepthwiseIm2ColKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info, bool has_bias, unsigned int depth_multiplier)$/;"	f	namespace:__anon191
validate_arguments	src/core/CL/kernels/CLDepthwiseVectorToTensorKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, size_t conv_w, size_t conv_h)$/;"	f	namespace:__anon192
validate_arguments	src/core/CL/kernels/CLDepthwiseWeightsReshapeKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *biases)$/;"	f	namespace:__anon193
validate_arguments	src/core/CL/kernels/CLDequantizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	namespace:__anon194
validate_arguments	src/core/CL/kernels/CLDirectConvolutionLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info)$/;"	f	namespace:__anon195
validate_arguments	src/core/CL/kernels/CLDirectConvolutionOutputStageKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output)$/;"	f	namespace:__anon196
validate_arguments	src/core/CL/kernels/CLGEMMInterleave4x4Kernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, int mult_interleave4x4_height)$/;"	f	namespace:__anon197
validate_arguments	src/core/CL/kernels/CLGEMMLowpMatrixMultiplyKernel.cpp	/^Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	namespace:__anon198
validate_arguments	src/core/CL/kernels/CLGEMMLowpOffsetContributionKernel.cpp	/^Status validate_arguments(const ITensorInfo *mm_result, const ITensorInfo *vector_sum_col, const ITensorInfo *vector_sum_row,$/;"	f	namespace:__anon199
validate_arguments	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	namespace:arm_compute::__anon200
validate_arguments	src/core/CL/kernels/CLGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	namespace:arm_compute::__anon201
validate_arguments	src/core/CL/kernels/CLGEMMMatrixAccumulateBiasesKernel.cpp	/^Status validate_arguments(const ITensorInfo *accum, const ITensorInfo *biases)$/;"	f	namespace:__anon203
validate_arguments	src/core/CL/kernels/CLGEMMMatrixAdditionKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, float beta)$/;"	f	namespace:__anon205
validate_arguments	src/core/CL/kernels/CLGEMMMatrixMultiplyKernel.cpp	/^inline Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	namespace:__anon206
validate_arguments	src/core/CL/kernels/CLGEMMMatrixVectorMultiplyKernel.cpp	/^Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	namespace:__anon207
validate_arguments	src/core/CL/kernels/CLGEMMTranspose1xWKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, int mult_transpose1xW_width)$/;"	f	namespace:__anon208
validate_arguments	src/core/CL/kernels/CLIm2ColKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, bool has_bias, const Size2D &dilation)$/;"	f	namespace:__anon209
validate_arguments	src/core/CL/kernels/CLL2NormalizeLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *sum, const ITensorInfo *output, unsigned int axis, float epsilon)$/;"	f	namespace:__anon210
validate_arguments	src/core/CL/kernels/CLLocallyConnectedMatrixMultiplyKernel.cpp	/^Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	namespace:__anon211
validate_arguments	src/core/CL/kernels/CLMinMaxLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon212
validate_arguments	src/core/CL/kernels/CLNormalizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, NormalizationLayerInfo norm_info)$/;"	f	namespace:__anon213
validate_arguments	src/core/CL/kernels/CLPermuteKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	namespace:__anon214
validate_arguments	src/core/CL/kernels/CLPixelWiseMultiplicationKernel.cpp	/^Status validate_arguments(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale,$/;"	f	namespace:__anon215
validate_arguments	src/core/CL/kernels/CLPoolingLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	namespace:__anon216
validate_arguments	src/core/CL/kernels/CLQuantizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	namespace:__anon217
validate_arguments	src/core/CL/kernels/CLReductionOperationKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, ReductionOperation op)$/;"	f	namespace:__anon218
validate_arguments	src/core/CL/kernels/CLTransposeKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon220
validate_arguments	src/core/CL/kernels/CLWeightsReshapeKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *biases, const ITensorInfo *output)$/;"	f	namespace:__anon223
validate_arguments	src/core/CL/kernels/CLWidthConcatenateLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, unsigned int width_offset, const ITensorInfo *output)$/;"	f	namespace:__anon224
validate_arguments	src/core/CL/kernels/CLWinogradFilterTransformKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:__anon225
validate_arguments	src/core/CL/kernels/CLWinogradInputTransformKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:__anon226
validate_arguments	src/core/CL/kernels/CLWinogradOutputTransformKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:__anon227
validate_arguments	src/core/CPP/kernels/CPPPermuteKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	namespace:__anon230
validate_arguments	src/core/GLES_COMPUTE/kernels/GCArithmeticAdditionKernel.cpp	/^Status validate_arguments(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	namespace:__anon232
validate_arguments	src/core/GLES_COMPUTE/kernels/GCBatchNormalizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output,$/;"	f	namespace:__anon233
validate_arguments	src/core/GLES_COMPUTE/kernels/GCGEMMMatrixMultiplyKernel.cpp	/^inline Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, bool is_interleaved_transposed, const GEMMReshapeInfo &reshape_info)$/;"	f	namespace:__anon234
validate_arguments	src/core/GLES_COMPUTE/kernels/GCIm2ColKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon235
validate_arguments	src/core/GLES_COMPUTE/kernels/GCPoolingLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info)$/;"	f	namespace:__anon236
validate_arguments	src/core/NEON/kernels/NEActivationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon240
validate_arguments	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^Status validate_arguments(const ITensorInfo &input1, const ITensorInfo &input2, const ITensorInfo &output, ConvertPolicy policy)$/;"	f	namespace:__anon241
validate_arguments	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^inline Status validate_arguments(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, ConvertPolicy policy)$/;"	f	namespace:__anon242
validate_arguments	src/core/NEON/kernels/NEBatchNormalizationLayerKernel.cpp	/^validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *mean, const ITensorInfo *var,$/;"	f	namespace:__anon243
validate_arguments	src/core/NEON/kernels/NECol2ImKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const Size2D &convolved_dims)$/;"	f	namespace:__anon250
validate_arguments	src/core/NEON/kernels/NEDequantizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	namespace:__anon255
validate_arguments	src/core/NEON/kernels/NEDirectConvolutionLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *output, const PadStrideInfo &conv_info)$/;"	f	namespace:__anon256
validate_arguments	src/core/NEON/kernels/NEDirectConvolutionLayerOutputStageKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output)$/;"	f	namespace:__anon257
validate_arguments	src/core/NEON/kernels/NEGEMMInterleave4x4Kernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon260
validate_arguments	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	namespace:__anon262
validate_arguments	src/core/NEON/kernels/NEGEMMLowpOffsetContributionKernel.cpp	/^Status validate_arguments(const ITensorInfo *mm_result, const ITensorInfo *vector_sum_col, const ITensorInfo *vector_sum_row,$/;"	f	namespace:__anon263
validate_arguments	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	namespace:__anon264
validate_arguments	src/core/NEON/kernels/NEGEMMLowpQuantizeDownInt32ToUint8ScaleKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, int min, int max)$/;"	f	namespace:__anon265
validate_arguments	src/core/NEON/kernels/NEGEMMMatrixAccumulateBiasesKernel.cpp	/^inline Status validate_arguments(const ITensorInfo *accum, const ITensorInfo *biases)$/;"	f	namespace:__anon267
validate_arguments	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^inline Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output, float alpha, bool is_interleaved, const GEMMReshapeInfo &reshape_info)$/;"	f	namespace:__anon269
validate_arguments	src/core/NEON/kernels/NEGEMMTranspose1xWKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon270
validate_arguments	src/core/NEON/kernels/NEIm2ColKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const Size2D &kernel_dims, const PadStrideInfo &conv_info,$/;"	f	namespace:__anon273
validate_arguments	src/core/NEON/kernels/NEL2NormalizeLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *sum, const ITensorInfo *output, unsigned int axis, float epsilon)$/;"	f	namespace:__anon274
validate_arguments	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^Status validate_arguments(const ITensorInfo *input0, const ITensorInfo *input1, const ITensorInfo *output)$/;"	f	namespace:__anon276
validate_arguments	src/core/NEON/kernels/NEMinMaxLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:arm_compute::__anon281
validate_arguments	src/core/NEON/kernels/NENormalizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *input_squared, const ITensorInfo *output, const NormalizationLayerInfo &norm_info)$/;"	f	namespace:__anon284
validate_arguments	src/core/NEON/kernels/NEPermuteKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const PermutationVector &perm)$/;"	f	namespace:__anon286
validate_arguments	src/core/NEON/kernels/NEPixelWiseMultiplicationKernel.cpp	/^inline Status validate_arguments(const ITensorInfo *input1, const ITensorInfo *input2, const ITensorInfo *output, float scale, ConvertPolicy overflow_policy, RoundingPolicy rounding_policy)$/;"	f	namespace:__anon287
validate_arguments	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const PoolingLayerInfo &pool_info, unsigned int &pooled_w, unsigned int pooled_h, int pool_size_x)$/;"	f	namespace:__anon288
validate_arguments	src/core/NEON/kernels/NEQuantizationLayerKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, const ITensorInfo *min_max)$/;"	f	namespace:__anon289
validate_arguments	src/core/NEON/kernels/NEReductionOperationKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output, unsigned int axis, ReductionOperation op)$/;"	f	namespace:__anon290
validate_arguments	src/core/NEON/kernels/NEScaleKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *dx, const ITensorInfo *dy,$/;"	f	namespace:arm_compute::__anon293
validate_arguments	src/core/NEON/kernels/NETransposeKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon298
validate_arguments	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *biases, const ITensorInfo *output)$/;"	f	namespace:__anon300
validate_arguments	src/runtime/GLES_COMPUTE/functions/GCGEMM.cpp	/^Status validate_arguments(const ITensorInfo *a, const ITensorInfo *b, const IGCTensor *c, const ITensorInfo *output, const float alpha, const float beta, const GEMMInfo &gemm_info = GEMMInfo())$/;"	f	namespace:__anon320
validate_arguments	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^Status validate_arguments(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *biases, const ITensorInfo *output, const PadStrideInfo &conv_info)$/;"	f	namespace:arm_compute::__anon326
validate_arguments_1DMaxShiftExpSum	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^Status validate_arguments_1DMaxShiftExpSum(const ITensorInfo *input, const ITensorInfo *max, const ITensorInfo *output, const ITensorInfo *sum)$/;"	f	namespace:__anon219
validate_arguments_1DNorm	src/core/CL/kernels/CLSoftmaxLayerKernel.cpp	/^Status validate_arguments_1DNorm(const ITensorInfo *input, const ITensorInfo *sum, const ITensorInfo *output)$/;"	f	namespace:__anon219
validate_arguments_logits_1d_max	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^Status validate_arguments_logits_1d_max(const ITensorInfo &input, const ITensorInfo &output)$/;"	f	namespace:arm_compute::__anon296
validate_arguments_logits_softmax	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^Status validate_arguments_logits_softmax(const ITensorInfo &input, const ITensorInfo &max,$/;"	f	namespace:arm_compute::__anon297
validate_arguments_matrix_a_reduction	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^Status validate_arguments_matrix_a_reduction(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon202
validate_arguments_matrix_a_reduction	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^Status validate_arguments_matrix_a_reduction(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon266
validate_arguments_matrix_b_reduction	src/core/CL/kernels/CLGEMMLowpReductionKernel.cpp	/^Status validate_arguments_matrix_b_reduction(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon202
validate_arguments_matrix_b_reduction	src/core/NEON/kernels/NEGEMMLowpReductionKernel.cpp	/^Status validate_arguments_matrix_b_reduction(const ITensorInfo *input, const ITensorInfo *output)$/;"	f	namespace:__anon266
validate_arguments_pool_info	src/core/NEON/kernels/NEPoolingLayerKernel.cpp	/^Status validate_arguments_pool_info(const unsigned int pool_size_x, const unsigned int pool_size_y)$/;"	f	namespace:__anon288
validate_arguments_winograd_gemm	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status validate_arguments_winograd_gemm(const ITensorInfo *a, const ITensorInfo *b, const ITensor *c, const ITensorInfo *output, const float alpha, const float beta,$/;"	f	namespace:arm_compute::__anon301
validate_arguments_winograd_input_trans	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status validate_arguments_winograd_input_trans(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::__anon301
validate_arguments_winograd_output_trans	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status validate_arguments_winograd_output_trans(const ITensorInfo *input, const ITensorInfo *bias, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::__anon301
validate_arguments_winograd_weight_trans	src/core/NEON/kernels/NEWinogradConvolutionLayerKernel.cpp	/^Status validate_arguments_winograd_weight_trans(const ITensorInfo *input, const ITensorInfo *output, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::__anon301
validate_configuration	tests/validation/CL/ChannelCombine.cpp	/^inline void validate_configuration(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute::test::validation::__anon404
validate_configuration	tests/validation/CL/ChannelExtract.cpp	/^inline void validate_configuration(const TensorShape &shape, Format format, Channel channel)$/;"	f	namespace:arm_compute::test::validation::__anon405
validate_configuration	tests/validation/CL/MinMaxLocation.cpp	/^void validate_configuration(const CLTensor &src, TensorShape shape)$/;"	f	namespace:arm_compute::test::validation
validate_configuration	tests/validation/NEON/ChannelCombine.cpp	/^inline void validate_configuration(const TensorShape &shape, Format format)$/;"	f	namespace:arm_compute::test::validation::__anon477
validate_configuration	tests/validation/NEON/ChannelExtract.cpp	/^inline void validate_configuration(const TensorShape &shape, Format format, Channel channel)$/;"	f	namespace:arm_compute::test::validation::__anon478
validate_configuration	tests/validation/NEON/MinMaxLocation.cpp	/^void validate_configuration(const Tensor &src, TensorShape shape)$/;"	f	namespace:arm_compute::test::validation
validate_configuration	tests/validation/NEON/PixelWiseMultiplication.cpp	/^void validate_configuration(TensorShape shape, DataType dt1, DataType dt2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy)$/;"	f	namespace:arm_compute::test::validation::__anon515
validate_convolution_layer	arm_compute/graph/backends/ValidateHelpers.h	/^Status validate_convolution_layer(ConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::detail
validate_convolution_layer	src/graph/backends/GLES/GCNodeValidator.cpp	/^Status validate_convolution_layer(ConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon307
validate_depthwise_convolution_layer	arm_compute/graph/backends/ValidateHelpers.h	/^Status validate_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::detail
validate_depthwise_convolution_layer	src/graph/backends/GLES/GCNodeValidator.cpp	/^Status validate_depthwise_convolution_layer(DepthwiseConvolutionLayerNode &node)$/;"	f	namespace:arm_compute::graph::backends::__anon307
validate_detection_windows	tests/validation/Validation.h	/^void validate_detection_windows(T target_first, T target_last, U reference_first, U reference_last, V tolerance,$/;"	f	namespace:arm_compute::test::validation
validate_gaussian_pyramid	tests/validation/CL/GaussianPyramid.cpp	/^inline void validate_gaussian_pyramid(const CLPyramid &target, const std::vector<SimpleTensor<T>> &reference, BorderMode border_mode)$/;"	f	namespace:arm_compute::test::validation::__anon424
validate_gaussian_pyramid	tests/validation/NEON/GaussianPyramid.cpp	/^inline void validate_gaussian_pyramid(const Pyramid &target, const std::vector<SimpleTensor<T>> &reference, BorderMode border_mode)$/;"	f	namespace:arm_compute::test::validation::__anon500
validate_keypoints	tests/validation/Validation.h	/^void validate_keypoints(T target_first, T target_last, U reference_first, U reference_last, V tolerance, float allowed_missing_percentage, float allowed_mismatch_percentage)$/;"	f	namespace:arm_compute::test::validation
validate_min_max_loc	tests/validation/Validation.h	/^void validate_min_max_loc(const MinMaxLocationValues<T> &target, const MinMaxLocationValues<U> &reference)$/;"	f	namespace:arm_compute::test::validation
validate_mm	src/runtime/CL/functions/CLFullyConnectedLayer.cpp	/^Status validate_mm(const ITensorInfo &input, const ITensorInfo &weights, const ITensorInfo &output)$/;"	f	namespace:__anon312
validate_mm	src/runtime/CL/functions/CLGEMMConvolutionLayer.cpp	/^Status CLGEMMConvolutionLayer::validate_mm(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *output)$/;"	f	class:CLGEMMConvolutionLayer
validate_mm	src/runtime/GLES_COMPUTE/functions/GCConvolutionLayer.cpp	/^Status GCConvolutionLayer::validate_mm(const ITensorInfo *input, const ITensorInfo *weights, const ITensorInfo *output)$/;"	f	class:GCConvolutionLayer
validate_models	tests/validation/reference/HOGMultiDetection.cpp	/^void validate_models(const std::vector<HOGInfo> &models)$/;"	f	namespace:arm_compute::test::validation::reference::__anon540
validate_node	src/graph/backends/CL/CLDeviceBackend.cpp	/^arm_compute::Status CLDeviceBackend::validate_node(INode &node)$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
validate_node	src/graph/backends/GLES/GCDeviceBackend.cpp	/^arm_compute::Status GCDeviceBackend::validate_node(INode &node)$/;"	f	class:arm_compute::graph::backends::GCDeviceBackend
validate_node	src/graph/backends/NEON/NEDeviceBackend.cpp	/^arm_compute::Status NEDeviceBackend::validate_node(INode &node)$/;"	f	class:arm_compute::graph::backends::NEDeviceBackend
validate_subtensor_shape	src/runtime/TensorAllocator.cpp	/^bool validate_subtensor_shape(const TensorInfo &parent_info, const TensorInfo &child_info, const Coordinates &coords)$/;"	f	namespace:__anon327
validate_wrap	tests/validation/Validation.h	/^void validate_wrap(const IAccessor &tensor, const SimpleTensor<T> &reference, U tolerance_value, float tolerance_number)$/;"	f	namespace:arm_compute::test::validation
validate_wrap	tests/validation/Validation.h	/^void validate_wrap(const IAccessor &tensor, const SimpleTensor<T> &reference, const ValidRegion &valid_region, U tolerance_value, float tolerance_number)$/;"	f	namespace:arm_compute::test::validation
validation	tests/validation/CL/AbsoluteDifference.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Accumulate.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ActivationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ArithmeticAddition.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ArithmeticSubtraction.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/BatchNormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/BitwiseAnd.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/BitwiseNot.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/BitwiseOr.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/BitwiseXor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Box3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ChannelCombine.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ChannelExtract.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ChannelShuffle.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ConvertFullyConnectedWeights.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Convolution.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Copy.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DeconvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DepthConcatenateLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DepthConvertLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DepthwiseConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DepthwiseSeparableConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DequantizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Derivative.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Dilate.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DilatedConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/DirectConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/EqualizeHistogram.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Erode.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/FastCorners.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/FillBorder.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/FixedPoint/FixedPointTarget.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/CL/FixedPoint/FixedPoint_QS8.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Flatten.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Floor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/FullyConnectedLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/GEMM.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/GEMMLowp.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Gaussian3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Gaussian5x5.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/GaussianPyramid.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/GlobalPoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/HOGDescriptor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/HOGDetector.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/HOGMultiDetection.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/HarrisCorners.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Histogram.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/IntegralImage.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/L2NormalizeLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/LSTMLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/LocallyConnected.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Magnitude.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/MeanStdDev.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Median3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/MinMaxLocation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/NonLinearFilter.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/NormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/OpticalFlow.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Permute.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Phase.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/PixelWiseMultiplication.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/PoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/QuantizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/RNNLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ReductionOperation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Remap.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/ReshapeLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/SYSTEM/AlexNet.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/SYSTEM/LeNet5.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Scale.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Scharr.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Sobel.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/SoftmaxLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/TableLookup.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Threshold.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Transpose.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/UNIT/MemoryManager.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/UNIT/TensorAllocator.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/UNIT/Tuner.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/WarpAffine.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/WarpPerspective.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/WidthConcatenateLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CL/Winograd.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/CPP/Permute.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/ActivationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/ArithmeticAddition.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/BatchNormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/ConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/DepthConcatenateLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/DepthwiseConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/DirectConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/DirectConvolutionLayerTensorShift.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/FullyConnectedLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/GEMM.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/GlobalPoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/NormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/NormalizePlanarYUVLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/PoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/Scale.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/SoftmaxLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/Transpose.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/GLES_COMPUTE/UNIT/MemoryManager.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/Helpers.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/Helpers.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/NEON/AbsoluteDifference.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Accumulate.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ActivationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ArithmeticAddition.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ArithmeticSubtraction.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/BatchNormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/BitwiseAnd.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/BitwiseNot.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/BitwiseOr.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/BitwiseXor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Box3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ChannelCombine.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ChannelExtract.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Col2Im.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ConvertFullyConnectedWeights.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Convolution.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DeconvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DepthConcatenateLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DepthConvertLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DepthwiseConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DepthwiseSeparableConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DequantizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Derivative.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Dilate.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DilatedConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/DirectConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/EqualizeHistogram.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Erode.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/FastCorners.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/FillBorder.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/FixedPoint/FixedPoint.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/FixedPoint/FixedPointTarget.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/NEON/FixedPointPixelWiseMultiplication.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Flatten.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Floor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/FullyConnectedLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/GEMM.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/GEMMLowp.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Gaussian3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Gaussian5x5.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/GaussianPyramid.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/GlobalPoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/HOGDescriptor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/HOGDetector.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/HOGMultiDetection.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/HarrisCorners.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Histogram.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Im2Col.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/IntegralImage.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/L2NormalizeLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/LocallyConnected.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Magnitude.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/MeanStdDev.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Median3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/MinMaxLocation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/NonLinearFilter.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/NormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/OpticalFlow.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Permute.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Phase.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/PixelWiseMultiplication.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/PoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/QuantizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ReductionOperation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Remap.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/ReshapeLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/SYSTEM/AlexNet.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/SYSTEM/LeNet5.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Scale.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Schaar.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Sobel.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/SoftmaxLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/TableLookup.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Threshold.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/Transpose.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/UNIT/MemoryManager.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/UNIT/TensorAllocator.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/WarpAffine.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/NEON/WarpPerspective.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/UNIT/FixedPoint.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/UNIT/GPUTarget.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/UNIT/TensorInfo.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/UNIT/TensorShape.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/Validation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/Validation.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/AbsoluteDifferenceFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/AccumulateFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ActivationLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ArithmeticAdditionFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ArithmeticSubtractionFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/BatchNormalizationLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/BitwiseAndFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/BitwiseNotFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/BitwiseOrFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/BitwiseXorFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/Box3x3Fixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ChannelCombineFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ChannelExtractFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ChannelShuffleLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ConvertFullyConnectedWeightsFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ConvolutionFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ConvolutionLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/CopyFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DeconvolutionLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DepthConcatenateLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DepthConvertLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DepthwiseConvolutionLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DepthwiseSeparableConvolutionLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DequantizationLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DerivativeFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DilateFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DirectConvolutionLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DirectConvolutionLayerTensorShiftFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/DropoutLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/EqualizeHistogramFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ErodeFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/FastCornersFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/FixedPointFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/FixedPointPixelWiseMultiplicationFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/FlattenLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/FloorFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/FullyConnectedLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/GEMMFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/GEMMInterleave4x4Fixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/GEMMLowpAssemblyFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/GEMMLowpFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/GEMMTranspose1xWFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/Gaussian3x3Fixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/Gaussian5x5Fixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/GaussianPyramidHalfFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/HOGDescriptorFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/HOGDetectorFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/HOGMultiDetectionFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/HarrisCornersFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/HistogramFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/Im2ColFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/IntegralImageFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/L2NormalizeLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/LSTMLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/LocallyConnectedFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/MagnitudeFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/MeanStdDevFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/Median3x3Fixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/MinMaxLocationFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/NonLinearFilterFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/NormalizationLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/NormalizePlanarYUVLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/OpticalFlowFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/PermuteFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/PhaseFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/PixelWiseMultiplicationFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/PoolingLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/QuantizationLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/RNNLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ReductionOperationFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/RemapFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ReshapeLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ScaleFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ScharrFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/SobelFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/SoftmaxLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/TableLookupFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/ThresholdFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/TransposeFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/UNIT/MemoryManagerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/WarpAffineFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/WarpPerspectiveFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/WidthConcatenateLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/fixtures/WinogradConvolutionLayerFixture.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/AbsoluteDifference.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/AbsoluteDifference.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Accumulate.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Accumulate.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ActivationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ActivationLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ArithmeticAddition.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ArithmeticAddition.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ArithmeticSubtraction.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ArithmeticSubtraction.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/BatchNormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/BatchNormalizationLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/BitwiseAnd.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/BitwiseAnd.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/BitwiseNot.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/BitwiseNot.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/BitwiseOr.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/BitwiseOr.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/BitwiseXor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/BitwiseXor.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Box3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Box3x3.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ChannelCombine.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ChannelCombine.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ChannelExtract.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ChannelExtract.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ChannelShuffle.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ChannelShuffle.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ConvertFullyConnectedWeights.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ConvertFullyConnectedWeights.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Convolution.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Convolution.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ConvolutionLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Copy.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Copy.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/DeconvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/DeconvolutionLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/DepthConcatenateLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/DepthConcatenateLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/DepthConvertLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/DepthConvertLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/DepthwiseConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/DepthwiseConvolutionLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/DepthwiseSeparableConvolutionLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/DepthwiseSeparableConvolutionLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/DequantizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/DequantizationLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Derivative.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Derivative.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Dilate.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Dilate.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/EqualizeHistogram.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/EqualizeHistogram.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Erode.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Erode.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/FastCorners.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/FastCorners.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/FixedPoint.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/FixedPoint.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/FixedPointPixelWiseMultiplication.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/FixedPointPixelWiseMultiplication.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/FlattenLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/FlattenLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Floor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Floor.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/FullyConnectedLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/FullyConnectedLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/GEMM.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/GEMM.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/GEMMInterleave4x4.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/GEMMInterleaveBlocked.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/GEMMLowp.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/GEMMLowp.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/GEMMTranspose1xW.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Gaussian3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Gaussian3x3.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Gaussian5x5.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Gaussian5x5.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/GaussianPyramidHalf.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/GaussianPyramidHalf.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/HOGDescriptor.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/HOGDescriptor.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/HOGDetector.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/HOGDetector.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/HOGMultiDetection.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/HOGMultiDetection.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/HarrisCornerDetector.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/HarrisCornerDetector.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Histogram.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Histogram.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Im2Col.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Im2Col.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/IntegralImage.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/IntegralImage.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/L2NormalizeLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/L2NormalizeLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/LocallyConnected.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/LocallyConnected.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Magnitude.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Magnitude.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/MeanStdDev.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/MeanStdDev.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Median3x3.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Median3x3.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/MinMaxLocation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/MinMaxLocation.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/NonLinearFilter.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/NonLinearFilter.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/NonMaximaSuppression.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/NonMaximaSuppression.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/NormalizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/NormalizationLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/NormalizePlanarYUVLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/NormalizePlanarYUVLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/OpticalFlow.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/OpticalFlow.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Permute.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Permute.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Phase.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Phase.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/PixelWiseMultiplication.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/PixelWiseMultiplication.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/PoolingLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/PoolingLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/QuantizationLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/QuantizationLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ReductionOperation.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ReductionOperation.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Remap.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Remap.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/ReshapeLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/ReshapeLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Scale.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Scale.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Scharr.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Scharr.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Sobel.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Sobel.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/SoftmaxLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/SoftmaxLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/TableLookup.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/TableLookup.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Threshold.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Threshold.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Transpose.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Transpose.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Utils.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Utils.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/UtilsQuantizedAsymm.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/WarpAffine.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/WarpAffine.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/WarpPerspective.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/WarpPerspective.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/WidthConcatenateLayer.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/WidthConcatenateLayer.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation	tests/validation/reference/Winograd.cpp	/^namespace validation$/;"	n	namespace:arm_compute::test	file:
validation	tests/validation/reference/Winograd.h	/^namespace validation$/;"	n	namespace:arm_compute::test
validation_2_c_l_2_activation_layer_8cpp	documentation/validation_2_c_l_2_activation_layer_8cpp.js	/^var validation_2_c_l_2_activation_layer_8cpp =$/;"	v
validation_2_c_l_2_batch_normalization_layer_8cpp	documentation/validation_2_c_l_2_batch_normalization_layer_8cpp.js	/^var validation_2_c_l_2_batch_normalization_layer_8cpp =$/;"	v
validation_2_c_l_2_convolution_layer_8cpp	documentation/validation_2_c_l_2_convolution_layer_8cpp.js	/^var validation_2_c_l_2_convolution_layer_8cpp =$/;"	v
validation_2_c_l_2_depth_concatenate_layer_8cpp	documentation/validation_2_c_l_2_depth_concatenate_layer_8cpp.js	/^var validation_2_c_l_2_depth_concatenate_layer_8cpp =$/;"	v
validation_2_c_l_2_depthwise_convolution_layer_8cpp	documentation/validation_2_c_l_2_depthwise_convolution_layer_8cpp.js	/^var validation_2_c_l_2_depthwise_convolution_layer_8cpp =$/;"	v
validation_2_c_l_2_depthwise_convolution_layer_8cpp.xhtml#af5ad79218ce618faeba270aa32dd6583	documentation/navtreeindex51.js	/^"validation_2_c_l_2_depthwise_convolution_layer_8cpp.xhtml#af5ad79218ce618faeba270aa32dd6583":[6,0,4,6,0,24,2],$/;"	p	class:NAVTREEINDEX51
validation_2_c_l_2_depthwise_separable_convolution_layer_8cpp	documentation/validation_2_c_l_2_depthwise_separable_convolution_layer_8cpp.js	/^var validation_2_c_l_2_depthwise_separable_convolution_layer_8cpp =$/;"	v
validation_2_c_l_2_dequantization_layer_8cpp	documentation/validation_2_c_l_2_dequantization_layer_8cpp.js	/^var validation_2_c_l_2_dequantization_layer_8cpp =$/;"	v
validation_2_c_l_2_direct_convolution_layer_8cpp	documentation/validation_2_c_l_2_direct_convolution_layer_8cpp.js	/^var validation_2_c_l_2_direct_convolution_layer_8cpp =$/;"	v
validation_2_c_l_2_equalize_histogram_8cpp	documentation/validation_2_c_l_2_equalize_histogram_8cpp.js	/^var validation_2_c_l_2_equalize_histogram_8cpp =$/;"	v
validation_2_c_l_2_floor_8cpp	documentation/validation_2_c_l_2_floor_8cpp.js	/^var validation_2_c_l_2_floor_8cpp =$/;"	v
validation_2_c_l_2_fully_connected_layer_8cpp	documentation/validation_2_c_l_2_fully_connected_layer_8cpp.js	/^var validation_2_c_l_2_fully_connected_layer_8cpp =$/;"	v
validation_2_c_l_2_g_e_m_m_8cpp	documentation/validation_2_c_l_2_g_e_m_m_8cpp.js	/^var validation_2_c_l_2_g_e_m_m_8cpp =$/;"	v
validation_2_c_l_2_g_e_m_m_lowp_8cpp	documentation/validation_2_c_l_2_g_e_m_m_lowp_8cpp.js	/^var validation_2_c_l_2_g_e_m_m_lowp_8cpp =$/;"	v
validation_2_c_l_2_h_o_g_descriptor_8cpp	documentation/validation_2_c_l_2_h_o_g_descriptor_8cpp.js	/^var validation_2_c_l_2_h_o_g_descriptor_8cpp =$/;"	v
validation_2_c_l_2_harris_corners_8cpp	documentation/validation_2_c_l_2_harris_corners_8cpp.js	/^var validation_2_c_l_2_harris_corners_8cpp =$/;"	v
validation_2_c_l_2_histogram_8cpp	documentation/validation_2_c_l_2_histogram_8cpp.js	/^var validation_2_c_l_2_histogram_8cpp =$/;"	v
validation_2_c_l_2_integral_image_8cpp	documentation/validation_2_c_l_2_integral_image_8cpp.js	/^var validation_2_c_l_2_integral_image_8cpp =$/;"	v
validation_2_c_l_2_l2_normalize_layer_8cpp	documentation/validation_2_c_l_2_l2_normalize_layer_8cpp.js	/^var validation_2_c_l_2_l2_normalize_layer_8cpp =$/;"	v
validation_2_c_l_2_magnitude_8cpp	documentation/validation_2_c_l_2_magnitude_8cpp.js	/^var validation_2_c_l_2_magnitude_8cpp =$/;"	v
validation_2_c_l_2_mean_std_dev_8cpp	documentation/validation_2_c_l_2_mean_std_dev_8cpp.js	/^var validation_2_c_l_2_mean_std_dev_8cpp =$/;"	v
validation_2_c_l_2_median3x3_8cpp	documentation/validation_2_c_l_2_median3x3_8cpp.js	/^var validation_2_c_l_2_median3x3_8cpp =$/;"	v
validation_2_c_l_2_min_max_location_8cpp	documentation/validation_2_c_l_2_min_max_location_8cpp.js	/^var validation_2_c_l_2_min_max_location_8cpp =$/;"	v
validation_2_c_l_2_normalization_layer_8cpp	documentation/validation_2_c_l_2_normalization_layer_8cpp.js	/^var validation_2_c_l_2_normalization_layer_8cpp =$/;"	v
validation_2_c_l_2_phase_8cpp	documentation/validation_2_c_l_2_phase_8cpp.js	/^var validation_2_c_l_2_phase_8cpp =$/;"	v
validation_2_c_l_2_pooling_layer_8cpp	documentation/validation_2_c_l_2_pooling_layer_8cpp.js	/^var validation_2_c_l_2_pooling_layer_8cpp =$/;"	v
validation_2_c_l_2_quantization_layer_8cpp	documentation/validation_2_c_l_2_quantization_layer_8cpp.js	/^var validation_2_c_l_2_quantization_layer_8cpp =$/;"	v
validation_2_c_l_2_reshape_layer_8cpp	documentation/validation_2_c_l_2_reshape_layer_8cpp.js	/^var validation_2_c_l_2_reshape_layer_8cpp =$/;"	v
validation_2_c_l_2_s_y_s_t_e_m_2_alex_net_8cpp	documentation/validation_2_c_l_2_s_y_s_t_e_m_2_alex_net_8cpp.js	/^var validation_2_c_l_2_s_y_s_t_e_m_2_alex_net_8cpp =$/;"	v
validation_2_c_l_2_s_y_s_t_e_m_2_le_net5_8cpp	documentation/validation_2_c_l_2_s_y_s_t_e_m_2_le_net5_8cpp.js	/^var validation_2_c_l_2_s_y_s_t_e_m_2_le_net5_8cpp =$/;"	v
validation_2_c_l_2_scale_8cpp	documentation/validation_2_c_l_2_scale_8cpp.js	/^var validation_2_c_l_2_scale_8cpp =$/;"	v
validation_2_c_l_2_scale_8cpp.xhtml#ae72c3e42124a897611899895e37d9450	documentation/navtreeindex52.js	/^"validation_2_c_l_2_scale_8cpp.xhtml#ae72c3e42124a897611899895e37d9450":[6,0,4,6,0,69,3],$/;"	p	class:NAVTREEINDEX52
validation_2_c_l_2_softmax_layer_8cpp	documentation/validation_2_c_l_2_softmax_layer_8cpp.js	/^var validation_2_c_l_2_softmax_layer_8cpp =$/;"	v
validation_2_c_l_2_transpose_8cpp	documentation/validation_2_c_l_2_transpose_8cpp.js	/^var validation_2_c_l_2_transpose_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_activation_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_activation_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_activation_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_batch_normalization_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_batch_normalization_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_batch_normalization_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_convolution_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_convolution_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_convolution_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_depth_concatenate_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_depth_concatenate_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_depth_concatenate_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_depthwise_convolution_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_depthwise_convolution_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_depthwise_convolution_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_direct_convolution_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_direct_convolution_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_direct_convolution_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_fully_connected_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_fully_connected_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_fully_connected_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_g_e_m_m_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_g_e_m_m_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_g_e_m_m_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_normalization_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_normalization_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_normalization_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_normalize_planar_y_u_v_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_normalize_planar_y_u_v_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_normalize_planar_y_u_v_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_pooling_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_pooling_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_pooling_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_scale_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_scale_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_scale_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_softmax_layer_8cpp =$/;"	v
validation_2_g_l_e_s___c_o_m_p_u_t_e_2_transpose_8cpp	documentation/validation_2_g_l_e_s___c_o_m_p_u_t_e_2_transpose_8cpp.js	/^var validation_2_g_l_e_s___c_o_m_p_u_t_e_2_transpose_8cpp =$/;"	v
validation_2_n_e_o_n_2_activation_layer_8cpp	documentation/validation_2_n_e_o_n_2_activation_layer_8cpp.js	/^var validation_2_n_e_o_n_2_activation_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_batch_normalization_layer_8cpp	documentation/validation_2_n_e_o_n_2_batch_normalization_layer_8cpp.js	/^var validation_2_n_e_o_n_2_batch_normalization_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_convolution_layer_8cpp	documentation/validation_2_n_e_o_n_2_convolution_layer_8cpp.js	/^var validation_2_n_e_o_n_2_convolution_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_depth_concatenate_layer_8cpp	documentation/validation_2_n_e_o_n_2_depth_concatenate_layer_8cpp.js	/^var validation_2_n_e_o_n_2_depth_concatenate_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_depthwise_convolution_layer_8cpp	documentation/validation_2_n_e_o_n_2_depthwise_convolution_layer_8cpp.js	/^var validation_2_n_e_o_n_2_depthwise_convolution_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_depthwise_separable_convolution_layer_8cpp	documentation/validation_2_n_e_o_n_2_depthwise_separable_convolution_layer_8cpp.js	/^var validation_2_n_e_o_n_2_depthwise_separable_convolution_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_dequantization_layer_8cpp	documentation/validation_2_n_e_o_n_2_dequantization_layer_8cpp.js	/^var validation_2_n_e_o_n_2_dequantization_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_direct_convolution_layer_8cpp	documentation/validation_2_n_e_o_n_2_direct_convolution_layer_8cpp.js	/^var validation_2_n_e_o_n_2_direct_convolution_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_equalize_histogram_8cpp	documentation/validation_2_n_e_o_n_2_equalize_histogram_8cpp.js	/^var validation_2_n_e_o_n_2_equalize_histogram_8cpp =$/;"	v
validation_2_n_e_o_n_2_floor_8cpp	documentation/validation_2_n_e_o_n_2_floor_8cpp.js	/^var validation_2_n_e_o_n_2_floor_8cpp =$/;"	v
validation_2_n_e_o_n_2_fully_connected_layer_8cpp	documentation/validation_2_n_e_o_n_2_fully_connected_layer_8cpp.js	/^var validation_2_n_e_o_n_2_fully_connected_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_g_e_m_m_8cpp	documentation/validation_2_n_e_o_n_2_g_e_m_m_8cpp.js	/^var validation_2_n_e_o_n_2_g_e_m_m_8cpp =$/;"	v
validation_2_n_e_o_n_2_g_e_m_m_8cpp.xhtml#ac2c6b9d9c2494e45cb83313f09519dc4	documentation/navtreeindex53.js	/^"validation_2_n_e_o_n_2_g_e_m_m_8cpp.xhtml#ac2c6b9d9c2494e45cb83313f09519dc4":[6,0,4,6,3,41,9],$/;"	p	class:NAVTREEINDEX53
validation_2_n_e_o_n_2_g_e_m_m_lowp_8cpp	documentation/validation_2_n_e_o_n_2_g_e_m_m_lowp_8cpp.js	/^var validation_2_n_e_o_n_2_g_e_m_m_lowp_8cpp =$/;"	v
validation_2_n_e_o_n_2_h_o_g_descriptor_8cpp	documentation/validation_2_n_e_o_n_2_h_o_g_descriptor_8cpp.js	/^var validation_2_n_e_o_n_2_h_o_g_descriptor_8cpp =$/;"	v
validation_2_n_e_o_n_2_harris_corners_8cpp	documentation/validation_2_n_e_o_n_2_harris_corners_8cpp.js	/^var validation_2_n_e_o_n_2_harris_corners_8cpp =$/;"	v
validation_2_n_e_o_n_2_histogram_8cpp	documentation/validation_2_n_e_o_n_2_histogram_8cpp.js	/^var validation_2_n_e_o_n_2_histogram_8cpp =$/;"	v
validation_2_n_e_o_n_2_integral_image_8cpp	documentation/validation_2_n_e_o_n_2_integral_image_8cpp.js	/^var validation_2_n_e_o_n_2_integral_image_8cpp =$/;"	v
validation_2_n_e_o_n_2_l2_normalize_layer_8cpp	documentation/validation_2_n_e_o_n_2_l2_normalize_layer_8cpp.js	/^var validation_2_n_e_o_n_2_l2_normalize_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_magnitude_8cpp	documentation/validation_2_n_e_o_n_2_magnitude_8cpp.js	/^var validation_2_n_e_o_n_2_magnitude_8cpp =$/;"	v
validation_2_n_e_o_n_2_mean_std_dev_8cpp	documentation/validation_2_n_e_o_n_2_mean_std_dev_8cpp.js	/^var validation_2_n_e_o_n_2_mean_std_dev_8cpp =$/;"	v
validation_2_n_e_o_n_2_median3x3_8cpp	documentation/validation_2_n_e_o_n_2_median3x3_8cpp.js	/^var validation_2_n_e_o_n_2_median3x3_8cpp =$/;"	v
validation_2_n_e_o_n_2_min_max_location_8cpp	documentation/validation_2_n_e_o_n_2_min_max_location_8cpp.js	/^var validation_2_n_e_o_n_2_min_max_location_8cpp =$/;"	v
validation_2_n_e_o_n_2_normalization_layer_8cpp	documentation/validation_2_n_e_o_n_2_normalization_layer_8cpp.js	/^var validation_2_n_e_o_n_2_normalization_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_phase_8cpp	documentation/validation_2_n_e_o_n_2_phase_8cpp.js	/^var validation_2_n_e_o_n_2_phase_8cpp =$/;"	v
validation_2_n_e_o_n_2_pooling_layer_8cpp	documentation/validation_2_n_e_o_n_2_pooling_layer_8cpp.js	/^var validation_2_n_e_o_n_2_pooling_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_quantization_layer_8cpp	documentation/validation_2_n_e_o_n_2_quantization_layer_8cpp.js	/^var validation_2_n_e_o_n_2_quantization_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_reshape_layer_8cpp	documentation/validation_2_n_e_o_n_2_reshape_layer_8cpp.js	/^var validation_2_n_e_o_n_2_reshape_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_s_y_s_t_e_m_2_alex_net_8cpp	documentation/validation_2_n_e_o_n_2_s_y_s_t_e_m_2_alex_net_8cpp.js	/^var validation_2_n_e_o_n_2_s_y_s_t_e_m_2_alex_net_8cpp =$/;"	v
validation_2_n_e_o_n_2_s_y_s_t_e_m_2_le_net5_8cpp	documentation/validation_2_n_e_o_n_2_s_y_s_t_e_m_2_le_net5_8cpp.js	/^var validation_2_n_e_o_n_2_s_y_s_t_e_m_2_le_net5_8cpp =$/;"	v
validation_2_n_e_o_n_2_scale_8cpp	documentation/validation_2_n_e_o_n_2_scale_8cpp.js	/^var validation_2_n_e_o_n_2_scale_8cpp =$/;"	v
validation_2_n_e_o_n_2_softmax_layer_8cpp	documentation/validation_2_n_e_o_n_2_softmax_layer_8cpp.js	/^var validation_2_n_e_o_n_2_softmax_layer_8cpp =$/;"	v
validation_2_n_e_o_n_2_transpose_8cpp	documentation/validation_2_n_e_o_n_2_transpose_8cpp.js	/^var validation_2_n_e_o_n_2_transpose_8cpp =$/;"	v
validation_2reference_2_activation_layer_8cpp	documentation/validation_2reference_2_activation_layer_8cpp.js	/^var validation_2reference_2_activation_layer_8cpp =$/;"	v
validation_2reference_2_batch_normalization_layer_8cpp	documentation/validation_2reference_2_batch_normalization_layer_8cpp.js	/^var validation_2reference_2_batch_normalization_layer_8cpp =$/;"	v
validation_2reference_2_convolution_layer_8cpp	documentation/validation_2reference_2_convolution_layer_8cpp.js	/^var validation_2reference_2_convolution_layer_8cpp =$/;"	v
validation_2reference_2_depth_concatenate_layer_8cpp	documentation/validation_2reference_2_depth_concatenate_layer_8cpp.js	/^var validation_2reference_2_depth_concatenate_layer_8cpp =$/;"	v
validation_2reference_2_depthwise_convolution_layer_8cpp	documentation/validation_2reference_2_depthwise_convolution_layer_8cpp.js	/^var validation_2reference_2_depthwise_convolution_layer_8cpp =$/;"	v
validation_2reference_2_depthwise_separable_convolution_layer_8cpp	documentation/validation_2reference_2_depthwise_separable_convolution_layer_8cpp.js	/^var validation_2reference_2_depthwise_separable_convolution_layer_8cpp =$/;"	v
validation_2reference_2_dequantization_layer_8cpp	documentation/validation_2reference_2_dequantization_layer_8cpp.js	/^var validation_2reference_2_dequantization_layer_8cpp =$/;"	v
validation_2reference_2_equalize_histogram_8cpp	documentation/validation_2reference_2_equalize_histogram_8cpp.js	/^var validation_2reference_2_equalize_histogram_8cpp =$/;"	v
validation_2reference_2_flatten_layer_8cpp	documentation/validation_2reference_2_flatten_layer_8cpp.js	/^var validation_2reference_2_flatten_layer_8cpp =$/;"	v
validation_2reference_2_floor_8cpp	documentation/validation_2reference_2_floor_8cpp.js	/^var validation_2reference_2_floor_8cpp =$/;"	v
validation_2reference_2_fully_connected_layer_8cpp	documentation/validation_2reference_2_fully_connected_layer_8cpp.js	/^var validation_2reference_2_fully_connected_layer_8cpp =$/;"	v
validation_2reference_2_g_e_m_m_8cpp	documentation/validation_2reference_2_g_e_m_m_8cpp.js	/^var validation_2reference_2_g_e_m_m_8cpp =$/;"	v
validation_2reference_2_g_e_m_m_8cpp.xhtml#acc8055ed1ae62ec87a4b389047c1464a	documentation/navtreeindex54.js	/^"validation_2reference_2_g_e_m_m_8cpp.xhtml#acc8055ed1ae62ec87a4b389047c1464a":[6,0,4,6,4,75,1],$/;"	p	class:NAVTREEINDEX54
validation_2reference_2_g_e_m_m_lowp_8cpp	documentation/validation_2reference_2_g_e_m_m_lowp_8cpp.js	/^var validation_2reference_2_g_e_m_m_lowp_8cpp =$/;"	v
validation_2reference_2_h_o_g_descriptor_8cpp	documentation/validation_2reference_2_h_o_g_descriptor_8cpp.js	/^var validation_2reference_2_h_o_g_descriptor_8cpp =$/;"	v
validation_2reference_2_histogram_8cpp	documentation/validation_2reference_2_histogram_8cpp.js	/^var validation_2reference_2_histogram_8cpp =$/;"	v
validation_2reference_2_integral_image_8cpp	documentation/validation_2reference_2_integral_image_8cpp.js	/^var validation_2reference_2_integral_image_8cpp =$/;"	v
validation_2reference_2_l2_normalize_layer_8cpp	documentation/validation_2reference_2_l2_normalize_layer_8cpp.js	/^var validation_2reference_2_l2_normalize_layer_8cpp =$/;"	v
validation_2reference_2_magnitude_8cpp	documentation/validation_2reference_2_magnitude_8cpp.js	/^var validation_2reference_2_magnitude_8cpp =$/;"	v
validation_2reference_2_mean_std_dev_8cpp	documentation/validation_2reference_2_mean_std_dev_8cpp.js	/^var validation_2reference_2_mean_std_dev_8cpp =$/;"	v
validation_2reference_2_median3x3_8cpp	documentation/validation_2reference_2_median3x3_8cpp.js	/^var validation_2reference_2_median3x3_8cpp =$/;"	v
validation_2reference_2_min_max_location_8cpp	documentation/validation_2reference_2_min_max_location_8cpp.js	/^var validation_2reference_2_min_max_location_8cpp =$/;"	v
validation_2reference_2_normalization_layer_8cpp	documentation/validation_2reference_2_normalization_layer_8cpp.js	/^var validation_2reference_2_normalization_layer_8cpp =$/;"	v
validation_2reference_2_normalize_planar_y_u_v_layer_8cpp	documentation/validation_2reference_2_normalize_planar_y_u_v_layer_8cpp.js	/^var validation_2reference_2_normalize_planar_y_u_v_layer_8cpp =$/;"	v
validation_2reference_2_phase_8cpp	documentation/validation_2reference_2_phase_8cpp.js	/^var validation_2reference_2_phase_8cpp =$/;"	v
validation_2reference_2_pooling_layer_8cpp	documentation/validation_2reference_2_pooling_layer_8cpp.js	/^var validation_2reference_2_pooling_layer_8cpp =$/;"	v
validation_2reference_2_quantization_layer_8cpp	documentation/validation_2reference_2_quantization_layer_8cpp.js	/^var validation_2reference_2_quantization_layer_8cpp =$/;"	v
validation_2reference_2_reshape_layer_8cpp	documentation/validation_2reference_2_reshape_layer_8cpp.js	/^var validation_2reference_2_reshape_layer_8cpp =$/;"	v
validation_2reference_2_scale_8cpp	documentation/validation_2reference_2_scale_8cpp.js	/^var validation_2reference_2_scale_8cpp =$/;"	v
validation_2reference_2_softmax_layer_8cpp	documentation/validation_2reference_2_softmax_layer_8cpp.js	/^var validation_2reference_2_softmax_layer_8cpp =$/;"	v
validation_2reference_2_transpose_8cpp	documentation/validation_2reference_2_transpose_8cpp.js	/^var validation_2reference_2_transpose_8cpp =$/;"	v
valpha	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    const ExactType valpha;$/;"	m	struct:arm_compute::detail::brelu
valpha	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    const ExactType valpha;$/;"	m	struct:arm_compute::detail::lubrelu
value	arm_compute/core/GPUTarget.h	/^    static constexpr bool value = true; \/**< Enabled. *\/$/;"	m	struct:arm_compute::GPUTarget::enable_bitwise_ops
value	arm_compute/core/Helpers.h	/^    static constexpr bool value = false; \/**< Disabled *\/$/;"	m	struct:arm_compute::enable_bitwise_ops
value	arm_compute/core/PixelValue.h	/^        } value;$/;"	m	class:arm_compute::PixelValue	typeref:union:arm_compute::PixelValue::__anon1
value	tests/framework/command_line/EnumListOption.h	/^inline const std::vector<T> &EnumListOption<T>::value() const$/;"	f	class:arm_compute::test::framework::EnumListOption
value	tests/framework/command_line/EnumOption.h	/^inline const T &EnumOption<T>::value() const$/;"	f	class:arm_compute::test::framework::EnumOption
value	tests/framework/command_line/ListOption.h	/^inline const std::vector<T> &ListOption<T>::value() const$/;"	f	class:arm_compute::test::framework::ListOption
value	tests/framework/command_line/SimpleOption.h	/^inline const T &SimpleOption<T>::value() const$/;"	f	class:arm_compute::test::framework::SimpleOption
value	tests/framework/instruments/Measurement.h	/^    const Value &value() const$/;"	f	struct:arm_compute::test::framework::Measurement
value	tests/framework/instruments/hwc.hpp	/^    void    *value;$/;"	m	union:mali_userspace::__anon390::kbase_pointer
value	tests/validation/reference/Derivative.cpp	/^    const static DataType value = DataType::S16;$/;"	m	struct:arm_compute::test::validation::reference::__anon534::data_type	file:
value	tests/validation/reference/Scharr.cpp	/^    const static DataType value = DataType::S16;$/;"	m	struct:arm_compute::test::validation::reference::__anon547::data_type	file:
value	tests/validation/reference/Sobel.cpp	/^    const static DataType value = DataType::S16;$/;"	m	struct:arm_compute::test::validation::reference::__anon548::data_type	file:
value	tests/validation/reference/Sobel.cpp	/^    const static DataType value = DataType::S32;$/;"	m	struct:arm_compute::test::validation::reference::__anon548::data_type	file:
value_	include/half/half.hpp	/^			float value_;$/;"	m	namespace:half_float::detail
value_type	include/CL/cl2.hpp	/^    typedef T value_type;$/;"	t	class:cl::SVMAllocator
value_type	include/CL/cl2.hpp	/^    typedef void value_type;$/;"	t	class:cl::SVMAllocator
values	tests/framework/instruments/MaliCounter.h	/^        std::map<int, uint64_t> values;$/;"	m	struct:arm_compute::test::framework::MaliCounter::core_counters
varname	scripts/caffe_data_extractor.py	/^                varname = varname.replace(os.path.sep, '_')$/;"	v
varname	scripts/caffe_data_extractor.py	/^            varname = outname$/;"	v
varname	scripts/tensorflow_data_extractor.py	/^                varname = varname.replace(os.path.sep, '_')$/;"	v
varname	scripts/tensorflow_data_extractor.py	/^            varname = t.name$/;"	v
vbeta	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    const ExactType vbeta;$/;"	m	struct:arm_compute::detail::lubrelu
vcvt	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^float32x4x4_t vcvt<float32x4x4_t>(uint8x16_t vec)$/;"	f	namespace:arm_compute
vcvt	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^uint8x16_t vcvt<uint8x16_t>(float32x4x4_t vec)$/;"	f	namespace:arm_compute
vdup_n	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^float32x4x4_t vdup_n<float32x4x4_t>(float val)$/;"	f	namespace:arm_compute
vec4_min	src/core/GLES_COMPUTE/cs_shaders/softmax_layer.cs	/^const vec4  vec4_min  = vec4(float_min);$/;"	v
vec_	include/CL/cl.hpp	/^        const vector<T,N> *vec_;$/;"	m	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
vec_size_of	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^constexpr size_t vec_size_of(const V &vec)$/;"	f	namespace:arm_compute
vector	include/CL/cl.hpp	/^    vector() :  $/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
vector	include/CL/cl.hpp	/^    vector(const vector<T, N>& vec) : $/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
vector	include/CL/cl.hpp	/^    vector(unsigned int size, const T& val = T()) :$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
vector_128_tag	arm_compute/core/NEON/wrapper/traits.h	/^struct vector_128_tag {};$/;"	s	namespace:arm_compute::wrapper::traits
vector_64_tag	arm_compute/core/NEON/wrapper/traits.h	/^struct vector_64_tag {};$/;"	s	namespace:arm_compute::wrapper::traits
vector_accumulate_weighted	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline float16x8x2_t vector_accumulate_weighted(const float16x8x2_t &vec0, const float16x8x2_t &vec1, float16x8_t scale_val, float16x8_t scale_val2)$/;"	f	namespace:fp16
vector_accumulate_weighted	src/core/NEON/kernels/NEAccumulateKernel.cpp	/^inline float32x4x4_t vector_accumulate_weighted(const float32x4x4_t &vector_input, float32x4x4_t vector_output, float32x4_t scale_val, float32x4_t scale_val2)$/;"	f	namespace:__anon239
vector_matrix_multiply	tests/validation/reference/FullyConnectedLayer.cpp	/^void vector_matrix_multiply(const SimpleTensor<T> &src, const SimpleTensor<T> &weights, const SimpleTensor<TB> &bias, SimpleTensor<T> &dst, int offset_src, int offset_dst, int cols_weights,$/;"	f	namespace:arm_compute::test::validation::reference::__anon536
vector_matrix_multiply	tests/validation/reference/FullyConnectedLayer.cpp	/^void vector_matrix_multiply(const SimpleTensor<uint8_t> &src, const SimpleTensor<uint8_t> &weights, const SimpleTensor<int32_t> &bias, SimpleTensor<uint8_t> &dst, int offset_src, int offset_dst,$/;"	f	namespace:arm_compute::test::validation::reference::__anon536
vector_matrix_multiply_f16	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void vector_matrix_multiply_f16(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, const ThreadInfo &info, float alpha)$/;"	f	namespace:__anon269
vector_matrix_multiply_f16	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^void vector_matrix_multiply_f16(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, const ThreadInfo &info)$/;"	f	namespace:__anon276
vector_matrix_multiply_f32	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void vector_matrix_multiply_f32(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, const ThreadInfo &info, float alpha)$/;"	f	namespace:__anon269
vector_matrix_multiply_f32	src/core/NEON/kernels/NELocallyConnectedMatrixMultiplyKernel.cpp	/^void vector_matrix_multiply_f32(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, const ThreadInfo &info)$/;"	f	namespace:__anon276
vector_matrix_multiply_qs16	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void vector_matrix_multiply_qs16(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, const ThreadInfo &info, float alpha)$/;"	f	namespace:__anon269
vector_matrix_multiply_qs8	src/core/NEON/kernels/NEGEMMMatrixMultiplyKernel.cpp	/^void vector_matrix_multiply_qs8(const ITensor *input0, const ITensor *input1, ITensor *output, const Window &window, const ThreadInfo &info, float alpha)$/;"	f	namespace:__anon269
vector_matrix_multiply_s8	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^void inline vector_matrix_multiply_s8(Iterator &ina, Iterator &inb, Iterator &out, int width_a, int width_b, size_t stride_b, const Window &window)$/;"	f	namespace:arm_compute::__anon261
vector_matrix_multiply_u8	src/core/NEON/kernels/NEGEMMLowpMatrixMultiplyKernel.cpp	/^void inline vector_matrix_multiply_u8(Iterator &ina, Iterator &inb, Iterator &out, int width_a, int width_b, size_t stride_b, const Window &window)$/;"	f	namespace:arm_compute::__anon261
vector_offset	src/core/CL/cl_kernels/helpers.h	/^__global inline const uchar *vector_offset(const Vector *vec, int x)$/;"	f
vector_offset_in_bytes	src/core/GLES_COMPUTE/cs_shaders/helpers_cs.h	/^uint vector_offset_in_bytes(VectorIterator vector_iter, int x)$/;"	f
vector_to_tensor	src/core/NEON/kernels/NEDepthwiseVectorToTensorKernel.cpp	/^void NEDepthwiseVectorToTensorKernel::vector_to_tensor(const Window &window)$/;"	f	class:NEDepthwiseVectorToTensorKernel
version_status	tests/framework/instruments/hwc.hpp	/^    uint16_t version_status;$/;"	m	struct:mali_userspace::mali_base_gpu_core_props
vexp	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^float32x4x4_t vexp(float32x4x4_t vec)$/;"	f	namespace:arm_compute
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(ActivationLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(BatchNormalizationLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(ConvolutionLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(DepthConcatenateLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(DepthwiseConvolutionLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(EltwiseLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(NormalizationLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
visit	src/graph/printers/DotGraphPrinter.cpp	/^void DotGraphVisitor::visit(PoolingLayerNode &n)$/;"	f	class:arm_compute::graph::DotGraphVisitor
vload2_src_unpack12_half	src/core/GLES_COMPUTE/cs_shaders/direct_convolution3x3.cs	/^vec4[3] vload2_src_unpack12_half(uint offset)$/;"	m
vmul_n	src/core/NEON/kernels/NESoftmaxLayerKernel.cpp	/^float32x4x4_t vmul_n(float32x4x4_t vec, float val)$/;"	f	namespace:arm_compute
vqabd2q_s16	src/core/NEON/kernels/NEAbsoluteDifferenceKernel.cpp	/^inline int16x8x2_t vqabd2q_s16(const int16x8x2_t &v1, const int16x8x2_t &v2)$/;"	f	namespace:__anon238
vqadd2q_s16	src/core/NEON/kernels/NEArithmeticAdditionKernel.cpp	/^inline int16x8x2_t vqadd2q_s16(const int16x8x2_t &a, const int16x8x2_t &b)$/;"	f	namespace:__anon241
vsub2q_f16	src/core/NEON/kernels/NEArithmeticSubtractionKernel.cpp	/^inline float16x8x2_t vsub2q_f16(const float16x8x2_t &a, const float16x8x2_t &b)$/;"	f	namespace:__anon242
vzero	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    const ExactType vzero;$/;"	m	struct:arm_compute::detail::brelu
vzero	arm_compute/core/NEON/kernels/detail/NEActivationFunctionDetail.h	/^    const ExactType vzero;$/;"	m	struct:arm_compute::detail::relu
w	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
w	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon73::__anon74
w	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon77::__anon78
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon13::__anon14
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon9::__anon10
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon169::__anon170
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon173::__anon174
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon153::__anon154
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon157::__anon158
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon89::__anon90
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon93::__anon94
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon121::__anon122
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon125::__anon126
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon41::__anon42
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon45::__anon46
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon25::__anon26
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon29::__anon30
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon105::__anon106
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon109::__anon110
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon137::__anon138
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon141::__anon142
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon57::__anon58
w	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon61::__anon62
wait	include/CL/cl.hpp	/^    cl_int wait() const$/;"	f	class:cl::Event
wait	include/CL/cl2.hpp	/^    cl_int wait() const$/;"	f	class:cl::Event
wait	src/runtime/CPP/CPPScheduler.cpp	/^void Thread::wait()$/;"	f	class:arm_compute::Thread
wait	support/Semaphore.h	/^    inline void wait()$/;"	f	class:arm_compute::Semaphore
waitForEvents	include/CL/cl.hpp	/^    waitForEvents(const VECTOR_CLASS<Event>& events)$/;"	f	class:cl::Event
waitForEvents	include/CL/cl2.hpp	/^    waitForEvents(const vector<Event>& events)$/;"	f	class:cl::Event
wait_next_event	tests/framework/instruments/MaliCounter.cpp	/^void MaliCounter::wait_next_event()$/;"	f	class:arm_compute::test::framework::MaliCounter
warp__affine_8cl	documentation/warp__affine_8cl.js	/^var warp__affine_8cl =$/;"	v
warp__helpers_8h	documentation/warp__helpers_8h.js	/^var warp__helpers_8h =$/;"	v
warp__perspective_8cl	documentation/warp__perspective_8cl.js	/^var warp__perspective_8cl =$/;"	v
warp_affine	tests/validation/reference/WarpAffine.cpp	/^SimpleTensor<T> warp_affine(const SimpleTensor<T> &src, SimpleTensor<T> &valid_mask, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
warp_constant	src/core/NEON/kernels/NEWarpKernel.cpp	/^void NEWarpAffineKernel<interpolation>::warp_constant(const Window &window)$/;"	f	class:NEWarpAffineKernel
warp_constant	src/core/NEON/kernels/NEWarpKernel.cpp	/^void NEWarpPerspectiveKernel<interpolation>::warp_constant(const Window &window)$/;"	f	class:NEWarpPerspectiveKernel
warp_perspective	tests/validation/reference/WarpPerspective.cpp	/^SimpleTensor<T> warp_perspective(const SimpleTensor<T> &src, SimpleTensor<T> &valid_mask, const float *matrix, InterpolationPolicy policy, BorderMode border_mode, uint8_t constant_border_value)$/;"	f	namespace:arm_compute::test::validation::reference
warp_replicate	src/core/NEON/kernels/NEWarpKernel.cpp	/^void NEWarpAffineKernel<interpolation>::warp_replicate(const Window &window)$/;"	f	class:NEWarpAffineKernel
warp_replicate	src/core/NEON/kernels/NEWarpKernel.cpp	/^void NEWarpPerspectiveKernel<interpolation>::warp_replicate(const Window &window)$/;"	f	class:NEWarpPerspectiveKernel
warp_undefined	src/core/NEON/kernels/NEWarpKernel.cpp	/^void NEWarpAffineKernel<interpolation>::warp_undefined(const Window &window)$/;"	f	class:NEWarpAffineKernel
warp_undefined	src/core/NEON/kernels/NEWarpKernel.cpp	/^void NEWarpPerspectiveKernel<interpolation>::warp_undefined(const Window &window)$/;"	f	class:NEWarpPerspectiveKernel
weights_reshape	src/core/NEON/kernels/NEDepthwiseWeightsReshapeKernel.cpp	/^void weights_reshape(const ITensor *input, const ITensor *bias, ITensor *output, const Window &window)$/;"	f	namespace:__anon254
weights_reshape	src/core/NEON/kernels/NEWeightsReshapeKernel.cpp	/^void weights_reshape(const ITensor *input, const ITensor *bias, ITensor *output, const Window &window)$/;"	f	namespace:__anon300
what	include/CL/cl.hpp	/^    virtual const char * what() const throw ()$/;"	f	class:cl::Error
what	include/CL/cl2.hpp	/^        virtual const char * what() const throw ()$/;"	f	class:cl::Error
width	arm_compute/core/Size2D.h	/^    size_t width  = {}; \/**< Width of the image region or rectangle *\/$/;"	m	class:arm_compute::Size2D
width	arm_compute/core/Types.h	/^    uint16_t width;  \/**< Width of the rectangle *\/$/;"	m	struct:arm_compute::Rectangle
width	include/linux/EGL/fbdev_window.h	/^	unsigned int width;$/;"	m	struct:fbdev_pixmap
width	include/linux/EGL/fbdev_window.h	/^	unsigned short width;$/;"	m	struct:fbdev_window
width	src/core/CL/cl_kernels/types.h	/^    ushort width;     \/**< Width of the detection window *\/$/;"	m	struct:DetectionWindow
width	src/core/MultiImageInfo.cpp	/^unsigned int MultiImageInfo::width() const$/;"	f	class:MultiImageInfo
width	src/core/PyramidInfo.cpp	/^size_t PyramidInfo::width() const$/;"	f	class:PyramidInfo
width	utils/Utils.h	/^    unsigned int width() const$/;"	f	class:arm_compute::utils::PPMLoader
widthconcatenate_layer	tests/validation/reference/WidthConcatenateLayer.cpp	/^SimpleTensor<T> widthconcatenate_layer(const std::vector<SimpleTensor<T>> &srcs)$/;"	f	namespace:arm_compute::test::validation::reference
window	src/core/IDistribution1D.cpp	/^uint32_t IDistribution1D::window() const$/;"	f	class:IDistribution1D
window	src/core/IKernel.cpp	/^const Window &IKernel::window() const$/;"	f	class:IKernel
window_dimension	tests/Types.h	/^    size_t      window_dimension;$/;"	m	struct:arm_compute::OpticalFlowParameters
window_lut_default_size	arm_compute/runtime/NEON/functions/NEHistogram.h	/^    static constexpr unsigned int window_lut_default_size = 256;$/;"	m	class:arm_compute::NEHistogram
winograd	arm_compute/core/NEON/kernels/convolution/winograd/batched_blocked_gemm.hpp	/^namespace winograd$/;"	n
winograd	arm_compute/core/NEON/kernels/convolution/winograd/transforms/input.hpp	/^namespace winograd$/;"	n
winograd	arm_compute/core/NEON/kernels/convolution/winograd/transforms/output.hpp	/^namespace winograd$/;"	n
winograd	arm_compute/core/NEON/kernels/convolution/winograd/winograd_gemm.hpp	/^namespace winograd$/;"	n
winograd	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_3x3_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/input_2x2_5x5_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/input_4x4_3x3_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_3x3_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/output_2x2_5x5_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/output_4x4_3x3_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_3x3_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/weights_2x2_5x5_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd	src/core/NEON/kernels/convolution/winograd/transforms/weights_4x4_3x3_fp32.cpp	/^namespace winograd$/;"	n	file:
winograd_filter_transform	tests/validation/reference/Winograd.cpp	/^SimpleTensor<T> winograd_filter_transform(const SimpleTensor<T> &in, const TensorShape &output_shape, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::test::validation::reference
winograd_input_transform	tests/validation/reference/Winograd.cpp	/^SimpleTensor<T> winograd_input_transform(const SimpleTensor<T> &in, const TensorShape &output_shape, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::test::validation::reference
winograd_output_tile	src/runtime/CL/functions/CLWinogradConvolutionLayer.cpp	/^Size2D winograd_output_tile(const Size2D &input_dims, const Size2D &kernel_dims)$/;"	f	namespace:__anon317
winograd_output_tile	src/runtime/NEON/functions/NEWinogradConvolutionLayer.cpp	/^Size2D winograd_output_tile(const Size2D &input_dims, const Size2D &kernel_dims)$/;"	f	namespace:arm_compute::__anon326
winograd_output_transform	tests/validation/reference/Winograd.cpp	/^SimpleTensor<T> winograd_output_transform(const SimpleTensor<T> &in, const SimpleTensor<T> &b, const TensorShape &output_shape, const WinogradInfo &winograd_info)$/;"	f	namespace:arm_compute::test::validation::reference
worker_thread	src/runtime/CPP/CPPScheduler.cpp	/^void Thread::worker_thread()$/;"	f	class:arm_compute::Thread
wrapper	arm_compute/core/NEON/wrapper/intrinsics/and.h	/^namespace wrapper$/;"	n	namespace:arm_compute
wrapper	arm_compute/core/NEON/wrapper/intrinsics/dup_n.h	/^namespace wrapper$/;"	n	namespace:arm_compute
wrapper	arm_compute/core/NEON/wrapper/intrinsics/load.h	/^namespace wrapper$/;"	n	namespace:arm_compute
wrapper	arm_compute/core/NEON/wrapper/intrinsics/max.h	/^namespace wrapper$/;"	n	namespace:arm_compute
wrapper	arm_compute/core/NEON/wrapper/intrinsics/min.h	/^namespace wrapper$/;"	n	namespace:arm_compute
wrapper	arm_compute/core/NEON/wrapper/intrinsics/store.h	/^namespace wrapper$/;"	n	namespace:arm_compute
wrapper	arm_compute/core/NEON/wrapper/traits.h	/^namespace wrapper$/;"	n	namespace:arm_compute
write	include/half/half.hpp	/^			template<typename charT,typename traits> static std::basic_ostream<charT,traits>& write(std::basic_ostream<charT,traits> &out, float arg) { return out << arg; }$/;"	f	struct:detail::functions
write	tests/validation/FixedPoint.h	/^    static std::basic_ostream<T, traits> &write(std::basic_ostream<T, traits> &s, fixed_point<U> &x)$/;"	f	struct:arm_compute::test::fixed_point_arithmetic::detail::functions
writeCookie	documentation/resize.js	/^function writeCookie(cookie, val, expiration) $/;"	f
write_boolean	include/libnpy/npy.hpp	/^inline std::string write_boolean(bool b) {$/;"	f	namespace:npy::pyparse
write_header	include/libnpy/npy.hpp	/^inline void write_header(std::ostream& out, const std::string& descr, bool fortran_order, const std::vector<ndarray_len_t>& shape_v)$/;"	f	namespace:npy
write_header_dict	include/libnpy/npy.hpp	/^inline std::string write_header_dict(const std::string& descr, bool fortran_order, const std::vector<ndarray_len_t>& shape) {$/;"	f	namespace:npy
write_magic	include/libnpy/npy.hpp	/^inline void write_magic(std::ostream& ostream, unsigned char v_major=1, unsigned char v_minor=0) {$/;"	f	namespace:npy
write_tuple	include/libnpy/npy.hpp	/^inline std::string write_tuple(const std::vector<T>& v) {$/;"	f	namespace:npy::pyparse
x	arm_compute/core/Dimensions.h	/^    T x() const$/;"	f	class:arm_compute::Dimensions
x	arm_compute/core/Size2D.h	/^    size_t x() const$/;"	f	class:arm_compute::Size2D
x	arm_compute/core/Types.h	/^    int32_t x; \/**< X coordinates *\/$/;"	m	struct:arm_compute::Coordinates2D
x	arm_compute/core/Types.h	/^    uint16_t x;      \/**< Top-left x coordinate *\/$/;"	m	struct:arm_compute::Rectangle
x	arm_compute/core/Types.h	/^    uint32_t x; \/**< X coordinates *\/$/;"	m	struct:arm_compute::Coordinates3D
x	arm_compute/core/Window.h	/^    constexpr const Dimension &x() const$/;"	f	class:arm_compute::Window
x	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
x	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon73::__anon74
x	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon77::__anon78
x	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y; };$/;"	m	struct:__anon69::__anon70
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon13::__anon14
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon9::__anon10
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y; };$/;"	m	struct:__anon5::__anon6
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon169::__anon170
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon173::__anon174
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y; };$/;"	m	struct:__anon165::__anon166
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon153::__anon154
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon157::__anon158
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y; };$/;"	m	struct:__anon149::__anon150
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon89::__anon90
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon93::__anon94
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y; };$/;"	m	struct:__anon85::__anon86
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon121::__anon122
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon125::__anon126
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y; };$/;"	m	struct:__anon117::__anon118
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon41::__anon42
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon45::__anon46
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y; };$/;"	m	struct:__anon37::__anon38
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon25::__anon26
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon29::__anon30
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y; };$/;"	m	struct:__anon21::__anon22
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon105::__anon106
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon109::__anon110
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y; };$/;"	m	struct:__anon101::__anon102
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon137::__anon138
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon141::__anon142
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y; };$/;"	m	struct:__anon133::__anon134
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon57::__anon58
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon61::__anon62
x	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y; };$/;"	m	struct:__anon53::__anon54
x	src/core/CL/cl_kernels/types.h	/^    int   x;               \/**< The x coordinate. *\/$/;"	m	struct:Keypoint
x	src/core/CL/cl_kernels/types.h	/^    int x; \/**< The x coordinate. *\/$/;"	m	struct:Coordinates2D
x	src/core/CL/cl_kernels/types.h	/^    ushort x;         \/**< Top-left x coordinate *\/$/;"	m	struct:DetectionWindow
x0	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int x0(void)$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
xmax	src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp	/^        unsigned int xmax()$/;"	f	class:arm_gemm::GemmInterleaved::blockwalker
y	arm_compute/core/Dimensions.h	/^    T y() const$/;"	f	class:arm_compute::Dimensions
y	arm_compute/core/Size2D.h	/^    size_t y() const$/;"	f	class:arm_compute::Size2D
y	arm_compute/core/Types.h	/^    int32_t y; \/**< Y coordinates *\/$/;"	m	struct:arm_compute::Coordinates2D
y	arm_compute/core/Types.h	/^    uint16_t y;      \/**< Top-left y coordinate *\/$/;"	m	struct:arm_compute::Rectangle
y	arm_compute/core/Types.h	/^    uint32_t y; \/**< Y coordinates *\/$/;"	m	struct:arm_compute::Coordinates3D
y	arm_compute/core/Window.h	/^    constexpr const Dimension &y() const$/;"	f	class:arm_compute::Window
y	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
y	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon73::__anon74
y	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon77::__anon78
y	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y; };$/;"	m	struct:__anon69::__anon70
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon13::__anon14
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon9::__anon10
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y; };$/;"	m	struct:__anon5::__anon6
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon169::__anon170
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon173::__anon174
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y; };$/;"	m	struct:__anon165::__anon166
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon153::__anon154
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon157::__anon158
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y; };$/;"	m	struct:__anon149::__anon150
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon89::__anon90
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon93::__anon94
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y; };$/;"	m	struct:__anon85::__anon86
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon121::__anon122
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon125::__anon126
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y; };$/;"	m	struct:__anon117::__anon118
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon41::__anon42
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon45::__anon46
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y; };$/;"	m	struct:__anon37::__anon38
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon25::__anon26
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon29::__anon30
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y; };$/;"	m	struct:__anon21::__anon22
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon105::__anon106
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon109::__anon110
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y; };$/;"	m	struct:__anon101::__anon102
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon137::__anon138
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon141::__anon142
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y; };$/;"	m	struct:__anon133::__anon134
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon57::__anon58
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon61::__anon62
y	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y; };$/;"	m	struct:__anon53::__anon54
y	src/core/CL/cl_kernels/types.h	/^    int   y;               \/**< The y coordinate. *\/$/;"	m	struct:Keypoint
y	src/core/CL/cl_kernels/types.h	/^    int y; \/**< The y coordinate. *\/$/;"	m	struct:Coordinates2D
y	src/core/CL/cl_kernels/types.h	/^    ushort y;         \/**< Top-left y coordinate *\/$/;"	m	struct:DetectionWindow
yuv	arm_compute/core/PixelValue.h	/^            uint8_t  yuv[3];  \/**< 3 channels: Any YUV format *\/$/;"	m	union:arm_compute::PixelValue::__anon1
z	arm_compute/core/Dimensions.h	/^    T z() const$/;"	f	class:arm_compute::Dimensions
z	arm_compute/core/Types.h	/^    uint32_t z; \/**< Z coordinates *\/$/;"	m	struct:arm_compute::Coordinates3D
z	arm_compute/core/Window.h	/^    constexpr const Dimension &z() const$/;"	f	class:arm_compute::Window
z	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon81::__anon82
z	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon73::__anon74
z	include/CL/cl_platform.h	/^    __CL_ANON_STRUCT__ struct{ cl_half  x, y, z, w; };$/;"	m	struct:__anon77::__anon78
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon17::__anon18
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon13::__anon14
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_char  x, y, z, w; };$/;"	m	struct:__anon9::__anon10
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon177::__anon178
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon169::__anon170
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_double  x, y, z, w; };$/;"	m	struct:__anon173::__anon174
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon153::__anon154
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float   x, y, z, w; };$/;"	m	struct:__anon157::__anon158
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_float  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon161::__anon162
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon97::__anon98
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon89::__anon90
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_int  x, y, z, w; };$/;"	m	struct:__anon93::__anon94
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon129::__anon130
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon121::__anon122
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_long  x, y, z, w; };$/;"	m	struct:__anon125::__anon126
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon49::__anon50
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon41::__anon42
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_short  x, y, z, w; };$/;"	m	struct:__anon45::__anon46
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon33::__anon34
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon25::__anon26
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uchar  x, y, z, w; };$/;"	m	struct:__anon29::__anon30
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon113::__anon114
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon105::__anon106
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_uint  x, y, z, w; };$/;"	m	struct:__anon109::__anon110
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon145::__anon146
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon137::__anon138
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ulong  x, y, z, w; };$/;"	m	struct:__anon141::__anon142
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w, __spacer4, __spacer5, __spacer6, __spacer7, __spacer8, __spacer9, sa, sb, sc, sd, se, sf; };$/;"	m	struct:__anon65::__anon66
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon57::__anon58
z	include/CL/cl_platform.h	/^   __CL_ANON_STRUCT__ struct{ cl_ushort  x, y, z, w; };$/;"	m	struct:__anon61::__anon62
zero_u8	src/core/NEON/kernels/NENonLinearFilterKernel.cpp	/^const uint8x16_t zero_u8 = vdupq_n_u8(0);$/;"	m	namespace:arm_compute::__anon282	file:
zip	tests/framework/datasets/ZipDataset.h	/^ZipDataset<T, U> zip(T &&dataset1, U &&dataset2)$/;"	f	namespace:arm_compute::test::framework::dataset
~BlobMemoryPool	src/runtime/BlobMemoryPool.cpp	/^BlobMemoryPool::~BlobMemoryPool()$/;"	f	class:BlobMemoryPool
~BufferManager	src/core/NEON/kernels/arm_gemm/buffer_manager.hpp	/^    ~BufferManager()$/;"	f	class:arm_gemm::BufferManager
~CLAccessor	tests/CL/CLAccessor.h	/^inline CLAccessor::~CLAccessor()$/;"	f	class:arm_compute::test::CLAccessor
~CLArrayAccessor	tests/CL/CLArrayAccessor.h	/^    ~CLArrayAccessor()$/;"	f	class:arm_compute::test::CLArrayAccessor
~CLDeviceBackend	src/graph/backends/CL/CLDeviceBackend.cpp	/^CLDeviceBackend::~CLDeviceBackend()$/;"	f	class:arm_compute::graph::backends::CLDeviceBackend
~CLHOGAccessor	tests/CL/CLHOGAccessor.h	/^    ~CLHOGAccessor()$/;"	f	class:arm_compute::test::CLHOGAccessor
~CLLutAccessor	tests/CL/CLLutAccessor.h	/^    ~CLLutAccessor()$/;"	f	class:arm_compute::test::CLLutAccessor
~Context	include/CL/cl.hpp	/^    ~Context() { }$/;"	f	class:cl::Context
~Error	include/CL/cl.hpp	/^    ~Error() throw() {}$/;"	f	class:cl::Error
~Error	include/CL/cl2.hpp	/^        ~Error() throw() {}$/;"	f	class:cl::Error
~Event	include/CL/cl.hpp	/^    ~Event() { }$/;"	f	class:cl::Event
~FileHandler	src/core/utils/io/FileHandler.cpp	/^FileHandler::~FileHandler()$/;"	f	class:FileHandler
~GCAccessor	tests/GLES_COMPUTE/GCAccessor.h	/^inline GCAccessor::~GCAccessor()$/;"	f	class:arm_compute::test::GCAccessor
~GCKernel	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernel::~GCKernel() \/\/ NOLINT$/;"	f	class:GCKernel
~GCKernelLibrary	src/core/GLES_COMPUTE/GCKernelLibrary.cpp	/^GCKernelLibrary::~GCKernelLibrary()$/;"	f	class:GCKernelLibrary
~GCScheduler	src/runtime/GLES_COMPUTE/GCScheduler.cpp	/^GCScheduler::~GCScheduler()$/;"	f	class:GCScheduler
~GCTensorAllocator	src/runtime/GLES_COMPUTE/GCTensorAllocator.cpp	/^GCTensorAllocator::~GCTensorAllocator()$/;"	f	class:GCTensorAllocator
~GLBufferWrapper	arm_compute/runtime/GLES_COMPUTE/GCTensorAllocator.h	/^    ~GLBufferWrapper()$/;"	f	class:arm_compute::GLBufferWrapper
~GemmCommon	arm_compute/core/NEON/kernels/assembly/gemm_common.hpp	/^    virtual ~GemmCommon() { }$/;"	f	class:arm_gemm::GemmCommon
~ICLSVMMemoryRegion	src/runtime/CL/CLMemoryRegion.cpp	/^ICLSVMMemoryRegion::~ICLSVMMemoryRegion()$/;"	f	class:arm_compute::ICLSVMMemoryRegion
~INEWinogradLayerTransformInputKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    virtual ~INEWinogradLayerTransformInputKernel()$/;"	f	class:arm_compute::INEWinogradLayerTransformInputKernel
~INEWinogradLayerTransformOutputKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    virtual ~INEWinogradLayerTransformOutputKernel()$/;"	f	class:arm_compute::INEWinogradLayerTransformOutputKernel
~INEWinogradLayerTransformWeightsKernel	arm_compute/core/NEON/kernels/NEWinogradConvolutionLayerKernel.h	/^    virtual ~INEWinogradLayerTransformWeightsKernel()$/;"	f	class:arm_compute::INEWinogradLayerTransformWeightsKernel
~Kernel	include/CL/cl.hpp	/^    ~Kernel() { }$/;"	f	class:cl::Kernel
~MaliCounter	tests/framework/instruments/MaliCounter.cpp	/^MaliCounter::~MaliCounter()$/;"	f	class:arm_compute::test::framework::MaliCounter
~Memory	include/CL/cl.hpp	/^    ~Memory() {}$/;"	f	class:cl::Memory
~OffsetMemoryPool	src/runtime/OffsetMemoryPool.cpp	/^OffsetMemoryPool::~OffsetMemoryPool()$/;"	f	class:OffsetMemoryPool
~PMU	tests/framework/instruments/PMU.cpp	/^PMU::~PMU()$/;"	f	class:arm_compute::test::framework::PMU
~SVMAllocator	include/CL/cl2.hpp	/^    ~SVMAllocator()$/;"	f	class:cl::SVMAllocator
~Sampler	include/CL/cl.hpp	/^    ~Sampler() { }$/;"	f	class:cl::Sampler
~ScopedProfilerClass	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^        ~ScopedProfilerClass()$/;"	f	class:arm_gemm::profiler::ScopedProfilerClass
~Tensor4D	arm_compute/core/NEON/kernels/convolution/common/tensor.hpp	/^    ~Tensor4D() {$/;"	f	class:final
~TensorAllocator	src/runtime/TensorAllocator.cpp	/^TensorAllocator::~TensorAllocator()$/;"	f	class:TensorAllocator
~Thread	src/runtime/CPP/CPPScheduler.cpp	/^Thread::~Thread()$/;"	f	class:arm_compute::Thread
~Wrapper	include/CL/cl.hpp	/^    ~Wrapper()$/;"	f	class:cl::detail::Wrapper
~Wrapper	include/CL/cl2.hpp	/^    ~Wrapper()$/;"	f	class:cl::detail::Wrapper
~iterator	include/CL/cl.hpp	/^        ~iterator(void) {}$/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED::iterator
~profiler	src/core/NEON/kernels/arm_gemm/profiler.hpp	/^    ~profiler()$/;"	f	class:arm_gemm::profiler
~vector	include/CL/cl.hpp	/^    ~vector() $/;"	f	class:cl::CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED
